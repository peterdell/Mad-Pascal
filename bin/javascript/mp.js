var pas = { $libimports: {}};

var rtl = {

  version: 30001,

  quiet: false,
  debug_load_units: false,
  debug_rtti: false,

  $res : {},

  debug: function(){
    if (rtl.quiet || !console || !console.log) return;
    console.log(arguments);
  },

  error: function(s){
    rtl.debug('Error: ',s);
    throw s;
  },

  warn: function(s){
    rtl.debug('Warn: ',s);
  },

  checkVersion: function(v){
    if (rtl.version != v) throw "expected rtl version "+v+", but found "+rtl.version;
  },

  hiInt: Math.pow(2,53),

  hasString: function(s){
    return rtl.isString(s) && (s.length>0);
  },

  isArray: function(a) {
    return Array.isArray(a);
  },

  isFunction: function(f){
    return typeof(f)==="function";
  },

  isModule: function(m){
    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);
  },

  isImplementation: function(m){
    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);
  },

  isNumber: function(n){
    return typeof(n)==="number";
  },

  isObject: function(o){
    var s=typeof(o);
    return (typeof(o)==="object") && (o!=null);
  },

  isString: function(s){
    return typeof(s)==="string";
  },

  getNumber: function(n){
    return typeof(n)==="number"?n:NaN;
  },

  getChar: function(c){
    return ((typeof(c)==="string") && (c.length===1)) ? c : "";
  },

  getObject: function(o){
    return ((typeof(o)==="object") || (typeof(o)==='function')) ? o : null;
  },

  isTRecord: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$new') && (typeof(type.$new)==='function'));
  },

  isPasClass: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));
  },

  isPasClassInstance: function(type){
    return (rtl.isObject(type) && rtl.isPasClass(type.$class));
  },

  hexStr: function(n,digits){
    return ("000000000000000"+n.toString(16).toUpperCase()).slice(-digits);
  },

  m_loading: 0,
  m_loading_intf: 1,
  m_intf_loaded: 2,
  m_loading_impl: 3, // loading all used unit
  m_initializing: 4, // running initialization
  m_initialized: 5,

  module: function(module_name, intfuseslist, intfcode, impluseslist){
    if (rtl.debug_load_units) rtl.debug('rtl.module name="'+module_name+'" intfuses='+intfuseslist+' impluses='+impluseslist);
    if (!rtl.hasString(module_name)) rtl.error('invalid module name "'+module_name+'"');
    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of "'+module_name+'"');
    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of "'+module_name+'"');
    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of "'+module_name+'"');

    if (pas[module_name])
      rtl.error('module "'+module_name+'" is already registered');

    var r = Object.create(rtl.tSectionRTTI);
    var module = r.$module = pas[module_name] = {
      $name: module_name,
      $intfuseslist: intfuseslist,
      $impluseslist: impluseslist,
      $state: rtl.m_loading,
      $intfcode: intfcode,
      $implcode: null,
      $impl: null,
      $rtti: r
    };
    if (impluseslist) module.$impl = {
          $module: module,
          $rtti: r
        };
  },

  exitcode: 0,

  run: function(module_name){
    try {
      if (!rtl.hasString(module_name)) module_name='program';
      if (rtl.debug_load_units) rtl.debug('rtl.run module="'+module_name+'"');
      rtl.initRTTI();
      var module = pas[module_name];
      if (!module) rtl.error('rtl.run module "'+module_name+'" missing');
      rtl.loadintf(module);
      rtl.loadimpl(module);
      if ((module_name=='program') || (module_name=='library')){
        if (rtl.debug_load_units) rtl.debug('running $main');
        var r = pas[module_name].$main();
        if (rtl.isNumber(r)) rtl.exitcode = r;
      }
    } catch(re) {
      if (!rtl.showUncaughtExceptions) {
        throw re
      } else {  
        if (!rtl.handleUncaughtException(re)) {
          rtl.showException(re);
          rtl.exitcode = 216;
        }  
      }
    } 
    return rtl.exitcode;
  },
  
  showException : function (re) {
    var errMsg = rtl.hasString(re.$classname) ? re.$classname : '';
    errMsg +=  ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : re);
    alert('Uncaught Exception : '+errMsg);
  },

  handleUncaughtException: function (e) {
    if (rtl.onUncaughtException) {
      try {
        rtl.onUncaughtException(e);
        return true;
      } catch (ee) {
        return false; 
      }
    } else {
      return false;
    }
  },

  loadintf: function(module){
    if (module.$state>rtl.m_loading_intf) return; // already finished
    if (rtl.debug_load_units) rtl.debug('loadintf: "'+module.$name+'"');
    if (module.$state===rtl.m_loading_intf)
      rtl.error('unit cycle detected "'+module.$name+'"');
    module.$state=rtl.m_loading_intf;
    // load interfaces of interface useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);
    // run interface
    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of "'+module.$name+'"');
    module.$intfcode(module.$intfuseslist);
    // success
    module.$state=rtl.m_intf_loaded;
    // Note: units only used in implementations are not yet loaded (not even their interfaces)
  },

  loaduseslist: function(module,useslist,f){
    if (useslist==undefined) return;
    var len = useslist.length;
    for (var i = 0; i<len; i++) {
      var unitname=useslist[i];
      if (rtl.debug_load_units) rtl.debug('loaduseslist of "'+module.$name+'" uses="'+unitname+'"');
      if (pas[unitname]==undefined)
        rtl.error('module "'+module.$name+'" misses "'+unitname+'"');
      f(pas[unitname]);
    }
  },

  loadimpl: function(module){
    if (module.$state>=rtl.m_loading_impl) return; // already processing
    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of "'+module.$name+'"');
    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of "'+module.$name+'"');
    module.$state=rtl.m_loading_impl;
    // load interfaces of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);
    // load implementation of interfaces useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);
    // load implementation of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);
    // Note: At this point all interfaces used by this unit are loaded. If
    //   there are implementation uses cycles some used units might not yet be
    //   initialized. This is by design.
    // run implementation
    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of "'+module.$name+'"');
    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);
    // run initialization
    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of "'+module.$name+'"');
    module.$state=rtl.m_initializing;
    if (rtl.isFunction(module.$init)) module.$init();
    // unit initialized
    module.$state=rtl.m_initialized;
  },

  createCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      if (!scope.hasOwnProperty('$events')) scope.$events = {};
      cb = scope.$events[fn];
      if (cb) return cb;
      scope.$events[fn] = cb = function(){
        return scope[fn].apply(scope,arguments);
      };
    } else {
      cb = function(){
        return fn.apply(scope,arguments);
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  createSafeCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      if (!scope[fn]) return null;
      if (!scope.hasOwnProperty('$events')) scope.$events = {};
      cb = scope.$events[fn];
      if (cb) return cb;
      scope.$events[fn] = cb = function(){
        try{
          return scope[fn].apply(scope,arguments);
        } catch (err) {
          if (!rtl.handleUncaughtException(err)) throw err;
        }
      };
    } else if(!fn) {
      return null;
    } else {
      cb = function(){
        try{
          return fn.apply(scope,arguments);
        } catch (err) {
          if (!rtl.handleUncaughtException(err)) throw err;
        }
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  eqCallback: function(a,b){
    // can be a function or a function wrapper
    if (a===b){
      return true;
    } else {
      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn===b.fn);
    }
  },

  initStruct: function(c,parent,name){
    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;
    c.$parent = parent;
    if (rtl.isModule(parent)){
      c.$module = parent;
      c.$name = name;
    } else {
      c.$module = parent.$module;
      c.$name = parent.$name+'.'+name;
    };
    return parent;
  },

  initClass: function(c,parent,name,initfn,rttiname){
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = rttiname?rttiname:name;
    parent = rtl.initStruct(c,parent,name);
    c.$fullname = parent.$name+'.'+name;
    // rtti
    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);
    var t = c.$module.$rtti.$Class(c.$classname,{ "class": c });
    c.$rtti = t;
    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  createClass: function(parent,name,ancestor,initfn,rttiname){
    // create a normal class,
    // ancestor must be null or a normal class,
    // the root ancestor can be an external class
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // Note:
      // if root is an "object" then c.$ancestor === Object.getPrototypeOf(c)
      // if root is a "function" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root
    } else {
      c = { $ancestor: null };
      c.$create = function(fn,args){
        if (args == undefined) args = [];
        var o = Object.create(this);
        o.$init();
        try{
          if (typeof(fn)==="string"){
            o[fn].apply(o,args);
          } else {
            fn.apply(o,args);
          };
          o.AfterConstruction();
        } catch($e){
          // do not call BeforeDestruction
          if (o.Destroy) o.Destroy();
          o.$final();
          throw $e;
        }
        return o;
      };
      c.$destroy = function(fnname){
        this.BeforeDestruction();
        if (this[fnname]) this[fnname]();
        this.$final();
      };
    };
    rtl.initClass(c,parent,name,initfn,rttiname);
  },

  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn,rttiname){
    // Create a class using an external ancestor.
    // If newinstancefnname is given, use that function to create the new object.
    // If exist call BeforeDestruction and AfterConstruction.
    var isFunc = rtl.isFunction(ancestor);
    var c = null;
    if (isFunc){
      // create pascal class descendent from JS function
      c = Object.create(ancestor.prototype);
      c.$ancestorfunc = ancestor;
      c.$ancestor = null; // no pascal ancestor
    } else if (ancestor.$func){
      // create pascal class descendent from a pascal class descendent of a JS function
      isFunc = true;
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
    } else {
      c = Object.create(ancestor);
      c.$ancestor = null; // no pascal ancestor
    }
    c.$create = function(fn,args){
      if (args == undefined) args = [];
      var o = null;
      if (newinstancefnname.length>0){
        o = this[newinstancefnname](fn,args);
      } else if(isFunc) {
        o = new this.$func(args);
      } else {
        o = Object.create(c);
      }
      if (o.$init) o.$init();
      try{
        if (typeof(fn)==="string"){
          this[fn].apply(o,args);
        } else {
          fn.apply(o,args);
        };
        if (o.AfterConstruction) o.AfterConstruction();
      } catch($e){
        // do not call BeforeDestruction
        if (o.Destroy) o.Destroy();
        if (o.$final) o.$final();
        throw $e;
      }
      return o;
    };
    c.$destroy = function(fnname){
      if (this.BeforeDestruction) this.BeforeDestruction();
      if (this[fnname]) this[fnname]();
      if (this.$final) this.$final();
    };
    rtl.initClass(c,parent,name,initfn,rttiname);
    if (isFunc){
      function f(){}
      f.prototype = c;
      c.$func = f;
    }
  },

  createHelper: function(parent,name,ancestor,initfn,rttiname){
    // create a helper,
    // ancestor must be null or a helper,
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // c.$ancestor === Object.getPrototypeOf(c)
    } else {
      c = { $ancestor: null };
    };
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = rttiname?rttiname:name;
    parent = rtl.initStruct(c,parent,name);
    c.$fullname = parent.$name+'.'+name;
    // rtti
    var t = c.$module.$rtti.$Helper(c.$classname,{ "helper": c });
    c.$rtti = t;
    if (rtl.isObject(ancestor)) t.ancestor = ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  tObjectDestroy: "Destroy",

  free: function(obj,name){
    if (obj[name]==null) return null;
    obj[name].$destroy(rtl.tObjectDestroy);
    obj[name]=null;
  },

  freeLoc: function(obj){
    if (obj==null) return null;
    obj.$destroy(rtl.tObjectDestroy);
    return null;
  },

  hideProp: function(o,p,v){
    Object.defineProperty(o,p, {
      enumerable: false,
      configurable: true,
      writable: true
    });
    if(arguments.length>2){ o[p]=v; }
  },

  recNewT: function(parent,name,initfn,full){
    // create new record type
    var t = {};
    if (parent) parent[name] = t;
    var h = rtl.hideProp;
    if (full){
      rtl.initStruct(t,parent,name);
      t.$record = t;
      h(t,'$record');
      h(t,'$name');
      h(t,'$parent');
      h(t,'$module');
      h(t,'$initSpec');
    }
    initfn.call(t);
    if (!t.$new){
      t.$new = function(){ return Object.create(t); };
    }
    t.$clone = function(r){ return t.$new().$assign(r); };
    h(t,'$new');
    h(t,'$clone');
    h(t,'$eq');
    h(t,'$assign');
    return t;
  },

  is: function(instance,type){
    return type.isPrototypeOf(instance) || (instance===type);
  },

  isExt: function(instance,type,mode){
    // mode===1 means instance must be a Pascal class instance
    // mode===2 means instance must be a Pascal class
    // Notes:
    // isPrototypeOf and instanceof return false on equal
    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())
    //   so if isPrototypeOf is false test with instanceof
    // instanceof needs a function on right side
    if (instance == null) return false; // Note: ==null checks for undefined too
    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;
    if (instance === type){
      if (mode===1) return false;
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if (type.isPrototypeOf && type.isPrototypeOf(instance)){
      if (mode===1) return rtl.isPasClassInstance(instance);
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if ((typeof type == 'function') && (instance instanceof type)) return true;
    return false;
  },

  Exception: null,
  EInvalidCast: null,
  EAbstractError: null,
  ERangeError: null,
  EIntOverflow: null,
  EPropWriteOnly: null,

  raiseE: function(typename){
    var t = rtl[typename];
    if (t==null){
      var mod = pas.SysUtils;
      if (!mod) mod = pas.sysutils;
      if (mod){
        t = mod[typename];
        if (!t) t = mod[typename.toLowerCase()];
        if (!t) t = mod['Exception'];
        if (!t) t = mod['exception'];
      }
    }
    if (t){
      if (t.Create){
        throw t.$create("Create");
      } else if (t.create){
        throw t.$create("create");
      }
    }
    if (typename === "EInvalidCast") throw "invalid type cast";
    if (typename === "EAbstractError") throw "Abstract method called";
    if (typename === "ERangeError") throw "range error";
    throw typename;
  },

  as: function(instance,type){
    if((instance === null) || rtl.is(instance,type)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  asExt: function(instance,type,mode){
    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  createInterface: function(module, name, guid, fnnames, ancestor, initfn, rttiname){
    //console.log('createInterface name="'+name+'" guid="'+guid+'" names='+fnnames);
    var i = ancestor?Object.create(ancestor):{};
    module[name] = i;
    i.$module = module;
    i.$name = rttiname?rttiname:name;
    i.$fullname = module.$name+'.'+i.$name;
    i.$guid = guid;
    i.$guidr = null;
    i.$names = fnnames?fnnames:[];
    if (rtl.isFunction(initfn)){
      // rtti
      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);
      var t = i.$module.$rtti.$Interface(i.$name,{ "interface": i, module: module });
      i.$rtti = t;
      if (ancestor) t.ancestor = ancestor.$rtti;
      if (!t.ancestor) t.ancestor = null;
      initfn.call(i);
    }
    return i;
  },

  strToGUIDR: function(s,g){
    var p = 0;
    function n(l){
      var h = s.substr(p,l);
      p+=l;
      return parseInt(h,16);
    }
    p+=1; // skip {
    g.D1 = n(8);
    p+=1; // skip -
    g.D2 = n(4);
    p+=1; // skip -
    g.D3 = n(4);
    p+=1; // skip -
    if (!g.D4) g.D4=[];
    g.D4[0] = n(2);
    g.D4[1] = n(2);
    p+=1; // skip -
    for(var i=2; i<8; i++) g.D4[i] = n(2);
    return g;
  },

  guidrToStr: function(g){
    if (g.$intf) return g.$intf.$guid;
    var h = rtl.hexStr;
    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';
    for (var i=2; i<8; i++) s+=h(g.D4[i],2);
    s+='}';
    return s;
  },

  createTGUID: function(guid){
    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;
    var g = rtl.strToGUIDR(guid,TGuid.$new());
    return g;
  },

  getIntfGUIDR: function(intfTypeOrVar){
    if (!intfTypeOrVar) return null;
    if (!intfTypeOrVar.$guidr){
      var g = rtl.createTGUID(intfTypeOrVar.$guid);
      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);
      g.$intf = intfTypeOrVar;
      intfTypeOrVar.$guidr = g;
    }
    return intfTypeOrVar.$guidr;
  },

  addIntf: function (aclass, intf, map){
    function jmp(fn){
      if (typeof(fn)==="function"){
        return function(){ return fn.apply(this.$o,arguments); };
      } else {
        return function(){ rtl.raiseE('EAbstractError'); };
      }
    }
    if(!map) map = {};
    var t = intf;
    var item = Object.create(t);
    if (!aclass.hasOwnProperty('$intfmaps')) aclass.$intfmaps = {};
    aclass.$intfmaps[intf.$guid] = item;
    do{
      var names = t.$names;
      if (!names) break;
      for (var i=0; i<names.length; i++){
        var intfname = names[i];
        var fnname = map[intfname];
        if (!fnname) fnname = intfname;
        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname="'+intfname+'" fnname="'+fnname+'" old='+typeof(item[intfname]));
        item[intfname] = jmp(aclass[fnname]);
      }
      t = Object.getPrototypeOf(t);
    }while(t!=null);
  },

  getIntfG: function (obj, guid, query){
    if (!obj) return null;
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);
    // search
    var maps = obj.$intfmaps;
    if (!maps) return null;
    var item = maps[guid];
    if (!item) return null;
    // check delegation
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));
    if (typeof item === 'function') return item.call(obj); // delegate. Note: COM contains _AddRef
    // check cache
    var intf = null;
    if (obj.$interfaces){
      intf = obj.$interfaces[guid];
      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));
    }
    if (!intf){ // intf can be undefined!
      intf = Object.create(item);
      intf.$o = obj;
      if (!obj.$interfaces) obj.$interfaces = {};
      obj.$interfaces[guid] = intf;
    }
    if (typeof(query)==='object'){
      // called by queryIntfT
      var o = null;
      if (intf.QueryInterface(rtl.getIntfGUIDR(query),
          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){
        return o;
      } else {
        return null;
      }
    } else if(query===2){
      // called by TObject.GetInterfaceByStr
      if (intf.$kind === 'com') intf._AddRef();
    }
    return intf;
  },

  getIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid);
  },

  queryIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid,intftype);
  },

  queryIntfIsT: function(obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (!i) return false;
    if (i.$kind === 'com') i._Release();
    return true;
  },

  asIntfT: function (obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (i!==null) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsIntfT: function(intf,intftype){
    return (intf!==null) && rtl.queryIntfIsT(intf.$o,intftype);
  },

  intfAsIntfT: function (intf,intftype){
    if (!intf) return null;
    var i = rtl.getIntfG(intf.$o,intftype.$guid);
    if (i) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsClass: function(intf,classtype){
    return (intf!=null) && (rtl.is(intf.$o,classtype));
  },

  intfAsClass: function(intf,classtype){
    if (intf==null) return null;
    return rtl.as(intf.$o,classtype);
  },

  intfToClass: function(intf,classtype){
    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;
    return null;
  },

  // interface reference counting
  intfRefs: { // base object for temporary interface variables
    ref: function(id,intf){
      // called for temporary interface references needing delayed release
      var old = this[id];
      //console.log('rtl.intfRefs.ref: id='+id+' old="'+(old?old.$name:'null')+'" intf="'+(intf?intf.$name:'null')+' $o='+(intf?intf.$o:'null'));
      if (old){
        // called again, e.g. in a loop
        delete this[id];
        old._Release(); // may fail
      }
      if(intf) {
        this[id]=intf;
      }
      return intf;
    },
    free: function(){
      //console.log('rtl.intfRefs.free...');
      for (var id in this){
        if (this.hasOwnProperty(id)){
          var intf = this[id];
          if (intf){
            //console.log('rtl.intfRefs.free: id='+id+' '+intf.$name+' $o='+intf.$o.$classname);
            intf._Release();
          }
        }
      }
    }
  },

  createIntfRefs: function(){
    //console.log('rtl.createIntfRefs');
    return Object.create(rtl.intfRefs);
  },

  setIntfP: function(path,name,value,skipAddRef){
    var old = path[name];
    //console.log('rtl.setIntfP path='+path+' name='+name+' old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old === value) return;
    if (old !== null){
      path[name]=null;
      old._Release();
    }
    if (value !== null){
      if (!skipAddRef) value._AddRef();
      path[name]=value;
    }
  },

  setIntfL: function(old,value,skipAddRef){
    //console.log('rtl.setIntfL old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old !== value){
      if (value!==null){
        if (!skipAddRef) value._AddRef();
      }
      if (old!==null){
        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception
      }
    } else if (skipAddRef){
      if (old!==null){
        old._Release();  // value has an AddRef
      }
    }
    return value;
  },

  _AddRef: function(intf){
    //if (intf) console.log('rtl._AddRef intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._AddRef();
    return intf;
  },

  _Release: function(intf){
    //if (intf) console.log('rtl._Release intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._Release();
    return intf;
  },

  _ReleaseArray: function(a,dim){
    if (!a) return null;
    for (var i=0; i<a.length; i++){
      if (dim<=1){
        if (a[i]) a[i]._Release();
      } else {
        rtl._ReleaseArray(a[i],dim-1);
      }
    }
    return null;
  },

  trunc: function(a){
    return a<0 ? Math.ceil(a) : Math.floor(a);
  },

  checkMethodCall: function(obj,type){
    if (rtl.isObject(obj) && rtl.is(obj,type)) return;
    rtl.raiseE("EInvalidCast");
  },

  oc: function(i){
    // overflow check integer
    if ((Math.floor(i)===i) && (i>=-0x1fffffffffffff) && (i<=0x1fffffffffffff)) return i;
    rtl.raiseE('EIntOverflow');
  },

  rc: function(i,minval,maxval){
    // range check integer
    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;
    rtl.raiseE('ERangeError');
  },

  rcc: function(c,minval,maxval){
    // range check char
    if ((typeof(c)==='string') && (c.length===1)){
      var i = c.charCodeAt(0);
      if ((i>=minval) && (i<=maxval)) return c;
    }
    rtl.raiseE('ERangeError');
  },

  rcSetCharAt: function(s,index,c){
    // range check setCharAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return rtl.setCharAt(s,index,c);
  },

  rcCharAt: function(s,index){
    // range check charAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return s.charAt(index);
  },

  rcArrR: function(arr,index){
    // range check read array
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      if (arguments.length>2){
        // arr,index1,index2,...
        arr=arr[index];
        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);
        return arr;
      }
      return arr[index];
    }
    rtl.raiseE('ERangeError');
  },

  rcArrW: function(arr,index,value){
    // range check write array
    // arr,index1,index2,...,value
    for (var i=3; i<arguments.length; i++){
      arr=rtl.rcArrR(arr,index);
      index=arguments[i-1];
      value=arguments[i];
    }
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      return arr[index]=value;
    }
    rtl.raiseE('ERangeError');
  },

  length: function(arr){
    return (arr == null) ? 0 : arr.length;
  },

  arrayRef: function(a){
    if (a!=null) rtl.hideProp(a,'$pas2jsrefcnt',1);
    return a;
  },

  arraySetLength: function(arr,defaultvalue,newlength){
    var stack = [];
    var s = 9999;
    for (var i=2; i<arguments.length; i++){
      var j = arguments[i];
      if (j==='s'){ s = i-2; }
      else {
        stack.push({ dim:j+0, a:null, i:0, src:null });
      }
    }
    var dimmax = stack.length-1;
    var depth = 0;
    var lastlen = 0;
    var item = null;
    var a = null;
    var src = arr;
    var srclen = 0, oldlen = 0;
    do{
      if (depth>0){
        item=stack[depth-1];
        src = (item.src && item.src.length>item.i)?item.src[item.i]:null;
      }
      if (!src){
        a = [];
        srclen = 0;
        oldlen = 0;
      } else if (src.$pas2jsrefcnt>0 || depth>=s){
        a = [];
        srclen = src.length;
        oldlen = srclen;
      } else {
        a = src;
        srclen = 0;
        oldlen = a.length;
      }
      lastlen = stack[depth].dim;
      a.length = lastlen;
      if (depth>0){
        item.a[item.i]=a;
        item.i++;
        if ((lastlen===0) && (item.i<item.a.length)) continue;
      }
      if (lastlen>0){
        if (depth<dimmax){
          item = stack[depth];
          item.a = a;
          item.i = 0;
          item.src = src;
          depth++;
          continue;
        } else {
          if (srclen>lastlen) srclen=lastlen;
          if (rtl.isArray(defaultvalue)){
            // array of dyn array
            for (var i=0; i<srclen; i++) a[i]=src[i];
            for (var i=oldlen; i<lastlen; i++) a[i]=[];
          } else if (rtl.isObject(defaultvalue)) {
            if (rtl.isTRecord(defaultvalue)){
              // array of record
              for (var i=0; i<srclen; i++) a[i]=defaultvalue.$clone(src[i]);
              for (var i=oldlen; i<lastlen; i++) a[i]=defaultvalue.$new();
            } else {
              // array of set
              for (var i=0; i<srclen; i++) a[i]=rtl.refSet(src[i]);
              for (var i=oldlen; i<lastlen; i++) a[i]={};
            }
          } else {
            for (var i=0; i<srclen; i++) a[i]=src[i];
            for (var i=oldlen; i<lastlen; i++) a[i]=defaultvalue;
          }
        }
      }
      // backtrack
      while ((depth>0) && (stack[depth-1].i>=stack[depth-1].dim)){
        depth--;
      };
      if (depth===0){
        if (dimmax===0) return a;
        return stack[0].a;
      }
    }while (true);
  },

  arrayEq: function(a,b){
    if (a===null) return b===null;
    if (b===null) return false;
    if (a.length!==b.length) return false;
    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;
    return true;
  },

  arrayClone: function(type,src,srcpos,endpos,dst,dstpos){
    // type: 0 for references, "refset" for calling refSet(), a function for new type()
    // src must not be null
    // This function does not range check.
    if(type === 'refSet') {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set
    } else if (type === 'slice'){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos].slice(0); // clone static array of simple types
    } else if (typeof(type)==='function'){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = type(src[srcpos]); // clone function
    } else if (rtl.isTRecord(type)){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = type.$clone(src[srcpos]); // clone record
    }  else {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos]; // reference
    };
  },

  arrayConcat: function(type){
    // type: see rtl.arrayClone
    var a = [];
    var l = 0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src !== null) l+=src.length;
    };
    a.length = l;
    l=0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      rtl.arrayClone(type,src,0,src.length,a,l);
      l+=src.length;
    };
    return a;
  },

  arrayConcatN: function(){
    var a = null;
    for (var i=0; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      if (a===null){
        a=rtl.arrayRef(src); // Note: concat(a) does not clone
      } else if (a['$pas2jsrefcnt']){
        a=a.concat(src); // clone a and append src
      } else {
        for (var i=0; i<src.length; i++){
          a.push(src[i]);
        }
      }
    };
    return a;
  },

  arrayPush: function(type,a){
    if(a===null){
      a=[];
    } else if (a['$pas2jsrefcnt']){
      a=rtl.arrayCopy(type,a,0,a.length);
    }
    rtl.arrayClone(type,arguments,2,arguments.length,a,a.length);
    return a;
  },

  arrayPushN: function(a){
    if(a===null){
      a=[];
    } else if (a['$pas2jsrefcnt']){
      a=a.concat();
    }
    for (var i=1; i<arguments.length; i++){
      a.push(arguments[i]);
    }
    return a;
  },

  arrayCopy: function(type, srcarray, index, count){
    // type: see rtl.arrayClone
    // if count is missing, use srcarray.length
    if (srcarray === null) return [];
    if (index < 0) index = 0;
    if (count === undefined) count=srcarray.length;
    var end = index+count;
    if (end>srcarray.length) end = srcarray.length;
    if (index>=end) return [];
    if (type===0){
      return srcarray.slice(index,end);
    } else {
      var a = [];
      a.length = end-index;
      rtl.arrayClone(type,srcarray,index,end,a,0);
      return a;
    }
  },

  arrayInsert: function(item, arr, index){
    if (arr){
      arr.splice(index,0,item);
      return arr;
    } else {
      return [item];
    }
  },

  setCharAt: function(s,index,c){
    return s.substr(0,index)+c+s.substr(index+1);
  },

  getResStr: function(mod,name){
    var rs = mod.$resourcestrings[name];
    return rs.current?rs.current:rs.org;
  },

  createSet: function(){
    var s = {};
    for (var i=0; i<arguments.length; i++){
      if (arguments[i]!=null){
        s[arguments[i]]=true;
      } else {
        var first=arguments[i+=1];
        var last=arguments[i+=1];
        for(var j=first; j<=last; j++) s[j]=true;
      }
    }
    return s;
  },

  cloneSet: function(s){
    var r = {};
    for (var key in s) r[key]=true;
    return r;
  },

  refSet: function(s){
    rtl.hideProp(s,'$shared',true);
    return s;
  },

  includeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    s[enumvalue] = true;
    return s;
  },

  excludeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    delete s[enumvalue];
    return s;
  },

  diffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    return r;
  },

  unionSet: function(s,t){
    var r = {};
    for (var key in s) r[key]=true;
    for (var key in t) r[key]=true;
    return r;
  },

  intersectSet: function(s,t){
    var r = {};
    for (var key in s) if (t[key]) r[key]=true;
    return r;
  },

  symDiffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    for (var key in t) if (!s[key]) r[key]=true;
    return r;
  },

  eqSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  neSet: function(s,t){
    return !rtl.eqSet(s,t);
  },

  leSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    return true;
  },

  geSet: function(s,t){
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  strSetLength: function(s,newlen){
    var oldlen = s.length;
    if (oldlen > newlen){
      return s.substring(0,newlen);
    } else if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return s+' '.repeat(newlen-oldlen);
    } else {
       while (oldlen<newlen){
         s+=' ';
         oldlen++;
       };
       return s;
    }
  },

  spaceLeft: function(s,width){
    var l=s.length;
    if (l>=width) return s;
    if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return ' '.repeat(width-l) + s;
    } else {
      while (l<width){
        s=' '+s;
        l++;
      };
      return s;
    };
  },

  floatToStr: function(d,w,p){
    // input 1-3 arguments: double, width, precision
    if (arguments.length>2){
      return rtl.spaceLeft(d.toFixed(p),w);
    } else {
	  // exponent width
	  var pad = "";
	  var ad = Math.abs(d);
	  if (((ad>1) && (ad<1.0e+10)) ||  ((ad>1.e-10) && (ad<1))) {
		pad='00';
	  } else if ((ad>1) && (ad<1.0e+100) || (ad<1.e-10)) {
		pad='0';
      }  	
	  if (arguments.length<2) {
	    w=24;		
      } else if (w<9) {
		w=9;
      }		  
      var p = w-8;
      var s=(d>0 ? " " : "" ) + d.toExponential(p);
      s=s.replace(/e(.)/,'E$1'+pad);
      return rtl.spaceLeft(s,w);
    }
  },

  valEnum: function(s, enumType, setCodeFn){
    s = s.toLowerCase();
    for (var key in enumType){
      if((typeof(key)==='string') && (key.toLowerCase()===s)){
        setCodeFn(0);
        return enumType[key];
      }
    }
    setCodeFn(1);
    return 0;
  },

  lw: function(l){
    // fix longword bitwise operation
    return l<0?l+0x100000000:l;
  },

  and: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) & (b / hi);
    var l = (a & low) & (b & low);
    return h*hi + l;
  },

  or: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) | (b / hi);
    var l = (a & low) | (b & low);
    return h*hi + l;
  },

  xor: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) ^ (b / hi);
    var l = (a & low) ^ (b & low);
    return h*hi + l;
  },

  shr: function(a,b){
    if (a<0) a += rtl.hiInt;
    if (a<0x80000000) return a >> b;
    if (b<=0) return a;
    if (b>54) return 0;
    return Math.floor(a / Math.pow(2,b));
  },

  shl: function(a,b){
    if (a<0) a += rtl.hiInt;
    if (b<=0) return a;
    if (b>54) return 0;
    var r = a * Math.pow(2,b);
    if (r <= rtl.hiInt) return r;
    return r % rtl.hiInt;
  },

  initRTTI: function(){
    if (rtl.debug_rtti) rtl.debug('initRTTI');

    // base types
    rtl.tTypeInfo = { name: "tTypeInfo", kind: 0, $module: null, attr: null };
    function newBaseTI(name,kind,ancestor){
      if (!ancestor) ancestor = rtl.tTypeInfo;
      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI "'+name+'" '+kind+' ("'+ancestor.name+'")');
      var t = Object.create(ancestor);
      t.name = name;
      t.kind = kind;
      rtl[name] = t;
      return t;
    };
    function newBaseInt(name,minvalue,maxvalue,ordtype){
      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);
      t.minvalue = minvalue;
      t.maxvalue = maxvalue;
      t.ordtype = ordtype;
      return t;
    };
    newBaseTI("tTypeInfoInteger",1 /* tkInteger */);
    newBaseInt("shortint",-0x80,0x7f,0);
    newBaseInt("byte",0,0xff,1);
    newBaseInt("smallint",-0x8000,0x7fff,2);
    newBaseInt("word",0,0xffff,3);
    newBaseInt("longint",-0x80000000,0x7fffffff,4);
    newBaseInt("longword",0,0xffffffff,5);
    newBaseInt("nativeint",-0x10000000000000,0xfffffffffffff,6);
    newBaseInt("nativeuint",0,0xfffffffffffff,7);
    newBaseTI("char",2 /* tkChar */);
    newBaseTI("string",3 /* tkString */);
    newBaseTI("tTypeInfoEnum",4 /* tkEnumeration */,rtl.tTypeInfoInteger);
    newBaseTI("tTypeInfoSet",5 /* tkSet */);
    newBaseTI("double",6 /* tkDouble */);
    newBaseTI("boolean",7 /* tkBool */);
    newBaseTI("tTypeInfoProcVar",8 /* tkProcVar */);
    newBaseTI("tTypeInfoMethodVar",9 /* tkMethod */,rtl.tTypeInfoProcVar);
    newBaseTI("tTypeInfoArray",10 /* tkArray */);
    newBaseTI("tTypeInfoDynArray",11 /* tkDynArray */);
    newBaseTI("tTypeInfoPointer",15 /* tkPointer */);
    var t = newBaseTI("pointer",15 /* tkPointer */,rtl.tTypeInfoPointer);
    t.reftype = null;
    newBaseTI("jsvalue",16 /* tkJSValue */);
    newBaseTI("tTypeInfoRefToProcVar",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);

    // member kinds
    rtl.tTypeMember = { attr: null };
    function newMember(name,kind){
      var m = Object.create(rtl.tTypeMember);
      m.name = name;
      m.kind = kind;
      rtl[name] = m;
    };
    newMember("tTypeMemberField",1); // tmkField
    newMember("tTypeMemberMethod",2); // tmkMethod
    newMember("tTypeMemberProperty",3); // tmkProperty

    // base object for storing members: a simple object
    rtl.tTypeMembers = {};

    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface
    var tis = newBaseTI("tTypeInfoStruct",0);
    tis.$addMember = function(name,ancestor,options){
      if (rtl.debug_rtti){
        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member "'+name+'", this="'+this.name+'"';
        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor "'+ancestor+':'+ancestor.name+'", "'+this.name+'.'+name+'"';
        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options "'+options+'", "'+this.name+'.'+name+'"';
      };
      var t = Object.create(ancestor);
      t.name = name;
      this.members[name] = t;
      this.names.push(name);
      if (rtl.isObject(options)){
        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];
      };
      return t;
    };
    tis.addField = function(name,type,options){
      var t = this.$addMember(name,rtl.tTypeMemberField,options);
      if (rtl.debug_rtti){
        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type "'+type+'", "'+this.name+'.'+name+'"';
      };
      t.typeinfo = type;
      this.fields.push(name);
      return t;
    };
    tis.addFields = function(){
      var i=0;
      while(i<arguments.length){
        var name = arguments[i++];
        var type = arguments[i++];
        if ((i<arguments.length) && (typeof(arguments[i])==='object')){
          this.addField(name,type,arguments[i++]);
        } else {
          this.addField(name,type);
        };
      };
    };
    tis.addMethod = function(name,methodkind,params,result,flags,options){
      var t = this.$addMember(name,rtl.tTypeMemberMethod,options);
      t.methodkind = methodkind;
      t.procsig = rtl.newTIProcSig(params,result,flags);
      this.methods.push(name);
      return t;
    };
    tis.addProperty = function(name,flags,result,getter,setter,options){
      var t = this.$addMember(name,rtl.tTypeMemberProperty,options);
      t.flags = flags;
      t.typeinfo = result;
      t.getter = getter;
      t.setter = setter;
      // Note: in options: params, stored, defaultvalue
      t.params = rtl.isArray(t.params) ? rtl.newTIParams(t.params) : null;
      this.properties.push(name);
      if (!rtl.isString(t.stored)) t.stored = "";
      return t;
    };
    tis.getField = function(index){
      return this.members[this.fields[index]];
    };
    tis.getMethod = function(index){
      return this.members[this.methods[index]];
    };
    tis.getProperty = function(index){
      return this.members[this.properties[index]];
    };

    newBaseTI("tTypeInfoRecord",12 /* tkRecord */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClass",13 /* tkClass */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClassRef",14 /* tkClassRef */);
    newBaseTI("tTypeInfoInterface",18 /* tkInterface */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoHelper",19 /* tkHelper */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoExtClass",20 /* tkExtClass */,rtl.tTypeInfoClass);
  },

  tSectionRTTI: {
    $module: null,
    $inherited: function(name,ancestor,o){
      if (rtl.debug_rtti){
        rtl.debug('tSectionRTTI.newTI "'+(this.$module?this.$module.$name:"(no module)")
          +'"."'+name+'" ('+ancestor.name+') '+(o?'init':'forward'));
      };
      var t = this[name];
      if (t){
        if (!t.$forward) throw 'duplicate type "'+name+'"';
        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch "'+name+'" ancestor="'+ancestor.name+'" t.name="'+t.name+'"';
      } else {
        t = Object.create(ancestor);
        t.name = name;
        t.$module = this.$module;
        this[name] = t;
      }
      if (o){
        delete t.$forward;
        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];
      } else {
        t.$forward = true;
      }
      return t;
    },
    $Scope: function(name,ancestor,o){
      var t=this.$inherited(name,ancestor,o);
      t.members = {};
      t.names = [];
      t.fields = [];
      t.methods = [];
      t.properties = [];
      return t;
    },
    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },
    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },
    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },
    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },
    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },
    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },
    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },
    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },
    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },
    $Record: function(name,o){ return this.$Scope(name,rtl.tTypeInfoRecord,o); },
    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },
    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },
    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },
    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); },
    $Helper: function(name,o){ return this.$Scope(name,rtl.tTypeInfoHelper,o); },
    $ExtClass: function(name,o){ return this.$Scope(name,rtl.tTypeInfoExtClass,o); }
  },

  newTIParam: function(param){
    // param is an array, 0=name, 1=type, 2=optional flags
    var t = {
      name: param[0],
      typeinfo: param[1],
      flags: (rtl.isNumber(param[2]) ? param[2] : 0)
    };
    return t;
  },

  newTIParams: function(list){
    // list: optional array of [paramname,typeinfo,optional flags]
    var params = [];
    if (rtl.isArray(list)){
      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));
    };
    return params;
  },

  newTIProcSig: function(params,result,flags){
    var s = {
      params: rtl.newTIParams(params),
      resulttype: result?result:null,
      flags: flags?flags:0
    };
    return s;
  },

  addResource: function(aRes){
    rtl.$res[aRes.name]=aRes;
  },

  getResource: function(aName){
    var res = rtl.$res[aName];
    if (res !== undefined) {
      return res;
    } else {
      return null;
    }
  },

  getResourceList: function(){
    return Object.keys(rtl.$res);
  }
}

rtl.module("System",[],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.PathDelim = "/";
  this.AllowDirectorySeparators = rtl.createSet(47);
  this.AllowDriveSeparators = rtl.createSet(58);
  this.ExtensionSeparator = ".";
  this.MaxSmallint = 32767;
  this.MaxLongint = 0x7fffffff;
  this.Maxint = 2147483647;
  rtl.recNewT(this,"TGuid",function () {
    this.D1 = 0;
    this.D2 = 0;
    this.D3 = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.D4 = rtl.arraySetLength(null,0,8);
      return r;
    };
    this.$eq = function (b) {
      return (this.D1 === b.D1) && (this.D2 === b.D2) && (this.D3 === b.D3) && rtl.arrayEq(this.D4,b.D4);
    };
    this.$assign = function (s) {
      this.D1 = s.D1;
      this.D2 = s.D2;
      this.D3 = s.D3;
      this.D4 = s.D4.slice(0);
      return this;
    };
  });
  rtl.createClass(this,"TObject",null,function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
    this.Create = function () {
      return this;
    };
    this.Destroy = function () {
    };
    this.Free = function () {
      this.$destroy("Destroy");
    };
    this.AfterConstruction = function () {
    };
    this.BeforeDestruction = function () {
    };
    this.GetInterface = function (iid, obj) {
      var Result = false;
      var i = iid.$intf;
      if (i){
        // iid is the private TGuid of an interface
        i = rtl.getIntfG(this,i.$guid,2);
        if (i){
          obj.set(i);
          return true;
        }
      };
      Result = this.GetInterfaceByStr(rtl.guidrToStr(iid),obj);
      return Result;
    };
    this.GetInterfaceByStr = function (iidstr, obj) {
      var Result = false;
      Result = false;
      if (!$mod.IObjectInstance["$str"]) $mod.IObjectInstance["$str"] = rtl.guidrToStr($mod.IObjectInstance);
      if (iidstr == $mod.IObjectInstance["$str"]) {
        obj.set(this);
        return true;
      };
      var i = rtl.getIntfG(this,iidstr,2);
      obj.set(i);
      Result=(i!==null);
      return Result;
    };
  });
  this.S_OK = 0;
  this.E_NOINTERFACE = -2147467262;
  rtl.createInterface(this,"IUnknown","{00000000-0000-0000-C000-000000000046}",["QueryInterface","_AddRef","_Release"],null,function () {
    this.$kind = "com";
  });
  rtl.createClass(this,"TInterfacedObject",this.TObject,function () {
    this.$init = function () {
      $mod.TObject.$init.call(this);
      this.fRefCount = 0;
    };
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      if (this.GetInterface(iid,obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    this._AddRef = function () {
      var Result = 0;
      this.fRefCount += 1;
      Result = this.fRefCount;
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      this.fRefCount -= 1;
      Result = this.fRefCount;
      if (this.fRefCount === 0) this.$destroy("Destroy");
      return Result;
    };
    this.BeforeDestruction = function () {
      if (this.fRefCount !== 0) rtl.raiseE('EHeapMemoryError');
    };
    rtl.addIntf(this,$mod.IUnknown);
  });
  this.IObjectInstance = this.TGuid.$clone({D1: 0xD91C9AF4, D2: 0x3C93, D3: 0x420F, D4: [0xA3,0x03,0xBF,0x5B,0xA8,0x2B,0xFD,0x23]});
  this.vtInteger = 0;
  this.vtExtended = 3;
  this.vtWideChar = 9;
  this.vtCurrency = 12;
  this.vtUnicodeString = 18;
  this.vtNativeInt = 19;
  rtl.recNewT(this,"TVarRec",function () {
    this.VType = 0;
    this.VJSValue = undefined;
    this.$eq = function (b) {
      return (this.VType === b.VType) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue);
    };
    this.$assign = function (s) {
      this.VType = s.VType;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      return this;
    };
  });
  this.VarRecs = function () {
    var Result = [];
    var i = 0;
    var v = null;
    Result = [];
    while (i < arguments.length) {
      v = $mod.TVarRec.$new();
      v.VType = rtl.trunc(arguments[i]);
      i += 1;
      v.VJSValue = arguments[i];
      i += 1;
      Result.push($mod.TVarRec.$clone(v));
    };
    return Result;
  };
  this.FirstDotAtFileNameStartIsExtension = false;
  this.OnParamStr = null;
  this.ParamStr = function (Index) {
    var Result = "";
    if ($mod.OnParamStr != null) {
      Result = $mod.OnParamStr(Index)}
     else if (Index === 0) {
      Result = "js"}
     else Result = "";
    return Result;
  };
  this.Frac = function (A) {
    return A % 1;
  };
  this.Odd = function (A) {
    return A&1 != 0;
  };
  this.Sqr$1 = function (A) {
    return A*A;
  };
  this.Trunc = function (A) {
    if (!Math.trunc) {
      Math.trunc = function(v) {
        v = +v;
        if (!isFinite(v)) return v;
        return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
      };
    }
    $mod.Trunc = Math.trunc;
    return Math.trunc(A);
  };
  this.Int = function (A) {
    var Result = 0.0;
    Result = $mod.Trunc(A);
    return Result;
  };
  this.Copy = function (S, Index, Size) {
    if (Index<1) Index = 1;
    return (Size>0) ? S.substring(Index-1,Index+Size-1) : "";
  };
  this.Copy$1 = function (S, Index) {
    if (Index<1) Index = 1;
    return S.substr(Index-1);
  };
  this.Delete = function (S, Index, Size) {
    var h = "";
    if ((Index < 1) || (Index > S.get().length) || (Size <= 0)) return;
    h = S.get();
    S.set($mod.Copy(h,1,Index - 1) + $mod.Copy$1(h,Index + Size));
  };
  this.Pos = function (Search, InString) {
    return InString.indexOf(Search)+1;
  };
  this.Insert = function (Insertion, Target, Index) {
    var t = "";
    if (Insertion === "") return;
    t = Target.get();
    if (Index < 1) {
      Target.set(Insertion + t)}
     else if (Index > t.length) {
      Target.set(t + Insertion)}
     else Target.set($mod.Copy(t,1,Index - 1) + Insertion + $mod.Copy(t,Index,t.length));
  };
  this.upcase = function (c) {
    return c.toUpperCase();
  };
  this.val = function (S, NI, Code) {
    NI.set($impl.valint(S,-9007199254740991,9007199254740991,Code));
  };
  this.val$6 = function (S, I, Code) {
    I.set($impl.valint(S,-2147483648,2147483647,Code));
  };
  this.val$8 = function (S, d, Code) {
    var x = 0.0;
    if (S === "") {
      Code.set(1);
      return;
    };
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else {
      Code.set(0);
      d.set(x);
    };
  };
  this.StringOfChar = function (c, l) {
    var Result = "";
    var i = 0;
    if ((l>0) && c.repeat) return c.repeat(l);
    Result = "";
    for (var $l = 1, $end = l; $l <= $end; $l++) {
      i = $l;
      Result = Result + c;
    };
    return Result;
  };
  this.Write = function () {
    var i = 0;
    for (var $l = 0, $end = arguments.length - 1; $l <= $end; $l++) {
      i = $l;
      if ($impl.WriteCallBack != null) {
        $impl.WriteCallBack(arguments[i],false)}
       else $impl.WriteBuf = $impl.WriteBuf + ("" + arguments[i]);
    };
  };
  this.Writeln = function () {
    var i = 0;
    var l = 0;
    var s = "";
    l = arguments.length - 1;
    if ($impl.WriteCallBack != null) {
      for (var $l = 0, $end = l; $l <= $end; $l++) {
        i = $l;
        $impl.WriteCallBack(arguments[i],i === l);
      };
    } else {
      s = $impl.WriteBuf;
      for (var $l1 = 0, $end1 = l; $l1 <= $end1; $l1++) {
        i = $l1;
        s = s + ("" + arguments[i]);
      };
      console.log(s);
      $impl.WriteBuf = "";
    };
  };
  this.SetWriteCallBack = function (H) {
    var Result = null;
    Result = $impl.WriteCallBack;
    $impl.WriteCallBack = H;
    return Result;
  };
  $mod.$implcode = function () {
    $impl.WriteBuf = "";
    $impl.WriteCallBack = null;
    $impl.valint = function (S, MinVal, MaxVal, Code) {
      var Result = 0;
      var x = 0.0;
      if (S === "") {
        Code.set(1);
        return Result;
      };
      x = Number(S);
      if (isNaN(x)) {
        var $tmp = $mod.Copy(S,1,1);
        if ($tmp === "$") {
          x = Number("0x" + $mod.Copy$1(S,2))}
         else if ($tmp === "&") {
          x = Number("0o" + $mod.Copy$1(S,2))}
         else if ($tmp === "%") {
          x = Number("0b" + $mod.Copy$1(S,2))}
         else {
          Code.set(1);
          return Result;
        };
      };
      if (isNaN(x) || (x !== $mod.Int(x))) {
        Code.set(1)}
       else if ((x < MinVal) || (x > MaxVal)) {
        Code.set(2)}
       else {
        Result = $mod.Trunc(x);
        Code.set(0);
      };
      return Result;
    };
  };
  $mod.$init = function () {
    rtl.exitcode = 0;
  };
},[]);
rtl.module("RTLConsts",["System"],function () {
  "use strict";
  var $mod = this;
  $mod.$resourcestrings = {SArgumentMissing: {org: 'Missing argument in format "%s"'}, SInvalidFormat: {org: 'Invalid format specifier : "%s"'}, SInvalidArgIndex: {org: 'Invalid argument index in format: "%s"'}, SErrInvalidFloat: {org: 'Invalid floating-point value: "%s"'}};
});
rtl.module("JS",["System"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("SysUtils",["System","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.recNewT(this,"TFormatSettings",function () {
    this.CurrencyDecimals = 0;
    this.CurrencyFormat = 0;
    this.CurrencyString = "";
    this.DateSeparator = "\x00";
    this.DecimalSeparator = "";
    this.LongDateFormat = "";
    this.LongTimeFormat = "";
    this.NegCurrFormat = 0;
    this.ShortDateFormat = "";
    this.ShortTimeFormat = "";
    this.ThousandSeparator = "";
    this.TimeAMString = "";
    this.TimePMString = "";
    this.TimeSeparator = "\x00";
    this.TwoDigitYearCenturyWindow = 0;
    this.InitLocaleHandler = null;
    this.$new = function () {
      var r = Object.create(this);
      r.DateTimeToStrFormat = rtl.arraySetLength(null,"",2);
      r.LongDayNames = rtl.arraySetLength(null,"",7);
      r.LongMonthNames = rtl.arraySetLength(null,"",12);
      r.ShortDayNames = rtl.arraySetLength(null,"",7);
      r.ShortMonthNames = rtl.arraySetLength(null,"",12);
      return r;
    };
    this.$eq = function (b) {
      return (this.CurrencyDecimals === b.CurrencyDecimals) && (this.CurrencyFormat === b.CurrencyFormat) && (this.CurrencyString === b.CurrencyString) && (this.DateSeparator === b.DateSeparator) && rtl.arrayEq(this.DateTimeToStrFormat,b.DateTimeToStrFormat) && (this.DecimalSeparator === b.DecimalSeparator) && (this.LongDateFormat === b.LongDateFormat) && rtl.arrayEq(this.LongDayNames,b.LongDayNames) && rtl.arrayEq(this.LongMonthNames,b.LongMonthNames) && (this.LongTimeFormat === b.LongTimeFormat) && (this.NegCurrFormat === b.NegCurrFormat) && (this.ShortDateFormat === b.ShortDateFormat) && rtl.arrayEq(this.ShortDayNames,b.ShortDayNames) && rtl.arrayEq(this.ShortMonthNames,b.ShortMonthNames) && (this.ShortTimeFormat === b.ShortTimeFormat) && (this.ThousandSeparator === b.ThousandSeparator) && (this.TimeAMString === b.TimeAMString) && (this.TimePMString === b.TimePMString) && (this.TimeSeparator === b.TimeSeparator) && (this.TwoDigitYearCenturyWindow === b.TwoDigitYearCenturyWindow);
    };
    this.$assign = function (s) {
      this.CurrencyDecimals = s.CurrencyDecimals;
      this.CurrencyFormat = s.CurrencyFormat;
      this.CurrencyString = s.CurrencyString;
      this.DateSeparator = s.DateSeparator;
      this.DateTimeToStrFormat = s.DateTimeToStrFormat.slice(0);
      this.DecimalSeparator = s.DecimalSeparator;
      this.LongDateFormat = s.LongDateFormat;
      this.LongDayNames = s.LongDayNames.slice(0);
      this.LongMonthNames = s.LongMonthNames.slice(0);
      this.LongTimeFormat = s.LongTimeFormat;
      this.NegCurrFormat = s.NegCurrFormat;
      this.ShortDateFormat = s.ShortDateFormat;
      this.ShortDayNames = s.ShortDayNames.slice(0);
      this.ShortMonthNames = s.ShortMonthNames.slice(0);
      this.ShortTimeFormat = s.ShortTimeFormat;
      this.ThousandSeparator = s.ThousandSeparator;
      this.TimeAMString = s.TimeAMString;
      this.TimePMString = s.TimePMString;
      this.TimeSeparator = s.TimeSeparator;
      this.TwoDigitYearCenturyWindow = s.TwoDigitYearCenturyWindow;
      return this;
    };
    this.GetJSLocale = function () {
      return Intl.DateTimeFormat().resolvedOptions().locale;
    };
    this.Create = function () {
      var Result = $mod.TFormatSettings.$new();
      Result.$assign($mod.TFormatSettings.Create$1($mod.TFormatSettings.GetJSLocale()));
      return Result;
    };
    this.Create$1 = function (ALocale) {
      var Result = $mod.TFormatSettings.$new();
      Result.LongDayNames = $impl.DefaultLongDayNames.slice(0);
      Result.ShortDayNames = $impl.DefaultShortDayNames.slice(0);
      Result.ShortMonthNames = $impl.DefaultShortMonthNames.slice(0);
      Result.LongMonthNames = $impl.DefaultLongMonthNames.slice(0);
      Result.DateTimeToStrFormat[0] = "c";
      Result.DateTimeToStrFormat[1] = "f";
      Result.DateSeparator = "-";
      Result.TimeSeparator = ":";
      Result.ShortDateFormat = "yyyy-mm-dd";
      Result.LongDateFormat = "ddd, yyyy-mm-dd";
      Result.ShortTimeFormat = "hh:nn";
      Result.LongTimeFormat = "hh:nn:ss";
      Result.DecimalSeparator = ".";
      Result.ThousandSeparator = ",";
      Result.TimeAMString = "AM";
      Result.TimePMString = "PM";
      Result.TwoDigitYearCenturyWindow = 50;
      Result.CurrencyFormat = 0;
      Result.NegCurrFormat = 0;
      Result.CurrencyDecimals = 2;
      Result.CurrencyString = "$";
      if ($mod.TFormatSettings.InitLocaleHandler != null) $mod.TFormatSettings.InitLocaleHandler($mod.UpperCase(ALocale),$mod.TFormatSettings.$clone(Result));
      return Result;
    };
  },true);
  rtl.createClass(this,"Exception",pas.System.TObject,function () {
    this.LogMessageOnCreate = false;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fMessage = "";
    };
    this.Create$1 = function (Msg) {
      this.fMessage = Msg;
      if (this.LogMessageOnCreate) pas.System.Writeln("Created exception ",this.$classname," with message: ",Msg);
      return this;
    };
    this.CreateFmt = function (Msg, Args) {
      this.Create$1($mod.Format(Msg,Args));
      return this;
    };
  });
  rtl.createClass(this,"EExternal",this.Exception,function () {
  });
  rtl.createClass(this,"EConvertError",this.Exception,function () {
  });
  rtl.createClass(this,"EIntError",this.EExternal,function () {
  });
  rtl.createClass(this,"EDivByZero",this.EIntError,function () {
  });
  this.TrimLeft = function (S) {
    return S.replace(/^[\s\uFEFF\xA0\x00-\x1f]+/,'');
  };
  this.TrimRight = function (S) {
    return S.replace(/[\s\uFEFF\xA0\x00-\x1f]+$/,'');
  };
  this.UpperCase = function (s) {
    return s.toUpperCase();
  };
  this.CompareText = function (s1, s2) {
    var l1 = s1.toLowerCase();
    var l2 = s2.toLowerCase();
    if (l1>l2){ return 1;
    } else if (l1<l2){ return -1;
    } else { return 0; };
  };
  this.Format = function (Fmt, Args) {
    var Result = "";
    Result = $mod.Format$1(Fmt,Args,$mod.FormatSettings);
    return Result;
  };
  this.Format$1 = function (Fmt, Args, aSettings) {
    var Result = "";
    var ChPos = 0;
    var OldPos = 0;
    var ArgPos = 0;
    var DoArg = 0;
    var Len = 0;
    var Hs = "";
    var ToAdd = "";
    var Index = 0;
    var Width = 0;
    var Prec = 0;
    var Left = false;
    var Fchar = "\x00";
    var vq = 0;
    function ReadFormat() {
      var Result = "\x00";
      var Value = 0;
      function ReadInteger() {
        var Code = 0;
        var ArgN = 0;
        if (Value !== -1) return;
        OldPos = ChPos;
        while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) <= "9") && (Fmt.charAt(ChPos - 1) >= "0")) ChPos += 1;
        if (ChPos > Len) $impl.DoFormatError(1,Fmt);
        if (Fmt.charAt(ChPos - 1) === "*") {
          if (Index === 255) {
            ArgN = ArgPos}
           else {
            ArgN = Index;
            Index += 1;
          };
          if ((ChPos > OldPos) || (ArgN > (rtl.length(Args) - 1))) $impl.DoFormatError(1,Fmt);
          ArgPos = ArgN + 1;
          var $tmp = Args[ArgN].VType;
          if ($tmp === 0) {
            Value = Args[ArgN].VJSValue}
           else if ($tmp === 19) {
            Value = Args[ArgN].VJSValue}
           else {
            $impl.DoFormatError(1,Fmt);
          };
          ChPos += 1;
        } else {
          if (OldPos < ChPos) {
            pas.System.val(pas.System.Copy(Fmt,OldPos,ChPos - OldPos),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code > 0) $impl.DoFormatError(1,Fmt);
          } else Value = -1;
        };
      };
      function ReadIndex() {
        if (Fmt.charAt(ChPos - 1) !== ":") {
          ReadInteger()}
         else Value = 0;
        if (Fmt.charAt(ChPos - 1) === ":") {
          if (Value === -1) $impl.DoFormatError(2,Fmt);
          Index = Value;
          Value = -1;
          ChPos += 1;
        };
      };
      function ReadLeft() {
        if (Fmt.charAt(ChPos - 1) === "-") {
          Left = true;
          ChPos += 1;
        } else Left = false;
      };
      function ReadWidth() {
        ReadInteger();
        if (Value !== -1) {
          Width = Value;
          Value = -1;
        };
      };
      function ReadPrec() {
        if (Fmt.charAt(ChPos - 1) === ".") {
          ChPos += 1;
          ReadInteger();
          if (Value === -1) Value = 0;
          Prec = Value;
        };
      };
      Index = 255;
      Width = -1;
      Prec = -1;
      Value = -1;
      ChPos += 1;
      if (Fmt.charAt(ChPos - 1) === "%") {
        Result = "%";
        return Result;
      };
      ReadIndex();
      ReadLeft();
      ReadWidth();
      ReadPrec();
      Result = pas.System.upcase(Fmt.charAt(ChPos - 1));
      return Result;
    };
    function Checkarg(AT, err) {
      var Result = false;
      Result = false;
      if (Index === 255) {
        DoArg = ArgPos}
       else DoArg = Index;
      ArgPos = DoArg + 1;
      if ((DoArg > (rtl.length(Args) - 1)) || (Args[DoArg].VType !== AT)) {
        if (err) $impl.DoFormatError(3,Fmt);
        ArgPos -= 1;
        return Result;
      };
      Result = true;
      return Result;
    };
    Result = "";
    Len = Fmt.length;
    ChPos = 1;
    OldPos = 1;
    ArgPos = 0;
    while (ChPos <= Len) {
      while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) !== "%")) ChPos += 1;
      if (ChPos > OldPos) Result = Result + pas.System.Copy(Fmt,OldPos,ChPos - OldPos);
      if (ChPos < Len) {
        Fchar = ReadFormat();
        var $tmp = Fchar;
        if ($tmp === "D") {
          if (Checkarg(0,false)) {
            ToAdd = $mod.IntToStr(Args[DoArg].VJSValue)}
           else if (Checkarg(19,true)) ToAdd = $mod.IntToStr(Args[DoArg].VJSValue);
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          if (ToAdd.charAt(0) !== "-") {
            ToAdd = pas.System.StringOfChar("0",Index) + ToAdd}
           else pas.System.Insert(pas.System.StringOfChar("0",Index + 1),{get: function () {
              return ToAdd;
            }, set: function (v) {
              ToAdd = v;
            }},2);
        } else if ($tmp === "U") {
          if (Checkarg(0,false)) {
            ToAdd = $mod.IntToStr(Args[DoArg].VJSValue >>> 0)}
           else if (Checkarg(19,true)) ToAdd = $mod.IntToStr(Args[DoArg].VJSValue);
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          ToAdd = pas.System.StringOfChar("0",Index) + ToAdd;
        } else if ($tmp === "E") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffExponent,3,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffExponent,3,Prec,aSettings);
        } else if ($tmp === "F") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffFixed,9999,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffFixed,9999,Prec,aSettings);
        } else if ($tmp === "G") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffGeneral,Prec,3,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffGeneral,Prec,3,aSettings);
        } else if ($tmp === "N") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffNumber,9999,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffNumber,9999,Prec,aSettings);
        } else if ($tmp === "M") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffCurrency,9999,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffCurrency,9999,Prec,aSettings);
        } else if ($tmp === "S") {
          if (Checkarg(18,false)) {
            Hs = Args[DoArg].VJSValue}
           else if (Checkarg(9,true)) Hs = Args[DoArg].VJSValue;
          Index = Hs.length;
          if ((Prec !== -1) && (Index > Prec)) Index = Prec;
          ToAdd = pas.System.Copy(Hs,1,Index);
        } else if ($tmp === "P") {
          if (Checkarg(0,false)) {
            ToAdd = $mod.IntToHex(Args[DoArg].VJSValue,8)}
           else if (Checkarg(0,true)) ToAdd = $mod.IntToHex(Args[DoArg].VJSValue,16);
        } else if ($tmp === "X") {
          if (Checkarg(0,false)) {
            vq = Args[DoArg].VJSValue;
            Index = 16;
          } else if (Checkarg(19,true)) {
            vq = Args[DoArg].VJSValue;
            Index = 31;
          };
          if (Prec > Index) {
            ToAdd = $mod.IntToHex(vq,Index)}
           else {
            Index = 1;
            while ((rtl.shl(1,Index * 4) <= vq) && (Index < 16)) Index += 1;
            if (Index > Prec) Prec = Index;
            ToAdd = $mod.IntToHex(vq,Prec);
          };
        } else if ($tmp === "%") ToAdd = "%";
        if (Width !== -1) if (ToAdd.length < Width) if (!Left) {
          ToAdd = pas.System.StringOfChar(" ",Width - ToAdd.length) + ToAdd}
         else ToAdd = ToAdd + pas.System.StringOfChar(" ",Width - ToAdd.length);
        Result = Result + ToAdd;
      };
      ChPos += 1;
      OldPos = ChPos;
    };
    return Result;
  };
  this.TStringReplaceFlag = {"0": "rfReplaceAll", rfReplaceAll: 0, "1": "rfIgnoreCase", rfIgnoreCase: 1};
  this.StringReplace = function (aOriginal, aSearch, aReplace, Flags) {
    var Result = "";
    var REFlags = "";
    var REString = "";
    REFlags = "";
    if ($mod.TStringReplaceFlag.rfReplaceAll in Flags) REFlags = "g";
    if ($mod.TStringReplaceFlag.rfIgnoreCase in Flags) REFlags = REFlags + "i";
    REString = aSearch.replace(new RegExp($impl.RESpecials,"g"),"\\$1");
    Result = aOriginal.replace(new RegExp(REString,REFlags),aReplace);
    return Result;
  };
  this.IntToStr = function (Value) {
    var Result = "";
    Result = "" + Value;
    return Result;
  };
  this.IntToHex = function (Value, Digits) {
    var Result = "";
    Result = "";
    if (Value < 0) if (Value<0) Value = 0xFFFFFFFF + Value + 1;
    Result=Value.toString(16);
    Result = $mod.UpperCase(Result);
    while (Result.length < Digits) Result = "0" + Result;
    return Result;
  };
  this.TFloatFormat = {"0": "ffFixed", ffFixed: 0, "1": "ffGeneral", ffGeneral: 1, "2": "ffExponent", ffExponent: 2, "3": "ffNumber", ffNumber: 3, "4": "ffCurrency", ffCurrency: 4};
  this.FloatToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStr$1(Value,$mod.FormatSettings);
    return Result;
  };
  this.FloatToStr$1 = function (Value, aSettings) {
    var Result = "";
    Result = $mod.FloatToStrF$1(Value,$mod.TFloatFormat.ffGeneral,15,0,aSettings);
    return Result;
  };
  this.FloatToStrF$1 = function (Value, format, Precision, Digits, aSettings) {
    var Result = "";
    var TS = "";
    var DS = "";
    DS = aSettings.DecimalSeparator;
    TS = aSettings.ThousandSeparator;
    var $tmp = format;
    if ($tmp === $mod.TFloatFormat.ffGeneral) {
      Result = $impl.FormatGeneralFloat(Value,Precision,DS)}
     else if ($tmp === $mod.TFloatFormat.ffExponent) {
      Result = $impl.FormatExponentFloat(Value,Precision,Digits,DS)}
     else if ($tmp === $mod.TFloatFormat.ffFixed) {
      Result = $impl.FormatFixedFloat(Value,Digits,DS)}
     else if ($tmp === $mod.TFloatFormat.ffNumber) {
      Result = $impl.FormatNumberFloat(Value,Digits,DS,TS)}
     else if ($tmp === $mod.TFloatFormat.ffCurrency) Result = $impl.FormatNumberCurrency(Value * 10000,Digits,aSettings);
    if ((format !== $mod.TFloatFormat.ffCurrency) && (Result.length > 1) && (Result.charAt(0) === "-")) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS,TS);
    return Result;
  };
  var TDecimalPart = {"0": "dpDigit", dpDigit: 0, "1": "dpSignificand", dpSignificand: 1, "2": "dpExp", dpExp: 2};
  this.TryStrToFloat$3 = function (S, res, aSettings) {
    var Result = false;
    var J = undefined;
    var I = 0;
    var aStart = 0;
    var Len = 0;
    var N = "";
    var p = 0;
    Result = false;
    N = S;
    if (aSettings.ThousandSeparator !== "") N = $mod.StringReplace(N,aSettings.ThousandSeparator,"",rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll));
    if (aSettings.DecimalSeparator !== ".") N = $mod.StringReplace(N,aSettings.DecimalSeparator,".",{});
    p = TDecimalPart.dpDigit;
    I = 1;
    aStart = 1;
    Len = N.length;
    while (I <= Len) {
      var $tmp = N.charAt(I - 1);
      if (($tmp === "+") || ($tmp === "-")) {
        var $tmp1 = p;
        if ($tmp1 === TDecimalPart.dpSignificand) {
          return Result}
         else if ($tmp1 === TDecimalPart.dpDigit) {
          if (I > aStart) return Result}
         else if ($tmp1 === TDecimalPart.dpExp) if (I > (aStart + 1)) return Result;
      } else if (($tmp >= "0") && ($tmp <= "9")) {}
      else if ($tmp === ".") {
        if (p !== TDecimalPart.dpDigit) return Result;
        p = TDecimalPart.dpSignificand;
        aStart = I;
      } else if (($tmp === "E") || ($tmp === "e")) {
        if (p === TDecimalPart.dpExp) {
          return Result}
         else {
          p = TDecimalPart.dpExp;
          aStart = I;
        };
      } else {
        return Result;
      };
      I += 1;
    };
    J = parseFloat(N);
    Result = !isNaN(J);
    if (Result) res.set(rtl.getNumber(J));
    return Result;
  };
  this.StrToFloat = function (S) {
    var Result = 0.0;
    Result = $mod.StrToFloat$1(S,$mod.FormatSettings);
    return Result;
  };
  this.StrToFloat$1 = function (S, aSettings) {
    var Result = 0.0;
    if (!$mod.TryStrToFloat$3(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},aSettings)) throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SErrInvalidFloat"),pas.System.VarRecs(18,S)]);
    return Result;
  };
  rtl.recNewT(this,"TTimeStamp",function () {
    this.Time = 0;
    this.Date = 0;
    this.$eq = function (b) {
      return (this.Time === b.Time) && (this.Date === b.Date);
    };
    this.$assign = function (s) {
      this.Time = s.Time;
      this.Date = s.Date;
      return this;
    };
  });
  this.TimeSeparator = "\x00";
  this.DateSeparator = "\x00";
  this.ShortDateFormat = "";
  this.LongDateFormat = "";
  this.ShortTimeFormat = "";
  this.LongTimeFormat = "";
  this.DecimalSeparator = "";
  this.ThousandSeparator = "";
  this.TimeAMString = "";
  this.TimePMString = "";
  this.HoursPerDay = 24;
  this.MinsPerHour = 60;
  this.SecsPerMin = 60;
  this.MSecsPerSec = 1000;
  this.MinsPerDay = 24 * 60;
  this.SecsPerDay = 1440 * 60;
  this.MSecsPerDay = 86400 * 1000;
  this.MaxDateTime = 2958465.99999999;
  this.DateDelta = 693594;
  this.MonthDays$a$clone = function (a) {
    var b = [];
    b.length = 2;
    for (var c = 0; c < 2; c++) b[c] = a[c].slice(0);
    return b;
  };
  this.MonthDays = [[31,28,31,30,31,30,31,31,30,31,30,31],[31,29,31,30,31,30,31,31,30,31,30,31]];
  this.ShortMonthNames = rtl.arraySetLength(null,"",12);
  this.LongMonthNames = rtl.arraySetLength(null,"",12);
  this.ShortDayNames = rtl.arraySetLength(null,"",7);
  this.LongDayNames = rtl.arraySetLength(null,"",7);
  this.FormatSettings = this.TFormatSettings.$new();
  this.JSDateToDateTime = function (aDate) {
    var Result = 0.0;
    Result = $mod.EncodeDate(aDate.getFullYear(),aDate.getMonth() + 1,aDate.getDate()) + $mod.EncodeTime(aDate.getHours(),aDate.getMinutes(),aDate.getSeconds(),aDate.getMilliseconds());
    return Result;
  };
  this.DateTimeToTimeStamp = function (DateTime) {
    var Result = $mod.TTimeStamp.$new();
    var D = 0.0;
    D = DateTime * 86400000;
    if (D < 0) {
      D = D - 0.5}
     else D = D + 0.5;
    Result.Time = pas.System.Trunc(Math.abs(pas.System.Trunc(D)) % 86400000);
    Result.Date = 693594 + rtl.trunc(pas.System.Trunc(D) / 86400000);
    return Result;
  };
  this.TryEncodeDate = function (Year, Month, Day, date) {
    var Result = false;
    var c = 0;
    var ya = 0;
    Result = (Year > 0) && (Year < 10000) && (Month >= 1) && (Month <= 12) && (Day > 0) && (Day <= $mod.MonthDays[+$mod.IsLeapYear(Year)][Month - 1]);
    if (Result) {
      if (Month > 2) {
        Month -= 3}
       else {
        Month += 9;
        Year -= 1;
      };
      c = rtl.trunc(Year / 100);
      ya = Year - (100 * c);
      date.set(((146097 * c) >>> 2) + ((1461 * ya) >>> 2) + rtl.trunc(((153 * Month) + 2) / 5) + Day);
      date.set(date.get() - 693900);
    };
    return Result;
  };
  this.TryEncodeTime = function (Hour, Min, Sec, MSec, Time) {
    var Result = false;
    Result = (Hour < 24) && (Min < 60) && (Sec < 60) && (MSec < 1000);
    if (Result) Time.set(((Hour * 3600000) + (Min * 60000) + (Sec * 1000) + MSec) / 86400000);
    return Result;
  };
  this.EncodeDate = function (Year, Month, Day) {
    var Result = 0.0;
    if (!$mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s-%s-%s is not a valid date specification",pas.System.VarRecs(18,$mod.IntToStr(Year),18,$mod.IntToStr(Month),18,$mod.IntToStr(Day))]);
    return Result;
  };
  this.EncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s:%s:%s.%s is not a valid time specification",pas.System.VarRecs(18,$mod.IntToStr(Hour),18,$mod.IntToStr(Minute),18,$mod.IntToStr(Second),18,$mod.IntToStr(MilliSecond))]);
    return Result;
  };
  this.DecodeDate = function (date, Year, Month, Day) {
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var j = 0;
    if (date <= -693594) {
      Year.set(0);
      Month.set(0);
      Day.set(0);
    } else {
      if (date > 0) {
        date = date + (1 / (86400000 * 2))}
       else date = date - (1 / (86400000 * 2));
      if (date > $mod.MaxDateTime) date = $mod.MaxDateTime;
      j = rtl.shl(pas.System.Trunc(date) + 693900,2) - 1;
      ly = rtl.trunc(j / 146097);
      j = j - (146097 * ly);
      ld = rtl.lw(j >>> 2);
      j = rtl.trunc((rtl.lw(ld << 2) + 3) / 1461);
      ld = rtl.lw(((rtl.lw(ld << 2) + 7) - (1461 * j)) >>> 2);
      lm = rtl.trunc(((5 * ld) - 3) / 153);
      ld = rtl.trunc((((5 * ld) + 2) - (153 * lm)) / 5);
      ly = (100 * ly) + j;
      if (lm < 10) {
        lm += 3}
       else {
        lm -= 9;
        ly += 1;
      };
      Year.set(ly);
      Month.set(lm);
      Day.set(ld);
    };
  };
  this.DecodeTime = function (Time, Hour, Minute, Second, MilliSecond) {
    var l = 0;
    l = $mod.DateTimeToTimeStamp(Time).Time;
    Hour.set(rtl.trunc(l / 3600000));
    l = l % 3600000;
    Minute.set(rtl.trunc(l / 60000));
    l = l % 60000;
    Second.set(rtl.trunc(l / 1000));
    l = l % 1000;
    MilliSecond.set(l);
  };
  this.DecodeDateFully = function (DateTime, Year, Month, Day, DOW) {
    var Result = false;
    $mod.DecodeDate(DateTime,Year,Month,Day);
    DOW.set($mod.DayOfWeek(DateTime));
    Result = $mod.IsLeapYear(Year.get());
    return Result;
  };
  this.Now = function () {
    var Result = 0.0;
    Result = $mod.JSDateToDateTime(new Date());
    return Result;
  };
  this.DayOfWeek = function (DateTime) {
    var Result = 0;
    Result = 1 + ((pas.System.Trunc(DateTime) - 1) % 7);
    if (Result <= 0) Result += 7;
    return Result;
  };
  this.IsLeapYear = function (Year) {
    var Result = false;
    Result = ((Year % 4) === 0) && (((Year % 100) !== 0) || ((Year % 400) === 0));
    return Result;
  };
  this.DateToStr = function (date) {
    var Result = "";
    Result = $mod.DateToStr$1(date,$mod.FormatSettings);
    return Result;
  };
  this.DateToStr$1 = function (date, aSettings) {
    var Result = "";
    Result = $mod.FormatDateTime$1("ddddd",date,aSettings);
    return Result;
  };
  this.TimeToStr = function (Time) {
    var Result = "";
    Result = $mod.TimeToStr$1(Time,$mod.FormatSettings);
    return Result;
  };
  this.TimeToStr$1 = function (Time, aSettings) {
    var Result = "";
    Result = $mod.FormatDateTime$1("tt",Time,aSettings);
    return Result;
  };
  this.FormatDateTime$1 = function (aFormatStr, DateTime, aSettings) {
    var Result = "";
    function StoreString(AStr) {
      Result = Result + AStr;
    };
    function StoreInt(Value, Digits) {
      var S = "";
      S = $mod.IntToStr(Value);
      while (S.length < Digits) S = "0" + S;
      StoreString(S);
    };
    var Year = 0;
    var Month = 0;
    var Day = 0;
    var DayOfWeek = 0;
    var Hour = 0;
    var Minute = 0;
    var Second = 0;
    var MilliSecond = 0;
    function StoreFormat(FormatStr, Nesting, TimeFlag) {
      function StoreStr(APos, Len) {
        Result = Result + pas.System.Copy(aFormatStr,APos,Len);
      };
      var Token = "\x00";
      var lastformattoken = "\x00";
      var prevlasttoken = "\x00";
      var Count = 0;
      var Clock12 = false;
      var tmp = 0;
      var isInterval = false;
      var P = 0;
      var FormatCurrent = 0;
      var FormatEnd = 0;
      if (Nesting > 1) return;
      FormatCurrent = 1;
      FormatEnd = FormatStr.length;
      Clock12 = false;
      isInterval = false;
      P = 1;
      while (P <= FormatEnd) {
        Token = FormatStr.charAt(P - 1);
        var $tmp = Token;
        if (($tmp === "'") || ($tmp === '"')) {
          P += 1;
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
        } else if (($tmp === "A") || ($tmp === "a")) {
          if (($mod.CompareText(pas.System.Copy(FormatStr,P,3),"A/P") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,4),"AMPM") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,5),"AM/PM") === 0)) {
            Clock12 = true;
            break;
          };
        };
        P += 1;
      };
      Token = "ÿ";
      lastformattoken = " ";
      prevlasttoken = "H";
      while (FormatCurrent <= FormatEnd) {
        Token = $mod.UpperCase(FormatStr.charAt(FormatCurrent - 1)).charAt(0);
        Count = 1;
        P = FormatCurrent + 1;
        var $tmp1 = Token;
        if (($tmp1 === "'") || ($tmp1 === '"')) {
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
          P += 1;
          Count = P - FormatCurrent;
          StoreStr(FormatCurrent + 1,Count - 2);
        } else if ($tmp1 === "A") {
          if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,4),"AMPM") === 0) {
            Count = 4;
            if (Hour < 12) {
              StoreString(aSettings.TimeAMString)}
             else StoreString(aSettings.TimePMString);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,5),"AM/PM") === 0) {
            Count = 5;
            if (Hour < 12) {
              StoreStr(FormatCurrent,2)}
             else StoreStr(FormatCurrent + 3,2);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,3),"A/P") === 0) {
            Count = 3;
            if (Hour < 12) {
              StoreStr(FormatCurrent,1)}
             else StoreStr(FormatCurrent + 2,1);
          } else throw $mod.EConvertError.$create("Create$1",["Illegal character in format string"]);
        } else if ($tmp1 === "/") {
          StoreString(aSettings.DateSeparator);
        } else if ($tmp1 === ":") {
          StoreString(aSettings.TimeSeparator)}
         else if (($tmp1 === " ") || ($tmp1 === "C") || ($tmp1 === "D") || ($tmp1 === "H") || ($tmp1 === "M") || ($tmp1 === "N") || ($tmp1 === "S") || ($tmp1 === "T") || ($tmp1 === "Y") || ($tmp1 === "Z") || ($tmp1 === "F")) {
          while ((P <= FormatEnd) && ($mod.UpperCase(FormatStr.charAt(P - 1)) === Token)) P += 1;
          Count = P - FormatCurrent;
          var $tmp2 = Token;
          if ($tmp2 === " ") {
            StoreStr(FormatCurrent,Count)}
           else if ($tmp2 === "Y") {
            if (Count > 2) {
              StoreInt(Year,4)}
             else StoreInt(Year % 100,2);
          } else if ($tmp2 === "M") {
            if (isInterval && ((prevlasttoken === "H") || TimeFlag)) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if ((lastformattoken === "H") || TimeFlag) {
              if (Count === 1) {
                StoreInt(Minute,0)}
               else StoreInt(Minute,2);
            } else {
              var $tmp3 = Count;
              if ($tmp3 === 1) {
                StoreInt(Month,0)}
               else if ($tmp3 === 2) {
                StoreInt(Month,2)}
               else if ($tmp3 === 3) {
                StoreString(aSettings.ShortMonthNames[Month - 1])}
               else {
                StoreString(aSettings.LongMonthNames[Month - 1]);
              };
            };
          } else if ($tmp2 === "D") {
            var $tmp4 = Count;
            if ($tmp4 === 1) {
              StoreInt(Day,0)}
             else if ($tmp4 === 2) {
              StoreInt(Day,2)}
             else if ($tmp4 === 3) {
              StoreString(aSettings.ShortDayNames[DayOfWeek - 1])}
             else if ($tmp4 === 4) {
              StoreString(aSettings.LongDayNames[DayOfWeek - 1])}
             else if ($tmp4 === 5) {
              StoreFormat(aSettings.ShortDateFormat,Nesting + 1,false)}
             else {
              StoreFormat(aSettings.LongDateFormat,Nesting + 1,false);
            };
          } else if ($tmp2 === "H") {
            if (isInterval) {
              StoreInt(Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24),0)}
             else if (Clock12) {
              tmp = Hour % 12;
              if (tmp === 0) tmp = 12;
              if (Count === 1) {
                StoreInt(tmp,0)}
               else StoreInt(tmp,2);
            } else {
              if (Count === 1) {
                StoreInt(Hour,0)}
               else StoreInt(Hour,2);
            }}
           else if ($tmp2 === "N") {
            if (isInterval) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Minute,0)}
             else StoreInt(Minute,2)}
           else if ($tmp2 === "S") {
            if (isInterval) {
              StoreInt(Second + ((Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Second,0)}
             else StoreInt(Second,2)}
           else if ($tmp2 === "Z") {
            if (Count === 1) {
              StoreInt(MilliSecond,0)}
             else StoreInt(MilliSecond,3)}
           else if ($tmp2 === "T") {
            if (Count === 1) {
              StoreFormat(aSettings.ShortTimeFormat,Nesting + 1,true)}
             else StoreFormat(aSettings.LongTimeFormat,Nesting + 1,true)}
           else if ($tmp2 === "C") {
            StoreFormat(aSettings.ShortDateFormat,Nesting + 1,false);
            if ((Hour !== 0) || (Minute !== 0) || (Second !== 0)) {
              StoreString(" ");
              StoreFormat(aSettings.LongTimeFormat,Nesting + 1,true);
            };
          } else if ($tmp2 === "F") {
            StoreFormat(aSettings.ShortDateFormat,Nesting + 1,false);
            StoreString(" ");
            StoreFormat(aSettings.LongTimeFormat,Nesting + 1,true);
          };
          prevlasttoken = lastformattoken;
          lastformattoken = Token;
        } else {
          StoreString(Token);
        };
        FormatCurrent += Count;
      };
    };
    $mod.DecodeDateFully(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},{get: function () {
        return DayOfWeek;
      }, set: function (v) {
        DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{get: function () {
        return Hour;
      }, set: function (v) {
        Hour = v;
      }},{get: function () {
        return Minute;
      }, set: function (v) {
        Minute = v;
      }},{get: function () {
        return Second;
      }, set: function (v) {
        Second = v;
      }},{get: function () {
        return MilliSecond;
      }, set: function (v) {
        MilliSecond = v;
      }});
    if (aFormatStr !== "") {
      StoreFormat(aFormatStr,0,false)}
     else StoreFormat("C",0,false);
    return Result;
  };
  this.CurrencyFormat = 0;
  this.NegCurrFormat = 0;
  this.CurrencyDecimals = 0;
  this.CurrencyString = "";
  this.ChangeFileExt = function (FileName, Extension) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !(FileName.charCodeAt(i - 1) in EndSep)) i -= 1;
    if ((i === 0) || (FileName.charAt(i - 1) !== pas.System.ExtensionSeparator)) {
      i = FileName.length + 1}
     else {
      SOF = (i === 1) || (FileName.charCodeAt(i - 1 - 1) in pas.System.AllowDirectorySeparators);
      if (SOF && !pas.System.FirstDotAtFileNameStartIsExtension) i = FileName.length + 1;
    };
    Result = pas.System.Copy(FileName,1,i - 1) + Extension;
    return Result;
  };
  this.ExtractFilePath = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if (i > 0) {
      Result = pas.System.Copy(FileName,1,i)}
     else Result = "";
    return Result;
  };
  this.ExtractFileName = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,i + 1,2147483647);
    return Result;
  };
  this.ExtractFileExt = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    Result = "";
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if ((i > 0) && (FileName.charAt(i - 1) === pas.System.ExtensionSeparator)) {
      SOF = (i === 1) || (FileName.charCodeAt(i - 1 - 1) in pas.System.AllowDirectorySeparators);
      if (!SOF || pas.System.FirstDotAtFileNameStartIsExtension) Result = pas.System.Copy(FileName,i,2147483647);
    } else Result = "";
    return Result;
  };
  this.IncludeTrailingPathDelimiter = function (Path) {
    var Result = "";
    var l = 0;
    Result = Path;
    l = Result.length;
    if ((l === 0) || !$impl.CharInSet$1(Result.charAt(l - 1),pas.System.AllowDirectorySeparators)) Result = Result + pas.System.PathDelim;
    return Result;
  };
  rtl.createHelper(this,"TStringHelper",null,function () {
    this.GetLength = function () {
      var Result = 0;
      Result = this.get().length;
      return Result;
    };
    this.IndexOf = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.IndexOf$4.call(this,AValue,0,$mod.TStringHelper.GetLength.call(this));
      return Result;
    };
    this.IndexOf$1 = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.IndexOf$5.call(this,AValue,0,$mod.TStringHelper.GetLength.call(this));
      return Result;
    };
    this.IndexOf$4 = function (AValue, StartIndex, ACount) {
      var Result = 0;
      var S = "";
      S = pas.System.Copy(this.get(),StartIndex + 1,ACount);
      Result = pas.System.Pos(AValue,S) - 1;
      if (Result !== -1) Result = Result + StartIndex;
      return Result;
    };
    this.IndexOf$5 = function (AValue, StartIndex, ACount) {
      var Result = 0;
      var S = "";
      S = pas.System.Copy(this.get(),StartIndex + 1,ACount);
      Result = pas.System.Pos(AValue,S) - 1;
      if (Result !== -1) Result = Result + StartIndex;
      return Result;
    };
    this.LastIndexOf = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.LastIndexOf$4.call(this,AValue,$mod.TStringHelper.GetLength.call(this) - 1,$mod.TStringHelper.GetLength.call(this));
      return Result;
    };
    this.LastIndexOf$4 = function (AValue, AStartIndex, ACount) {
      var Result = 0;
      var Min = 0;
      Result = AStartIndex + 1;
      Min = (Result - ACount) + 1;
      if (Min < 1) Min = 1;
      while ((Result >= Min) && (this.get().charAt(Result - 1) !== AValue)) Result -= 1;
      if (Result < Min) {
        Result = -1}
       else Result = Result - 1;
      return Result;
    };
    this.Replace$2 = function (OldValue, NewValue) {
      var Result = "";
      Result = $mod.TStringHelper.Replace$3.call(this,OldValue,NewValue,rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll));
      return Result;
    };
    this.Replace$3 = function (OldValue, NewValue, ReplaceFlags) {
      var Result = "";
      Result = $mod.StringReplace(this.get(),OldValue,NewValue,rtl.refSet(ReplaceFlags));
      return Result;
    };
  });
  $mod.$implcode = function () {
    $impl.DefaultShortMonthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    $impl.DefaultLongMonthNames = ["January","February","March","April","May","June","July","August","September","October","November","December"];
    $impl.DefaultShortDayNames = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
    $impl.DefaultLongDayNames = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
    $impl.CharInSet$1 = function (Ch, CSet) {
      var Result = false;
      Result = Ch.charCodeAt() in CSet;
      return Result;
    };
    $impl.feInvalidFormat = 1;
    $impl.feMissingArgument = 2;
    $impl.feInvalidArgIndex = 3;
    $impl.DoFormatError = function (ErrCode, fmt) {
      var $tmp = ErrCode;
      if ($tmp === 1) {
        throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SInvalidFormat"),pas.System.VarRecs(18,fmt)])}
       else if ($tmp === 2) {
        throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SArgumentMissing"),pas.System.VarRecs(18,fmt)])}
       else if ($tmp === 3) throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SInvalidArgIndex"),pas.System.VarRecs(18,fmt)]);
    };
    $impl.maxdigits = 15;
    $impl.ReplaceDecimalSep = function (S, DS) {
      var Result = "";
      var P = 0;
      P = pas.System.Pos(".",S);
      if (P > 0) {
        Result = pas.System.Copy(S,1,P - 1) + DS + pas.System.Copy(S,P + 1,S.length - P)}
       else Result = S;
      return Result;
    };
    $impl.FormatGeneralFloat = function (Value, Precision, DS) {
      var Result = "";
      var P = 0;
      var PE = 0;
      var Q = 0;
      var Exponent = 0;
      if ((Precision === -1) || (Precision > 15)) Precision = 15;
      Result = rtl.floatToStr(Value,Precision + 7);
      Result = $mod.TrimLeft(Result);
      P = pas.System.Pos(".",Result);
      if (P === 0) return Result;
      PE = pas.System.Pos("E",Result);
      if (PE === 0) {
        Result = $impl.ReplaceDecimalSep(Result,DS);
        return Result;
      };
      Q = PE + 2;
      Exponent = 0;
      while (Q <= Result.length) {
        Exponent = ((Exponent * 10) + Result.charCodeAt(Q - 1)) - 48;
        Q += 1;
      };
      if (Result.charAt((PE + 1) - 1) === "-") Exponent = -Exponent;
      if (((P + Exponent) < PE) && (Exponent > -6)) {
        Result = rtl.strSetLength(Result,PE - 1);
        if (Exponent >= 0) {
          for (var $l = 0, $end = Exponent - 1; $l <= $end; $l++) {
            Q = $l;
            Result = rtl.setCharAt(Result,P - 1,Result.charAt((P + 1) - 1));
            P += 1;
          };
          Result = rtl.setCharAt(Result,P - 1,".");
          P = 1;
          if (Result.charAt(P - 1) === "-") P += 1;
          while ((Result.charAt(P - 1) === "0") && (P < Result.length) && (pas.System.Copy(Result,P + 1,DS.length) !== DS)) pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P,1);
        } else {
          pas.System.Insert(pas.System.Copy("00000",1,-Exponent),{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P - 1);
          Result = rtl.setCharAt(Result,P - Exponent - 1,Result.charAt(P - Exponent - 1 - 1));
          Result = rtl.setCharAt(Result,P - 1,".");
          if (Exponent !== -1) Result = rtl.setCharAt(Result,P - Exponent - 1 - 1,"0");
        };
        Q = Result.length;
        while ((Q > 0) && (Result.charAt(Q - 1) === "0")) Q -= 1;
        if (Result.charAt(Q - 1) === ".") Q -= 1;
        if ((Q === 0) || ((Q === 1) && (Result.charAt(0) === "-"))) {
          Result = "0"}
         else Result = rtl.strSetLength(Result,Q);
      } else {
        while (Result.charAt(PE - 1 - 1) === "0") {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},PE - 1,1);
          PE -= 1;
        };
        if (Result.charAt(PE - 1 - 1) === DS) {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},PE - 1,1);
          PE -= 1;
        };
        if (Result.charAt((PE + 1) - 1) === "+") {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},PE + 1,1)}
         else PE += 1;
        while (Result.charAt((PE + 1) - 1) === "0") pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE + 1,1);
      };
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    $impl.FormatExponentFloat = function (Value, Precision, Digits, DS) {
      var Result = "";
      var P = 0;
      DS = $mod.FormatSettings.DecimalSeparator;
      if ((Precision === -1) || (Precision > 15)) Precision = 15;
      Result = rtl.floatToStr(Value,Precision + 7);
      while (Result.charAt(0) === " ") pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      P = pas.System.Pos("E",Result);
      if (P === 0) {
        Result = $impl.ReplaceDecimalSep(Result,DS);
        return Result;
      };
      P += 2;
      if (Digits > 4) Digits = 4;
      Digits = (Result.length - P - Digits) + 1;
      if (Digits < 0) {
        pas.System.Insert(pas.System.Copy("0000",1,-Digits),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P)}
       else while ((Digits > 0) && (Result.charAt(P - 1) === "0")) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P,1);
        if (P > Result.length) {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P - 2,2);
          break;
        };
        Digits -= 1;
      };
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    $impl.FormatFixedFloat = function (Value, Digits, DS) {
      var Result = "";
      if (Digits === -1) {
        Digits = 2}
       else if (Digits > 18) Digits = 18;
      Result = rtl.floatToStr(Value,0,Digits);
      if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    $impl.FormatNumberFloat = function (Value, Digits, DS, TS) {
      var Result = "";
      var P = 0;
      if (Digits === -1) {
        Digits = 2}
       else if (Digits > 15) Digits = 15;
      Result = rtl.floatToStr(Value,0,Digits);
      if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      P = pas.System.Pos(".",Result);
      if (P <= 0) P = Result.length + 1;
      Result = $impl.ReplaceDecimalSep(Result,DS);
      P -= 3;
      if ((TS !== "") && (TS !== "\x00")) while (P > 1) {
        if (Result.charAt(P - 1 - 1) !== "-") pas.System.Insert(TS,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P);
        P -= 3;
      };
      return Result;
    };
    $impl.RemoveLeadingNegativeSign = function (AValue, DS, aThousandSeparator) {
      var Result = false;
      var i = 0;
      var TS = "";
      var StartPos = 0;
      Result = false;
      StartPos = 2;
      TS = aThousandSeparator;
      for (var $l = StartPos, $end = AValue.get().length; $l <= $end; $l++) {
        i = $l;
        Result = (AValue.get().charCodeAt(i - 1) in rtl.createSet(48,DS.charCodeAt(),69,43)) || (AValue.get().charAt(i - 1) === TS);
        if (!Result) break;
      };
      if (Result && (AValue.get().charAt(0) === "-")) pas.System.Delete(AValue,1,1);
      return Result;
    };
    $impl.FormatNumberCurrency = function (Value, Digits, aSettings) {
      var Result = "";
      var Negative = false;
      var P = 0;
      var CS = "";
      var DS = "";
      var TS = "";
      DS = aSettings.DecimalSeparator;
      TS = aSettings.ThousandSeparator;
      CS = aSettings.CurrencyString;
      if (Digits === -1) {
        Digits = aSettings.CurrencyDecimals}
       else if (Digits > 18) Digits = 18;
      Result = rtl.floatToStr(Value / 10000,0,Digits);
      Negative = Result.charAt(0) === "-";
      if (Negative) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      P = pas.System.Pos(".",Result);
      if (TS !== "") {
        if (P !== 0) {
          Result = $impl.ReplaceDecimalSep(Result,DS)}
         else P = Result.length + 1;
        P -= 3;
        while (P > 1) {
          pas.System.Insert(TS,{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P);
          P -= 3;
        };
      };
      if (Negative) $impl.RemoveLeadingNegativeSign({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},DS,TS);
      if (!Negative) {
        var $tmp = aSettings.CurrencyFormat;
        if ($tmp === 0) {
          Result = CS + Result}
         else if ($tmp === 1) {
          Result = Result + CS}
         else if ($tmp === 2) {
          Result = CS + " " + Result}
         else if ($tmp === 3) Result = Result + " " + CS;
      } else {
        var $tmp1 = aSettings.NegCurrFormat;
        if ($tmp1 === 0) {
          Result = "(" + CS + Result + ")"}
         else if ($tmp1 === 1) {
          Result = "-" + CS + Result}
         else if ($tmp1 === 2) {
          Result = CS + "-" + Result}
         else if ($tmp1 === 3) {
          Result = CS + Result + "-"}
         else if ($tmp1 === 4) {
          Result = "(" + Result + CS + ")"}
         else if ($tmp1 === 5) {
          Result = "-" + Result + CS}
         else if ($tmp1 === 6) {
          Result = Result + "-" + CS}
         else if ($tmp1 === 7) {
          Result = Result + CS + "-"}
         else if ($tmp1 === 8) {
          Result = "-" + Result + " " + CS}
         else if ($tmp1 === 9) {
          Result = "-" + CS + " " + Result}
         else if ($tmp1 === 10) {
          Result = Result + " " + CS + "-"}
         else if ($tmp1 === 11) {
          Result = CS + " " + Result + "-"}
         else if ($tmp1 === 12) {
          Result = CS + " " + "-" + Result}
         else if ($tmp1 === 13) {
          Result = Result + "-" + " " + CS}
         else if ($tmp1 === 14) {
          Result = "(" + CS + " " + Result + ")"}
         else if ($tmp1 === 15) Result = "(" + Result + " " + CS + ")";
      };
      return Result;
    };
    $impl.RESpecials = "([\\$\\+\\[\\]\\(\\)\\\\\\.\\*\\^\\?\\|])";
    $impl.InitGlobalFormatSettings = function () {
      $mod.FormatSettings.$assign($mod.TFormatSettings.Create());
      $mod.TimeSeparator = $mod.FormatSettings.TimeSeparator;
      $mod.DateSeparator = $mod.FormatSettings.DateSeparator;
      $mod.ShortDateFormat = $mod.FormatSettings.ShortDateFormat;
      $mod.LongDateFormat = $mod.FormatSettings.LongDateFormat;
      $mod.ShortTimeFormat = $mod.FormatSettings.ShortTimeFormat;
      $mod.LongTimeFormat = $mod.FormatSettings.LongTimeFormat;
      $mod.DecimalSeparator = $mod.FormatSettings.DecimalSeparator;
      $mod.ThousandSeparator = $mod.FormatSettings.ThousandSeparator;
      $mod.TimeAMString = $mod.FormatSettings.TimeAMString;
      $mod.TimePMString = $mod.FormatSettings.TimePMString;
      $mod.CurrencyFormat = $mod.FormatSettings.CurrencyFormat;
      $mod.NegCurrFormat = $mod.FormatSettings.NegCurrFormat;
      $mod.CurrencyDecimals = $mod.FormatSettings.CurrencyDecimals;
      $mod.CurrencyString = $mod.FormatSettings.CurrencyString;
    };
  };
  $mod.$init = function () {
    (function () {
      $impl.InitGlobalFormatSettings();
    })();
    $mod.ShortMonthNames = $impl.DefaultShortMonthNames.slice(0);
    $mod.LongMonthNames = $impl.DefaultLongMonthNames.slice(0);
    $mod.ShortDayNames = $impl.DefaultShortDayNames.slice(0);
    $mod.LongDayNames = $impl.DefaultLongDayNames.slice(0);
  };
},[]);
rtl.module("Math",["System"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("weborworker",["System","JS"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("Web",["System","JS","weborworker"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("Classes",["System","RTLConsts","SysUtils","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass(this,"TLoadHelper",pas.System.TObject,function () {
  });
  this.SetLoadHelperClass = function (aClass) {
    var Result = null;
    Result = $impl.GlobalLoadHelper;
    $impl.GlobalLoadHelper = aClass;
    return Result;
  };
  $mod.$implcode = function () {
    $impl.GlobalLoadHelper = null;
    $impl.ClassList = null;
  };
  $mod.$init = function () {
    $impl.ClassList = new Object();
  };
},[]);
rtl.module("Rtl.BrowserLoadHelper",["System","Classes","SysUtils","JS","Web"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass(this,"TBrowserLoadHelper",pas.Classes.TLoadHelper,function () {
  });
  $mod.$init = function () {
    pas.Classes.SetLoadHelperClass($mod.TBrowserLoadHelper);
  };
});
rtl.module("browserconsole",["System","JS","Web","Rtl.BrowserLoadHelper","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.BrowserLineBreak = "\n";
  this.DefaultMaxConsoleLines = 25;
  this.DefaultConsoleStyle = ".pasconsole { " + this.BrowserLineBreak + "font-family: courier;" + this.BrowserLineBreak + "font-size: 14px;" + this.BrowserLineBreak + "background: #FFFFFF;" + this.BrowserLineBreak + "color: #000000;" + this.BrowserLineBreak + "display: block;" + this.BrowserLineBreak + "}";
  this.ConsoleElementID = "";
  this.ConsoleStyle = "";
  this.MaxConsoleLines = 0;
  this.ConsoleLinesToBrowserLog = false;
  this.ResetConsole = function () {
    if ($impl.LinesParent === null) return;
    while ($impl.LinesParent.firstElementChild !== null) $impl.LinesParent.removeChild($impl.LinesParent.firstElementChild);
    $impl.AppendLine();
  };
  this.InitConsole = function () {
    if ($impl.ConsoleElement === null) return;
    if ($impl.ConsoleElement.nodeName.toLowerCase() !== "body") {
      while ($impl.ConsoleElement.firstElementChild !== null) $impl.ConsoleElement.removeChild($impl.ConsoleElement.firstElementChild);
    };
    $impl.StyleElement = document.createElement("style");
    $impl.StyleElement.innerText = $mod.ConsoleStyle;
    $impl.ConsoleElement.appendChild($impl.StyleElement);
    $impl.LinesParent = document.createElement("div");
    $impl.ConsoleElement.appendChild($impl.LinesParent);
  };
  this.HookConsole = function () {
    $impl.ConsoleElement = null;
    if ($mod.ConsoleElementID !== "") $impl.ConsoleElement = document.getElementById($mod.ConsoleElementID);
    if ($impl.ConsoleElement === null) $impl.ConsoleElement = document.body;
    if ($impl.ConsoleElement === null) return;
    $mod.InitConsole();
    $mod.ResetConsole();
    pas.System.SetWriteCallBack($impl.WriteConsole);
  };
  $mod.$implcode = function () {
    $impl.LastLine = null;
    $impl.StyleElement = null;
    $impl.LinesParent = null;
    $impl.ConsoleElement = null;
    $impl.AppendLine = function () {
      var CurrentCount = 0;
      var S = null;
      CurrentCount = 0;
      S = $impl.LinesParent.firstChild;
      while (S != null) {
        CurrentCount += 1;
        S = S.nextSibling;
      };
      while (CurrentCount > $mod.MaxConsoleLines) {
        CurrentCount -= 1;
        $impl.LinesParent.removeChild($impl.LinesParent.firstChild);
      };
      $impl.LastLine = document.createElement("div");
      $impl.LastLine.className = "pasconsole";
      $impl.LinesParent.appendChild($impl.LastLine);
    };
    $impl.EscapeString = function (S) {
      var Result = "";
      var CL = "";
      CL = pas.SysUtils.StringReplace(S,"<","&lt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,">","&gt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL," ","&nbsp;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,"\r\n","<br>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,"\n","<br>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,"\r","<br>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      Result = CL;
      return Result;
    };
    $impl.WriteConsole = function (S, NewLine) {
      var CL = "";
      CL = $impl.LastLine.innerHTML;
      CL = CL + $impl.EscapeString("" + S);
      $impl.LastLine.innerHTML = CL;
      if (NewLine) {
        if ($mod.ConsoleLinesToBrowserLog) window.console.log($impl.LastLine.innerText);
        $impl.AppendLine();
      };
    };
  };
  $mod.$init = function () {
    $mod.ConsoleLinesToBrowserLog = true;
    $mod.ConsoleElementID = "pasjsconsole";
    $mod.ConsoleStyle = $mod.DefaultConsoleStyle;
    $mod.MaxConsoleLines = 25;
    $mod.HookConsole();
  };
},[]);
rtl.module("CommonTypes",["System"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("FileIO",["System","SysUtils","CommonTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass(this,"TPathList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.paths = [];
    };
    this.$final = function () {
      this.paths = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.paths = [];
      this.paths = rtl.arraySetLength(this.paths,"",0);
      return this;
    };
    this.AddFolder = function (folderPath) {
      var i = 0;
      var size = 0;
      folderPath = pas.SysUtils.IncludeTrailingPathDelimiter(folderPath);
      for (var $l = 0, $end = rtl.length(this.paths) - 1; $l <= $end; $l++) {
        i = $l;
        if (this.paths[i] === folderPath) return;
      };
      size = this.GetSize();
      size += 1;
      this.paths = rtl.arraySetLength(this.paths,"",size);
      this.paths[size - 1] = pas.SysUtils.IncludeTrailingPathDelimiter(folderPath);
    };
    this.FindFile = function (filePath) {
      var Result = "";
      var i = 0;
      Result = $mod.TFileSystem.NormalizePath(filePath);
      if ($mod.TFileSystem.FileExists_(Result)) return Result;
      for (var $l = 0, $end = rtl.length(this.paths) - 1; $l <= $end; $l++) {
        i = $l;
        Result = this.paths[i] + filePath;
        if ($mod.TFileSystem.FileExists_(Result)) return Result;
      };
      Result = "";
      return Result;
    };
    this.GetSize = function () {
      var Result = 0;
      Result = (rtl.length(this.paths) - 1) + 1;
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      var i = 0;
      Result = "";
      for (var $l = 0, $end = rtl.length(this.paths) - 1; $l <= $end; $l++) {
        i = $l;
        if (Result === "") {
          Result = this.paths[i]}
         else Result = Result + ";" + this.paths[i];
      };
      return Result;
    };
  });
  rtl.createInterface(this,"IFile","{B3800EA6-9E42-36E1-AA98-45BDB1A2539A}",["Assign","Close","Erase","EOF","Reset","Rewrite"],pas.System.IUnknown);
  rtl.createInterface(this,"IBinaryFile","{1B8934C6-6740-32CE-BBA9-2DE70CC9FDF2}",["BlockRead","FilePos","Read","Reset$1","Seek2"],this.IFile);
  rtl.createInterface(this,"ITextFile","{9C17F47D-C24A-307F-A853-B12509C38884}",["Flush","ReadLn","Write","Write$1","Write$2","WriteLn","WriteLn$1","WriteLn$2"],this.IFile);
  rtl.createClass(this,"TFileMapEntry",pas.System.TObject,function () {
    this.TFileType = {"0": "TextFile", TextFile: 0, "1": "BinaryFile", BinaryFile: 1, "2": "Folder", Folder: 2};
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.filePath = "";
      this.fileType = 0;
      this.content = "";
    };
  });
  rtl.createClass(this,"TFileMap",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.entries = [];
    };
    this.$final = function () {
      this.entries = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.entries = [];
      return this;
    };
    this.AddEntry = function (filePath, fileType) {
      var Result = null;
      var entry = null;
      entry = this.GetEntry(filePath);
      if (!(entry === null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Entry with file path '" + filePath + "' is already in the file map."]);
      entry = $mod.TFileMapEntry.$create("Create");
      entry.filePath = filePath;
      entry.fileType = fileType;
      this.entries = rtl.arraySetLength(this.entries,null,rtl.length(this.entries) + 1);
      this.entries[rtl.length(this.entries) - 1] = entry;
      Result = entry;
      return Result;
    };
    this.GetEntry = function (filePath) {
      var Result = null;
      var i = 0;
      Result = null;
      for (var $l = 0, $end = rtl.length(this.entries) - 1; $l <= $end; $l++) {
        i = $l;
        if (this.entries[i].filePath === filePath) {
          Result = this.entries[i];
          return Result;
        };
      };
      return Result;
    };
  });
  rtl.createClass(this,"TFileSystem",pas.System.TObject,function () {
    this.Init = function (fileMap) {
      $impl.fileMap = fileMap;
    };
    this.CreateBinaryFile = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,rtl.queryIntfT($impl.TBinaryFile.$create("Create$2"),$mod.IBinaryFile),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.CreateTextFile = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,rtl.queryIntfT($impl.TTextFile.$create("Create$2"),$mod.ITextFile),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.FileExists_ = function (filePath) {
      var Result = false;
      Result = this.GetFileMapEntry(filePath) !== null;
      return Result;
    };
    this.NormalizePath = function (filePath) {
      var Result = "";
      Result = filePath;
      return Result;
    };
    this.GetFileMapEntry = function (filePath) {
      var Result = null;
      Result = $impl.fileMap.GetEntry(filePath);
      return Result;
    };
  });
  $mod.$implcode = function () {
    $impl.fileMap = null;
    rtl.createClass($impl,"TFile",pas.System.TInterfacedObject,function () {
      this.$init = function () {
        pas.System.TInterfacedObject.$init.call(this);
        this.filePath = "";
      };
      this.Create$1 = function () {
        this.filePath = "";
        return this;
      };
      rtl.addIntf(this,$mod.IFile);
      rtl.addIntf(this,pas.System.IUnknown);
    });
    rtl.createClass($impl,"TTextFile",$impl.TFile,function () {
      this.$init = function () {
        $impl.TFile.$init.call(this);
        this.fileMapEntry = null;
        this.fileMode = 0;
        this.filePos = 0;
      };
      this.$final = function () {
        this.fileMapEntry = undefined;
        $impl.TFile.$final.call(this);
      };
      this.Create$2 = function () {
        $impl.TFile.Create$1.call(this);
        return this;
      };
      this.Assign = function (filePath) {
        this.filePath = filePath;
      };
      this.Close = function () {
      };
      this.Erase = function () {
      };
      this.EOF = function () {
        var Result = false;
        Result = pas.SysUtils.TStringHelper.GetLength.call({p: this.fileMapEntry, get: function () {
            return this.p.content;
          }, set: function (v) {
            this.p.content = v;
          }}) === this.filePos;
        return Result;
      };
      this.Flush = function () {
      };
      this.ReadLn = function (s) {
      };
      this.Reset = function () {
        this.fileMapEntry = $mod.TFileSystem.GetFileMapEntry(this.filePath);
        this.fileMode = 0;
        this.filePos = 0;
      };
      this.Rewrite = function () {
        this.fileMapEntry = $mod.TFileSystem.GetFileMapEntry(this.filePath);
        this.fileMode = 1;
        this.filePos = 0;
      };
      this.Write = function (s) {
        var Result = null;
        var $ok = false;
        try {
          if (!(this.fileMode === 1)) throw pas.SysUtils.EAssertionFailed.$create("Create");
          this.fileMapEntry.content = this.fileMapEntry.content + s;
          this.filePos = this.filePos + s.length;
          Result = rtl.setIntfL(Result,rtl.queryIntfT(this,$mod.ITextFile),true);
          $ok = true;
        } finally {
          if (!$ok) rtl._Release(Result);
        };
        return Result;
      };
      this.Write$1 = function (s, w) {
        var Result = null;
        var sFormatted = "";
        var $ir = rtl.createIntfRefs();
        var $ok = false;
        try {
          sFormatted = s;
          $ir.ref(1,this.Write(sFormatted));
          Result = rtl.setIntfL(Result,rtl.queryIntfT(this,$mod.ITextFile),true);
          $ok = true;
        } finally {
          $ir.free();
          if (!$ok) rtl._Release(Result);
        };
        return Result;
      };
      this.Write$2 = function (i, w) {
        var Result = null;
        var sFormatted = "";
        var $ir = rtl.createIntfRefs();
        var $ok = false;
        try {
          sFormatted = pas.SysUtils.IntToStr(i);
          $ir.ref(1,this.Write$1(sFormatted,w));
          Result = rtl.setIntfL(Result,rtl.queryIntfT(this,$mod.ITextFile),true);
          $ok = true;
        } finally {
          $ir.free();
          if (!$ok) rtl._Release(Result);
        };
        return Result;
      };
      var CR = "\r";
      this.WriteLn = function () {
        var $ir = rtl.createIntfRefs();
        try {
          $ir.ref(1,this.Write(CR));
        } finally {
          $ir.free();
        };
      };
      this.WriteLn$1 = function (s) {
        var $ir = rtl.createIntfRefs();
        try {
          $ir.ref(1,this.Write(s));
          this.WriteLn();
        } finally {
          $ir.free();
        };
      };
      this.WriteLn$2 = function (s1, s2) {
        var $ir = rtl.createIntfRefs();
        try {
          $ir.ref(1,this.Write(s1));
          $ir.ref(2,this.Write(s2));
          this.WriteLn();
        } finally {
          $ir.free();
        };
      };
      rtl.addIntf(this,$mod.ITextFile);
      rtl.addIntf(this,$mod.IFile);
      rtl.addIntf(this,pas.System.IUnknown);
    });
    rtl.createClass($impl,"TBinaryFile",$impl.TFile,function () {
      this.Create$2 = function () {
        $impl.TFile.Create$1.call(this);
        return this;
      };
      this.Assign = function (filePath) {
        this.filePath = filePath;
      };
      this.BlockRead = function (Buf, Count, Result) {
      };
      this.Close = function () {
      };
      this.Erase = function () {
      };
      this.EOF = function () {
        var Result = false;
        return Result;
      };
      this.FilePos = function () {
        var Result = 0;
        return Result;
      };
      this.Read = function (c) {
      };
      this.Reset = function () {
      };
      this.Reset$2 = function (l) {
      };
      this.Rewrite = function () {
      };
      this.Seek2 = function (Pos) {
      };
      rtl.addIntf(this,$mod.IBinaryFile,{Reset$1: "Reset$2"});
      rtl.addIntf(this,$mod.IFile);
      rtl.addIntf(this,pas.System.IUnknown);
    });
  };
},[]);
rtl.module("StringUtilities",["System","SysUtils"],function () {
  "use strict";
  var $mod = this;
  this.TAB = "\t";
  this.CR = "\r";
  this.LF = "\n";
  this.AllowDirectorySeparators = rtl.createSet(47,92);
  this.AllowWhiteSpaces = rtl.createSet(32,this.TAB.charCodeAt(),this.CR.charCodeAt(),this.LF.charCodeAt());
  this.AllowQuotes = rtl.createSet(39,34);
  this.AllowLabelFirstChars = rtl.createSet(null,65,90,95);
  this.AllowLabelChars = rtl.createSet(null,65,90,null,48,57,95,46);
  this.AllowDigitFirstChars = rtl.createSet(null,48,57,37,36);
  this.AllowDigitChars = rtl.createSet(null,48,57,null,65,70);
  this.SkipWhitespaces = function (a, i) {
    if (a !== "") while ((i.get() <= a.length) && (a.charCodeAt(i.get() - 1) in $mod.AllowWhiteSpaces)) i.set(i.get() + 1);
  };
  this.GetNumber = function (a, i) {
    var Result = "";
    Result = "";
    if (a !== "") {
      $mod.SkipWhitespaces(a,i);
      if (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in $mod.AllowDigitFirstChars) {
        Result = pas.System.upcase(a.charAt(i.get() - 1));
        i.set(i.get() + 1);
        while (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in $mod.AllowDigitChars) {
          Result = Result + pas.System.upcase(a.charAt(i.get() - 1));
          i.set(i.get() + 1);
        };
      };
    };
    return Result;
  };
  this.GetLabel = function (a, upperCase, i) {
    var Result = "";
    Result = "";
    if (a !== "") {
      $mod.SkipWhitespaces(a,i);
      if (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.unionSet($mod.AllowLabelFirstChars,rtl.createSet(46))) while (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.unionSet($mod.AllowLabelChars,$mod.AllowDirectorySeparators)) {
        if (upperCase) {
          Result = Result + pas.System.upcase(a.charAt(i.get() - 1))}
         else Result = Result + a.charAt(i.get() - 1);
        i.set(i.get() + 1);
      };
    };
    return Result;
  };
  this.GetLabelUpperCase = function (a, i) {
    var Result = "";
    Result = $mod.GetLabel(a,true,i);
    return Result;
  };
  this.GetString = function (a, upperCase, i) {
    var Result = "";
    var len = 0;
    var znak = "\x00";
    var gchr = "\x00";
    Result = "";
    $mod.SkipWhitespaces(a,i);
    if (a.charAt(i.get() - 1) === "%") {
      while (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.createSet(null,65,90,37)) {
        Result = Result + pas.System.upcase(a.charAt(i.get() - 1));
        i.set(i.get() + 1);
      };
    } else if (!(a.charCodeAt(i.get() - 1) in $mod.AllowQuotes)) {
      Result = $mod.GetLabel(a,upperCase,i);
    } else {
      gchr = a.charAt(i.get() - 1);
      len = a.length;
      while (i.get() <= len) {
        i.set(i.get() + 1);
        znak = a.charAt(i.get() - 1);
        if (znak === gchr) {
          i.set(i.get() + 1);
          break;
        };
        Result = Result + znak;
      };
    };
    return Result;
  };
  this.GetStringUpperCase = function (a, i) {
    var Result = "";
    Result = $mod.GetString(a,true,i);
    return Result;
  };
  this.GetFilePath = function (a, i) {
    var Result = "";
    Result = $mod.GetString(a,false,i);
    return Result;
  };
  this.SplitStr = function (a, separatorCharacter) {
    var Result = [];
    var znak = "\x00";
    var i = 0;
    var len = 0;
    var txt = "";
    var s = "";
    function GetParenthesizedString(a, i) {
      var Result = "";
      var nawias = 0;
      var len = 0;
      var znak = "\x00";
      var lewa = "\x00";
      var prawa = "\x00";
      var petla = false;
      var txt = "";
      Result = "";
      if (!(a.charCodeAt(i.get() - 1) in rtl.createSet(40))) return Result;
      lewa = a.charAt(i.get() - 1);
      if (lewa === "(") {
        prawa = ")"}
       else prawa = String.fromCharCode(lewa.charCodeAt() + 2);
      nawias = 0;
      petla = true;
      len = a.length;
      while (petla && (i.get() <= len)) {
        znak = a.charAt(i.get() - 1);
        if (znak === lewa) {
          nawias += 1}
         else if (znak === prawa) nawias -= 1;
        petla = !(nawias === 0);
        if (znak.charCodeAt() in $mod.AllowQuotes) {
          txt = $mod.GetStringUpperCase(a,i);
          Result = Result + znak + txt + znak;
          if (txt === znak) Result = Result + znak;
        } else {
          Result = Result + znak;
          i.set(i.get() + 1);
        };
      };
      return Result;
    };
    function AddString() {
      var i = 0;
      i = rtl.length(Result) - 1;
      Result[i] = s;
      Result = rtl.arraySetLength(Result,"",i + 2);
      s = "";
    };
    Result = rtl.arraySetLength(Result,"",1);
    i = 1;
    len = a.length;
    s = "";
    while (i <= len) if (a.charAt(i - 1) === separatorCharacter) {
      AddString();
      i += 1;
    } else {
      var $tmp = pas.System.upcase(a.charAt(i - 1));
      if ($tmp === "(") {
        s = s + GetParenthesizedString(a,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }})}
       else if (($tmp === "'") || ($tmp === '"')) {
        znak = a.charAt(i - 1);
        txt = $mod.GetStringUpperCase(a,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }});
        s = s + znak + txt + znak;
        if (znak === txt) s = s + znak;
      } else {
        s = s + a.charAt(i - 1);
        i += 1;
      };
    };
    if (s !== "") AddString();
    return Result;
  };
});
rtl.module("Console",["System"],function () {
  "use strict";
  var $mod = this;
  this.LightGray = 7;
  this.LightGreen = 10;
  this.LightCyan = 11;
  this.LightRed = 12;
  this.White = 15;
  this.TextColor = function (Color) {
  };
  this.NormVideo = function () {
  };
});
rtl.module("Utilities",["System"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass(this,"TEnvironment",pas.System.TObject,function () {
    this.GetParameterCount = function () {
      var Result = 0;
      Result = 3;
      return Result;
    };
    this.GetParameterString = function (i) {
      var Result = "";
      var $tmp = i;
      if ($tmp === 1) {
        Result = "Input.pas"}
       else if ($tmp === 2) {
        Result = "-i:lib"}
       else if ($tmp === 3) Result = "-o:Output.a65";
      return Result;
    };
    this.GetParameterStringUpperCase = function (i) {
      var Result = "";
      Result = $mod.AnsiUpperCase(this.GetParameterString(i));
      return Result;
    };
  });
  rtl.createClass(this,"THaltException",pas.System.TObject,function () {
    this.COMPILING_ABORTED = 2;
    this.COMPILING_NOT_STARTED = 3;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.exitCode = 0;
    };
    this.Create$1 = function (exitCode) {
      this.exitCode = exitCode;
      return this;
    };
    this.GetExitCode = function () {
      var Result = 0;
      Result = this.exitCode;
      return Result;
    };
  });
  this.RaiseHaltException = function (errnum) {
    throw $mod.THaltException.$create("Create$1",[errnum]);
  };
  rtl.recNewT(this,"TFormatSettings",function () {
    this.DecimalSeparator = "\x00";
    this.$eq = function (b) {
      return this.DecimalSeparator === b.DecimalSeparator;
    };
    this.$assign = function (s) {
      this.DecimalSeparator = s.DecimalSeparator;
      return this;
    };
  });
  this.DefaultFormatSettings = this.TFormatSettings.$clone({CurrencyFormat: 1, NegCurrFormat: 5, ThousandSeparator: ",", DecimalSeparator: ".", CurrencyDecimals: 2, DateSeparator: "-", TimeSeparator: ":", ListSeparator: ",", CurrencyString: "$", ShortDateFormat: "d/m/y", LongDateFormat: 'dd" "mmmm" "yyyy', TimeAMString: "AM", TimePMString: "PM", ShortTimeFormat: "hh:nn", LongTimeFormat: "hh:nn:ss", ShortMonthNames: ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"], LongMonthNames: ["January","February","March","April","May","June","July","August","September","October","November","December"], ShortDayNames: ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"], LongDayNames: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"], TwoDigitYearCenturyWindow: 50});
  this.AnsiLowerCase = function (s) {
    var Result = "";
    return Result;
  };
  this.AnsiUpperCase = function (s) {
    var Result = "";
    return Result;
  };
  this.CompareWord = function (buf1, buf2, len) {
    var Result = 0;
    return Result;
  };
  this.GetTickCount64 = function () {
    var Result = 0;
    return Result;
  };
},["SysUtils"]);
rtl.module("Messages",["System","Common"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TErrorCode = {"0": "UnknownIdentifier", UnknownIdentifier: 0, "1": "OParExpected", OParExpected: 1, "2": "IdentifierExpected", IdentifierExpected: 2, "3": "IncompatibleTypeOf", IncompatibleTypeOf: 3, "4": "UserDefined", UserDefined: 4, "5": "IdNumExpExpected", IdNumExpExpected: 5, "6": "IncompatibleTypes", IncompatibleTypes: 6, "7": "IncompatibleEnum", IncompatibleEnum: 7, "8": "OrdinalExpectedFOR", OrdinalExpectedFOR: 8, "9": "CantAdrConstantExp", CantAdrConstantExp: 9, "10": "VariableExpected", VariableExpected: 10, "11": "WrongNumberOfParameters", WrongNumberOfParameters: 11, "12": "OrdinalExpExpected", OrdinalExpExpected: 12, "13": "RangeCheckError", RangeCheckError: 13, "14": "VariableNotInit", VariableNotInit: 14, "15": "ShortStringLength", ShortStringLength: 15, "16": "StringTruncated", StringTruncated: 16, "17": "TypeMismatch", TypeMismatch: 17, "18": "CantReadWrite", CantReadWrite: 18, "19": "SubrangeBounds", SubrangeBounds: 19, "20": "TooManyParameters", TooManyParameters: 20, "21": "CantDetermine", CantDetermine: 21, "22": "UpperBoundOfRange", UpperBoundOfRange: 22, "23": "HighLimit", HighLimit: 23, "24": "IllegalTypeConversion", IllegalTypeConversion: 24, "25": "IncompatibleTypesArray", IncompatibleTypesArray: 25, "26": "IllegalExpression", IllegalExpression: 26, "27": "AlwaysTrue", AlwaysTrue: 27, "28": "AlwaysFalse", AlwaysFalse: 28, "29": "UnreachableCode", UnreachableCode: 29, "30": "IllegalQualifier", IllegalQualifier: 30, "31": "LoHi", LoHi: 31, "32": "StripedAllowed", StripedAllowed: 32, "33": "FileNotFound", FileNotFound: 33, "34": "WrongParameterList", WrongParameterList: 34, "35": "OperatorNotOverloaded", OperatorNotOverloaded: 35, "36": "OperationNotSupportedForTypes", OperationNotSupportedForTypes: 36, "37": "NotAllDeclarationsOverloaded", NotAllDeclarationsOverloaded: 37, "38": "SyntaxError", SyntaxError: 38, "39": "CantAsignValuesToAnAddress", CantAsignValuesToAnAddress: 39, "40": "UndefinedResourceType", UndefinedResourceType: 40, "41": "ResourceFileNotFound", ResourceFileNotFound: 41, "42": "DuplicateResource", DuplicateResource: 42, "43": "OutOfResources", OutOfResources: 43, "44": "WrongSwitchToggle", WrongSwitchToggle: 44, "45": "IllegalOptimizationSpecified", IllegalOptimizationSpecified: 45, "46": "IllegalAlignmentDirective", IllegalAlignmentDirective: 46, "47": "FilePathNotSpecified", FilePathNotSpecified: 47, "48": "ElseWithoutIf", ElseWithoutIf: 48, "49": "EndifWithoutIf", EndifWithoutIf: 49, "50": "TooManyFormalParameters", TooManyFormalParameters: 50, "51": "DuplicateIdentifier", DuplicateIdentifier: 51, "52": "IllegalCompilerDirective", IllegalCompilerDirective: 52, "53": "UnexpectedCharacter", UnexpectedCharacter: 53, "54": "ConstantStringTooLong", ConstantStringTooLong: 54, "55": "ParameterMissing", ParameterMissing: 55, "56": "UnitExpected", UnitExpected: 56, "57": "StringExceedsLine", StringExceedsLine: 57, "58": "ConstantExpressionExpected", ConstantExpressionExpected: 58, "59": "RecursionInMacro", RecursionInMacro: 59, "60": "InvalidVariableAddress", InvalidVariableAddress: 60, "61": "ConstantExpected", ConstantExpected: 61, "62": "CantTakeAddressOfIdentifier", CantTakeAddressOfIdentifier: 62, "63": "DivisionByZero", DivisionByZero: 63, "64": "IdentifierAlreadyDefined", IdentifierAlreadyDefined: 64, "65": "FormalParameterNameExpected", FormalParameterNameExpected: 65, "66": "TypeIdentifierExpected", TypeIdentifierExpected: 66, "67": "FileParameterMustBeVAR", FileParameterMustBeVAR: 67, "68": "ReservedWordUserAsIdentifier", ReservedWordUserAsIdentifier: 68, "69": "FunctionDirectiveForwardNotAllowedInInterfaceSection", FunctionDirectiveForwardNotAllowedInInterfaceSection: 69, "70": "ProcedureDirectiveForwardNotAllowedInInterfaceSection", ProcedureDirectiveForwardNotAllowedInInterfaceSection: 70, "71": "CannotCombineRegisterWithPascal", CannotCombineRegisterWithPascal: 71, "72": "CannotCombineInlineWithPascal", CannotCombineInlineWithPascal: 72, "73": "CannotCombineInlineWithInterrupt", CannotCombineInlineWithInterrupt: 73, "74": "CannotCombineInlineWithExternal", CannotCombineInlineWithExternal: 74, "75": "IllegalTypeDeclarationOfSetElements", IllegalTypeDeclarationOfSetElements: 75, "76": "FieldAfterMethodOrProperty", FieldAfterMethodOrProperty: 76, "77": "RecordSizeExceedsLimit", RecordSizeExceedsLimit: 77, "78": "StringLengthNotInRange", StringLengthNotInRange: 78, "79": "InvalidTypeDefinition", InvalidTypeDefinition: 79, "80": "ArrayLowerBoundNotInteger", ArrayLowerBoundNotInteger: 80, "81": "ArrayLowerBoundNotZero", ArrayLowerBoundNotZero: 81, "82": "ArrayUpperBoundNotInteger", ArrayUpperBoundNotInteger: 82, "83": "InvalidArrayOfPointers", InvalidArrayOfPointers: 83, "84": "ArraySizeExceedsRAMSize", ArraySizeExceedsRAMSize: 84, "85": "MultiDimensionalArrayOfTypeNotSupported", MultiDimensionalArrayOfTypeNotSupported: 85, "86": "ArrayOfTypeNotSupported", ArrayOfTypeNotSupported: 86, "87": "OnlyArrayOfTypeSupported", OnlyArrayOfTypeSupported: 87, "88": "IdentifierIdentsNoMember", IdentifierIdentsNoMember: 88, "89": "Unassigned", Unassigned: 89, "90": "VariableConstantOrFunctionExpectedButProcedureFound", VariableConstantOrFunctionExpectedButProcedureFound: 90, "91": "UnderConstruction", UnderConstruction: 91, "92": "TypeIdentifierNotAllowed", TypeIdentifierNotAllowed: 92};
  rtl.createInterface(this,"IMessage","{A7A4AA47-E977-3368-BE13-7A2D5708E8E1}",["GetErrorCode","GetText"],pas.System.IUnknown);
  rtl.createClass(this,"TMessage",pas.System.TInterfacedObject,function () {
    this.$init = function () {
      pas.System.TInterfacedObject.$init.call(this);
      this.ErrorCode = 0;
      this.Text = "";
    };
    this.Create$1 = function (errorCode, Text, variable0, variable1) {
      var temp = "";
      this.ErrorCode = errorCode;
      temp = pas.SysUtils.TStringHelper.Replace$2.call({get: function () {
          return Text;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},"{0}",variable0);
      temp = pas.SysUtils.TStringHelper.Replace$2.call({get: function () {
          return Text;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},"{1}",variable1);
      this.Text = temp;
      return this;
    };
    this.GetErrorCode = function () {
      var Result = 0;
      Result = this.ErrorCode;
      return Result;
    };
    this.GetText = function () {
      var Result = "";
      Result = this.Text;
      return Result;
    };
    rtl.addIntf(this,$mod.IMessage);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.Error = function (tokenIndex, msg) {
    var effectiveTokenIndex = 0;
    var token = pas.Common.TToken.$new();
    var previousToken = pas.Common.TToken.$new();
    if (!pas.Common.isConst) {
      $mod.WritelnMsg();
      if (tokenIndex <= pas.Common.NumTok) {
        effectiveTokenIndex = tokenIndex}
       else effectiveTokenIndex = pas.Common.NumTok;
      pas.Console.TextColor(12);
      if (tokenIndex > 0) {
        token.$assign(pas.Common.Tok[effectiveTokenIndex]);
        if (effectiveTokenIndex > 1) {
          previousToken.$assign(pas.Common.Tok[effectiveTokenIndex - 1]);
          pas.System.Writeln(pas.Common.UnitName[token.UnitIndex - 1].Path + " (" + pas.SysUtils.IntToStr(token.Line) + "," + pas.SysUtils.IntToStr(previousToken.Column + 1) + ")" + " Error: " + msg);
        } else {
          pas.System.Writeln(pas.Common.UnitName[token.UnitIndex - 1].Path + " (" + pas.SysUtils.IntToStr(token.Line) + ")" + " Error: " + msg);
        };
      } else {
        pas.System.Writeln("Error: " + msg);
      };
      pas.Console.NormVideo();
      pas.Common.FreeTokens();
      if (pas.Common.OutFile !== null) {
        pas.Common.OutFile.Close();
        pas.Common.OutFile.Erase();
      };
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    pas.Common.isError = true;
  };
  this.Error$1 = function (tokenIndex, msg) {
    var enumValue = 0;
    var enumName = "";
    enumValue = msg.GetErrorCode();
    enumName = $mod.TErrorCode[msg.GetErrorCode()];
    $mod.Error(tokenIndex,"E" + pas.SysUtils.IntToStr(enumValue) + " - " + enumName + ": " + msg.GetText());
  };
  this.Error$2 = function (tokenIndex, errorCode) {
    $mod.ErrorForIdentifier(tokenIndex,errorCode,0);
  };
  this.ErrorForIdentifier = function (tokenIndex, errorCode, identIndex) {
    var msg = "";
    if (!pas.Common.isConst) {
      msg = $impl.GetErrorMessage(tokenIndex,errorCode,identIndex);
      $mod.Error(tokenIndex,msg);
    };
  };
  this.ErrorIncompatibleTypes = function (tokenIndex, srcType, dstType, dstPointer) {
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "';
      msg = msg + pas.Common.InfoAboutToken(srcType) + '" expected "';
      if (dstPointer) msg = msg + "^";
      msg = msg + pas.Common.InfoAboutToken(dstType) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleTypes,msg,"",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIncompatibleEnumIdentifiers = function (tokenIndex, srcEnumIdent, destEnumIdent) {
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "' + pas.Common.GetEnumName(srcEnumIdent) + '" expected "' + pas.Common.GetEnumName(destEnumIdent) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleEnum,msg,"",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIncompatibleEnumTypeIdentifier = function (tokenIndex, srcType, dstEnumIndex) {
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "' + pas.Common.InfoAboutToken(srcType) + '" expected "' + pas.Common.GetEnumName(dstEnumIndex) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleEnum,msg,"",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIncompatibleEnumIdentifierType = function (tokenIndex, srcEnumIndex, dstType) {
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "' + pas.Common.GetEnumName(srcEnumIndex) + '" expected "' + pas.Common.InfoAboutToken(dstType) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleEnum,msg,"",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIdentifierIllegalTypeConversion = function (tokenIndex, identIndex, tokenKind) {
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray(tokenIndex,$mod.TErrorCode.IllegalTypeConversion,identIndex,tokenKind,0);
  };
  this.ErrorIdentifierIncompatibleTypesArray = function (tokenIndex, identIndex, tokenKind) {
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray(tokenIndex,$mod.TErrorCode.IncompatibleTypesArray,identIndex,tokenKind,0);
  };
  this.ErrorIdentifierIncompatibleTypesArrayIdentifier = function (tokenIndex, identIndex, arrayIdentIndex) {
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray(tokenIndex,$mod.TErrorCode.IncompatibleTypesArray,identIndex,0,arrayIdentIndex);
  };
  this.ErrorRangeCheckError = function (tokenIndex, identIndex, srcType, dstType) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.RangeCheckError,$impl.GetRangeCheckText(tokenIndex,identIndex,srcType,dstType),"",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.Warning = function (tokenIndex, msg) {
    var i = 0;
    var a = "";
    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
      a = pas.Common.UnitName[pas.Common.Tok[tokenIndex].UnitIndex - 1].Path + " (" + pas.SysUtils.IntToStr(pas.Common.Tok[tokenIndex].Line) + ")" + " Warning: " + msg.GetText();
      for (var $l = rtl.length(pas.Common.msgWarning) - 1 - 1; $l >= 0; $l--) {
        i = $l;
        if (pas.Common.msgWarning[i] === a) return;
      };
      i = rtl.length(pas.Common.msgWarning) - 1;
      pas.Common.msgWarning[i] = a;
      pas.Common.msgWarning = rtl.arraySetLength(pas.Common.msgWarning,"",i + 2);
    };
  };
  this.WarningAlwaysTrue = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.AlwaysTrue,"Comparison might be always true due to range of constant and expression","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningAlwaysFalse = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.AlwaysFalse,"Comparison might be always false due to range of constant and expression","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningUnreachableCode = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.UnreachableCode,"Unreachable code","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningLoHi = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.LoHi,"lo/hi(dword/qword) returns the upper/lower word/dword","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningShortStringLength = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.ShortStringLength,"String literal has more characters than short string length","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningStripedAllowed = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.StripedAllowed,"Striped array is only allowed for maximum size of [0..255]","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningUserDefined = function (tokenIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.UserDefined,"Comparison might be always false due to range of constant and expression","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningVariableNotInitialized = function (tokenIndex, identIndex) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.VariableNotInit,"Variable '" + pas.Common.Ident[identIndex - 1].Name + "' does not seem to be initialized","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningForRangeCheckError = function (tokenIndex, identIndex, srcType, DstType) {
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.RangeCheckError,$impl.GetRangeCheckText(tokenIndex,identIndex,srcType,DstType),"",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.Note = function (tokenIndex, msg) {
    var a = "";
    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
      a = pas.Common.UnitName[pas.Common.Tok[tokenIndex].UnitIndex - 1].Path + " (" + pas.SysUtils.IntToStr(pas.Common.Tok[tokenIndex].Line) + ")" + " Note: ";
      a = a + msg;
      $impl.AddMessage({p: pas.Common, get: function () {
          return this.p.msgNote;
        }, set: function (v) {
          this.p.msgNote = v;
        }},a);
    };
  };
  this.NoteForIdentifierNotUsed = function (tokenIndex, identIndex) {
    var a = "";
    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) if (pas.System.Pos(".",pas.Common.Ident[identIndex - 1].Name) === 0) {
      a = pas.Common.UnitName[pas.Common.Tok[tokenIndex].UnitIndex - 1].Path + " (" + pas.SysUtils.IntToStr(pas.Common.Tok[tokenIndex].Line) + ")" + " Note: Local ";
      if (pas.Common.Ident[identIndex - 1].Kind !== 7) {
        var $tmp = pas.Common.Ident[identIndex - 1].Kind;
        if ($tmp === 1) {
          a = a + "const"}
         else if ($tmp === 2) {
          a = a + "type"}
         else if ($tmp === 6) {
          a = a + "label"}
         else if ($tmp === 3) {
          if (pas.Common.Ident[identIndex - 1].isAbsolute) {
            a = a + "absolutevar"}
           else a = a + "variable"}
         else if ($tmp === 4) {
          a = a + "proc"}
         else if ($tmp === 5) a = a + "func";
        a = a + " '" + pas.Common.Ident[identIndex - 1].Name + "'" + " not used";
        if (pas.System.Pos("@FN",pas.Common.Ident[identIndex - 1].Name) === 1) {}
        else $impl.AddMessage({p: pas.Common, get: function () {
            return this.p.msgNote;
          }, set: function (v) {
            this.p.msgNote = v;
          }},a);
      };
    };
  };
  this.WritelnMsg = function () {
    var i = 0;
    pas.Console.TextColor(10);
    for (var $l = 0, $end = rtl.length(pas.Common.msgWarning) - 1 - 1; $l <= $end; $l++) {
      i = $l;
      pas.System.Writeln(pas.Common.msgWarning[i]);
    };
    pas.Console.TextColor(11);
    for (var $l1 = 0, $end1 = rtl.length(pas.Common.msgNote) - 1 - 1; $l1 <= $end1; $l1++) {
      i = $l1;
      pas.System.Writeln(pas.Common.msgNote[i]);
    };
    pas.Console.NormVideo();
  };
  $mod.$implcode = function () {
    $impl.AddMessage = function (msg, a) {
      var i = 0;
      i = rtl.length(msg.get()) - 1;
      msg.get()[i] = a;
      msg.set(rtl.arraySetLength(msg.get(),"",i + 2));
    };
    $impl.GetExpectedButTokenFound = function (tokenIndex) {
      var Result = "";
      Result = " expected but '" + pas.Common.GetSpelling(tokenIndex) + "' found";
      return Result;
    };
    $impl.GetRangeCheckText = function (tokenIndex, identIndex, srcType, dstType) {
      var Result = "";
      var msg = "";
      msg = "Range check error while evaluating constants (" + pas.SysUtils.IntToStr(srcType) + " must be between " + pas.SysUtils.IntToStr(pas.Common.LowBound(tokenIndex,dstType)) + " and ";
      if (identIndex > 0) {
        msg = msg + pas.SysUtils.IntToStr(pas.Common.Ident[identIndex - 1].NumAllocElements - 1) + ")"}
       else msg = msg + pas.SysUtils.IntToStr(pas.Common.HighBound(tokenIndex,dstType)) + ")";
      Result = msg;
      return Result;
    };
    $impl.GetUserDefinedText = function (tokenIndex) {
      var Result = "";
      Result = "User defined: " + pas.Common.msgUser[pas.Common.Tok[tokenIndex].Value];
      return Result;
    };
    $impl.GetErrorMessage = function (tokenIndex, errorCode, identIndex) {
      var Result = "";
      Result = "";
      var $tmp = errorCode;
      if ($tmp === $mod.TErrorCode.UserDefined) {
        Result = $impl.GetUserDefinedText(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.UnknownIdentifier) {
        if (identIndex > 0) {
          Result = "Identifier not found '" + pas.Common.Ident[identIndex - 1].Alias + "'"}
         else Result = "Identifier not found '" + pas.Common.Tok[tokenIndex].Name + "'";
      } else if ($tmp === $mod.TErrorCode.IncompatibleTypeOf) {
        Result = "Incompatible type of " + pas.Common.Ident[identIndex - 1].Name;
      } else if ($tmp === $mod.TErrorCode.WrongNumberOfParameters) {
        Result = 'Wrong number of parameters specified for call to "' + pas.Common.Ident[identIndex - 1].Name + '"';
      } else if ($tmp === $mod.TErrorCode.CantAdrConstantExp) {
        Result = "Can't take the address of constant expressions";
      } else if ($tmp === $mod.TErrorCode.OParExpected) {
        Result = "'('" + $impl.GetExpectedButTokenFound(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.IllegalExpression) {
        Result = "Illegal expression";
      } else if ($tmp === $mod.TErrorCode.VariableExpected) {
        Result = "Variable identifier expected";
      } else if ($tmp === $mod.TErrorCode.OrdinalExpExpected) {
        Result = "Ordinal expression expected";
      } else if ($tmp === $mod.TErrorCode.OrdinalExpectedFOR) {
        Result = "Ordinal expression expected as 'FOR' loop counter value";
      } else if ($tmp === $mod.TErrorCode.IdentifierExpected) {
        Result = "Identifier" + $impl.GetExpectedButTokenFound(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.IdNumExpExpected) {
        Result = "Identifier, number or expression" + $impl.GetExpectedButTokenFound(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.StringTruncated) {
        Result = "String constant truncated to fit STRING[" + pas.SysUtils.IntToStr(pas.Common.Ident[identIndex - 1].NumAllocElements - 1) + "]";
      } else if ($tmp === $mod.TErrorCode.CantReadWrite) {
        Result = "Can't read or write variables of this type";
      } else if ($tmp === $mod.TErrorCode.TypeMismatch) {
        Result = "Type mismatch";
      } else if ($tmp === $mod.TErrorCode.IllegalQualifier) {
        Result = "Illegal qualifier";
      } else if ($tmp === $mod.TErrorCode.SubrangeBounds) {
        Result = "Constant expression violates subrange bounds";
      } else if ($tmp === $mod.TErrorCode.TooManyParameters) {
        Result = "Too many formal parameters in " + pas.Common.Ident[identIndex - 1].Name;
      } else if ($tmp === $mod.TErrorCode.CantDetermine) {
        Result = "Can't determine which overloaded function '" + pas.Common.Ident[identIndex - 1].Name + "' to call";
      } else if ($tmp === $mod.TErrorCode.UpperBoundOfRange) {
        Result = "Upper bound of range is less than lower bound";
      } else if ($tmp === $mod.TErrorCode.HighLimit) {
        Result = "High range limit > " + pas.SysUtils.IntToStr(65535);
      };
      return Result;
    };
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray = function (tokenIndex, errorCode, identIndex, tokenKind, arrayIdentIndex) {
      var msg = "";
      var $ir = rtl.createIntfRefs();
      try {
        if (!((errorCode === $mod.TErrorCode.IllegalTypeConversion) || (errorCode === $mod.TErrorCode.IncompatibleTypesArray))) throw pas.SysUtils.EAssertionFailed.$create("Create");
        if (errorCode === $mod.TErrorCode.IllegalTypeConversion) {
          msg = 'Illegal type conversion: "Array[0..'}
         else {
          msg = "Incompatible types: got ";
          if (pas.Common.Ident[identIndex - 1].NumAllocElements > 0) msg = msg + '"Array[0..';
        };
        if (pas.Common.Ident[identIndex - 1].NumAllocElements_ > 0) {
          msg = msg + pas.SysUtils.IntToStr(pas.Common.Ident[identIndex - 1].NumAllocElements - 1) + "] Of Array[0.." + pas.SysUtils.IntToStr(pas.Common.Ident[identIndex - 1].NumAllocElements_ - 1) + "] Of " + pas.Common.InfoAboutToken(pas.Common.Ident[identIndex - 1].AllocElementType) + '" '}
         else if (pas.Common.Ident[identIndex - 1].NumAllocElements === 0) {
          if (pas.Common.Ident[identIndex - 1].AllocElementType !== 0) {
            msg = msg + '"^' + pas.Common.InfoAboutToken(pas.Common.Ident[identIndex - 1].AllocElementType) + '" '}
           else msg = msg + '"' + pas.Common.InfoAboutToken(136) + '" ';
        } else {
          msg = msg + pas.SysUtils.IntToStr(pas.Common.Ident[identIndex - 1].NumAllocElements - 1) + "] Of " + pas.Common.InfoAboutToken(pas.Common.Ident[identIndex - 1].AllocElementType) + '" ';
        };
        if (errorCode === $mod.TErrorCode.IllegalTypeConversion) {
          msg = msg + 'to "' + pas.Common.InfoAboutToken(tokenKind) + '"'}
         else if (arrayIdentIndex > 0) {
          msg = msg + "expected ";
          if (pas.Common.Ident[arrayIdentIndex - 1].NumAllocElements_ > 0) {
            msg = msg + '"Array[0..' + pas.SysUtils.IntToStr(pas.Common.Ident[arrayIdentIndex - 1].NumAllocElements - 1) + "] Of Array[0.." + pas.SysUtils.IntToStr(pas.Common.Ident[arrayIdentIndex - 1].NumAllocElements_ - 1) + "] Of " + pas.Common.InfoAboutToken(pas.Common.Ident[identIndex - 1].AllocElementType) + '"'}
           else if (pas.Common.Ident[arrayIdentIndex - 1].AllocElementType in rtl.createSet(139,140)) {
            msg = msg + '"^' + pas.Common.TypeArray[pas.Common.Ident[arrayIdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"'}
           else {
            if (pas.Common.Ident[arrayIdentIndex - 1].DataType in rtl.createSet(139,140)) {
              msg = msg + '"' + pas.Common.TypeArray[pas.Common.Ident[arrayIdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"'}
             else msg = msg + '"Array[0..' + pas.SysUtils.IntToStr(pas.Common.Ident[arrayIdentIndex - 1].NumAllocElements - 1) + "] Of " + pas.Common.InfoAboutToken(pas.Common.Ident[arrayIdentIndex - 1].AllocElementType) + '"';
          };
        } else {
          msg = msg + 'expected "' + pas.Common.InfoAboutToken(tokenKind) + '"';
        };
        $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[errorCode,msg,"",""]),$mod.IMessage)));
      } finally {
        $ir.free();
      };
    };
  };
},["SysUtils","Console","FileIO","Utilities"]);
rtl.module("Common",["System","SysUtils","CommonTypes","FileIO","StringUtilities"],function () {
  "use strict";
  var $mod = this;
  this.TPass = {"0": "NONE", NONE: 0, "1": "CALL_DETERMINATION", CALL_DETERMINATION: 1, "2": "CODE_GENERATION", CODE_GENERATION: 2};
  this.TParameterPassingMethod = {"0": "UNDEFINED", UNDEFINED: 0, "1": "VALPASSING", VALPASSING: 1, "2": "CONSTPASSING", CONSTPASSING: 2, "3": "VARPASSING", VARPASSING: 3};
  this.title = "1.7.2";
  this.UNTYPETOK = 0;
  this.CONSTTOK = 1;
  this.TYPETOK = 2;
  this.VARTOK = 3;
  this.PROCEDURETOK = 4;
  this.FUNCTIONTOK = 5;
  this.LABELTOK = 6;
  this.UNITTOK = 7;
  this.GETINTVECTOK = 10;
  this.SETINTVECTOK = 11;
  this.CASETOK = 12;
  this.BEGINTOK = 13;
  this.ENDTOK = 14;
  this.IFTOK = 15;
  this.THENTOK = 16;
  this.ELSETOK = 17;
  this.WHILETOK = 18;
  this.DOTOK = 19;
  this.REPEATTOK = 20;
  this.UNTILTOK = 21;
  this.FORTOK = 22;
  this.TOTOK = 23;
  this.DOWNTOTOK = 24;
  this.ASSIGNTOK = 25;
  this.WRITETOK = 26;
  this.READLNTOK = 27;
  this.HALTTOK = 28;
  this.USESTOK = 29;
  this.ARRAYTOK = 30;
  this.OFTOK = 31;
  this.STRINGTOK = 32;
  this.INCTOK = 33;
  this.DECTOK = 34;
  this.ORDTOK = 35;
  this.CHRTOK = 36;
  this.ASMTOK = 37;
  this.ABSOLUTETOK = 38;
  this.BREAKTOK = 39;
  this.CONTINUETOK = 40;
  this.EXITTOK = 41;
  this.RANGETOK = 42;
  this.EQTOK = 43;
  this.NETOK = 44;
  this.LTTOK = 45;
  this.LETOK = 46;
  this.GTTOK = 47;
  this.GETOK = 48;
  this.LOTOK = 49;
  this.HITOK = 50;
  this.DOTTOK = 51;
  this.COMMATOK = 52;
  this.SEMICOLONTOK = 53;
  this.OPARTOK = 54;
  this.CPARTOK = 55;
  this.DEREFERENCETOK = 56;
  this.ADDRESSTOK = 57;
  this.OBRACKETTOK = 58;
  this.CBRACKETTOK = 59;
  this.COLONTOK = 60;
  this.PLUSTOK = 61;
  this.MINUSTOK = 62;
  this.MULTOK = 63;
  this.DIVTOK = 64;
  this.IDIVTOK = 65;
  this.MODTOK = 66;
  this.SHLTOK = 67;
  this.SHRTOK = 68;
  this.ORTOK = 69;
  this.XORTOK = 70;
  this.ANDTOK = 71;
  this.NOTTOK = 72;
  this.ASSIGNFILETOK = 73;
  this.RESETTOK = 74;
  this.REWRITETOK = 75;
  this.APPENDTOK = 76;
  this.BLOCKREADTOK = 77;
  this.BLOCKWRITETOK = 78;
  this.CLOSEFILETOK = 79;
  this.GETRESOURCEHANDLETOK = 80;
  this.SIZEOFRESOURCETOK = 81;
  this.WRITELNTOK = 82;
  this.SIZEOFTOK = 83;
  this.LENGTHTOK = 84;
  this.HIGHTOK = 85;
  this.LOWTOK = 86;
  this.INTTOK = 87;
  this.FRACTOK = 88;
  this.TRUNCTOK = 89;
  this.ROUNDTOK = 90;
  this.ODDTOK = 91;
  this.PROGRAMTOK = 92;
  this.LIBRARYTOK = 93;
  this.EXPORTSTOK = 94;
  this.EXTERNALTOK = 95;
  this.INTERFACETOK = 96;
  this.IMPLEMENTATIONTOK = 97;
  this.INITIALIZATIONTOK = 98;
  this.CONSTRUCTORTOK = 99;
  this.DESTRUCTORTOK = 100;
  this.OVERLOADTOK = 101;
  this.ASSEMBLERTOK = 102;
  this.FORWARDTOK = 103;
  this.REGISTERTOK = 104;
  this.INTERRUPTTOK = 105;
  this.PASCALTOK = 106;
  this.STDCALLTOK = 107;
  this.INLINETOK = 108;
  this.KEEPTOK = 109;
  this.SUCCTOK = 110;
  this.PREDTOK = 111;
  this.PACKEDTOK = 112;
  this.GOTOTOK = 113;
  this.INTOK = 114;
  this.VOLATILETOK = 115;
  this.STRIPEDTOK = 116;
  this.SETTOK = 127;
  this.BYTETOK = 128;
  this.WORDTOK = 129;
  this.CARDINALTOK = 130;
  this.SHORTINTTOK = 131;
  this.SMALLINTTOK = 132;
  this.INTEGERTOK = 133;
  this.CHARTOK = 134;
  this.BOOLEANTOK = 135;
  this.POINTERTOK = 136;
  this.STRINGPOINTERTOK = 137;
  this.FILETOK = 138;
  this.RECORDTOK = 139;
  this.OBJECTTOK = 140;
  this.SHORTREALTOK = 141;
  this.REALTOK = 142;
  this.SINGLETOK = 143;
  this.HALFSINGLETOK = 144;
  this.PCHARTOK = 145;
  this.ENUMTOK = 146;
  this.PROCVARTOK = 147;
  this.TEXTFILETOK = 148;
  this.FORWARDTYPE = 149;
  this.SHORTSTRINGTOK = 150;
  this.FLOATTOK = 151;
  this.FLOAT16TOK = 152;
  this.TEXTTOK = 153;
  this.DEREFERENCEARRAYTOK = 154;
  this.DATAORIGINOFFSET = 160;
  this.CODEORIGINOFFSET = 161;
  this.IDENTTOK = 170;
  this.INTNUMBERTOK = 171;
  this.FRACNUMBERTOK = 172;
  this.CHARLITERALTOK = 173;
  this.STRINGLITERALTOK = 174;
  this.EVALTOK = 184;
  this.LOOPUNROLLTOK = 185;
  this.NOLOOPUNROLLTOK = 186;
  this.LINKTOK = 187;
  this.MACRORELEASE = 188;
  this.PROCALIGNTOK = 189;
  this.LOOPALIGNTOK = 190;
  this.LINKALIGNTOK = 191;
  this.INFOTOK = 192;
  this.WARNINGTOK = 193;
  this.ERRORTOK = 194;
  this.UNITBEGINTOK = 195;
  this.UNITENDTOK = 196;
  this.IOCHECKON = 197;
  this.IOCHECKOFF = 198;
  this.EOFTOK = 199;
  this.UnsignedOrdinalTypes = rtl.createSet(128,129,130);
  this.SignedOrdinalTypes = rtl.createSet(131,132,133);
  this.RealTypes = rtl.createSet(141,142,143,144);
  this.IntegerTypes = rtl.unionSet(this.UnsignedOrdinalTypes,this.SignedOrdinalTypes);
  this.OrdinalTypes = rtl.unionSet(this.IntegerTypes,rtl.createSet(134,135,146));
  this.Pointers = rtl.createSet(136,147,137,145);
  this.AllTypes = rtl.unionSet(rtl.unionSet(this.OrdinalTypes,this.RealTypes),this.Pointers);
  this.StringTypes = rtl.createSet(137,174,145);
  this.CONSTANT = 1;
  this.USERTYPE = 2;
  this.VARIABLE = 3;
  this.LABELTYPE = 6;
  this.UNITTYPE = 7;
  this.ENUMTYPE = 146;
  this.MAXTOKENNAMES = 200;
  this.MAXFIELDS = 256;
  this.MAXTYPES = 1024;
  this.MAXPOSSTACK = 512;
  this.MAXIDENTS = 16384;
  this.MAXBLOCKS = 16384;
  this.MAXPARAMS = 8;
  this.MAXVARS = 256;
  this.MAXUNITS = 2048;
  this.MAXALLOWEDUNITS = 256;
  this.MAXDEFINES = 256;
  this.CODEORIGIN = 0x100;
  this.DATAORIGIN = 0x8000;
  this.ASVALUE = 0;
  this.ASPOINTER = 1;
  this.ASPOINTERTOPOINTER = 2;
  this.ASPOINTERTOARRAYORIGIN = 3;
  this.ASPOINTERTOARRAYORIGIN2 = 4;
  this.ASPOINTERTORECORD = 5;
  this.ASPOINTERTOARRAYRECORD = 6;
  this.ASSTRINGPOINTERTOARRAYORIGIN = 7;
  this.ASSTRINGPOINTER1TOARRAYORIGIN = 8;
  this.ASPOINTERTODEREFERENCE = 9;
  this.ASPOINTERTORECORDARRAYORIGIN = 10;
  this.ASARRAYORIGINOFPOINTERTORECORDARRAYORIGIN = 11;
  this.ASPOINTERTOARRAYRECORDTOSTRING = 12;
  this.ASCHAR = 6;
  this.ASBOOLEAN = 7;
  this.ASREAL = 8;
  this.ASSHORTREAL = 9;
  this.ASHALFSINGLE = 10;
  this.ASSINGLE = 11;
  this.ASPCHAR = 12;
  this.OBJECTVARIABLE = 1;
  this.DataSize = [1,2,4,1,2,4,1,1,2,2,2,2,2,2,4,4,2,2,1,2,2,2];
  this.fBlockRead_ParamType = [0,129,136];
  this.TCPU = {"0": "CPU_6502", CPU_6502: 0, "1": "CPU_65C02", CPU_65C02: 1, "2": "CPU_65816", CPU_65816: 2};
  this.TComputer = {"0": "A8", A8: 0, "1": "C4P", C4P: 1, "2": "C64", C64: 2, "3": "NEO", NEO: 3, "4": "RAW", RAW: 4, "5": "X16", X16: 5};
  rtl.recNewT(this,"TTarget",function () {
    this.name = "";
    this.id = 0;
    this.cpu = 0;
    this.eol = 0;
    this.zpage = 0;
    this.buf = 0;
    this.codeorigin = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.header = rtl.arraySetLength(null,"",16);
      return r;
    };
    this.$eq = function (b) {
      return (this.name === b.name) && (this.id === b.id) && (this.cpu === b.cpu) && (this.eol === b.eol) && (this.zpage === b.zpage) && (this.buf === b.buf) && (this.codeorigin === b.codeorigin) && rtl.arrayEq(this.header,b.header);
    };
    this.$assign = function (s) {
      this.name = s.name;
      this.id = s.id;
      this.cpu = s.cpu;
      this.eol = s.eol;
      this.zpage = s.zpage;
      this.buf = s.buf;
      this.codeorigin = s.codeorigin;
      this.header = s.header.slice(0);
      return this;
    };
  });
  this.TModifierCode = {"0": "mInline", mInline: 0, "1": "mStdCall", mStdCall: 1, "2": "mPascal", mPascal: 2, "3": "mForward", mForward: 3, "4": "mAssembler", mAssembler: 4, "5": "mRegister", mRegister: 5, "6": "mInterrupt", mInterrupt: 6, "7": "mOverload", mOverload: 7, "8": "mKeep", mKeep: 8};
  this.TInterruptCode = {"0": "DLI", DLI: 0, "1": "VBLD", VBLD: 1, "2": "VBLI", VBLI: 2, "3": "TIM1", TIM1: 3, "4": "TIM2", TIM2: 4, "5": "TIM4", TIM4: 5};
  this.TIOCode = {"0": "OpenRead", OpenRead: 0, "1": "ReadRecord", ReadRecord: 1, "2": "Read", Read: 2, "3": "OpenWrite", OpenWrite: 3, "4": "Append", Append: 4, "5": "WriteRecord", WriteRecord: 5, "6": "Write", Write: 6, "7": "OpenReadWrite", OpenReadWrite: 7, "8": "FileMode", FileMode: 8, "9": "Close", Close: 9};
  this.TCode65 = {"0": "je", je: 0, "1": "jne", jne: 1, "2": "putCHAR", putCHAR: 2, "3": "putEOL", putEOL: 3, "4": "addBX", addBX: 4, "5": "subBX", subBX: 5, "6": "movaBX_Value", movaBX_Value: 6, "7": "imulECX", imulECX: 7, "8": "addAL_CL", addAL_CL: 8, "9": "addAX_CX", addAX_CX: 9, "10": "addEAX_ECX", addEAX_ECX: 10, "11": "shlAL_CL", shlAL_CL: 11, "12": "shlAX_CL", shlAX_CL: 12, "13": "shlEAX_CL", shlEAX_CL: 13, "14": "subAL_CL", subAL_CL: 14, "15": "subAX_CX", subAX_CX: 15, "16": "subEAX_ECX", subEAX_ECX: 16, "17": "cmpSTRING", cmpSTRING: 17, "18": "cmpSTRING2CHAR", cmpSTRING2CHAR: 18, "19": "cmpCHAR2STRING", cmpCHAR2STRING: 19, "20": "shrAL_CL", shrAL_CL: 20, "21": "shrAX_CL", shrAX_CL: 21, "22": "shrEAX_CL", shrEAX_CL: 22};
  rtl.recNewT(this,"TDefine",function () {
    this.Name = "";
    this.Macro = "";
    this.Line = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Param = rtl.arraySetLength(null,"",8);
      return r;
    };
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.Macro === b.Macro) && (this.Line === b.Line) && rtl.arrayEq(this.Param,b.Param);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.Macro = s.Macro;
      this.Line = s.Line;
      this.Param = s.Param.slice(0);
      return this;
    };
  });
  rtl.recNewT(this,"TParam",function () {
    this.Name = "";
    this.DataType = 0;
    this.NumAllocElements = 0;
    this.AllocElementType = 0;
    this.PassMethod = 0;
    this.i = 0;
    this.i_ = 0;
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.DataType === b.DataType) && (this.NumAllocElements === b.NumAllocElements) && (this.AllocElementType === b.AllocElementType) && (this.PassMethod === b.PassMethod) && (this.i === b.i) && (this.i_ === b.i_);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.DataType = s.DataType;
      this.NumAllocElements = s.NumAllocElements;
      this.AllocElementType = s.AllocElementType;
      this.PassMethod = s.PassMethod;
      this.i = s.i;
      this.i_ = s.i_;
      return this;
    };
  });
  this.TParamList$clone = function (a) {
    var b = [];
    b.length = 8;
    for (var c = 0; c < 8; c++) b[c] = $mod.TParam.$clone(a[c]);
    return b;
  };
  this.TVariableList$clone = function (a) {
    var b = [];
    b.length = 256;
    for (var c = 0; c < 256; c++) b[c] = $mod.TParam.$clone(a[c]);
    return b;
  };
  rtl.recNewT(this,"TField",function () {
    this.Name = "";
    this.Value = 0;
    this.DataType = 0;
    this.NumAllocElements = 0;
    this.AllocElementType = 0;
    this.Kind = 0;
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.Value === b.Value) && (this.DataType === b.DataType) && (this.NumAllocElements === b.NumAllocElements) && (this.AllocElementType === b.AllocElementType) && (this.Kind === b.Kind);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.Value = s.Value;
      this.DataType = s.DataType;
      this.NumAllocElements = s.NumAllocElements;
      this.AllocElementType = s.AllocElementType;
      this.Kind = s.Kind;
      return this;
    };
  });
  rtl.recNewT(this,"TType",function () {
    this.Block = 0;
    this.NumFields = 0;
    this.Size = 0;
    this.Field$a$clone = function (a) {
      var b = [];
      b.length = 257;
      for (var c = 0; c < 257; c++) b[c] = $mod.TField.$clone(a[c]);
      return b;
    };
    this.$new = function () {
      var r = Object.create(this);
      r.Field = rtl.arraySetLength(null,$mod.TField,257);
      return r;
    };
    this.$eq = function (b) {
      return (this.Block === b.Block) && (this.NumFields === b.NumFields) && (this.Size === b.Size) && rtl.arrayEq(this.Field,b.Field);
    };
    this.$assign = function (s) {
      this.Block = s.Block;
      this.NumFields = s.NumFields;
      this.Size = s.Size;
      this.Field = this.Field$a$clone(s.Field);
      return this;
    };
  });
  rtl.recNewT(this,"TToken",function () {
    this.UnitIndex = 0;
    this.Column = 0;
    this.Line = 0;
    this.Kind = 0;
    this.Name = "";
    this.Value = 0;
    this.FracValue = 0.0;
    this.StrAddress = 0;
    this.StrLength = 0;
    this.$eq = function (b) {
      return (this.UnitIndex === b.UnitIndex) && (this.Column === b.Column) && (this.Line === b.Line) && (this.Kind === b.Kind) && (this.Name === b.Name) && (this.Value === b.Value) && (this.FracValue === b.FracValue) && (this.StrAddress === b.StrAddress) && (this.StrLength === b.StrLength);
    };
    this.$assign = function (s) {
      this.UnitIndex = s.UnitIndex;
      this.Column = s.Column;
      this.Line = s.Line;
      this.Kind = s.Kind;
      this.Name = s.Name;
      this.Value = s.Value;
      this.FracValue = s.FracValue;
      this.StrAddress = s.StrAddress;
      this.StrLength = s.StrLength;
      return this;
    };
  });
  rtl.recNewT(this,"TIdentifier",function () {
    this.Name = "";
    this.Value = 0;
    this.Block = 0;
    this.UnitIndex = 0;
    this.Alias = "";
    this.Libraries = 0;
    this.DataType = 0;
    this.IdType = 0;
    this.PassMethod = 0;
    this.Pass = 0;
    this.NestedNumAllocElements = 0;
    this.NestedAllocElementType = 0;
    this.NestedDataType = 0;
    this.NestedFunctionNumAllocElements = 0;
    this.NestedFunctionAllocElementType = 0;
    this.isNestedFunction = false;
    this.LoopVariable = false;
    this.isAbsolute = false;
    this.isInit = false;
    this.isInitialized = false;
    this.Section = false;
    this.Kind = 0;
    this.NumParams = 0;
    this.ProcAsBlock = 0;
    this.ObjectIndex = 0;
    this.IsUnresolvedForward = false;
    this.updateResolvedForward = false;
    this.isOverload = false;
    this.isRegister = false;
    this.isInterrupt = false;
    this.isRecursion = false;
    this.isStdCall = false;
    this.isPascal = false;
    this.isInline = false;
    this.isAsm = false;
    this.isExternal = false;
    this.isKeep = false;
    this.isVolatile = false;
    this.isStriped = false;
    this.IsNotDead = false;
    this.NumAllocElements = 0;
    this.NumAllocElements_ = 0;
    this.AllocElementType = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Param = rtl.arraySetLength(null,$mod.TParam,8);
      return r;
    };
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.Value === b.Value) && (this.Block === b.Block) && (this.UnitIndex === b.UnitIndex) && (this.Alias === b.Alias) && (this.Libraries === b.Libraries) && (this.DataType === b.DataType) && (this.IdType === b.IdType) && (this.PassMethod === b.PassMethod) && (this.Pass === b.Pass) && (this.NestedNumAllocElements === b.NestedNumAllocElements) && (this.NestedAllocElementType === b.NestedAllocElementType) && (this.NestedDataType === b.NestedDataType) && (this.NestedFunctionNumAllocElements === b.NestedFunctionNumAllocElements) && (this.NestedFunctionAllocElementType === b.NestedFunctionAllocElementType) && (this.isNestedFunction === b.isNestedFunction) && (this.LoopVariable === b.LoopVariable) && (this.isAbsolute === b.isAbsolute) && (this.isInit === b.isInit) && (this.isInitialized === b.isInitialized) && (this.Section === b.Section) && (this.Kind === b.Kind) && (this.NumParams === b.NumParams) && rtl.arrayEq(this.Param,b.Param) && (this.ProcAsBlock === b.ProcAsBlock) && (this.ObjectIndex === b.ObjectIndex) && (this.IsUnresolvedForward === b.IsUnresolvedForward) && (this.updateResolvedForward === b.updateResolvedForward) && (this.isOverload === b.isOverload) && (this.isRegister === b.isRegister) && (this.isInterrupt === b.isInterrupt) && (this.isRecursion === b.isRecursion) && (this.isStdCall === b.isStdCall) && (this.isPascal === b.isPascal) && (this.isInline === b.isInline) && (this.isAsm === b.isAsm) && (this.isExternal === b.isExternal) && (this.isKeep === b.isKeep) && (this.isVolatile === b.isVolatile) && (this.isStriped === b.isStriped) && (this.IsNotDead === b.IsNotDead) && (this.NumAllocElements === b.NumAllocElements) && (this.NumAllocElements_ === b.NumAllocElements_) && (this.AllocElementType === b.AllocElementType);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.Value = s.Value;
      this.Block = s.Block;
      this.UnitIndex = s.UnitIndex;
      this.Alias = s.Alias;
      this.Libraries = s.Libraries;
      this.DataType = s.DataType;
      this.IdType = s.IdType;
      this.PassMethod = s.PassMethod;
      this.Pass = s.Pass;
      this.NestedNumAllocElements = s.NestedNumAllocElements;
      this.NestedAllocElementType = s.NestedAllocElementType;
      this.NestedDataType = s.NestedDataType;
      this.NestedFunctionNumAllocElements = s.NestedFunctionNumAllocElements;
      this.NestedFunctionAllocElementType = s.NestedFunctionAllocElementType;
      this.isNestedFunction = s.isNestedFunction;
      this.LoopVariable = s.LoopVariable;
      this.isAbsolute = s.isAbsolute;
      this.isInit = s.isInit;
      this.isInitialized = s.isInitialized;
      this.Section = s.Section;
      this.Kind = s.Kind;
      this.NumParams = s.NumParams;
      this.Param = $mod.TParamList$clone(s.Param);
      this.ProcAsBlock = s.ProcAsBlock;
      this.ObjectIndex = s.ObjectIndex;
      this.IsUnresolvedForward = s.IsUnresolvedForward;
      this.updateResolvedForward = s.updateResolvedForward;
      this.isOverload = s.isOverload;
      this.isRegister = s.isRegister;
      this.isInterrupt = s.isInterrupt;
      this.isRecursion = s.isRecursion;
      this.isStdCall = s.isStdCall;
      this.isPascal = s.isPascal;
      this.isInline = s.isInline;
      this.isAsm = s.isAsm;
      this.isExternal = s.isExternal;
      this.isKeep = s.isKeep;
      this.isVolatile = s.isVolatile;
      this.isStriped = s.isStriped;
      this.IsNotDead = s.IsNotDead;
      this.NumAllocElements = s.NumAllocElements;
      this.NumAllocElements_ = s.NumAllocElements_;
      this.AllocElementType = s.AllocElementType;
      return this;
    };
  });
  rtl.recNewT(this,"TCallGraphNode",function () {
    this.NumChildren = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.ChildBlock = rtl.arraySetLength(null,0,16384);
      return r;
    };
    this.$eq = function (b) {
      return rtl.arrayEq(this.ChildBlock,b.ChildBlock) && (this.NumChildren === b.NumChildren);
    };
    this.$assign = function (s) {
      this.ChildBlock = s.ChildBlock.slice(0);
      this.NumChildren = s.NumChildren;
      return this;
    };
  });
  rtl.recNewT(this,"TUnit",function () {
    this.Name = "";
    this.Path = "";
    this.Units = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Allow = rtl.arraySetLength(null,"",256);
      return r;
    };
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.Path === b.Path) && (this.Units === b.Units) && rtl.arrayEq(this.Allow,b.Allow);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.Path = s.Path;
      this.Units = s.Units;
      this.Allow = s.Allow.slice(0);
      return this;
    };
  });
  rtl.recNewT(this,"TResource",function () {
    this.resStream = false;
    this.resName = "";
    this.resType = "";
    this.resFile = "";
    this.resValue = 0;
    this.resFullName = "";
    this.$new = function () {
      var r = Object.create(this);
      r.resPar = rtl.arraySetLength(null,"",8);
      return r;
    };
    this.$eq = function (b) {
      return (this.resStream === b.resStream) && (this.resName === b.resName) && (this.resType === b.resType) && (this.resFile === b.resFile) && (this.resValue === b.resValue) && (this.resFullName === b.resFullName) && rtl.arrayEq(this.resPar,b.resPar);
    };
    this.$assign = function (s) {
      this.resStream = s.resStream;
      this.resName = s.resName;
      this.resType = s.resType;
      this.resFile = s.resFile;
      this.resValue = s.resValue;
      this.resFullName = s.resFullName;
      this.resPar = s.resPar.slice(0);
      return this;
    };
  });
  rtl.recNewT(this,"TCaseLabel",function () {
    this.left = 0;
    this.right = 0;
    this.$eq = function (b) {
      return (this.left === b.left) && (this.right === b.right);
    };
    this.$assign = function (s) {
      this.left = s.left;
      this.right = s.right;
      return this;
    };
  });
  rtl.recNewT(this,"TPosStack",function () {
    this.ptr = 0;
    this.brk = false;
    this.cnt = false;
    this.$eq = function (b) {
      return (this.ptr === b.ptr) && (this.brk === b.brk) && (this.cnt === b.cnt);
    };
    this.$assign = function (s) {
      this.ptr = s.ptr;
      this.brk = s.brk;
      this.cnt = s.cnt;
      return this;
    };
  });
  rtl.recNewT(this,"TForLoop",function () {
    this.begin_value = 0;
    this.end_value = 0;
    this.begin_const = false;
    this.end_const = false;
    this.$eq = function (b) {
      return (this.begin_value === b.begin_value) && (this.end_value === b.end_value) && (this.begin_const === b.begin_const) && (this.end_const === b.end_const);
    };
    this.$assign = function (s) {
      this.begin_value = s.begin_value;
      this.end_value = s.end_value;
      this.begin_const = s.begin_const;
      this.end_const = s.end_const;
      return this;
    };
  });
  this.target = this.TTarget.$new();
  this.MIN_MEMORY_ADDRESS = 0x0;
  this.MAX_MEMORY_ADDRESS = 0xFFFF;
  this.PROGRAM_NAME = "Program";
  this.LIBRARY_NAME = "";
  this.AsmBlock = rtl.arraySetLength(null,"",4096);
  this.Data = rtl.arraySetLength(null,0,65536);
  this.DataSegment = rtl.arraySetLength(null,0,65536);
  this.StaticStringData = rtl.arraySetLength(null,0,65536);
  this.TypeArray$a$clone = function (a) {
    var b = [];
    b.length = 1024;
    for (var c = 0; c < 1024; c++) b[c] = $mod.TType.$clone(a[c]);
    return b;
  };
  this.TypeArray = rtl.arraySetLength(null,this.TType,1024);
  this.Tok = [];
  this.Ident$a$clone = function (a) {
    var b = [];
    b.length = 16384;
    for (var c = 0; c < 16384; c++) b[c] = $mod.TIdentifier.$clone(a[c]);
    return b;
  };
  this.Ident = rtl.arraySetLength(null,this.TIdentifier,16384);
  this.TokenSpelling = rtl.arraySetLength(null,"",200);
  this.UnitName$a$clone = function (a) {
    var b = [];
    b.length = 4096;
    for (var c = 0; c < 4096; c++) b[c] = $mod.TUnit.$clone(a[c]);
    return b;
  };
  this.UnitName = rtl.arraySetLength(null,this.TUnit,4096);
  this.Defines$a$clone = function (a) {
    var b = [];
    b.length = 256;
    for (var c = 0; c < 256; c++) b[c] = $mod.TDefine.$clone(a[c]);
    return b;
  };
  this.Defines = rtl.arraySetLength(null,this.TDefine,256);
  this.IFTmpPosStack = [];
  this.BreakPosStack$a$clone = function (a) {
    var b = [];
    b.length = 513;
    for (var c = 0; c < 513; c++) b[c] = $mod.TPosStack.$clone(a[c]);
    return b;
  };
  this.BreakPosStack = rtl.arraySetLength(null,this.TPosStack,513);
  this.CodePosStack = rtl.arraySetLength(null,0,513);
  this.BlockStack = rtl.arraySetLength(null,0,16384);
  this.CallGraph$a$clone = function (a) {
    var b = [];
    b.length = 16384;
    for (var c = 0; c < 16384; c++) b[c] = $mod.TCallGraphNode.$clone(a[c]);
    return b;
  };
  this.CallGraph = rtl.arraySetLength(null,this.TCallGraphNode,16384);
  this.OldConstValType = 0;
  this.NumTok = 0;
  this.AddDefines = 1;
  this.NumDefines = 1;
  this.i = 0;
  this.NumIdent = 0;
  this.NumTypes = 0;
  this.NumPredefIdent = 0;
  this.NumStaticStrChars = 0;
  this.NumUnits = 0;
  this.NumBlocks = 0;
  this.run_func = 0;
  this.NumProc = 0;
  this.BlockStackTop = 0;
  this.CodeSize = 0;
  this.CodePosStackTop = 0;
  this.BreakPosStackTop = 0;
  this.VarDataSize = 0;
  this.ShrShlCnt = 0;
  this.NumStaticStrCharsTmp = 0;
  this.AsmBlockIndex = 0;
  this.IfCnt = 0;
  this.CaseCnt = 0;
  this.IfdefLevel = 0;
  this.pass = 0;
  this.iOut = -1;
  this.start_time = 0;
  this.CODEORIGIN_BASE = -1;
  this.DATA_BASE = -1;
  this.ZPAGE_BASE = -1;
  this.STACK_BASE = -1;
  this.UnitNameIndex = 1;
  this.FastMul = -1;
  this.OutFile = null;
  this.resArray = [];
  this.MainPath = "";
  this.FilePath = "";
  this.optyA = "";
  this.optyY = "";
  this.optyBP2 = "";
  this.optyFOR0 = "";
  this.optyFOR1 = "";
  this.optyFOR2 = "";
  this.optyFOR3 = "";
  this.outTmp = "";
  this.outputFile = "";
  this.msgWarning = [];
  this.msgNote = [];
  this.msgUser = [];
  this.OptimizeBuf = [];
  this.LinkObj = [];
  this.unitPathList = null;
  rtl.recNewT(this,"optimize$a",function () {
    this.use = false;
    this.unitIndex = 0;
    this.line = 0;
    this.old = 0;
    this.$eq = function (b) {
      return (this.use === b.use) && (this.unitIndex === b.unitIndex) && (this.line === b.line) && (this.old === b.old);
    };
    this.$assign = function (s) {
      this.use = s.use;
      this.unitIndex = s.unitIndex;
      this.line = s.line;
      this.old = s.old;
      return this;
    };
  });
  this.optimize = this.optimize$a.$new();
  rtl.recNewT(this,"codealign$a",function () {
    this.proc = 0;
    this.loop = 0;
    this.link = 0;
    this.$eq = function (b) {
      return (this.proc === b.proc) && (this.loop === b.loop) && (this.link === b.link);
    };
    this.$assign = function (s) {
      this.proc = s.proc;
      this.loop = s.loop;
      this.link = s.link;
      return this;
    };
  });
  this.codealign = this.codealign$a.$new();
  this.PROGRAMTOK_USE = false;
  this.INTERFACETOK_USE = false;
  this.LIBRARYTOK_USE = false;
  this.LIBRARY_USE = false;
  this.RCLIBRARY = false;
  this.OutputDisabled = false;
  this.isConst = false;
  this.isError = false;
  this.isInterrupt = false;
  this.IOCheck = false;
  this.Macros = false;
  this.DiagMode = false;
  this.DataSegmentUse = false;
  this.LoopUnroll = false;
  this.PublicSection = true;
  this.ClearWordMemory = function (anArray) {
    for ($mod.i = 0; $mod.i <= 65535; $mod.i++) {
      anArray[$mod.i] = 0;
    };
  };
  this.AddDefine = function (defineName) {
    if ($mod.SearchDefine(defineName) === 0) {
      $mod.NumDefines += 1;
      $mod.Defines[$mod.NumDefines - 1].Name = defineName;
      $mod.Defines[$mod.NumDefines - 1].Macro = "";
      $mod.Defines[$mod.NumDefines - 1].Line = 0;
    };
  };
  this.AddPath = function (s) {
    $mod.unitPathList.AddFolder(s);
  };
  this.CheckArrayIndex = function (i, IdentIndex, ArrayIndex, ArrayIndexType) {
    if (($mod.Ident[IdentIndex - 1].NumAllocElements > 0) && ($mod.Ident[IdentIndex - 1].AllocElementType !== 139)) if ((ArrayIndex < 0) || (ArrayIndex > (($mod.Ident[IdentIndex - 1].NumAllocElements - 1) + (($mod.Ident[IdentIndex - 1].DataType === 137) + 0)))) if ($mod.Ident[IdentIndex - 1].NumAllocElements !== 1) pas.Messages.WarningForRangeCheckError(i,IdentIndex,ArrayIndex,ArrayIndexType);
  };
  this.CheckArrayIndex_ = function (i, IdentIndex, ArrayIndex, ArrayIndexType) {
    if ($mod.Ident[IdentIndex - 1].NumAllocElements_ > 0) if ((ArrayIndex < 0) || (ArrayIndex > (($mod.Ident[IdentIndex - 1].NumAllocElements_ - 1) + (($mod.Ident[IdentIndex - 1].DataType === 137) + 0)))) if ($mod.Ident[IdentIndex - 1].NumAllocElements_ !== 1) pas.Messages.WarningForRangeCheckError(i,IdentIndex,ArrayIndex,ArrayIndexType);
  };
  this.CheckOperator = function (ErrTokenIndex, op, DataType, RightType) {
    var $ir = rtl.createIntfRefs();
    try {
      if (((DataType in $mod.RealTypes) && !(op in rtl.createSet(63,64,61,62,47,48,43,44,46,45))) || ((DataType in $mod.IntegerTypes) && !(op in rtl.createSet(63,65,66,67,68,71,61,62,69,70,72,47,48,43,44,46,45,114))) || ((DataType === 134) && !(op in rtl.createSet(47,48,43,44,46,45,114))) || ((DataType === 135) && !(op in rtl.createSet(71,69,70,72,47,48,43,44,46,45))) || ((DataType in $mod.Pointers) && !(op in rtl.createSet(47,48,43,44,46,45,61,62)))) if (DataType === RightType) {
        pas.Messages.Error$1(ErrTokenIndex,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OperatorNotOverloaded,"Operator is not overloaded: " + '"' + $mod.InfoAboutToken(DataType) + '" ' + $mod.InfoAboutToken(op) + ' "' + $mod.InfoAboutToken(RightType) + '"',"",""]),pas.Messages.IMessage)))}
       else pas.Messages.Error$1(ErrTokenIndex,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OperationNotSupportedForTypes,'Operation "' + $mod.InfoAboutToken(op) + '" not supported for types "' + $mod.InfoAboutToken(DataType) + '" and "' + $mod.InfoAboutToken(RightType) + '"',"",""]),pas.Messages.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.CheckTok = function (i, ExpectedTokenCode) {
    var s = "";
    var $ir = rtl.createIntfRefs();
    try {
      if (ExpectedTokenCode < 170) {
        s = $mod.TokenSpelling[ExpectedTokenCode - 1]}
       else if (ExpectedTokenCode === 170) {
        s = "identifier"}
       else if (ExpectedTokenCode === 171) {
        s = "number"}
       else if (ExpectedTokenCode === 173) {
        s = "literal"}
       else if (ExpectedTokenCode === 174) {
        s = "string"}
       else s = "unknown token";
      if ($mod.Tok[i].Kind !== ExpectedTokenCode) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error, " + "'" + s + "'" + " expected but '" + $mod.GetSpelling(i) + "' found","",""]),pas.Messages.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.DefineStaticString = function (StrTokenIndex, StrValue) {
    var i = 0;
    var len = 0;
    len = StrValue.length;
    if (len > 255) {
      $mod.Data[0] = 255}
     else $mod.Data[0] = len;
    if (($mod.NumStaticStrChars + len) > 0xFFFF) {
      pas.System.Writeln("DefineStaticString: " + $mod.IntToStr(len));
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    for (var $l = 1, $end = len; $l <= $end; $l++) {
      i = $l;
      $mod.Data[i] = StrValue.charCodeAt(i - 1);
    };
    for (var $l1 = 0, $end1 = $mod.NumStaticStrChars - len - 1; $l1 <= $end1; $l1++) {
      i = $l1;
      if (pas.Utilities.CompareWord($mod.Data[0],$mod.StaticStringData[i],len + 1) === 0) {
        $mod.Tok[StrTokenIndex].StrLength = len;
        $mod.Tok[StrTokenIndex].StrAddress = 256 + i;
        return;
      };
    };
    $mod.Tok[StrTokenIndex].StrLength = len;
    $mod.Tok[StrTokenIndex].StrAddress = 256 + $mod.NumStaticStrChars;
    $mod.StaticStringData[$mod.NumStaticStrChars] = $mod.Data[0];
    $mod.NumStaticStrChars += 1;
    for (var $l2 = 1, $end2 = len; $l2 <= $end2; $l2++) {
      i = $l2;
      $mod.StaticStringData[$mod.NumStaticStrChars] = StrValue.charCodeAt(i - 1);
      $mod.NumStaticStrChars += 1;
    };
  };
  this.DefineFilename = function (StrTokenIndex, StrValue) {
    var i = 0;
    for (var $l = 0, $end = rtl.length($mod.LinkObj) - 1 - 1; $l <= $end; $l++) {
      i = $l;
      if ($mod.LinkObj[i] === StrValue) {
        $mod.Tok[StrTokenIndex].Value = i;
        return;
      };
    };
    i = rtl.length($mod.LinkObj) - 1;
    $mod.LinkObj[i] = StrValue;
    $mod.LinkObj = rtl.arraySetLength($mod.LinkObj,"",i + 2);
    $mod.Tok[StrTokenIndex].Value = i;
  };
  this.FindFile = function (Name, ftyp) {
    var Result = "";
    var msg = null;
    try {
      Result = $mod.unitPathList.FindFile(Name);
      if (Result === "") {
        if (ftyp === "unit") {
          msg = rtl.setIntfL(msg,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileNotFound,"Can't find unit '" + pas.SysUtils.ChangeFileExt(Name,"") + "' used by program '" + $mod.PROGRAM_NAME + "' in unit path '" + $mod.unitPathList.ToString() + "'.","",""]),pas.Messages.IMessage),true);
        } else {
          msg = rtl.setIntfL(msg,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileNotFound,"Can't find " + ftyp + " file '" + Name + "' used by program '" + $mod.PROGRAM_NAME + "' in unit path '" + $mod.unitPathList.ToString() + "'.","",""]),pas.Messages.IMessage),true);
        };
        pas.Messages.Error$1($mod.NumTok,msg);
      };
    } finally {
      rtl._Release(msg);
    };
    return Result;
  };
  this.FreeTokens = function () {
    $mod.Tok = rtl.arraySetLength($mod.Tok,$mod.TToken,0);
    $mod.IFTmpPosStack = rtl.arraySetLength($mod.IFTmpPosStack,0,0);
    rtl.free($mod,"unitPathList");
  };
  this.GetCommonConstType = function (ErrTokenIndex, DstType, SrcType, err) {
    var Result = false;
    Result = false;
    if (($mod.DataSize[DstType - 128] < $mod.DataSize[SrcType - 128]) || ((DstType === 142) && (SrcType !== 142)) || ((DstType !== 142) && (SrcType === 142)) || ((DstType === 143) && (SrcType !== 143)) || ((DstType !== 143) && (SrcType === 143)) || ((DstType === 144) && (SrcType !== 144)) || ((DstType !== 144) && (SrcType === 144)) || ((DstType === 141) && (SrcType !== 141)) || ((DstType !== 141) && (SrcType === 141)) || ((DstType in $mod.IntegerTypes) && (SrcType in rtl.createSet(134,135,136,160,161,137))) || ((SrcType in $mod.IntegerTypes) && (DstType in rtl.createSet(134,135)))) if (err) {
      pas.Messages.ErrorIncompatibleTypes(ErrTokenIndex,SrcType,DstType,false)}
     else Result = true;
    return Result;
  };
  this.GetCommonType = function (ErrTokenIndex, LeftType, RightType) {
    var Result = 0;
    Result = 0;
    if (LeftType === RightType) {
      Result = LeftType}
     else if ((LeftType in $mod.IntegerTypes) && (RightType in $mod.IntegerTypes)) Result = LeftType;
    if ((LeftType in $mod.Pointers) && (RightType in $mod.Pointers)) Result = LeftType;
    if (LeftType === 0) Result = RightType;
    if (Result === 0) pas.Messages.ErrorIncompatibleTypes(ErrTokenIndex,RightType,LeftType,false);
    return Result;
  };
  this.GetEnumName = function (IdentIndex) {
    var Result = "";
    var IdentTtemp = 0;
    function Search(Num) {
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      Result = 0;
      for (var $l = $mod.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = 1, $end = $mod.NumIdent; $l1 <= $end; $l1++) {
          IdentIndex = $l1;
          if (($mod.Ident[IdentIndex - 1].DataType === 146) && ($mod.Ident[IdentIndex - 1].NumAllocElements === Num) && ($mod.BlockStack[BlockStackIndex] === $mod.Ident[IdentIndex - 1].Block)) return IdentIndex;
        };
      };
      return Result;
    };
    Result = "";
    if ($mod.Ident[IdentIndex - 1].NumAllocElements > 0) {
      IdentTtemp = Search($mod.Ident[IdentIndex - 1].NumAllocElements);
      if (IdentTtemp > 0) Result = $mod.Ident[IdentTtemp - 1].Name;
    } else if ($mod.Ident[IdentIndex - 1].DataType === 146) {
      IdentTtemp = Search($mod.Ident[IdentIndex - 1].NumAllocElements);
      if (IdentTtemp > 0) Result = $mod.Ident[IdentTtemp - 1].Name;
    };
    return Result;
  };
  this.GetSpelling = function (i) {
    var Result = "";
    if (i > $mod.NumTok) {
      Result = "no token"}
     else if (($mod.Tok[i].Kind > 0) && ($mod.Tok[i].Kind < 170)) {
      Result = $mod.TokenSpelling[$mod.Tok[i].Kind - 1]}
     else if ($mod.Tok[i].Kind === 170) {
      Result = "identifier"}
     else if (($mod.Tok[i].Kind === 171) || ($mod.Tok[i].Kind === 172)) {
      Result = "number"}
     else if (($mod.Tok[i].Kind === 173) || ($mod.Tok[i].Kind === 174)) {
      Result = "literal"}
     else if ($mod.Tok[i].Kind === 196) {
      Result = "END"}
     else if ($mod.Tok[i].Kind === 199) {
      Result = "end of file"}
     else Result = "unknown token";
    return Result;
  };
  this.GetVAL = function (a) {
    var Result = 0;
    var err = 0;
    Result = -1;
    if (a !== "") if (a.charAt(0) === "#") {
      pas.System.val$6(pas.System.Copy(a,2,a.length),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (err > 0) Result = -1;
    };
    return Result;
  };
  this.GetValueType = function (Value) {
    var Result = 0;
    if (Value < 0) {
      if (Value >= -128) {
        Result = 131}
       else if (Value >= -32768) {
        Result = 132}
       else Result = 133;
    } else {
      var $tmp = Value;
      if (($tmp >= 0) && ($tmp <= 255)) {
        Result = 128}
       else if (($tmp >= 256) && ($tmp <= 0xFFFF)) {
        Result = 129}
       else {
        Result = 130;
      };
    };
    return Result;
  };
  this.LowBound = function (i, DataType) {
    var Result = 0;
    var $ir = rtl.createIntfRefs();
    try {
      Result = 0;
      var $tmp = DataType;
      if ($tmp === 0) {
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantReadWrite,"Can't read or write variables of this type","",""]),pas.Messages.IMessage)))}
       else if ($tmp === 133) {
        Result = -2147483648}
       else if ($tmp === 132) {
        Result = -32768}
       else if ($tmp === 131) {
        Result = -128}
       else if ($tmp === 134) {
        Result = 0}
       else if ($tmp === 135) {
        Result = 0}
       else if ($tmp === 128) {
        Result = 0}
       else if ($tmp === 129) {
        Result = 0}
       else if ($tmp === 130) {
        Result = 0}
       else if ($tmp === 32) {
        Result = 1}
       else {
        pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeMismatch,"Type mismatch","",""]),pas.Messages.IMessage)));
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.HighBound = function (i, DataType) {
    var Result = 0;
    var $ir = rtl.createIntfRefs();
    try {
      Result = 0;
      var $tmp = DataType;
      if ($tmp === 0) {
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantReadWrite,"Can't read or write variables of this type","",""]),pas.Messages.IMessage)))}
       else if ($tmp === 133) {
        Result = 2147483647}
       else if ($tmp === 132) {
        Result = 32767}
       else if ($tmp === 131) {
        Result = 127}
       else if ($tmp === 134) {
        Result = 255}
       else if ($tmp === 135) {
        Result = 1}
       else if ($tmp === 128) {
        Result = 255}
       else if ($tmp === 129) {
        Result = 65535}
       else if ($tmp === 130) {
        Result = 4294967295}
       else if ($tmp === 32) {
        Result = 255}
       else {
        pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeMismatch,"Type mismatch","",""]),pas.Messages.IMessage)));
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.InfoAboutToken = function (t) {
    var Result = "";
    var $tmp = t;
    if ($tmp === 43) {
      Result = "="}
     else if ($tmp === 44) {
      Result = "<>"}
     else if ($tmp === 45) {
      Result = "<"}
     else if ($tmp === 46) {
      Result = "<="}
     else if ($tmp === 47) {
      Result = ">"}
     else if ($tmp === 48) {
      Result = ">="}
     else if ($tmp === 114) {
      Result = "IN"}
     else if ($tmp === 51) {
      Result = "."}
     else if ($tmp === 52) {
      Result = ","}
     else if ($tmp === 53) {
      Result = ";"}
     else if ($tmp === 54) {
      Result = "("}
     else if ($tmp === 55) {
      Result = ")"}
     else if ($tmp === 56) {
      Result = "^"}
     else if ($tmp === 57) {
      Result = "@"}
     else if ($tmp === 58) {
      Result = "["}
     else if ($tmp === 59) {
      Result = "]"}
     else if ($tmp === 60) {
      Result = ":"}
     else if ($tmp === 61) {
      Result = "+"}
     else if ($tmp === 62) {
      Result = "-"}
     else if ($tmp === 63) {
      Result = "*"}
     else if ($tmp === 64) {
      Result = "/"}
     else if ($tmp === 65) {
      Result = "DIV"}
     else if ($tmp === 66) {
      Result = "MOD"}
     else if ($tmp === 67) {
      Result = "SHL"}
     else if ($tmp === 68) {
      Result = "SHR"}
     else if ($tmp === 69) {
      Result = "OR"}
     else if ($tmp === 70) {
      Result = "XOR"}
     else if ($tmp === 71) {
      Result = "AND"}
     else if ($tmp === 72) {
      Result = "NOT"}
     else if ($tmp === 1) {
      Result = "CONST"}
     else if ($tmp === 2) {
      Result = "TYPE"}
     else if ($tmp === 3) {
      Result = "VARIABLE"}
     else if ($tmp === 4) {
      Result = "PROCEDURE"}
     else if ($tmp === 5) {
      Result = "FUNCTION"}
     else if ($tmp === 99) {
      Result = "CONSTRUCTOR"}
     else if ($tmp === 100) {
      Result = "DESTRUCTOR"}
     else if ($tmp === 6) {
      Result = "LABEL"}
     else if ($tmp === 7) {
      Result = "UNIT"}
     else if ($tmp === 146) {
      Result = "ENUM"}
     else if ($tmp === 139) {
      Result = "RECORD"}
     else if ($tmp === 140) {
      Result = "OBJECT"}
     else if ($tmp === 128) {
      Result = "BYTE"}
     else if ($tmp === 131) {
      Result = "SHORTINT"}
     else if ($tmp === 134) {
      Result = "CHAR"}
     else if ($tmp === 135) {
      Result = "BOOLEAN"}
     else if ($tmp === 129) {
      Result = "WORD"}
     else if ($tmp === 132) {
      Result = "SMALLINT"}
     else if ($tmp === 130) {
      Result = "CARDINAL"}
     else if ($tmp === 133) {
      Result = "INTEGER"}
     else if (($tmp === 136) || ($tmp === 160) || ($tmp === 161)) {
      Result = "POINTER"}
     else if ($tmp === 147) {
      Result = "<Procedure Variable>"}
     else if ($tmp === 137) {
      Result = "STRING"}
     else if ($tmp === 174) {
      Result = "literal"}
     else if ($tmp === 141) {
      Result = "SHORTREAL"}
     else if ($tmp === 142) {
      Result = "REAL"}
     else if ($tmp === 143) {
      Result = "SINGLE"}
     else if ($tmp === 144) {
      Result = "FLOAT16"}
     else if ($tmp === 127) {
      Result = "SET"}
     else if ($tmp === 138) {
      Result = "FILE"}
     else if ($tmp === 148) {
      Result = "TEXTFILE"}
     else if ($tmp === 145) {
      Result = "PCHAR"}
     else if ($tmp === 104) {
      Result = "REGISTER"}
     else if ($tmp === 106) {
      Result = "PASCAL"}
     else if ($tmp === 107) {
      Result = "STDCALL"}
     else if ($tmp === 108) {
      Result = "INLINE"}
     else if ($tmp === 37) {
      Result = "ASM"}
     else if ($tmp === 105) {
      Result = "INTERRUPT"}
     else {
      Result = "UNTYPED";
    };
    return Result;
  };
  this.IntToStr = function (a) {
    var Result = "";
    Result = "" + a;
    return Result;
  };
  this.SearchDefine = function (defineName) {
    var Result = 0;
    var i = 0;
    for (var $l = 1, $end = $mod.NumDefines; $l <= $end; $l++) {
      i = $l;
      if ($mod.Defines[i - 1].Name === defineName) {
        return i;
      };
    };
    Result = 0;
    return Result;
  };
  this.StrToInt = function (a) {
    var Result = 0;
    var value = 0;
    var i = 0;
    pas.System.val$6(a,{get: function () {
        return value;
      }, set: function (v) {
        value = v;
      }},{get: function () {
        return i;
      }, set: function (v) {
        i = v;
      }});
    Result = value;
    return Result;
  };
  this.SetModifierBit = function (modifierCode, bits) {
    bits.set(bits.get() | (1 << modifierCode));
  };
  this.GetIOBits = function (ioCode) {
    var Result = 0;
    var $tmp = ioCode;
    if ($tmp === $mod.TIOCode.OpenRead) {
      Result = 0x4}
     else if ($tmp === $mod.TIOCode.ReadRecord) {
      Result = 0x5}
     else if ($tmp === $mod.TIOCode.Read) {
      Result = 0x7}
     else if ($tmp === $mod.TIOCode.OpenWrite) {
      Result = 0x8}
     else if ($tmp === $mod.TIOCode.Append) {
      Result = 0x9}
     else if ($tmp === $mod.TIOCode.WriteRecord) {
      Result = 0x9}
     else if ($tmp === $mod.TIOCode.Write) {
      Result = 0xb}
     else if ($tmp === $mod.TIOCode.OpenReadWrite) {
      Result = 0xc}
     else if ($tmp === $mod.TIOCode.FileMode) {
      Result = 0xf0}
     else if ($tmp === $mod.TIOCode.Close) {
      Result = 0xff}
     else {
      if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid ioCode."]);
    };
    return Result;
  };
},["Messages","Utilities"]);
rtl.module("Diagnostic",["System"],function () {
  "use strict";
  var $mod = this;
  this.Diagnostics = function () {
    var i = 0;
    var CharIndex = 0;
    var ChildIndex = 0;
    var DiagFile = null;
    var $ir = rtl.createIntfRefs();
    try {
      DiagFile = rtl.setIntfL(DiagFile,pas.FileIO.TFileSystem.CreateTextFile(),true);
      DiagFile.Assign(pas.SysUtils.ChangeFileExt(pas.Common.UnitName[0].Name,".txt"));
      DiagFile.Rewrite();
      DiagFile.WriteLn();
      DiagFile.WriteLn$1("Token list: ");
      DiagFile.WriteLn();
      $ir.ref(4,$ir.ref(3,$ir.ref(2,$ir.ref(1,DiagFile.Write$1("# ",6)).Write$1("Unit",30)).Write$1("Line",6)).Write$1("Token",30)).WriteLn();
      DiagFile.WriteLn();
      for (var $l = 1, $end = pas.Common.NumTok; $l <= $end; $l++) {
        i = $l;
        $ir.ref(8,$ir.ref(7,$ir.ref(6,$ir.ref(5,DiagFile.Write$2(i,6)).Write$1(pas.Common.UnitName[pas.Common.Tok[i].UnitIndex - 1].Name,30)).Write$2(pas.Common.Tok[i].Line,6)).Write$1(pas.Common.GetSpelling(i),30)).WriteLn();
        if (pas.Common.Tok[i].Kind === 171) {
          DiagFile.WriteLn$2(" = ",pas.Common.IntToStr(pas.Common.Tok[i].Value))}
         else if (pas.Common.Tok[i].Kind === 172) {
          DiagFile.WriteLn$2(" = ",pas.SysUtils.FloatToStr(pas.Common.Tok[i].FracValue))}
         else if (pas.Common.Tok[i].Kind === 170) {
          DiagFile.WriteLn$2(" = ",pas.Common.Tok[i].Name)}
         else if (pas.Common.Tok[i].Kind === 173) {
          DiagFile.WriteLn$2(" = ",String.fromCharCode(pas.Common.Tok[i].Value))}
         else if (pas.Common.Tok[i].Kind === 174) {
          $ir.ref(9,DiagFile.Write(" = "));
          for (var $l1 = 1, $end1 = pas.Common.Tok[i].StrLength; $l1 <= $end1; $l1++) {
            CharIndex = $l1;
            $ir.ref(10,DiagFile.Write$2(pas.Common.StaticStringData[(pas.Common.Tok[i].StrAddress - 256) + (CharIndex - 1)],-1));
          };
          DiagFile.WriteLn();
        } else DiagFile.WriteLn();
      };
      DiagFile.WriteLn();
      DiagFile.WriteLn$1("Identifier list: ");
      DiagFile.WriteLn();
      $ir.ref(18,$ir.ref(17,$ir.ref(16,$ir.ref(15,$ir.ref(14,$ir.ref(13,$ir.ref(12,$ir.ref(11,DiagFile.Write$1("#",6)).Write$1("Block",6)).Write$1("Name",30)).Write$1("Kind",15)).Write$1("Type",15)).Write$1("Items/Params",15)).Write$1("Value/Addr",15)).Write$1("Dead",5)).WriteLn();
      DiagFile.WriteLn();
      for (var $l2 = 1, $end2 = pas.Common.NumIdent; $l2 <= $end2; $l2++) {
        i = $l2;
        $ir.ref(22,$ir.ref(21,$ir.ref(20,$ir.ref(19,DiagFile.Write$2(i,6)).Write$2(pas.Common.Ident[i - 1].Block,6)).Write$1(pas.Common.Ident[i - 1].Name,30)).Write$1(pas.Common.TokenSpelling[pas.Common.Ident[i - 1].Kind - 1],15));
        if (pas.Common.Ident[i - 1].DataType !== 0) {
          $ir.ref(23,DiagFile.Write$1(pas.Common.TokenSpelling[pas.Common.Ident[i - 1].DataType - 1],15))}
         else $ir.ref(24,DiagFile.Write$1("N/A",15));
        $ir.ref(26,$ir.ref(25,DiagFile.Write$2(pas.Common.Ident[i - 1].NumAllocElements,15)).Write$1(pas.SysUtils.IntToHex(pas.Common.Ident[i - 1].Value,8),15));
        if ((pas.Common.Ident[i - 1].Kind in rtl.createSet(4,5,99,100)) && !pas.Common.Ident[i - 1].IsNotDead) {
          $ir.ref(27,DiagFile.Write$1("Yes",5))}
         else $ir.ref(28,DiagFile.Write$1("",5));
      };
      DiagFile.WriteLn();
      DiagFile.WriteLn();
      DiagFile.WriteLn$1("Call graph: ");
      DiagFile.WriteLn();
      for (var $l3 = 1, $end3 = pas.Common.NumBlocks; $l3 <= $end3; $l3++) {
        i = $l3;
        $ir.ref(30,$ir.ref(29,DiagFile.Write$2(i,6)).Write("  ---> "));
        for (var $l4 = 1, $end4 = pas.Common.CallGraph[i - 1].NumChildren; $l4 <= $end4; $l4++) {
          ChildIndex = $l4;
          $ir.ref(31,DiagFile.Write$2(pas.Common.CallGraph[i - 1].ChildBlock[ChildIndex - 1],5));
        };
        DiagFile.WriteLn();
      };
      DiagFile.WriteLn();
      DiagFile.Close();
    } finally {
      $ir.free();
      rtl._Release(DiagFile);
    };
  };
},["SysUtils","Common","FileIO"]);
rtl.module("MathEvaluate",["System","SysUtils","CommonTypes","StringUtilities"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass(this,"EEValuationException",pas.SysUtils.Exception,function () {
    this.$init = function () {
      pas.SysUtils.Exception.$init.call(this);
      this._expression = "";
      this._index = 0;
    };
    this.Create$2 = function (msg) {
      pas.SysUtils.Exception.Create$1.call(this,msg);
      this._expression = $impl.s;
      this._index = $impl.cix;
      return this;
    };
  });
  rtl.createInterface(this,"IEvaluationContext","{556D1EFF-EEEF-3396-B875-333A2A418742}",["GetConstantName","GetConstantValue"],pas.System.IUnknown);
  this.Evaluate = function (expression, evaluationContext) {
    var Result = 0.0;
    var i = 0;
    if (expression === "") {
      Result = 0}
     else {
      rtl.setIntfP($impl,"evaluationContext",evaluationContext);
      $impl.s = expression;
      for (var $l = 1, $end = $impl.s.length; $l <= $end; $l++) {
        i = $l;
        $impl.s = rtl.setCharAt($impl.s,i - 1,pas.System.upcase($impl.s.charAt(i - 1)));
      };
      $impl.cix = 1;
      Result = $impl.SimpleExpression();
    };
    return Result;
  };
  $mod.$implcode = function () {
    $impl.evaluationContext = null;
    $impl.s = "";
    $impl.cix = 0;
    $impl.fop = [" ","PI","RND","SQRT","SQR","ARCTAN2","COS","SIN","TAN","EXP","LN","ABS","INT","POWER","ARCTAN"];
    $impl.top = [" ","*","/","DIV","MOD","AND","SHL","SHR"];
    $impl.seop = [" ","+","-","OR","XOR"];
    $impl.RaiseError = function (msg) {
      throw $mod.EEValuationException.$create("Create$2",[msg]);
    };
    $impl.SkipBlanks = function () {
      while ($impl.s.charAt($impl.cix - 1) === " ") $impl.cix += 1;
    };
    $impl.Constant = function () {
      var Result = 0.0;
      var n = "";
      var i = 0;
      var v = 0;
      var k = 0;
      var ln = 0;
      var v1 = 0.0;
      var p = 0;
      var pflg = false;
      var constantValue = 0;
      n = "";
      pflg = false;
      $impl.SkipBlanks();
      p = 0;
      if ($impl.s.charAt($impl.cix - 1) === "%") {
        $impl.cix += 1;
        while ($impl.s.charCodeAt($impl.cix - 1) in rtl.createSet(48,49)) {
          n = n + $impl.s.charAt($impl.cix - 1);
          $impl.cix += 1;
        };
        if (n.length === 0) $impl.RaiseError("Invalid constant %");
        i = 1;
        while (n.charAt(i - 1) === "0") i += 1;
        ln = n.length;
        v = 0;
        for (var $l = ln, $end = i; $l >= $end; $l--) {
          k = $l;
          if (n.charAt(k - 1) === "1") v = v + (1 << (ln - k));
        };
        v1 = v;
      } else if ($impl.s.charAt($impl.cix - 1) === "$") {
        n = "$";
        $impl.cix += 1;
        while (pas.System.upcase($impl.s.charAt($impl.cix - 1)).charCodeAt() in rtl.createSet(null,48,57,null,65,70)) {
          n = n + $impl.s.charAt($impl.cix - 1);
          $impl.cix += 1;
        };
        pas.System.val$6(n,{get: function () {
            return v;
          }, set: function (w) {
            v = w;
          }},{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }});
        v1 = v;
      } else {
        while (($impl.s.charCodeAt($impl.cix - 1) in rtl.createSet(null,48,57)) || (($impl.s.charAt($impl.cix - 1) === ".") && !pflg)) {
          if ($impl.s.charAt($impl.cix - 1) === ".") pflg = true;
          n = n + $impl.s.charAt($impl.cix - 1);
          $impl.cix += 1;
        };
        pas.System.val$8(n,{get: function () {
            return v1;
          }, set: function (v) {
            v1 = v;
          }},{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }});
      };
      if (p !== 0) {
        n = $impl.evaluationContext.GetConstantName($impl.s,{p: $impl, get: function () {
            return this.p.cix;
          }, set: function (v) {
            this.p.cix = v;
          }});
        if (n !== "") {
          constantValue = 0;
          if ($impl.evaluationContext.GetConstantValue(n,{get: function () {
              return constantValue;
            }, set: function (v) {
              constantValue = v;
            }})) {
            v1 = constantValue}
           else $impl.RaiseError('Invalid constant "' + n + '"');
        };
      };
      Result = v1;
      return Result;
    };
    $impl.XNot = function (v) {
      var Result = 0.0;
      if (v === 0) {
        Result = 1}
       else Result = 0;
      return Result;
    };
    $impl.Factor = function () {
      var Result = 0.0;
      var v1 = 0.0;
      var v2 = 0.0;
      var ch = "\x00";
      var op = 0;
      var i = 0;
      function RaiseWrongNumberOfParametersError() {
        $impl.RaiseError('Wrong number of parameters specified for call to "' + $impl.fop[op] + '"');
      };
      $impl.SkipBlanks();
      op = 0;
      v1 = 0;
      v2 = 0;
      for (i = 1; i <= 14; i++) if (op === 0) if (pas.System.Copy($impl.s,$impl.cix,$impl.fop[i].length) === $impl.fop[i]) op = i;
      if (op > 0) {
        $impl.cix = $impl.cix + $impl.fop[op].length;
        $impl.SkipBlanks();
        if ((op in rtl.createSet(1,2)) && ($impl.s.charAt($impl.cix - 1) === "(")) RaiseWrongNumberOfParametersError();
        if (op > 2) {
          if ($impl.s.charAt($impl.cix - 1) !== "(") RaiseWrongNumberOfParametersError();
          v1 = $impl.Factor();
          if ((op in rtl.createSet(5,13)) && ($impl.s.charAt($impl.cix - 1) !== ",")) RaiseWrongNumberOfParametersError();
          if ($impl.s.charAt($impl.cix - 1) === ",") {
            if (!(op in rtl.createSet(5,13))) RaiseWrongNumberOfParametersError();
            $impl.cix += 1;
            $impl.SkipBlanks();
            v2 = $impl.Factor();
            if ($impl.s.charAt($impl.cix - 1) !== ")") RaiseWrongNumberOfParametersError();
            $impl.cix += 1;
          };
        };
        var $tmp = op;
        if ($tmp === 1) {
          v1 = Math.PI}
         else if ($tmp === 2) {
          v1 = Math.random()}
         else if ($tmp === 3) {
          v1 = Math.sqrt(v1)}
         else if ($tmp === 4) {
          v1 = pas.System.Sqr$1(v1)}
         else if ($tmp === 5) {
          v1 = Math.atan2(v1,v2)}
         else if ($tmp === 6) {
          v1 = Math.cos(v1)}
         else if ($tmp === 7) {
          v1 = Math.sin(v1)}
         else if ($tmp === 8) {
          v1 = Math.sin(v1) / Math.cos(v1)}
         else if ($tmp === 9) {
          v1 = Math.exp(v1)}
         else if ($tmp === 10) {
          v1 = Math.log(v1)}
         else if ($tmp === 11) {
          v1 = Math.abs(v1)}
         else if ($tmp === 12) {
          v1 = pas.System.Int(v1)}
         else if ($tmp === 13) {
          v1 = Math.pow(v1,v2)}
         else if ($tmp === 14) {
          v1 = Math.atan(v1)}
         else {
          if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid operator code " + pas.SysUtils.IntToStr(op) + "."]);
        };
      } else if ($impl.s.charAt($impl.cix - 1) === "(") {
        $impl.cix += 1;
        v1 = $impl.SimpleExpression();
        $impl.SkipBlanks();
        if ($impl.s.charAt($impl.cix - 1) !== ",") if ($impl.s.charAt($impl.cix - 1) === ")") {
          $impl.cix += 1}
         else $impl.RaiseError("Parenthesis Mismatch");
      } else if (($impl.s.charAt($impl.cix - 1) === "-") || ($impl.s.charAt($impl.cix - 1) === "+") || (pas.System.Copy($impl.s,$impl.cix,3) === "NOT")) {
        ch = $impl.s.charAt($impl.cix - 1);
        if (ch === "N") {
          $impl.cix = $impl.cix + 3}
         else $impl.cix += 1;
        var $tmp1 = ch;
        if ($tmp1 === "+") {
          v1 = $impl.Factor()}
         else if ($tmp1 === "-") {
          v1 = -$impl.Factor()}
         else if ($tmp1 === "N") {
          v1 = $impl.XNot($impl.Factor())}
         else {
          if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid case"]);
        };
      } else v1 = $impl.Constant();
      Result = v1;
      return Result;
    };
    $impl.Term = function () {
      var Result = 0.0;
      var op = 0;
      var i = 0;
      var v1 = 0.0;
      var v2 = 0.0;
      v1 = $impl.Factor();
      do {
        $impl.SkipBlanks();
        op = 0;
        for (i = 1; i <= 7; i++) if (op === 0) if (pas.System.Copy($impl.s,$impl.cix,$impl.top[i].length) === $impl.top[i]) op = i;
        if (op > 0) {
          $impl.cix = $impl.cix + $impl.top[op].length;
          v2 = $impl.Factor();
          var $tmp = op;
          if ($tmp === 1) {
            v1 = v1 * v2}
           else if ($tmp === 2) {
            v1 = v1 / v2}
           else if ($tmp === 3) {
            v1 = rtl.trunc(Math.round(v1) / Math.round(v2))}
           else if ($tmp === 4) {
            v1 = Math.round(v1) % Math.round(v2)}
           else if ($tmp === 5) {
            v1 = rtl.and(Math.round(v1),Math.round(v2))}
           else if ($tmp === 6) {
            v1 = rtl.shl(Math.round(v1),Math.round(v2))}
           else if ($tmp === 7) v1 = rtl.shr(Math.round(v1),Math.round(v2));
        };
      } while (!(op === 0));
      Result = v1;
      return Result;
    };
    $impl.SimpleExpression = function () {
      var Result = 0.0;
      var op = 0;
      var i = 0;
      var v1 = 0.0;
      var v2 = 0.0;
      $impl.SkipBlanks();
      v1 = $impl.Term();
      do {
        $impl.SkipBlanks();
        op = 0;
        for (i = 1; i <= 4; i++) if (op === 0) if (pas.System.Copy($impl.s,$impl.cix,$impl.seop[i].length) === $impl.seop[i]) op = i;
        if (op > 0) {
          $impl.cix = $impl.cix + $impl.seop[op].length;
          v2 = $impl.Term();
          var $tmp = op;
          if ($tmp === 1) {
            v1 = v1 + v2}
           else if ($tmp === 2) {
            v1 = v1 - v2}
           else if ($tmp === 3) {
            v1 = rtl.or(Math.round(v1),Math.round(v2))}
           else if ($tmp === 4) v1 = rtl.xor(Math.round(v1),Math.round(v2));
        };
      } while (!(op === 0));
      Result = v1;
      return Result;
    };
  };
},["Math"]);
rtl.module("Numbers",["System"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FromInt64 = function (i) {
    var Result = 0;
    var fl = 0.0;
    var ftmp = rtl.arraySetLength(null,0,2);
    fl = i & 0xFFFFFFFF;
    ftmp = $impl.ToTFloat(fl);
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.FromSingle = function (s) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.ToTFloat(s);
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.CastToReal = function (a) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    Result = ftmp[0];
    return Result;
  };
  this.CastToSingle = function (a) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    Result = ftmp[1];
    return Result;
  };
  this.CastToHalfSingle = function (a) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    Result = $impl.CardToHalf(ftmp);
    return Result;
  };
  this.Assign = function (valType, s) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    if (valType in pas.Common.RealTypes) {
      ftmp = $impl.ToTFloat(s);
    } else {
      ftmp[0] = Math.round(s);
      ftmp[1] = 0;
    };
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.Negate = function (valType, a) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    if (valType.get() in pas.Common.RealTypes) {
      ftmp = $impl.Zero();
      Result = 0;
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl = -fl;
      ftmp = $impl.ToTFloat(fl);
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } else {
      Result = -a;
      if (valType.get() in pas.Common.IntegerTypes) valType.set(pas.Common.GetValueType(Result));
    };
    return Result;
  };
  this.Add = function (valType, a, b) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    if (valType in pas.Common.RealTypes) {
      ftmp = $impl.Zero();
      ftmp_ = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      $impl.MoveTFloat(b,{get: function () {
          return ftmp_;
        }, set: function (v) {
          ftmp_ = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl_ = $impl.ToSingle(ftmp_);
      fl = fl + fl_;
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } else {
      Result = a + b;
    };
    return Result;
  };
  this.Subtract = function (valType, a, b) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    if (valType in pas.Common.RealTypes) {
      ftmp = $impl.Zero();
      ftmp_ = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      $impl.MoveTFloat(b,{get: function () {
          return ftmp_;
        }, set: function (v) {
          ftmp_ = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl_ = $impl.ToSingle(ftmp_);
      fl = fl + fl_;
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } else {
      Result = a - b;
    };
    return Result;
  };
  this.Multiply = function (valType, a, b) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    if (valType in pas.Common.RealTypes) {
      ftmp = $impl.Zero();
      ftmp_ = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      $impl.MoveTFloat(b,{get: function () {
          return ftmp_;
        }, set: function (v) {
          ftmp_ = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl_ = $impl.ToSingle(ftmp_);
      fl = fl * fl_;
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } else {
      Result = a * b;
    };
    return Result;
  };
  this.Divide = function (valType, a, b) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    ftmp = $impl.Zero();
    ftmp_ = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    $impl.MoveTFloat(b,{get: function () {
        return ftmp_;
      }, set: function (v) {
        ftmp_ = v;
      }});
    fl = $impl.ToSingle(ftmp);
    fl_ = $impl.ToSingle(ftmp_);
    if (fl_ === 0) throw pas.SysUtils.EDivByZero.$create("Create$1",["Division by Zero"]);
    fl = fl / fl_;
    ftmp = $impl.ToTFloat(fl);
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.Frac = function (valType, a) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    if (!(valType in pas.Common.RealTypes)) throw pas.SysUtils.EAssertionFailed.$create("Create");
    if (valType in rtl.createSet(144,143)) {
      ftmp = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl = pas.System.Frac(fl);
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } else {
      if (a < 0) {
        Result = -(Math.abs(a) & 0xff)}
       else Result = a & 0xff;
    };
    return Result;
  };
  this.Trunc = function (valType, a) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    if (!(valType in pas.Common.RealTypes)) throw pas.SysUtils.EAssertionFailed.$create("Create");
    if (valType in rtl.createSet(144,143)) {
      ftmp = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl = pas.System.Int(fl);
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
    } else {
      if (a < 0) {
        Result = -(Math.abs(a) & 0xffffffffffffff00)}
       else Result = a & 0xffffffffffffff00;
    };
    return Result;
  };
  $mod.$implcode = function () {
    $impl.TWOPOWERFRACBITS = 256;
    $impl.Zero = function () {
      var Result = rtl.arraySetLength(null,0,2);
      Result = rtl.arraySetLength(null,0,2);
      return Result;
    };
    $impl.ToTFloat = function (s) {
      var Result = rtl.arraySetLength(null,0,2);
      Result[0] = Math.round(s * 256);
      return Result;
    };
    $impl.ToSingle = function (ftmp) {
      var Result = 0.0;
      Result = 0;
      return Result;
    };
    $impl.MoveTFloat = function (ConstVal, ftmp) {
    };
    $impl.MoveTFloat$1 = function (ftmp, ConstVal) {
    };
    $impl.CardToHalf32 = function (src) {
      var Result = 0;
      return Result;
    };
    $impl.CardToHalf = function (ftmp) {
      var Result = 0;
      var Value = 0;
      Value = ftmp[1];
      Result = $impl.CardToHalf32(Value);
      return Result;
    };
  };
},["Common","SysUtils"]);
rtl.module("Scanner",["System","StringUtilities","CommonTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TokenizeProgram = function (UsesOn) {
    var Text = "";
    var Num = "";
    var Frac = "";
    var OldNumTok = 0;
    var UnitIndex = 0;
    var IncludeIndex = 0;
    var Line = 0;
    var Err = 0;
    var cnt = 0;
    var Line2 = 0;
    var Spaces = 0;
    var TextPos = 0;
    var im = 0;
    var OldNumDefines = 0;
    var Tmp = 0;
    var AsmFound = false;
    var UsesFound = false;
    var UnitFound = false;
    var ExternalFound = false;
    var yes = false;
    var ch = "\x00";
    var ch2 = "\x00";
    var ch_ = "\x00";
    var CurToken = 0;
    var StrParams = [];
    function Tokenize(fnam, testUnit) {
      var InFile = null;
      var _line = 0;
      var _uidx = 0;
      function ReadUses() {
        var i = 0;
        var j = 0;
        var k = 0;
        var _line = 0;
        var _uidx = 0;
        var s = "";
        var nam = "";
        var $ir = rtl.createIntfRefs();
        try {
          UsesFound = false;
          i = pas.Common.NumTok - 1;
          while (pas.Common.Tok[i].Kind !== 29) {
            if (pas.Common.Tok[i].Kind === 174) {
              pas.Common.CheckTok(i - 1,114);
              pas.Common.CheckTok(i - 2,170);
              nam = "";
              for (var $l = 1, $end = pas.Common.Tok[i].StrLength; $l <= $end; $l++) {
                k = $l;
                nam = nam + String.fromCharCode(pas.Common.StaticStringData[(pas.Common.Tok[i].StrAddress - 256) + k]);
              };
              nam = pas.Common.FindFile(nam,"unit");
              i -= 2;
            } else {
              pas.Common.CheckTok(i,170);
              nam = pas.Common.FindFile(pas.Common.Tok[i].Name + ".pas","unit");
            };
            s = pas.Utilities.AnsiUpperCase(pas.Common.Tok[i].Name);
            for (var $l1 = 2, $end1 = pas.Common.NumUnits; $l1 <= $end1; $l1++) {
              j = $l1;
              if (pas.Common.UnitName[j - 1].Name === s) pas.Common.UnitName[j - 1].Name = "";
            };
            _line = Line;
            _uidx = UnitIndex;
            pas.Common.NumUnits += 1;
            UnitIndex = pas.Common.NumUnits;
            if (UnitIndex > 4096) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, UnitIndex: " + pas.Common.IntToStr(UnitIndex),"",""]),pas.Messages.IMessage)));
            Line = 1;
            pas.Common.UnitName[UnitIndex - 1].Name = s;
            pas.Common.UnitName[UnitIndex - 1].Path = nam;
            TokenizeUnit(UnitIndex,true);
            Line = _line;
            UnitIndex = _uidx;
            if (pas.Common.Tok[i - 1].Kind === 52) {
              i -= 2}
             else i -= 1;
          };
        } finally {
          $ir.free();
        };
      };
      function RemoveDefine(X) {
        var i = 0;
        i = pas.Common.SearchDefine(X);
        if (i !== 0) {
          pas.Common.NumDefines -= 1;
          for (var $l = i, $end = pas.Common.NumDefines; $l <= $end; $l++) {
            i = $l;
            pas.Common.Defines[i - 1].$assign(pas.Common.Defines[(i + 1) - 1]);
          };
        };
      };
      function SkipCodeUntilDirective() {
        var Result = "";
        var c = "\x00";
        var i = 0;
        i = 1;
        Result = "";
        do {
          c = " ";
          InFile.Read({get: function () {
              return c;
            }, set: function (v) {
              c = v;
            }});
          if (c === pas.StringUtilities.LF) Line += 1;
          var $tmp = i;
          if ($tmp === 1) {
            var $tmp1 = c;
            if ($tmp1 === "(") {
              i = 2}
             else if ($tmp1 === "{") i = 5;
          } else if ($tmp === 2) {
            if (c === "*") {
              i = 3}
             else i = 1}
           else if ($tmp === 3) {
            if (c === "*") i = 4}
           else if ($tmp === 4) {
            if (c === ")") {
              i = 1}
             else i = 3}
           else if ($tmp === 5) {
            if (c === "$") {
              i = 6}
             else {
              i = 0 + 1;
              Result = "";
            }}
           else if ($tmp === 6) {
            if (pas.System.upcase(c).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars) {
              Result = pas.System.upcase(c);
              i = 7;
            } else {
              i = 0 + 1;
              Result = "";
            }}
           else if ($tmp === 7) {
            if (pas.System.upcase(c).charCodeAt() in pas.StringUtilities.AllowLabelChars) {
              Result = Result + pas.System.upcase(c)}
             else if (c === "}") {
              i = 9}
             else i = 8}
           else if ($tmp === 8) if (c === "}") i = 9;
        } while (!(i === 9));
        return Result;
      };
      function SkipCodeUntilElseEndif() {
        var Result = false;
        var dir = "";
        var lvl = 0;
        lvl = 0;
        do {
          dir = SkipCodeUntilDirective();
          if (dir === "ENDIF") {
            lvl -= 1;
            if (lvl < 0) return false;
          } else if ((lvl === 0) && (dir === "ELSE")) {
            return true}
           else if (dir === "IFDEF") {
            lvl += 1}
           else if (dir === "IFNDEF") lvl += 1;
        } while (!false);
        return Result;
      };
      function ReadDirective(d, DefineLine) {
        var i = 0;
        var v = 0;
        var x = 0;
        var cmd = "";
        var s = "";
        var nam = "";
        var found = false;
        var Param = rtl.arraySetLength(null,"",8);
        function bin2csv(fn) {
          var bin = null;
          var tmp = 0;
          var NumRead = 0;
          var yes = false;
          try {
            yes = false;
            tmp = 0;
            NumRead = 0;
            bin = rtl.setIntfL(bin,pas.FileIO.TFileSystem.CreateBinaryFile(),true);
            bin.Assign(fn);
            bin.Reset$1(1);
            do {
              bin.BlockRead({get: function () {
                  return tmp;
                }, set: function (v) {
                  tmp = v;
                }},1,{get: function () {
                  return NumRead;
                }, set: function (v) {
                  NumRead = v;
                }});
              if (NumRead === 1) {
                if (yes) $mod.AddToken($impl.GetStandardToken(","),UnitIndex,Line,1,0);
                $mod.AddToken(171,UnitIndex,Line,1,tmp);
                yes = true;
              };
            } while (!(NumRead === 0));
            bin.Close();
          } finally {
            rtl._Release(bin);
          };
        };
        function skip_spaces() {
          while (d.charCodeAt(i - 1) in pas.StringUtilities.AllowWhiteSpaces) {
            if (d.charAt(i - 1) === pas.StringUtilities.LF) DefineLine += 1;
            i += 1;
          };
        };
        function newMsgUser(Kind) {
          var k = 0;
          k = rtl.length(pas.Common.msgUser) - 1;
          $mod.AddToken(Kind,UnitIndex,Line,1,k);
          $mod.AddToken(53,UnitIndex,Line,1,0);
          pas.StringUtilities.SkipWhitespaces(d,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }});
          pas.Common.msgUser[k] = pas.System.Copy(d,i,d.length - i);
          pas.Common.msgUser = rtl.arraySetLength(pas.Common.msgUser,"",k + 2);
        };
        var $ir = rtl.createIntfRefs();
        try {
          Param = rtl.arraySetLength(null,"",8);
          if (pas.System.upcase(d.charAt(0)).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars) {
            i = 1;
            cmd = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }});
            if (cmd === "INCLUDE") cmd = "I";
            if (cmd === "RESOURCE") cmd = "R";
            if (cmd === "WARNING") {
              newMsgUser(193)}
             else if (cmd === "ERROR") {
              newMsgUser(194)}
             else if (cmd === "INFO") {
              newMsgUser(192)}
             else if (cmd === "MACRO+") {
              pas.Common.Macros = true}
             else if (cmd === "MACRO-") {
              pas.Common.Macros = false}
             else if (cmd === "MACRO") {
              s = pas.StringUtilities.GetStringUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              if (s === "ON") {
                pas.Common.Macros = true}
               else if (s === "OFF") {
                pas.Common.Macros = false}
               else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongSwitchToggle,"Wrong switch toggle, use ON/OFF or +/-","",""]),pas.Messages.IMessage)));
            } else if (cmd === "I") {
              if (d.charAt(i - 1) === "+") {
                $mod.AddToken(197,UnitIndex,Line,1,0);
                $mod.AddToken(53,UnitIndex,Line,1,0);
              } else if (d.charAt(i - 1) === "-") {
                $mod.AddToken(198,UnitIndex,Line,1,0);
                $mod.AddToken(53,UnitIndex,Line,1,0);
              } else {
                s = pas.StringUtilities.GetString(d,false,{get: function () {
                    return i;
                  }, set: function (v) {
                    i = v;
                  }});
                if (pas.Utilities.AnsiUpperCase(s) === "%TIME%") {
                  s = pas.SysUtils.TimeToStr(pas.SysUtils.Now());
                  $mod.AddToken(174,UnitIndex,Line,s.length + Spaces,0);
                  Spaces = 0;
                  pas.Common.DefineStaticString(pas.Common.NumTok,s);
                } else if (pas.Utilities.AnsiUpperCase(s) === "%DATE%") {
                  s = pas.SysUtils.DateToStr(pas.SysUtils.Now());
                  $mod.AddToken(174,UnitIndex,Line,s.length + Spaces,0);
                  Spaces = 0;
                  pas.Common.DefineStaticString(pas.Common.NumTok,s);
                } else {
                  nam = pas.Common.FindFile(s,"include");
                  _line = Line;
                  _uidx = UnitIndex;
                  Line = 1;
                  pas.Common.UnitName[IncludeIndex - 1].Name = pas.SysUtils.ExtractFileName(nam);
                  pas.Common.UnitName[IncludeIndex - 1].Path = nam;
                  UnitIndex = IncludeIndex;
                  IncludeIndex += 1;
                  if (IncludeIndex > 4096) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, IncludeIndex: " + pas.Common.IntToStr(IncludeIndex),"",""]),pas.Messages.IMessage)));
                  Tokenize(nam,false);
                  Line = _line;
                  UnitIndex = _uidx;
                };
              };
            } else if (cmd === "EVAL") {
              if (pas.SysUtils.TStringHelper.LastIndexOf.call({get: function () {
                  return d;
                }, set: function (v) {
                  d = v;
                }},"}") < 0) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error. Character '}' expected","",""]),pas.Messages.IMessage)));
              s = pas.System.Copy(d,i,(pas.SysUtils.TStringHelper.LastIndexOf.call({get: function () {
                  return d;
                }, set: function (v) {
                  d = v;
                }},"}") - i) + 1);
              s = pas.SysUtils.TrimRight(s);
              if (s.charAt(s.length - 1) !== '"') pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,'Syntax error. Missing \'"\'',"",""]),pas.Messages.IMessage)));
              $mod.AddToken(184,UnitIndex,Line,1,0);
              pas.Common.DefineFilename(pas.Common.NumTok,s);
            } else if (cmd === "BIN2CSV") {
              s = pas.StringUtilities.GetFilePath(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              s = pas.Common.FindFile(s,"BIN2CSV");
              bin2csv(s);
            } else if (cmd === "OPTIMIZATION") {
              s = pas.StringUtilities.GetStringUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              if (s === "LOOPUNROLL") {
                $mod.AddToken(185,UnitIndex,Line,1,0)}
               else if (s === "NOLOOPUNROLL") {
                $mod.AddToken(186,UnitIndex,Line,1,0)}
               else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalOptimizationSpecified,'Illegal optimization specified "' + s + '"',"",""]),pas.Messages.IMessage)));
              $mod.AddToken(53,UnitIndex,Line,1,0);
            } else if (cmd === "CODEALIGN") {
              s = pas.StringUtilities.GetStringUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              if (s === "PROC") {
                $mod.AddToken(189,UnitIndex,Line,1,0)}
               else if (s === "LOOP") {
                $mod.AddToken(190,UnitIndex,Line,1,0)}
               else if (s === "LINK") {
                $mod.AddToken(191,UnitIndex,Line,1,0)}
               else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalAlignmentDirective,"Illegal alignment directive '" + s + "'.","",""]),pas.Messages.IMessage)));
              pas.StringUtilities.SkipWhitespaces(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              if (d.charAt(i - 1) !== "=") pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Character '=' expected.","",""]),pas.Messages.IMessage)));
              i += 1;
              pas.StringUtilities.SkipWhitespaces(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              s = pas.StringUtilities.GetNumber(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              pas.System.val$6(s,{get: function () {
                  return v;
                }, set: function (w) {
                  v = w;
                }},{get: function () {
                  return Err;
                }, set: function (v) {
                  Err = v;
                }});
              if (Err > 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok);
              pas.Common.GetCommonConstType(pas.Common.NumTok,129,pas.Common.GetValueType(v),true);
              pas.Common.Tok[pas.Common.NumTok].Value = v;
              $mod.AddToken(53,UnitIndex,Line,1,0);
            } else if (cmd === "UNITPATH") {
              $mod.AddToken(53,UnitIndex,Line,1,0);
              do {
                s = pas.StringUtilities.GetFilePath(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    i = v;
                  }});
                if (s === "") pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FilePathNotSpecified,"An empty path cannot be used","",""]),pas.Messages.IMessage)));
                pas.Common.AddPath(s);
                if (d.charAt(i - 1) === ";") {
                  i += 1}
                 else break;
              } while (!(d.charAt(i - 1) === ";"));
              pas.Common.NumTok -= 1;
            } else if (cmd === "LIBRARYPATH") {
              $mod.AddToken(53,UnitIndex,Line,1,0);
              do {
                s = pas.StringUtilities.GetFilePath(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    i = v;
                  }});
                if (s === "") pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FilePathNotSpecified,"An empty path cannot be used","",""]),pas.Messages.IMessage)));
                pas.Common.AddPath(s);
                if (d.charAt(i - 1) === ";") {
                  i += 1}
                 else break;
              } while (!(d.charAt(i - 1) === ";"));
              pas.Common.NumTok -= 1;
            } else if ((cmd === "R") && !(d.charCodeAt(i - 1) in rtl.createSet(43,45))) {
              $mod.AddToken(53,UnitIndex,Line,1,0);
              s = pas.StringUtilities.GetFilePath(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              $impl.AddResource(pas.Common.FindFile(s,"resource"));
              pas.Common.NumTok -= 1;
            } else if ((cmd === "L") || (cmd === "LINK")) {
              $mod.AddToken(187,UnitIndex,Line,1,0);
              s = pas.StringUtilities.GetFilePath(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              s = pas.Common.FindFile(s,"link object");
              pas.Common.DefineFilename(pas.Common.NumTok,s);
              $mod.AddToken(53,UnitIndex,Line,1,0);
            } else if ((cmd === "F") || (cmd === "FASTMUL")) {
              $mod.AddToken(53,UnitIndex,Line,1,0);
              s = pas.StringUtilities.GetNumber(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              pas.System.val$6(s,{p: pas.Common, get: function () {
                  return this.p.FastMul;
                }, set: function (v) {
                  this.p.FastMul = v;
                }},{get: function () {
                  return Err;
                }, set: function (v) {
                  Err = v;
                }});
              if (Err !== 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok);
              pas.Common.AddDefine("FASTMUL");
              pas.Common.AddDefines = pas.Common.NumDefines;
              pas.Common.GetCommonConstType(pas.Common.NumTok,128,pas.Common.GetValueType(pas.Common.FastMul),true);
              pas.Common.NumTok -= 1;
            } else if ((cmd === "IFDEF") || (cmd === "IFNDEF")) {
              found = 0 !== pas.Common.SearchDefine(pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }}));
              if (cmd === "IFNDEF") found = !found;
              if (!found) {
                if (SkipCodeUntilElseEndif()) pas.Common.IfdefLevel += 1;
              } else pas.Common.IfdefLevel += 1;
            } else if (cmd === "ELSE") {
              if ((pas.Common.IfdefLevel === 0) || SkipCodeUntilElseEndif()) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ElseWithoutIf,"Found $ELSE without $IFXXX","",""]),pas.Messages.IMessage)));
              if (pas.Common.IfdefLevel > 0) pas.Common.IfdefLevel -= 1;
            } else if (cmd === "ENDIF") {
              if (pas.Common.IfdefLevel === 0) {
                pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.EndifWithoutIf,"Found $ENDIF without $IFXXX","",""]),pas.Messages.IMessage)))}
               else pas.Common.IfdefLevel -= 1;
            } else if (cmd === "DEFINE") {
              nam = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              Err = 0;
              skip_spaces();
              if (d.charAt(i - 1) === "(") {
                Param[0] = "";
                Param[1] = "";
                Param[2] = "";
                Param[3] = "";
                Param[4] = "";
                Param[5] = "";
                Param[6] = "";
                Param[7] = "";
                i += 1;
                skip_spaces();
                pas.Common.Tok[pas.Common.NumTok].Line = Line;
                if (!(pas.System.upcase(d.charAt(i - 1)).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars)) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error, 'identifier' expected","",""]),pas.Messages.IMessage)));
                do {
                  Err += 1;
                  if (Err > 8) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(13,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TooManyFormalParameters,"Too many formal parameters in " + nam,"",""]),pas.Messages.IMessage)));
                  Param[Err - 1] = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                      return i;
                    }, set: function (v) {
                      i = v;
                    }});
                  for (var $l = 1, $end = Err - 1; $l <= $end; $l++) {
                    x = $l;
                    if (Param[x - 1] === Param[Err - 1]) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(14,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DuplicateIdentifier,"Duplicate identifier '" + Param[Err - 1] + "'","",""]),pas.Messages.IMessage)));
                  };
                  skip_spaces();
                  if (d.charAt(i - 1) === ",") {
                    i += 1;
                    skip_spaces();
                    if (!(pas.System.upcase(d.charAt(i - 1)).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars)) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(15,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierExpected,"Syntax error, 'identifier' expected","",""]),pas.Messages.IMessage)));
                  };
                } while (!(d.charAt(i - 1) === ")"));
                i += 1;
                skip_spaces();
              };
              if ((d.charAt(i - 1) === ":") && (d.charAt((i + 1) - 1) === "=")) {
                i += 2;
                skip_spaces();
                pas.Common.AddDefine(nam);
                s = pas.System.Copy(d,i,d.length);
                s = rtl.strSetLength(s,s.length - 1);
                pas.Common.Defines[pas.Common.NumDefines - 1].Macro = s;
                pas.Common.Defines[pas.Common.NumDefines - 1].Line = DefineLine;
                if (Err > 0) pas.Common.Defines[pas.Common.NumDefines - 1].Param = Param.slice(0);
              } else pas.Common.AddDefine(nam);
            } else if (cmd === "UNDEF") {
              nam = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              RemoveDefine(nam);
            } else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(16,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalCompilerDirective,"Illegal compiler directive $" + cmd + d.charAt(i - 1),"",""]),pas.Messages.IMessage)));
          };
        } finally {
          $ir.free();
        };
      };
      function ReadSingleLineComment() {
        while (ch !== pas.StringUtilities.LF) InFile.Read({get: function () {
            return ch;
          }, set: function (v) {
            ch = v;
          }});
      };
      function ReadChar(c) {
        var c2 = "\x00";
        var dir = false;
        var directive = "";
        var _line = 0;
        InFile.Read(c);
        if (c.get() === "(") {
          c2 = " ";
          InFile.Read({get: function () {
              return c2;
            }, set: function (v) {
              c2 = v;
            }});
          if (c2 === "*") {
            do {
              c2 = c.get();
              InFile.Read(c);
              if (c.get() === pas.StringUtilities.LF) Line += 1;
            } while (!((c2 === "*") && (c.get() === ")")));
            InFile.Read(c);
          } else InFile.Seek2(InFile.FilePos() - 1);
        };
        if (c.get() === "{") {
          dir = false;
          directive = "";
          _line = Line;
          InFile.Read({get: function () {
              return c2;
            }, set: function (v) {
              c2 = v;
            }});
          if (c2 === "$") {
            dir = true}
           else InFile.Seek2(InFile.FilePos() - 1);
          do {
            InFile.Read(c);
            if (dir) directive = directive + c.get();
            if (c.get() !== "}") if (AsmFound) $impl.SaveAsmBlock(c.get());
            if (c.get() === pas.StringUtilities.LF) Line += 1;
          } while (!(c.get() === "}"));
          if (dir) ReadDirective(directive,_line);
          InFile.Read(c);
        } else if (c.get() === "/") {
          InFile.Read({get: function () {
              return c2;
            }, set: function (v) {
              c2 = v;
            }});
          if (c2 === "/") {
            ReadSingleLineComment()}
           else InFile.Seek2(InFile.FilePos() - 1);
        };
        if (c.get() === pas.StringUtilities.LF) Line += 1;
      };
      function ReadParameters() {
        var Result = "";
        var opn = 0;
        Result = "(";
        opn = 1;
        while (true) {
          ReadChar({get: function () {
              return ch;
            }, set: function (v) {
              ch = v;
            }});
          if (ch === pas.StringUtilities.LF) Line += 1;
          if (ch === "(") opn += 1;
          if (ch === ")") opn -= 1;
          if (!(ch.charCodeAt() in rtl.createSet(pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) Result = Result + ch;
          if ((Result.length > 255) || (opn === 0)) break;
        };
        if (ch === ")") ReadChar({get: function () {
            return ch;
          }, set: function (v) {
            ch = v;
          }});
        return Result;
      };
      function SafeReadChar(c) {
        var $ir = rtl.createIntfRefs();
        try {
          ReadChar(c);
          c.set(pas.System.upcase(c.get()));
          if (c.get().charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) Spaces += 1;
          if (!(c.get().charCodeAt() in rtl.createSet(39,32,35,126,36,pas.StringUtilities.TAB.charCodeAt(),pas.StringUtilities.LF.charCodeAt(),pas.StringUtilities.CR.charCodeAt(),123,null,65,90,95,null,48,57,61,46,44,59,40,41,42,47,43,45,58,62,60,94,64,91,93))) {
            pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Unexpected unknown character: " + c.get(),"",""]),pas.Messages.IMessage)));
          };
        } finally {
          $ir.free();
        };
      };
      function SkipWhiteSpace() {
        var $ir = rtl.createIntfRefs();
        try {
          SafeReadChar({get: function () {
              return ch;
            }, set: function (v) {
              ch = v;
            }});
          while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) SafeReadChar({get: function () {
              return ch;
            }, set: function (v) {
              ch = v;
            }});
          if (!(ch.charCodeAt() in rtl.createSet(39,35))) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error, 'string' expected but '" + ch + "' found","",""]),pas.Messages.IMessage)));
        } finally {
          $ir.free();
        };
      };
      function TextInvers(p) {
        var i = 0;
        for (var $l = p, $end = Text.length; $l <= $end; $l++) {
          i = $l;
          if (Text.charCodeAt(i - 1) < 128) Text = rtl.setCharAt(Text,i - 1,String.fromCharCode(Text.charCodeAt(i - 1) + 0x80));
        };
      };
      function TextInternal(p) {
        var i = 0;
        function ata2int(a) {
          var Result = 0;
          Result = a;
          var $tmp = a & 0x7f;
          if (($tmp >= 0) && ($tmp <= 31)) {
            Result += 64}
           else if (($tmp >= 32) && ($tmp <= 95)) Result -= 32;
          return Result;
        };
        function cbm(a) {
          var Result = 0;
          Result = a.charCodeAt();
          var $tmp = a;
          if (($tmp >= "a") && ($tmp <= "z")) {
            Result -= 96}
           else if (($tmp >= "[") && ($tmp <= "_")) {
            Result -= 64}
           else if ($tmp === "`") {
            Result = 64}
           else if ($tmp === "@") Result = 0;
          return Result;
        };
        if (pas.Common.target.id === pas.Common.TComputer.A8) {
          for (var $l = p, $end = Text.length; $l <= $end; $l++) {
            i = $l;
            Text = rtl.setCharAt(Text,i - 1,String.fromCharCode(ata2int(Text.charCodeAt(i - 1))));
          };
        } else {
          for (var $l1 = p, $end1 = Text.length; $l1 <= $end1; $l1++) {
            i = $l1;
            Text = rtl.setCharAt(Text,i - 1,String.fromCharCode(cbm(Text.charAt(i - 1))));
          };
        };
      };
      function ReadNumber() {
        if (ch === "%") {
          SafeReadChar({get: function () {
              return ch;
            }, set: function (v) {
              ch = v;
            }});
          while (ch.charCodeAt() in rtl.createSet(48,49)) {
            Num = Num + ch;
            SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                ch = v;
              }});
          };
          if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok);
          Num = "%" + Num;
        } else if (ch === "$") {
          SafeReadChar({get: function () {
              return ch;
            }, set: function (v) {
              ch = v;
            }});
          while (ch.charCodeAt() in pas.StringUtilities.AllowDigitChars) {
            Num = Num + ch;
            SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                ch = v;
              }});
          };
          if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok);
          Num = "$" + Num;
        } else while (ch.charCodeAt() in rtl.createSet(null,48,57)) {
          Num = Num + ch;
          SafeReadChar({get: function () {
              return ch;
            }, set: function (v) {
              ch = v;
            }});
        };
      };
      var $ir = rtl.createIntfRefs();
      try {
        InFile = rtl.setIntfL(InFile,pas.FileIO.TFileSystem.CreateBinaryFile(),true);
        InFile.Assign(fnam);
        InFile.Reset$1(1);
        Text = "";
        try {
          while (true) {
            OldNumTok = pas.Common.NumTok;
            do {
              ReadChar({get: function () {
                  return ch;
                }, set: function (v) {
                  ch = v;
                }});
              if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) Spaces += 1;
            } while (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt(),pas.StringUtilities.LF.charCodeAt(),pas.StringUtilities.CR.charCodeAt(),123));
            ch = pas.System.upcase(ch);
            Num = "";
            if (ch.charCodeAt() in rtl.createSet(null,48,57,36,37)) ReadNumber();
            if (Num.length > 0) {
              $mod.AddToken(171,UnitIndex,Line,Num.length + Spaces,pas.Common.StrToInt(Num));
              Spaces = 0;
              if (ch === ".") {
                SafeReadChar({get: function () {
                    return ch;
                  }, set: function (v) {
                    ch = v;
                  }});
                if (ch === ".") {
                  InFile.Seek2(InFile.FilePos() - 1)}
                 else {
                  Frac = ".";
                  while (ch.charCodeAt() in rtl.createSet(null,48,57)) {
                    Frac = Frac + ch;
                    SafeReadChar({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                  };
                  pas.Common.Tok[pas.Common.NumTok].Kind = 172;
                  if (Num.length > 17) {
                    pas.Common.Tok[pas.Common.NumTok].FracValue = 0}
                   else pas.Common.Tok[pas.Common.NumTok].FracValue = pas.SysUtils.StrToFloat(Num + Frac);
                  pas.Common.Tok[pas.Common.NumTok].Column = pas.Common.Tok[pas.Common.NumTok - 1].Column + Num.length + Frac.length + Spaces;
                  Spaces = 0;
                };
              };
              Num = "";
              Frac = "";
            };
            if (ch.charCodeAt() in rtl.createSet(null,65,90,95)) {
              Text = "";
              Err = 0;
              do {
                Text = Text + ch;
                ch2 = ch;
                SafeReadChar({get: function () {
                    return ch;
                  }, set: function (v) {
                    ch = v;
                  }});
                if ((ch === ".") && (ch2 === ".")) {
                  ch = "\x00";
                  break;
                };
                Err += 1;
              } while (ch.charCodeAt() in rtl.createSet(null,65,90,95,null,48,57,46));
              if (Text.charAt(Text.length - 1) === ".") {
                Text = rtl.strSetLength(Text,Text.length - 1);
                InFile.Seek2(InFile.FilePos() - 2);
                Err -= 1;
              };
              if (Err > 255) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantStringTooLong,"Constant strings can't be longer than 255 chars","",""]),pas.Messages.IMessage)));
              if (Text.length > 0) {
                CurToken = $impl.GetStandardToken(Text);
                im = pas.Common.SearchDefine(Text);
                if ((im > 0) && (pas.Common.Defines[im - 1].Macro !== "")) {
                  Tmp = InFile.FilePos();
                  ch2 = ch;
                  Num = "";
                  if (pas.Common.Defines[im - 1].Param[0] !== "") {
                    while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) ReadChar({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                    if (ch === "(") Num = ReadParameters();
                  };
                  StrParams = rtl.arraySetLength(StrParams,"",1);
                  StrParams[0] = "";
                  pas.Common.Tok[pas.Common.NumTok].Line = Line;
                  if (Num === "") {
                    InFile.Seek2(Tmp);
                    ch = ch2;
                  } else {
                    StrParams = pas.StringUtilities.SplitStr(pas.System.Copy(Num,2,Num.length - 2),",");
                    if ((rtl.length(StrParams) - 1) > 8) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TooManyFormalParameters,"Too many formal parameters in " + Text,"",""]),pas.Messages.IMessage)));
                  };
                  if ((StrParams[0] !== "") && (pas.Common.Defines[im - 1].Param[0] === "")) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters","",""]),pas.Messages.IMessage)));
                  OldNumDefines = pas.Common.NumDefines;
                  Err = 1;
                  while ((pas.Common.Defines[im - 1].Param[Err - 1] !== "") && (Err <= 8)) {
                    if (StrParams[Err - 1] === "") pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ParameterMissing,"Parameter missing","",""]),pas.Messages.IMessage)));
                    pas.Common.AddDefine(pas.Common.Defines[im - 1].Param[Err - 1]);
                    pas.Common.Defines[pas.Common.NumDefines - 1].Macro = StrParams[Err - 1];
                    pas.Common.Defines[pas.Common.NumDefines - 1].Line = Line;
                    Err += 1;
                  };
                  $mod.TokenizeMacro(pas.Common.Defines[im - 1].Macro,pas.Common.Defines[im - 1].Line,0);
                  pas.Common.NumDefines = OldNumDefines;
                  CurToken = 188;
                } else {
                  if (CurToken === 153) CurToken = 148;
                  if (CurToken === 151) CurToken = 143;
                  if (CurToken === 152) CurToken = 144;
                  if (CurToken === 150) CurToken = 32;
                  if (CurToken === 95) ExternalFound = true;
                  $mod.AddToken(0,UnitIndex,Line,Text.length + Spaces,0);
                  Spaces = 0;
                };
                if (CurToken === 37) {
                  pas.Common.Tok[pas.Common.NumTok].Kind = CurToken;
                  pas.Common.Tok[pas.Common.NumTok].Value = 0;
                  Tmp = InFile.FilePos();
                  _line = Line;
                  do {
                    InFile.Read({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                    if (ch === pas.StringUtilities.LF) Line += 1;
                  } while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces);
                  if (ch !== "{") {
                    Line = _line;
                    pas.Common.Tok[pas.Common.NumTok].Value = 1;
                    InFile.Seek2(Tmp - 1);
                    InFile.Read({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                    pas.Common.AsmBlock[pas.Common.AsmBlockIndex] = "";
                    Text = "";
                    while (true) {
                      InFile.Read({get: function () {
                          return ch;
                        }, set: function (v) {
                          ch = v;
                        }});
                      $impl.SaveAsmBlock(ch);
                      Text = Text + pas.SysUtils.UpperCase(ch);
                      if (pas.System.Pos("END;",Text) > 0) {
                        pas.Common.AsmBlock[pas.Common.AsmBlockIndex] = rtl.strSetLength(pas.Common.AsmBlock[pas.Common.AsmBlockIndex],pas.Common.AsmBlock[pas.Common.AsmBlockIndex].length - 4);
                        break;
                      };
                      if (ch.charCodeAt() in rtl.createSet(pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt())) {
                        if (ch === pas.StringUtilities.LF) Line += 1;
                        Text = "";
                      };
                    };
                  } else {
                    InFile.Seek2(InFile.FilePos() - 1);
                    AsmFound = true;
                    do {
                      ReadChar({get: function () {
                          return ch;
                        }, set: function (v) {
                          ch = v;
                        }});
                      if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) Spaces += 1;
                    } while (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt(),pas.StringUtilities.LF.charCodeAt(),pas.StringUtilities.CR.charCodeAt(),123,125));
                    AsmFound = false;
                  };
                  pas.Common.AsmBlockIndex += 1;
                  if (pas.Common.AsmBlockIndex > 4095) {
                    pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, ASMBLOCK","",""]),pas.Messages.IMessage)));
                    pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
                  };
                } else {
                  if (CurToken !== 188) if (CurToken !== 0) {
                    pas.Common.Tok[pas.Common.NumTok].Kind = CurToken;
                    if (CurToken === 29) UsesFound = true;
                    if (CurToken === 7) UnitFound = true;
                    if (testUnit && (UnitFound === false)) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnitExpected,'"UNIT" expected but "' + pas.Common.TokenSpelling[CurToken - 1] + '" found',"",""]),pas.Messages.IMessage)));
                  } else {
                    pas.Common.Tok[pas.Common.NumTok].Kind = 170;
                    pas.Common.Tok[pas.Common.NumTok].Name = Text;
                  };
                };
                Text = "";
              };
            };
            if (ch.charCodeAt() in rtl.createSet(39,35)) {
              Text = "";
              yes = true;
              do {
                var $tmp = ch;
                if ($tmp === "'") {
                  if (yes) {
                    TextPos = Text.length + 1;
                    yes = false;
                  };
                  Spaces += 1;
                  do {
                    InFile.Read({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                    if (ch === pas.StringUtilities.LF) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.StringExceedsLine,"String exceeds line","",""]),pas.Messages.IMessage)));
                    if (!(ch.charCodeAt() in rtl.createSet(39,pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) {
                      Text = Text + ch}
                     else {
                      InFile.Read({get: function () {
                          return ch2;
                        }, set: function (v) {
                          ch2 = v;
                        }});
                      if (ch2 === "'") {
                        Text = Text + "'";
                        ch = "\x00";
                      } else InFile.Seek2(InFile.FilePos() - 1);
                    };
                  } while (!(ch === "'"));
                  Spaces += 1;
                  SafeReadChar({get: function () {
                      return ch;
                    }, set: function (v) {
                      ch = v;
                    }});
                  if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                    ch2 = ch;
                    Err = InFile.FilePos();
                    while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) InFile.Read({get: function () {
                        return ch2;
                      }, set: function (v) {
                        ch2 = v;
                      }});
                    if (ch2.charCodeAt() in rtl.createSet(42,126,43)) {
                      ch = ch2}
                     else InFile.Seek2(Err);
                  };
                  if (ch === "*") {
                    Spaces += 1;
                    TextInvers(TextPos);
                    SafeReadChar({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                  };
                  if (ch === "~") {
                    Spaces += 1;
                    TextInternal(TextPos);
                    SafeReadChar({get: function () {
                        return ch;
                      }, set: function (v) {
                        ch = v;
                      }});
                    if (ch === "*") {
                      Spaces += 1;
                      TextInvers(TextPos);
                      SafeReadChar({get: function () {
                          return ch;
                        }, set: function (v) {
                          ch = v;
                        }});
                    };
                  };
                  if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                    ch2 = ch;
                    Err = InFile.FilePos();
                    while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) InFile.Read({get: function () {
                        return ch2;
                      }, set: function (v) {
                        ch2 = v;
                      }});
                    if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                      ch = ch2}
                     else InFile.Seek2(Err);
                  };
                  if (ch === "+") {
                    yes = true;
                    Spaces += 1;
                    SkipWhiteSpace();
                  };
                } else if ($tmp === "#") {
                  SafeReadChar({get: function () {
                      return ch;
                    }, set: function (v) {
                      ch = v;
                    }});
                  Num = "";
                  ReadNumber();
                  if (Num.length > 0) {
                    Text = Text + String.fromCharCode(pas.Common.StrToInt(Num))}
                   else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantExpressionExpected,"Constant expression expected","",""]),pas.Messages.IMessage)));
                  if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                    ch2 = ch;
                    Err = InFile.FilePos();
                    while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) InFile.Read({get: function () {
                        return ch2;
                      }, set: function (v) {
                        ch2 = v;
                      }});
                    if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                      ch = ch2}
                     else InFile.Seek2(Err);
                  };
                  if (ch === "+") {
                    Spaces += 1;
                    SkipWhiteSpace();
                  };
                };
              } while (ch.charCodeAt() in rtl.createSet(35,39));
              var $tmp1 = ch;
              if ($tmp1 === "*") {
                TextInvers(TextPos);
                SafeReadChar({get: function () {
                    return ch;
                  }, set: function (v) {
                    ch = v;
                  }});
              } else if ($tmp1 === "~") {
                TextInternal(TextPos);
                SafeReadChar({get: function () {
                    return ch;
                  }, set: function (v) {
                    ch = v;
                  }});
              };
              if (Text.length === 1) {
                $mod.AddToken(173,UnitIndex,Line,1 + Spaces,Text.charCodeAt(1 - 1));
                Spaces = 0;
              } else {
                $mod.AddToken(174,UnitIndex,Line,Text.length + Spaces,0);
                Spaces = 0;
                if (ExternalFound) {
                  pas.Common.DefineFilename(pas.Common.NumTok,Text)}
                 else pas.Common.DefineStaticString(pas.Common.NumTok,Text);
              };
              Text = "";
            };
            if (ch.charCodeAt() in rtl.createSet(61,44,59,40,41,42,47,43,45,94,64,91,93)) {
              $mod.AddToken($impl.GetStandardToken(ch),UnitIndex,Line,1 + Spaces,0);
              Spaces = 0;
              ExternalFound = false;
              if (UsesFound && (ch === ";")) if (UsesOn) ReadUses();
            };
            if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
              ch_ = ch;
              Line2 = Line;
              SafeReadChar({get: function () {
                  return ch2;
                }, set: function (v) {
                  ch2 = v;
                }});
              ch = ch_;
              if ((ch2 === "=") || ((ch === "<") && (ch2 === ">")) || ((ch === ".") && (ch2 === "."))) {
                $mod.AddToken($impl.GetStandardToken(ch + ch2),UnitIndex,Line,2 + Spaces,0);
                Spaces = 0;
              } else if ((ch === ".") && (ch2.charCodeAt() in rtl.createSet(null,48,57))) {
                $mod.AddToken(171,UnitIndex,Line,0,0);
                Frac = "0.";
                while (ch2.charCodeAt() in rtl.createSet(null,48,57)) {
                  Frac = Frac + ch2;
                  SafeReadChar({get: function () {
                      return ch2;
                    }, set: function (v) {
                      ch2 = v;
                    }});
                };
                pas.Common.Tok[pas.Common.NumTok].Kind = 172;
                pas.Common.Tok[pas.Common.NumTok].FracValue = pas.SysUtils.StrToFloat(Frac);
                pas.Common.Tok[pas.Common.NumTok].Column = pas.Common.Tok[pas.Common.NumTok - 1].Column + Frac.length + Spaces;
                Spaces = 0;
                Frac = "";
                InFile.Seek2(InFile.FilePos() - 1);
              } else {
                InFile.Seek2(InFile.FilePos() - 1);
                Line = Line2;
                if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
                  $mod.AddToken($impl.GetStandardToken(ch),UnitIndex,Line,1 + Spaces,0);
                  Spaces = 0;
                } else {
                  pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Unexpected character '" + ch + "' found. Expected one of ':><.'.","",""]),pas.Messages.IMessage)));
                };
              };
            };
            if (pas.Common.NumTok === OldNumTok) {
              pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Illegal character '" + ch + "' ($" + pas.SysUtils.IntToHex(ch.charCodeAt(),2) + ")","",""]),pas.Messages.IMessage)));
            };
          };
        } catch ($e) {
          if (pas.Utilities.THaltException.isPrototypeOf($e)) {
            var e = $e;
            pas.Utilities.RaiseHaltException(e.GetExitCode());
          } else {
            if (Text !== "") {
              if (Text === "END.") {
                $mod.AddToken(14,UnitIndex,Line,3,0);
                $mod.AddToken(51,UnitIndex,Line,1,0);
              } else {
                $mod.AddToken($impl.GetStandardToken(Text),UnitIndex,Line,Text.length + Spaces,0);
                Spaces = 0;
              };
            };
          }
        };
        InFile.Close();
      } finally {
        $ir.free();
        rtl._Release(InFile);
      };
    };
    function TokenizeUnit(a, testUnit) {
      UnitIndex = a;
      Line = 1;
      Spaces = 0;
      if (UnitIndex > 1) $mod.AddToken(195,UnitIndex,Line,0,0);
      UnitFound = false;
      Tokenize(pas.Common.UnitName[UnitIndex - 1].Path,testUnit);
      if (UnitIndex > 1) {
        pas.Common.CheckTok(pas.Common.NumTok,51);
        pas.Common.CheckTok(pas.Common.NumTok - 1,14);
        pas.Common.NumTok -= 2;
        $mod.AddToken(196,UnitIndex,pas.Common.Tok[pas.Common.NumTok + 1].Line - 1,0,0);
      } else $mod.AddToken(199,UnitIndex,Line,0,0);
    };
    pas.Common.TokenSpelling[0] = "CONST";
    pas.Common.TokenSpelling[1] = "TYPE";
    pas.Common.TokenSpelling[2] = "VAR";
    pas.Common.TokenSpelling[3] = "PROCEDURE";
    pas.Common.TokenSpelling[4] = "FUNCTION";
    pas.Common.TokenSpelling[139] = "OBJECT";
    pas.Common.TokenSpelling[91] = "PROGRAM";
    pas.Common.TokenSpelling[92] = "LIBRARY";
    pas.Common.TokenSpelling[93] = "EXPORTS";
    pas.Common.TokenSpelling[94] = "EXTERNAL";
    pas.Common.TokenSpelling[6] = "UNIT";
    pas.Common.TokenSpelling[95] = "INTERFACE";
    pas.Common.TokenSpelling[96] = "IMPLEMENTATION";
    pas.Common.TokenSpelling[97] = "INITIALIZATION";
    pas.Common.TokenSpelling[98] = "CONSTRUCTOR";
    pas.Common.TokenSpelling[99] = "DESTRUCTOR";
    pas.Common.TokenSpelling[100] = "OVERLOAD";
    pas.Common.TokenSpelling[101] = "ASSEMBLER";
    pas.Common.TokenSpelling[102] = "FORWARD";
    pas.Common.TokenSpelling[103] = "REGISTER";
    pas.Common.TokenSpelling[104] = "INTERRUPT";
    pas.Common.TokenSpelling[105] = "PASCAL";
    pas.Common.TokenSpelling[106] = "STDCALL";
    pas.Common.TokenSpelling[107] = "INLINE";
    pas.Common.TokenSpelling[108] = "KEEP";
    pas.Common.TokenSpelling[72] = "ASSIGN";
    pas.Common.TokenSpelling[73] = "RESET";
    pas.Common.TokenSpelling[74] = "REWRITE";
    pas.Common.TokenSpelling[75] = "APPEND";
    pas.Common.TokenSpelling[76] = "BLOCKREAD";
    pas.Common.TokenSpelling[77] = "BLOCKWRITE";
    pas.Common.TokenSpelling[78] = "CLOSE";
    pas.Common.TokenSpelling[79] = "GETRESOURCEHANDLE";
    pas.Common.TokenSpelling[80] = "SIZEOFRESOURCE";
    pas.Common.TokenSpelling[137] = "FILE";
    pas.Common.TokenSpelling[147] = "TEXTFILE";
    pas.Common.TokenSpelling[126] = "SET";
    pas.Common.TokenSpelling[111] = "PACKED";
    pas.Common.TokenSpelling[114] = "VOLATILE";
    pas.Common.TokenSpelling[115] = "STRIPED";
    pas.Common.TokenSpelling[5] = "LABEL";
    pas.Common.TokenSpelling[112] = "GOTO";
    pas.Common.TokenSpelling[113] = "IN";
    pas.Common.TokenSpelling[138] = "RECORD";
    pas.Common.TokenSpelling[11] = "CASE";
    pas.Common.TokenSpelling[12] = "BEGIN";
    pas.Common.TokenSpelling[13] = "END";
    pas.Common.TokenSpelling[14] = "IF";
    pas.Common.TokenSpelling[15] = "THEN";
    pas.Common.TokenSpelling[16] = "ELSE";
    pas.Common.TokenSpelling[17] = "WHILE";
    pas.Common.TokenSpelling[18] = "DO";
    pas.Common.TokenSpelling[19] = "REPEAT";
    pas.Common.TokenSpelling[20] = "UNTIL";
    pas.Common.TokenSpelling[21] = "FOR";
    pas.Common.TokenSpelling[22] = "TO";
    pas.Common.TokenSpelling[23] = "DOWNTO";
    pas.Common.TokenSpelling[24] = ":=";
    pas.Common.TokenSpelling[25] = "WRITE";
    pas.Common.TokenSpelling[81] = "WRITELN";
    pas.Common.TokenSpelling[82] = "SIZEOF";
    pas.Common.TokenSpelling[83] = "LENGTH";
    pas.Common.TokenSpelling[84] = "HIGH";
    pas.Common.TokenSpelling[85] = "LOW";
    pas.Common.TokenSpelling[86] = "INT";
    pas.Common.TokenSpelling[87] = "FRAC";
    pas.Common.TokenSpelling[88] = "TRUNC";
    pas.Common.TokenSpelling[89] = "ROUND";
    pas.Common.TokenSpelling[90] = "ODD";
    pas.Common.TokenSpelling[26] = "READLN";
    pas.Common.TokenSpelling[27] = "HALT";
    pas.Common.TokenSpelling[38] = "BREAK";
    pas.Common.TokenSpelling[39] = "CONTINUE";
    pas.Common.TokenSpelling[40] = "EXIT";
    pas.Common.TokenSpelling[109] = "SUCC";
    pas.Common.TokenSpelling[110] = "PRED";
    pas.Common.TokenSpelling[32] = "INC";
    pas.Common.TokenSpelling[33] = "DEC";
    pas.Common.TokenSpelling[34] = "ORD";
    pas.Common.TokenSpelling[35] = "CHR";
    pas.Common.TokenSpelling[36] = "ASM";
    pas.Common.TokenSpelling[37] = "ABSOLUTE";
    pas.Common.TokenSpelling[28] = "USES";
    pas.Common.TokenSpelling[48] = "LO";
    pas.Common.TokenSpelling[49] = "HI";
    pas.Common.TokenSpelling[9] = "GETINTVEC";
    pas.Common.TokenSpelling[10] = "SETINTVEC";
    pas.Common.TokenSpelling[29] = "ARRAY";
    pas.Common.TokenSpelling[30] = "OF";
    pas.Common.TokenSpelling[31] = "STRING";
    pas.Common.TokenSpelling[41] = "..";
    pas.Common.TokenSpelling[42] = "=";
    pas.Common.TokenSpelling[43] = "<>";
    pas.Common.TokenSpelling[44] = "<";
    pas.Common.TokenSpelling[45] = "<=";
    pas.Common.TokenSpelling[46] = ">";
    pas.Common.TokenSpelling[47] = ">=";
    pas.Common.TokenSpelling[50] = ".";
    pas.Common.TokenSpelling[51] = ",";
    pas.Common.TokenSpelling[52] = ";";
    pas.Common.TokenSpelling[53] = "(";
    pas.Common.TokenSpelling[54] = ")";
    pas.Common.TokenSpelling[55] = "^";
    pas.Common.TokenSpelling[56] = "@";
    pas.Common.TokenSpelling[57] = "[";
    pas.Common.TokenSpelling[58] = "]";
    pas.Common.TokenSpelling[59] = ":";
    pas.Common.TokenSpelling[60] = "+";
    pas.Common.TokenSpelling[61] = "-";
    pas.Common.TokenSpelling[62] = "*";
    pas.Common.TokenSpelling[63] = "/";
    pas.Common.TokenSpelling[64] = "DIV";
    pas.Common.TokenSpelling[65] = "MOD";
    pas.Common.TokenSpelling[66] = "SHL";
    pas.Common.TokenSpelling[67] = "SHR";
    pas.Common.TokenSpelling[68] = "OR";
    pas.Common.TokenSpelling[69] = "XOR";
    pas.Common.TokenSpelling[70] = "AND";
    pas.Common.TokenSpelling[71] = "NOT";
    pas.Common.TokenSpelling[132] = "INTEGER";
    pas.Common.TokenSpelling[129] = "CARDINAL";
    pas.Common.TokenSpelling[131] = "SMALLINT";
    pas.Common.TokenSpelling[130] = "SHORTINT";
    pas.Common.TokenSpelling[128] = "WORD";
    pas.Common.TokenSpelling[127] = "BYTE";
    pas.Common.TokenSpelling[133] = "CHAR";
    pas.Common.TokenSpelling[134] = "BOOLEAN";
    pas.Common.TokenSpelling[135] = "POINTER";
    pas.Common.TokenSpelling[140] = "SHORTREAL";
    pas.Common.TokenSpelling[141] = "REAL";
    pas.Common.TokenSpelling[142] = "SINGLE";
    pas.Common.TokenSpelling[143] = "FLOAT16";
    pas.Common.TokenSpelling[144] = "PCHAR";
    pas.Common.TokenSpelling[149] = "SHORTSTRING";
    pas.Common.TokenSpelling[150] = "FLOAT";
    pas.Common.TokenSpelling[152] = "TEXT";
    AsmFound = false;
    UsesFound = false;
    UnitFound = false;
    ExternalFound = false;
    IncludeIndex = 2048;
    $impl.TokenizeProgramInitialization();
    if (UsesOn) {
      TokenizeUnit(1,false)}
     else for (var $l = pas.Common.NumUnits; $l >= 1; $l--) {
      cnt = $l;
      if (pas.Common.UnitName[cnt - 1].Name !== "") TokenizeUnit(cnt,false);
    };
  };
  this.TokenizeMacro = function (a, Line, Spaces) {
    var Text = "";
    var Num = "";
    var Frac = "";
    var Err = 0;
    var Line2 = 0;
    var TextPos = 0;
    var im = 0;
    var yes = false;
    var ch = "\x00";
    var ch2 = "\x00";
    var CurToken = 0;
    function SkipWhiteSpace() {
      var $ir = rtl.createIntfRefs();
      try {
        ch = a.charAt(pas.Common.i - 1);
        pas.Common.i += 1;
        while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) {
          ch = a.charAt(pas.Common.i - 1);
          pas.Common.i += 1;
        };
        if (!(ch.charCodeAt() in rtl.createSet(39,35))) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Syntax error, 'string' expected but '" + ch + "' found","",""]),pas.Messages.IMessage)));
      } finally {
        $ir.free();
      };
    };
    function TextInvers(p) {
      var i = 0;
      for (var $l = p, $end = Text.length; $l <= $end; $l++) {
        i = $l;
        if (Text.charCodeAt(i - 1) < 128) Text = rtl.setCharAt(Text,i - 1,String.fromCharCode(Text.charCodeAt(i - 1) + 0x80));
      };
    };
    function TextInternal(p) {
      var i = 0;
      function ata2int(a) {
        var Result = 0;
        Result = a;
        var $tmp = a & 0x7f;
        if (($tmp >= 0) && ($tmp <= 31)) {
          Result += 64}
         else if (($tmp >= 32) && ($tmp <= 95)) Result -= 32;
        return Result;
      };
      function cbm(a) {
        var Result = 0;
        Result = a.charCodeAt();
        var $tmp = a;
        if (($tmp >= "a") && ($tmp <= "z")) {
          Result -= 96}
         else if (($tmp >= "[") && ($tmp <= "_")) {
          Result -= 64}
         else if ($tmp === "`") {
          Result = 64}
         else if ($tmp === "@") Result = 0;
        return Result;
      };
      if (pas.Common.target.id === pas.Common.TComputer.A8) {
        for (var $l = p, $end = Text.length; $l <= $end; $l++) {
          i = $l;
          Text = rtl.setCharAt(Text,i - 1,String.fromCharCode(ata2int(Text.charCodeAt(i - 1))));
        };
      } else {
        for (var $l1 = p, $end1 = Text.length; $l1 <= $end1; $l1++) {
          i = $l1;
          Text = rtl.setCharAt(Text,i - 1,String.fromCharCode(cbm(Text.charAt(i - 1))));
        };
      };
    };
    function ReadNumber() {
      if (ch === "%") {
        ch = a.charAt(pas.Common.i - 1);
        pas.Common.i += 1;
        while (ch.charCodeAt() in rtl.createSet(48,49)) {
          Num = Num + ch;
          ch = a.charAt(pas.Common.i - 1);
          pas.Common.i += 1;
        };
        if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok);
        Num = "%" + Num;
      } else if (ch === "$") {
        ch = a.charAt(pas.Common.i - 1);
        pas.Common.i += 1;
        while (pas.System.upcase(ch).charCodeAt() in pas.StringUtilities.AllowDigitChars) {
          Num = Num + ch;
          ch = a.charAt(pas.Common.i - 1);
          pas.Common.i += 1;
        };
        if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok);
        Num = "$" + Num;
      } else while (ch.charCodeAt() in rtl.createSet(null,48,57)) {
        Num = Num + ch;
        ch = a.charAt(pas.Common.i - 1);
        pas.Common.i += 1;
      };
    };
    var $ir = rtl.createIntfRefs();
    try {
      TextPos = 0;
      pas.Common.i = 1;
      while (pas.Common.i <= a.length) {
        while (a.charCodeAt(pas.Common.i - 1) in pas.StringUtilities.AllowWhiteSpaces) {
          if (a.charAt(pas.Common.i - 1) === pas.StringUtilities.LF) {
            Line += 1;
            Spaces = 0;
          } else Spaces += 1;
          pas.Common.i += 1;
        };
        ch = pas.System.upcase(a.charAt(pas.Common.i - 1));
        pas.Common.i += 1;
        Num = "";
        if (ch.charCodeAt() in rtl.createSet(null,48,57,36,37)) ReadNumber();
        if (Num.length > 0) {
          $mod.AddToken(171,1,Line,Num.length + Spaces,pas.Common.StrToInt(Num));
          Spaces = 0;
          if (ch === ".") {
            ch = a.charAt(pas.Common.i - 1);
            pas.Common.i += 1;
            if (ch === ".") {
              pas.Common.i -= 1}
             else {
              Frac = ".";
              while (ch.charCodeAt() in rtl.createSet(null,48,57)) {
                Frac = Frac + ch;
                ch = a.charAt(pas.Common.i - 1);
                pas.Common.i += 1;
              };
              pas.Common.Tok[pas.Common.NumTok].Kind = 172;
              pas.Common.Tok[pas.Common.NumTok].FracValue = pas.SysUtils.StrToFloat(Num + Frac);
              pas.Common.Tok[pas.Common.NumTok].Column = pas.Common.Tok[pas.Common.NumTok - 1].Column + Num.length + Frac.length + Spaces;
              Spaces = 0;
            };
          };
          Num = "";
          Frac = "";
        };
        if (ch.charCodeAt() in rtl.createSet(null,65,90,95)) {
          Text = "";
          Err = 0;
          TextPos = pas.Common.i - 1;
          while (ch.charCodeAt() in rtl.createSet(null,65,90,95,null,48,57,46)) {
            Text = Text + ch;
            Err += 1;
            ch = pas.System.upcase(a.charAt(pas.Common.i - 1));
            pas.Common.i += 1;
          };
          if (Err > 255) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantStringTooLong,"Constant strings can't be longer than 255 chars","",""]),pas.Messages.IMessage)));
          if (Text.length > 0) {
            CurToken = $impl.GetStandardToken(Text);
            im = pas.Common.SearchDefine(Text);
            if ((im > 0) && (pas.Common.Defines[im - 1].Macro !== "")) {
              ch = "\x00";
              pas.Common.i = TextPos;
              if (pas.Common.Defines[im - 1].Macro === pas.System.Copy(a,pas.Common.i,Text.length)) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.RecursionInMacro,"Recursion in macros is not allowed","",""]),pas.Messages.IMessage)));
              pas.System.Delete({get: function () {
                  return a;
                }, set: function (v) {
                  a = v;
                }},pas.Common.i,Text.length);
              pas.System.Insert(pas.Common.Defines[im - 1].Macro,{get: function () {
                  return a;
                }, set: function (v) {
                  a = v;
                }},pas.Common.i);
              CurToken = 188;
            } else {
              if (CurToken === 153) CurToken = 148;
              if (CurToken === 151) CurToken = 143;
              if (CurToken === 152) CurToken = 144;
              if (CurToken === 150) CurToken = 32;
              $mod.AddToken(0,1,Line,Text.length + Spaces,0);
              Spaces = 0;
            };
            if (CurToken !== 188) if (CurToken !== 0) {
              pas.Common.Tok[pas.Common.NumTok].Kind = CurToken;
            } else {
              pas.Common.Tok[pas.Common.NumTok].Kind = 170;
              pas.Common.Tok[pas.Common.NumTok].Name = Text;
            };
          };
          Text = "";
        };
        if (ch.charCodeAt() in rtl.createSet(39,35)) {
          Text = "";
          yes = true;
          do {
            var $tmp = ch;
            if ($tmp === "'") {
              if (yes) {
                TextPos = Text.length + 1;
                yes = false;
              };
              Spaces += 1;
              do {
                ch = a.charAt(pas.Common.i - 1);
                pas.Common.i += 1;
                if (ch === pas.StringUtilities.LF) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.StringExceedsLine,"String exceeds line","",""]),pas.Messages.IMessage)));
                if (!(ch.charCodeAt() in rtl.createSet(39,pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) {
                  Text = Text + ch}
                 else {
                  ch2 = a.charAt(pas.Common.i - 1);
                  pas.Common.i += 1;
                  if (ch2 === "'") {
                    Text = Text + "'";
                    ch = "\x00";
                  } else pas.Common.i -= 1;
                };
              } while (!(ch === "'"));
              Spaces += 1;
              ch = a.charAt(pas.Common.i - 1);
              pas.Common.i += 1;
              if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                ch2 = ch;
                Err = pas.Common.i;
                while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                  ch2 = a.charAt(pas.Common.i - 1);
                  pas.Common.i += 1;
                };
                if (ch2.charCodeAt() in rtl.createSet(42,126,43)) {
                  ch = ch2}
                 else pas.Common.i = Err;
              };
              if (ch === "*") {
                Spaces += 1;
                TextInvers(TextPos);
                ch = a.charAt(pas.Common.i - 1);
                pas.Common.i += 1;
              };
              if (ch === "~") {
                Spaces += 1;
                TextInternal(TextPos);
                ch = a.charAt(pas.Common.i - 1);
                pas.Common.i += 1;
                if (ch === "*") {
                  Spaces += 1;
                  TextInvers(TextPos);
                  ch = a.charAt(pas.Common.i - 1);
                  pas.Common.i += 1;
                };
              };
              if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                ch2 = ch;
                Err = pas.Common.i;
                while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                  ch2 = a.charAt(pas.Common.i - 1);
                  pas.Common.i += 1;
                };
                if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                  ch = ch2}
                 else pas.Common.i = Err;
              };
              if (ch === "+") {
                yes = true;
                Spaces += 1;
                SkipWhiteSpace();
              };
            } else if ($tmp === "#") {
              ch = a.charAt(pas.Common.i - 1);
              pas.Common.i += 1;
              Num = "";
              ReadNumber();
              if (Num.length > 0) {
                Text = Text + String.fromCharCode(pas.Common.StrToInt(Num))}
               else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantExpressionExpected,"Constant expression expected","",""]),pas.Messages.IMessage)));
              if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                ch2 = ch;
                Err = pas.Common.i;
                while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                  ch2 = a.charAt(pas.Common.i - 1);
                  pas.Common.i += 1;
                };
                if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                  ch = ch2}
                 else pas.Common.i = Err;
              };
              if (ch === "+") {
                Spaces += 1;
                SkipWhiteSpace();
              };
            };
          } while (ch.charCodeAt() in rtl.createSet(35,39));
          var $tmp1 = ch;
          if ($tmp1 === "*") {
            TextInvers(TextPos);
            ch = a.charAt(pas.Common.i - 1);
            pas.Common.i += 1;
          } else if ($tmp1 === "~") {
            TextInternal(TextPos);
            ch = a.charAt(pas.Common.i - 1);
            pas.Common.i += 1;
          };
          if (Text.length === 1) {
            $mod.AddToken(173,1,Line,1 + Spaces,Text.charCodeAt(1 - 1));
            Spaces = 0;
          } else {
            $mod.AddToken(174,1,Line,Text.length + Spaces,0);
            Spaces = 0;
            pas.Common.DefineStaticString(pas.Common.NumTok,Text);
          };
          Text = "";
        };
        if (ch.charCodeAt() in rtl.createSet(61,44,59,40,41,42,47,43,45,94,64,91,93)) {
          $mod.AddToken($impl.GetStandardToken(ch),1,Line,1 + Spaces,0);
          Spaces = 0;
        };
        if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
          Line2 = Line;
          ch2 = a.charAt(pas.Common.i - 1);
          pas.Common.i += 1;
          if ((ch2 === "=") || ((ch === "<") && (ch2 === ">")) || ((ch === ".") && (ch2 === "."))) {
            $mod.AddToken($impl.GetStandardToken(ch + ch2),1,Line,2 + Spaces,0);
            Spaces = 0;
          } else if ((ch === ".") && (ch2.charCodeAt() in rtl.createSet(null,48,57))) {
            $mod.AddToken(171,1,Line,0,0);
            Frac = "0.";
            while (ch2.charCodeAt() in rtl.createSet(null,48,57)) {
              Frac = Frac + ch2;
              ch2 = a.charAt(pas.Common.i - 1);
              pas.Common.i += 1;
            };
            pas.Common.Tok[pas.Common.NumTok].Kind = 172;
            pas.Common.Tok[pas.Common.NumTok].FracValue = pas.SysUtils.StrToFloat(Frac);
            pas.Common.Tok[pas.Common.NumTok].Column = pas.Common.Tok[pas.Common.NumTok - 1].Column + Frac.length + Spaces;
            Spaces = 0;
            Frac = "";
            pas.Common.i -= 1;
          } else {
            pas.Common.i -= 1;
            Line = Line2;
            if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
              $mod.AddToken($impl.GetStandardToken(ch),1,Line,1 + Spaces,0);
              Spaces = 0;
            };
          };
        };
      };
    } finally {
      $ir.free();
    };
  };
  this.AddToken = function (Kind, UnitIndex, Line, Column, Value) {
    pas.Common.NumTok += 1;
    if (pas.Common.NumTok > (rtl.length(pas.Common.Tok) - 1)) pas.Common.Tok = rtl.arraySetLength(pas.Common.Tok,pas.Common.TToken,pas.Common.NumTok + 1);
    pas.Common.Tok[pas.Common.NumTok].UnitIndex = UnitIndex;
    pas.Common.Tok[pas.Common.NumTok].Kind = Kind;
    pas.Common.Tok[pas.Common.NumTok].Value = Value;
    if (pas.Common.NumTok === 1) {
      Column = 1}
     else {
      if (pas.Common.Tok[pas.Common.NumTok - 1].Line !== Line) {}
      else Column = Column + pas.Common.Tok[pas.Common.NumTok - 1].Column;
    };
    pas.Common.Tok[pas.Common.NumTok].Line = Line;
    pas.Common.Tok[pas.Common.NumTok].Column = Column;
  };
  $mod.$implcode = function () {
    $impl.ErrorOrdinalExpExpected = function (i) {
      var $ir = rtl.createIntfRefs();
      try {
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OrdinalExpExpected,"Ordinal expression expected.","",""]),pas.Messages.IMessage)));
      } finally {
        $ir.free();
      };
    };
    $impl.TokenizeProgramInitialization = function () {
      var i = 0;
      for (i = 1; i <= 16384; i++) {
        pas.Common.Ident[i - 1].$assign(pas.Common.TIdentifier.$new());
      };
      pas.Common.ClearWordMemory(pas.Common.DataSegment.slice(0));
      pas.Common.ClearWordMemory(pas.Common.StaticStringData.slice(0));
      pas.Common.PublicSection = true;
      pas.Common.UnitNameIndex = 1;
      pas.Common.LinkObj = rtl.arraySetLength(pas.Common.LinkObj,"",1);
      pas.Common.resArray = rtl.arraySetLength(pas.Common.resArray,pas.Common.TResource,1);
      pas.Common.msgUser = rtl.arraySetLength(pas.Common.msgUser,"",1);
      pas.Common.msgWarning = rtl.arraySetLength(pas.Common.msgWarning,"",1);
      pas.Common.msgNote = rtl.arraySetLength(pas.Common.msgNote,"",1);
      pas.Common.NumBlocks = 0;
      pas.Common.BlockStackTop = 0;
      pas.Common.CodeSize = 0;
      pas.Common.CodePosStackTop = 0;
      pas.Common.VarDataSize = 0;
      pas.Common.CaseCnt = 0;
      pas.Common.IfCnt = 0;
      pas.Common.ShrShlCnt = 0;
      pas.Common.NumTypes = 0;
      pas.Common.run_func = 0;
      pas.Common.NumProc = 0;
      pas.Common.NumTok = 0;
      pas.Common.NumIdent = 0;
      pas.Common.NumStaticStrChars = 0;
      pas.Common.IfdefLevel = 0;
      pas.Common.AsmBlockIndex = 0;
      pas.Common.NumDefines = pas.Common.AddDefines;
      pas.Common.optyA = "";
      pas.Common.optyY = "";
      pas.Common.optyBP2 = "";
      pas.Common.optyFOR0 = "";
      pas.Common.optyFOR1 = "";
      pas.Common.optyFOR2 = "";
      pas.Common.optyFOR3 = "";
      for (i = 0; i <= 4095; i++) pas.Common.AsmBlock[i] = "";
    };
    $impl.GetStandardToken = function (S) {
      var Result = 0;
      var i = 0;
      Result = 0;
      if ((S === "LONGWORD") || (S === "DWORD") || (S === "UINT32")) {
        S = "CARDINAL"}
       else if (S === "UINT16") {
        S = "WORD"}
       else if (S === "LONGINT") S = "INTEGER";
      for (i = 1; i <= 200; i++) if (S === pas.Common.TokenSpelling[i - 1]) {
        Result = i;
        break;
      };
      return Result;
    };
    $impl.AddResource = function (fnam) {
      var i = 0;
      var j = 0;
      var t = null;
      var res = pas.Common.TResource.$new();
      var s = "";
      var tmp = "";
      var $ir = rtl.createIntfRefs();
      try {
        t = rtl.setIntfL(t,pas.FileIO.TFileSystem.CreateTextFile(),true);
        t.Assign(fnam);
        t.Reset();
        while (!t.EOF()) {
          s = "";
          t.ReadLn({get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }});
          i = 1;
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }});
          if ((s.length > (i - 1)) && !(s.charCodeAt(i - 1) in rtl.createSet(35,59))) {
            res.resName = pas.StringUtilities.GetLabelUpperCase(s,{get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }});
            res.resType = pas.StringUtilities.GetLabelUpperCase(s,{get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }});
            res.resFile = pas.StringUtilities.GetFilePath(s,{get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }});
            if ((res.resType === "RCDATA") || (res.resType === "RCASM") || (res.resType === "DOSFILE") || (res.resType === "RELOC") || (res.resType === "RMT") || (res.resType === "MPT") || (res.resType === "CMC") || (res.resType === "RMTPLAY") || (res.resType === "RMTPLAY2") || (res.resType === "RMTPLAYV") || (res.resType === "MPTPLAY") || (res.resType === "CMCPLAY") || (res.resType === "EXTMEM") || (res.resType === "XBMP") || (res.resType === "SAPR") || (res.resType === "SAPRPLAY") || (res.resType === "PP") || (res.resType === "LIBRARY")) {}
            else pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UndefinedResourceType,"Undefined resource type: Type = '" + res.resType + "', Name = '" + res.resName + "'","",""]),pas.Messages.IMessage)));
            if ((res.resFile !== "") && (pas.Common.unitPathList.FindFile(res.resFile) === "")) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ResourceFileNotFound,"Resource file not found: Type = " + res.resType + ", Name = '" + res.resName + "' in unit path '" + pas.Common.unitPathList.ToString() + "'","",""]),pas.Messages.IMessage)));
            for (j = 1; j <= 8; j++) {
              if (s.charCodeAt(i - 1) in rtl.createSet(39,34)) {
                tmp = pas.StringUtilities.GetStringUpperCase(s,{get: function () {
                    return i;
                  }, set: function (v) {
                    i = v;
                  }})}
               else tmp = pas.StringUtilities.GetNumber(s,{get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }});
              if (tmp === "") tmp = "0";
              res.resPar[j - 1] = tmp;
            };
            for (var $l = rtl.length(pas.Common.resArray) - 1 - 1; $l >= 0; $l--) {
              j = $l;
              if (pas.Common.resArray[j].resName === res.resName) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DuplicateResource,"Duplicate resource: Type = " + res.resType + ", Name = '" + res.resName + "'","",""]),pas.Messages.IMessage)));
            };
            j = rtl.length(pas.Common.resArray) - 1;
            pas.Common.resArray[j].$assign(res);
            pas.Common.resArray = rtl.arraySetLength(pas.Common.resArray,pas.Common.TResource,j + 2);
          };
        };
        t.Close();
      } finally {
        $ir.free();
        rtl._Release(t);
      };
    };
    $impl.SaveAsmBlock = function (a) {
      pas.Common.AsmBlock[pas.Common.AsmBlockIndex] = pas.Common.AsmBlock[pas.Common.AsmBlockIndex] + a;
    };
  };
},["SysUtils","Common","Messages","FileIO","Utilities"]);
rtl.module("Optimize",["System"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TemporaryBuf = rtl.arraySetLength(null,"",512);
  this.asm65 = function (a, comment) {
    var len = 0;
    var i = 0;
    var optimize_code = false;
    var str = "";
    optimize_code = true;
    if (!pas.Common.OutputDisabled) if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
      if (optimize_code && pas.Common.optimize.use) {
        i = rtl.length(pas.Common.OptimizeBuf) - 1;
        pas.Common.OptimizeBuf[i] = a;
        pas.Common.OptimizeBuf = rtl.arraySetLength(pas.Common.OptimizeBuf,"",i + 2);
      } else {
        if ((rtl.length(pas.Common.OptimizeBuf) - 1) > 0) {
          $impl.OptimizeASM()}
         else {
          str = a;
          if (comment !== "") {
            len = 0;
            for (var $l = 1, $end = a.length; $l <= $end; $l++) {
              i = $l;
              if (a.charAt(i - 1) === "\t") {
                len += 8 - (len % 8)}
               else if (!(a.charCodeAt(i - 1) in rtl.createSet(pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) len += 1;
            };
            while (len < 56) {
              str = str + "\t";
              len += 8;
            };
            str = str + comment;
          };
          $mod.WriteOut(str);
        };
      };
    };
  };
  this.OptimizeProgram = function (MainIndex) {
    var ProcAsBlock = rtl.arraySetLength(null,false,16384);
    function MarkNotDead(IdentIndex) {
      var ChildIndex = 0;
      var ChildIdentIndex = 0;
      var ProcAsBlockIndex = 0;
      pas.Common.Ident[IdentIndex - 1].IsNotDead = true;
      ProcAsBlockIndex = pas.Common.Ident[IdentIndex - 1].ProcAsBlock;
      if ((ProcAsBlockIndex > 0) && (ProcAsBlock[ProcAsBlockIndex - 1] === false) && (pas.Common.CallGraph[ProcAsBlockIndex - 1].NumChildren > 0)) {
        ProcAsBlock[ProcAsBlockIndex - 1] = true;
        for (var $l = 1, $end = pas.Common.CallGraph[ProcAsBlockIndex - 1].NumChildren; $l <= $end; $l++) {
          ChildIndex = $l;
          for (var $l1 = 1, $end1 = pas.Common.NumIdent; $l1 <= $end1; $l1++) {
            ChildIdentIndex = $l1;
            if ((pas.Common.Ident[ChildIdentIndex - 1].ProcAsBlock > 0) && (pas.Common.Ident[ChildIdentIndex - 1].ProcAsBlock === pas.Common.CallGraph[ProcAsBlockIndex - 1].ChildBlock[ChildIndex - 1])) MarkNotDead(ChildIdentIndex);
          };
        };
      };
    };
    ProcAsBlock = rtl.arraySetLength(null,false,16384);
    MarkNotDead(MainIndex);
  };
  this.ResetOpty = function () {
    pas.Common.optyA = "";
    pas.Common.optyY = "";
    pas.Common.optyBP2 = "";
  };
  this.WriteOut = function (a) {
    var i = 0;
    if ((pas.System.Pos("\tjsr ",a) === 1) || (a === "#asm")) $mod.ResetOpty();
    if (pas.Common.iOut < 511) {
      if ((pas.Common.iOut >= 0) && ($mod.TemporaryBuf[pas.Common.iOut] !== "")) {
        if ($mod.TemporaryBuf[pas.Common.iOut] === "; --- ForToDoCondition") if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
        if (pas.System.Pos("\t#for",$mod.TemporaryBuf[pas.Common.iOut]) > 0) if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
      };
      pas.Common.iOut += 1;
      $mod.TemporaryBuf[pas.Common.iOut] = a;
    } else {
      $impl.OptimizeTemporaryBuf();
      if ($mod.TemporaryBuf[pas.Common.iOut] !== "") {
        if ($mod.TemporaryBuf[pas.Common.iOut] === "; --- ForToDoCondition") if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
        if (pas.System.Pos("\t#for",$mod.TemporaryBuf[pas.Common.iOut]) > 0) if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
      };
      if ($mod.TemporaryBuf[0] !== "~") {
        if (($mod.TemporaryBuf[0] !== "") || (pas.Common.outTmp !== $mod.TemporaryBuf[0])) pas.Common.OutFile.WriteLn$1($mod.TemporaryBuf[0]);
        pas.Common.outTmp = $mod.TemporaryBuf[0];
      };
      for (var $l = 1, $end = pas.Common.iOut; $l <= $end; $l++) {
        i = $l;
        $mod.TemporaryBuf[i - 1] = $mod.TemporaryBuf[i];
      };
      $mod.TemporaryBuf[pas.Common.iOut] = a;
    };
  };
  this.FlushTempBuf = function () {
    var i = 0;
    for (i = 0; i <= 511; i++) $mod.WriteOut("");
  };
  $mod.$implcode = function () {
    var ofs = 80;
    $impl.OptimizeTemporaryBuf = function () {
      var p = 0;
      var k = 0;
      var q = 0;
      var tmp = "";
      var yes = false;
      function fail(i) {
        var Result = false;
        if ((pas.System.Pos("#asm:",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("ldy ",$mod.TemporaryBuf[i]) > 0) || (pas.System.Pos("mwy ",$mod.TemporaryBuf[i]) > 0) || (pas.System.Pos("mvy ",$mod.TemporaryBuf[i]) > 0) || (pas.System.Pos("jsr ",$mod.TemporaryBuf[i]) > 0) || (pas.System.Pos("\t.if",$mod.TemporaryBuf[i]) > 0) || (pas.System.Pos("\t.LOCAL ",$mod.TemporaryBuf[i]) > 0) || (pas.System.Pos("\t@print",$mod.TemporaryBuf[i]) > 0) || ($mod.TemporaryBuf[i] === "\tiny") || ($mod.TemporaryBuf[i] === "\tdey") || ($mod.TemporaryBuf[i] === "\ttya") || ($mod.TemporaryBuf[i] === "\ttay")) {
          Result = true}
         else Result = false;
        return Result;
      };
      function MVA(i) {
        var Result = false;
        Result = pas.System.Pos("\tmva ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function MVA_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tmva #",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function IFTMP(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda IFTMP_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JMP(i) {
        var Result = false;
        Result = pas.System.Pos("\tjmp l_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LAB_L(i) {
        var Result = false;
        Result = pas.System.Pos("l_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LAB_A(i) {
        var Result = false;
        Result = $mod.TemporaryBuf[i] === "@";
        return Result;
      };
      function LAB_B(i) {
        var Result = false;
        Result = pas.System.Pos("b_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LAB_S(i) {
        var Result = false;
        Result = pas.System.Pos("s_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function INC_(i) {
        var Result = false;
        Result = pas.System.Pos("\tinc ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function DEC_(i) {
        var Result = false;
        Result = pas.System.Pos("\tdec ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JSR(i) {
        var Result = false;
        Result = pas.System.Pos("\tjsr ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LDY(i) {
        var Result = false;
        Result = pas.System.Pos("\tldy ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LDY_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tldy #",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function CMP(i) {
        var Result = false;
        Result = pas.System.Pos("\tcmp ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LDA(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LDA_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda #",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function LDA_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda :STACK",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function STA(i) {
        var Result = false;
        Result = pas.System.Pos("\tsta ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function STA_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tsta :STACK",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function STY(i) {
        var Result = false;
        Result = pas.System.Pos("\tsty ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function STY_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tsty :STACK",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function ADD(i) {
        var Result = false;
        Result = pas.System.Pos("\tadd ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function SUB(i) {
        var Result = false;
        Result = pas.System.Pos("\tsub ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function ADD_SUB(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadd ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tsub ",$mod.TemporaryBuf[i]) === 1);
        return Result;
      };
      function ADC_SBC(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadc ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tsbc ",$mod.TemporaryBuf[i]) === 1);
        return Result;
      };
      function SBC(i) {
        var Result = false;
        Result = pas.System.Pos("\tsbc ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function DEX(i) {
        var Result = false;
        Result = $mod.TemporaryBuf[i] === "\tdex";
        return Result;
      };
      function STA_BP2(i) {
        var Result = false;
        Result = $mod.TemporaryBuf[i] === "\tsta :bp2";
        return Result;
      };
      function STA_BP2_1(i) {
        var Result = false;
        Result = $mod.TemporaryBuf[i] === "\tsta :bp2+1";
        return Result;
      };
      function AND_ORA_EOR(i) {
        var Result = false;
        Result = (pas.System.Pos("\tand ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tora ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\teor ",$mod.TemporaryBuf[i]) === 1);
        return Result;
      };
      function IY(i) {
        var Result = false;
        Result = pas.System.Pos(",y",$mod.TemporaryBuf[i]) > 0;
        return Result;
      };
      function STA_ADR(i) {
        var Result = false;
        Result = (IY(i) && (pas.System.Pos("\tsta adr.",$mod.TemporaryBuf[i]) === 1)) || ((pas.System.Pos("\tsta ",$mod.TemporaryBuf[i]) === 1) && (pas.System.Pos(".adr.",$mod.TemporaryBuf[i]) > 0));
        return Result;
      };
      function JEQ(i) {
        var Result = false;
        Result = pas.System.Pos("\tjeq ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JNE(i) {
        var Result = false;
        Result = pas.System.Pos("\tjne ",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JEQ_L(i) {
        var Result = false;
        Result = pas.System.Pos("\tjeq l_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JNE_L(i) {
        var Result = false;
        Result = pas.System.Pos("\tjne l_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JCC_L(i) {
        var Result = false;
        Result = pas.System.Pos("\tjcc l_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function JCS_L(i) {
        var Result = false;
        Result = pas.System.Pos("\tjcs l_",$mod.TemporaryBuf[i]) === 1;
        return Result;
      };
      function OPTI(i) {
        var Result = false;
        Result = pas.System.Pos("; optimize ",$mod.TemporaryBuf[i]) > 0;
        return Result;
      };
      function SKIP(i) {
        var Result = false;
        Result = ($mod.TemporaryBuf[i] === "\tseq") || ($mod.TemporaryBuf[i] === "\tsne") || ($mod.TemporaryBuf[i] === "\tspl") || ($mod.TemporaryBuf[i] === "\tsmi") || ($mod.TemporaryBuf[i] === "\tscc") || ($mod.TemporaryBuf[i] === "\tscs") || ($mod.TemporaryBuf[i] === "\tsvc") || ($mod.TemporaryBuf[i] === "\tsvs") || (pas.System.Pos("\tjne ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tjeq ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tjcc ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tjcs ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tjmi ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tjpl ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tbne ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tbeq ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tbcc ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tbcs ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tbmi ",$mod.TemporaryBuf[i]) === 1) || (pas.System.Pos("\tbpl ",$mod.TemporaryBuf[i]) === 1);
        return Result;
      };
      function IFDEF_MUL8(i) {
        var Result = false;
        Result = ($mod.TemporaryBuf[i + 1] === "\tfmulu_8") && ($mod.TemporaryBuf[i] === "\t.ifdef fmulinit");
        return Result;
      };
      function IFDEF_MUL16(i) {
        var Result = false;
        Result = ($mod.TemporaryBuf[i + 1] === "\tfmulu_16") && ($mod.TemporaryBuf[i] === "\t.ifdef fmulinit");
        return Result;
      };
      function fortmp(a) {
        var Result = "";
        Result = a;
        if (Result.length > 12) {
          Result = rtl.setCharAt(Result,12,"_")}
         else Result = Result + "_0";
        return Result;
      };
      function GetBYTE(i) {
        var Result = 0;
        Result = pas.Common.GetVAL(pas.System.Copy($mod.TemporaryBuf[i],6,4));
        return Result;
      };
      function GetWORD(i, j) {
        var Result = 0;
        Result = pas.Common.GetVAL(pas.System.Copy($mod.TemporaryBuf[i],6,4)) + (pas.Common.GetVAL(pas.System.Copy($mod.TemporaryBuf[j],6,4)) * 256);
        return Result;
      };
      function GetSTRING(j) {
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        i = 6;
        a = $mod.TemporaryBuf[j];
        if (a !== "") while (!(a.charCodeAt(i - 1) in rtl.createSet(32,9)) && (i <= a.length)) {
          Result = Result + a.charAt(i - 1);
          i += 1;
        };
        return Result;
      };
      function opt_TEMP_MOVE() {
        if ((pas.System.Pos("\tjsr SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) || ((pas.System.Pos("\t.LOCAL +MAIN.SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) && ($mod.TemporaryBuf[12] === "\tm@INLINE") && ($mod.TemporaryBuf[13] === "\t.ENDL"))) {
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[2]) === 1) && (pas.System.Pos(".SOURCE+1",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".SOURCE",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[6]) === 1) && (pas.System.Pos(".DEST+1",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[4]) === 1) && (pas.System.Pos(".DEST",$mod.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[10]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[10]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[8]) > 0) && LDA_IM(0) && LDA_IM(3) && LDA_IM(5) && LDA_IM(7) && LDA_IM(9)) {
            p = GetWORD(0,0);
            q = GetWORD(3,5);
            k = GetWORD(7,9);
            if ((k > 0) && (k <= 256) && !(((p >= q) && (p < (q + k))) || (((p + k) > q) && ((p + k) <= (q + k))))) {
              if (k <= 16) {
                $mod.TemporaryBuf[10] = "\t:" + pas.Common.IntToStr(k) + " mva $" + pas.SysUtils.IntToHex(p,4) + "+# $" + pas.SysUtils.IntToHex(q,4) + "+#";
                $mod.TemporaryBuf[11] = "";
              } else if (k <= 128) {
                $mod.TemporaryBuf[10] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
                $mod.TemporaryBuf[11] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              } else {
                $mod.TemporaryBuf[10] = "\tldy #256-" + pas.Common.IntToStr(k);
                $mod.TemporaryBuf[11] = "\tmva:rne $" + pas.SysUtils.IntToHex(p,4) + "+" + pas.Common.IntToStr(k) + "-256,y $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.Common.IntToStr(k) + "-256,y+";
              };
              $mod.TemporaryBuf[0] = "~";
              $mod.TemporaryBuf[1] = "~";
              $mod.TemporaryBuf[2] = "~";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              if ($mod.TemporaryBuf[12] === "\tm@INLINE") {
                $mod.TemporaryBuf[12] = "~";
                $mod.TemporaryBuf[13] = "~";
              };
            };
          };
        };
        if ((pas.System.Pos("\tjsr SYSTEM.MOVE.",$mod.TemporaryBuf[12]) === 1) || ((pas.System.Pos("\t.LOCAL +MAIN.SYSTEM.MOVE.",$mod.TemporaryBuf[12]) === 1) && ($mod.TemporaryBuf[13] === "\tm@INLINE") && ($mod.TemporaryBuf[14] === "\t.ENDL"))) {
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".SOURCE",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[9]) > 0) && LDA_IM(0) && LDA_IM(2) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            p = GetWORD(0,2);
            q = GetWORD(4,6);
            k = GetWORD(8,10);
            if ((k > 0) && (k <= 256) && !(((p >= q) && (p < (q + k))) || (((p + k) > q) && ((p + k) <= (q + k))))) {
              if (k <= 16) {
                $mod.TemporaryBuf[11] = "\t:" + pas.Common.IntToStr(k) + " mva $" + pas.SysUtils.IntToHex(p,4) + "+# $" + pas.SysUtils.IntToHex(q,4) + "+#";
                $mod.TemporaryBuf[12] = "";
              } else if (k <= 128) {
                $mod.TemporaryBuf[11] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
                $mod.TemporaryBuf[12] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              } else {
                $mod.TemporaryBuf[11] = "\tldy #256-" + pas.Common.IntToStr(k);
                $mod.TemporaryBuf[12] = "\tmva:rne $" + pas.SysUtils.IntToHex(p,4) + "+" + pas.Common.IntToStr(k) + "-256,y $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.Common.IntToStr(k) + "-256,y+";
              };
              $mod.TemporaryBuf[0] = "~";
              $mod.TemporaryBuf[1] = "~";
              $mod.TemporaryBuf[2] = "~";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              if ($mod.TemporaryBuf[13] === "\tm@INLINE") {
                $mod.TemporaryBuf[13] = "~";
                $mod.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".SOURCE",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tlda ",$mod.TemporaryBuf[0]) === 1) && (LDA_IM(0) === false) && (pas.System.Pos("\tlda ",$mod.TemporaryBuf[2]) === 1) && (LDA_IM(2) === false) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            q = GetWORD(4,6);
            k = GetWORD(8,10);
            if (k <= 128) {
              $mod.TemporaryBuf[1] = "\tsta :bp2";
              $mod.TemporaryBuf[3] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[5] = "\tmva:rpl (:bp2),y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
              if ($mod.TemporaryBuf[13] === "\tm@INLINE") {
                $mod.TemporaryBuf[13] = "~";
                $mod.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[0]) === 1) && (pas.System.Pos(".SOURCE",$mod.TemporaryBuf[0]) > 0) && ($mod.TemporaryBuf[1] === "\tiny") && ($mod.TemporaryBuf[2] === "\tlda (:bp2),y") && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            q = GetWORD(4,6);
            k = GetWORD(8,10);
            if (k <= 128) {
              $mod.TemporaryBuf[0] = "\tsta :TMP";
              $mod.TemporaryBuf[3] = "\tsta :TMP+1";
              $mod.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[5] = "\tmva:rpl (:TMP),y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
              if ($mod.TemporaryBuf[13] === "\tm@INLINE") {
                $mod.TemporaryBuf[13] = "~";
                $mod.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".SOURCE+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".SOURCE",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".DEST+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[0]) === 1) && (pas.System.Pos(".DEST",$mod.TemporaryBuf[0]) > 0) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            p = GetWORD(4,6);
            k = GetWORD(8,10);
            if (k <= 128) {
              $mod.TemporaryBuf[0] = "\tsta :bp2";
              $mod.TemporaryBuf[3] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[5] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y (:bp2),y-";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
              if ($mod.TemporaryBuf[13] === "\tm@INLINE") {
                $mod.TemporaryBuf[13] = "~";
                $mod.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$mod.TemporaryBuf[0]) === 1) && (pas.System.Pos(".SOURCE",$mod.TemporaryBuf[0]) > 0) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            q = GetWORD(4,6);
            k = GetWORD(8,10);
            if (k <= 128) {
              $mod.TemporaryBuf[0] = "\tsta :bp2";
              $mod.TemporaryBuf[3] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[5] = "\tmva:rpl (:bp2),y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
              if ($mod.TemporaryBuf[13] === "\tm@INLINE") {
                $mod.TemporaryBuf[13] = "~";
                $mod.TemporaryBuf[14] = "~";
              };
            };
          };
        };
      };
      function opt_TEMP_FILL() {
        if ((pas.System.Pos("\tjsr SYSTEM.FILL",$mod.TemporaryBuf[10]) === 1) || ((pas.System.Pos("\t.LOCAL +MAIN.SYSTEM.FILL",$mod.TemporaryBuf[10]) === 1) && ($mod.TemporaryBuf[11] === "\tm@INLINE") && ($mod.TemporaryBuf[12] === "\t.ENDL"))) {
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && LDA(8) && LDA_IM(0) && LDA_IM(2) && LDA_IM(4) && LDA_IM(6)) {
            q = GetWORD(0,2);
            k = GetWORD(4,6);
            yes = false;
            if ((k === 0x200) || (k === 0x300) || (k === 0x400) || (k === 0x500) || (k === 0x600) || (k === 0x700) || (k === 0x800)) {
              $mod.TemporaryBuf[0] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[1] = "\tm@fill $" + pas.SysUtils.IntToHex(q,4) + " " + pas.Common.IntToStr(rtl.trunc(k / 0x80));
              $mod.TemporaryBuf[2] = "~";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 8) {
              $mod.TemporaryBuf[0] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[1] = "\t:" + pas.Common.IntToStr(k) + " sta $" + pas.SysUtils.IntToHex(q,4) + "+#";
              $mod.TemporaryBuf[2] = "~";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $mod.TemporaryBuf[0] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[1] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[2] = "\tsta:rpl $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 256) {
              $mod.TemporaryBuf[0] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[1] = "\tldy #256-" + pas.Common.IntToStr(k);
              $mod.TemporaryBuf[2] = "\tsta:rne $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.Common.IntToStr(k) + "-256,y+";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($mod.TemporaryBuf[11] === "\tm@INLINE")) {
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[2]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && LDA_IM(1) && LDA_IM(3) && LDA_IM(5) && ($mod.TemporaryBuf[7] === "\tlda #$00")) {
            q = GetWORD(1,3);
            k = GetWORD(5,7);
            yes = false;
            if ((k === 0x200) || (k === 0x300) || (k === 0x400) || (k === 0x500) || (k === 0x600) || (k === 0x700) || (k === 0x800)) {
              $mod.TemporaryBuf[0] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[1] = "\tm@fill $" + pas.SysUtils.IntToHex(q,4) + " " + pas.Common.IntToStr(rtl.trunc(k / 0x80));
              $mod.TemporaryBuf[2] = "~";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 8) {
              $mod.TemporaryBuf[1] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[2] = "\t:" + pas.Common.IntToStr(k) + " sta $" + pas.SysUtils.IntToHex(q,4) + "+#";
              $mod.TemporaryBuf[3] = "~";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $mod.TemporaryBuf[1] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[2] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[3] = "\tsta:rpl $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 256) {
              $mod.TemporaryBuf[1] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[2] = "\tldy #256-" + pas.Common.IntToStr(k);
              $mod.TemporaryBuf[3] = "\tsta:rne $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.Common.IntToStr(k) + "-256,y+";
              $mod.TemporaryBuf[4] = "~";
              $mod.TemporaryBuf[5] = "~";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($mod.TemporaryBuf[11] === "\tm@INLINE")) {
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[2]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && ($mod.TemporaryBuf[7] === "\tlda #$00") && LDA_IM(5) && LDA(1) && (LDA_IM(1) === false) && LDA(3)) {
            k = GetWORD(5,7);
            yes = false;
            if (k === 256) {
              $mod.TemporaryBuf[2] = "\tsta :bp2";
              $mod.TemporaryBuf[4] = "\tsta :bp2+1";
              $mod.TemporaryBuf[5] = "\tldy #$00";
              $mod.TemporaryBuf[6] = "\ttya";
              $mod.TemporaryBuf[7] = "\tsta:rne (:bp2),y+";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $mod.TemporaryBuf[2] = "\tsta :bp2";
              $mod.TemporaryBuf[4] = "\tsta :bp2+1";
              $mod.TemporaryBuf[5] = "\tlda #$00";
              $mod.TemporaryBuf[6] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[7] = "\tsta:rpl (:bp2),y-";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($mod.TemporaryBuf[11] === "\tm@INLINE")) {
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && LDA_IM(6) && LDA_IM(4) && LDA(8) && LDA(0) && (LDA_IM(0) === false) && LDA(2)) {
            k = GetWORD(4,6);
            yes = false;
            if (k === 256) {
              $mod.TemporaryBuf[1] = "\tsta :bp2";
              $mod.TemporaryBuf[3] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[5] = "\tldy #$00";
              $mod.TemporaryBuf[6] = "\tsta:rne (:bp2),y+";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $mod.TemporaryBuf[1] = "\tsta :bp2";
              $mod.TemporaryBuf[3] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[5] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[6] = "\tsta:rpl (:bp2),y-";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($mod.TemporaryBuf[11] === "\tm@INLINE")) {
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[1]) > 0) && LDA_IM(8) && LDA_IM(6) && LDA(0) && LDA(2) && (LDA_IM(2) === false) && LDA(4)) {
            k = GetWORD(6,8);
            yes = false;
            if (k === 256) {
              $mod.TemporaryBuf[3] = "\tsta :bp2";
              $mod.TemporaryBuf[5] = "\tsta :bp2+1";
              $mod.TemporaryBuf[6] = $mod.TemporaryBuf[0];
              $mod.TemporaryBuf[7] = "\tldy #$00";
              $mod.TemporaryBuf[8] = "\tsta:rne (:bp2),y+";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              $mod.TemporaryBuf[0] = "~";
              $mod.TemporaryBuf[1] = "~";
              yes = true;
            } else if (k <= 128) {
              $mod.TemporaryBuf[3] = "\tsta :bp2";
              $mod.TemporaryBuf[5] = "\tsta :bp2+1";
              $mod.TemporaryBuf[6] = $mod.TemporaryBuf[0];
              $mod.TemporaryBuf[7] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[8] = "\tsta:rpl (:bp2),y-";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              $mod.TemporaryBuf[0] = "~";
              $mod.TemporaryBuf[1] = "~";
              yes = true;
            };
            if (yes && ($mod.TemporaryBuf[11] === "\tm@INLINE")) {
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[2]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && LDA_IM(7) && LDA_IM(5) && LDA(3) && (LDA_IM(3) === false)) {
            k = GetWORD(5,7);
            yes = false;
            if (k === 256) {
              $mod.TemporaryBuf[2] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = "\tsta :bp2";
              $mod.TemporaryBuf[5] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[6] = "\tldy #$00";
              $mod.TemporaryBuf[7] = "\tsta:rne (:bp2),y+";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $mod.TemporaryBuf[2] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = "\tsta :bp2";
              $mod.TemporaryBuf[5] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[6] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[7] = "\tsta:rpl (:bp2),y-";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($mod.TemporaryBuf[11] === "\tm@INLINE")) {
              $mod.TemporaryBuf[11] = "~";
              $mod.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[1]) > 0) && LDA(2) && (ADC_SBC(3) || ADD_SUB(3)) && ($mod.TemporaryBuf[7] === "\tlda #$00") && LDA_IM(5)) {
            k = GetWORD(5,7);
            if (k <= 128) {
              $mod.TemporaryBuf[1] = "\tsta :bp2";
              $mod.TemporaryBuf[4] = "\tsta :bp2+1";
              $mod.TemporaryBuf[5] = "\tlda #$00";
              $mod.TemporaryBuf[6] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[7] = "\tsta:rpl (:bp2),y-";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              if ($mod.TemporaryBuf[11] === "\tm@INLINE") {
                $mod.TemporaryBuf[11] = "~";
                $mod.TemporaryBuf[12] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT+1",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[5]) === 1) && (pas.System.Pos(".COUNT",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A+1",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$mod.TemporaryBuf[0]) === 1) && (pas.System.Pos(".A",$mod.TemporaryBuf[0]) > 0) && LDA(8) && LDA(1) && (ADC_SBC(2) || ADD_SUB(2)) && LDA_IM(4) && LDA_IM(6)) {
            k = GetWORD(4,6);
            if (k <= 128) {
              $mod.TemporaryBuf[0] = "\tsta :bp2";
              $mod.TemporaryBuf[3] = "\tsta :bp2+1";
              $mod.TemporaryBuf[4] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[5] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $mod.TemporaryBuf[6] = "\tsta:rpl (:bp2),y-";
              $mod.TemporaryBuf[7] = "~";
              $mod.TemporaryBuf[8] = "~";
              $mod.TemporaryBuf[9] = "~";
              $mod.TemporaryBuf[10] = "~";
              if ($mod.TemporaryBuf[11] === "\tm@INLINE") {
                $mod.TemporaryBuf[11] = "~";
                $mod.TemporaryBuf[12] = "~";
              };
            };
          };
        };
      };
      function opt_TEMP_TAIL_IF() {
        var i = 0;
        var p = 0;
        var k = 0;
        var yes = false;
        var lab = "";
        var tmp = "";
        if (((STA(80 + 20) || JSR(80 + 20)) && LAB_L(80 + 21) && IFTMP(80 + 22) && JNE_L(80 + 23)) || ((STA(80 + 19) || JSR(80 + 19)) && LAB_L(80 + 20) && IFTMP(80 + 21) && ($mod.TemporaryBuf[80 + 22] === "\tbeq *+5") && JMP(80 + 23))) {
          lab = pas.System.Copy($mod.TemporaryBuf[80 + 23],6,256);
          yes = false;
          for (p = 104; p <= 511; p++) if ($mod.TemporaryBuf[p] === lab) {
            yes = true;
            break;
          };
          if (yes) {
            while (LAB_L(p - 1)) {
              tmp = $mod.TemporaryBuf[p - 1];
              $mod.TemporaryBuf[p - 1] = $mod.TemporaryBuf[p];
              $mod.TemporaryBuf[p] = tmp;
              p -= 1;
            };
            if ($mod.TemporaryBuf[80 + 22] === "\tbeq *+5") {
              i = 80 + 19}
             else i = 80 + 20;
            if (STA(i) || JSR(i)) {
              for (k = 0; k <= 99; k++) if (($mod.TemporaryBuf[i - k] === $mod.TemporaryBuf[p - k - 1]) || (LAB_L(i - k) && LAB_L(p - k - 1)) || (OPTI(i - k) && OPTI(p - k - 1))) {
                if (LAB_A(i - k)) if (($mod.TemporaryBuf[i - k - 1] !== $mod.TemporaryBuf[p - k - 2]) || ($mod.TemporaryBuf[i - k - 2] !== $mod.TemporaryBuf[p - k - 3])) return;
                if ($mod.TemporaryBuf[i - k] === $mod.TemporaryBuf[p - k - 1]) $mod.TemporaryBuf[i - k] = "~";
                $mod.TemporaryBuf[p - k] = $mod.TemporaryBuf[p - k - 1];
                $mod.TemporaryBuf[p - k - 1] = lab;
              } else return;
            };
          };
        };
      };
      function opt_TEMP_TAIL_CASE() {
        var i = 0;
        var p = 0;
        var k = 0;
        var yes = false;
        var lab = "";
        var tmp = "";
        i = 100;
        if (pas.System.Pos("\tjmp a_",$mod.TemporaryBuf[i]) > 0) {
          if (LAB_S(i + 1)) $mod.TemporaryBuf[i + 1] = "~";
          tmp = $mod.TemporaryBuf[i];
          lab = pas.System.Copy(tmp,6,256);
          yes = false;
          for (var $l = i + 1; $l <= 511; $l++) {
            p = $l;
            if (($mod.TemporaryBuf[p] === tmp) && LAB_S(p + 1)) {
              yes = true;
              break;
            };
          };
          if (yes) if (($mod.TemporaryBuf[i - 2] === $mod.TemporaryBuf[p - 2]) && ($mod.TemporaryBuf[i - 1] === $mod.TemporaryBuf[p - 1]) && (STA(p - 1) || JSR(p - 1))) {
            lab = $mod.TemporaryBuf[p + 1];
            $mod.TemporaryBuf[i] = "\tjmp " + lab;
            $mod.TemporaryBuf[p] = lab;
            $mod.TemporaryBuf[p + 1] = tmp;
            for (var $l1 = 1, $end = i - 1; $l1 <= $end; $l1++) {
              k = $l1;
              if (($mod.TemporaryBuf[i - k] === $mod.TemporaryBuf[p - k]) || (LAB_L(i - k) && LAB_L(p - k)) || (OPTI(i - k) && OPTI(p - k))) {
                if (LAB_A(i - k)) if (($mod.TemporaryBuf[i - k - 1] !== $mod.TemporaryBuf[p - k - 1]) || ($mod.TemporaryBuf[i - k - 2] !== $mod.TemporaryBuf[p - k - 2])) return;
                if ($mod.TemporaryBuf[i - k] === $mod.TemporaryBuf[p - k]) $mod.TemporaryBuf[i - k] = "~";
                tmp = $mod.TemporaryBuf[p - k];
                $mod.TemporaryBuf[p - k] = $mod.TemporaryBuf[(p - k) + 1];
                $mod.TemporaryBuf[(p - k) + 1] = tmp;
              } else return;
            };
          };
        };
      };
      function opt_TEMP() {
        var p = 0;
        if (LDA(10) && CMP(11) && JCC_L(12) && LDA(13) && SUB(14)) {
          $mod.TemporaryBuf[14] = "\tsbc " + pas.System.Copy($mod.TemporaryBuf[14],6,256);
        };
        if (JCC_L(10) && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && SUB(14)) {
          $mod.TemporaryBuf[14] = "\tsbc " + pas.System.Copy($mod.TemporaryBuf[14],6,256);
        };
        if (JCC_L(10) && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && LDA(14) && SUB(15)) {
          $mod.TemporaryBuf[15] = "\tsbc " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
        };
        if (JCC_L(10) && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && LDY(14) && LDA(15) && SUB(16)) {
          $mod.TemporaryBuf[16] = "\tsbc " + pas.System.Copy($mod.TemporaryBuf[16],6,256);
        };
        if (JCS_L(10) && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && ADD(14)) {
          $mod.TemporaryBuf[14] = "\tadc " + pas.System.Copy($mod.TemporaryBuf[14],6,256);
        };
        if (JCS_L(10) && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && LDA(14) && ADD(15)) {
          $mod.TemporaryBuf[15] = "\tadc " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
        };
        if (JCS_L(10) && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && LDY(14) && LDA(15) && ADD(16)) {
          $mod.TemporaryBuf[16] = "\tadc " + pas.System.Copy($mod.TemporaryBuf[16],6,256);
        };
        if (($mod.TemporaryBuf[10] === "\tscc") && INC_(11) && ($mod.TemporaryBuf[12] === "") && OPTI(13) && ($mod.TemporaryBuf[14] === "") && ADD(15)) {
          $mod.TemporaryBuf[10] = "\tbcc @+";
          $mod.TemporaryBuf[12] = "\tclc";
          $mod.TemporaryBuf[13] = "@";
          $mod.TemporaryBuf[15] = "\tadc " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
        };
        if (($mod.TemporaryBuf[10] === "\tscs") && DEC_(11) && ($mod.TemporaryBuf[12] === "") && OPTI(13) && ($mod.TemporaryBuf[14] === "") && SUB(15)) {
          $mod.TemporaryBuf[10] = "\tbcs @+";
          $mod.TemporaryBuf[12] = "\tsec";
          $mod.TemporaryBuf[13] = "@";
          $mod.TemporaryBuf[15] = "\tsbc " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
        };
        if (LDY(0) && STA(1) && ($mod.TemporaryBuf[2] === "") && OPTI(3) && ($mod.TemporaryBuf[4] === "") && LDA(5)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[5],6,256)) {
          $mod.TemporaryBuf[5] = "\ttya";
        };
        if (LDY(0) && LDA(1) && STA(2) && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && LDA(6)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
          $mod.TemporaryBuf[6] = "\ttya";
        };
        if (LDY(0) && LDA(1) && STA(2) && LDA(3)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[3],6,256)) {
          $mod.TemporaryBuf[3] = "\ttya";
        };
        if (($mod.TemporaryBuf[0] === "\tlda #$00") && STA_STACK(1) && ($mod.TemporaryBuf[2] === "\tiny") && LDA_STACK(3) && (pas.System.Pos("ora ",$mod.TemporaryBuf[4]) > 0) && STA(5)) if (pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[3],6,256)) {
          $mod.TemporaryBuf[4] = "\tlda " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[3] = "~";
        };
        if ((pas.System.Pos("lsr ",$mod.TemporaryBuf[0]) > 0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4) && (JNE(5) || JEQ(5))) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          $mod.TemporaryBuf[4] = "~";
        };
        if (LDY(0) && STA(1) && INC_(2) && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && LDA(6) && CMP(7) && SKIP(8)) if ((pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[2],6,256)) && (pas.System.Copy($mod.TemporaryBuf[2],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256))) {
          $mod.TemporaryBuf[2] = "\tiny";
          $mod.TemporaryBuf[6] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[6],6,256);
          $mod.TemporaryBuf[7] = "\tcpy " + pas.System.Copy($mod.TemporaryBuf[7],6,256);
          if ((SKIP(9) === false) && (pas.System.Pos(" l_",$mod.TemporaryBuf[8]) > 0)) {
            tmp = pas.System.Copy($mod.TemporaryBuf[8],6,256);
            p = 9;
            while (($mod.TemporaryBuf[p] !== tmp) && (p < 511)) p += 1;
            if (($mod.TemporaryBuf[p] === tmp) && MVA(p - 1) && ($mod.TemporaryBuf[p - 1] === ("\tmva " + GetSTRING(p - 1) + " " + pas.System.Copy($mod.TemporaryBuf[6],6,256))) && ($mod.TemporaryBuf[p + 1] === "")) {
              $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[6];
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[p - 1] = "\tldy " + GetSTRING(p - 1);
            };
          };
        };
        if (($mod.TemporaryBuf[0] === "\tand #$01") && JEQ(1) && LDY(2) && LDA(3) && ($mod.TemporaryBuf[4] === "\tadd #$01")) {
          $mod.TemporaryBuf[3] = "\tadd " + pas.System.Copy($mod.TemporaryBuf[3],6,256);
          $mod.TemporaryBuf[4] = "~";
        };
        if (INC_(0) && ($mod.TemporaryBuf[1] === "\tsne") && INC_(2) && (JMP(3) || JNE(3)) && LAB_L(4)) if (pas.System.Pos($mod.TemporaryBuf[0],$mod.TemporaryBuf[2]) > 0) {
          $mod.TemporaryBuf[1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[3],6,256);
        };
        if (LDY(0) && LDA(1) && STA(2)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[1],6,256)) {
          $mod.TemporaryBuf[1] = "\ttya";
        };
        if (($mod.TemporaryBuf[0] !== "\tsta #$00") && STA(0) && LDA(1)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[1],6,256)) {
          if (STA_STACK(0)) {
            $mod.TemporaryBuf[0] = "~";
            $mod.TemporaryBuf[1] = "~";
          } else $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[2] === "\tiny") && ($mod.TemporaryBuf[3] === "\tlda #$00") && (pas.System.Pos("asl :STACK",$mod.TemporaryBuf[4]) > 0)) {
          $mod.TemporaryBuf[2] = "~";
          if ($mod.TemporaryBuf[1] === "\tiny") {
            $mod.TemporaryBuf[1] = "~";
            if ($mod.TemporaryBuf[0] === "\tiny") $mod.TemporaryBuf[0] = "~";
          };
        };
        if (STA_STACK(0) && (($mod.TemporaryBuf[1] === "\tiny") || ($mod.TemporaryBuf[1] === "\tdey")) && LDA_STACK(2) && (SKIP(3) === false)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[2],6,256)) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\ttay") && ($mod.TemporaryBuf[1] === "\tiny") && ($mod.TemporaryBuf[2] === "\tiny")) {
          if ($mod.TemporaryBuf[3] === "\tiny") {
            $mod.TemporaryBuf[0] = "\tadd #$03";
            $mod.TemporaryBuf[3] = "~";
          } else $mod.TemporaryBuf[0] = "\tadd #$02";
          $mod.TemporaryBuf[1] = "\ttay";
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tbcc *+7") && ($mod.TemporaryBuf[1] === "\tbeq *+5") && JMP(2)) {
          $mod.TemporaryBuf[0] = "\tscc";
          $mod.TemporaryBuf[1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && ($mod.TemporaryBuf[1] === "\tbeq *+5") && JMP(2)) {
          $mod.TemporaryBuf[1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && ($mod.TemporaryBuf[1] === "\tbmi *+5") && JMP(2)) {
          $mod.TemporaryBuf[1] = "\tjpl " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tseq") && JMP(1)) {
          $mod.TemporaryBuf[0] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[1],6,256);
          $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\t.ENDL") && ($mod.TemporaryBuf[1] === "\tbmi *+7") && ($mod.TemporaryBuf[2] === "\tbeq *+5") && JMP(3)) {
          $mod.TemporaryBuf[1] = "\tsmi";
          $mod.TemporaryBuf[2] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[3],6,256);
          $mod.TemporaryBuf[3] = "~";
        };
        if (LAB_L(0) && LDA(1) && CMP(2) && ($mod.TemporaryBuf[3] === "\tbeq @+") && JMP(4) && ($mod.TemporaryBuf[5] === "@")) {
          $mod.TemporaryBuf[3] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          $mod.TemporaryBuf[4] = "~";
          $mod.TemporaryBuf[5] = "~";
        };
        if (LAB_L(0) && LDA(1) && CMP(2) && JNE(3) && ($mod.TemporaryBuf[4] === "@")) {
          $mod.TemporaryBuf[4] = "~";
        };
        if (LAB_L(0) && CMP(1) && ($mod.TemporaryBuf[2] === "\tbeq @+") && JMP(3) && ($mod.TemporaryBuf[4] === "@")) {
          $mod.TemporaryBuf[2] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[3],6,256);
          $mod.TemporaryBuf[3] = "~";
          $mod.TemporaryBuf[4] = "~";
        };
        if (LAB_L(0) && CMP(1) && JNE(2) && ($mod.TemporaryBuf[3] === "@")) {
          $mod.TemporaryBuf[3] = "~";
        };
        if ((SKIP(0) === false) && ($mod.TemporaryBuf[1] === "\tbeq @+") && JMP(2) && ($mod.TemporaryBuf[3] === "@")) {
          $mod.TemporaryBuf[1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = "~";
        };
        if (LAB_L(0) && LDA(1) && (pas.System.Pos("\tclc",$mod.TemporaryBuf[2]) === 1) && (pas.System.Pos("adc ",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("adc ",$mod.TemporaryBuf[4]) > 0) && ($mod.TemporaryBuf[5] === "\tbcs @+") && JMP(6) && ($mod.TemporaryBuf[7] === "@")) {
          $mod.TemporaryBuf[5] = "\tjcc " + pas.System.Copy($mod.TemporaryBuf[6],6,256);
          $mod.TemporaryBuf[6] = "~";
          $mod.TemporaryBuf[7] = "~";
        };
        if (LAB_L(0) && (pas.System.Pos("\tclc",$mod.TemporaryBuf[1]) === 1) && (pas.System.Pos("adc ",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("adc ",$mod.TemporaryBuf[3]) > 0) && ($mod.TemporaryBuf[4] === "\tbcs @+") && JMP(5) && ($mod.TemporaryBuf[6] === "@")) {
          $mod.TemporaryBuf[4] = "\tjcc " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          $mod.TemporaryBuf[5] = "~";
          $mod.TemporaryBuf[6] = "~";
        };
        if ((SKIP(0) === false) && ($mod.TemporaryBuf[1] === "\tbcs @+") && JMP(2) && ($mod.TemporaryBuf[3] === "@")) {
          $mod.TemporaryBuf[1] = "\tjcc " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && ($mod.TemporaryBuf[1] === "\tbcc @+") && JMP(2) && ($mod.TemporaryBuf[3] === "@")) {
          $mod.TemporaryBuf[1] = "\tjcs " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = "~";
        };
        if (LDA(0) && SKIP(1) && ($mod.TemporaryBuf[2] === "") && OPTI(3) && ($mod.TemporaryBuf[4] === "") && ($mod.TemporaryBuf[5] === "\tlda #$00") && SUB(6) && STA(7)) if ((pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) && (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[7],6,256)) && (pas.System.Copy($mod.TemporaryBuf[1],6,256) === $mod.TemporaryBuf[8])) {
          $mod.TemporaryBuf[5] = "\teor #$FF";
          $mod.TemporaryBuf[6] = "\tadd #$01";
          if ($mod.TemporaryBuf[12] === $mod.TemporaryBuf[0]) $mod.TemporaryBuf[12] = "~";
        };
        if (LDA(0) && SKIP(1) && ($mod.TemporaryBuf[2] === "") && OPTI(3) && ($mod.TemporaryBuf[4] === "") && ($mod.TemporaryBuf[5] === $mod.TemporaryBuf[0])) {
          $mod.TemporaryBuf[5] = "~";
        };
        if (STY(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4) && ($mod.TemporaryBuf[5] === ("\tsta " + pas.System.Copy($mod.TemporaryBuf[0],6,256)))) {
          $mod.TemporaryBuf[0] = "~";
        };
        if (MVA_IM(0) && MVA_IM(1) && MVA_IM(2)) if ((pas.System.Copy($mod.TemporaryBuf[0],6,4) === pas.System.Copy($mod.TemporaryBuf[1],6,4)) && (pas.System.Copy($mod.TemporaryBuf[1],6,4) === pas.System.Copy($mod.TemporaryBuf[2],6,4))) {
          if (MVA_IM(3)) {
            if (pas.System.Copy($mod.TemporaryBuf[1],6,4) === pas.System.Copy($mod.TemporaryBuf[3],6,4)) $mod.TemporaryBuf[3] = "\tsta" + pas.System.Copy($mod.TemporaryBuf[3],10,256);
          };
          $mod.TemporaryBuf[1] = "\tsta" + pas.System.Copy($mod.TemporaryBuf[1],10,256);
          $mod.TemporaryBuf[2] = "\tsta" + pas.System.Copy($mod.TemporaryBuf[2],10,256);
        };
        if (MVA_IM(0) && MVA_IM(1)) if (pas.System.Copy($mod.TemporaryBuf[0],6,4) === pas.System.Copy($mod.TemporaryBuf[1],6,4)) {
          if (MVA_IM(2)) {
            if (pas.System.Copy($mod.TemporaryBuf[1],6,4) === pas.System.Copy($mod.TemporaryBuf[2],6,4)) $mod.TemporaryBuf[2] = "\tsta" + pas.System.Copy($mod.TemporaryBuf[2],10,256);
          };
          $mod.TemporaryBuf[1] = "\tsta" + pas.System.Copy($mod.TemporaryBuf[1],10,256);
        };
        if (MVA(0) && MVA(1) && ($mod.TemporaryBuf[2] === "") && OPTI(3) && ($mod.TemporaryBuf[4] === "") && LDA(5)) if (pas.System.Pos(pas.System.Copy($mod.TemporaryBuf[5],5,256),$mod.TemporaryBuf[0]) > 6) {
          tmp = $mod.TemporaryBuf[0];
          p = tmp.length;
          while (tmp.charAt(p - 1) !== " ") p -= 1;
          tmp = pas.System.Copy(tmp,p + 1,256);
          if (pas.System.Copy($mod.TemporaryBuf[5],6,256) === tmp) {
            $mod.TemporaryBuf[5] = "~";
            tmp = $mod.TemporaryBuf[0];
            $mod.TemporaryBuf[0] = $mod.TemporaryBuf[1];
            $mod.TemporaryBuf[1] = tmp;
          };
        };
        if (MVA(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4)) if (pas.System.Pos(pas.System.Copy($mod.TemporaryBuf[4],5,256),$mod.TemporaryBuf[0]) > 6) {
          tmp = $mod.TemporaryBuf[0];
          p = tmp.length;
          while (tmp.charAt(p - 1) !== " ") p -= 1;
          tmp = pas.System.Copy(tmp,p + 1,256);
          if (pas.System.Copy($mod.TemporaryBuf[4],6,256) === tmp) $mod.TemporaryBuf[4] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\ttya") && ($mod.TemporaryBuf[1] === "\tadc #$00") && STA(2) && (STA_STACK(2) === false)) {
          $mod.TemporaryBuf[0] = "\tscc";
          $mod.TemporaryBuf[1] = "\tiny";
          $mod.TemporaryBuf[2] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "\tscc") && INC_(2) && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && LDA(6)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
          $mod.TemporaryBuf[6] = "~";
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          $mod.TemporaryBuf[4] = "~";
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDY(4)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          if (STY(5)) {
            $mod.TemporaryBuf[4] = "~";
            $mod.TemporaryBuf[5] = "\tsta " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          } else $mod.TemporaryBuf[4] = "\ttay";
        };
        if (INC_(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4) && (JEQ(5) || JNE(5))) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          $mod.TemporaryBuf[4] = "~";
        };
        if (DEC_(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4) && JNE(5)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          $mod.TemporaryBuf[4] = "~";
        };
        if (STA(0) && LDA(1) && STA(2) && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && (pas.System.Pos("mwy ",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos(" :bp2",$mod.TemporaryBuf[6]) > 0)) if ((pas.System.Pos($mod.TemporaryBuf[0],$mod.TemporaryBuf[2]) > 0) && (("\tmwy " + pas.System.Copy($mod.TemporaryBuf[0],6,256) + " :bp2") === $mod.TemporaryBuf[6])) {
          $mod.TemporaryBuf[6] = "~";
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[4];
          $mod.TemporaryBuf[4] = $mod.TemporaryBuf[3];
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = "\tsta :bp2";
          $mod.TemporaryBuf[4] = "\tsta :bp2+1";
        };
        if (($mod.TemporaryBuf[0] === "\timulCL") && ($mod.TemporaryBuf[1] === "\teif") && ($mod.TemporaryBuf[2] === "\tlda :eax") && STA(3) && ($mod.TemporaryBuf[4] === "\tlda :eax+1") && STA(5) && ($mod.TemporaryBuf[6] === "") && OPTI(7) && ($mod.TemporaryBuf[8] === "")) {
          $mod.TemporaryBuf[4] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[5];
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[3];
          $mod.TemporaryBuf[3] = "~";
          if (LDA(9) && ADD(10) && (pas.System.Copy($mod.TemporaryBuf[5],6,256) === pas.System.Copy($mod.TemporaryBuf[10],6,256))) {
            $mod.TemporaryBuf[10] = "~";
            $mod.TemporaryBuf[9] = "\tadd " + pas.System.Copy($mod.TemporaryBuf[9],6,256);
          };
        };
        if (LAB_L(0) && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && LDA(4) && SKIP(5) && ($mod.TemporaryBuf[6] === "") && OPTI(7) && ($mod.TemporaryBuf[8] === "") && LDA(9) && ADD_SUB(10) && STA(11) && ($mod.TemporaryBuf[12] === $mod.TemporaryBuf[4])) {
          $mod.TemporaryBuf[4] = "\tldy " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          $mod.TemporaryBuf[12] = "\ttya";
        };
        if (LDA(0) && SKIP(1) && ($mod.TemporaryBuf[2] === "") && OPTI(3) && ($mod.TemporaryBuf[4] === "") && LDA(5) && LDY(6)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
          $mod.TemporaryBuf[0] = $mod.TemporaryBuf[6];
          $mod.TemporaryBuf[6] = "~";
        };
        if (LDA(0) && STA_STACK(1) && LDA(2) && ($mod.TemporaryBuf[3] === "\tasl @") && (pas.System.Pos("rol :STACK",$mod.TemporaryBuf[4]) > 0) && STA(5) && LDA_STACK(6) && STA(7) && (IY(7) === false) && ($mod.TemporaryBuf[9] !== "; --- WhileProlog")) if ((pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) && (pas.System.Copy($mod.TemporaryBuf[4],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) && (pas.System.Pos($mod.TemporaryBuf[5],$mod.TemporaryBuf[7]) > 0)) {
          $mod.TemporaryBuf[1] = $mod.TemporaryBuf[7];
          $mod.TemporaryBuf[4] = "\trol " + pas.System.Copy($mod.TemporaryBuf[7],6,256);
          $mod.TemporaryBuf[6] = "~";
          $mod.TemporaryBuf[7] = "~";
        };
        if (LDA(0) && ($mod.TemporaryBuf[0] === $mod.TemporaryBuf[4]) && ($mod.TemporaryBuf[1] === "\tsta :ecx") && LDA(2) && ($mod.TemporaryBuf[2] === $mod.TemporaryBuf[6]) && ($mod.TemporaryBuf[3] === "\tsta :ecx+1") && ($mod.TemporaryBuf[5] === "\tsta :eax") && ($mod.TemporaryBuf[7] === "\tsta :eax+1")) {
          $mod.TemporaryBuf[6] = "\tsta :ecx+1";
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[4] = "\tsta :eax";
          $mod.TemporaryBuf[3] = "\tsta :ecx";
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[0];
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[0] = "~";
        };
      };
      function opt_TEMP_CMP() {
        var p = 0;
        if (LDA(0) && CMP(1) && SKIP(2) && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && ($mod.TemporaryBuf[6] === $mod.TemporaryBuf[0]) && (SKIP(7) === false)) {
          $mod.TemporaryBuf[6] = "~";
          p = 7;
          while (CMP(p) && SKIP(p + 1) && ($mod.TemporaryBuf[p + 2] === $mod.TemporaryBuf[0]) && (SKIP(p + 3) === false)) {
            $mod.TemporaryBuf[p + 2] = "~";
            p += 3;
          };
        };
        if (LDA(0) && CMP(1) && SKIP(2) && ($mod.TemporaryBuf[3] === $mod.TemporaryBuf[0]) && (SKIP(4) === false)) {
          $mod.TemporaryBuf[3] = "~";
          p = 4;
          while (CMP(p) && SKIP(p + 1) && ($mod.TemporaryBuf[p + 2] === $mod.TemporaryBuf[0]) && (SKIP(p + 3) === false)) {
            $mod.TemporaryBuf[p + 2] = "~";
            p += 3;
          };
        };
        if (LDA(0) && ($mod.TemporaryBuf[0] === $mod.TemporaryBuf[3]) && CMP(1) && SKIP(2) && (JEQ(4) || JNE(4))) {
          $mod.TemporaryBuf[3] = "\tcmp #$00";
        };
        if (LDA(0) && CMP(1) && SKIP(2) && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && LDY(6) && LDA(7)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
          if ((IY(0) === false) && (IY(1) === false)) {
            $mod.TemporaryBuf[0] = "\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
            $mod.TemporaryBuf[1] = "\tcpy " + pas.System.Copy($mod.TemporaryBuf[1],6,256);
            $mod.TemporaryBuf[6] = "~";
          } else $mod.TemporaryBuf[6] = "\ttay";
        };
        if (LDA(0) && CMP(1) && SKIP(2) && LDY(3) && LDA(4)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[3],6,256)) {
          if ((IY(0) === false) && (IY(1) === false)) {
            $mod.TemporaryBuf[0] = "\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
            $mod.TemporaryBuf[1] = "\tcpy " + pas.System.Copy($mod.TemporaryBuf[1],6,256);
            $mod.TemporaryBuf[3] = "~";
          } else $mod.TemporaryBuf[3] = "\ttay";
        };
        if (STA_STACK(0) && ($mod.TemporaryBuf[1] === "\tldy #1") && LDA_STACK(2) && (AND_ORA_EOR(3) || CMP(3))) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[2],6,256)) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && LDA(1) && CMP(2) && ($mod.TemporaryBuf[3] === "\tbcs @+") && ($mod.TemporaryBuf[4] === "\tdey") && ($mod.TemporaryBuf[5] === "@") && ($mod.TemporaryBuf[6] === "\ttya")) {
          $mod.TemporaryBuf[0] = "";
          $mod.TemporaryBuf[3] = "\tlda #$00";
          $mod.TemporaryBuf[4] = "\trol @";
          $mod.TemporaryBuf[5] = "~";
          $mod.TemporaryBuf[6] = "~";
        };
      };
      function opt_TEMP_CMP_0() {
        var p = 0;
        if ((($mod.TemporaryBuf[2] === "\tcmp #$00") || LDA(2)) && (IFTMP(2) === false) && JNE_L(3) && (LAB_L(4) === false)) {
          for (p = 4; p <= 511; p++) if (LDA(p)) {
            if ($mod.TemporaryBuf[p] === "\tlda #$00") $mod.TemporaryBuf[p] = "~";
            break;
          } else if ((pas.System.Pos("#asm:",$mod.TemporaryBuf[p]) === 1) || LAB_L(p) || JSR(p) || (pas.System.Pos("\t.if",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.LOCAL ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t@print",$mod.TemporaryBuf[p]) > 0) || ($mod.TemporaryBuf[p] === "\ttya")) break;
        };
        if (STA_STACK(0) && ($mod.TemporaryBuf[1] === "\tldy #1") && LDA_STACK(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && (($mod.TemporaryBuf[4] === "\tbeq @+") || ($mod.TemporaryBuf[4] === "\tbne @+")) && ($mod.TemporaryBuf[5] === "\tdey") && ($mod.TemporaryBuf[6] === "@") && (($mod.TemporaryBuf[7] === "\ttya") || STY(7))) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[2],6,256)) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && LDA(1) && (LDA_STACK(1) === false) && ($mod.TemporaryBuf[2] === "\tcmp #$00") && (($mod.TemporaryBuf[3] === "\tbeq @+") || ($mod.TemporaryBuf[3] === "\tbne @+")) && ($mod.TemporaryBuf[4] === "\tdey") && ($mod.TemporaryBuf[5] === "@") && (($mod.TemporaryBuf[6] === "\ttya") || STY(6))) {
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && AND_ORA_EOR(1) && ($mod.TemporaryBuf[2] === "\tcmp #$00") && (($mod.TemporaryBuf[3] === "\tbeq @+") || ($mod.TemporaryBuf[3] === "\tbne @+")) && ($mod.TemporaryBuf[4] === "\tdey") && ($mod.TemporaryBuf[5] === "@") && (($mod.TemporaryBuf[6] === "\ttya") || STY(6))) {
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[2] === "\tldy #1") && LDA(3) && ($mod.TemporaryBuf[4] === "\tcmp #$00") && ($mod.TemporaryBuf[5] === "\tbne @+") && LDA(6) && ($mod.TemporaryBuf[7] === "\tcmp #$00") && ($mod.TemporaryBuf[8] === "@") && (($mod.TemporaryBuf[9] === "\tbeq @+") || ($mod.TemporaryBuf[9] === "\tbne @+")) && ($mod.TemporaryBuf[10] === "\tdey") && ($mod.TemporaryBuf[11] === "@") && (($mod.TemporaryBuf[12] === "\ttya") || STY(12))) {
          $mod.TemporaryBuf[4] = "\tora " + pas.System.Copy($mod.TemporaryBuf[6],6,256);
          $mod.TemporaryBuf[5] = "~";
          $mod.TemporaryBuf[6] = "~";
          $mod.TemporaryBuf[7] = "~";
          $mod.TemporaryBuf[8] = "~";
        };
        if (LDA(2) && STA(3) && ($mod.TemporaryBuf[4] === "\tcmp #$00") && (($mod.TemporaryBuf[5] === "\tbeq @+") || ($mod.TemporaryBuf[5] === "\tbne @+")) && JMP(6) && ($mod.TemporaryBuf[7] === "@")) {
          $mod.TemporaryBuf[4] = "~";
        };
        if (($mod.TemporaryBuf[2] === "\tlda (:bp2),y") && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && ($mod.TemporaryBuf[5] === "\tdey") && ($mod.TemporaryBuf[6] === "\tlda (:bp2),y") && CMP(7) && ($mod.TemporaryBuf[8] === "\tbne @+") && ($mod.TemporaryBuf[9] === "\tdey") && ($mod.TemporaryBuf[10] === "\tlda (:bp2),y") && CMP(11) && ($mod.TemporaryBuf[12] === "\tbne @+") && ($mod.TemporaryBuf[13] === "\tdey") && ($mod.TemporaryBuf[14] === "\tlda (:bp2),y") && CMP(15) && ($mod.TemporaryBuf[16] === "@") && (JEQ(17) || JNE(17)) && (SKIP(18) === false)) {
          $mod.TemporaryBuf[3] = "~";
        };
        if (($mod.TemporaryBuf[2] === "\tlda (:bp2),y") && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && ($mod.TemporaryBuf[5] === "\tdey") && ($mod.TemporaryBuf[6] === "\tlda (:bp2),y") && CMP(7) && ($mod.TemporaryBuf[8] === "\tbne @+") && ($mod.TemporaryBuf[9] === "\tdey") && ($mod.TemporaryBuf[10] === "\tlda (:bp2),y") && CMP(11) && ($mod.TemporaryBuf[12] === "@") && (JEQ(13) || JNE(13)) && (SKIP(14) === false)) {
          $mod.TemporaryBuf[3] = "~";
        };
        if (($mod.TemporaryBuf[2] === "\tlda (:bp2),y") && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && ($mod.TemporaryBuf[5] === "\tdey") && ($mod.TemporaryBuf[6] === "\tlda (:bp2),y") && CMP(7) && ($mod.TemporaryBuf[8] === "@") && (JEQ(9) || JNE(9)) && (SKIP(10) === false)) {
          $mod.TemporaryBuf[3] = "~";
        };
        if (LDA(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP(6) && ($mod.TemporaryBuf[7] === "\tbne @+") && LDA(8) && CMP(9) && ($mod.TemporaryBuf[10] === "\tbne @+") && LDA(11) && CMP(12) && ($mod.TemporaryBuf[13] === "@") && (JEQ(14) || JNE(14)) && (SKIP(15) === false)) {
          $mod.TemporaryBuf[3] = "~";
          if (($mod.TemporaryBuf[6] === "\tcmp #$00") && ($mod.TemporaryBuf[9] === "\tcmp #$00") && ($mod.TemporaryBuf[12] === "\tcmp #$00")) {
            $mod.TemporaryBuf[6] = "~";
            $mod.TemporaryBuf[9] = "~";
            $mod.TemporaryBuf[12] = "~";
            if (JEQ(14)) {
              $mod.TemporaryBuf[13] = $mod.TemporaryBuf[14];
              $mod.TemporaryBuf[14] = "@";
            };
          };
        };
        if (LDA(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && LDA(5) && ($mod.TemporaryBuf[6] === "\tcmp #$00") && ($mod.TemporaryBuf[7] === "\tbne @+") && LDA(8) && ($mod.TemporaryBuf[9] === "\tcmp #$00") && ($mod.TemporaryBuf[10] === "\tbne @+") && LDA(11) && ($mod.TemporaryBuf[12] === "\tcmp #$00") && ($mod.TemporaryBuf[13] === "@") && (($mod.TemporaryBuf[14] === "\tbeq @+") || ($mod.TemporaryBuf[14] === "\tbne @+")) && ($mod.TemporaryBuf[15] === "\tdey") && ($mod.TemporaryBuf[16] === "@") && (($mod.TemporaryBuf[17] === "\ttya") || STY(17))) {
          $mod.TemporaryBuf[3] = "~";
          $mod.TemporaryBuf[6] = "~";
          $mod.TemporaryBuf[9] = "~";
          $mod.TemporaryBuf[12] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && LDA(1) && ($mod.TemporaryBuf[2] === "\tcmp #$00") && ($mod.TemporaryBuf[3] === "\tbne @+") && LDA(4) && CMP(5) && ($mod.TemporaryBuf[6] === "@") && ($mod.TemporaryBuf[7] === "\tbcs @+") && ($mod.TemporaryBuf[8] === "\tdey") && ($mod.TemporaryBuf[9] === "@") && (($mod.TemporaryBuf[10] === "\ttya") || STY(10))) {
          $mod.TemporaryBuf[2] = "~";
          $mod.TemporaryBuf[6] = "~";
        };
        if (LDA(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP(6) && ($mod.TemporaryBuf[7] === "\tbne @+") && LDA(8) && CMP(9) && ($mod.TemporaryBuf[10] === "@") && (JEQ(11) || JNE(11)) && (SKIP(12) === false)) {
          $mod.TemporaryBuf[3] = "~";
        };
        if (LDA(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP(6) && ($mod.TemporaryBuf[7] === "@") && (JEQ(8) || JNE(8)) && (SKIP(9) === false)) {
          $mod.TemporaryBuf[3] = "~";
        };
        if (LDA(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "@") && (JEQ(5) || JNE(5)) && (SKIP(6) === false)) {
          $mod.TemporaryBuf[3] = "~";
        };
      };
      function opt_TEMP_WHILE() {
        var p = 0;
        if (($mod.TemporaryBuf[2] === "; --- WhileProlog") && STA(0) && JMP(3) && LAB_L(4)) {
          for (p = 5; p <= 510; p++) if (($mod.TemporaryBuf[p] === $mod.TemporaryBuf[0]) && LAB_L(p + 1) && ($mod.TemporaryBuf[p + 1] === pas.System.Copy($mod.TemporaryBuf[3],6,256))) {
            $mod.TemporaryBuf[p] = $mod.TemporaryBuf[p + 1];
            $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[0];
            $mod.TemporaryBuf[0] = "~";
            break;
          };
        };
        if (($mod.TemporaryBuf[2] === "; --- WhileProlog") && STA(0) && JMP(3) && LAB_L(4)) {
          tmp = pas.System.Copy($mod.TemporaryBuf[0],6,256);
          for (p = 5; p <= 505; p++) if ((SKIP(p - 1) === false) && (INC_(p) || DEC_(p)) && ($mod.TemporaryBuf[p + 1] === pas.System.Copy($mod.TemporaryBuf[3],6,256)) && OPTI(p + 3) && (tmp === pas.System.Copy($mod.TemporaryBuf[p],6,256)) && ($mod.TemporaryBuf[p + 5] === ("\tlda " + tmp)) && ($mod.TemporaryBuf[p + 6] === ("\tjne " + $mod.TemporaryBuf[4]))) {
            $mod.TemporaryBuf[p + 5] = "~";
            break;
          };
        };
        if (($mod.TemporaryBuf[3] === "; --- WhileProlog") && LDA_IM(0) && (GetBYTE(0) < 128) && STA(1) && ($mod.TemporaryBuf[2] === "") && JMP(4) && LAB_L(5)) {
          tmp = pas.System.Copy($mod.TemporaryBuf[4],6,256);
          for (p = 7; p <= 505; p++) if ($mod.TemporaryBuf[p] === tmp) {
            if ((SKIP(p - 2) === false) && ($mod.TemporaryBuf[p - 1] === ("\tdec " + pas.System.Copy($mod.TemporaryBuf[1],6,256))) && ($mod.TemporaryBuf[p + 1] === "") && OPTI(p + 2) && ($mod.TemporaryBuf[p + 3] === "") && ($mod.TemporaryBuf[p + 4] === ("\tlda " + pas.System.Copy($mod.TemporaryBuf[p - 1],6,256))) && ($mod.TemporaryBuf[p + 5] === "\tcmp #$FF") && JNE(p + 6)) {
              $mod.TemporaryBuf[p + 4] = "~";
              $mod.TemporaryBuf[p + 5] = "~";
              $mod.TemporaryBuf[p + 6] = "\tjpl " + pas.System.Copy($mod.TemporaryBuf[p + 6],6,256);
            };
            break;
          };
        };
        if (($mod.TemporaryBuf[2] === "; --- WhileProlog") && ($mod.TemporaryBuf[1] === "") && JMP(3) && LAB_L(4) && ($mod.TemporaryBuf[5] === "") && OPTI(6) && ($mod.TemporaryBuf[7] === "") && LDY_IM(8)) {
          yes = true;
          tmp = pas.System.Copy($mod.TemporaryBuf[3],6,256);
          for (p = 9; p <= 511; p++) if ($mod.TemporaryBuf[p] === tmp) {
            if (yes) {
              $mod.TemporaryBuf[1] = $mod.TemporaryBuf[8];
              $mod.TemporaryBuf[8] = $mod.TemporaryBuf[7];
              $mod.TemporaryBuf[7] = $mod.TemporaryBuf[6];
              $mod.TemporaryBuf[6] = $mod.TemporaryBuf[5];
              $mod.TemporaryBuf[5] = $mod.TemporaryBuf[4];
              $mod.TemporaryBuf[4] = $mod.TemporaryBuf[3];
              $mod.TemporaryBuf[3] = $mod.TemporaryBuf[2];
              $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
              $mod.TemporaryBuf[1] = "";
            };
            break;
          } else if (fail(p)) yes = false;
        };
        if (($mod.TemporaryBuf[2] === "; --- WhileProlog") && ($mod.TemporaryBuf[1] === "") && JMP(3) && LAB_L(4) && ($mod.TemporaryBuf[5] === "") && OPTI(6) && ($mod.TemporaryBuf[7] === "") && (LDY_IM(8) === false)) {
          yes = true;
          tmp = pas.System.Copy($mod.TemporaryBuf[3],6,256);
          for (p = 8; p <= 506; p++) if (($mod.TemporaryBuf[p - 1] === ("\tdec " + pas.System.Copy($mod.TemporaryBuf[p + 4],6,256))) && ($mod.TemporaryBuf[p] === tmp) && ($mod.TemporaryBuf[p + 1] === "") && OPTI(p + 2) && ($mod.TemporaryBuf[p + 3] === "") && LDA(p + 4) && ($mod.TemporaryBuf[p + 5] === ("\tjne " + $mod.TemporaryBuf[4]))) {
            if (yes) {
              $mod.TemporaryBuf[1] = $mod.TemporaryBuf[p + 4];
              $mod.TemporaryBuf[p + 4] = $mod.TemporaryBuf[p + 5];
              $mod.TemporaryBuf[p + 5] = "~";
            };
            break;
          } else if (fail(p)) yes = false;
        };
      };
      function opt_TEMP_FOR() {
        var p = 0;
        if (INC_(1) && ($mod.TemporaryBuf[2] === "\tsne") && INC_(3) && ($mod.TemporaryBuf[4] === "\tseq") && JMP(5) && LAB_L(6)) if (pas.System.Pos($mod.TemporaryBuf[1],$mod.TemporaryBuf[3]) > 0) {
          $mod.TemporaryBuf[2] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          $mod.TemporaryBuf[5] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          $mod.TemporaryBuf[4] = "~";
        };
        if (DEC_(1) && LDA(2) && ($mod.TemporaryBuf[3] === "\tcmp #$FF") && ($mod.TemporaryBuf[4] === "\tseq") && JMP(5) && LAB_L(6)) if (pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[2],6,256)) {
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[2] = "\tbeq " + $mod.TemporaryBuf[6];
          $mod.TemporaryBuf[4] = "~";
        };
        if (LDA(1) && ($mod.TemporaryBuf[2] === "\tbne @+") && DEC_(3) && ($mod.TemporaryBuf[4] === "@") && DEC_(5) && LDA(6) && ($mod.TemporaryBuf[7] === "\tcmp #$FF") && ($mod.TemporaryBuf[8] === "\tseq") && JMP(9) && LAB_L(10)) if (pas.System.Copy($mod.TemporaryBuf[3],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
          $mod.TemporaryBuf[7] = $mod.TemporaryBuf[5];
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[3];
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[6];
          $mod.TemporaryBuf[4] = "\tbeq " + $mod.TemporaryBuf[10];
          $mod.TemporaryBuf[6] = "@";
          $mod.TemporaryBuf[8] = "~";
        };
        if (LDA(0) && STA(1) && ($mod.TemporaryBuf[2] === "") && LAB_L(3) && ($mod.TemporaryBuf[4] === "; --- ForToDoCondition") && LDY(5) && LDA(6) && STA(7) && ($mod.TemporaryBuf[9] === "; --- ForToDoEpilog") && INC_(10) && ($mod.TemporaryBuf[11] === "\tseq") && ($mod.TemporaryBuf[12] === ("\tjmp " + $mod.TemporaryBuf[3])) && LAB_L(13)) if ((pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[5],6,256)) && (pas.System.Copy($mod.TemporaryBuf[5],6,256) === pas.System.Copy($mod.TemporaryBuf[10],6,256))) {
          $mod.TemporaryBuf[0] = "\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
          $mod.TemporaryBuf[1] = "~";
          if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
            $mod.TemporaryBuf[1] = "\ttya"}
           else $mod.TemporaryBuf[1] = $mod.TemporaryBuf[6];
          $mod.TemporaryBuf[10] = "\tiny";
          $mod.TemporaryBuf[11] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[12],6,256);
          $mod.TemporaryBuf[12] = $mod.TemporaryBuf[13];
          if (LAB_B(14)) {
            $mod.TemporaryBuf[13] = $mod.TemporaryBuf[14];
            $mod.TemporaryBuf[14] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          } else $mod.TemporaryBuf[13] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          if (pas.System.Copy($mod.TemporaryBuf[5],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
            $mod.TemporaryBuf[5] = "\ttya";
            $mod.TemporaryBuf[1] = "~";
          } else $mod.TemporaryBuf[5] = "~";
          $mod.TemporaryBuf[6] = "~";
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition") && LDY(4) && LDA(5) && ADD_SUB(6) && STA(7) && (($mod.TemporaryBuf[8] === "\tscc") || ($mod.TemporaryBuf[8] === "\tscs")) && (INC_(9) || DEC_(9)) && ($mod.TemporaryBuf[11] === "; --- ForToDoEpilog") && INC_(12) && ($mod.TemporaryBuf[13] === "\tseq") && ($mod.TemporaryBuf[14] === ("\tjmp " + $mod.TemporaryBuf[2])) && LAB_L(15)) if ((pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) && (pas.System.Copy($mod.TemporaryBuf[4],6,256) === pas.System.Copy($mod.TemporaryBuf[12],6,256))) {
          $mod.TemporaryBuf[0] = "\ttay";
          $mod.TemporaryBuf[12] = "\tiny";
          $mod.TemporaryBuf[13] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[14],6,256);
          $mod.TemporaryBuf[14] = $mod.TemporaryBuf[15];
          if (LAB_B(16)) {
            $mod.TemporaryBuf[15] = $mod.TemporaryBuf[16];
            $mod.TemporaryBuf[16] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          } else $mod.TemporaryBuf[15] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          $mod.TemporaryBuf[4] = $mod.TemporaryBuf[5];
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[6];
          $mod.TemporaryBuf[6] = $mod.TemporaryBuf[7];
          $mod.TemporaryBuf[7] = $mod.TemporaryBuf[8];
          $mod.TemporaryBuf[8] = $mod.TemporaryBuf[9];
          $mod.TemporaryBuf[9] = $mod.TemporaryBuf[10];
          $mod.TemporaryBuf[10] = $mod.TemporaryBuf[11];
          $mod.TemporaryBuf[11] = $mod.TemporaryBuf[12];
          $mod.TemporaryBuf[12] = $mod.TemporaryBuf[13];
          $mod.TemporaryBuf[13] = $mod.TemporaryBuf[14];
          $mod.TemporaryBuf[14] = $mod.TemporaryBuf[15];
          $mod.TemporaryBuf[15] = $mod.TemporaryBuf[16];
          if (pas.System.Copy($mod.TemporaryBuf[4],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
            $mod.TemporaryBuf[1] = $mod.TemporaryBuf[4];
            $mod.TemporaryBuf[15] = $mod.TemporaryBuf[6];
            $mod.TemporaryBuf[4] = "~";
            $mod.TemporaryBuf[6] = "~";
          };
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition") && LDY(4) && LDA(5) && ADD_SUB(6) && ($mod.TemporaryBuf[7] === "\tsta :bp+1") && LDA(8) && ($mod.TemporaryBuf[9] === "\tsta (:bp),y") && ($mod.TemporaryBuf[11] === "; --- ForToDoEpilog") && INC_(12) && ($mod.TemporaryBuf[13] === "\tseq") && ($mod.TemporaryBuf[14] === ("\tjmp " + $mod.TemporaryBuf[2])) && LAB_L(15)) if ((pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) && (pas.System.Copy($mod.TemporaryBuf[4],6,256) === pas.System.Copy($mod.TemporaryBuf[12],6,256))) {
          $mod.TemporaryBuf[0] = "\ttay";
          $mod.TemporaryBuf[12] = "\tiny";
          $mod.TemporaryBuf[13] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[14],6,256);
          $mod.TemporaryBuf[14] = $mod.TemporaryBuf[15];
          if (LAB_B(16)) {
            $mod.TemporaryBuf[15] = $mod.TemporaryBuf[16];
            $mod.TemporaryBuf[16] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          } else $mod.TemporaryBuf[15] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          $mod.TemporaryBuf[4] = "~";
        };
        if (($mod.TemporaryBuf[0] === "") && LAB_L(1) && ($mod.TemporaryBuf[2] === "; --- ForToDoCondition") && ($mod.TemporaryBuf[3] === "\tldy #$00") && LDA(4) && ADD_SUB(5) && STA(6) && (($mod.TemporaryBuf[7] === "\tscc") || ($mod.TemporaryBuf[7] === "\tscs")) && (INC_(8) || DEC_(8)) && ($mod.TemporaryBuf[10] === "; --- ForToDoEpilog") && INC_(11) && ($mod.TemporaryBuf[12] === "\tsne") && INC_(13) && ($mod.TemporaryBuf[14] === "\tseq") && ($mod.TemporaryBuf[15] === ("\tjmp " + $mod.TemporaryBuf[1])) && LAB_L(16)) if (pas.System.Copy($mod.TemporaryBuf[5],6,256) === ("(" + pas.System.Copy($mod.TemporaryBuf[11],6,256) + "),y")) {
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = "\tldy #$00";
          $mod.TemporaryBuf[12] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
          $mod.TemporaryBuf[14] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
          $mod.TemporaryBuf[15] = $mod.TemporaryBuf[16];
          if (LAB_B(17)) {
            $mod.TemporaryBuf[16] = $mod.TemporaryBuf[17];
            $mod.TemporaryBuf[17] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[11],6,256);
          } else $mod.TemporaryBuf[16] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[11],6,256);
          $mod.TemporaryBuf[11] = "\tiny";
          if (pas.System.Copy($mod.TemporaryBuf[4],6,256) === pas.System.Copy($mod.TemporaryBuf[6],6,256)) {
            $mod.TemporaryBuf[0] = $mod.TemporaryBuf[4];
            $mod.TemporaryBuf[4] = $mod.TemporaryBuf[5];
            $mod.TemporaryBuf[5] = $mod.TemporaryBuf[6];
            $mod.TemporaryBuf[6] = $mod.TemporaryBuf[7];
            $mod.TemporaryBuf[7] = $mod.TemporaryBuf[8];
            $mod.TemporaryBuf[8] = $mod.TemporaryBuf[9];
            $mod.TemporaryBuf[9] = $mod.TemporaryBuf[10];
            $mod.TemporaryBuf[10] = $mod.TemporaryBuf[11];
            $mod.TemporaryBuf[11] = $mod.TemporaryBuf[12];
            $mod.TemporaryBuf[12] = $mod.TemporaryBuf[13];
            $mod.TemporaryBuf[13] = $mod.TemporaryBuf[14];
            $mod.TemporaryBuf[14] = $mod.TemporaryBuf[15];
            $mod.TemporaryBuf[15] = $mod.TemporaryBuf[16];
            $mod.TemporaryBuf[16] = $mod.TemporaryBuf[17];
            $mod.TemporaryBuf[17] = $mod.TemporaryBuf[18];
          };
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition") && LDA(4) && CMP(5) && SKIP(6) && LDY(7) && LDA(8) && STA(9) && ($mod.TemporaryBuf[11] === "; --- ForToDoEpilog") && INC_(12) && ($mod.TemporaryBuf[13] === "\tseq") && ($mod.TemporaryBuf[14] === ("\tjmp " + $mod.TemporaryBuf[2])) && LAB_L(15)) if ((pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) && (pas.System.Copy($mod.TemporaryBuf[4],6,256) === pas.System.Copy($mod.TemporaryBuf[7],6,256)) && (pas.System.Copy($mod.TemporaryBuf[7],6,256) === pas.System.Copy($mod.TemporaryBuf[12],6,256))) {
          $mod.TemporaryBuf[0] = "\ttay";
          $mod.TemporaryBuf[4] = "~";
          $mod.TemporaryBuf[5] = "\tcpy " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
          $mod.TemporaryBuf[12] = "\tiny";
          $mod.TemporaryBuf[13] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[14],6,256);
          $mod.TemporaryBuf[14] = $mod.TemporaryBuf[15];
          if (LAB_B(16)) {
            $mod.TemporaryBuf[15] = $mod.TemporaryBuf[16];
            $mod.TemporaryBuf[16] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[7],6,256);
          } else $mod.TemporaryBuf[15] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[7],6,256);
          $mod.TemporaryBuf[7] = "~";
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition") && LDA(4) && CMP(5) && SKIP(6) && ($mod.TemporaryBuf[7] === "") && OPTI(8) && ($mod.TemporaryBuf[9] === "") && LDA(10)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          for (p = 11; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (($mod.TemporaryBuf[p - 6] === ("\tldy " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) && STA(p - 5) && ($mod.TemporaryBuf[p - 4] === "") && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 2] === ("\tinc " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) && ($mod.TemporaryBuf[p - 1] === "\tseq") && ($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2]))) {
              $mod.TemporaryBuf[0] = "\ttay";
              $mod.TemporaryBuf[4] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
              $mod.TemporaryBuf[5] = "\tcpy " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
              $mod.TemporaryBuf[p - 2] = "\tiny";
              $mod.TemporaryBuf[p - 1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[p],6,256);
              $mod.TemporaryBuf[p] = "~";
            };
            break;
          };
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition") && LDA(4) && CMP(5) && SKIP(6) && ($mod.TemporaryBuf[7] === "") && OPTI(8) && ($mod.TemporaryBuf[9] === "") && ($mod.TemporaryBuf[10] === ("\tldy " + pas.System.Copy($mod.TemporaryBuf[4],6,256)))) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
          yes = true;
          for (p = 11; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (yes && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 2] === ("\tinc " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) && ($mod.TemporaryBuf[p - 1] === "\tseq") && ($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2])) && ($mod.TemporaryBuf[p + 1] === pas.System.Copy($mod.TemporaryBuf[6],6,256))) {
              $mod.TemporaryBuf[0] = "\ttay";
              if (STA(11)) {
                $mod.TemporaryBuf[4] = "\ttya"}
               else {
                $mod.TemporaryBuf[4] = "~";
                $mod.TemporaryBuf[5] = "\tcpy " + pas.System.Copy($mod.TemporaryBuf[5],6,256);
              };
              $mod.TemporaryBuf[p - 2] = "\tiny";
              $mod.TemporaryBuf[p - 1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[p],6,256);
              $mod.TemporaryBuf[p] = $mod.TemporaryBuf[p + 1];
              if (LAB_B(p + 2)) {
                $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[p + 2];
                $mod.TemporaryBuf[p + 2] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[10],6,256);
              } else $mod.TemporaryBuf[p + 1] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[10],6,256);
              $mod.TemporaryBuf[10] = "~";
            };
            break;
          } else if (fail(p) || ($mod.TemporaryBuf[p] === ("\tlda " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tadd " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tsub " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tadc " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tsbc " + pas.System.Copy($mod.TemporaryBuf[4],6,256)))) yes = false;
        };
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition") && ($mod.TemporaryBuf[4] === ("\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256)))) {
          yes = true;
          for (p = 5; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (yes && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 2] === ("\tinc " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) && ($mod.TemporaryBuf[p - 1] === "\tseq") && ($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2])) && LAB_L(p + 1)) {
              $mod.TemporaryBuf[0] = "\ttay";
              $mod.TemporaryBuf[p - 2] = "\tiny";
              $mod.TemporaryBuf[p - 1] = "\tjne " + pas.System.Copy($mod.TemporaryBuf[p],6,256);
              $mod.TemporaryBuf[p] = $mod.TemporaryBuf[p + 1];
              if (LAB_B(p + 2)) {
                $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[p + 2];
                $mod.TemporaryBuf[p + 2] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
              } else $mod.TemporaryBuf[p + 1] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
              $mod.TemporaryBuf[4] = "~";
            };
            break;
          } else if (fail(p) || ($mod.TemporaryBuf[p] === ("\tlda " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tadd " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tsub " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tadc " + pas.System.Copy($mod.TemporaryBuf[4],6,256))) || ($mod.TemporaryBuf[p] === ("\tsbc " + pas.System.Copy($mod.TemporaryBuf[4],6,256)))) yes = false;
        };
        if (LAB_L(0) && ($mod.TemporaryBuf[1] === "; --- ForToDoCondition") && (LDA(2) === false) && (CMP(3) === false)) {
          for (p = 2; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[0],$mod.TemporaryBuf[p]) > 0) {
            if (($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[0])) && ($mod.TemporaryBuf[p - 1] === "\tbmi *+5") && DEC_(p - 2) && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 4] === "") && (INC_(p - 5) || DEC_(p - 5)) && (($mod.TemporaryBuf[p - 6] === "\tscc") || ($mod.TemporaryBuf[p - 6] === "\tscs")) && STA(p - 7) && ($mod.TemporaryBuf[p + 2] === "") && OPTI(p + 3) && ($mod.TemporaryBuf[p + 4] === "") && LDA(p + 5) && ADD_SUB(p + 6) && (pas.System.Copy($mod.TemporaryBuf[p + 5],6,256) === pas.System.Copy($mod.TemporaryBuf[p - 7],6,256))) {
              $mod.TemporaryBuf[p + 5] = "~";
            };
            break;
          };
        };
        if (LAB_L(0) && ($mod.TemporaryBuf[1] === "; --- ForToDoCondition") && LDA(2) && (IY(2) === false) && ($mod.TemporaryBuf[3] === "\tcmp #$40") && JCS_L(4) && LDA(5)) {
          $mod.TemporaryBuf[2] = "\tbit " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[3] = "~";
          $mod.TemporaryBuf[4] = "\tjvs " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
        };
        if (LAB_L(0) && ($mod.TemporaryBuf[1] === "; --- ForToDoCondition") && LDA(2) && (IY(2) === false) && ($mod.TemporaryBuf[3] === "\tcmp #$40") && JCS_L(4) && ($mod.TemporaryBuf[5] === "") && OPTI(6) && ($mod.TemporaryBuf[7] === "") && LDA(8)) {
          $mod.TemporaryBuf[2] = "\tbit " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[3] = "~";
          $mod.TemporaryBuf[4] = "\tjvs " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
        };
        if (LAB_L(0) && ($mod.TemporaryBuf[1] === "; --- ForToDoCondition") && LDA(2) && CMP(3) && ($mod.TemporaryBuf[4] === "\tbcc @+") && JNE_L(5) && LDA(6) && CMP(7) && ($mod.TemporaryBuf[8] === "\tbcc @+") && JNE_L(9) && ($mod.TemporaryBuf[10] === "@") && ($mod.TemporaryBuf[11] === "") && OPTI(12) && ($mod.TemporaryBuf[13] === "") && LDA(14) && ADD(15)) {
          $mod.TemporaryBuf[10] = "\tclc";
          $mod.TemporaryBuf[11] = "@";
          $mod.TemporaryBuf[15] = "\tadc " + pas.System.Copy($mod.TemporaryBuf[15],6,256);
        };
      };
      function opt_TEMP_FORDEC() {
        var p = 0;
        if (($mod.TemporaryBuf[5] === "\t#for") && (pas.System.Pos("#for:dec",$mod.TemporaryBuf[4]) > 0) && (STA(0) || (pas.System.Pos("stz ",$mod.TemporaryBuf[0]) > 0)) && ($mod.TemporaryBuf[1] === "") && LAB_L(2) && ($mod.TemporaryBuf[3] === "; --- ForToDoCondition")) {
          yes = true;
          for (p = 6; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2])) && ($mod.TemporaryBuf[p - 5] === "; --- ForToDoEpilog") && (pas.System.Pos("dec ",$mod.TemporaryBuf[p - 4]) > 0) && ($mod.TemporaryBuf[p - 1] === "\tseq") && ($mod.TemporaryBuf[p - 2] === "\tcmp #$FF")) {
              $mod.TemporaryBuf[4] = $mod.TemporaryBuf[p - 4];
              $mod.TemporaryBuf[p - 4] = "~";
              $mod.TemporaryBuf[p - 2] = "~";
              $mod.TemporaryBuf[p - 1] = "~";
              $mod.TemporaryBuf[p] = "\tjne " + $mod.TemporaryBuf[2];
              $mod.TemporaryBuf[1] = "\tjmp " + $mod.TemporaryBuf[2] + "f";
              $mod.TemporaryBuf[5] = $mod.TemporaryBuf[2] + "f";
              yes = false;
            };
            break;
          };
          if (yes) {
            $mod.TemporaryBuf[4] = "~";
            $mod.TemporaryBuf[5] = "~";
          };
          if (yes && ($mod.TemporaryBuf[6] === ("\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256))) && ($mod.TemporaryBuf[7] === ("\tlda " + pas.System.Copy($mod.TemporaryBuf[0],6,256)))) for (p = 8; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (yes && ($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2])) && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 2] === ("\tdec " + pas.System.Copy($mod.TemporaryBuf[0],6,256))) && ($mod.TemporaryBuf[p - 1] === "\tbmi *+5") && LAB_L(p + 1)) {
              $mod.TemporaryBuf[p - 2] = "\tdey";
              $mod.TemporaryBuf[p - 1] = "\tjpl " + pas.System.Copy($mod.TemporaryBuf[p],6,256);
              if (LAB_B(p + 2)) {
                $mod.TemporaryBuf[p] = "~";
                $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[p + 2];
                $mod.TemporaryBuf[p + 2] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
              } else {
                $mod.TemporaryBuf[p] = "~";
                $mod.TemporaryBuf[p + 1] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
              };
              $mod.TemporaryBuf[0] = "\ttay";
              $mod.TemporaryBuf[6] = "~";
              $mod.TemporaryBuf[7] = "\ttya";
              yes = false;
            };
            break;
          } else if ((((p - 3) >= 8) && (pas.System.Copy($mod.TemporaryBuf[p - 3],6,256) === pas.System.Copy($mod.TemporaryBuf[0],6,256))) || (pas.System.Pos("\tldy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tjsr ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tmwy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tmvy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.if",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.LOCAL ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t@print",$mod.TemporaryBuf[p]) > 0) || ($mod.TemporaryBuf[p] === "\tiny") || ($mod.TemporaryBuf[p] === "\tdey") || ($mod.TemporaryBuf[p] === "\ttay")) yes = false;
          if (yes && ($mod.TemporaryBuf[6] === ("\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256)))) for (p = 7; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (yes && ($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2])) && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 2] === ("\tdec " + pas.System.Copy($mod.TemporaryBuf[0],6,256))) && ($mod.TemporaryBuf[p - 1] === "\tbmi *+5") && LAB_L(p + 1)) {
              $mod.TemporaryBuf[p - 2] = "\tdey";
              $mod.TemporaryBuf[p - 1] = "\tjpl " + pas.System.Copy($mod.TemporaryBuf[p],6,256);
              if (LAB_B(p + 2)) {
                $mod.TemporaryBuf[p] = "~";
                $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[p + 2];
                $mod.TemporaryBuf[p + 2] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
              } else {
                $mod.TemporaryBuf[p] = "~";
                $mod.TemporaryBuf[p + 1] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
              };
              $mod.TemporaryBuf[0] = "\ttay";
              $mod.TemporaryBuf[6] = "~";
              yes = false;
            };
            break;
          } else if ((((p - 3) >= 7) && (pas.System.Copy($mod.TemporaryBuf[p - 3],6,256) === pas.System.Copy($mod.TemporaryBuf[0],6,256))) || (pas.System.Pos("\tldy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tjsr ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tmwy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tmvy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.if",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.LOCAL ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t@print",$mod.TemporaryBuf[p]) > 0) || ($mod.TemporaryBuf[p] === "\tiny") || ($mod.TemporaryBuf[p] === "\tdey") || ($mod.TemporaryBuf[p] === "\ttay")) yes = false;
          if (yes && ($mod.TemporaryBuf[8] === ("\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256)))) for (p = 9; p <= 511; p++) if (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[p]) > 0) {
            if (yes && LDA(6) && ((pas.System.Pos("and #",$mod.TemporaryBuf[7]) > 0) || (pas.System.Pos("ora #",$mod.TemporaryBuf[7]) > 0) || (pas.System.Pos("eor #",$mod.TemporaryBuf[7]) > 0)) && ($mod.TemporaryBuf[p] === ("\tjmp " + $mod.TemporaryBuf[2])) && ($mod.TemporaryBuf[p - 3] === "; --- ForToDoEpilog") && ($mod.TemporaryBuf[p - 2] === ("\tdec " + pas.System.Copy($mod.TemporaryBuf[0],6,256))) && ($mod.TemporaryBuf[p - 1] === "\tbmi *+5") && LAB_L(p + 1)) {
              $mod.TemporaryBuf[p - 2] = "\tdey";
              $mod.TemporaryBuf[p - 1] = "\tjpl " + pas.System.Copy($mod.TemporaryBuf[p],6,256);
              if (LAB_B(p + 2)) {
                $mod.TemporaryBuf[p] = "~";
                $mod.TemporaryBuf[p + 1] = $mod.TemporaryBuf[p + 2];
                $mod.TemporaryBuf[p + 2] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
              } else {
                $mod.TemporaryBuf[p] = "~";
                $mod.TemporaryBuf[p + 1] = "\tsty " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
              };
              if (pas.System.Copy($mod.TemporaryBuf[6],6,256) === pas.System.Copy($mod.TemporaryBuf[0],6,256)) $mod.TemporaryBuf[6] = "\ttya";
              $mod.TemporaryBuf[0] = "\ttay";
              $mod.TemporaryBuf[8] = "~";
              yes = false;
            };
            break;
          } else if ((((p - 3) >= 9) && (pas.System.Copy($mod.TemporaryBuf[p - 3],6,256) === pas.System.Copy($mod.TemporaryBuf[0],6,256))) || (pas.System.Pos("\tldy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tjsr ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tmwy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\tmvy ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.if",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t.LOCAL ",$mod.TemporaryBuf[p]) > 0) || (pas.System.Pos("\t@print",$mod.TemporaryBuf[p]) > 0) || ($mod.TemporaryBuf[p] === "\tiny") || ($mod.TemporaryBuf[p] === "\tdey") || ($mod.TemporaryBuf[p] === "\ttay")) yes = false;
        };
      };
      function opt_TEMP_IMUL_CX() {
        if (IFDEF_MUL16(8) && (pas.System.Pos("mva ",$mod.TemporaryBuf[0]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[0]) === 0) && ($mod.TemporaryBuf[1] === ("\tmva #$00 " + pas.System.Copy($mod.TemporaryBuf[5],6,256))) && LDA(2) && ($mod.TemporaryBuf[3] === "\tsta :ecx") && ($mod.TemporaryBuf[4] === "\tsta :eax") && LDA(5) && ($mod.TemporaryBuf[6] === "\tsta :ecx+1") && ($mod.TemporaryBuf[7] === "\tsta :eax+1")) {
          $mod.TemporaryBuf[pas.Common.i + 5] = "~";
          $mod.TemporaryBuf[pas.Common.i + 6] = "~";
          $mod.TemporaryBuf[pas.Common.i + 7] = "~";
          $mod.TemporaryBuf[pas.Common.i + 9] = "\tfmulu_8";
          $mod.TemporaryBuf[pas.Common.i + 11] = "\timulCL";
        };
        if (IFDEF_MUL16(8) && ($mod.TemporaryBuf[0] === "\tlda #$00") && STA(1) && LDA(2) && ($mod.TemporaryBuf[3] === "\tsta :ecx") && ($mod.TemporaryBuf[4] === "\tsta :eax") && LDA(5) && ($mod.TemporaryBuf[6] === "\tsta :ecx+1") && ($mod.TemporaryBuf[7] === "\tsta :eax+1")) if (pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[5],6,256)) {
          $mod.TemporaryBuf[pas.Common.i + 5] = "~";
          $mod.TemporaryBuf[pas.Common.i + 6] = "~";
          $mod.TemporaryBuf[pas.Common.i + 7] = "~";
          $mod.TemporaryBuf[pas.Common.i + 9] = "\tfmulu_8";
          $mod.TemporaryBuf[pas.Common.i + 11] = "\timulCL";
        };
      };
      function opt_TEMP_IFTMP() {
        if (LAB_L(0) && IFTMP(1) && JNE_L(2)) {
          $mod.TemporaryBuf[1] = $mod.TemporaryBuf[0];
          $mod.TemporaryBuf[0] = "\tjmp " + pas.System.Copy($mod.TemporaryBuf[2],6,256);
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = $mod.TemporaryBuf[0];
          $mod.TemporaryBuf[0] = "~";
        };
        if (LAB_L(1) && IFTMP(2) && ($mod.TemporaryBuf[3] === "\tbeq *+5") && JMP(4)) {
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = "\tjmp " + pas.System.Copy($mod.TemporaryBuf[4],6,256);
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[4] = "~";
          if ((pas.System.Pos("\tjmp ",$mod.TemporaryBuf[0]) === 1) && ($mod.TemporaryBuf[1] === "~") && (pas.System.Pos("\tjmp ",$mod.TemporaryBuf[2]) === 1)) {
            $mod.TemporaryBuf[2] = "~";
          };
        };
      };
      function opt_TEMP_ORD() {
        if (($mod.TemporaryBuf[0] === "\tldy #1") && (CMP(1) || LDA(1)) && SKIP(2) && ($mod.TemporaryBuf[3] === "\tdey") && ($mod.TemporaryBuf[4] === "@") && ($mod.TemporaryBuf[5] === "\ttya") && ($mod.TemporaryBuf[6] === "\tsta :ecx") && LDA(7) && ($mod.TemporaryBuf[8] === "\tsta :eax") && IFDEF_MUL8(9)) {
          $mod.TemporaryBuf[6] = "\tseq";
          $mod.TemporaryBuf[9] = "\tlda #$00";
          $mod.TemporaryBuf[10] = "\tsta :eax+1";
          $mod.TemporaryBuf[11] = "~";
          $mod.TemporaryBuf[12] = "~";
          $mod.TemporaryBuf[13] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && LDA(1) && SKIP(2) && SKIP(3) && ($mod.TemporaryBuf[4] === "\tdey") && ($mod.TemporaryBuf[5] === "@") && ($mod.TemporaryBuf[6] === "\ttya") && ($mod.TemporaryBuf[7] === "\tsta :ecx") && LDA(8) && ($mod.TemporaryBuf[9] === "\tsta :eax") && IFDEF_MUL8(10)) {
          $mod.TemporaryBuf[7] = "\tseq";
          $mod.TemporaryBuf[10] = "\tlda #$00";
          $mod.TemporaryBuf[11] = "\tsta :eax+1";
          $mod.TemporaryBuf[12] = "~";
          $mod.TemporaryBuf[13] = "~";
          $mod.TemporaryBuf[14] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && LDA(1) && CMP(2) && SKIP(3) && ($mod.TemporaryBuf[4] === "\tdey") && ($mod.TemporaryBuf[5] === "@") && ($mod.TemporaryBuf[6] === "\ttya") && ($mod.TemporaryBuf[7] === "\tsta :ecx") && LDA(8) && ($mod.TemporaryBuf[9] === "\tsta :eax") && IFDEF_MUL8(10)) {
          $mod.TemporaryBuf[7] = "\tseq";
          $mod.TemporaryBuf[10] = "\tlda #$00";
          $mod.TemporaryBuf[11] = "\tsta :eax+1";
          $mod.TemporaryBuf[12] = "~";
          $mod.TemporaryBuf[13] = "~";
          $mod.TemporaryBuf[14] = "~";
        };
        if (STA_STACK(0) && ($mod.TemporaryBuf[1] === "\tldy #1") && LDA_STACK(2) && ($mod.TemporaryBuf[3] === "\tcmp #$00") && ($mod.TemporaryBuf[4] === "\tbeq @+") && ($mod.TemporaryBuf[5] === "\tdey") && ($mod.TemporaryBuf[6] === "@") && ($mod.TemporaryBuf[7] === "\ttya") && ($mod.TemporaryBuf[8] === "\tsta :ecx") && LDA(9) && ($mod.TemporaryBuf[10] === "\tsta :eax") && IFDEF_MUL8(11)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[2],6,256)) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[2] = "~";
          $mod.TemporaryBuf[8] = "\tseq";
          $mod.TemporaryBuf[11] = "\tlda #$00";
          $mod.TemporaryBuf[12] = "\tsta :eax+1";
          $mod.TemporaryBuf[13] = "~";
          $mod.TemporaryBuf[14] = "~";
          $mod.TemporaryBuf[15] = "~";
        };
      };
      function opt_TEMP_X() {
        if ((pas.System.Pos("mva :STACKORIGIN,x",$mod.TemporaryBuf[0]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH,x",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH*2,x",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH*3,x",$mod.TemporaryBuf[3]) > 0) && ($mod.TemporaryBuf[4] === "\tdex") && ($mod.TemporaryBuf[5] === "") && OPTI(6) && ($mod.TemporaryBuf[7] === "") && ($mod.TemporaryBuf[8] === "\tinx") && (pas.System.Pos("mva ",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[9]) === 0) && (pas.System.Pos("mva ",$mod.TemporaryBuf[10]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[10]) === 0) && (pas.System.Pos("mva ",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[11]) === 0) && (pas.System.Pos("mva ",$mod.TemporaryBuf[12]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[12]) === 0)) if ((pas.System.Pos(":STACKORIGIN,x",$mod.TemporaryBuf[9]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",$mod.TemporaryBuf[10]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",$mod.TemporaryBuf[11]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",$mod.TemporaryBuf[12]) > 0) && ($mod.TemporaryBuf[0] === ("\tmva :STACKORIGIN,x " + GetSTRING(9))) && ($mod.TemporaryBuf[1] === ("\tmva :STACKORIGIN+STACKWIDTH,x " + GetSTRING(10))) && ($mod.TemporaryBuf[2] === ("\tmva :STACKORIGIN+STACKWIDTH*2,x " + GetSTRING(11))) && ($mod.TemporaryBuf[3] === ("\tmva :STACKORIGIN+STACKWIDTH*3,x " + GetSTRING(12)))) {
          $mod.TemporaryBuf[4] = "~";
          $mod.TemporaryBuf[8] = "~";
          $mod.TemporaryBuf[9] = "~";
          $mod.TemporaryBuf[10] = "~";
          $mod.TemporaryBuf[11] = "~";
          $mod.TemporaryBuf[12] = "~";
        };
        if ((pas.System.Pos("lda ",$mod.TemporaryBuf[0]) > 0) && (pas.System.Pos("sta ",$mod.TemporaryBuf[1]) > 0) && (pas.System.Pos("lda ",$mod.TemporaryBuf[2]) > 0) && (pas.System.Pos("sta ",$mod.TemporaryBuf[3]) > 0) && (pas.System.Pos("lda ",$mod.TemporaryBuf[4]) > 0) && (pas.System.Pos("sta ",$mod.TemporaryBuf[5]) > 0) && (pas.System.Pos("lda ",$mod.TemporaryBuf[6]) > 0) && (pas.System.Pos("sta ",$mod.TemporaryBuf[7]) > 0) && ($mod.TemporaryBuf[8] === "") && OPTI(9) && ($mod.TemporaryBuf[10] === "") && ($mod.TemporaryBuf[11] === "\tinx") && ($mod.TemporaryBuf[12] === ("\tmva " + GetSTRING(0) + " :STACKORIGIN,x")) && ($mod.TemporaryBuf[13] === ("\tmva " + GetSTRING(2) + " :STACKORIGIN+STACKWIDTH,x")) && ($mod.TemporaryBuf[14] === ("\tmva " + GetSTRING(4) + " :STACKORIGIN+STACKWIDTH*2,x")) && ($mod.TemporaryBuf[15] === ("\tmva " + GetSTRING(6) + " :STACKORIGIN+STACKWIDTH*3,x"))) {
          $mod.TemporaryBuf[10] = $mod.TemporaryBuf[9];
          $mod.TemporaryBuf[9] = "";
          $mod.TemporaryBuf[8] = $mod.TemporaryBuf[7];
          $mod.TemporaryBuf[7] = $mod.TemporaryBuf[6];
          $mod.TemporaryBuf[6] = $mod.TemporaryBuf[5];
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[4];
          $mod.TemporaryBuf[4] = $mod.TemporaryBuf[3];
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[2];
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[1];
          $mod.TemporaryBuf[1] = $mod.TemporaryBuf[0];
          $mod.TemporaryBuf[0] = $mod.TemporaryBuf[11];
          $mod.TemporaryBuf[1] = $mod.TemporaryBuf[12];
          $mod.TemporaryBuf[3] = $mod.TemporaryBuf[13];
          $mod.TemporaryBuf[5] = $mod.TemporaryBuf[14];
          $mod.TemporaryBuf[7] = $mod.TemporaryBuf[15];
          $mod.TemporaryBuf[11] = "";
          $mod.TemporaryBuf[12] = "~";
          $mod.TemporaryBuf[13] = "~";
          $mod.TemporaryBuf[14] = "~";
          $mod.TemporaryBuf[15] = "~";
        };
        if ((pas.System.Pos("mva :STACKORIGIN,x",$mod.TemporaryBuf[0]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH,x",$mod.TemporaryBuf[1]) > 0) && ($mod.TemporaryBuf[2] === "\tdex") && ($mod.TemporaryBuf[3] === "") && OPTI(4) && ($mod.TemporaryBuf[5] === "") && ($mod.TemporaryBuf[6] === "\tinx") && (pas.System.Pos("mva ",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[7]) === 0) && (pas.System.Pos("mva ",$mod.TemporaryBuf[8]) > 0) && (pas.System.Pos("mva :STACK",$mod.TemporaryBuf[8]) === 0)) if ((pas.System.Pos(":STACKORIGIN,x",$mod.TemporaryBuf[7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",$mod.TemporaryBuf[8]) > 0) && ($mod.TemporaryBuf[0] === ("\tmva :STACKORIGIN,x " + GetSTRING(7))) && ($mod.TemporaryBuf[1] === ("\tmva :STACKORIGIN+STACKWIDTH,x " + GetSTRING(8)))) {
          $mod.TemporaryBuf[2] = "~";
          $mod.TemporaryBuf[6] = "~";
          $mod.TemporaryBuf[7] = "~";
          $mod.TemporaryBuf[8] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tdex") && ($mod.TemporaryBuf[1] === "\tdex") && ($mod.TemporaryBuf[2] === "") && OPTI(3) && ($mod.TemporaryBuf[4] === "") && ($mod.TemporaryBuf[5] === "\tinx") && ($mod.TemporaryBuf[6] === "\tinx") && ($mod.TemporaryBuf[7] !== "\tinx")) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[5] = "~";
          $mod.TemporaryBuf[6] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tdex") && ($mod.TemporaryBuf[1] === "") && OPTI(2) && ($mod.TemporaryBuf[3] === "") && ($mod.TemporaryBuf[4] === "\tinx") && ($mod.TemporaryBuf[5] !== "\tinx")) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[4] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tdex") && ($mod.TemporaryBuf[1] === "\tinx")) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tinx") && ($mod.TemporaryBuf[1] === "\tdex")) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
        };
      };
      function opt_TEMP_EAX() {
        if (($mod.TemporaryBuf[0] === "\tlda :eax") && (($mod.TemporaryBuf[1] === "\tsta @BYTE.MOD.A") || ($mod.TemporaryBuf[1] === "\tsta @WORD.MOD.A") || ($mod.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A") || ($mod.TemporaryBuf[1] === "\tsta @SHORTINT.MOD.A") || ($mod.TemporaryBuf[1] === "\tsta @SMALLINT.MOD.A") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A") || ($mod.TemporaryBuf[1] === "\tsta @BYTE.DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @WORD.DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @SHORTINT.DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @SMALLINT.DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @SHORTREAL_DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @REAL_DIV.A") || ($mod.TemporaryBuf[1] === "\tsta @SHORTREAL_MUL.A") || ($mod.TemporaryBuf[1] === "\tsta @REAL_MUL.A") || ($mod.TemporaryBuf[1] === "\tsta @REAL_FRAC.A") || ($mod.TemporaryBuf[1] === "\tsta @REAL_ROUND.A") || ($mod.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A") || ($mod.TemporaryBuf[1] === "\tsta @SHORTREAL_TRUNC.A") || ($mod.TemporaryBuf[1] === "\tsta @F16_I2F.SV"))) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tlda :eax+1") && (($mod.TemporaryBuf[1] === "\tsta @WORD.MOD.A+1") || ($mod.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A+1") || ($mod.TemporaryBuf[1] === "\tsta @SMALLINT.MOD.A+1") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A+1") || ($mod.TemporaryBuf[1] === "\tsta @WORD.DIV.A+1") || ($mod.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A+1") || ($mod.TemporaryBuf[1] === "\tsta @SMALLINT.DIV.A+1") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A+1") || ($mod.TemporaryBuf[1] === "\tsta @SHORTREAL_DIV.A+1") || ($mod.TemporaryBuf[1] === "\tsta @REAL_DIV.A+1") || ($mod.TemporaryBuf[1] === "\tsta @SHORTREAL_MUL.A+1") || ($mod.TemporaryBuf[1] === "\tsta @REAL_MUL.A+1") || ($mod.TemporaryBuf[1] === "\tsta @REAL_FRAC.A+1") || ($mod.TemporaryBuf[1] === "\tsta @REAL_ROUND.A+1") || ($mod.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A+1") || ($mod.TemporaryBuf[1] === "\tsta @SHORTREAL_TRUNC.A+1") || ($mod.TemporaryBuf[1] === "\tsta @F16_I2F.SV+1"))) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tlda :eax+2") && (($mod.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A+2") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A+2") || ($mod.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A+2") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A+2") || ($mod.TemporaryBuf[1] === "\tsta @REAL_DIV.A+2") || ($mod.TemporaryBuf[1] === "\tsta @REAL_MUL.A+2") || ($mod.TemporaryBuf[1] === "\tsta @REAL_FRAC.A+2") || ($mod.TemporaryBuf[1] === "\tsta @REAL_ROUND.A+2") || ($mod.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A+2") || ($mod.TemporaryBuf[1] === "\tsta @F16_I2F.SV+2"))) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tlda :eax+3") && (($mod.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A+3") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A+3") || ($mod.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A+3") || ($mod.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A+3") || ($mod.TemporaryBuf[1] === "\tsta @REAL_DIV.A+3") || ($mod.TemporaryBuf[1] === "\tsta @REAL_MUL.A+3") || ($mod.TemporaryBuf[1] === "\tsta @REAL_FRAC.A+3") || ($mod.TemporaryBuf[1] === "\tsta @REAL_ROUND.A+3") || ($mod.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A+3") || ($mod.TemporaryBuf[1] === "\tsta @F16_I2F.SV+3"))) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
        };
      };
      function opt_TEMP_JMP() {
        if (STA(0) && ($mod.TemporaryBuf[1] === "") && JMP(2) && LAB_L(3) && ($mod.TemporaryBuf[4] === "") && OPTI(5) && ($mod.TemporaryBuf[6] === "") && LDA(7)) if (($mod.TemporaryBuf[3] === pas.System.Copy($mod.TemporaryBuf[2],6,256)) && (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[7],6,256))) {
          $mod.TemporaryBuf[2] = "~";
          $mod.TemporaryBuf[3] = "~";
          $mod.TemporaryBuf[7] = "~";
        };
        if (JNE_L(0) && ($mod.TemporaryBuf[1] === "\tjmp @exit") && (pas.System.Pos($mod.TemporaryBuf[2],$mod.TemporaryBuf[0]) > 0) && (IFTMP(3) === false)) {
          $mod.TemporaryBuf[0] = "\tjeq @exit";
          $mod.TemporaryBuf[1] = "~";
        };
        if ((pas.System.Pos("lda #$",$mod.TemporaryBuf[0]) > 0) && ($mod.TemporaryBuf[0] !== "\tlda #$00") && JEQ_L(1) && JMP(2) && (pas.System.Pos($mod.TemporaryBuf[3],$mod.TemporaryBuf[1]) > 0)) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[3] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tjmp @exit") && ($mod.TemporaryBuf[1] === "@exit")) {
          $mod.TemporaryBuf[0] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tjmp @exit") && (pas.System.Pos("jmp a_",$mod.TemporaryBuf[1]) > 0)) {
          $mod.TemporaryBuf[1] = "~";
        };
        if (($mod.TemporaryBuf[0] === "\tjmp @+") && JMP(1) && ($mod.TemporaryBuf[2] === "@")) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && JMP(1) && ($mod.TemporaryBuf[2] === pas.System.Copy($mod.TemporaryBuf[1],6,256)) && (IFTMP(3) === false)) {
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && JMP(1) && LAB_L(2) && ($mod.TemporaryBuf[3] === pas.System.Copy($mod.TemporaryBuf[1],6,256)) && (IFTMP(4) === false)) {
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[3] = "~";
        };
        if ((SKIP(0) === false) && (pas.System.Pos("jmp a_",$mod.TemporaryBuf[1]) > 0) && LAB_L(2) && ($mod.TemporaryBuf[3] === pas.System.Copy($mod.TemporaryBuf[1],6,256))) {
          $mod.TemporaryBuf[1] = "~";
        };
        if ((SKIP(0) === false) && (pas.System.Pos("jmp a_",$mod.TemporaryBuf[1]) > 0) && ($mod.TemporaryBuf[2] === "~") && LAB_L(3) && ($mod.TemporaryBuf[4] === pas.System.Copy($mod.TemporaryBuf[1],6,256))) {
          $mod.TemporaryBuf[1] = "~";
        };
      };
      function opt_TEMP_ZTMP() {
        if (($mod.TemporaryBuf[0] === "\tlda :ztmp10") && ($mod.TemporaryBuf[1] === "\tbpl @+") && ($mod.TemporaryBuf[2] === "\tlda :eax+1") && ($mod.TemporaryBuf[3] === "\tsub :ztmp8") && ($mod.TemporaryBuf[4] === "\tsta :eax+1") && ($mod.TemporaryBuf[5] === "@") && ($mod.TemporaryBuf[6] === "\tlda :ztmp8") && ($mod.TemporaryBuf[7] === "\tbpl @+") && ($mod.TemporaryBuf[8] === "\tlda :eax+1") && ($mod.TemporaryBuf[9] === "\tsub :ztmp10") && ($mod.TemporaryBuf[10] === "\tsta :eax+1") && ($mod.TemporaryBuf[11] === "@")) {
          $mod.TemporaryBuf[0] = "~";
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[2] = "\tbit :ztmp10";
          $mod.TemporaryBuf[3] = "\tbpl @+";
          $mod.TemporaryBuf[4] = "\tsub :ztmp8";
          $mod.TemporaryBuf[5] = "@";
          $mod.TemporaryBuf[6] = "\tbit :ztmp8";
          $mod.TemporaryBuf[7] = "\tbpl @+";
          $mod.TemporaryBuf[8] = "\tsub :ztmp10";
          $mod.TemporaryBuf[9] = "@";
          $mod.TemporaryBuf[11] = "~";
          if ($mod.TemporaryBuf[12] === "\tlda :eax+1") {
            $mod.TemporaryBuf[10] = "~";
            $mod.TemporaryBuf[12] = "~";
          } else $mod.TemporaryBuf[10] = "\tsta :eax+1";
        };
      };
      function opt_TEMP_UNROLL() {
        var p = 0;
        if ((($mod.TemporaryBuf[3] === "+++unroll+++") || ($mod.TemporaryBuf[3] === "---unroll---")) && LDY_IM(4) && STY(5) && LDY(0) && LDA(1) && STA_ADR(2)) if (pas.System.Copy($mod.TemporaryBuf[0],6,256) === pas.System.Copy($mod.TemporaryBuf[5],6,256)) {
          if ($mod.TemporaryBuf[3] === "+++unroll+++") {
            p = GetBYTE(4) - 1}
           else p = GetBYTE(4) + 1;
          pas.System.Delete({a: 2, p: $mod.TemporaryBuf, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",$mod.TemporaryBuf[2]),2);
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[2] + "+$" + pas.SysUtils.IntToHex(p,2);
          $mod.TemporaryBuf[0] = "~";
        };
        if ((($mod.TemporaryBuf[3] === "+++unroll+++") || ($mod.TemporaryBuf[3] === "---unroll---")) && LDY_IM(4) && STY(5) && LDA(0) && LDY(1) && STA_ADR(2)) if (pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[5],6,256)) {
          if ($mod.TemporaryBuf[3] === "+++unroll+++") {
            p = GetBYTE(4) - 1}
           else p = GetBYTE(4) + 1;
          pas.System.Delete({a: 2, p: $mod.TemporaryBuf, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",$mod.TemporaryBuf[2]),2);
          $mod.TemporaryBuf[2] = $mod.TemporaryBuf[2] + "+$" + pas.SysUtils.IntToHex(p,2);
          $mod.TemporaryBuf[1] = "~";
        };
        if ((($mod.TemporaryBuf[5] === "+++unroll+++") || ($mod.TemporaryBuf[5] === "---unroll---")) && LDY_IM(6) && STY(7) && LDA(0) && ADD_SUB(1) && ($mod.TemporaryBuf[2] === "\ttay") && LDA(3) && STA_ADR(4)) if (pas.System.Copy($mod.TemporaryBuf[1],6,256) === pas.System.Copy($mod.TemporaryBuf[7],6,256)) {
          if ($mod.TemporaryBuf[5] === "+++unroll+++") {
            p = GetBYTE(6) - 1}
           else p = GetBYTE(6) + 1;
          pas.System.Delete({a: 4, p: $mod.TemporaryBuf, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",$mod.TemporaryBuf[4]),2);
          $mod.TemporaryBuf[4] = $mod.TemporaryBuf[4] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
          $mod.TemporaryBuf[0] = "\tldy " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
          $mod.TemporaryBuf[1] = "~";
          $mod.TemporaryBuf[2] = "~";
        };
        if (($mod.TemporaryBuf[0] === "---unroll---") || ($mod.TemporaryBuf[0] === "+++unroll+++") || ($mod.TemporaryBuf[0] === "===unroll===")) {
          $mod.TemporaryBuf[0] = "~";
          if (LDY_IM(1) && STY(2) && LDY(3) && LDA(4) && STA_ADR(5) && ($mod.TemporaryBuf[6] === "===unroll===")) if (pas.System.Copy($mod.TemporaryBuf[2],6,256) === pas.System.Copy($mod.TemporaryBuf[3],6,256)) {
            p = GetBYTE(1);
            pas.System.Delete({a: 5, p: $mod.TemporaryBuf, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",$mod.TemporaryBuf[5]),2);
            $mod.TemporaryBuf[5] = $mod.TemporaryBuf[5] + "+$" + pas.SysUtils.IntToHex(p,2);
            $mod.TemporaryBuf[1] = "~";
            $mod.TemporaryBuf[2] = "~";
            $mod.TemporaryBuf[3] = "~";
            $mod.TemporaryBuf[4] = "~";
          };
          if (LDY_IM(1) && STY(2) && LDA(3) && LDY(4) && STA_ADR(5) && ($mod.TemporaryBuf[6] === "===unroll===")) if (pas.System.Copy($mod.TemporaryBuf[2],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
            p = GetBYTE(1);
            pas.System.Delete({a: 5, p: $mod.TemporaryBuf, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",$mod.TemporaryBuf[5]),2);
            $mod.TemporaryBuf[5] = $mod.TemporaryBuf[5] + "+$" + pas.SysUtils.IntToHex(p,2);
            $mod.TemporaryBuf[1] = "~";
            $mod.TemporaryBuf[2] = "~";
            $mod.TemporaryBuf[3] = "~";
            $mod.TemporaryBuf[4] = "~";
          };
          if (LDY_IM(1) && STY(2) && LDA(3) && ADD_SUB(4) && ($mod.TemporaryBuf[5] === "\ttay") && LDA(6) && STA_ADR(7) && ($mod.TemporaryBuf[8] === "===unroll===")) if (pas.System.Copy($mod.TemporaryBuf[2],6,256) === pas.System.Copy($mod.TemporaryBuf[4],6,256)) {
            p = GetBYTE(1);
            pas.System.Delete({a: 7, p: $mod.TemporaryBuf, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",$mod.TemporaryBuf[7]),2);
            $mod.TemporaryBuf[7] = $mod.TemporaryBuf[7] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            $mod.TemporaryBuf[1] = "~";
            $mod.TemporaryBuf[2] = "~";
            $mod.TemporaryBuf[3] = "~";
            $mod.TemporaryBuf[4] = "~";
            $mod.TemporaryBuf[5] = "~";
            $mod.TemporaryBuf[6] = "~";
          };
        };
      };
      function opt_TEMP_BOOLEAN_OR() {
        var i = 0;
        var p = 0;
        var yes = false;
        var tmp = "";
        function branch(i) {
          var Result = false;
          Result = ($mod.TemporaryBuf[i] === "\tbne @+") || ($mod.TemporaryBuf[i] === "\tbeq @+") || ($mod.TemporaryBuf[i] === "\tbcc @+") || ($mod.TemporaryBuf[i] === "\tbcs @+");
          return Result;
        };
        function branch_swap(i) {
          var Result = "";
          Result = "";
          if ($mod.TemporaryBuf[i] === "\tbeq @+") {
            Result = "\tsne"}
           else if ($mod.TemporaryBuf[i] === "\tbne @+") {
            Result = "\tseq"}
           else if ($mod.TemporaryBuf[i] === "\tbcc @+") {
            Result = "\tscs"}
           else if ($mod.TemporaryBuf[i] === "\tbcs @+") Result = "\tscc";
          return Result;
        };
        if (($mod.TemporaryBuf[0] === "\tldy #1") && LDA(1) && CMP(2) && branch(3) && ($mod.TemporaryBuf[4] === "\tdey") && ($mod.TemporaryBuf[5] === "@") && STY_STACK(6)) {
          p = 7;
          yes = false;
          tmp = "\tora " + pas.System.Copy($mod.TemporaryBuf[6],6,256);
          while ((p < 512) && ($mod.TemporaryBuf[p] === "\tldy #1") && LDA(p + 1) && CMP(p + 2) && branch(p + 3) && ($mod.TemporaryBuf[p + 4] === "\tdey") && ($mod.TemporaryBuf[p + 5] === "@") && ($mod.TemporaryBuf[p + 6] === "\ttya") && ($mod.TemporaryBuf[p + 7] === tmp) && STA(p + 8)) {
            p += 9;
            yes = true;
          };
          if (yes) {
            i = p - 1;
            tmp = $mod.TemporaryBuf[p - 1];
            $mod.TemporaryBuf[0] = "~";
            $mod.TemporaryBuf[3] = branch_swap(3);
            $mod.TemporaryBuf[4] = "\tjmp @+";
            $mod.TemporaryBuf[5] = "~";
            $mod.TemporaryBuf[6] = "~";
            p -= 9;
            while (p >= 7) {
              $mod.TemporaryBuf[p] = "~";
              $mod.TemporaryBuf[p + 3] = branch_swap(p + 3);
              $mod.TemporaryBuf[p + 4] = "\tjmp @+";
              $mod.TemporaryBuf[p + 5] = "~";
              $mod.TemporaryBuf[p + 6] = "~";
              $mod.TemporaryBuf[p + 7] = "~";
              $mod.TemporaryBuf[p + 8] = "~";
              p -= 9;
            };
            $mod.TemporaryBuf[i - 2] = "\tlda:seq #$00";
            $mod.TemporaryBuf[i - 1] = "@\tlda #$01";
            $mod.TemporaryBuf[i] = tmp;
          };
        };
      };
      opt_TEMP_BOOLEAN_OR();
      opt_TEMP_ORD();
      opt_TEMP_CMP();
      opt_TEMP_CMP_0();
      opt_TEMP();
      opt_TEMP_IMUL_CX();
      opt_TEMP_WHILE();
      opt_TEMP_FORDEC();
      opt_TEMP_FOR();
      opt_TEMP_X();
      opt_TEMP_EAX();
      opt_TEMP_JMP();
      opt_TEMP_ZTMP();
      opt_TEMP_UNROLL();
      if ((pas.System.Pos('@move ":bp2" ',$mod.TemporaryBuf[4]) > 1) && LDA(0) && STA_BP2(1) && ($mod.TemporaryBuf[2] === ($mod.TemporaryBuf[0] + "+1")) && STA_BP2_1(3)) {
        $mod.TemporaryBuf[4] = "\t@move " + GetSTRING(0) + " " + pas.System.Copy($mod.TemporaryBuf[4],15,256);
        $mod.TemporaryBuf[0] = "~";
        $mod.TemporaryBuf[1] = "~";
        $mod.TemporaryBuf[2] = "~";
        $mod.TemporaryBuf[3] = "~";
      };
      if ((pas.System.Pos("mva:rpl (:bp2),y ",$mod.TemporaryBuf[5]) > 1) && LDA_IM(0) && STA_BP2(1) && LDA_IM(2) && STA_BP2_1(3) && LDY_IM(4)) {
        p = GetWORD(0,2);
        $mod.TemporaryBuf[0] = "~";
        $mod.TemporaryBuf[1] = "~";
        $mod.TemporaryBuf[2] = "~";
        $mod.TemporaryBuf[3] = "~";
        $mod.TemporaryBuf[5] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y " + pas.System.Copy($mod.TemporaryBuf[5],19,256);
      };
      if ((pas.System.Pos("mva:rne (:bp2),y ",$mod.TemporaryBuf[5]) > 1) && LDA_IM(0) && STA_BP2(1) && LDA_IM(2) && STA_BP2_1(3) && LDY_IM(4)) {
        p = GetWORD(0,2);
        $mod.TemporaryBuf[0] = "~";
        $mod.TemporaryBuf[1] = "~";
        $mod.TemporaryBuf[2] = "~";
        $mod.TemporaryBuf[3] = "~";
        $mod.TemporaryBuf[5] = "\tmva:rne $" + pas.SysUtils.IntToHex(p,4) + ",y " + pas.System.Copy($mod.TemporaryBuf[5],19,256);
      };
      if (($mod.TemporaryBuf[0] === "\tjsr #$00") && ($mod.TemporaryBuf[1] === "\tlda @BYTE.MOD.RESULT")) {
        $mod.TemporaryBuf[0] = "~";
        $mod.TemporaryBuf[1] = "~";
      };
      if (($mod.TemporaryBuf[0] === "\tjsr #$00") && ($mod.TemporaryBuf[1] === "\tldy @BYTE.MOD.RESULT")) {
        $mod.TemporaryBuf[0] = "\ttay";
        $mod.TemporaryBuf[1] = "~";
      };
      if (($mod.TemporaryBuf[0] === "\tlda :STACKORIGIN,x") && STA(1) && ($mod.TemporaryBuf[2] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(3) && DEX(4) && ($mod.TemporaryBuf[5] === ":move")) {
        tmp = $mod.TemporaryBuf[6];
        p = pas.Common.StrToInt($mod.TemporaryBuf[7]);
        if (p === 256) {
          $mod.TemporaryBuf[1] = "\tsta :bp2";
          $mod.TemporaryBuf[3] = "\tsta :bp2+1";
          $mod.TemporaryBuf[4] = "\tldy #$00";
          $mod.TemporaryBuf[5] = "\tmva:rne (:bp2),y adr." + tmp + ",y+";
        } else if (p <= 128) {
          $mod.TemporaryBuf[1] = "\tsta :bp2";
          $mod.TemporaryBuf[3] = "\tsta :bp2+1";
          $mod.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(p - 1,2);
          $mod.TemporaryBuf[5] = "\tmva:rpl (:bp2),y adr." + tmp + ",y-";
        } else {
          $mod.TemporaryBuf[4] = "\t@move " + tmp + " #adr." + tmp + " #$" + pas.SysUtils.IntToHex(p,2);
          $mod.TemporaryBuf[5] = "~";
        };
        $mod.TemporaryBuf[6] = "~";
        $mod.TemporaryBuf[7] = "\tdex";
      };
      opt_TEMP_MOVE();
      opt_TEMP_FILL();
      opt_TEMP_IFTMP();
      opt_TEMP_TAIL_IF();
      opt_TEMP_TAIL_CASE();
      if (pas.SysUtils.TStringHelper.IndexOf$1.call({a: 0, p: $mod.TemporaryBuf, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }},"#asm:") === 0) {
        pas.Common.OutFile.WriteLn$1(pas.Common.AsmBlock[pas.Common.StrToInt(pas.System.Copy($mod.TemporaryBuf[0],6,256))]);
        $mod.TemporaryBuf[0] = "~";
      };
      if (pas.SysUtils.TStringHelper.IndexOf$1.call({a: 0, p: $mod.TemporaryBuf, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }},"#lib:") === 0) $mod.TemporaryBuf[0] = "\tm@lib " + pas.System.Copy($mod.TemporaryBuf[0],6,256);
      if ($mod.TemporaryBuf[0] === "\tsta @PARAM?") $mod.TemporaryBuf[0] = "~";
      if ($mod.TemporaryBuf[0] === "\tsty @PARAM?") $mod.TemporaryBuf[0] = "\ttya";
      if (pas.System.Pos("@FORTMP_",$mod.TemporaryBuf[0]) > 1) if (LDA(0)) {
        if (pas.System.Pos("::#$00",$mod.TemporaryBuf[0]) === 0) $mod.TemporaryBuf[0] = "\tlda " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (CMP(0)) {
        if (pas.System.Pos("::#$00",$mod.TemporaryBuf[0]) === 0) $mod.TemporaryBuf[0] = "\tcmp " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (SUB(0)) {
        if (pas.System.Pos("::#$00",$mod.TemporaryBuf[0]) === 0) $mod.TemporaryBuf[0] = "\tsub " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (SBC(0)) {
        if (pas.System.Pos("::#$00",$mod.TemporaryBuf[0]) === 0) $mod.TemporaryBuf[0] = "\tsbc " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (STA(0)) {
        $mod.TemporaryBuf[0] = "\tsta " + fortmp(GetSTRING(0))}
       else if (STY(0)) {
        $mod.TemporaryBuf[0] = "\tsty " + fortmp(GetSTRING(0))}
       else if (MVA(0) && (pas.System.Pos("mva @FORTMP_",$mod.TemporaryBuf[0]) === 0)) {
        tmp = pas.System.Copy($mod.TemporaryBuf[0],pas.System.Pos("@FORTMP_",$mod.TemporaryBuf[0]),256);
        $mod.TemporaryBuf[0] = pas.System.Copy($mod.TemporaryBuf[0],1,pas.System.Pos(" @FORTMP_",$mod.TemporaryBuf[0])) + fortmp(tmp);
      } else pas.System.Writeln("Unassigned: " + $mod.TemporaryBuf[0]);
    };
    $impl.ElfHash = function (Value) {
      var Result = 0;
      var x = 0;
      var i = 0;
      Result = 0;
      for (var $l = 1, $end = Value.length; $l <= $end; $l++) {
        i = $l;
        Result = rtl.lw(Result << 4) + Value.charCodeAt(i - 1);
        x = rtl.lw(Result & 0xF0000000);
        if (x !== 0) Result = rtl.lw(Result ^ rtl.lw(x >>> 24));
        Result = rtl.lw(Result & rtl.lw(~x));
      };
      return Result;
    };
    var s$a$clone = function (a) {
      var b = [];
      b.length = 16;
      for (var c = 0; c < 16; c++) b[c] = a[c].slice(0);
      return b;
    };
    var last_i = 7;
    var last_i_plus_one = 7 + 1;
    var min_j = 0;
    var last_j = 3;
    var cnt_s$a$clone = function (a) {
      var b = [];
      b.length = 9;
      for (var c = 0; c < 9; c++) b[c] = a[c].slice(0);
      return b;
    };
    $impl.OptimizeASM = function () {
      var inxUse = false;
      var found = false;
      var i = 0;
      var l = 0;
      var k = 0;
      var m = 0;
      var x = 0;
      var elf = 0;
      var listing = rtl.arraySetLength(null,"",1024);
      var listing_tmp = rtl.arraySetLength(null,"",128);
      var a = "";
      var t = "";
      var arg0 = "";
      var s = rtl.arraySetLength(null,"",16,4);
      function GetBYTE(i) {
        var Result = 0;
        Result = pas.Common.GetVAL(pas.System.Copy(listing[i],6,4));
        return Result;
      };
      function GetWORD(i, j) {
        var Result = 0;
        Result = pas.Common.GetVAL(pas.System.Copy(listing[i],6,4)) + (pas.Common.GetVAL(pas.System.Copy(listing[j],6,4)) << 8);
        return Result;
      };
      function TAY(i) {
        var Result = false;
        Result = listing[i] === "\ttay";
        return Result;
      };
      function TYA(i) {
        var Result = false;
        Result = listing[i] === "\ttya";
        return Result;
      };
      function INY(i) {
        var Result = false;
        Result = listing[i] === "\tiny";
        return Result;
      };
      function DEY(i) {
        var Result = false;
        Result = listing[i] === "\tdey";
        return Result;
      };
      function INX(i) {
        var Result = false;
        Result = listing[i] === "\tinx";
        return Result;
      };
      function DEX(i) {
        var Result = false;
        Result = listing[i] === "\tdex";
        return Result;
      };
      function AND_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tand (:bp),y";
        return Result;
      };
      function ORA_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tora (:bp),y";
        return Result;
      };
      function EOR_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\teor (:bp),y";
        return Result;
      };
      function LDA_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tlda (:bp),y";
        return Result;
      };
      function CMP_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tcmp (:bp),y";
        return Result;
      };
      function CMP_BP2_Y(i) {
        var Result = false;
        Result = listing[i] === "\tcmp (:bp2),y";
        return Result;
      };
      function STA_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tsta (:bp),y";
        return Result;
      };
      function INC_BP_1(i) {
        var Result = false;
        Result = listing[i] === "\tinc :bp+1";
        return Result;
      };
      function STA_BP_1(i) {
        var Result = false;
        Result = listing[i] === "\tsta :bp+1";
        return Result;
      };
      function STY_BP_1(i) {
        var Result = false;
        Result = listing[i] === "\tsty :bp+1";
        return Result;
      };
      function LDA_BP2_Y(i) {
        var Result = false;
        Result = listing[i] === "\tlda (:bp2),y";
        return Result;
      };
      function LDA_BP2(i) {
        var Result = false;
        Result = listing[i] === "\tlda :bp2";
        return Result;
      };
      function LDA_BP2_1(i) {
        var Result = false;
        Result = listing[i] === "\tlda :bp2+1";
        return Result;
      };
      function STA_TMP(i) {
        var Result = false;
        Result = listing[i] === "\tsta :TMP";
        return Result;
      };
      function STA_TMP_1(i) {
        var Result = false;
        Result = listing[i] === "\tsta :TMP+1";
        return Result;
      };
      function STA_BP2(i) {
        var Result = false;
        Result = listing[i] === "\tsta :bp2";
        return Result;
      };
      function STA_BP2_1(i) {
        var Result = false;
        Result = listing[i] === "\tsta :bp2+1";
        return Result;
      };
      function INC_BP2_1(i) {
        var Result = false;
        Result = listing[i] === "\tinc :bp2+1";
        return Result;
      };
      function STA_BP2_Y(i) {
        var Result = false;
        Result = listing[i] === "\tsta (:bp2),y";
        return Result;
      };
      function ADD_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tadd (:bp),y";
        return Result;
      };
      function SUB_BP_Y(i) {
        var Result = false;
        Result = listing[i] === "\tsub (:bp),y";
        return Result;
      };
      function ADD_BP2_Y(i) {
        var Result = false;
        Result = listing[i] === "\tadd (:bp2),y";
        return Result;
      };
      function ADC_BP2_Y(i) {
        var Result = false;
        Result = listing[i] === "\tadc (:bp2),y";
        return Result;
      };
      function LDA_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tlda #$00";
        return Result;
      };
      function ADD_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tadd #$00";
        return Result;
      };
      function SUB_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tsub #$00";
        return Result;
      };
      function ADC_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tadc #$00";
        return Result;
      };
      function CMP_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tcmp #$00";
        return Result;
      };
      function SBC_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tsbc #$00";
        return Result;
      };
      function ADC_SBC_IM_0(i) {
        var Result = false;
        Result = (listing[i] === "\tadc #$00") || (listing[i] === "\tsbc #$00");
        return Result;
      };
      function LDY_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tldy #$00";
        return Result;
      };
      function AND_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tand #$00";
        return Result;
      };
      function ORA_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\tora #$00";
        return Result;
      };
      function EOR_IM_0(i) {
        var Result = false;
        Result = listing[i] === "\teor #$00";
        return Result;
      };
      function ROR_A(i) {
        var Result = false;
        Result = listing[i] === "\tror @";
        return Result;
      };
      function ROL_A(i) {
        var Result = false;
        Result = listing[i] === "\trol @";
        return Result;
      };
      function LSR_A(i) {
        var Result = false;
        Result = listing[i] === "\tlsr @";
        return Result;
      };
      function ASL_A(i) {
        var Result = false;
        Result = listing[i] === "\tasl @";
        return Result;
      };
      function LDY_1(i) {
        var Result = false;
        Result = listing[i] === "\tldy #1";
        return Result;
      };
      function LDA_EAX_X(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda :eax",listing[i]) > 0;
        return Result;
      };
      function LDA_EAX(i) {
        var Result = false;
        Result = listing[i] === "\tlda :eax";
        return Result;
      };
      function LDA_EAX_1(i) {
        var Result = false;
        Result = listing[i] === "\tlda :eax+1";
        return Result;
      };
      function STA_EAX(i) {
        var Result = false;
        Result = listing[i] === "\tsta :eax";
        return Result;
      };
      function STA_EAX_1(i) {
        var Result = false;
        Result = listing[i] === "\tsta :eax+1";
        return Result;
      };
      function STA_ECX(i) {
        var Result = false;
        Result = listing[i] === "\tsta :ecx";
        return Result;
      };
      function STA_ECX_1(i) {
        var Result = false;
        Result = listing[i] === "\tsta :ecx+1";
        return Result;
      };
      function ADD_EAX(i) {
        var Result = false;
        Result = listing[i] === "\tadd :eax";
        return Result;
      };
      function ADC_EAX_1(i) {
        var Result = false;
        Result = listing[i] === "\tadc :eax+1";
        return Result;
      };
      function SUB_EAX(i) {
        var Result = false;
        Result = listing[i] === "\tsub :eax";
        return Result;
      };
      function SBC_EAX_1(i) {
        var Result = false;
        Result = listing[i] === "\tsbc :eax+1";
        return Result;
      };
      function STA_im_0(i) {
        var Result = false;
        Result = listing[i] === "\tsta #$00";
        return Result;
      };
      function STY_im_0(i) {
        var Result = false;
        Result = listing[i] === "\tsty #$00";
        return Result;
      };
      function LAB_A(i) {
        var Result = false;
        Result = listing[i] === "@";
        return Result;
      };
      function IX(i) {
        var Result = false;
        Result = pas.System.Pos(",x",listing[i]) > 0;
        return Result;
      };
      function IY(i) {
        var Result = false;
        Result = pas.System.Pos(",y",listing[i]) > 0;
        return Result;
      };
      function CMP_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tcmp #",listing[i]) === 1;
        return Result;
      };
      function LDY_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tldy #",listing[i]) === 1;
        return Result;
      };
      function LDY(i) {
        var Result = false;
        Result = pas.System.Pos("\tldy ",listing[i]) === 1;
        return Result;
      };
      function LDY_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tldy :STACK",listing[i]) === 1;
        return Result;
      };
      function LDY_VAL(i) {
        var Result = false;
        Result = (pas.System.Pos("\tldy ",listing[i]) === 1) && (pas.System.Pos("\tldy :STACK",listing[i]) === 0);
        return Result;
      };
      function STY(i) {
        var Result = false;
        if (listing[i] === "\tsty #$00") return false;
        Result = pas.System.Pos("\tsty ",listing[i]) === 1;
        return Result;
      };
      function STY_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tsty :STACK",listing[i]) === 1;
        return Result;
      };
      function ROR(i) {
        var Result = false;
        Result = pas.System.Pos("\tror ",listing[i]) === 1;
        return Result;
      };
      function ROR_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tror :STACK",listing[i]) === 1;
        return Result;
      };
      function LSR(i) {
        var Result = false;
        Result = pas.System.Pos("\tlsr ",listing[i]) === 1;
        return Result;
      };
      function LSR_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tlsr :STACK",listing[i]) === 1;
        return Result;
      };
      function ROL(i) {
        var Result = false;
        Result = pas.System.Pos("\trol ",listing[i]) === 1;
        return Result;
      };
      function ROL_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\trol :STACK",listing[i]) === 1;
        return Result;
      };
      function ASL(i) {
        var Result = false;
        Result = pas.System.Pos("\tasl ",listing[i]) === 1;
        return Result;
      };
      function ASL_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tasl :STACK",listing[i]) === 1;
        return Result;
      };
      function CMP(i) {
        var Result = false;
        Result = pas.System.Pos("\tcmp ",listing[i]) === 1;
        return Result;
      };
      function CMP_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tcmp :STACK",listing[i]) === 1;
        return Result;
      };
      function CMP_VAL(i) {
        var Result = false;
        Result = (pas.System.Pos("\tcmp ",listing[i]) === 1) && (pas.System.Pos("\tcmp :STACK",listing[i]) === 0);
        return Result;
      };
      function MWA(i) {
        var Result = false;
        Result = pas.System.Pos("\tmwa ",listing[i]) === 1;
        return Result;
      };
      function MWY(i) {
        var Result = false;
        Result = pas.System.Pos("\tmwy ",listing[i]) === 1;
        return Result;
      };
      function MVY(i) {
        var Result = false;
        Result = pas.System.Pos("\tmvy ",listing[i]) === 1;
        return Result;
      };
      function MVY_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tmvy #",listing[i]) === 1;
        return Result;
      };
      function MVA_(i) {
        var Result = false;
        Result = (pas.System.Pos("\tmva ",listing[i]) === 1) && (pas.System.Pos(",y",listing[i]) === 0);
        return Result;
      };
      function MVA(i) {
        var Result = false;
        Result = pas.System.Pos("\tmva ",listing[i]) === 1;
        return Result;
      };
      function MVA_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tmva #",listing[i]) === 1;
        return Result;
      };
      function MVA_IM_0(i) {
        var Result = false;
        Result = pas.System.Pos("\tmva #$00",listing[i]) === 1;
        return Result;
      };
      function MVA_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tmva :STACK",listing[i]) === 1;
        return Result;
      };
      function ORA(i) {
        var Result = false;
        Result = pas.System.Pos("\tora ",listing[i]) === 1;
        return Result;
      };
      function AND_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tand #",listing[i]) === 1;
        return Result;
      };
      function LDA_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda #",listing[i]) === 1;
        return Result;
      };
      function LDA_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda :STACK",listing[i]) === 1;
        return Result;
      };
      function LDA_ADR_Y(i) {
        var Result = false;
        if (pas.System.Pos(",y",listing[i]) > 0) {
          Result = (pas.System.Pos("\tlda adr.",listing[i]) === 1) || ((pas.System.Pos("\tlda ",listing[i]) === 1) && (pas.System.Pos(".adr.",listing[i]) > 0))}
         else Result = false;
        return Result;
      };
      function LDA_ADR(i) {
        var Result = false;
        Result = (pas.System.Pos("\tlda adr.",listing[i]) === 1) || ((pas.System.Pos("\tlda ",listing[i]) === 1) && (pas.System.Pos(".adr.",listing[i]) > 0));
        return Result;
      };
      function LDA(i) {
        var Result = false;
        Result = (pas.System.Pos("\tlda ",listing[i]) === 1) && (pas.System.Pos("\tlda adr.",listing[i]) === 0) && (pas.System.Pos(".adr.",listing[i]) === 0);
        return Result;
      };
      function LDA_VAL(i) {
        var Result = false;
        Result = (pas.System.Pos("\tlda ",listing[i]) === 1) && (pas.System.Pos("\tlda :STACK",listing[i]) === 0);
        return Result;
      };
      function LDA_A(i) {
        var Result = false;
        Result = pas.System.Pos("\tlda ",listing[i]) === 1;
        return Result;
      };
      function LDA_Y(i) {
        var Result = false;
        Result = (pas.System.Pos("\tlda ",listing[i]) === 1) && (pas.System.Pos(",y",listing[i]) > 0);
        return Result;
      };
      function STA_ADR_Y(i) {
        var Result = false;
        if (pas.System.Pos(",y",listing[i]) > 0) {
          Result = (pas.System.Pos("\tsta adr.",listing[i]) === 1) || ((pas.System.Pos("\tsta ",listing[i]) === 1) && (pas.System.Pos(".adr.",listing[i]) > 0))}
         else Result = false;
        return Result;
      };
      function STA_ADR(i) {
        var Result = false;
        Result = (pas.System.Pos("\tsta adr.",listing[i]) === 1) || ((pas.System.Pos("\tsta ",listing[i]) === 1) && (pas.System.Pos(".adr.",listing[i]) > 0));
        return Result;
      };
      function STA(i) {
        var Result = false;
        if (listing[i] === "\tsta #$00") return false;
        Result = (pas.System.Pos("\tsta ",listing[i]) === 1) && (pas.System.Pos("\tsta adr.",listing[i]) === 0) && (pas.System.Pos(".adr.",listing[i]) === 0);
        return Result;
      };
      function STA_A(i) {
        var Result = false;
        if (listing[i] === "\tsta #$00") return false;
        Result = pas.System.Pos("\tsta ",listing[i]) === 1;
        return Result;
      };
      function STA_VAL(i) {
        var Result = false;
        if (listing[i] === "\tsta #$00") return false;
        Result = (pas.System.Pos("\tsta ",listing[i]) === 1) && (pas.System.Pos("\tsta :STACK",listing[i]) === 0);
        return Result;
      };
      function STA_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tsta :STACK",listing[i]) === 1;
        return Result;
      };
      function INC_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tinc :STACK",listing[i]) === 1;
        return Result;
      };
      function INC_(i) {
        var Result = false;
        Result = pas.System.Pos("\tinc ",listing[i]) === 1;
        return Result;
      };
      function DEC_(i) {
        var Result = false;
        Result = pas.System.Pos("\tdec ",listing[i]) === 1;
        return Result;
      };
      function JMP(i) {
        var Result = false;
        Result = pas.System.Pos("\tjmp l_",listing[i]) === 1;
        return Result;
      };
      function LAB_L(i) {
        var Result = false;
        Result = pas.System.Pos("l_",listing[i]) === 1;
        return Result;
      };
      function LAB_B(i) {
        var Result = false;
        Result = pas.System.Pos("b_",listing[i]) === 1;
        return Result;
      };
      function LAB_C(i) {
        var Result = false;
        Result = pas.System.Pos("c_",listing[i]) === 1;
        return Result;
      };
      function ADD(i) {
        var Result = false;
        Result = pas.System.Pos("\tadd ",listing[i]) === 1;
        return Result;
      };
      function ADD_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tadd #",listing[i]) === 1;
        return Result;
      };
      function ADC(i) {
        var Result = false;
        Result = pas.System.Pos("\tadc ",listing[i]) === 1;
        return Result;
      };
      function ADC_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tadc #",listing[i]) === 1;
        return Result;
      };
      function ADD_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tadd :STACK",listing[i]) === 1;
        return Result;
      };
      function ADC_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tadc :STACK",listing[i]) === 1;
        return Result;
      };
      function ADD_SUB_STACK(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadd :STACK",listing[i]) === 1) || (pas.System.Pos("\tsub :STACK",listing[i]) === 1);
        return Result;
      };
      function ADC_SBC_STACK(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadc :STACK",listing[i]) === 1) || (pas.System.Pos("\tsbc :STACK",listing[i]) === 1);
        return Result;
      };
      function SUB(i) {
        var Result = false;
        Result = pas.System.Pos("\tsub ",listing[i]) === 1;
        return Result;
      };
      function SUB_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tsub #",listing[i]) === 1;
        return Result;
      };
      function SBC(i) {
        var Result = false;
        Result = pas.System.Pos("\tsbc ",listing[i]) === 1;
        return Result;
      };
      function SBC_IM(i) {
        var Result = false;
        Result = pas.System.Pos("\tsbc #",listing[i]) === 1;
        return Result;
      };
      function SUB_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tsub :STACK",listing[i]) === 1;
        return Result;
      };
      function SBC_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tsbc :STACK",listing[i]) === 1;
        return Result;
      };
      function ADC_SBC_IM(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadc #",listing[i]) === 1) || (pas.System.Pos("\tsbc #",listing[i]) === 1);
        return Result;
      };
      function ADD_SUB_IM(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadd #",listing[i]) === 1) || (pas.System.Pos("\tsub #",listing[i]) === 1);
        return Result;
      };
      function ADD_SUB(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadd ",listing[i]) === 1) || (pas.System.Pos("\tsub ",listing[i]) === 1);
        return Result;
      };
      function ADD_SUB_VAL(i) {
        var Result = false;
        Result = ((pas.System.Pos("\tadd ",listing[i]) === 1) && (pas.System.Pos("\tadd :STACK",listing[i]) === 0)) || ((pas.System.Pos("\tsub ",listing[i]) === 1) && (pas.System.Pos("\tsub :STACK",listing[i]) === 0));
        return Result;
      };
      function ADC_SBC(i) {
        var Result = false;
        Result = (pas.System.Pos("\tadc ",listing[i]) === 1) || (pas.System.Pos("\tsbc ",listing[i]) === 1);
        return Result;
      };
      function ADC_SBC_VAL(i) {
        var Result = false;
        Result = ((pas.System.Pos("\tadc ",listing[i]) === 1) && (pas.System.Pos("\tadc :STACK",listing[i]) === 0)) || ((pas.System.Pos("\tsbc ",listing[i]) === 1) && (pas.System.Pos("\tsbc :STACK",listing[i]) === 0));
        return Result;
      };
      function EOR(i) {
        var Result = false;
        Result = pas.System.Pos("\teor ",listing[i]) === 1;
        return Result;
      };
      function AND_(i) {
        var Result = false;
        Result = pas.System.Pos("\tand ",listing[i]) === 1;
        return Result;
      };
      function AND_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tand :STACK",listing[i]) === 1;
        return Result;
      };
      function ORA_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\tora :STACK",listing[i]) === 1;
        return Result;
      };
      function EOR_STACK(i) {
        var Result = false;
        Result = pas.System.Pos("\teor :STACK",listing[i]) === 1;
        return Result;
      };
      function AND_ORA_EOR_STACK(i) {
        var Result = false;
        Result = AND_STACK(i) || ORA_STACK(i) || EOR_STACK(i);
        return Result;
      };
      function AND_ORA_EOR_IM(i) {
        var Result = false;
        Result = (pas.System.Pos("\tand #",listing[i]) === 1) || (pas.System.Pos("\tora #",listing[i]) === 1) || (pas.System.Pos("\teor #",listing[i]) === 1);
        return Result;
      };
      function AND_ORA_EOR(i) {
        var Result = false;
        Result = (pas.System.Pos("\tand ",listing[i]) === 1) || (pas.System.Pos("\tora ",listing[i]) === 1) || (pas.System.Pos("\teor ",listing[i]) === 1);
        return Result;
      };
      function AND_ORA_EOR_VAL(i) {
        var Result = false;
        Result = ((pas.System.Pos("\tand ",listing[i]) === 1) && (pas.System.Pos("\tand :STACK",listing[i]) === 0)) || ((pas.System.Pos("\tora ",listing[i]) === 1) && (pas.System.Pos("\tora :STACK",listing[i]) === 0)) || ((pas.System.Pos("\teor ",listing[i]) === 1) && (pas.System.Pos("\teor :STACK",listing[i]) === 0));
        return Result;
      };
      function AND_ORA_EOR_BP2_Y(i) {
        var Result = false;
        Result = (listing[i] === "\tand (:bp2),y") || (listing[i] === "\tora (:bp2),y") || (listing[i] === "\teor (:bp2),y");
        return Result;
      };
      function MWY_BP2(i) {
        var Result = false;
        Result = (pas.System.Pos("\tmwy ",listing[i]) === 1) && (pas.System.Pos(" :bp2",listing[i]) > 0);
        return Result;
      };
      function ADD_SUB_AL_CL(i) {
        var Result = false;
        Result = (listing[i] === "\tjsr addAL_CL") || (listing[i] === "\tjsr subAL_CL");
        return Result;
      };
      function ADD_SUB_AX_CX(i) {
        var Result = false;
        Result = (listing[i] === "\tjsr addAX_CX") || (listing[i] === "\tjsr subAX_CX");
        return Result;
      };
      function ADD_SUB_EAX_ECX(i) {
        var Result = false;
        Result = (listing[i] === "\tjsr addEAX_ECX") || (listing[i] === "\tjsr subEAX_ECX");
        return Result;
      };
      function JSR(i) {
        var Result = false;
        Result = pas.System.Pos("\tjsr ",listing[i]) === 1;
        return Result;
      };
      function JEQ(i) {
        var Result = false;
        Result = pas.System.Pos("\tjeq ",listing[i]) === 1;
        return Result;
      };
      function JNE(i) {
        var Result = false;
        Result = pas.System.Pos("\tjne ",listing[i]) === 1;
        return Result;
      };
      function JPL(i) {
        var Result = false;
        Result = pas.System.Pos("\tjpl ",listing[i]) === 1;
        return Result;
      };
      function JMI(i) {
        var Result = false;
        Result = pas.System.Pos("\tjmi ",listing[i]) === 1;
        return Result;
      };
      function JCC(i) {
        var Result = false;
        Result = pas.System.Pos("\tjcc ",listing[i]) === 1;
        return Result;
      };
      function JCS(i) {
        var Result = false;
        Result = pas.System.Pos("\tjcs ",listing[i]) === 1;
        return Result;
      };
      function BEQ(i) {
        var Result = false;
        Result = pas.System.Pos("\tbeq ",listing[i]) === 1;
        return Result;
      };
      function BNE(i) {
        var Result = false;
        Result = pas.System.Pos("\tbne ",listing[i]) === 1;
        return Result;
      };
      function BCC(i) {
        var Result = false;
        Result = pas.System.Pos("\tbcc ",listing[i]) === 1;
        return Result;
      };
      function BCS(i) {
        var Result = false;
        Result = pas.System.Pos("\tbcs ",listing[i]) === 1;
        return Result;
      };
      function BPL(i) {
        var Result = false;
        Result = pas.System.Pos("\tbpl ",listing[i]) === 1;
        return Result;
      };
      function BMI(i) {
        var Result = false;
        Result = pas.System.Pos("\tbmi ",listing[i]) === 1;
        return Result;
      };
      function SVC(i) {
        var Result = false;
        Result = listing[i] === "\tsvc";
        return Result;
      };
      function BNE_A(i) {
        var Result = false;
        Result = listing[i] === "\tbne @+";
        return Result;
      };
      function BEQ_A(i) {
        var Result = false;
        Result = listing[i] === "\tbeq @+";
        return Result;
      };
      function BCC_A(i) {
        var Result = false;
        Result = listing[i] === "\tbcc @+";
        return Result;
      };
      function BCS_A(i) {
        var Result = false;
        Result = listing[i] === "\tbcs @+";
        return Result;
      };
      function BPL_A(i) {
        var Result = false;
        Result = listing[i] === "\tbpl @+";
        return Result;
      };
      function BMI_A(i) {
        var Result = false;
        Result = listing[i] === "\tbmi @+";
        return Result;
      };
      function SEQ(i) {
        var Result = false;
        Result = listing[i] === "\tseq";
        return Result;
      };
      function SNE(i) {
        var Result = false;
        Result = listing[i] === "\tsne";
        return Result;
      };
      function SPL(i) {
        var Result = false;
        Result = listing[i] === "\tspl";
        return Result;
      };
      function SMI(i) {
        var Result = false;
        Result = listing[i] === "\tsmi";
        return Result;
      };
      function SCC(i) {
        var Result = false;
        Result = listing[i] === "\tscc";
        return Result;
      };
      function SCS(i) {
        var Result = false;
        Result = listing[i] === "\tscs";
        return Result;
      };
      function UNUSED_A(i) {
        var Result = false;
        Result = STY_STACK(i) || LDA_STACK(i) || STA_STACK(i) || LDA_IM(i) || ROL_STACK(i) || ROR_STACK(i) || ADC_SBC(i);
        return Result;
      };
      function onBreak(i) {
        var Result = false;
        Result = (listing[i] === "@") || (pas.System.Pos("\tjsr ",listing[i]) === 1) || (listing[i] === "\teif");
        return Result;
      };
      function WriteInstruction(i) {
        if (pas.Common.isInterrupt && ((pas.System.Pos(" :bp",listing[i]) > 0) || (pas.System.Pos(" :STACK",listing[i]) > 0))) {
          pas.Console.TextColor(12);
          pas.System.Writeln(pas.Common.UnitName[pas.Common.optimize.unitIndex - 1].Path + " (" + pas.Common.IntToStr(pas.Common.optimize.line) + ") Error: Illegal instruction in INTERRUPT block '" + pas.System.Copy(listing[i],2,256) + "'");
          pas.Console.NormVideo();
        };
        $mod.WriteOut(listing[i]);
      };
      function LOCAL(i) {
        var Result = false;
        if ((i < 0) || (listing[i] === "")) {
          Result = false}
         else Result = listing[i] === "\t.LOCAL";
        return Result;
      };
      function ENDL(i) {
        var Result = false;
        if ((i < 0) || (listing[i] === "")) {
          Result = false}
         else Result = listing[i] === "\t.ENDL";
        return Result;
      };
      function SKIP(i) {
        var Result = false;
        if ((i < 0) || (listing[i] === "")) {
          Result = false}
         else Result = SEQ(i) || SNE(i) || SPL(i) || SMI(i) || SCC(i) || SCS(i) || JEQ(i) || JNE(i) || JPL(i) || JMI(i) || JCC(i) || JCS(i) || BEQ(i) || BNE(i) || BPL(i) || BMI(i) || BCC(i) || BCS(i);
        return Result;
      };
      function LabelIsUsed(i) {
        var Result = false;
        function LabelTest(mne) {
          var $tmp = pas.Common.optyY.charAt(0);
          if (($tmp === "+") || ($tmp === "-")) {
            Result = listing[i] === (mne + pas.System.Copy(pas.Common.optyY,6,256))}
           else if ($tmp === "*") {
            if (pas.Common.optyY.charCodeAt(1) in rtl.createSet(43,45)) {
              Result = (listing[i] === (mne + pas.System.Copy(pas.Common.optyY,6,pas.System.Pos("|",pas.Common.optyY) - 6))) || (listing[i] === (mne + pas.System.Copy(pas.Common.optyY,pas.System.Pos("|",pas.Common.optyY) + 1,256)))}
             else Result = listing[i] === (mne + pas.System.Copy(pas.Common.optyY,6,256))}
           else {
            Result = listing[i] === (mne + pas.Common.optyY);
          };
        };
        Result = false;
        if (pas.Common.optyY !== "") if (pas.System.Pos("\tsta ",listing[i]) === 1) {
          LabelTest("\tsta ")}
         else if (pas.System.Pos("\tinc ",listing[i]) === 1) {
          LabelTest("\tinc ")}
         else if (pas.System.Pos("\tdec ",listing[i]) === 1) LabelTest("\tdec ");
        return Result;
      };
      function EAX(i) {
        var Result = false;
        Result = pas.System.Pos(" :eax",listing[i]) > 0;
        return Result;
      };
      function IFDEF_MUL8(i) {
        var Result = false;
        Result = (listing[i + 1] === "\tfmulu_8") && (listing[i] === "\t.ifdef fmulinit");
        return Result;
      };
      function IFDEF_MUL16(i) {
        var Result = false;
        Result = (listing[i + 1] === "\tfmulu_16") && (listing[i] === "\t.ifdef fmulinit");
        return Result;
      };
      function LDA_STA_BP(i) {
        var Result = false;
        Result = (LDA_BP_Y(i) && STA(i + 1)) || (LDA(i) && STA_BP_Y(i + 1));
        return Result;
      };
      function LDA_STA_ADR(i, q, op) {
        if (LDA_ADR(i + 6) && IY(i + 6)) {
          pas.System.Delete({a: i + 6, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 6]),2);
          listing[i + 6] = listing[i + 6] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if (STA_ADR(i + 7) && IY(i + 7)) {
          pas.System.Delete({a: i + 7, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 7]),2);
          listing[i + 7] = listing[i + 7] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if ((LDA_ADR(i + 8) === false) && (STA_ADR(i + 9) === false)) return;
        if (LDA_ADR(i + 8) && IY(i + 8)) {
          pas.System.Delete({a: i + 8, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 8]),2);
          listing[i + 8] = listing[i + 8] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if (STA_ADR(i + 9) && IY(i + 9)) {
          pas.System.Delete({a: i + 9, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 9]),2);
          listing[i + 9] = listing[i + 9] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if ((LDA_ADR(i + 10) === false) && (STA_ADR(i + 11) === false)) return;
        if (LDA_ADR(i + 10) && IY(i + 10)) {
          pas.System.Delete({a: i + 10, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 10]),2);
          listing[i + 10] = listing[i + 10] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if (STA_ADR(i + 11) && IY(i + 11)) {
          pas.System.Delete({a: i + 11, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 11]),2);
          listing[i + 11] = listing[i + 11] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if ((LDA_ADR(i + 12) === false) && (STA_ADR(i + 13) === false)) return;
        if (LDA_ADR(i + 12) && IY(i + 12)) {
          pas.System.Delete({a: i + 12, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 12]),2);
          listing[i + 12] = listing[i + 12] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
        if (STA_ADR(i + 13) && IY(i + 13)) {
          pas.System.Delete({a: i + 13, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",listing[i + 13]),2);
          listing[i + 13] = listing[i + 13] + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y";
        };
      };
      function Expand(i, e) {
        var k = 0;
        for (var $l = l - 1, $end = i; $l >= $end; $l--) {
          k = $l;
          listing[k + e] = listing[k];
        };
        l += e;
      };
      function Rebuild() {
        var k = 0;
        var i = 0;
        k = 0;
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if ((listing[i] !== "") && (listing[i].charAt(0) !== ";")) {
            listing[k] = listing[i];
            if (k > 0) {
              if (DEX(k) && INX(k - 1)) {
                listing[k - 1] = "";
                listing[k] = "";
                k -= 1;
                continue;
              };
              if (INX(k) && DEX(k - 1)) {
                listing[k - 1] = "";
                listing[k] = "";
                k -= 1;
                continue;
              };
              if (LDA_STACK(k) && STA_STACK(k - 1) && STA_A(i + 1)) if (pas.System.Copy(listing[k],6,256) === pas.System.Copy(listing[k - 1],6,256)) {
                listing[k - 1] = "";
                listing[k] = "";
                k -= 1;
                continue;
              };
              if (STA_STACK(k) && LDA_STACK(k - 1) && LDA_A(i + 1)) if (pas.System.Copy(listing[k],6,256) === pas.System.Copy(listing[k - 1],6,256)) {
                listing[k - 1] = "";
                listing[k] = "";
                k -= 1;
                continue;
              };
              if (STA_STACK(k) && LDA_IM(k - 1) && LDA_VAL(i + 1) && STA_STACK(i + 2)) if (listing[k] === listing[i + 2]) {
                listing[k - 1] = "";
                listing[k] = "";
                k -= 1;
                continue;
              };
              if (LDA_A(k) && LDA_A(k - 1) && STA_A(i + 1)) {
                listing[k - 1] = listing[k];
                listing[k] = "";
                continue;
              };
              if (INY(k) && LDA_A(k - 1) && LDA_A(i + 1)) {
                listing[k - 1] = "\tiny";
                listing[k] = "";
                continue;
              };
              if (STA_im_0(k) && STA_STACK(k - 1)) {
                listing[k] = "";
                continue;
              };
              if (STA_im_0(k) && (LDA_A(k - 1) || ROL_A(k - 1) || ASL_A(k - 1))) {
                if (LDA_A(i + 1)) {
                  listing[k - 1] = "";
                  listing[k] = "";
                  k -= 1;
                  continue;
                };
                if ((LDY(i + 1) || MWY(i + 1) || INY(i + 1)) && LDA_A(i + 2)) {
                  listing[k - 1] = "";
                  listing[k] = "";
                  k -= 1;
                  continue;
                };
                if (STA_im_0(i + 1) && STA_im_0(i + 2) && STA_im_0(i + 3) && LDA_A(i + 4)) {
                  listing[k - 1] = "";
                  listing[k] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = "";
                  k -= 1;
                  continue;
                };
                if (STA_im_0(i + 1) && STA_im_0(i + 2) && LDA_A(i + 3)) {
                  listing[k - 1] = "";
                  listing[k] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  k -= 1;
                  continue;
                };
                if (STA_im_0(i + 1) && LDA_A(i + 2)) {
                  listing[k - 1] = "";
                  listing[k] = "";
                  listing[i + 1] = "";
                  k -= 1;
                  continue;
                };
              };
            };
            k += 1;
          };
        };
        listing[k] = "";
        listing[k + 1] = "";
        listing[k + 2] = "";
        listing[k + 3] = "";
        l = k;
      };
      function GetString(a) {
        var Result = "";
        var i = 0;
        Result = "";
        i = 6;
        if (a !== "") while (!(a.charCodeAt(i - 1) in rtl.createSet(32,9)) && (i <= a.length)) {
          Result = Result + a.charAt(i - 1);
          i += 1;
        };
        return Result;
      };
      function GetString$1(j) {
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        i = 6;
        a = listing[j];
        if (a !== "") while (!(a.charCodeAt(i - 1) in rtl.createSet(32,9)) && (i <= a.length)) {
          Result = Result + a.charAt(i - 1);
          i += 1;
        };
        return Result;
      };
      function GetStringLast(j) {
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        a = listing[j];
        if (a !== "") {
          i = a.length;
          while (!(a.charCodeAt(i - 1) in rtl.createSet(32,9)) && (i > 0)) i -= 1;
          Result = pas.System.Copy(a,i + 1,256);
        };
        return Result;
      };
      function GetARG(n, x, reset) {
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        if (x < 0) return Result;
        a = s[x][n];
        if (a === "") {
          Result = pas.Common.IntToStr(x + 8);
          var $tmp = n;
          if ($tmp === 0) {
            Result = ":STACKORIGIN+" + Result}
           else if ($tmp === 1) {
            Result = ":STACKORIGIN+STACKWIDTH+" + Result}
           else if ($tmp === 2) {
            Result = ":STACKORIGIN+STACKWIDTH*2+" + Result}
           else if ($tmp === 3) Result = ":STACKORIGIN+STACKWIDTH*3+" + Result;
        } else {
          i = 6;
          while (a.charCodeAt(i - 1) in rtl.createSet(32,9)) i += 1;
          while (!(a.charCodeAt(i - 1) in rtl.createSet(32,9)) && (i <= a.length)) {
            Result = Result + a.charAt(i - 1);
            i += 1;
          };
          if (reset) s[x][n] = "";
        };
        return Result;
      };
      function RemoveUnusedSTACK() {
        var Result = false;
        var i = 0;
        var j = 0;
        var cnt_l = rtl.arraySetLength(null,false,9,4);
        var cnt_s = rtl.arraySetLength(null,false,9,4);
        function Clear() {
          var i = 0;
          var j = 0;
          for (i = 0; i <= 15; i++) {
            s[i][0] = "";
            s[i][1] = "";
            s[i][2] = "";
            s[i][3] = "";
          };
          for (i = 0; i <= 8; i++) {
            for (j = 0; j <= 3; j++) {
              cnt_l[i][j] = false;
              cnt_s[i][j] = false;
            };
          };
        };
        function unrelated(i) {
          var Result = false;
          var j = 0;
          var k = 0;
          Result = false;
          for (j = 0; j <= 7; j++) for (k = 0; k <= 3; k++) if (pas.System.Pos(GetARG(k,j,false),listing[i]) > 0) return (cnt_s[j][k] && (cnt_l[j][k] === false)) || ((cnt_s[j][k] === false) && cnt_l[j][k]);
          for (k = 0; k <= 3; k++) if (pas.System.Pos(GetARG(k,8,false),listing[i]) > 0) return ((cnt_s[8][0] || cnt_s[8][1] || cnt_s[8][2] || cnt_s[8][3]) === true) && ((cnt_l[8][0] || cnt_l[8][1] || cnt_l[8][2] || cnt_l[8][3]) === false);
          return Result;
        };
        Result = false;
        Rebuild();
        Clear();
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.System.Pos(" :STACK",listing[i]) > 0) if (STA_STACK(i) || STY_STACK(i)) {
            for (j = 0; j <= 8; j++) if (pas.System.Pos(GetARG(0,j,false),listing[i]) > 0) {
              cnt_s[j][0] = true;
              break;
            } else if (pas.System.Pos(GetARG(1,j,false),listing[i]) > 0) {
              cnt_s[j][1] = true;
              break;
            } else if (pas.System.Pos(GetARG(2,j,false),listing[i]) > 0) {
              cnt_s[j][2] = true;
              break;
            } else if (pas.System.Pos(GetARG(3,j,false),listing[i]) > 0) {
              cnt_s[j][3] = true;
              break;
            };
          } else {
            for (j = 0; j <= 8; j++) if (pas.System.Pos(GetARG(0,j,false),listing[i]) > 0) {
              cnt_l[j][0] = true;
              break;
            } else if (pas.System.Pos(GetARG(1,j,false),listing[i]) > 0) {
              cnt_l[j][1] = true;
              break;
            } else if (pas.System.Pos(GetARG(2,j,false),listing[i]) > 0) {
              cnt_l[j][2] = true;
              break;
            } else if (pas.System.Pos(GetARG(3,j,false),listing[i]) > 0) {
              cnt_l[j][3] = true;
              break;
            };
          };
        };
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (pas.System.Pos(" :STACK",listing[i]) > 0) if (unrelated(i)) {
            a = listing[i];
            k = pas.System.Pos(" :STACK",a);
            pas.System.Delete({get: function () {
                return a;
              }, set: function (v) {
                a = v;
              }},k,256);
            pas.System.Insert(" #$00",{get: function () {
                return a;
              }, set: function (v) {
                a = v;
              }},k);
            listing[i] = a;
            Result = true;
          };
        };
        return Result;
      };
      function opt_SHR_BYTE() {
        var Result = false;
        var m = 0;
        var k = 0;
        t = "";
        k = pas.Common.GetVAL(GetARG(0,x,true));
        if (k < 0) return true;
        Result = false;
        if (k > 7) {
          s[x - 1][0] = "\tmva #$00";
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
          l += 8;
        } else {
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          l += 1;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            listing[l] = "\tlsr @";
            l += 1;
          };
          listing[l] = "\tsta " + GetARG(0,x - 1,true);
          l += 1;
        };
        return Result;
      };
      function opt_SHR_WORD() {
        var m = 0;
        var k = 0;
        t = "";
        k = pas.Common.GetVAL(GetARG(0,x,false));
        s[x - 1][2] = "\tmva #$00";
        s[x - 1][3] = "\tmva #$00";
        if (k < 0) {
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tldy " + GetARG(0,x,true);
          s[x][0] = "";
          listing[l + 8] = "\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 9] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 10] = "\tlsr " + GetARG(1,x - 1,true);
          listing[l + 11] = "\tror @";
          listing[l + 12] = "\tdey";
          listing[l + 13] = "\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 14] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 15] = "\tsta " + GetARG(0,x - 1,true);
          l += 16;
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k > 15) {
          s[x - 1][0] = "\tmva #$00";
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
          l += 8;
        } else if (k === 9) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          s[x - 1][0] = "";
          listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
          l += 3;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 10) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          s[x - 1][0] = "";
          listing[l + 3] = "\tsta " + GetARG(0,x - 1,true);
          l += 4;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 11) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          s[x - 1][0] = "";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          l += 5;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 12) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          s[x - 1][0] = "";
          listing[l + 5] = "\tsta " + GetARG(0,x - 1,true);
          l += 6;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 13) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          s[x - 1][0] = "";
          listing[l + 6] = "\tsta " + GetARG(0,x - 1,true);
          l += 7;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 14) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tlsr @";
          s[x - 1][0] = "";
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 15) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tasl @";
          s[x - 1][0] = "";
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\trol @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          l += 5;
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 8) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          l += 2;
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(0,x - 1,true);
          l += 3;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            listing[l] = "\tlsr " + GetARG(1,x - 1,true);
            listing[l + 1] = "\tror @";
            l += 2;
          };
          listing[l] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tsta " + GetARG(1,x - 1,true);
          l += 3;
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(3,x - 1,true);
          l += 4;
        };
      };
      function opt_SHR_CARD() {
        var m = 0;
        var k = 0;
        t = "";
        k = pas.Common.GetVAL(GetARG(0,x,false));
        if (k < 0) {
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tldy " + GetARG(0,x,true);
          s[x][0] = "";
          listing[l + 8] = "\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 9] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 10] = "\tlsr " + GetARG(3,x - 1,true);
          listing[l + 11] = "\tror " + GetARG(2,x - 1,true);
          listing[l + 12] = "\tror " + GetARG(1,x - 1,true);
          listing[l + 13] = "\tror @";
          listing[l + 14] = "\tdey";
          listing[l + 15] = "\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 16] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 17] = "\tsta " + GetARG(0,x - 1,true);
          l += 18;
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k === 13) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 8] = "\tasl " + GetARG(0,x - 1,true);
          listing[l + 9] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 10] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 11] = "\trol " + GetARG(3,x - 1,true);
          listing[l + 12] = "\tasl " + GetARG(0,x - 1,true);
          listing[l + 13] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 14] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 15] = "\trol " + GetARG(3,x - 1,true);
          listing[l + 16] = "\tasl " + GetARG(0,x - 1,true);
          listing[l + 17] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 18] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 19] = "\trol " + GetARG(3,x - 1,true);
          l += 20;
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
          l += 8;
        } else if (k === 23) {
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tasl @";
          s[x - 1][0] = "";
          listing[l + 2] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 3] = "\trol @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tlda #$00";
          listing[l + 6] = "\trol @";
          listing[l + 7] = "\tsta " + GetARG(1,x - 1,true);
          l += 8;
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(3,x - 1,true);
          l += 4;
        } else if (k === 27) {
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          l += 5;
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else if (k === 31) {
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 1] = "\tasl @";
          s[x - 1][0] = "";
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\trol @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          l += 5;
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
        } else {
          m = rtl.trunc(k / 8);
          k = k % 8;
          if (m > 3) {
            k = 0;
            listing[l] = "\tlda #$00";
            listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
            listing[l + 2] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
            listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
            l += 5;
          } else {
            var $tmp = m;
            if ($tmp === 1) {
              listing[l] = "\tlda " + GetARG(1,x - 1,true);
              s[x - 1][0] = "";
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
              s[x - 1][1] = "";
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
              s[x - 1][2] = "";
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 6] = "\tlda #$00";
              listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
              l += 8;
            } else if ($tmp === 2) {
              listing[l] = "\tlda " + GetARG(2,x - 1,true);
              s[x - 1][0] = "";
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(3,x - 1,true);
              s[x - 1][1] = "";
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tlda #$00";
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 6] = "\tsta " + GetARG(3,x - 1,true);
              l += 7;
            } else if ($tmp === 3) {
              listing[l] = "\tlda " + GetARG(3,x - 1,true);
              s[x - 1][0] = "";
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              s[x - 1][1] = "";
              s[x - 1][2] = "";
              s[x - 1][3] = "";
              listing[l + 2] = "\tlda #$00";
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
              l += 6;
            };
          };
          if (k > 0) {
            if (m === 0) {
              listing[l] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 6] = "\tlda " + GetARG(3,x - 1,true);
              listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
              l += 8;
            };
            for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
              m = $l;
              listing[l] = "\tlsr " + GetARG(3,x - 1,true);
              listing[l + 1] = "\tror " + GetARG(2,x - 1,true);
              listing[l + 2] = "\tror " + GetARG(1,x - 1,true);
              listing[l + 3] = "\tror " + GetARG(0,x - 1,true);
              l += 4;
            };
            listing[l] = "\tlda " + GetARG(0,x - 1,true);
            listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
            listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
            listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
            listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
            listing[l + 6] = "\tlda " + GetARG(3,x - 1,true);
            listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
            l += 8;
          };
        };
      };
      function opt_SHL_BYTE() {
        var k = 0;
        var m = 0;
        t = "";
        k = pas.Common.GetVAL(GetARG(0,x,false));
        s[x - 1][1] = "";
        s[x - 1][2] = "";
        s[x - 1][3] = "";
        l += 2;
        if (k > 31) {
          s[x - 1][0] = "";
          listing[l] = "\tlda #$00";
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda #$00";
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
          l += 8;
        } else if (k === 31) {
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tlsr @";
          s[x - 1][3] = "";
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\tror @";
          listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
          l += 5;
          s[x - 1][0] = "\tmva #$00";
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          l += 6;
        } else if (k === 10) {
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tasl @";
          listing[l + 8] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 9] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 10] = "\tasl @";
          listing[l + 11] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 12] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          s[x - 1][0] = "\tmva #$00";
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
        } else if (k === 11) {
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tasl @";
          listing[l + 8] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 9] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 10] = "\tasl @";
          listing[l + 11] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 12] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 13] = "\tasl @";
          listing[l + 14] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 15] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 16] = "\tsta " + GetARG(0,x - 1,true);
          l += 17;
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          s[x - 1][0] = "\tmva #$00";
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
        } else if (k in rtl.createSet(null,12,15)) {
          k = 16 - k;
          listing[l] = "\tlda #$00";
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda #$00";
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 8] = "\tlda #$00";
          listing[l + 9] = "\tsta " + GetARG(0,x - 1,true);
          l += 10;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            listing[l] = "\tlsr " + GetARG(2,x - 1,true);
            listing[l + 1] = "\tror @";
            l += 2;
          };
          listing[l] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 2] = "\tsta " + GetARG(2,x - 1,true);
          s[x - 1][3] = "\tmva #$00";
          listing[l + 3] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
          l += 5;
        } else if (k in rtl.createSet(8,16,24)) {
          listing[l] = "\tlda #$00";
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda #$00";
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          var $tmp = k;
          if ($tmp === 8) {
            listing[l + 7] = "\tsta " + GetARG(1,x - 1,true)}
           else if ($tmp === 16) {
            listing[l + 7] = "\tsta " + GetARG(2,x - 1,true)}
           else if ($tmp === 24) listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 8] = "\tlda #$00";
          listing[l + 9] = "\tsta " + GetARG(0,x - 1,true);
          l += 10;
        } else {
          if ((k > 7) || (k < 0)) {
            listing[l] = "\tlda #$00";
            s[x - 1][3] = "";
            listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
            listing[l + 2] = "\tlda #$00";
            s[x - 1][2] = "";
            listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
            listing[l + 4] = "\tlda #$00";
            s[x - 1][1] = "";
            listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
            l += 6;
            listing[l] = "\tlda " + GetARG(1,x - 1,true);
            s[x - 1][1] = "";
            listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 2] = "\tlda " + GetARG(0,x - 1,true);
            s[x - 1][0] = "";
            l += 3;
            listing[l] = "\tldy " + GetARG(0,x,true);
            s[x][0] = "";
            listing[l + 1] = "\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
            listing[l + 2] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
            listing[l + 3] = "\tasl @";
            listing[l + 4] = "\trol " + GetARG(1,x - 1,true);
            listing[l + 5] = "\trol " + GetARG(2,x - 1,true);
            listing[l + 6] = "\trol " + GetARG(3,x - 1,true);
            listing[l + 7] = "\tdey";
            listing[l + 8] = "\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
            listing[l + 9] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
            listing[l + 10] = "\tsta " + GetARG(0,x - 1,true);
            l += 11;
            listing[l] = "\tlda " + GetARG(1,x - 1,true);
            listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
            s[x - 1][2] = "";
            listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
            listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
            s[x - 1][3] = "";
            listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
            l += 6;
            pas.Common.ShrShlCnt += 1;
          } else {
            listing[l] = "\tlda " + GetARG(0,x - 1,true);
            listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
            listing[l + 2] = "\tlda #$00";
            l += 3;
            for (var $l1 = 0, $end1 = k - 1; $l1 <= $end1; $l1++) {
              m = $l1;
              listing[l] = "\tasl " + GetARG(0,x - 1,true);
              listing[l + 1] = "\trol @";
              l += 2;
            };
            listing[l] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 1] = "\tlda " + GetARG(0,x - 1,true);
            listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
            l += 3;
          };
        };
      };
      function opt_SHL_WORD() {
        var Result = false;
        var k = 0;
        var m = 0;
        Result = false;
        t = "";
        k = pas.Common.GetVAL(GetARG(0,x,false));
        s[x - 1][2] = "";
        s[x - 1][3] = "";
        if (k < 0) {
          listing[l] = "\tlda #$00";
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda #$00";
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          l += 4;
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          l += 3;
          listing[l] = "\tldy " + GetARG(0,x,true);
          s[x][0] = "";
          listing[l + 1] = "\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 2] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 3] = "\tasl @";
          listing[l + 4] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 5] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 6] = "\trol " + GetARG(3,x - 1,true);
          listing[l + 7] = "\tdey";
          listing[l + 8] = "\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 9] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 10] = "\tsta " + GetARG(0,x - 1,true);
          l += 11;
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k === 16) {
          s[x - 1][2] = "";
          s[x - 1][3] = "";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(3,x - 1,true);
          s[x - 1][0] = "";
          s[x - 1][1] = "";
          listing[l + 4] = "\tlda #$00";
          listing[l + 5] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tsta " + GetARG(1,x - 1,true);
          l += 8;
        } else if (k === 10) {
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tasl @";
          listing[l + 8] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 9] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 10] = "\tasl @";
          listing[l + 11] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 12] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          s[x - 1][0] = "\tmva #$00";
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
        } else if (k === 11) {
          s[x - 1][2] = "\tmva #$00";
          s[x - 1][3] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tasl @";
          listing[l + 8] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 9] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 10] = "\tasl @";
          listing[l + 11] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 12] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 13] = "\tasl @";
          listing[l + 14] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 15] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 16] = "\tsta " + GetARG(0,x - 1,true);
          l += 17;
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          s[x - 1][0] = "\tmva #$00";
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
        } else if (k === 31) {
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tlsr @";
          s[x - 1][3] = "";
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\tror @";
          listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
          l += 5;
          s[x - 1][0] = "\tmva #$00";
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          l += 6;
        } else if (k === 8) {
          listing[l] = "\tlda #$00";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
        } else {
          if (k > 7) return true;
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda #$00";
          l += 5;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            listing[l] = "\tasl " + GetARG(0,x - 1,true);
            listing[l + 1] = "\trol " + GetARG(1,x - 1,true);
            listing[l + 2] = "\trol @";
            l += 3;
          };
          listing[l] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tsta " + GetARG(1,x - 1,true);
          l += 5;
        };
        return Result;
      };
      function opt_SHL_CARD() {
        var k = 0;
        var m = 0;
        t = "";
        k = pas.Common.GetVAL(GetARG(0,x,false));
        if (k < 0) {
          listing[l] = "\tlda " + GetARG(3,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 7] = "\tldy " + GetARG(0,x,true);
          s[x][0] = "";
          listing[l + 8] = "\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 9] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 10] = "\tasl @";
          listing[l + 11] = "\trol " + GetARG(1,x - 1,true);
          listing[l + 12] = "\trol " + GetARG(2,x - 1,true);
          listing[l + 13] = "\trol " + GetARG(3,x - 1,true);
          listing[l + 14] = "\tdey";
          listing[l + 15] = "\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b";
          listing[l + 16] = "l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e";
          listing[l + 17] = "\tsta " + GetARG(0,x - 1,true);
          l += 18;
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k === 13) {
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          s[x - 1][3] = "";
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          s[x - 1][1] = "";
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          s[x - 1][0] = "";
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tlsr " + GetARG(3,x - 1,true);
          listing[l + 8] = "\tror " + GetARG(2,x - 1,true);
          listing[l + 9] = "\tror " + GetARG(1,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr " + GetARG(3,x - 1,true);
          listing[l + 12] = "\tror " + GetARG(2,x - 1,true);
          listing[l + 13] = "\tror " + GetARG(1,x - 1,true);
          listing[l + 14] = "\tror @";
          listing[l + 15] = "\tlsr " + GetARG(3,x - 1,true);
          listing[l + 16] = "\tror " + GetARG(2,x - 1,true);
          listing[l + 17] = "\tror " + GetARG(1,x - 1,true);
          listing[l + 18] = "\tror @";
          listing[l + 19] = "\tsta " + GetARG(0,x - 1,true);
          l += 20;
          listing[l] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 6] = "\tlda #$00";
          listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
          l += 8;
        } else if (k === 23) {
          listing[l] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 1] = "\tlsr @";
          s[x - 1][3] = "";
          listing[l + 2] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 3] = "\tror @";
          listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
          s[x - 1][2] = "";
          listing[l + 5] = "\tlda #$00";
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tsta " + GetARG(2,x - 1,true);
          l += 8;
          s[x - 1][0] = "\tmva #$00";
          s[x - 1][1] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          l += 4;
        } else if (k === 31) {
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tlsr @";
          s[x - 1][3] = "";
          listing[l + 2] = "\tlda #$00";
          listing[l + 3] = "\tror @";
          listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
          l += 5;
          s[x - 1][0] = "\tmva #$00";
          s[x - 1][1] = "\tmva #$00";
          s[x - 1][2] = "\tmva #$00";
          listing[l] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
          listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
          listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
          l += 6;
        } else {
          m = rtl.trunc(k / 8);
          k = k % 8;
          if (m > 3) {
            k = 0;
            listing[l] = "\tlda #$00";
            listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
            listing[l + 2] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
            listing[l + 4] = "\tsta " + GetARG(3,x - 1,true);
            l += 5;
          } else {
            var $tmp = m;
            if ($tmp === 1) {
              listing[l] = "\tlda " + GetARG(1,x - 1,true);
              listing[l + 1] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(2,x - 1,true);
              listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 4] = "\tlda " + GetARG(3,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(3,x - 1,true);
              l += 6;
              listing[l] = "\tlda " + GetARG(2,x - 1,true);
              s[x - 1][3] = "";
              listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
              s[x - 1][2] = "";
              listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
              s[x - 1][1] = "";
              listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 6] = "\tlda #$00";
              s[x - 1][0] = "";
              listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
              l += 8;
            } else if ($tmp === 2) {
              listing[l] = "\tlda " + GetARG(2,x - 1,true);
              listing[l + 1] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(3,x - 1,true);
              listing[l + 3] = "\tsta " + GetARG(3,x - 1,true);
              l += 4;
              listing[l] = "\tlda " + GetARG(1,x - 1,true);
              s[x - 1][3] = "";
              listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(0,x - 1,true);
              s[x - 1][2] = "";
              listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 4] = "\tlda #$00";
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              listing[l + 5] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 6] = "\tsta " + GetARG(1,x - 1,true);
              l += 7;
            } else if ($tmp === 3) {
              listing[l] = "\tlda " + GetARG(3,x - 1,true);
              listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
              l += 2;
              listing[l] = "\tlda " + GetARG(0,x - 1,true);
              s[x - 1][3] = "";
              listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
              listing[l + 2] = "\tlda #$00";
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              s[x - 1][2] = "";
              listing[l + 3] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 4] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              l += 6;
            };
          };
          if (k > 0) {
            if (m === 0) {
              listing[l] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 6] = "\tlda " + GetARG(3,x - 1,true);
              listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
              l += 8;
            };
            for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
              m = $l;
              listing[l] = "\tasl " + GetARG(0,x - 1,true);
              listing[l + 1] = "\trol " + GetARG(1,x - 1,true);
              listing[l + 2] = "\trol " + GetARG(2,x - 1,true);
              listing[l + 3] = "\trol " + GetARG(3,x - 1,true);
              l += 4;
            };
            listing[l] = "\tlda " + GetARG(0,x - 1,true);
            listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
            listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
            listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
            listing[l + 4] = "\tlda " + GetARG(2,x - 1,true);
            listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
            listing[l + 6] = "\tlda " + GetARG(3,x - 1,true);
            listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
            l += 8;
          };
        };
      };
      function opt_BYTE_DIV(k) {
        var $tmp = k;
        if ($tmp === 2) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tsta " + GetARG(0,x - 1,true);
          l += 4;
        } else if ($tmp === 3) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc #$15";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 12] = "\tror @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 4) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          l += 5;
        } else if ($tmp === 5) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc #$0d";
          listing[l + 4] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tror @";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 11] = "\tror @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 6) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 13] = "\tror @";
          listing[l + 14] = "\tlsr @ ";
          listing[l + 15] = "\tsta " + GetARG(0,x - 1,true);
          l += 16;
        } else if ($tmp === 7) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
        } else if ($tmp === 8) {
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          l += 5;
        } else if ($tmp === 9) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 10) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tsta  " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 12] = "\tror @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tsta " + GetARG(0,x - 1,true);
          l += 16;
        } else if ($tmp === 11) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tror @";
          listing[l + 6] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tadc  " + GetARG(0,x - 1,true);
          listing[l + 12] = "\tror @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tsta " + GetARG(0,x - 1,true);
          l += 17;
        } else if ($tmp === 12) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 13] = "\tror @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tsta " + GetARG(0,x - 1,true);
          l += 16;
        } else if ($tmp === 13) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tror @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tadd " + GetARG(0,x - 1,true);
          listing[l + 12] = "\tror @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tsta " + GetARG(0,x - 1,true);
          l += 17;
        } else if ($tmp === 14) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 15) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc #$04";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tsta " + GetARG(0,x - 1,true);
          l += 13;
        } else if ($tmp === 16) {
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tsta " + GetARG(0,x - 1,true);
          l += 6;
        } else if ($tmp === 17) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tror @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tadc #$00";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 18) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tsta " + GetARG(0,x - 1,true);
          l += 16;
        } else if ($tmp === 19) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tror @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 20) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 11] = "\tror @";
          listing[l + 12] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 13] = "\tror @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tsta " + GetARG(0,x - 1,true);
          l += 17;
        } else if ($tmp === 21) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tror @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 12] = "\tror @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tlsr @";
          listing[l + 17] = "\tsta " + GetARG(0,x - 1,true);
          l += 18;
        } else if ($tmp === 22) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tcmp #$21";
          listing[l + 4] = "\tadc #$00";
          listing[l + 5] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 10] = "\tror @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 13] = "\tror @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tlsr @";
          listing[l + 17] = "\tsta " + GetARG(0,x - 1,true);
          l += 18;
        } else if ($tmp === 23) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 11] = "\tror @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tsta " + GetARG(0,x - 1,true);
          l += 17;
        } else if ($tmp === 24) {
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 11] = "\tror @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
        } else if ($tmp === 25) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tror @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tsta " + GetARG(0,x - 1,true);
          l += 15;
        } else if ($tmp === 26) {
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tror @";
          listing[l + 6] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 13] = "\tror @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tlsr @";
          listing[l + 17] = "\tsta " + GetARG(0,x - 1,true);
          l += 18;
        } else if ($tmp === 27) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tror @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
        } else if ($tmp === 28) {
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tadc #$02";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tlsr @";
          listing[l + 8] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 9] = "\tror @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tsta " + GetARG(0,x - 1,true);
          l += 13;
        } else if ($tmp === 29) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 5] = "\tror @";
          listing[l + 6] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 7] = "\tror @";
          listing[l + 8] = "\tlsr @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 12] = "\tror @";
          listing[l + 13] = "\tlsr @";
          listing[l + 14] = "\tlsr @";
          listing[l + 15] = "\tlsr @";
          listing[l + 16] = "\tlsr @";
          listing[l + 17] = "\tsta " + GetARG(0,x - 1,true);
          l += 18;
        } else if ($tmp === 30) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tsec";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
        } else if ($tmp === 31) {
          listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tlsr @";
          listing[l + 7] = "\tadc " + GetARG(0,x - 1,true);
          listing[l + 8] = "\tror @";
          listing[l + 9] = "\tlsr @";
          listing[l + 10] = "\tlsr @";
          listing[l + 11] = "\tlsr @";
          listing[l + 12] = "\tlsr @";
          listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
          l += 14;
        } else if ($tmp === 32) {
          listing[l + 1] = "\tlsr @";
          listing[l + 2] = "\tlsr @";
          listing[l + 3] = "\tlsr @";
          listing[l + 4] = "\tlsr @";
          listing[l + 5] = "\tlsr @";
          listing[l + 6] = "\tsta " + GetARG(0,x - 1,true);
          l += 7;
        };
      };
      function opt_STA_0(i) {
        var Result = false;
        Result = true;
        if (listing[i] === "\tsta @PARAM?.@NIL") {
          listing[i] = "\tsta #$00";
          return false;
        };
        if ((i === 0) && STA_im_0(i)) {
          listing[i] = "";
          return false;
        };
        if (LAB_A(i) && STY_im_0(i + 1)) {
          listing[i + 1] = "";
          return false;
        };
        if ((INY(i) === false) && (DEY(i) === false) && STY_im_0(i + 1) && (LDA(i + 2) || STA(i + 2))) {
          listing[i + 1] = "";
          return false;
        };
        if (STY_STACK(i) && STY_im_0(i + 1)) {
          listing[i + 1] = "";
          return false;
        };
        if (TAY(i) && STY_im_0(i + 1) && MVA(i + 2)) {
          listing[i + 1] = "\tlda " + GetString$1(i + 2);
          listing[i + 2] = "\tsta " + GetStringLast(i + 2);
          return false;
        };
        if (LDA_A(i) && STA_im_0(i + 1)) {
          listing[i + 1] = "";
          return false;
        };
        if (STA_STACK(i) && STA_im_0(i + 1)) {
          listing[i + 1] = "";
          return false;
        };
        if (STA_im_0(i) && STA_A(i + 1)) {
          listing[i] = "";
          return false;
        };
        if (LDA_IM_0(i) && ADC_SBC_IM_0(i + 1) && STA_im_0(i + 2)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          if (LDA_IM_0(i + 3) && ADC_SBC_IM_0(i + 4) && STA_im_0(i + 5)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            if (LDA_IM_0(i + 6) && ADC_SBC_IM_0(i + 7) && STA_im_0(i + 8)) {
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
            };
          };
          return false;
        };
        if (STA_im_0(i) && LDA_IM_0(i + 1) && ADC_SBC_IM_0(i + 2)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (STA_im_0(i) && LDA_A(i + 1) && (LDA_IM_0(i + 1) === false) && ADC_SBC_IM_0(i + 2)) {
          listing[i] = "";
          return false;
        };
        if ((LDA_A(i) || TYA(i)) && ADD_SUB(i + 1) && STA_im_0(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4)) {
          listing[i + 2] = "";
          return false;
        };
        if ((LDA_A(i) || TYA(i)) && ADC_SBC(i + 1) && STA_im_0(i + 2) && (LDY(i + 3) === false) && (ADC_SBC(i + 4) === false)) {
          listing[i + 2] = "";
          if (LSR_STACK(i + 3) || ASL_STACK(i + 3)) {
            listing[i] = "";
            listing[i + 1] = "";
          } else if ((i > 0) && STA_im_0(i - 1)) {
            listing[i] = "";
            listing[i + 1] = "";
          };
          return false;
        };
        if (ADD_SUB(i) && STA_im_0(i + 1) && (LDY(i + 2) === false) && (ADC_SBC(i + 3) === false)) {
          listing[i + 1] = "";
          return false;
        };
        if ((ADD_SUB(i) === false) && (ADC_SBC(i) === false) && STA_im_0(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2) || AND_ORA_EOR(i + 2))) {
          listing[i + 1] = "";
          if (LDA_A(i) && (IY(i) === false)) listing[i] = "";
          return false;
        };
        if ((AND_ORA_EOR(i) || LDA_ADR(i)) && STA_im_0(i + 1)) {
          listing[i + 1] = "";
          return false;
        };
        if ((LSR_A(i) || ASL_A(i) || ROL_A(i) || ROR_A(i)) && STA_im_0(i + 1)) {
          listing[i + 1] = "";
          if (LDA_A(i + 2) || (LDY(i + 2) && LDA_A(i + 3)) || (MWY(i + 2) && LDA_A(i + 3))) listing[i] = "";
          return false;
        };
        if ((i > 0) && (ADD_SUB(i - 1) === false) && (ADC_SBC(i - 1) === false) && STA_im_0(i) && (ASL(i + 1) || LSR(i + 1))) {
          listing[i] = "";
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && LDY(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2) || TYA(i + 2))) {
          listing[i] = "";
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) listing[i - 1] = "";
          return false;
        };
        if (MWY_BP2(i) && LDY(i + 1) && LDA_BP2_Y(i + 2) && STA_im_0(i + 3) && (MVY(i + 4) || LDY(i + 4) || MWY(i + 4))) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((LDY(i) || INY(i)) && LDA_BP2_Y(i + 1) && STA_im_0(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4)) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && LDY(i + 1) && STY_BP_1(i + 2) && LDY(i + 3) && LDA(i + 4)) {
          listing[i] = "";
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) listing[i - 1] = "";
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && MWY(i + 1) && LDY(i + 2) && (LDA_A(i + 3) || MVA(i + 3) || MWA(i + 3))) {
          listing[i] = "";
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) listing[i - 1] = "";
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && LDY(i + 1) && (INY(i + 2) || DEY(i + 2)) && (LDA_A(i + 3) || MVA(i + 3) || MWA(i + 3))) {
          listing[i] = "";
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) listing[i - 1] = "";
          return false;
        };
        if (STA_im_0(i) && LDY(i + 1) && LOCAL(i + 2) && LDA(i + 3)) {
          listing[i] = "";
          return false;
        };
        if (STA_im_0(i) && LOCAL(i + 1) && LDA(i + 2)) {
          listing[i] = "";
          return false;
        };
        if (STA_im_0(i) && CMP_IM_0(i + 1) && BNE(i + 2)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (STA_im_0(i) && (BEQ(i + 1) || BNE(i + 1)) && JMP(i + 2)) {
          listing[i] = "";
          return false;
        };
        if (TYA(i) && STA_im_0(i + 1) && SKIP(i + 2)) {
          listing[i + 1] = "";
          return false;
        };
        if (SCC(i) && (listing[i + 1] === "\tinc #$00")) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (SCS(i) && (listing[i + 1] === "\tdec #$00")) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (STA_STACK(i) && ASL_STACK(i + 1) && STA_im_0(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i + 1] = listing[i];
          listing[i] = "\tasl @";
          listing[i + 2] = "";
          return false;
        };
        if (STA_STACK(i) && ASL_STACK(i + 1) && ASL_STACK(i + 2) && STA_im_0(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
          listing[i + 2] = listing[i];
          listing[i] = "\tasl @";
          listing[i + 1] = "\tasl @";
          listing[i + 3] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && STA_A(i + 1)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA(i) && BPL_A(i + 1) && LDA(i + 2) && SUB(i + 3) && STA_im_0(i + 4) && LAB_A(i + 5)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        return Result;
      };
      function opt_STACK(i) {
        var Result = false;
        var p = 0;
        var tmp = "";
        var yes = false;
        Result = true;
        if ((listing[i] === "\tpla") && (listing[i + 1] === "\tsta portb")) {
          if (DEX(i + 10) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) {
            listing[i] = listing[i + 2];
            listing[i + 1] = listing[i + 3];
            listing[i + 2] = listing[i + 4];
            listing[i + 3] = listing[i + 5];
            listing[i + 4] = listing[i + 6];
            listing[i + 5] = listing[i + 7];
            listing[i + 6] = listing[i + 8];
            listing[i + 7] = listing[i + 9];
            listing[i + 8] = "\tdex";
            listing[i + 9] = "\tpla";
            listing[i + 10] = "\tsta portb";
            return false;
          };
          if (DEX(i + 6) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) {
            listing[i] = listing[i + 2];
            listing[i + 1] = listing[i + 3];
            listing[i + 2] = listing[i + 4];
            listing[i + 3] = listing[i + 5];
            listing[i + 4] = "\tdex";
            listing[i + 5] = "\tpla";
            listing[i + 6] = "\tsta portb";
            return false;
          };
          if (DEX(i + 4) && LDA_STACK(i + 2) && STA_VAL(i + 3)) {
            listing[i] = listing[i + 2];
            listing[i + 1] = listing[i + 3];
            listing[i + 2] = "\tdex";
            listing[i + 3] = "\tpla";
            listing[i + 4] = "\tsta portb";
            return false;
          };
        };
        if (INX(i) && LDA(i + 1) && (IX(i + 1) === false) && (listing[i + 2] === "\tsta @PARAM?") && DEX(i + 3)) {
          listing[i] = "";
          listing[i + 3] = "";
          return false;
        };
        if (listing[i] === "\tsta @PARAM?.@NIL") {
          listing[i] = "\tsta #$00";
          return false;
        };
        if ((l === (i + 2)) && DEX(i + 1) && MVA(i) && (MVA_STACK(i) === false) && (pas.System.Pos(":STACKORIGIN",listing[i]) > 0)) {
          listing[i] = "";
          return false;
        };
        if ((l === (i + 4)) && (LDA_A(i) || STA_STACK(i)) && LDA_STACK(i + 1) && STA_VAL(i + 2) && DEX(i + 3)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          return false;
        };
        if ((l === (i + 4)) && (AND_ORA_EOR_VAL(i) || ADD_SUB_VAL(i) || ADC_SBC_VAL(i)) && LDA_STACK(i + 1) && STA_VAL(i + 2) && DEX(i + 3)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          return false;
        };
        if ((listing[i] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 1] === "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x")) {
          listing[i] = "\tsta :STACKORIGIN,x";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && LDA_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 4] === "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x")) {
          listing[i] = listing[i + 2];
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_STACK(i) && STA_STACK(i + 1)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_STACK(i) && (listing[i + 1] === "\tsta #$00")) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_STACK(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && (listing[i + 3] === listing[i]) && STA_VAL(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((LAB_A(i) === false) && STY_STACK(i + 1) && LDA_STACK(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i + 1] = "\ttya";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i) && (listing[i + 1] === "\tlda :STACKORIGIN+STACKWIDTH,x")) if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i]) > 0) {
          listing[i + 1] = "\tlda " + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if (MVA(i) && (listing[i + 1] === "\tlda :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) {
          listing[i + 1] = "\tlda " + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if (STA_STACK(i) && LDA_STACK(i + 1) && STA_VAL(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_A(i) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 4] === "\tlda :STACKORIGIN,x") && STA_A(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 7)) {
          listing[i + 4] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i + 6] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((listing[i] === "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x") && (listing[i + 1] === "\tldy :STACKORIGIN-1,x") && (listing[i + 2] === "\tlda :STACKORIGIN,x") && STA_ADR(i + 3)) {
          listing[i + 2] = "\tlda :STACKORIGIN+STACKWIDTH,x";
          listing[i] = "";
          return false;
        };
        if (LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_STACK(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          if (IY(i) === false) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
          } else listing[i + 1] = "\ttay";
          listing[i + 2] = "";
          return false;
        };
        if (LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && (listing[i + 2] === "\tmva #$00 :STACKORIGIN+STACKWIDTH,x") && (listing[i + 3] === "\tldy :STACKORIGIN,x")) {
          if (IY(i) === false) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
          } else listing[i + 1] = "\ttay";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (STA_STACK(i) && LDY_STACK(i + 1) && LDA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LDA_VAL(i) && DEX(i + 1)) {
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if ((listing[i] === "\tlda :STACKORIGIN-1,x") && DEX(i + 1)) {
          listing[i] = "\tdex";
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          return false;
        };
        if ((listing[i] === "\tlda :STACKORIGIN,x") && DEX(i + 1)) {
          listing[i] = "\tdex";
          listing[i + 1] = "\tlda :STACKORIGIN+1,x";
          return false;
        };
        if (TYA(i) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && DEX(i + 2)) {
          listing[i + 2] = "\tsta :STACKORIGIN+1,x";
          listing[i + 1] = "\ttya";
          listing[i] = "\tdex";
          return false;
        };
        if ((INX(i) === false) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN,x") && DEX(i + 4)) {
          listing[i + 4] = "\tsta :STACKORIGIN+1,x";
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tdex";
          return false;
        };
        if ((INX(i) === false) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN+1,x") && DEX(i + 4)) {
          listing[i + 4] = "\tsta :STACKORIGIN+2,x";
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tdex";
          return false;
        };
        if (LDA_A(i) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 4] === "\tlda :STACKORIGIN,x") && (listing[i + 5] === "\tldy :STACKORIGIN+STACKWIDTH,x")) {
          listing[i + 4] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i + 1) && (listing[i + 2] === "\tldy :STACKORIGIN-1,x") && (listing[i + 3] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 4)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 3] = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i + 1) && MWY_BP2(i + 2) && (listing[i + 3] === "\tldy :STACKORIGIN-1,x") && (listing[i + 4] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 4] = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && (listing[i + 2] === "\tldy :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0)) {
          listing[i + 2] = "\tldy " + GetString$1(i);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && (IY(i + 2) === false) && (listing[i + 3] === "\tlda :STACKORIGIN,x") && (listing[i + 4] === "\tldy :STACKORIGIN+STACKWIDTH,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 3] = "\tlda " + GetString$1(i + 1);
          listing[i + 4] = "\tldy " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && MWY_BP2(i + 3) && LDY(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && INY(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 5] = "\tlda " + GetString$1(i + 1);
          listing[i + 8] = "\tlda " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDY(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 4] = "\tlda " + GetString$1(i + 1);
          listing[i + 6] = "\tlda " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MWY_BP2(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && INY(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6) && DEX(i + 7)) {
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (MVA(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 4] = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && (listing[i + 3] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 3] = "\tlda " + GetString$1(i + 1);
          listing[i + 5] = "\tlda " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_A(i + 3) && AND_ORA_EOR_STACK(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && AND_ORA_EOR_STACK(i + 7) && STA_A(i + 8) && DEX(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0)) {
          listing[i + 4] = pas.System.Copy(listing[i + 4],1,5) + GetString$1(i + 1);
          listing[i + 7] = pas.System.Copy(listing[i + 7],1,5) + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_VAL(i + 3) && STA_A(i + 4) && LDA_VAL(i + 5) && STA_A(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 8) && (listing[i + 9] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 7] = "\tlda " + GetString$1(i + 1);
          listing[i + 9] = "\tlda " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && INX(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN-1,x") && STA_VAL(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA_VAL(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 8] = "\tlda " + GetString$1(i + 1);
          listing[i + 10] = "\tlda " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN-1,x") && STA_VAL(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA_VAL(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && STA_VAL(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && STA_VAL(i + 11)) if ((pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,x",listing[i + 3]) > 0)) {
          listing[i + 6] = "\tlda " + GetString$1(i + 1);
          listing[i + 8] = "\tlda " + GetString$1(i + 2);
          listing[i + 10] = "\tlda " + GetString$1(i + 3);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
          listing[i + 8] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i + 10] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && STA_STACK(i + 7)) {
          if ((listing[i + 8] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11) && (listing[i + 12] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 13) && (listing[i + 14] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 15)) {
            listing[i + 8] = "\tlda " + GetString$1(i);
            listing[i + 10] = "\tlda " + GetString$1(i + 2);
            listing[i + 12] = "\tlda " + GetString$1(i + 4);
            listing[i + 14] = "\tlda " + GetString$1(i + 6);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (LDA_A(i + 8) && AND_ORA_EOR_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && AND_ORA_EOR_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && AND_ORA_EOR_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && AND_ORA_EOR_STACK(i + 18) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 9] = pas.System.Copy(listing[i + 9],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i + 12] = pas.System.Copy(listing[i + 12],1,5) + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 15] = pas.System.Copy(listing[i + 15],1,5) + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 18] = pas.System.Copy(listing[i + 18],1,5) + pas.System.Copy(listing[i + 6],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
        };
        if (MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0)) {
          if ((listing[i + 5] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && DEX(i + 7)) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tlda " + GetString$1(i + 1);
            listing[i + 1] = "";
            return false;
          };
          if ((listing[i + 5] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8) && DEX(i + 9)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tlda " + GetString$1(i + 1);
            listing[i + 7] = "\tlda " + GetString$1(i + 2);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if ((listing[i + 5] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8) && (listing[i + 9] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 12)) {
            listing[i + 5] = "\tlda " + GetString$1(i + 1);
            listing[i + 7] = "\tlda " + GetString$1(i + 2);
            listing[i + 9] = "\tlda " + GetString$1(i + 3);
            listing[i + 11] = "\tlda " + GetString$1(i + 4);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (INX(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR(i + 7) && STA_A(i + 8) && (listing[i + 9] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && AND_ORA_EOR(i + 10) && STA_A(i + 11) && (listing[i + 12] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && AND_ORA_EOR(i + 13) && STA_A(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && AND_ORA_EOR(i + 16) && STA_A(i + 17)) {
            listing[i + 6] = "\tlda " + GetString$1(i + 1);
            listing[i + 9] = "\tlda " + GetString$1(i + 2);
            listing[i + 12] = "\tlda " + GetString$1(i + 3);
            listing[i + 15] = "\tlda " + GetString$1(i + 4);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((listing[i + 5] === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_STACK(i + 6) && STA_A(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && AND_ORA_EOR_STACK(i + 9) && STA_A(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && AND_ORA_EOR_STACK(i + 12) && STA_A(i + 13) && (listing[i + 14] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && AND_ORA_EOR_STACK(i + 15) && STA_A(i + 16)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 9]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 12]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 15]) > 0)) {
            listing[i + 6] = pas.System.Copy(listing[i + 6],1,5) + GetString$1(i + 1);
            listing[i + 9] = pas.System.Copy(listing[i + 9],1,5) + GetString$1(i + 2);
            listing[i + 12] = pas.System.Copy(listing[i + 12],1,5) + GetString$1(i + 3);
            listing[i + 15] = pas.System.Copy(listing[i + 15],1,5) + GetString$1(i + 4);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (INX(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9) && LDA_VAL(i + 10) && STA_VAL(i + 11) && LDA_VAL(i + 12) && STA_VAL(i + 13) && (listing[i + 14] === "\tlda :STACKORIGIN-1,x") && STA_VAL(i + 15) && (listing[i + 16] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA_VAL(i + 17) && (listing[i + 18] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && STA_VAL(i + 19) && (listing[i + 20] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && STA_VAL(i + 21)) {
            listing[i + 14] = "\tlda " + GetString$1(i + 1);
            listing[i + 16] = "\tlda " + GetString$1(i + 2);
            listing[i + 18] = "\tlda " + GetString$1(i + 3);
            listing[i + 20] = "\tlda " + GetString$1(i + 4);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (MWY_BP2(i + 5) && LDY(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 8) && INY(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11) && INY(i + 12) && (listing[i + 13] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 14) && INY(i + 15) && (listing[i + 16] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 17)) {
            listing[i + 7] = "\tlda " + GetString$1(i + 1);
            listing[i + 10] = "\tlda " + GetString$1(i + 2);
            listing[i + 13] = "\tlda " + GetString$1(i + 3);
            listing[i + 16] = "\tlda " + GetString$1(i + 4);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((listing[i + 5] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8) && (listing[i + 9] !== "\tlda :STACKORIGIN+STACKWIDTH*2,x")) {
            listing[i + 5] = "\tlda " + GetString$1(i + 1);
            listing[i + 7] = "\tlda " + GetString$1(i + 2);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((listing[i + 5] === "\tldy :STACKORIGIN-1,x") && (listing[i + 6] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 11) && (listing[i + 12] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 13)) {
            listing[i + 6] = "\tlda " + GetString$1(i + 1);
            listing[i + 8] = "\tlda " + GetString$1(i + 2);
            listing[i + 10] = "\tlda " + GetString$1(i + 3);
            listing[i + 12] = "\tlda " + GetString$1(i + 4);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
        };
        if (DEX(i + 24) && INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && (listing[i + 12] === "\tldy :STACKORIGIN-1,x") && (listing[i + 13] === "\tlda :STACKORIGIN,x") && STA_BP2_Y(i + 14) && INY(i + 15) && (listing[i + 16] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_BP2_Y(i + 17) && INY(i + 18) && (listing[i + 19] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_BP2_Y(i + 20) && INY(i + 21) && (listing[i + 22] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_BP2_Y(i + 23)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0)) {
          if (LDA_VAL(i + 5) && LDY_VAL(i + 6) && ADD_IM(i + 7) && STA_BP2(i + 8) && SCC(i + 9) && INY(i + 10) && (listing[i + 11] === "\tsty :bp2+1")) {
            listing[i + 12] = "\tldy :STACKORIGIN,x";
            listing[i + 13] = "\tlda " + GetString$1(i + 1);
            listing[i + 16] = "\tlda " + GetString$1(i + 2);
            listing[i + 19] = "\tlda " + GetString$1(i + 3);
            listing[i + 22] = "\tlda " + GetString$1(i + 4);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 24] = "";
            return false;
          };
          if (MWY_BP2(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN-1,x") && ADD_IM(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN-1,x") && (listing[i + 9] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && ADC_IM(i + 10) && (listing[i + 11] === "\tsta :STACKORIGIN-1+STACKWIDTH,x")) {
            listing[i + 6] = "\tlda :STACKORIGIN,x";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "\ttay";
            listing[i + 13] = "\tlda " + GetString$1(i + 1);
            listing[i + 16] = "\tlda " + GetString$1(i + 2);
            listing[i + 19] = "\tlda " + GetString$1(i + 3);
            listing[i + 22] = "\tlda " + GetString$1(i + 4);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 24] = "";
            return false;
          };
        };
        if (INX(i) && MVA(i + 1) && LDA_VAL(i + 2) && (ADD_SUB_STACK(i + 3) || AND_ORA_EOR_STACK(i + 3)) && STA_VAL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0)) {
          listing[i + 3] = pas.System.Copy(listing[i + 3],1,5) + GetString$1(i + 1);
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i] === "\tjsr movZTMP_aBX") && DEX(i + 1) && (pas.System.Pos("mva :STACKORIGIN,x",listing[i + 2]) > 0) && DEX(i + 3)) {
          listing[i] = "";
          listing[i + 2] = "\tmva :ztmp8 " + pas.System.Copy(listing[i + 2],21,256);
          return false;
        };
        if (LDA_VAL(i) && (LDA_IM(i) === false) && STA_BP2(i + 1) && (listing[i + 2] === (listing[i] + "+1")) && STA_BP2_1(i + 3) && LDY(i + 4)) if (pas.System.Pos(listing[i],listing[i + 2]) > 0) {
          listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (MWY_BP2(i) && LDY_VAL(i + 1) && (listing[i + 2] === "\tmva (:bp2),y :STACKORIGIN,x") && DEX(i + 3)) {
          listing[i + 3] = "\tmva (:bp2),y :STACKORIGIN+1,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (MWY_BP2(i) && LDY_VAL(i + 1) && (listing[i + 2] === "\tmva (:bp2),y :STACKORIGIN+1,x") && DEX(i + 3)) {
          listing[i + 3] = "\tmva (:bp2),y :STACKORIGIN+2,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 12) && (listing[i] === "\tlda :STACKORIGIN-1,x") && (AND_ORA_EOR_VAL(i + 1) || ADD_SUB_VAL(i + 1)) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && (listing[i + 3] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (AND_ORA_EOR_VAL(i + 4) || ADC_SBC_VAL(i + 4)) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 6] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && (AND_ORA_EOR_VAL(i + 7) || ADC_SBC_VAL(i + 7)) && (listing[i + 8] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && (listing[i + 9] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && (AND_ORA_EOR_VAL(i + 10) || ADC_SBC_VAL(i + 10)) && (listing[i + 11] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x")) {
          listing[i + 12] = "\tsta :STACKORIGIN+STACKWIDTH*3,x";
          listing[i + 11] = listing[i + 10];
          listing[i + 10] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
          listing[i + 9] = "\tsta :STACKORIGIN+STACKWIDTH*2,x";
          listing[i + 8] = listing[i + 7];
          listing[i + 7] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
          listing[i + 6] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = "\tlda :STACKORIGIN+STACKWIDTH,x";
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 6) && (listing[i] === "\tlda :STACKORIGIN-1,x") && (AND_ORA_EOR_VAL(i + 1) || ADD_SUB_VAL(i + 1)) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && (listing[i + 3] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (AND_ORA_EOR_VAL(i + 4) || ADC_SBC_VAL(i + 4)) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH,x")) {
          listing[i + 6] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = "\tlda :STACKORIGIN+STACKWIDTH,x";
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 6) && LDA_VAL(i) && (AND_ORA_EOR_VAL(i + 1) || ADD_SUB_VAL(i + 1)) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 3) && (AND_ORA_EOR_VAL(i + 4) || ADC_SBC_VAL(i + 4)) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH,x")) {
          listing[i + 6] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 10) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 2] = listing[i + 7];
          listing[i + 5] = listing[i + 9];
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (DEX(i + 12) && LDY_IM_0(i) && LDA_STACK(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && LDY(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        if (DEX(i + 11) && LDY_IM_0(i) && LDA_STACK(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && LDA_STACK(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && STA_VAL(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        if ((listing[i] === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_IM(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && DEX(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN+1,x")) {
          listing[i + 2] = listing[i + 1];
          listing[i] = "\tdex";
          listing[i + 1] = "\tlda :STACKORIGIN+1,x";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if ((listing[i] === "\tsta :STACKORIGIN,x") && (listing[i + 1] === "\tlda :STACKORIGIN,x") && AND_ORA_EOR(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN,x")) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDY(i) && MVA(i + 1) && INX(i + 2) && LDY(i + 3) && (listing[i] === listing[i + 3])) {
          listing[i + 3] = "";
          return false;
        };
        if (listing[i] === "\tjsr @hiWORD") {
          listing[i] = "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x";
          Result = false;
        };
        if (DEX(i + 14) && DEX(i + 11) && LDA_A(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 5) && (listing[i + 6] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && LDA_VAL(i + 9) && STA_VAL(i + 10) && (listing[i + 12] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 13)) {
          listing[i + 12] = listing[i + 1];
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (LDY(i) && (listing[i + 1] === "\tmva (:bp2),y :STACKORIGIN,x") && INY(i + 2) && (listing[i + 3] === "\tmva (:bp2),y :STACKORIGIN+STACKWIDTH,x") && LDA(i + 4) && (listing[i + 5] === "\tadd :STACKORIGIN,x") && STA(i + 6) && LDA(i + 7) && (listing[i + 8] === "\tadc :STACKORIGIN+STACKWIDTH,x") && STA(i + 9)) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = listing[i + 4];
          listing[i + 4] = "\tadd (:bp2),y";
          listing[i + 5] = listing[i + 6];
          listing[i + 6] = "\tiny";
          listing[i + 8] = "\tadc (:bp2),y";
          return false;
        };
        if ((listing[i] === "\tsta :STACKORIGIN,x") && (listing[i + 1] === "\tasl :STACKORIGIN,x") && (listing[i + 2] === "\tldy :STACKORIGIN,x")) {
          listing[i] = "\tasl @";
          listing[i + 1] = "\ttay";
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN+STACKWIDTH,x") && (listing[i + 5] === "\tasl :STACKORIGIN,x") && ROL_A(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (DEX(i + 3) && TYA(i) && AND_ORA_EOR_STACK(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x")) if (pas.System.Pos(":STACKORIGIN-1,x",listing[i + 1]) > 0) {
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 2] = pas.System.Copy(listing[i + 1],1,5) + ":STACKORIGIN,x";
          listing[i] = "\tdex";
          listing[i + 1] = "\ttya";
          return false;
        };
        if (DEX(i + 3) && TYA(i) && AND_ORA_EOR_STACK(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 3] = "\tsta :STACKORIGIN+1,x";
          listing[i + 2] = pas.System.Copy(listing[i + 1],1,5) + ":STACKORIGIN+1,x";
          listing[i] = "\tdex";
          listing[i + 1] = "\ttya";
          return false;
        };
        if (MVA(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_STACK(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0)) {
          listing[i + 2] = pas.System.Copy(listing[i + 2],1,5) + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if (DEX(i + 3) && (listing[i] === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x")) {
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 3) && (listing[i] === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x")) {
          listing[i + 3] = "\tsta :STACKORIGIN+1,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tlda :STACKORIGIN+1,x";
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 3) && LDA_VAL(i) && AND_ORA_EOR_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x")) {
          listing[i + 3] = "\tsta :STACKORIGIN+1,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 3) && LDA_VAL(i) && AND_ORA_EOR_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN+1,x")) {
          listing[i + 3] = "\tsta :STACKORIGIN+2,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (DEX(i + 3) && (listing[i] === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_STACK(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 2] = pas.System.Copy(listing[i + 1],1,5) + ":STACKORIGIN+1,x";
          listing[i] = "\tdex";
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          return false;
        };
        if (DEX(i + 3) && (listing[i] === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_STACK(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN+1,x",listing[i + 1]) > 0) {
          listing[i + 3] = "\tsta :STACKORIGIN+1,x";
          listing[i + 2] = pas.System.Copy(listing[i + 1],1,5) + ":STACKORIGIN+2,x";
          listing[i] = "\tdex";
          listing[i + 1] = "\tlda :STACKORIGIN+1,x";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && INX(i + 2) && (listing[i + 3] === "\tmva #$10 :STACKORIGIN,x") && (listing[i + 4] === "\tjsr shlEAX_CL.WORD")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0)) {
          listing[i + 2] = "\tmva " + GetString$1(i) + " :STACKORIGIN+STACKWIDTH*2,x";
          listing[i + 3] = "\tmva " + GetString$1(i + 1) + " :STACKORIGIN+STACKWIDTH*3,x";
          listing[i + 4] = "\tinx";
          listing[i] = "\tmva #$00 :STACKORIGIN,x";
          listing[i + 1] = "\tmva #$00 :STACKORIGIN+STACKWIDTH,x";
          return false;
        };
        if (MVA(i) && (listing[i + 1] === "\tlda :STACKORIGIN,x") && ADD_SUB(i + 2) && STA_A(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_SBC(i + 5) && STA_A(i + 6)) if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i]) > 0) {
          listing[i + 4] = "\tlda " + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && (IY(i + 1) === false) && ADD_SUB_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN,x") && LDA_VAL(i + 4) && (IY(i + 4) === false) && ADC_SBC_VAL(i + 5) && (listing[i + 6] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 7] === "\tldy :STACKORIGIN-1,x") && (listing[i + 8] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11) && (LDA_A(i + 12) === false)) {
          listing[i + 3] = listing[i + 9];
          listing[i + 6] = listing[i + 11];
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          if (DEX(i + 12)) {
            listing[i + 1] = "\tldy :STACKORIGIN,x";
            listing[i] = "";
            listing[i + 12] = "";
          } else listing[i + 1] = "\tldy :STACKORIGIN-1,x";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if (STA_BP2_Y(i + 21) && MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && LDA_VAL(i + 4) && ADD_SUB(i + 5) && STA_BP2(i + 6) && LDA_VAL(i + 7) && ADC_SBC(i + 8) && STA_BP2_1(i + 9) && LDY_IM_0(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN,x") && STA_BP2_Y(i + 12) && INY(i + 13) && (listing[i + 14] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_BP2_Y(i + 15) && INY(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_BP2_Y(i + 18) && INY(i + 19) && (listing[i + 20] === "\tlda :STACKORIGIN+STACKWIDTH*3,x")) if ((pas.System.Pos(":STACKORIGIN-1,x",listing[i + 5]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 8]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0)) {
          listing[i + 11] = "\tlda " + GetString$1(i);
          listing[i + 14] = "\tlda " + GetString$1(i + 1);
          listing[i + 17] = "\tlda " + GetString$1(i + 2);
          listing[i + 20] = "\tlda " + GetString$1(i + 3);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (STA_BP2_Y(i + 13) && MVA(i) && MVA(i + 1) && LDA_VAL(i + 2) && ADD_SUB(i + 3) && STA_BP2(i + 4) && LDA_VAL(i + 5) && ADC_SBC(i + 6) && STA_BP2_1(i + 7) && LDY_IM_0(i + 8) && (listing[i + 9] === "\tlda :STACKORIGIN,x") && STA_BP2_Y(i + 10) && INY(i + 11) && (listing[i + 12] === "\tlda :STACKORIGIN+STACKWIDTH,x")) if ((pas.System.Pos(":STACKORIGIN-1,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0)) {
          listing[i + 9] = "\tlda " + GetString$1(i);
          listing[i + 12] = "\tlda " + GetString$1(i + 1);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && INX(i + 4) && LDA_VAL(i + 5) && ADD_SUB_VAL(i + 6) && STA_VAL(i + 7) && LDA(i + 8) && ADC_SBC(i + 9) && STA(i + 10) && LDA(i + 11) && ADC_SBC(i + 12) && STA(i + 13) && LDA(i + 14) && ADC_SBC(i + 15) && STA(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN-1,x") && STA(i + 18) && (listing[i + 19] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA(i + 20) && (listing[i + 21] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && STA(i + 22) && (listing[i + 23] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && STA(i + 24)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0)) {
          listing[i + 17] = "\tlda " + GetString$1(i);
          listing[i + 19] = "\tlda " + GetString$1(i + 1);
          listing[i + 21] = "\tlda " + GetString$1(i + 2);
          listing[i + 23] = "\tlda " + GetString$1(i + 3);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (DEX(i + 8) && LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (listing[i + 7] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && (listing[i + 9] === "\tlda :STACKORIGIN,x") && STA(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 12) && (listing[i + 13] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 16)) {
          listing[i + 9] = listing[i];
          listing[i + 11] = listing[i + 2];
          listing[i + 13] = listing[i + 4];
          listing[i + 15] = listing[i + 6];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (DEX(i + 12) && LDA_A(i) && AND_ORA_EOR_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && AND_ORA_EOR_VAL(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 6) && AND_ORA_EOR_VAL(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 9) && AND_ORA_EOR_VAL(i + 10) && (listing[i + 11] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && (listing[i + 13] === "\tlda :STACKORIGIN,x") && STA(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 18) && (listing[i + 19] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 20)) {
          listing[i + 2] = listing[i + 14];
          listing[i + 5] = listing[i + 16];
          listing[i + 8] = listing[i + 18];
          listing[i + 11] = listing[i + 20];
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          listing[i + 19] = "";
          listing[i + 20] = "";
          return false;
        };
        if (DEX(i + 4) && LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 5] === "\tlda :STACKORIGIN,x") && STA(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 8)) {
          listing[i + 5] = listing[i];
          listing[i + 7] = listing[i + 2];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (DEX(i + 12) && LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && LDA_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_VAL(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_VAL(i + 6) && (listing[i + 7] === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && (listing[i + 8] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11)) {
          listing[i + 1] = listing[i + 9];
          listing[i + 3] = listing[i + 11];
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,x",listing[i + 4]) > 0)) {
          listing_tmp[0] = "\tmva " + GetString$1(i + 2) + " :STACKORIGIN+STACKWIDTH,x";
          listing_tmp[1] = "\tmva " + GetString$1(i + 3) + " :STACKORIGIN+STACKWIDTH*2,x";
          listing_tmp[2] = "\tmva " + GetString$1(i + 4) + " :STACKORIGIN+STACKWIDTH*3,x";
          listing_tmp[3] = "\tinx";
          listing_tmp[4] = listing[i + 1];
          listing[i] = listing_tmp[0];
          listing[i + 1] = listing_tmp[1];
          listing[i + 2] = listing_tmp[2];
          listing[i + 3] = listing_tmp[3];
          listing[i + 4] = listing_tmp[4];
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 3]) > 0)) {
          listing_tmp[0] = "\tmva " + GetString$1(i + 2) + " :STACKORIGIN+STACKWIDTH,x";
          listing_tmp[1] = "\tinx";
          listing_tmp[2] = listing[i + 1];
          listing_tmp[3] = listing[i + 3];
          listing[i] = listing_tmp[0];
          listing[i + 1] = listing_tmp[1];
          listing[i + 2] = listing_tmp[2];
          listing[i + 3] = listing_tmp[3];
          return false;
        };
        if (MVA(i) && (pas.System.Pos(" :STACK",listing[i]) > 0) && LDA_STACK(i + 1) && AND_ORA_EOR(i + 2) && STA_STACK(i + 3)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Pos(pas.System.Copy(listing[i + 1],6,256),listing[i]) > 0)) {
          listing[i] = "\tlda " + GetString$1(i);
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && (listing[i + 2] === "\tjsr @hiWORD")) if ((pas.System.Pos(" :STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0)) {
          listing[i] = "\tmva " + pas.System.Copy(listing[i + 1],6,pas.System.Pos(":STACK",listing[i + 1]) - 6) + ":STACKORIGIN,x";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (TAY(i + 7) && LDA(i) && (listing[i] === listing[i + 5]) && ASL_A(i + 1) && TAY(i + 2) && MVA(i + 3) && INX(i + 4) && LDA(i + 5) && ASL_A(i + 6)) {
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (TAY(i + 8) && LDA(i) && (listing[i] === listing[i + 6]) && ASL_A(i + 1) && TAY(i + 2) && LDA(i + 3) && STA(i + 4) && INX(i + 5) && LDA(i + 6) && ASL_A(i + 7)) {
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if ((MVA(i) === false) && MVA(i + 1) && MVA(i + 2) && ((pas.System.Pos("+",listing[i + 3]) === 1) || (pas.System.Pos("-",listing[i + 3]) === 1))) {
          tmp = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = tmp;
          return false;
        };
        if ((pas.System.Pos("+",listing[i]) === 1) || (pas.System.Pos("-",listing[i]) === 1)) {
          tmp = pas.System.Copy(listing[i],2,256);
          yes = false;
          for (var $l = i + 1, $end = l - 1; $l <= $end; $l++) {
            p = $l;
            if (MWY_BP2(p) && (listing[p] === ("\tmwy " + tmp + " :bp2"))) {
              listing[p] = ""}
             else if (pas.System.Pos("(:bp2),y",listing[p]) > 0) {
              if (pas.System.Pos("mva (:bp2),y",listing[p]) > 0) {
                listing[p] = pas.System.Copy(listing[p],1,5) + "(" + tmp + "),y" + pas.System.Copy(listing[p],14,256)}
               else listing[p] = pas.System.Copy(listing[p],1,5) + "(" + tmp + "),y";
              yes = true;
            } else if ((pas.System.Pos("+",listing[p]) === 1) || (pas.System.Pos("-",listing[p]) === 1)) {
              if (listing[p].length === 1) listing[p] = "";
              break;
            };
          };
          if (yes) {
            listing[i] = "";
            return false;
          };
        };
        if (MVA(i) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && (listing[i + 4] === "\tjsr imulBYTE")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0)) {
          listing[i + 1] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && (listing[i + 4] === "\tjsr @expandToREAL")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0)) {
          listing_tmp[0] = "\tmva " + GetString$1(i + 2) + " :STACKORIGIN+STACKWIDTH*3,x";
          listing_tmp[1] = "\tmva " + GetString$1(i + 1) + " :STACKORIGIN+STACKWIDTH*2,x";
          listing_tmp[2] = "\tmva " + GetString$1(i) + " :STACKORIGIN+STACKWIDTH,x";
          listing_tmp[3] = "\tmva #$00 :STACKORIGIN,x";
          listing[i] = listing_tmp[3];
          listing[i + 1] = listing_tmp[2];
          listing[i + 2] = listing_tmp[1];
          listing[i + 3] = listing_tmp[0];
          listing[i + 4] = "";
          return false;
        };
        return Result;
      };
      function opt_STACK_INX(i) {
        var Result = false;
        Result = true;
        if (DEX(i) && INX(i + 1)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (DEX(i + 1) && INX(i)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (DEX(i + 3) && INX(i) && LDA_VAL(i + 1) && STA_VAL(i + 2)) {
          listing[i] = "";
          listing[i + 3] = "";
          return false;
        };
        if (DEX(i + 4) && INX(i) && LDA_VAL(i + 1) && AND_ORA_EOR_VAL(i + 2) && STA_VAL(i + 3)) {
          listing[i] = "";
          listing[i + 4] = "";
          return false;
        };
        if (DEX(i + 5) && INX(i) && LDA_VAL(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
          listing[i] = "";
          listing[i + 5] = "";
          return false;
        };
        if (DEX(i + 9) && INX(i) && LDA_VAL(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8)) {
          listing[i] = "";
          listing[i + 9] = "";
          return false;
        };
        if (DEX(i + 13) && INX(i) && LDA_VAL(i + 1) && (AND_ORA_EOR_VAL(i + 2) || ADD_SUB_VAL(i + 2)) && STA_VAL(i + 3) && LDA_VAL(i + 4) && (AND_ORA_EOR_VAL(i + 5) || ADC_SBC_VAL(i + 5)) && STA_VAL(i + 6) && LDA_VAL(i + 7) && (AND_ORA_EOR_VAL(i + 8) || ADC_SBC_VAL(i + 8)) && STA_VAL(i + 9) && LDA_VAL(i + 10) && (AND_ORA_EOR_VAL(i + 11) || ADC_SBC_VAL(i + 11)) && STA_VAL(i + 12)) {
          listing[i] = "";
          listing[i + 13] = "";
          return false;
        };
        if (DEX(i + 7) && INX(i) && LDA_VAL(i + 1) && (AND_ORA_EOR_VAL(i + 2) || ADD_SUB_VAL(i + 2)) && STA_VAL(i + 3) && LDA_VAL(i + 4) && (AND_ORA_EOR_VAL(i + 5) || ADC_SBC_VAL(i + 5)) && STA_VAL(i + 6)) {
          listing[i] = "";
          listing[i + 7] = "";
          return false;
        };
        if (DEX(i + 5) && INX(i) && LDY_VAL(i + 1) && INY(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
          listing[i] = "";
          listing[i + 5] = "";
          return false;
        };
        if (INX(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && DEX(i + 3)) {
          listing[i] = "";
          listing[i + 3] = "";
          return false;
        };
        if (INX(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && DEX(i + 4)) {
          listing[i] = "";
          listing[i + 4] = "";
          return false;
        };
        if (INX(i) && (listing[i + 1] === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 2) && STA_VAL(i + 3) && DEX(i + 4)) {
          listing[i + 1] = "\tldy :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 4] = "";
          return false;
        };
        if (INX(i) && (listing[i + 1] === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && DEX(i + 6)) {
          listing[i + 1] = "\tldy :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 6] = "";
          return false;
        };
        if (INX(i) && (listing[i + 1] === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9) && DEX(i + 10)) {
          listing[i + 1] = "\tldy :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 10] = "";
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && (listing[i + 2] === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 3) && STA_VAL(i + 4) && INY(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && INY(i + 8) && LDA_VAL(i + 9) && STA_VAL(i + 10) && INY(i + 11) && LDA_VAL(i + 12) && STA_VAL(i + 13) && DEX(i + 14)) {
          listing[i + 2] = "\tldy :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 14] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && MWY_BP2(i + 2) && LDY_VAL(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5) && DEX(i + 6)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 4] = "\tlda " + GetString$1(i + 1);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 6] = "";
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && (listing[i + 2] === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 3) && STA_VAL(i + 4) && DEX(i + 5)) {
          listing[i + 2] = "\tldy :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 5] = "";
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && DEX(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN+1,x")) {
          listing[i] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && DEX(i + 2) && (listing[i + 3] === "\tlda :STACKORIGIN+1,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i] = "";
          listing[i + 1] = "\tlda " + GetString$1(i + 1);
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && DEX(i + 2) && LDY_1(i + 3)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i] = "";
          listing[i + 1] = "\tmva " + GetString$1(i + 1) + " :STACKORIGIN+1,x";
          listing[i + 2] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && DEX(i + 2) && MWY_BP2(i + 3) && LDY_VAL(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN+1,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 5] = "\tlda " + GetString$1(i + 1);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (DEX(i + 11) && INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN,x") && ADD_SUB_VAL(i + 6) && STA_VAL(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_SBC_VAL(i + 9) && STA_VAL(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0)) {
          listing[i + 5] = "\tlda " + GetString$1(i + 1);
          listing[i + 8] = "\tlda " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (DEX(i + 7) && INX(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1,x") && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && ADC_SBC_VAL(i + 5) && STA_VAL(i + 6)) {
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          listing[i + 4] = "\tlda :STACKORIGIN+STACKWIDTH,x";
          listing[i] = "";
          listing[i + 7] = "";
          return false;
        };
        if (DEX(i + 7) && INX(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1,x") && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && ADC_SBC_VAL(i + 5) && STA_VAL(i + 6)) {
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 7] = "";
          return false;
        };
        if (DEX(i + 5) && MVA(i + 1) && MVA(i + 2) && (listing[i + 3] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 2] = "";
          listing[i + 3] = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = "";
          return false;
        };
        if (DEX(i + 6) && LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tsta :STACKORIGIN,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        return Result;
      };
      function opt_STACK_ADD(i) {
        var Result = false;
        var p = 0;
        Result = true;
        if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 2] = listing[i + 7];
          listing[i + 5] = listing[i + 9];
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (LDA_STACK(i) && ((listing[i + 1] === "\tadd #$01") || (listing[i + 1] === "\tsub #$01")) && STA_STACK(i + 2) && (INX(i + 3) || DEX(i + 3))) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          if (listing[i + 1] === "\tadd #$01") {
            listing[i + 1] = "\tinc " + pas.System.Copy(listing[i],6,256)}
           else listing[i + 1] = "\tdec " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LDA_VAL(i) && (IY(i) === false) && ((listing[i + 1] === "\tadd #$01") || (listing[i + 1] === "\tsub #$01")) && STA_STACK(i + 2) && (INX(i + 3) || DEX(i + 3)) && (INX(i + 4) === false) && (DEX(i + 4) === false)) {
          if (listing[i + 1] === "\tadd #$01") {
            listing[i + 1] = "\tiny"}
           else listing[i + 1] = "\tdey";
          listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
          listing[i + 2] = "\tsty " + pas.System.Copy(listing[i + 2],6,256);
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && ADD_SUB_VAL(i + 2) && (listing[i + 3] === "\tldy :STACKORIGIN-1,x") && STA_VAL(i + 4) && DEX(i + 5)) {
          listing[i + 3] = "\tldy :STACKORIGIN,x";
          listing[i] = "";
          listing[i + 5] = "";
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && DEX(i + 4)) {
          listing[i] = "";
          listing[i + 4] = "";
          return false;
        };
        if (LDA_VAL(i + 1) && (IY(i + 1) === false) && (listing[i + 2] === "\tadd #$01") && TAY(i + 3)) {
          listing[i + 1] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 2] = "\tiny";
          listing[i + 3] = "";
          return false;
        };
        if (LDA(i + 1) && ADD_IM_0(i + 2) && STA(i + 3) && LDA(i + 4) && ADC(i + 5) && STA(i + 6)) {
          listing[i + 2] = "";
          listing[i + 5] = "\tadd " + pas.System.Copy(listing[i + 5],6,256);
          return false;
        };
        if (LDA_IM_0(i + 1) && ADD(i + 2) && STA(i + 3) && LDA(i + 4) && ADC(i + 5) && STA(i + 6)) {
          listing[i + 1] = "";
          listing[i + 2] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 5] = "\tadd " + pas.System.Copy(listing[i + 5],6,256);
          return false;
        };
        if (LDA_A(i + 1) && ADD_IM_0(i + 2) && STA_A(i + 3) && (INY(i + 4) === false) && (ADC(i + 5) === false)) {
          listing[i + 2] = "";
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_VAL(i + 3) && (LDA_IM(i + 3) === false) && ADD_STACK(i + 4) && TAY(i + 5) && (listing[i + 6] === (listing[i + 3] + "+1")) && ADC_STACK(i + 7) && STA_BP_1(i + 8) && LDA_BP_Y(i + 9) && STA(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0)) {
          listing[i + 4] = "\tadd " + GetString$1(i + 1);
          listing[i + 7] = "\tadc " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          if (ADC_IM_0(i + 7)) if ((pas.System.Copy(listing[i + 3],6,256) + "+1") === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 3] = "\tmwy " + pas.System.Copy(listing[i + 3],6,256) + " :bp2";
            listing[i + 4] = "\tldy " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "\tlda (:bp2),y";
          };
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA(i + 3) && ADD_STACK(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_STACK(i + 7) && STA(i + 8)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0)) {
          listing[i + 4] = "\tadd " + GetString$1(i + 1);
          listing[i + 7] = "\tadc " + GetString$1(i + 2);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LDY_STACK(i + 7) && MWY_BP2(i) && LDA_BP2(i + 1) && ADD_IM(i + 2) && (pas.System.Pos("-DATAORIGIN",listing[i + 2]) > 0) && STA_BP2(i + 3) && LDA_BP2_1(i + 4) && ADC_IM_0(i + 5) && STA_BP2_1(i + 6)) {
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (INX(p) && MVA_IM(p + 1) && (MVA(p + 2) || STA(p + 2)) && (pas.System.Pos(":STACKORIGIN,x",listing[p + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[p + 2]) > 0)) {
              listing[i + 7] = "\tldy " + pas.System.Copy(listing[i + 2],6,256) + "+$" + pas.SysUtils.IntToHex(GetBYTE(p + 1),2);
              listing[p + 1] = "";
              listing[p + 2] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              return false;
            };
          };
          if (Result) {
            listing[i + 1] = "\tldy " + GetString$1(i) + "+1";
            listing[i] = "\tlda " + GetString$1(i);
            listing[i + 4] = "\tscc";
            listing[i + 5] = "\tiny";
            listing[i + 6] = "\tsty :bp2+1";
            return false;
          };
        };
        if (LDY_STACK(i + 6) && LDA_A(i) && ADD_SUB_VAL(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_A(i + 5) && (SKIP(i + 7) === false)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 2] = "\ttay";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        return Result;
      };
      function opt_STACK_CMP(i) {
        var Result = false;
        Result = true;
        if (LAB_A(i) && STY_STACK(i + 1) && LDA_STACK(i + 2) && AND_ORA_EOR_STACK(i + 3)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
          listing[i + 1] = "\ttya";
          listing[i + 2] = pas.System.Copy(listing[i + 3],1,5) + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 3] = "";
          return false;
        };
        if (LAB_A(i) && STY_STACK(i + 1) && LDA_STACK(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i + 1] = "\ttya";
          listing[i + 2] = "";
          return false;
        };
        if (LAB_A(i) && TYA(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && DEX(i + 3)) {
          listing[i + 2] = "\tsty :STACKORIGIN+1,x";
          listing[i + 1] = "\tdex";
          listing[i + 3] = "";
          return false;
        };
        if (LAB_A(i) && TYA(i + 1) && STA_VAL(i + 2) && DEX(i + 3)) {
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = "\tdex";
          return false;
        };
        if (LAB_A(i) && (listing[i + 1] === "\tsty :STACKORIGIN-1,x") && DEX(i + 2)) {
          listing[i + 2] = "\tsty :STACKORIGIN,x";
          listing[i + 1] = "\tdex";
          return false;
        };
        if (LAB_A(i) && (listing[i + 1] === "\tsty :STACKORIGIN,x") && DEX(i + 2)) {
          listing[i + 2] = "\tsty :STACKORIGIN+1,x";
          listing[i + 1] = "\tdex";
          return false;
        };
        if (LAB_A(i) && (listing[i + 1] === "\tsty :STACKORIGIN+1,x") && DEX(i + 2)) {
          listing[i + 2] = "\tsty :STACKORIGIN+2,x";
          listing[i + 1] = "\tdex";
          return false;
        };
        if ((listing[i] === "\tsty :STACKORIGIN,x") && DEX(i + 1) && (listing[i + 2] === "\tlda :STACKORIGIN+1,x")) {
          listing[i] = "\tdex";
          listing[i + 1] = "\ttya";
          listing[i + 2] = "";
          return false;
        };
        if (LDY_1(i) && LAB_A(i + 12) && LAB_A(i + 15) && STY_STACK(i + 16) && DEX(i + 17)) {
          if (listing[i + 16] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 17] = "\tsty :STACKORIGIN,x";
            listing[i + 16] = "\tdex";
            return false;
          };
          if (listing[i + 16] === "\tsty :STACKORIGIN,x") {
            listing[i + 17] = "\tsty :STACKORIGIN+1,x";
            listing[i + 16] = "\tdex";
            return false;
          };
          if (listing[i + 16] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 17] = "\tsty :STACKORIGIN+2,x";
            listing[i + 16] = "\tdex";
            return false;
          };
        };
        if (LDY_1(i) && LAB_A(i + 6) && LAB_A(i + 10) && STY_STACK(i + 11) && DEX(i + 12)) {
          if (listing[i + 11] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 12] = "\tsty :STACKORIGIN,x";
            listing[i + 11] = "\tdex";
            return false;
          };
          if (listing[i + 11] === "\tsty :STACKORIGIN,x") {
            listing[i + 12] = "\tsty :STACKORIGIN+1,x";
            listing[i + 11] = "\tdex";
            return false;
          };
          if (listing[i + 11] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 12] = "\tsty :STACKORIGIN+2,x";
            listing[i + 11] = "\tdex";
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 12) && STY_STACK(i + 13) && DEX(i + 14)) {
          if (listing[i + 13] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 14] = "\tsty :STACKORIGIN,x";
            listing[i + 13] = "\tdex";
            return false;
          };
          if (listing[i + 13] === "\tsty :STACKORIGIN,x") {
            listing[i + 14] = "\tsty :STACKORIGIN+1,x";
            listing[i + 13] = "\tdex";
            return false;
          };
          if (listing[i + 13] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 14] = "\tsty :STACKORIGIN+2,x";
            listing[i + 13] = "\tdex";
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 13) && STY_STACK(i + 14) && DEX(i + 15)) {
          if (listing[i + 14] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 15] = "\tsty :STACKORIGIN,x";
            listing[i + 14] = "\tdex";
            return false;
          };
          if (listing[i + 14] === "\tsty :STACKORIGIN,x") {
            listing[i + 15] = "\tsty :STACKORIGIN+1,x";
            listing[i + 14] = "\tdex";
            return false;
          };
          if (listing[i + 14] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 15] = "\tsty :STACKORIGIN+2,x";
            listing[i + 14] = "\tdex";
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 19) && STY_STACK(i + 20) && DEX(i + 21)) {
          if (listing[i + 20] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 21] = "\tsty :STACKORIGIN,x";
            listing[i + 20] = "\tdex";
            return false;
          };
          if (listing[i + 20] === "\tsty :STACKORIGIN,x") {
            listing[i + 21] = "\tsty :STACKORIGIN+1,x";
            listing[i + 20] = "\tdex";
            return false;
          };
          if (listing[i + 20] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 21] = "\tsty :STACKORIGIN+2,x";
            listing[i + 20] = "\tdex";
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 20) && STY_STACK(i + 21) && DEX(i + 22)) {
          if (listing[i + 21] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 22] = "\tsty :STACKORIGIN,x";
            listing[i + 21] = "\tdex";
            return false;
          };
          if (listing[i + 21] === "\tsty :STACKORIGIN,x") {
            listing[i + 22] = "\tsty :STACKORIGIN+1,x";
            listing[i + 21] = "\tdex";
            return false;
          };
          if (listing[i + 21] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 22] = "\tsty :STACKORIGIN+2,x";
            listing[i + 21] = "\tdex";
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 26) && STY_STACK(i + 27) && DEX(i + 28)) {
          if (listing[i + 27] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 28] = "\tsty :STACKORIGIN,x";
            listing[i + 27] = "\tdex";
            return false;
          };
          if (listing[i + 27] === "\tsty :STACKORIGIN,x") {
            listing[i + 28] = "\tsty :STACKORIGIN+1,x";
            listing[i + 27] = "\tdex";
            return false;
          };
          if (listing[i + 27] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 28] = "\tsty :STACKORIGIN+2,x";
            listing[i + 27] = "\tdex";
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 27) && STY_STACK(i + 28) && DEX(i + 29)) {
          if (listing[i + 28] === "\tsty :STACKORIGIN-1,x") {
            listing[i + 29] = "\tsty :STACKORIGIN,x";
            listing[i + 28] = "\tdex";
            return false;
          };
          if (listing[i + 28] === "\tsty :STACKORIGIN,x") {
            listing[i + 29] = "\tsty :STACKORIGIN+1,x";
            listing[i + 28] = "\tdex";
            return false;
          };
          if (listing[i + 28] === "\tsty :STACKORIGIN+1,x") {
            listing[i + 29] = "\tsty :STACKORIGIN+2,x";
            listing[i + 28] = "\tdex";
            return false;
          };
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (MVA(i) && LDY_1(i + 1) && LDA_VAL(i + 2) && CMP_VAL(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && TYA(i + 7) && AND_ORA_EOR_STACK(i + 8)) if ((pas.System.Pos(":STACKORIGIN+1,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+1,x",listing[i + 8]) > 0)) {
          listing[i + 8] = pas.System.Copy(listing[i + 8],1,5) + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1,x") && (listing[i + 2] === "\tcmp :STACKORIGIN,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = "\tcmp :STACKORIGIN+1,x";
          listing[i + 2] = "\tlda :STACKORIGIN,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN,x") && (listing[i + 2] === "\tcmp :STACKORIGIN+1,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = "\tcmp :STACKORIGIN+2,x";
          listing[i + 2] = "\tlda :STACKORIGIN+1,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && (listing[i + 2] === "\tcmp :STACKORIGIN-1,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = "\tcmp :STACKORIGIN,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && (listing[i + 2] === "\tcmp :STACKORIGIN,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = "\tcmp :STACKORIGIN+1,x";
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN,x") && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+1,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN+1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+2,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN,x") && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+1,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN+1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+2,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && AND_ORA_EOR_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && AND_ORA_EOR_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && CMP_VAL(i + 2) && BNE(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN-1,x") && CMP_VAL(i + 5) && LAB_A(i + 6) && SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
          listing[i + 10] = listing[i + 9];
          listing[i + 9] = listing[i + 8];
          listing[i + 8] = listing[i + 7];
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = "\tlda :STACKORIGIN,x";
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+STACKWIDTH,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN+STACKWIDTH,x") && CMP_VAL(i + 2) && BNE(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN,x") && CMP_VAL(i + 5) && LAB_A(i + 6) && SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
          listing[i + 10] = listing[i + 9];
          listing[i + 9] = listing[i + 8];
          listing[i + 8] = listing[i + 7];
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = "\tlda :STACKORIGIN+1,x";
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+1+STACKWIDTH,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && (listing[i + 1] === "\tlda :STACKORIGIN+1+STACKWIDTH,x") && CMP_VAL(i + 2) && BNE(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN+1,x") && CMP_VAL(i + 5) && LAB_A(i + 6) && SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
          listing[i + 10] = listing[i + 9];
          listing[i + 9] = listing[i + 8];
          listing[i + 8] = listing[i + 7];
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = "\tlda :STACKORIGIN+2,x";
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = "\tlda :STACKORIGIN+2+STACKWIDTH,x";
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (MVA_(i + 1) && MVA_(i + 2) && MVA_(i + 3) && MVA_(i + 4) && INX(i + 5) && MVA_(i + 6) && MVA_(i + 7) && MVA_(i + 8) && MVA_(i + 9) && LDY_1(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && (listing[i + 12] === "\tcmp :STACKORIGIN+STACKWIDTH*3,x") && BNE(i + 13) && (listing[i + 14] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && (listing[i + 15] === "\tcmp :STACKORIGIN+STACKWIDTH*2,x") && BNE(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 18] === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 19) && (listing[i + 20] === "\tlda :STACKORIGIN-1,x") && (listing[i + 21] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 8]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 9]) > 0)) {
          listing[i + 11] = "\tlda " + GetString$1(i + 4);
          listing[i + 12] = "\tcmp " + GetString$1(i + 9);
          listing[i + 14] = "\tlda " + GetString$1(i + 3);
          listing[i + 15] = "\tcmp " + GetString$1(i + 8);
          listing[i + 17] = "\tlda " + GetString$1(i + 2);
          listing[i + 18] = "\tcmp " + GetString$1(i + 7);
          listing[i + 20] = "\tlda " + GetString$1(i + 1);
          listing[i + 21] = "\tcmp " + GetString$1(i + 6);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && BNE(i + 3) && LDA_VAL(i + 4) && CMP_VAL(i + 5) && BNE(i + 6) && LDA_VAL(i + 7) && CMP_VAL(i + 8) && BNE(i + 9) && LDA_VAL(i + 10) && CMP_VAL(i + 11) && LAB_A(i + 12)) {
          if (SKIP(i + 13) && SKIP(i + 14) && DEY(i + 15) && LAB_A(i + 16) && DEX(i + 17)) {
            listing[i + 17] = listing[i + 16];
            listing[i + 16] = listing[i + 15];
            listing[i + 15] = listing[i + 14];
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
          if (SKIP(i + 13) && DEY(i + 14) && LAB_A(i + 15) && DEX(i + 16)) {
            listing[i + 16] = listing[i + 15];
            listing[i + 15] = listing[i + 14];
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
        };
        if (MVA_(i + 1) && MVA_(i + 2) && INX(i + 3) && MVA_(i + 4) && MVA_(i + 5) && LDY_1(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 8] === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN-1,x") && (listing[i + 11] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 5]) > 0)) {
          listing[i + 7] = "\tlda " + GetString$1(i + 2);
          listing[i + 8] = "\tcmp " + GetString$1(i + 5);
          listing[i + 10] = "\tlda " + GetString$1(i + 1);
          listing[i + 11] = "\tcmp " + GetString$1(i + 4);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if ((MVA(i) === false) && INX(i + 1) && MVA_(i + 2) && MVA_(i + 3) && LDY_1(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 6] === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN-1,x") && (listing[i + 9] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 3]) > 0)) {
          listing[i + 6] = "\tcmp " + GetString$1(i + 3);
          listing[i + 9] = "\tcmp " + GetString$1(i + 2);
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((MVA(i) === false) && MVA_(i + 1) && MVA_(i + 2) && LDY_1(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 5] === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN-1,x") && (listing[i + 8] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 5] = "\tcmp " + GetString$1(i + 2);
          listing[i + 8] = "\tcmp " + GetString$1(i + 1);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LAB_A(i + 6) && LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && BNE(i + 3) && LDA_VAL(i + 4) && CMP_VAL(i + 5)) {
          if (SKIP(i + 7) && SKIP(i + 8) && DEY(i + 9) && LAB_A(i + 10) && DEX(i + 11)) {
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
          if (SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
        };
        if (MVA_(i + 1) && LDY_1(i + 2) && (listing[i + 3] === "\tlda :STACKORIGIN,x") && BEQ(i + 4)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 3] = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = "";
          return false;
        };
        if (MVA_(i + 1) && INX(i + 2) && MVA_(i + 3) && LDY_1(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN-1,x") && (listing[i + 6] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0)) {
          listing[i + 5] = "\tlda " + GetString$1(i + 1);
          listing[i + 6] = "\tcmp " + GetString$1(i + 3);
          listing[i + 1] = "";
          listing[i + 3] = "";
          return false;
        };
        if (MVA_(i) && LDY_1(i + 1) && (listing[i + 2] === "\tlda :STACKORIGIN-1,x") && (listing[i + 3] === "\tcmp :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) {
          listing[i + 3] = "\tcmp " + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if (MVA_(i + 1) && DEX(i + 2) && MWY_BP2(i + 3) && LDY_IM(i + 4) && (listing[i + 5] === "\tmva (:bp2),y :STACKORIGIN+2,x") && (listing[i + 6] === "\tlda :STACKORIGIN+1,x") && (listing[i + 7] === "\tcmp :STACKORIGIN+2,x")) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 6] = "\tlda " + GetString$1(i + 1);
          listing[i + 7] = "\tcmp " + GetString$1(i + 5);
          listing[i + 1] = "";
          listing[i + 5] = "";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && SKIP(i + 2) && DEY(i + 3) && LAB_A(i + 4) && DEX(i + 5)) {
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (MVA_(i + 1) && MVA_(i + 2) && MVA_(i + 3) && MVA_(i + 4) && INX(i + 5) && MVA_(i + 6) && MVA_(i + 7) && MVA_(i + 8) && MVA_(i + 9) && LDY_1(i + 10) && LOCAL(i + 11) && (listing[i + 12] === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && (listing[i + 13] === "\tsub :STACKORIGIN+STACKWIDTH*3,x") && (listing[i + 14] === "\tbne L4") && (listing[i + 15] === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && (listing[i + 16] === "\tcmp :STACKORIGIN+STACKWIDTH*2,x") && (listing[i + 17] === "\tbne L1") && (listing[i + 18] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 19] === "\tcmp :STACKORIGIN+STACKWIDTH,x") && (listing[i + 20] === "\tbne L1") && (listing[i + 21] === "\tlda :STACKORIGIN-1,x") && (listing[i + 22] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 8]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 9]) > 0)) {
          listing[i + 12] = "\tlda " + GetString$1(i + 4);
          listing[i + 13] = "\tsub " + GetString$1(i + 9);
          listing[i + 15] = "\tlda " + GetString$1(i + 3);
          listing[i + 16] = "\tcmp " + GetString$1(i + 8);
          listing[i + 18] = "\tlda " + GetString$1(i + 2);
          listing[i + 19] = "\tcmp " + GetString$1(i + 7);
          listing[i + 21] = "\tlda " + GetString$1(i + 1);
          listing[i + 22] = "\tcmp " + GetString$1(i + 6);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 23) && LDY_1(i) && LOCAL(i + 1) && LDA_VAL(i + 2) && SUB(i + 3) && (SUB_STACK(i + 3) === false) && (listing[i + 4] === "\tbne L4") && LDA_VAL(i + 5) && CMP_VAL(i + 6) && (listing[i + 7] === "\tbne L1") && LDA_VAL(i + 8) && CMP_VAL(i + 9) && (listing[i + 10] === "\tbne L1") && LDA_VAL(i + 11) && CMP_VAL(i + 12) && (listing[i + 13] === "L1\tbeq L5") && (listing[i + 14] === "\tbcs L3") && (listing[i + 15] === "\tlda #$FF") && (listing[i + 16] === "\tbne L5") && (listing[i + 17] === "L3\tlda #$01") && (listing[i + 18] === "\tbne L5") && (listing[i + 19] === "L4\tbvc L5") && (listing[i + 20] === "\teor #$FF") && (listing[i + 21] === "\tora #$01") && (listing[i + 22] === "L5")) {
          if (SKIP(i + 24) && SKIP(i + 25) && DEY(i + 26) && LAB_A(i + 27) && DEX(i + 28)) {
            listing[i + 28] = listing[i + 27];
            listing[i + 27] = listing[i + 26];
            listing[i + 26] = listing[i + 25];
            listing[i + 25] = listing[i + 24];
            listing[i + 24] = listing[i + 23];
            listing[i + 23] = listing[i + 22];
            listing[i + 22] = listing[i + 21];
            listing[i + 21] = listing[i + 20];
            listing[i + 20] = listing[i + 19];
            listing[i + 19] = listing[i + 18];
            listing[i + 18] = listing[i + 17];
            listing[i + 17] = listing[i + 16];
            listing[i + 16] = listing[i + 15];
            listing[i + 15] = listing[i + 14];
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
          if (SKIP(i + 24) && DEY(i + 25) && LAB_A(i + 26) && DEX(i + 27)) {
            listing[i + 27] = listing[i + 26];
            listing[i + 26] = listing[i + 25];
            listing[i + 25] = listing[i + 24];
            listing[i + 24] = listing[i + 23];
            listing[i + 23] = listing[i + 22];
            listing[i + 22] = listing[i + 21];
            listing[i + 21] = listing[i + 20];
            listing[i + 20] = listing[i + 19];
            listing[i + 19] = listing[i + 18];
            listing[i + 18] = listing[i + 17];
            listing[i + 17] = listing[i + 16];
            listing[i + 16] = listing[i + 15];
            listing[i + 15] = listing[i + 14];
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
        };
        if (MVA_(i + 1) && MVA_(i + 2) && INX(i + 3) && MVA_(i + 4) && MVA_(i + 5) && LDY_1(i + 6) && LOCAL(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 9] === "\tsub :STACKORIGIN+STACKWIDTH,x") && (listing[i + 10] === "\tbne L4") && (listing[i + 11] === "\tlda :STACKORIGIN-1,x") && (listing[i + 12] === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 5]) > 0)) {
          listing[i + 8] = "\tlda " + GetString$1(i + 2);
          listing[i + 9] = "\tsub " + GetString$1(i + 5);
          listing[i + 11] = "\tlda " + GetString$1(i + 1);
          listing[i + 12] = "\tcmp " + GetString$1(i + 4);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if (DEX(i + 10) && LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && LDA_VAL(i + 3) && SBC_IM_0(i + 4) && SVC(i + 5) && (listing[i + 6] === "\teor #$80") && (BPL(i + 7) || BMI(i + 7)) && DEY(i + 8) && LAB_A(i + 9)) {
          listing[i + 10] = listing[i + 9];
          listing[i + 9] = listing[i + 8];
          listing[i + 8] = listing[i + 7];
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (ENDL(i + 16) && LDY_1(i) && LOCAL(i + 1) && LDA_VAL(i + 2) && SUB(i + 3) && (SUB_STACK(i + 3) === false) && (listing[i + 4] === "\tbne L4") && LDA_VAL(i + 5) && CMP_VAL(i + 6) && (listing[i + 7] === "\tbeq L5") && (listing[i + 8] === "\tlda #$00") && (listing[i + 9] === "\tadc #$FF") && (listing[i + 10] === "\tora #$01") && (listing[i + 11] === "\tbne L5") && (listing[i + 12] === "L4\tbvc L5") && (listing[i + 13] === "\teor #$FF") && (listing[i + 14] === "\tora #$01") && (listing[i + 15] === "L5")) {
          if (SKIP(i + 17) && SKIP(i + 18) && DEY(i + 19) && LAB_A(i + 20) && DEX(i + 21)) {
            listing[i + 21] = listing[i + 20];
            listing[i + 20] = listing[i + 19];
            listing[i + 19] = listing[i + 18];
            listing[i + 18] = listing[i + 17];
            listing[i + 17] = listing[i + 16];
            listing[i + 16] = listing[i + 15];
            listing[i + 15] = listing[i + 14];
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
          if (SKIP(i + 17) && DEY(i + 18) && LAB_A(i + 19) && DEX(i + 20)) {
            listing[i + 20] = listing[i + 19];
            listing[i + 19] = listing[i + 18];
            listing[i + 18] = listing[i + 17];
            listing[i + 17] = listing[i + 16];
            listing[i + 16] = listing[i + 15];
            listing[i + 15] = listing[i + 14];
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
        };
        if (MVA_(i + 1) && INX(i + 2) && MVA_(i + 3) && LDY_1(i + 4) && LOCAL(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN-1,x") && (listing[i + 7] === "\tsub :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0)) {
          listing[i + 6] = "\tlda " + GetString$1(i + 1);
          listing[i + 7] = "\tsub " + GetString$1(i + 3);
          listing[i + 1] = "";
          listing[i + 3] = "";
          return false;
        };
        if (DEX(i + 8) && LDY_1(i) && LDA_VAL(i + 1) && SUB(i + 2) && (SUB_STACK(i + 2) === false) && SVC(i + 3) && (listing[i + 4] === "\teor #$80") && (BPL(i + 5) || BMI(i + 5)) && DEY(i + 6) && LAB_A(i + 7)) {
          listing[i + 8] = listing[i + 7];
          listing[i + 7] = listing[i + 6];
          listing[i + 6] = listing[i + 5];
          listing[i + 5] = listing[i + 4];
          listing[i + 4] = listing[i + 3];
          listing[i + 3] = listing[i + 2];
          listing[i + 2] = listing[i + 1];
          listing[i + 1] = listing[i];
          listing[i] = "\tdex";
          return false;
        };
        if (ENDL(i + 9) && LDY_1(i) && LOCAL(i + 1) && LDA_VAL(i + 2) && SUB(i + 3) && (SUB_STACK(i + 3) === false) && (listing[i + 4] === "\tbeq L5") && (listing[i + 5] === "\tbvc L5") && (listing[i + 6] === "\teor #$FF") && (listing[i + 7] === "\tora #$01") && (listing[i + 8] === "L5")) {
          if (SKIP(i + 10) && SKIP(i + 11) && DEY(i + 12) && LAB_A(i + 13) && DEX(i + 14)) {
            listing[i + 14] = listing[i + 13];
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
          if (SKIP(i + 10) && DEY(i + 11) && LAB_A(i + 12) && DEX(i + 13)) {
            listing[i + 13] = listing[i + 12];
            listing[i + 12] = listing[i + 11];
            listing[i + 11] = listing[i + 10];
            listing[i + 10] = listing[i + 9];
            listing[i + 9] = listing[i + 8];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tdex";
            return false;
          };
        };
        if (MVA_(i) && LDY_1(i + 1) && LOCAL(i + 2) && (listing[i + 3] === "\tlda :STACKORIGIN-1+STACKWIDTH,x")) if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i]) > 0) {
          listing[i + 3] = "\tlda " + GetString$1(i);
          listing[i] = "";
          return false;
        };
        return Result;
      };
      function opt_STACK_ADR(i) {
        var Result = false;
        var p = 0;
        Result = true;
        if ((LDA_ADR(i + 16) || STA_ADR(i + 17) || LDA_ADR(i + 18) || STA_ADR(i + 19)) && (listing[i + 6] === "\tlda :STACKORIGIN+STACKWIDTH,x") && (listing[i + 7] === "\tasl :STACKORIGIN,x") && ROL_A(i + 8) && (listing[i + 9] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 10] === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 11) && TAY(i + 12) && (listing[i + 13] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 14) && (listing[i + 15] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          if ((LDA_STACK(i) === false) && (SUB_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && SUB_IM(i + 1)) || (LDA_IM(i) && SUB(i + 1) && (SUB_IM(i + 1) === false))) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && LDA(i + 3) && SBC(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = GetWORD(i,i + 3);
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "";
            } else {
              p = GetWORD(i + 1,i + 4);
              listing[i + 1] = "";
            };
            p = p * 2;
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\ttay";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            if (LDA_ADR_Y(i + 16)) {
              pas.System.Delete({a: i + 16, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 16]),2);
              listing[i + 16] = listing[i + 16] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 17)) {
              pas.System.Delete({a: i + 17, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 17]),2);
              listing[i + 17] = listing[i + 17] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 18]),2);
              listing[i + 18] = listing[i + 18] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 19]),2);
              listing[i + 19] = listing[i + 19] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            return false;
          };
          if ((LDA_STACK(i) === false) && (ADD_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && ADD_IM(i + 1)) || (LDA_IM(i) && ADD(i + 1) && (ADD_IM(i + 1) === false))) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && LDA(i + 3) && ADC(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = GetWORD(i,i + 3);
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "";
            } else {
              p = GetWORD(i + 1,i + 4);
              listing[i + 1] = "";
            };
            p = p * 2;
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\ttay";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            if (LDA_ADR_Y(i + 16)) {
              pas.System.Delete({a: i + 16, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 16]),2);
              listing[i + 16] = listing[i + 16] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 17)) {
              pas.System.Delete({a: i + 17, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 17]),2);
              listing[i + 17] = listing[i + 17] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 18]),2);
              listing[i + 18] = listing[i + 18] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 19]),2);
              listing[i + 19] = listing[i + 19] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            return false;
          };
        };
        if ((LDA_ADR(i + 18) || STA_ADR(i + 19) || LDA_ADR(i + 20) || STA_ADR(i + 21) || LDA_ADR(i + 22) || STA_ADR(i + 23) || LDA_ADR(i + 24) || STA_ADR(i + 25)) && (listing[i + 6] === "\tlda :STACKORIGIN+STACKWIDTH,x") && (listing[i + 7] === "\tasl :STACKORIGIN,x") && ROL_A(i + 8) && (listing[i + 9] === "\tasl :STACKORIGIN,x") && ROL_A(i + 10) && (listing[i + 11] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 12] === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 13) && TAY(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 16) && (listing[i + 17] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          if ((LDA_STACK(i) === false) && (SUB_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && SUB_IM(i + 1)) || (LDA_IM(i) && SUB(i + 1) && (SUB_IM(i + 1) === false))) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && LDA(i + 3) && SBC(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = GetWORD(i,i + 3);
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "";
            } else {
              p = GetWORD(i + 1,i + 4);
              listing[i + 1] = "";
            };
            p = p * 4;
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\tasl @";
            listing[i + 4] = "\ttay";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 18]),2);
              listing[i + 18] = listing[i + 18] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 19]),2);
              listing[i + 19] = listing[i + 19] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 20)) {
              pas.System.Delete({a: i + 20, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 20]),2);
              listing[i + 20] = listing[i + 20] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 21)) {
              pas.System.Delete({a: i + 21, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 21]),2);
              listing[i + 21] = listing[i + 21] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 22)) {
              pas.System.Delete({a: i + 22, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 22]),2);
              listing[i + 22] = listing[i + 22] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 23)) {
              pas.System.Delete({a: i + 23, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 23]),2);
              listing[i + 23] = listing[i + 23] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 24)) {
              pas.System.Delete({a: i + 24, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 24]),2);
              listing[i + 24] = listing[i + 24] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 25)) {
              pas.System.Delete({a: i + 25, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 25]),2);
              listing[i + 25] = listing[i + 25] + "-$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            return false;
          };
          if ((LDA_STACK(i) === false) && (ADD_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && ADD_IM(i + 1)) || (LDA_IM(i) && ADD(i + 1) && (ADD_IM(i + 1) === false))) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && LDA(i + 3) && ADC(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = GetWORD(i,i + 3);
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "";
            } else {
              p = GetWORD(i + 1,i + 4);
              listing[i + 1] = "";
            };
            p = p * 4;
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\tasl @";
            listing[i + 4] = "\ttay";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 18]),2);
              listing[i + 18] = listing[i + 18] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 19]),2);
              listing[i + 19] = listing[i + 19] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 20)) {
              pas.System.Delete({a: i + 20, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 20]),2);
              listing[i + 20] = listing[i + 20] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 21)) {
              pas.System.Delete({a: i + 21, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 21]),2);
              listing[i + 21] = listing[i + 21] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 22)) {
              pas.System.Delete({a: i + 22, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 22]),2);
              listing[i + 22] = listing[i + 22] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 23)) {
              pas.System.Delete({a: i + 23, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 23]),2);
              listing[i + 23] = listing[i + 23] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (LDA_ADR_Y(i + 24)) {
              pas.System.Delete({a: i + 24, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 24]),2);
              listing[i + 24] = listing[i + 24] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            if (STA_ADR_Y(i + 25)) {
              pas.System.Delete({a: i + 25, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 25]),2);
              listing[i + 25] = listing[i + 25] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            };
            return false;
          };
        };
        if ((LDA_ADR(i + 10) || STA_ADR(i + 11)) && LDA_VAL(i) && (listing[i + 1] === "\tasl :STACKORIGIN,x") && ROL_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 4] === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 5) && TAY(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 8) && (listing[i + 9] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          listing[i] = "\tlda :STACKORIGIN,x";
          listing[i + 1] = "\tasl @";
          listing[i + 2] = "\ttay";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if ((LDA_ADR(i + 12) || STA_ADR(i + 13)) && LDA_VAL(i) && (listing[i + 1] === "\tasl :STACKORIGIN,x") && ROL_A(i + 2) && (listing[i + 3] === "\tasl :STACKORIGIN,x") && ROL_A(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN+STACKWIDTH,x") && (listing[i + 6] === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 7) && TAY(i + 8) && (listing[i + 9] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 10) && (listing[i + 11] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          listing[i] = "\tlda :STACKORIGIN,x";
          listing[i + 1] = "\tasl @";
          listing[i + 2] = "\tasl @";
          listing[i + 3] = "\ttay";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && MVA_IM(i) && (pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (MVA(i + 1) || STA(i + 1)) && (listing[i + 2] === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 3) && TAY(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 6) && (listing[i + 7] === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          if (MVA_IM(i + 1)) {
            p = GetWORD(i,i + 1)}
           else p = GetBYTE(i);
          if (LDA_ADR_Y(i + 8)) {
            pas.System.Delete({a: i + 8, p: listing, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",listing[i + 8]),2);
            listing[i + 8] = listing[i + 8] + "+$" + pas.SysUtils.IntToHex(p,2);
          };
          if (STA_ADR_Y(i + 9)) {
            pas.System.Delete({a: i + 9, p: listing, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",listing[i + 9]),2);
            listing[i + 9] = listing[i + 9] + "+$" + pas.SysUtils.IntToHex(p,2);
          };
          if ((LDA(i + 10) || LDA_ADR(i + 10)) && (STA(i + 11) || STA_ADR(i + 11))) {
            if (LDA_ADR_Y(i + 10)) {
              pas.System.Delete({a: i + 10, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 10]),2);
              listing[i + 10] = listing[i + 10] + "+$" + pas.SysUtils.IntToHex(p,2);
            };
            if (STA_ADR_Y(i + 11)) {
              pas.System.Delete({a: i + 11, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 11]),2);
              listing[i + 11] = listing[i + 11] + "+$" + pas.SysUtils.IntToHex(p,2);
            };
            if ((LDA(i + 12) || LDA_ADR(i + 12)) && (STA(i + 13) || STA_ADR(i + 13))) {
              if (LDA_ADR_Y(i + 12)) {
                pas.System.Delete({a: i + 12, p: listing, get: function () {
                    return this.p[this.a];
                  }, set: function (v) {
                    this.p[this.a] = v;
                  }},pas.System.Pos(",y",listing[i + 12]),2);
                listing[i + 12] = listing[i + 12] + "+$" + pas.SysUtils.IntToHex(p,2);
              };
              if (STA_ADR_Y(i + 13)) {
                pas.System.Delete({a: i + 13, p: listing, get: function () {
                    return this.p[this.a];
                  }, set: function (v) {
                    this.p[this.a] = v;
                  }},pas.System.Pos(",y",listing[i + 13]),2);
                listing[i + 13] = listing[i + 13] + "+$" + pas.SysUtils.IntToHex(p,2);
              };
              if ((LDA(i + 14) || LDA_ADR(i + 14)) && (STA(i + 15) || STA_ADR(i + 15))) {
                if (LDA_ADR_Y(i + 14)) {
                  pas.System.Delete({a: i + 14, p: listing, get: function () {
                      return this.p[this.a];
                    }, set: function (v) {
                      this.p[this.a] = v;
                    }},pas.System.Pos(",y",listing[i + 14]),2);
                  listing[i + 14] = listing[i + 14] + "+$" + pas.SysUtils.IntToHex(p,2);
                };
                if (STA_ADR_Y(i + 15)) {
                  pas.System.Delete({a: i + 15, p: listing, get: function () {
                      return this.p[this.a];
                    }, set: function (v) {
                      this.p[this.a] = v;
                    }},pas.System.Pos(",y",listing[i + 15]),2);
                  listing[i + 15] = listing[i + 15] + "+$" + pas.SysUtils.IntToHex(p,2);
                };
              };
            };
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if ((LDA_ADR(i + 13) || STA_ADR(i + 14)) && LDA_A(i) && ADD_SUB(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && ADC_SBC(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && DEX(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 8) && TAY(i + 9) && LDA_STACK(i + 10) && ADC_IM_0(i + 11) && STA_STACK(i + 12)) if (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 12],6,256)) {
          listing[i + 9] = "\tdex";
          listing[i + 10] = listing[i];
          listing[i + 11] = listing[i + 1];
          listing[i + 12] = "\ttay";
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) if (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        return Result;
      };
      function opt_STACK_AL_CL(i) {
        var Result = false;
        var p = 0;
        var q = 0;
        var tmp = "";
        Result = true;
        if (ADD_SUB_AL_CL(i + 10) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && INX(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && MVA(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 8]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 9]) > 0)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ADD_SUB_AL_CL(i + 7) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && INX(i + 5) && MVA(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (MVA_IM(i + 1) && INX(i + 2) && MVA_IM(i + 3) && ADD_SUB_AL_CL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0)) {
          p = GetBYTE(i + 1);
          q = GetBYTE(i + 3);
          if (listing[i + 4] === "\tjsr addAL_CL") {
            p = p + q}
           else p = p - q;
          listing[i + 1] = "\tmva #$" + pas.SysUtils.IntToHex(p & 0xff,2) + " :STACKORIGIN,x";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "\tinx";
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && ADD_SUB_AL_CL(i + 3)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 2] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && ADD_SUB_AL_CL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (JSR(i) && INX(i + 1) && MVA(i + 2) && ADD_SUB_AL_CL(i + 3) && DEX(i + 4)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0) {
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          if (listing[i + 3] === "\tjsr addAL_CL") {
            listing[i + 2] = "\tadd " + GetString$1(i + 2)}
           else listing[i + 2] = "\tsub " + GetString$1(i + 2);
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 4] = "";
          return false;
        };
        if (MVA(i) && INX(i + 1) && MVA(i + 2) && ADD_SUB_AL_CL(i + 3)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0)) {
          tmp = GetString$1(i + 2);
          listing[i] = "\tlda " + GetString$1(i);
          if (listing[i + 3] === "\tjsr addAL_CL") {
            listing[i + 1] = "\tadd " + tmp}
           else listing[i + 1] = "\tsub " + tmp;
          listing[i + 2] = "\tsta :STACKORIGIN,x";
          listing[i + 3] = "\tinx";
          return false;
        };
        if ((LDA(i) || LDA_ADR(i)) && (listing[i + 1] === "\tsta :STACKORIGIN,x") && (LDA(i + 2) || LDA_ADR(i + 2)) && (listing[i + 3] === "\tsta :STACKORIGIN+STACKWIDTH,x") && INX(i + 4) && MVA(i + 5) && ADD_SUB_AL_CL(i + 6)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 5]) > 0) {
          if (listing[i + 6] === "\tjsr addAL_CL") {
            listing[i + 1] = "\tadd " + GetString$1(i + 5)}
           else listing[i + 1] = "\tsub " + GetString$1(i + 5);
          listing[i + 2] = "\tsta :STACKORIGIN,x";
          listing[i + 3] = "\tinx";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && ADD_SUB_AL_CL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0)) {
          listing[i] = "\tlda " + GetString$1(i);
          if (listing[i + 4] === "\tjsr addAL_CL") {
            listing[i + 1] = "\tadd " + GetString$1(i + 3)}
           else listing[i + 1] = "\tsub " + GetString$1(i + 3);
          listing[i + 2] = "\tsta :STACKORIGIN,x";
          listing[i + 3] = "\tinx";
          listing[i + 4] = "";
          return false;
        };
        if (MVA(i + 1) && (IY(i + 1) === false) && INX(i + 2) && (LDA(i + 3) || LDA_ADR(i + 3)) && (listing[i + 4] === "\tsta :STACKORIGIN,x") && ADD_SUB_AL_CL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) {
          listing[i + 1] = "\tlda " + GetString$1(i + 1);
          if (listing[i + 5] === "\tjsr addAL_CL") {
            listing[i + 2] = "\tadd " + pas.System.Copy(listing[i + 3],6,256)}
           else listing[i + 2] = "\tsub " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 3] = "";
          listing[i + 4] = "\tsta :STACKORIGIN,x";
          listing[i + 5] = "\tinx";
          return false;
        };
        if (INX(i) && (IY(i + 1) === false) && MVA(i + 1) && INX(i + 2) && MWY_BP2(i + 3) && LDY_IM(i + 4) && (pas.System.Pos("\tmva (:bp2),y",listing[i + 5]) > 0) && ADD_SUB_AL_CL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 5]) > 0)) {
          tmp = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = listing[i + 3];
          listing[i + 2] = listing[i + 4];
          listing[i + 3] = tmp;
          if (listing[i + 6] === "\tjsr addAL_CL") {
            listing[i + 4] = "\tadd (:bp2),y"}
           else listing[i + 4] = "\tsub (:bp2),y";
          listing[i + 5] = "\tsta :STACKORIGIN,x";
          listing[i + 6] = "\tinx";
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && LDY_IM(i + 2) && LDA_BP2_Y(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN,x") && INX(i + 5) && (IY(i + 6) === false) && MVA(i + 6) && ADD_SUB_AL_CL(i + 7)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) {
          if (listing[i + 7] === "\tjsr addAL_CL") {
            listing[i + 4] = "\tadd " + GetString$1(i + 6)}
           else listing[i + 4] = "\tsub " + GetString$1(i + 6);
          listing[i + 5] = "\tsta :STACKORIGIN,x";
          listing[i + 6] = "\tinx";
          listing[i + 7] = "";
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && LDY_IM(i + 2) && (pas.System.Pos("\tmva (:bp2),y",listing[i + 3]) > 0) && INX(i + 4) && (IY(i + 5) === false) && MVA(i + 5) && ADD_SUB_AL_CL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 5]) > 0)) {
          listing[i + 3] = "\tlda (:bp2),y";
          if (listing[i + 6] === "\tjsr addAL_CL") {
            listing[i + 4] = "\tadd " + GetString$1(i + 5)}
           else listing[i + 4] = "\tsub " + GetString$1(i + 5);
          listing[i + 5] = "\tsta :STACKORIGIN,x";
          listing[i + 6] = "\tinx";
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && LDY_IM(i + 2) && (pas.System.Pos("\tmva (:bp2),y",listing[i + 3]) > 0) && INX(i + 4) && LDY_IM(i + 5) && (pas.System.Pos("\tmva (:bp2),y",listing[i + 6]) > 0) && ADD_SUB_AL_CL(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0)) {
          listing[i + 3] = "\tlda (:bp2),y";
          listing[i + 4] = listing[i + 5];
          if (listing[i + 7] === "\tjsr addAL_CL") {
            listing[i + 5] = "\tadd (:bp2),y"}
           else listing[i + 5] = "\tsub (:bp2),y";
          listing[i + 6] = "\tsta :STACKORIGIN,x";
          listing[i + 7] = "\tinx";
          return false;
        };
        if (INX(i) && LDY_IM(i + 1) && (pas.System.Pos("\tmva (:bp2),y",listing[i + 2]) > 0) && INX(i + 3) && LDY_IM(i + 4) && (pas.System.Pos("\tmva (:bp2),y",listing[i + 5]) > 0) && ADD_SUB_AL_CL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 5]) > 0)) {
          listing[i + 2] = "\tlda (:bp2),y";
          listing[i + 3] = listing[i + 4];
          if (listing[i + 6] === "\tjsr addAL_CL") {
            listing[i + 4] = "\tadd (:bp2),y"}
           else listing[i + 4] = "\tsub (:bp2),y";
          listing[i + 5] = "\tsta :STACKORIGIN,x";
          listing[i + 6] = "\tinx";
          return false;
        };
        if (ADD_SUB_AL_CL(i) && DEX(i + 1) && (pas.System.Pos("\tmva :STACKORIGIN,x",listing[i + 2]) > 0) && DEX(i + 3)) {
          if (listing[i] === "\tjsr addAL_CL") {
            listing[i] = "\tadb :STACKORIGIN-1,x :STACKORIGIN,x " + pas.System.Copy(listing[i + 2],pas.System.Pos(",x",listing[i + 2]) + 3,listing[i + 2].length)}
           else listing[i] = "\tsbb :STACKORIGIN-1,x :STACKORIGIN,x " + pas.System.Copy(listing[i + 2],pas.System.Pos(",x",listing[i + 2]) + 3,listing[i + 2].length);
          listing[i + 2] = "";
          if ((i > 0) && (pas.System.Pos("\tjsr @expand",listing[i - 1]) > 0)) listing[i - 1] = "";
          return false;
        };
        if (ADD_SUB_AL_CL(i) && DEX(i + 1) && (listing[i + 2] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 3) && (LDA(i + 4) === false)) {
          if (listing[i] === "\tjsr addAL_CL") {
            listing[i] = "\tlda :STACKORIGIN-1,x";
            listing[i + 1] = "\tadd :STACKORIGIN,x";
          } else {
            listing[i] = "\tlda :STACKORIGIN-1,x";
            listing[i + 1] = "\tsub :STACKORIGIN,x";
          };
          listing[i + 2] = "\tsta " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 3] = "\tdex";
          return false;
        };
        return Result;
      };
      function opt_STACK_AX_CX(i) {
        var Result = false;
        var p = 0;
        var q = 0;
        var tmp = "";
        Result = true;
        if (MVA_IM(i + 1) && MVA_IM(i + 2) && INX(i + 3) && MVA_IM(i + 4) && MVA_IM(i + 5) && ADD_SUB_AX_CX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 5]) > 0)) {
          p = GetWORD(i + 1,i + 2);
          q = GetWORD(i + 4,i + 5);
          if (listing[i + 6] === "\tjsr addAX_CX") {
            p = p + q}
           else p = p - q;
          listing[i + 1] = "\tmva #$" + pas.SysUtils.IntToHex(p & 0xff,2) + " :STACKORIGIN,x";
          listing[i + 2] = "\tmva #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2) + " :STACKORIGIN+STACKWIDTH,x";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "\tinx";
          return false;
        };
        if (INX(i) && MVA_IM(i + 1) && INX(i + 2) && MVA_IM(i + 3) && MVA_IM(i + 4) && MVA_IM(i + 5) && ADD_SUB_AX_CX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 5]) > 0)) {
          p = GetWORD(i + 1,i + 4);
          q = GetWORD(i + 3,i + 5);
          if (listing[i + 6] === "\tjsr addAX_CX") {
            p = p + q}
           else p = p - q;
          listing[i + 1] = "\tmva #$" + pas.SysUtils.IntToHex(p & 0xff,2) + " :STACKORIGIN,x";
          listing[i + 2] = "\tmva #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2) + " :STACKORIGIN+STACKWIDTH,x";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "\tinx";
          return false;
        };
        if (INX(i) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && DEX(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",listing[i + 5]) > 0)) {
          listing[i + 1] = "\tlda " + GetString$1(i + 1);
          if (listing[i + 6] === "\tjsr addAX_CX") {
            listing[i + 2] = "\tadd " + GetString$1(i + 3)}
           else listing[i + 2] = "\tsub " + GetString$1(i + 3);
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          tmp = GetString$1(i + 4);
          listing[i + 4] = "\tlda " + GetString$1(i + 5);
          if (listing[i + 6] === "\tjsr addAX_CX") {
            listing[i + 5] = "\tadc " + tmp}
           else listing[i + 5] = "\tsbc " + tmp;
          listing[i + 6] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 7] = "";
          return false;
        };
        if (MVA(i) && (MVA_IM(i) === false) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && MVA(i + 4) && ADD_SUB_AX_CX(i + 5) && DEX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 4]) > 0)) {
          tmp = listing[i + 3];
          listing[i] = "\tlda " + GetString$1(i);
          listing[i + 3] = "\tlda " + GetString$1(i + 1);
          listing[i + 2] = "\tsta :STACKORIGIN,x";
          if (listing[i + 5] === "\tjsr addAX_CX") {
            listing[i + 1] = "\tadd " + GetString(tmp);
            listing[i + 4] = "\tadc " + GetString$1(i + 4);
          } else {
            listing[i + 1] = "\tsub " + GetString(tmp);
            listing[i + 4] = "\tsbc " + GetString$1(i + 4);
          };
          listing[i + 5] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 6] = "";
          return false;
        };
        if ((MVA(i) === false) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && MVA(i + 4) && ADD_SUB_AX_CX(i + 5) && DEX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 4]) > 0)) {
          tmp = listing[i + 4];
          listing[i + 4] = "\tlda " + GetString$1(i + 1);
          listing[i + 1] = "\tlda :STACKORIGIN,x";
          if (listing[i + 5] === "\tjsr addAX_CX") {
            listing[i + 2] = "\tadd " + GetString$1(i + 3);
            listing[i + 5] = "\tadc " + GetString(tmp);
          } else {
            listing[i + 2] = "\tsub " + GetString$1(i + 3);
            listing[i + 5] = "\tsbc " + GetString(tmp);
          };
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 6] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && INX(i + 4) && MVA(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && ADD_SUB_AX_CX(i + 9)) if ((pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 8]) > 0)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && INX(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && (DEX(i + 7) === false)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 5]) > 0)) {
          Expand(i + 6,1);
          listing_tmp[0] = "\tinx";
          listing_tmp[1] = "\tinx";
          listing_tmp[2] = "\tlda " + GetString$1(i + 1);
          if (listing[i + 7] === "\tjsr addAX_CX") {
            listing_tmp[3] = "\tadd " + GetString$1(i + 4);
            listing_tmp[6] = "\tadc " + GetString$1(i + 5);
          } else {
            listing_tmp[3] = "\tsub " + GetString$1(i + 4);
            listing_tmp[6] = "\tsbc " + GetString$1(i + 5);
          };
          listing_tmp[4] = "\tsta :STACKORIGIN-1,x";
          listing_tmp[5] = "\tlda " + GetString$1(i + 2);
          listing_tmp[7] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
          for (p = 0; p <= 7; p++) listing[i + p] = listing_tmp[p];
          return false;
        };
        if (INX(i) && MWY(i + 1) && LDY_IM(i + 2) && MVA(i + 3) && MVA(i + 4) && INX(i + 5) && MVA(i + 6) && MVA(i + 7) && ADD_SUB_AX_CX(i + 8) && (DEX(i + 9) === false)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0)) {
          Expand(i + 8,1);
          listing_tmp[0] = "\tinx";
          listing_tmp[1] = "\tinx";
          listing_tmp[2] = listing[i + 1];
          listing_tmp[3] = listing[i + 2];
          listing_tmp[4] = "\tlda " + GetString$1(i + 3);
          if (listing[i + 9] === "\tjsr addAX_CX") {
            listing_tmp[5] = "\tadd " + GetString$1(i + 6);
            listing_tmp[8] = "\tadc " + GetString$1(i + 7);
          } else {
            listing_tmp[5] = "\tsub " + GetString$1(i + 6);
            listing_tmp[8] = "\tsbc " + GetString$1(i + 7);
          };
          listing_tmp[6] = "\tsta :STACKORIGIN-1,x";
          listing_tmp[7] = "\tlda " + GetString$1(i + 4);
          listing_tmp[9] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
          for (p = 0; p <= 9; p++) listing[i + p] = listing_tmp[p];
          return false;
        };
        if (LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && DEX(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 5]) > 0)) {
          listing[i + 3] = listing[i + 2];
          if (listing[i + 6] === "\tjsr addAX_CX") {
            listing[i + 1] = "\tadd " + GetString$1(i + 4);
            listing[i + 4] = "\tadc " + GetString$1(i + 5);
          } else {
            listing[i + 1] = "\tsub " + GetString$1(i + 4);
            listing[i + 4] = "\tsbc " + GetString$1(i + 5);
          };
          listing[i + 2] = "\tsta :STACKORIGIN-1,x";
          listing[i + 5] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
          listing[i + 6] = "";
          return false;
        };
        if (MVA(i) && MVA(i + 1) && ADD_SUB_AX_CX(i + 2) && DEX(i + 3) && (listing[i + 4] === "\tlda :STACKORIGIN,x") && STA(i + 5) && (listing[i + 6] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0)) {
          tmp = listing[i + 1];
          if (listing[i + 2] === "\tjsr addAX_CX") {
            listing[i + 1] = "\tlda :STACKORIGIN-1,x";
            listing[i + 2] = "\tadd " + GetString$1(i);
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 4] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
            listing[i + 5] = "\tadc " + GetString(tmp);
            listing[i + 6] = "\tsta " + pas.System.Copy(listing[i + 7],6,256);
          } else {
            listing[i + 1] = "\tlda :STACKORIGIN-1,x";
            listing[i + 2] = "\tsub " + GetString$1(i);
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 4] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
            listing[i + 5] = "\tsbc " + GetString(tmp);
            listing[i + 6] = "\tsta " + pas.System.Copy(listing[i + 7],6,256);
          };
          listing[i] = "";
          listing[i + 7] = "\tdex";
          return false;
        };
        if (JSR(i) && (listing[i + 1] === "\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x") && (listing[i + 2] === "\tmva #$00 :STACKORIGIN+STACKWIDTH,x") && ADD_SUB_AX_CX(i + 3) && DEX(i + 4) && (listing[i + 5] === "\tlda :STACKORIGIN,x") && STA(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 8)) {
          if (listing[i + 3] === "\tjsr addAX_CX") {
            listing[i + 1] = "\tlda :STACKORIGIN-1,x";
            listing[i + 2] = "\tadd :STACKORIGIN,x";
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 4] = "\tlda #$00";
            listing[i + 5] = "\tadc #$00";
            listing[i + 6] = "\tsta " + pas.System.Copy(listing[i + 8],6,256);
          } else {
            listing[i + 1] = "\tlda :STACKORIGIN-1,x";
            listing[i + 2] = "\tsub :STACKORIGIN,x";
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 4] = "\tlda #$00";
            listing[i + 5] = "\tsbc #$00";
            listing[i + 6] = "\tsta " + pas.System.Copy(listing[i + 8],6,256);
          };
          listing[i + 7] = "\tdex";
          listing[i + 8] = "";
          return false;
        };
        if (JSR(i) && INX(i + 1) && MVA(i + 2) && (listing[i + 3] === "\tmva #$00 :STACKORIGIN+STACKWIDTH,x") && (listing[i + 4] === "\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x") && ADD_SUB_AX_CX(i + 5) && DEX(i + 6) && (listing[i + 7] === "\tlda :STACKORIGIN,x") && STA(i + 8) && (listing[i + 9] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 10)) if (pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0) {
          if (listing[i + 5] === "\tjsr addAX_CX") {
            listing[i + 3] = "\tadd " + GetString$1(i + 2);
            listing[i + 2] = "\tlda :STACKORIGIN-1,x";
            listing[i + 4] = "\tsta " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 5] = "\tlda #$00";
            listing[i + 6] = "\tadc #$00";
            listing[i + 7] = "\tsta " + pas.System.Copy(listing[i + 10],6,256);
          } else {
            listing[i + 3] = "\tsub " + GetString$1(i + 2);
            listing[i + 2] = "\tlda :STACKORIGIN-1,x";
            listing[i + 4] = "\tsta " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 5] = "\tlda #$00";
            listing[i + 6] = "\tsbc #$00";
            listing[i + 7] = "\tsta " + pas.System.Copy(listing[i + 10],6,256);
          };
          listing[i + 8] = "\tdex";
          listing[i + 9] = "";
          listing[i + 10] = "";
          return false;
        };
        if ((MVA(i) === false) && INX(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && DEX(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN,x") && STA(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 5]) > 0)) {
          if (listing[i + 6] === "\tjsr addAX_CX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 2);
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 3);
            listing_tmp[5] = listing[i + 11];
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 2);
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 3);
            listing_tmp[5] = listing[i + 11];
          };
          listing[i + 1] = listing_tmp[0];
          listing[i + 2] = listing_tmp[1];
          listing[i + 3] = listing_tmp[2];
          listing[i + 4] = listing_tmp[3];
          listing[i + 5] = listing_tmp[4];
          listing[i + 6] = listing_tmp[5];
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if ((INX(i) === false) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && ADD_SUB_AX_CX(i + 5) && DEX(i + 6) && (listing[i + 7] === "\tldy :STACKORIGIN-1,x") && (listing[i + 8] === "\tlda :STACKORIGIN,x") && STA_A(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 4]) > 0)) {
          if (listing[i + 5] === "\tjsr addAX_CX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 1);
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 2);
            listing_tmp[5] = listing[i + 11];
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 1);
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 2);
            listing_tmp[5] = listing[i + 11];
          };
          listing[i + 1] = "\tdex";
          listing[i + 2] = "\tldy :STACKORIGIN-1,x";
          listing[i + 3] = listing_tmp[0];
          listing[i + 4] = listing_tmp[1];
          listing[i + 5] = listing_tmp[2];
          listing[i + 6] = listing_tmp[3];
          listing[i + 7] = listing_tmp[4];
          listing[i + 8] = listing_tmp[5];
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if ((INX(i) === false) && LDA_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && MVA(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && ADD_SUB_AX_CX(i + 9) && DEX(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 5]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 8]) > 0)) {
          if (listing[i + 9] === "\tjsr addAX_CX") {
            listing_tmp[0] = listing[i + 1];
            listing_tmp[1] = "\tadd " + GetString$1(i + 5);
            listing_tmp[2] = "\tsta :STACKORIGIN,x";
            listing_tmp[3] = listing[i + 3];
            listing_tmp[4] = "\tadc " + GetString$1(i + 6);
            listing_tmp[5] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          } else {
            listing_tmp[0] = listing[i + 1];
            listing_tmp[1] = "\tsub " + GetString$1(i + 5);
            listing_tmp[2] = "\tsta :STACKORIGIN,x";
            listing_tmp[3] = listing[i + 3];
            listing_tmp[4] = "\tsbc " + GetString$1(i + 6);
            listing_tmp[5] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          };
          listing[i + 1] = "\tdex";
          listing[i + 2] = listing_tmp[0];
          listing[i + 3] = listing_tmp[1];
          listing[i + 4] = listing_tmp[2];
          listing[i + 5] = listing_tmp[3];
          listing[i + 6] = listing_tmp[4];
          listing[i + 7] = listing_tmp[5];
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          return false;
        };
        if (LDA_A(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 5) && (listing[i + 6] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && MVA(i + 9) && MVA(i + 10) && ADD_SUB_AX_CX(i + 11) && DEX(i + 12)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 9]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 10]) > 0)) {
          listing[i + 4] = listing[i + 3];
          if (listing[i + 11] === "\tjsr addAX_CX") {
            listing[i + 2] = "\tadd " + GetString$1(i + 9);
            listing[i + 5] = "\tadc " + GetString$1(i + 10);
          } else {
            listing[i + 2] = "\tsub " + GetString$1(i + 9);
            listing[i + 5] = "\tsbc " + GetString$1(i + 10);
          };
          listing[i + 3] = "\tsta :STACKORIGIN-1,x";
          listing[i + 6] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if (LDA_A(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && LDA_A(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_A(i + 5) && (listing[i + 6] === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_A(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && INX(i + 9) && MVA(i + 10) && MVA(i + 11) && ADD_SUB_AX_CX(i + 12) && DEX(i + 13)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 10]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 11]) > 0)) {
          listing[i + 4] = listing[i + 3];
          if (listing[i + 12] === "\tjsr addAX_CX") {
            listing[i + 2] = "\tadd " + GetString$1(i + 10);
            listing[i + 5] = "\tadc " + GetString$1(i + 11);
          } else {
            listing[i + 2] = "\tsub " + GetString$1(i + 10);
            listing[i + 5] = "\tsbc " + GetString$1(i + 11);
          };
          listing[i + 3] = "\tsta :STACKORIGIN,x";
          listing[i + 6] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          listing[i + 12] = "";
          listing[i + 13] = "";
          return false;
        };
        if (DEX(i + 9) && LDA_A(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 5) && (listing[i + 6] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x")) {
          if (INX(i + 10) && MVA(i + 11) && MVA(i + 12) && ADD_SUB_AX_CX(i + 13) && DEX(i + 14)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 11]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 12]) > 0)) {
            listing[i + 7] = "\tdex";
            if (listing[i + 13] === "\tjsr addAX_CX") {
              listing[i + 8] = listing[i + 1];
              listing[i + 9] = "\tadd " + GetString$1(i + 11);
              listing[i + 10] = "\tsta :STACKORIGIN,x";
              listing[i + 11] = listing[i + 3];
              listing[i + 12] = "\tadc " + GetString$1(i + 12);
              listing[i + 13] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            } else {
              listing[i + 8] = listing[i + 1];
              listing[i + 9] = "\tsub " + GetString$1(i + 11);
              listing[i + 10] = "\tsta :STACKORIGIN,x";
              listing[i + 11] = listing[i + 3];
              listing[i + 12] = "\tsbc " + GetString$1(i + 12);
              listing[i + 13] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            };
            listing[i + 14] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (INX(i + 10) && MVA(i + 11) && MVA(i + 12) && MVA(i + 13) && MVA(i + 14) && ADD_SUB_AX_CX(i + 15) && DEX(i + 16)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 11]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 12]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 13]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 14]) > 0)) {
            listing[i + 7] = "\tdex";
            if (listing[i + 15] === "\tjsr addAX_CX") {
              listing[i + 8] = listing[i + 1];
              listing[i + 9] = "\tadd " + GetString$1(i + 11);
              listing[i + 10] = "\tsta :STACKORIGIN,x";
              listing[i + 11] = listing[i + 3];
              listing[i + 12] = "\tadc " + GetString$1(i + 12);
              listing[i + 13] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            } else {
              listing[i + 8] = listing[i + 1];
              listing[i + 9] = "\tsub " + GetString$1(i + 11);
              listing[i + 10] = "\tsta :STACKORIGIN,x";
              listing[i + 11] = listing[i + 3];
              listing[i + 12] = "\tsbc " + GetString$1(i + 12);
              listing[i + 13] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            };
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (MVA(i + 10) && MVA(i + 11) && ADD_SUB_AX_CX(i + 12) && DEX(i + 13)) if ((pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,x",listing[i + 10]) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,x",listing[i + 11]) > 0)) {
            listing[i + 6] = "\tdex";
            if (listing[i + 12] === "\tjsr addAX_CX") {
              listing[i + 7] = "\tlda :STACKORIGIN-1,x";
              listing[i + 8] = "\tadd " + GetString$1(i + 1);
              listing[i + 9] = "\tsta :STACKORIGIN-1,x";
              listing[i + 10] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
              listing[i + 11] = "\tadc " + GetString$1(i + 3);
              listing[i + 12] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
            } else {
              listing[i + 7] = "\tlda :STACKORIGIN-1,x";
              listing[i + 8] = "\tsub " + GetString$1(i + 1);
              listing[i + 9] = "\tsta :STACKORIGIN-1,x";
              listing[i + 10] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
              listing[i + 11] = "\tsbc " + GetString$1(i + 3);
              listing[i + 12] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
        };
        return Result;
      };
      function opt_STACK_EAX_ECX(i) {
        var Result = false;
        Result = true;
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && (MVA_IM_0(i + 2) === false) && MVA(i + 3) && (MVA_IM_0(i + 3) === false) && INX(i + 4) && MVA(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && ADD_SUB_EAX_ECX(i + 9) && DEX(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN,x") && STA(i + 12) && (listing[i + 13] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 18)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 5]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 8]) > 0)) {
          if (listing[i + 9] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda " + GetString$1(i);
            listing_tmp[1] = "\tadd " + GetString$1(i + 5);
            listing_tmp[2] = listing[i + 12];
            listing_tmp[3] = "\tlda " + GetString$1(i + 1);
            listing_tmp[4] = "\tadc " + GetString$1(i + 6);
            listing_tmp[5] = listing[i + 14];
            listing_tmp[6] = "\tlda " + GetString$1(i + 2);
            listing_tmp[7] = "\tadc " + GetString$1(i + 7);
            listing_tmp[8] = listing[i + 16];
            listing_tmp[9] = "\tlda " + GetString$1(i + 3);
            listing_tmp[10] = "\tadc " + GetString$1(i + 8);
            listing_tmp[11] = listing[i + 18];
          } else {
            listing_tmp[0] = "\tlda " + GetString$1(i);
            listing_tmp[1] = "\tsub " + GetString$1(i + 5);
            listing_tmp[2] = listing[i + 12];
            listing_tmp[3] = "\tlda " + GetString$1(i + 1);
            listing_tmp[4] = "\tsbc " + GetString$1(i + 6);
            listing_tmp[5] = listing[i + 14];
            listing_tmp[6] = "\tlda " + GetString$1(i + 2);
            listing_tmp[7] = "\tsbc " + GetString$1(i + 7);
            listing_tmp[8] = listing[i + 16];
            listing_tmp[9] = "\tlda " + GetString$1(i + 3);
            listing_tmp[10] = "\tsbc " + GetString$1(i + 8);
            listing_tmp[11] = listing[i + 18];
          };
          listing[i] = listing_tmp[0];
          listing[i + 1] = listing_tmp[1];
          listing[i + 2] = listing_tmp[2];
          listing[i + 3] = listing_tmp[3];
          listing[i + 4] = listing_tmp[4];
          listing[i + 5] = listing_tmp[5];
          listing[i + 6] = listing_tmp[6];
          listing[i + 7] = listing_tmp[7];
          listing[i + 8] = listing_tmp[8];
          listing[i + 9] = listing_tmp[9];
          listing[i + 10] = listing_tmp[10];
          listing[i + 11] = listing_tmp[11];
          listing[i + 12] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          return false;
        };
        if (LDA_A(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (listing[i + 7] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && DEX(i + 8) && ADD_SUB_EAX_ECX(i + 9) && DEX(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN,x") && STA_A(i + 12) && (listing[i + 13] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_A(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_A(i + 18)) {
          if (listing[i + 9] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing_tmp[2] = listing[i + 12];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + pas.System.Copy(listing[i + 2],6,256);
            listing_tmp[5] = listing[i + 14];
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing_tmp[8] = listing[i + 16];
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tadc " + pas.System.Copy(listing[i + 6],6,256);
            listing_tmp[11] = listing[i + 18];
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing_tmp[2] = listing[i + 12];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing_tmp[5] = listing[i + 14];
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tsbc " + pas.System.Copy(listing[i + 4],6,256);
            listing_tmp[8] = listing[i + 16];
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tsbc " + pas.System.Copy(listing[i + 6],6,256);
            listing_tmp[11] = listing[i + 18];
          };
          listing[i] = "\tdex";
          listing[i + 1] = "\tdex";
          listing[i + 2] = listing_tmp[0];
          listing[i + 3] = listing_tmp[1];
          listing[i + 4] = listing_tmp[2];
          listing[i + 5] = listing_tmp[3];
          listing[i + 6] = listing_tmp[4];
          listing[i + 7] = listing_tmp[5];
          listing[i + 8] = listing_tmp[6];
          listing[i + 9] = listing_tmp[7];
          listing[i + 10] = listing_tmp[8];
          listing[i + 11] = listing_tmp[9];
          listing[i + 12] = listing_tmp[10];
          listing[i + 13] = listing_tmp[11];
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          return false;
        };
        if ((MVA(i) === false) && INX(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_EAX_ECX(i + 6) && DEX(i + 7) && (listing[i + 8] === "\tlda :STACKORIGIN,x") && STA(i + 9) && (listing[i + 10] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 11) && (listing[i + 12] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 13) && (listing[i + 14] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 15)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 3]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 4]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 5]) > 0)) {
          if (listing[i + 6] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 2);
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 3);
            listing_tmp[5] = listing[i + 11];
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tadc " + GetString$1(i + 4);
            listing_tmp[8] = listing[i + 13];
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tadc " + GetString$1(i + 5);
            listing_tmp[11] = listing[i + 15];
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 2);
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 3);
            listing_tmp[5] = listing[i + 11];
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tsbc " + GetString$1(i + 4);
            listing_tmp[8] = listing[i + 13];
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tsbc " + GetString$1(i + 5);
            listing_tmp[11] = listing[i + 15];
          };
          listing[i + 1] = listing_tmp[0];
          listing[i + 2] = listing_tmp[1];
          listing[i + 3] = listing_tmp[2];
          listing[i + 4] = listing_tmp[3];
          listing[i + 5] = listing_tmp[4];
          listing[i + 6] = listing_tmp[5];
          listing[i + 7] = listing_tmp[6];
          listing[i + 8] = listing_tmp[7];
          listing[i + 9] = listing_tmp[8];
          listing[i + 10] = listing_tmp[9];
          listing[i + 11] = listing_tmp[10];
          listing[i + 12] = listing_tmp[11];
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          return false;
        };
        if (LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (listing[i + 7] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && MVA(i + 8) && MVA(i + 9) && MVA(i + 10) && MVA(i + 11) && ADD_SUB_EAX_ECX(i + 12) && (DEX(i + 13) === false)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 8]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 9]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 10]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 11]) > 0)) {
          if (listing[i + 12] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = "\tadd " + GetString$1(i + 8);
            listing_tmp[2] = "\tsta :STACKORIGIN-1,x";
            listing_tmp[3] = listing[i + 2];
            listing_tmp[4] = "\tadc " + GetString$1(i + 9);
            listing_tmp[5] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[6] = listing[i + 4];
            listing_tmp[7] = "\tadc " + GetString$1(i + 10);
            listing_tmp[8] = "\tsta :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[9] = listing[i + 6];
            listing_tmp[10] = "\tadc " + GetString$1(i + 11);
            listing_tmp[11] = "\tsta :STACKORIGIN-1+STACKWIDTH*3,x";
          } else {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = "\tsub " + GetString$1(i + 8);
            listing_tmp[2] = "\tsta :STACKORIGIN-1,x";
            listing_tmp[3] = listing[i + 2];
            listing_tmp[4] = "\tsbc " + GetString$1(i + 9);
            listing_tmp[5] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[6] = listing[i + 4];
            listing_tmp[7] = "\tsbc " + GetString$1(i + 10);
            listing_tmp[8] = "\tsta :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[9] = listing[i + 6];
            listing_tmp[10] = "\tsbc " + GetString$1(i + 11);
            listing_tmp[11] = "\tsta :STACKORIGIN-1+STACKWIDTH*3,x";
          };
          listing[i] = listing_tmp[0];
          listing[i + 1] = listing_tmp[1];
          listing[i + 2] = listing_tmp[2];
          listing[i + 3] = listing_tmp[3];
          listing[i + 4] = listing_tmp[4];
          listing[i + 5] = listing_tmp[5];
          listing[i + 6] = listing_tmp[6];
          listing[i + 7] = listing_tmp[7];
          listing[i + 8] = listing_tmp[8];
          listing[i + 9] = listing_tmp[9];
          listing[i + 10] = listing_tmp[10];
          listing[i + 11] = listing_tmp[11];
          listing[i + 12] = "";
          return false;
        };
        if (DEX(i + 13) && LDA_VAL(i) && (listing[i + 1] === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (listing[i + 3] === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (listing[i + 5] === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (listing[i + 7] === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && MVA(i + 8) && MVA(i + 9) && MVA(i + 10) && MVA(i + 11) && ADD_SUB_EAX_ECX(i + 12) && (listing[i + 14] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 15) && (listing[i + 16] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 17) && (listing[i + 18] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 19) && (listing[i + 20] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 21)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 8]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 9]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",listing[i + 10]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",listing[i + 11]) > 0)) {
          if (listing[i + 12] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = "\tadd " + GetString$1(i + 8);
            listing_tmp[2] = listing[i + 15];
            listing_tmp[3] = listing[i + 2];
            listing_tmp[4] = "\tadc " + GetString$1(i + 9);
            listing_tmp[5] = listing[i + 17];
            listing_tmp[6] = listing[i + 4];
            listing_tmp[7] = "\tadc " + GetString$1(i + 10);
            listing_tmp[8] = listing[i + 19];
            listing_tmp[9] = listing[i + 6];
            listing_tmp[10] = "\tadc " + GetString$1(i + 11);
            listing_tmp[11] = listing[i + 21];
          } else {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = "\tsub " + GetString$1(i + 8);
            listing_tmp[2] = listing[i + 15];
            listing_tmp[3] = listing[i + 2];
            listing_tmp[4] = "\tsbc " + GetString$1(i + 9);
            listing_tmp[5] = listing[i + 17];
            listing_tmp[6] = listing[i + 4];
            listing_tmp[7] = "\tsbc " + GetString$1(i + 10);
            listing_tmp[8] = listing[i + 19];
            listing_tmp[9] = listing[i + 6];
            listing_tmp[10] = "\tsbc " + GetString$1(i + 11);
            listing_tmp[11] = listing[i + 21];
          };
          listing[i] = "\tdex";
          listing[i + 1] = listing_tmp[0];
          listing[i + 2] = listing_tmp[1];
          listing[i + 3] = listing_tmp[2];
          listing[i + 4] = listing_tmp[3];
          listing[i + 5] = listing_tmp[4];
          listing[i + 6] = listing_tmp[5];
          listing[i + 7] = listing_tmp[6];
          listing[i + 8] = listing_tmp[7];
          listing[i + 9] = listing_tmp[8];
          listing[i + 10] = listing_tmp[9];
          listing[i + 11] = listing_tmp[10];
          listing[i + 12] = listing_tmp[11];
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          listing[i + 19] = "";
          listing[i + 20] = "";
          listing[i + 21] = "";
          return false;
        };
        if (TAY(i) && LDA_VAL(i + 1) && (listing[i + 2] === "\tsta :STACKORIGIN,x") && LDA_A(i + 3) && (listing[i + 4] === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_A(i + 5) && (listing[i + 6] === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_A(i + 7) && (listing[i + 8] === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && ADD_SUB_EAX_ECX(i + 9) && DEX(i + 10) && (listing[i + 11] === "\tlda :STACKORIGIN,x") && STA_VAL(i + 12) && (listing[i + 13] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 14) && (listing[i + 15] === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 16) && (listing[i + 17] === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 18)) {
          if (listing[i + 9] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda :STACKORIGIN-1,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 1);
            listing_tmp[2] = "\tsta " + GetString$1(i + 12);
            listing_tmp[3] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 3);
            listing_tmp[5] = "\tsta " + GetString$1(i + 14);
            listing_tmp[6] = "\tlda :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[7] = "\tadc " + GetString$1(i + 5);
            listing_tmp[8] = "\tsta " + GetString$1(i + 16);
            listing_tmp[9] = "\tlda :STACKORIGIN-1+STACKWIDTH*3,x";
            listing_tmp[10] = "\tadc " + GetString$1(i + 7);
            listing_tmp[11] = "\tsta " + GetString$1(i + 18);
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN-1,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 1);
            listing_tmp[2] = "\tsta " + GetString$1(i + 12);
            listing_tmp[3] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 3);
            listing_tmp[5] = "\tsta " + GetString$1(i + 14);
            listing_tmp[6] = "\tlda :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[7] = "\tsbc " + GetString$1(i + 5);
            listing_tmp[8] = "\tsta " + GetString$1(i + 16);
            listing_tmp[9] = "\tlda :STACKORIGIN-1+STACKWIDTH*3,x";
            listing_tmp[10] = "\tsbc " + GetString$1(i + 7);
            listing_tmp[11] = "\tsta " + GetString$1(i + 18);
          };
          listing[i + 1] = listing_tmp[0];
          listing[i + 2] = listing_tmp[1];
          listing[i + 3] = listing_tmp[2];
          listing[i + 4] = listing_tmp[3];
          listing[i + 5] = listing_tmp[4];
          listing[i + 6] = listing_tmp[5];
          listing[i + 7] = listing_tmp[6];
          listing[i + 8] = listing_tmp[7];
          listing[i + 9] = listing_tmp[8];
          listing[i + 10] = listing_tmp[9];
          listing[i + 11] = listing_tmp[10];
          listing[i + 12] = listing_tmp[11];
          listing[i + 13] = "\tdex";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && (listing[i + 3] === "\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x") && (listing[i + 4] === "\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x") && INX(i + 5) && MVA(i + 6) && MVA(i + 7) && (listing[i + 8] === "\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x") && (listing[i + 9] === "\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x") && ADD_SUB_EAX_ECX(i + 10) && DEX(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",listing[i + 1]) > 0) && (pas.System.Pos(":STACKORIGIN,x",listing[i + 6]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 2]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",listing[i + 7]) > 0)) {
          if (listing[i + 10] === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tinx";
            listing_tmp[1] = "\tldy #$00";
            listing_tmp[2] = "\tsty :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[3] = "\tlda " + GetString$1(i + 1);
            listing_tmp[4] = "\tadd " + GetString$1(i + 6);
            listing_tmp[5] = "\tsta :STACKORIGIN,x";
            listing_tmp[6] = "\tlda " + GetString$1(i + 2);
            listing_tmp[7] = "\tadc " + GetString$1(i + 7);
            listing_tmp[8] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[9] = "\tscc";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = "\tsty :STACKORIGIN+STACKWIDTH*2,x";
          } else {
            listing_tmp[0] = "\tinx";
            listing_tmp[1] = "\tldy #$00";
            listing_tmp[2] = "\tlda " + GetString$1(i + 1);
            listing_tmp[3] = "\tsub " + GetString$1(i + 6);
            listing_tmp[4] = "\tsta :STACKORIGIN,x";
            listing_tmp[5] = "\tlda " + GetString$1(i + 2);
            listing_tmp[6] = "\tsbc " + GetString$1(i + 7);
            listing_tmp[7] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[8] = "\tscs";
            listing_tmp[9] = "\tdey";
            listing_tmp[10] = "\tsty :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[11] = "\tsty :STACKORIGIN+STACKWIDTH*3,x";
          };
          listing[i] = listing_tmp[0];
          listing[i + 1] = listing_tmp[1];
          listing[i + 2] = listing_tmp[2];
          listing[i + 3] = listing_tmp[3];
          listing[i + 4] = listing_tmp[4];
          listing[i + 5] = listing_tmp[5];
          listing[i + 6] = listing_tmp[6];
          listing[i + 7] = listing_tmp[7];
          listing[i + 8] = listing_tmp[8];
          listing[i + 9] = listing_tmp[9];
          listing[i + 10] = listing_tmp[10];
          listing[i + 11] = listing_tmp[11];
          return false;
        };
        return Result;
      };
      function opt_STACK_PRINT(i) {
        var Result = false;
        var p = 0;
        var tmp = "";
        Result = true;
        if ((listing[i + 2] === "\tjsr @printPCHAR") && LDA_IM(i) && LDY_IM(i + 1)) {
          p = GetWORD(i + 0,i + 1);
          listing[i + 2] = "\t@printPCHAR #$" + pas.SysUtils.IntToHex(p,4);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 2] === "\tjsr @printPCHAR") && LDA_VAL(i) && LDY(i + 1)) {
          tmp = pas.System.Copy(listing[i],6,256);
          if ((tmp + "+1") === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i + 2] = "\t@printPCHAR " + tmp;
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
        };
        if ((listing[i + 2] === "\tjsr @printSTRING") && LDA_IM(i) && LDY_IM(i + 1)) {
          p = GetWORD(i + 0,i + 1);
          listing[i + 2] = "\t@printSTRING #$" + pas.SysUtils.IntToHex(p,4);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 2] === "\tjsr @printSTRING") && LDA_VAL(i) && LDY(i + 1)) {
          tmp = pas.System.Copy(listing[i],6,256);
          if ((tmp + "+1") === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i + 2] = "\t@printSTRING " + tmp;
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
        };
        if (((listing[i + 6] === "\tjsr @printSTRING") || (listing[i + 6] === "\t@printPCHAR")) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_STACK(i + 4) && LDY_STACK(i + 5)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
          listing[i + 4] = listing[i];
          listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 2],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          if (DEX(i + 7)) for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 7] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if (((listing[i + 4] === "\tjsr @printSTRING") || (listing[i + 4] === "\t@printPCHAR")) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && LDY_STACK(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 3] = "\tldy " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          if (DEX(i + 5)) for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 5] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((listing[i + 1] === "\t@printCHAR") && MVA_IM(i)) if (pas.System.Pos(" :STACKORIGIN,x",listing[i]) > 0) {
          listing[i + 1] = "\t@print " + GetString$1(i);
          listing[i] = "";
          return false;
        };
        if ((listing[i + 1] === "\t@printCHAR") && (pas.System.Pos("\tmva adr.",listing[i]) > 0) && IY(i)) if (pas.System.Pos(" :STACKORIGIN,x",listing[i]) > 0) {
          listing[i] = "\tlda " + GetString$1(i);
          listing[i + 1] = "\t@print @";
          if (DEX(i + 2)) for (var $l2 = i - 1; $l2 >= 0; $l2--) {
            p = $l2;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 2] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if (INX(i) && (pas.System.Pos("\t@print",listing[i + 1]) > 0)) {
          p = i + 1;
          while (pas.System.Pos("\t@print",listing[p]) > 0) p += 1;
          if (DEX(p)) {
            listing[i] = "";
            listing[p] = "";
            return false;
          };
        };
        if ((listing[i + 2] === "\t@printCHAR") && ADD_SUB_AL_CL(i) && DEX(i + 1) && DEX(i + 3)) {
          if (listing[i] === "\tjsr addAL_CL") {
            listing[i] = "\tadb :STACKORIGIN-1,x :STACKORIGIN,x"}
           else listing[i] = "\tsbb :STACKORIGIN-1,x :STACKORIGIN,x";
          return false;
        };
        if ((listing[i + 1] === "\tjsr @printBYTE") && STA_STACK(i)) {
          listing[i] = "";
          listing[i + 1] = "\tjsr @printBYTE._a";
          if (DEX(i + 2)) for (var $l3 = i - 1; $l3 >= 0; $l3--) {
            p = $l3;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 2] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((listing[i + 1] === "\tjsr @printBYTE") && MVA(i) && (IY(i) === false)) if (pas.System.Pos(" :STACKORIGIN,x",listing[i]) > 0) {
          listing[i] = "\tlda " + GetString$1(i);
          listing[i + 1] = "\tjsr @printBYTE._a";
          if (DEX(i + 2)) for (var $l4 = i - 1; $l4 >= 0; $l4--) {
            p = $l4;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 2] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((listing[i + 2] === "\tjsr @printWORD") && MVA(i) && (IY(i) === false) && MVA(i + 1) && (IY(i + 1) === false)) if ((pas.System.Pos(" :STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0)) {
          listing[i] = "\tlda " + GetString$1(i);
          listing[i + 1] = "\tldy " + GetString$1(i + 1);
          listing[i + 2] = "\tjsr @printWORD._ay";
          if (DEX(i + 3)) for (var $l5 = i - 1; $l5 >= 0; $l5--) {
            p = $l5;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 3] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((listing[i + 4] === "\tjsr @printCARD") && MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3)) if ((pas.System.Pos(" :STACKORIGIN,x",listing[i]) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH,x",listing[i + 1]) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH*2,x",listing[i + 2]) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH*3,x",listing[i + 3]) > 0)) {
          listing[i] = "\tmva " + GetString$1(i) + " :dx";
          listing[i + 1] = "\tmva " + GetString$1(i + 1) + " :dx+1";
          listing[i + 2] = "\tmva " + GetString$1(i + 2) + " :dx+2";
          listing[i + 3] = "\tmva " + GetString$1(i + 3) + " :dx+3";
          listing[i + 4] = "\t@printVALUE";
          if (DEX(i + 5)) for (var $l6 = i - 1; $l6 >= 0; $l6--) {
            p = $l6;
            if (JSR(p)) {
              break}
             else if (INX(p)) {
              listing[i + 5] = "";
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        return Result;
      };
      function opt_BRANCH(i) {
        var Result = false;
        var p = 0;
        Result = true;
        if (LDA(i) && (listing[i + 1] === "\tcmp #$80") && BCS_A(i + 2) && DEY(i + 3)) {
          listing[i + 1] = "\tbmi @+";
          listing[i + 2] = "";
          return false;
        };
        if (LDA(i) && (listing[i + 1] === "\tcmp #$80") && BCC_A(i + 2) && DEY(i + 3)) {
          listing[i + 1] = "\tbpl @+";
          listing[i + 2] = "";
          return false;
        };
        if (LDA(i) && (listing[i + 1] === "\tcmp #$7F") && SEQ(i + 2) && BCS_A(i + 3) && DEY(i + 4)) {
          listing[i + 1] = "\tbmi @+";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (LDA(i) && (listing[i + 1] === "\tcmp #$7F") && BCC_A(i + 2) && BEQ(i + 3) && DEY(i + 4)) {
          listing[i + 1] = "\tbpl @+";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (LDA(i) && (listing[i + 1] === "\tcmp #$7F") && (listing[i + 2] === "\tbcc *+7") && (listing[i + 3] === "\tbeq *+5")) {
          listing[i + 1] = "\tbpl *+5";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((JEQ(i + 5) || JNE(i + 5) || BEQ(i + 5) || BNE(i + 5)) && (SKIP(i + 6) === false) && (DEY(i + 6) === false) && (SKIP(i - 1) === false) && LDA_A(i) && (LDA_BP2_Y(i) === false) && CMP_IM_0(i + 1) && (BEQ(i + 2) || BNE(i + 2)) && LDA_A(i + 3) && LAB_A(i + 4)) {
          listing[i + 1] = "";
          return false;
        };
        if ((JEQ(i + 3) || JNE(i + 3) || BEQ(i + 3) || BNE(i + 3)) && (SKIP(i + 4) === false) && (DEY(i + 4) === false) && (SKIP(i - 1) === false) && LDA_A(i) && (LDA_BP2_Y(i) === false) && CMP_IM_0(i + 1) && LAB_A(i + 2)) {
          listing[i + 1] = "";
          return false;
        };
        if (LDA_IM_0(i) && CMP_IM_0(i + 1) && BNE(i + 2) && (listing[i + 2] !== "\tbne L1") && (listing[i + 5] !== "\tbne L1")) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (CMP_IM_0(i) && JCC(i + 1) && (JEQ(i + 2) || JNE(i + 2))) {
          listing[i + 1] = "";
          return false;
        };
        if (LDA(i) && AND_ORA_EOR(i + 1) && BNE(i + 2) && LDA_IM_0(i + 3) && LAB_A(i + 4) && (BEQ(i + 5) || JEQ(i + 5))) {
          listing[i + 3] = "";
          if (SKIP(i - 1) === false) {
            listing[i + 2] = "";
            listing[i + 4] = "";
          };
          return false;
        };
        if ((listing[i] === "\tand #$80") && (JEQ(i + 1) || JNE(i + 1))) {
          listing[i] = "";
          if (JEQ(i + 1)) {
            listing[i + 1] = "\tjpl " + pas.System.Copy(listing[i + 1],6,256)}
           else listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && (listing[i + 1] === "\tand #$80") && LDY_1(i + 2) && ORA_IM_0(i + 3) && SNE(i + 4) && DEY(i + 5) && TYA(i + 6) && JEQ(i + 7) && (SKIP(i + 8) === false)) {
          listing[i + 1] = "\tjpl " + pas.System.Copy(listing[i + 7],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && (listing[i + 1] === "\tand #$80") && (listing[i + 2] === "\tcmp #$80") && BNE(i + 3) && LDA_IM_0(i + 4) && CMP_IM_0(i + 5) && LAB_A(i + 6) && (JEQ(i + 7) || JNE(i + 7))) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          if (JEQ(i + 7)) {
            listing[i + 7] = "\tjmi " + pas.System.Copy(listing[i + 7],6,256)}
           else listing[i + 7] = "\tjpl " + pas.System.Copy(listing[i + 7],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && (listing[i + 1] === "\tand #$80") && (listing[i + 2] === "\tcmp #$00") && BNE(i + 3) && LDA_IM_0(i + 4) && CMP_IM_0(i + 5) && LAB_A(i + 6) && (JEQ(i + 7) || JNE(i + 7))) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          if (JEQ(i + 7)) {
            listing[i + 7] = "\tjpl " + pas.System.Copy(listing[i + 7],6,256)}
           else listing[i + 7] = "\tjmi " + pas.System.Copy(listing[i + 7],6,256);
          return false;
        };
        if ((listing[i] === "\tcmp #$80") && (JCC(i + 1) || JCS(i + 1))) {
          listing[i] = "";
          if (JCC(i + 1)) {
            listing[i + 1] = "\tjpl " + pas.System.Copy(listing[i + 1],6,256)}
           else listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if (BNE_A(i) && LDA_A(i + 1) && CMP_IM_0(i + 2) && LAB_A(i + 3) && JCS(i + 4) && (SKIP(i + 5) === false)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((ENDL(i - 1) === false) && SMI(i) && BNE_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i] = "\tjmi " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i] = "\tjmi " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          listing[i] = "\tsmi";
          listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l2 = i - 1; $l2 >= 0; $l2--) {
            p = $l2;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l3 = i - 1; $l3 >= 0; $l3--) {
            p = $l3;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BMI_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i + 1] = "\tjpl " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l4 = i - 1; $l4 >= 0; $l4--) {
            p = $l4;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && ORA(i + 3) && ORA(i + 4) && SEQ(i + 5) && DEY(i + 6) && LAB_A(i + 7) && TYA(i + 8) && JEQ(i + 9) && (SKIP(i + 10) === false)) {
          listing[i + 5] = "\tjne " + pas.System.Copy(listing[i + 9],6,256);
          listing[i + 6] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          for (var $l5 = i - 1; $l5 >= 0; $l5--) {
            p = $l5;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && ORA(i + 3) && ORA(i + 4) && SNE(i + 5) && LAB_A(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JNE(i + 10) && (SKIP(i + 11) === false)) {
          listing[i + 5] = listing[i + 10];
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          for (var $l6 = i - 1; $l6 >= 0; $l6--) {
            p = $l6;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && ORA(i + 3) && ORA(i + 4) && SNE(i + 5) && LAB_A(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JEQ(i + 10) && (SKIP(i + 11) === false)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 10],6,256);
          listing[i + 5] = listing[i + 10];
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          for (var $l7 = i - 1; $l7 >= 0; $l7--) {
            p = $l7;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && SEQ(i + 3) && DEY(i + 4) && LAB_A(i + 5) && TYA(i + 6) && JEQ(i + 7) && (SKIP(i + 8) === false)) {
          listing[i + 3] = "\tjne " + pas.System.Copy(listing[i + 7],6,256);
          listing[i + 4] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          for (var $l8 = i - 1; $l8 >= 0; $l8--) {
            p = $l8;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && (JEQ(i + 5) || JNE(i + 5))) {
          if (JEQ(i + 5)) {
            listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 5],6,256)}
           else listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l9 = i - 1; $l9 >= 0; $l9--) {
            p = $l9;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BNE(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && (JEQ(i + 5) || JNE(i + 5))) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          for (var $l10 = i - 1; $l10 >= 0; $l10--) {
            p = $l10;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i) === false) && BMI_A(i + 1) && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && JNE(i + 6)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 2] = "\tjeq " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          for (var $l11 = i - 1; $l11 >= 0; $l11--) {
            p = $l11;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i) === false) && BMI_A(i + 1) && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && JEQ(i + 6)) {
          listing[i + 2] = "\tjne " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 3] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          for (var $l12 = i - 1; $l12 >= 0; $l12--) {
            p = $l12;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BMI_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l13 = i - 1; $l13 >= 0; $l13--) {
            p = $l13;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          listing[i + 1] = "\tjpl " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l14 = i - 1; $l14 >= 0; $l14--) {
            p = $l14;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l15 = i - 1; $l15 >= 0; $l15--) {
            p = $l15;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BCS_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l16 = i - 1; $l16 >= 0; $l16--) {
            p = $l16;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BCS_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          listing[i] = "\tbeq @+";
          listing[i + 1] = "\tjcs " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l17 = i - 1; $l17 >= 0; $l17--) {
            p = $l17;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCC_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JNE(i + 4)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          for (var $l18 = i - 1; $l18 >= 0; $l18--) {
            p = $l18;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCC_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JEQ(i + 4)) {
          listing[i] = "\tjcs " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          for (var $l19 = i - 1; $l19 >= 0; $l19--) {
            p = $l19;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCS_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JEQ(i + 4)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          for (var $l20 = i - 1; $l20 >= 0; $l20--) {
            p = $l20;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCS_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JNE(i + 4)) {
          listing[i] = "\tjcs " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          for (var $l21 = i - 1; $l21 >= 0; $l21--) {
            p = $l21;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && BCC_A(i) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l22 = i - 1; $l22 >= 0; $l22--) {
            p = $l22;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && BCC_A(i) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i] = "\tbcc @+";
          listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "@";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l23 = i - 1; $l23 >= 0; $l23--) {
            p = $l23;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && CMP(i) && BEQ(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && CMP(i) && BCC_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          listing[i + 1] = "\tjcs " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "";
          return false;
        };
        if (BMI_A(i + 1) && BEQ(i + 2) && JMP(i + 3) && LAB_A(i + 4)) {
          listing[i + 2] = "\tjne " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 3] = "";
          return false;
        };
        if (SEQ(i + 1) && BPL_A(i + 2) && JMP(i + 3) && LAB_A(i + 4)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 2] = "\tjeq " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 3] = "";
          return false;
        };
        if ((SKIP(i) === false) && BPL_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "";
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          listing[i + 1] = "\tjpl " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "";
          return false;
        };
        if (BCC_A(i) && BEQ(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && BNE(i) && JMP(i + 1) && LAB_A(i + 2)) {
          listing[i] = "\tjeq " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if (SEQ(i) && BCS_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && BCS_A(i) && JMP(i + 1) && LAB_A(i + 2)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && BCC_A(i) && JMP(i + 1) && LAB_A(i + 2)) {
          listing[i] = "\tjcs " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && BEQ(i) && JMP(i + 1) && LAB_A(i + 2)) {
          listing[i] = "\tjne " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && (listing[i] === "\tbne *+5") && JMP(i + 1)) {
          listing[i] = "";
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && (listing[i] === "\tbeq *+5") && JMP(i + 1)) {
          listing[i] = "";
          listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && (listing[i] === "\tbcs *+5") && JMP(i + 1)) {
          listing[i] = "";
          listing[i + 1] = "\tjcc " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && SEQ(i) && JMP(i + 1)) {
          listing[i] = "\tjne " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if (CMP_IM_0(i) && (JEQ(i + 1) || JNE(i + 1))) {
          listing[i] = "";
          return false;
        };
        if (LDA_IM_0(i) && JEQ(i + 1)) {
          listing[i] = "";
          listing[i + 1] = "\tjmp " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if (LDA_IM(i) && (LDA_IM_0(i) === false) && JNE(i + 1)) {
          listing[i] = "";
          listing[i + 1] = "\tjmp " + pas.System.Copy(listing[i + 1],6,256);
          return false;
        };
        if (LDA(i) && (LDA_IM(i) === false) && CMP(i + 1) && (CMP_IM(i + 1) === false) && (JNE(i + 2) || BNE(i + 2)) && (SKIP(i + 3) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LDA(i) && CMP(i + 1) && (JEQ(i + 2) || JCS(i + 2)) && (SKIP(i + 3) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "\tjmp " + pas.System.Copy(listing[i + 2],6,256);
          return false;
        };
        if (LDA(i) && CMP(i + 1) && JCC(i + 2) && JEQ(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "\tjmp " + pas.System.Copy(listing[i + 3],6,256);
          return false;
        };
        if (LDY_1(i) && DEY(i + 1) && TYA(i + 2) && (JNE(i + 3) || BNE(i + 3))) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (JCC(i) && JMP(i + 1) && (listing[i + 2] === pas.System.Copy(listing[i],6,256))) {
          listing[i] = "\tjcs " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if (JCS(i) && JMP(i + 1) && (listing[i + 2] === pas.System.Copy(listing[i],6,256))) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if (JNE(i) && JMP(i + 1) && (listing[i + 2] === pas.System.Copy(listing[i],6,256))) {
          listing[i] = "\tjeq " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if (JEQ(i) && JMP(i + 1) && (listing[i + 2] === pas.System.Copy(listing[i],6,256))) {
          listing[i] = "\tjne " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i] === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",listing[i + 1]) > 0) && JMP(i + 2) && LAB_L(i + 3)) if (pas.System.Pos(listing[i + 3],listing[i + 1]) > 0) {
          listing[i] = listing[i + 2];
          listing[i + 1] = "@";
          listing[i + 2] = "";
          return false;
        };
        if (BCC(i) && BEQ(i + 1) && (listing[i + 2] === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",listing[i + 3]) > 0) && (JMP(i + 4) === false)) {
          listing[i] = "\tjcc " + pas.System.Copy(listing[i + 3],7,256);
          listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 3],7,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && (BEQ(i) || BNE(i)) && (listing[i + 1] === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",listing[i + 2]) > 0) && (JMP(i + 3) === false)) {
          if (BEQ(i)) {
            listing[i] = "\tjeq " + pas.System.Copy(listing[i + 2],7,256)}
           else listing[i] = "\tjne " + pas.System.Copy(listing[i + 2],7,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && (BCS_A(i) || BCC_A(i)) && (listing[i + 1] === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",listing[i + 2]) > 0) && (JMP(i + 3) === false)) {
          if (BCS_A(i)) {
            listing[i] = "\tjcs " + pas.System.Copy(listing[i + 2],7,256)}
           else listing[i] = "\tjcc " + pas.System.Copy(listing[i + 2],7,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && (BPL_A(i) || BMI(i)) && (listing[i + 1] === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",listing[i + 2]) > 0) && (JMP(i + 3) === false)) {
          if (BPL_A(i)) {
            listing[i] = "\tjpl " + pas.System.Copy(listing[i + 2],7,256)}
           else listing[i] = "\tjmi " + pas.System.Copy(listing[i + 2],7,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LDY_1(i) && (pas.System.Pos("\tjne l_",listing[i + 1]) > 0)) {
          listing[i] = "\tjmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          return false;
        };
        return Result;
      };
      function opt_CMP_BP2(i) {
        var Result = false;
        var p = 0;
        Result = true;
        if (MWY_BP2(i) && LDY_IM_0(i + 1) && LDA_BP2_Y(i + 2) && CMP(i + 3)) {
          listing[i + 1] = "\tldy " + GetString$1(i);
          listing[i] = "\tmvy " + GetString$1(i) + "+1 :bp+1";
          listing[i + 2] = "\tlda (:bp),y";
          return false;
        };
        if (LAB_A(i + 21) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && CMP(i + 11) && BNE_A(i + 12) && LDA_STACK(i + 13) && CMP(i + 14) && BNE_A(i + 15) && LDA_STACK(i + 16) && CMP(i + 17) && BNE_A(i + 18) && LDA_STACK(i + 19) && CMP(i + 20)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
          if (pas.System.Pos("\tldy #$",listing[i]) === 1) {
            p = GetBYTE(i) + 3;
            listing[i] = "\tldy #$" + pas.SysUtils.IntToHex(p,2);
          } else listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256) + "+$03";
          listing[i + 1] = "\tlda (:bp2),y";
          listing[i + 2] = listing[i + 11];
          listing[i + 3] = "\tbne @+";
          listing[i + 4] = "\tdey";
          listing[i + 5] = "\tlda (:bp2),y";
          listing[i + 6] = listing[i + 14];
          listing[i + 7] = "\tbne @+";
          listing[i + 8] = "\tdey";
          listing[i + 9] = "\tlda (:bp2),y";
          listing[i + 10] = listing[i + 17];
          listing[i + 11] = "\tbne @+";
          listing[i + 12] = "\tdey";
          listing[i + 13] = "\tlda (:bp2),y";
          listing[i + 14] = listing[i + 20];
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          listing[i + 19] = "";
          listing[i + 20] = "";
          return false;
        };
        if (LAB_A(i + 19) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && BNE(i + 13) && LDA_STACK(i + 14) && BNE(i + 15) && LDA_STACK(i + 16) && BNE(i + 17) && LDA_STACK(i + 18) && (JEQ(i + 20) || JNE(i + 20)) && (SKIP(i + 21) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i + 2] = "";
          listing[i + 4] = "\tora (:bp2),y";
          listing[i + 5] = "";
          listing[i + 7] = "\tora (:bp2),y";
          listing[i + 8] = "";
          listing[i + 10] = "\tora (:bp2),y";
          listing[i + 11] = "";
          listing[i + 12] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          listing[i + 19] = "";
          return false;
        };
        if (MWY_BP2(i) && (listing[i] === listing[i + 4]) && LDY(i + 1) && LDA_BP2_Y(i + 2) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && CMP_STACK(i + 9)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 6] = "\tcmp (:bp2),y";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (LDY(i) && LDA(i + 1) && IY(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LDA_A(i + 4) && IY(i + 4) && CMP_STACK(i + 5)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i + 2] = listing[i + 3];
          listing[i + 3] = listing[i + 4];
          listing[i + 4] = listing[i];
          listing[i + 5] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LAB_A(i + 17) && LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_SUB(i + 7) && STA_STACK(i + 8) && LDA_VAL(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && CMP_STACK(i + 13) && BNE_A(i + 14) && LDA_STACK(i + 15) && CMP_STACK(i + 16)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i] = listing[i + 6];
          listing[i + 1] = listing[i + 7];
          listing[i + 2] = listing[i + 8];
          listing[i + 3] = listing[i + 9];
          listing[i + 4] = listing[i + 10];
          listing[i + 5] = "\tldy #$01";
          listing[i + 6] = "\tcmp (:bp2),y";
          listing[i + 7] = "\tbne @+";
          listing[i + 8] = "\tdey";
          listing[i + 9] = listing[i + 15];
          listing[i + 10] = "\tcmp (:bp2),y";
          listing[i + 11] = "";
          listing[i + 12] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          return false;
        };
        if (LAB_A(i + 9) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && CMP(i + 5) && BNE_A(i + 6) && LDA_STACK(i + 7) && CMP(i + 8)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          if (pas.System.Pos("\tldy #$",listing[i]) === 1) {
            p = GetBYTE(i) + 1;
            listing[i] = "\tldy #$" + pas.SysUtils.IntToHex(p,2);
          } else listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256) + "+$01";
          listing[i + 1] = "\tlda (:bp2),y";
          listing[i + 2] = listing[i + 5];
          listing[i + 3] = "\tbne @+";
          listing[i + 4] = "\tdey";
          listing[i + 5] = "\tlda (:bp2),y";
          listing[i + 6] = listing[i + 8];
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (LAB_A(i + 9) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_A(i + 4) && CMP_BP2_Y(i + 5) && BNE_A(i + 6) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
          if (pas.System.Pos("\tldy #$",listing[i]) === 1) {
            p = GetBYTE(i) + 1;
            listing[i] = "\tldy #$" + pas.SysUtils.IntToHex(p,2);
          } else listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256) + "+$01";
          listing[i + 1] = listing[i + 4];
          listing[i + 2] = listing[i + 5];
          listing[i + 3] = "\tbne @+";
          listing[i + 4] = "\tdey";
          listing[i + 5] = listing[i + 7];
          listing[i + 6] = "\tcmp (:bp2),y";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && SKIP(i + 5) && AND_ORA_EOR_STACK(i + 6) && SKIP(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          if (pas.System.Pos("\tldy #$",listing[i]) === 1) {
            p = GetBYTE(i) + 1;
            listing[i] = "\tldy #$" + pas.SysUtils.IntToHex(p,2);
          } else listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256) + "+$01";
          listing[i + 1] = "\tlda (:bp2),y";
          listing[i + 2] = listing[i + 5];
          listing[i + 3] = "\tdey";
          if (ORA_STACK(i + 6)) {
            listing[i + 4] = "\tora (:bp2),y"}
           else if (EOR_STACK(i + 6)) {
            listing[i + 4] = "\teor (:bp2),y"}
           else listing[i + 4] = "\tand (:bp2),y";
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        return Result;
      };
      function opt_LOCAL(i) {
        var Result = false;
        Result = true;
        if ((listing[i + 12] === "\tbne L1") && LDA_IM(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && AND_ORA_EOR_VAL(i + 3) && STA_A(i + 4) && LDY_1(i + 5) && LOCAL(i + 6) && LDA_A(i + 7) && SUB(i + 8) && (listing[i + 9] === "\tbne L4") && LDA_A(i + 10) && CMP(i + 11) && LDA_STACK(i + 13)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 13],6,256)) {
          listing[i + 13] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 15] === "\tbne L1") && LDA_IM(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && AND_ORA_EOR_VAL(i + 3) && STA_STACK(i + 4) && LDY_1(i + 5) && LOCAL(i + 6) && LDA_A(i + 7) && SUB(i + 8) && (listing[i + 9] === "\tbne L4") && LDA_A(i + 10) && CMP(i + 11) && (listing[i + 12] === "\tbne L1") && LDA_A(i + 13) && CMP(i + 14) && LDA_STACK(i + 16)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 16],6,256)) {
          listing[i + 16] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 16] === "\tbne L1") && LDY_IM(i) && LDA_IM(i + 1) && STA_STACK(i + 2) && STY_STACK(i + 3) && STY_STACK(i + 4) && STY_STACK(i + 5) && LDY_1(i + 6) && LOCAL(i + 7) && LDA_A(i + 8) && SUB_STACK(i + 9) && (listing[i + 10] === "\tbne L4") && LDA_A(i + 11) && CMP_STACK(i + 12) && (listing[i + 13] === "\tbne L1") && LDA_A(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17) && CMP_STACK(i + 18)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 9] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 12] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 15] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 18] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if (ADC_SBC(i) && LOCAL(i + 1) && LDA_A(i + 2)) {
          if ((i > 0) && LDA_A(i - 1)) listing[i - 1] = "";
          listing[i] = "";
          return false;
        };
        if (LDA_A(i) && LOCAL(i + 1) && SUB(i + 2)) {
          listing[i + 1] = listing[i];
          listing[i] = "\t.LOCAL";
          return false;
        };
        if (LDA_A(i) && LDY(i + 1) && LOCAL(i + 2) && LDA_A(i + 3)) {
          listing[i] = "";
          return false;
        };
        if (LDA_A(i) && LOCAL(i + 1) && LDA_A(i + 2)) {
          listing[i] = "";
          return false;
        };
        if (LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_STACK(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 3] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 5] === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && LDA_A(i + 6) && CMP_STACK(i + 7)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          listing[i + 7] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 5] === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && LDA_STACK(i + 6) && CMP(i + 7)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 5] === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
          listing[i + 4] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 8] === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (listing[i + 5] === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && (listing[i + 8] === "\tbne L1") && LDA_A(i + 9) && CMP_STACK(i + 10)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256)) {
          listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 8] === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (listing[i + 5] === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && LDA_STACK(i + 9)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
          listing[i + 9] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 11] === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (listing[i + 5] === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && (listing[i + 8] === "\tbne L1") && LDA_A(i + 9) && CMP(i + 10) && LDA_A(i + 12) && CMP_STACK(i + 13)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 13],6,256)) {
          listing[i + 13] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 11] === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (listing[i + 5] === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && (listing[i + 8] === "\tbne L1") && LDA_A(i + 9) && CMP(i + 10) && LDA_STACK(i + 12)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) {
          listing[i + 12] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 7] === "\tbne L4") && LDY(i) && LDA_A(i + 1) && STY_STACK(i + 2) && STA_STACK(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_STACK(i + 6) && LDA_A(i + 8) && CMP_STACK(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 6] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((listing[i + 14] === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && STA_STACK(i + 4) && LOCAL(i + 5) && LDA_A(i + 6) && SUB_STACK(i + 7) && (listing[i + 8] === "\tbne L4") && LDA_A(i + 9) && CMP_STACK(i + 10) && (listing[i + 11] === "\tbne L1") && LDA_A(i + 12) && CMP_STACK(i + 13) && LDA_A(i + 15) && CMP_STACK(i + 16)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
          listing[i + 7] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 13] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 16] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if ((listing[i + 13] === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_IM_0(i + 6) && (listing[i + 7] === "\tbne L4") && LDA_A(i + 8) && CMP_STACK(i + 9) && (listing[i + 10] === "\tbne L1") && LDA_A(i + 11) && CMP_STACK(i + 12) && LDA_A(i + 14) && CMP_STACK(i + 15)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 12] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 15] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((listing[i + 7] === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LOCAL(i + 4) && LDA_STACK(i + 5) && LDA_STACK(i + 8) && CMP(i + 9) && LDA_STACK(i + 11)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
          listing[i + 5] = listing[i];
          listing[i + 8] = listing[i];
          listing[i + 11] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 5] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 8] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB(i + 5) && LDA_STACK(i + 7) && CMP(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          listing[i + 7] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
          listing[i + 8] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA(i + 4) && SUB_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i + 5] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP_STACK(i + 11) && (listing[i + 12] === "\tbne L1") && LDA_A(i + 13) && CMP_STACK(i + 14)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 14],6,256)) {
          listing[i + 14] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP_STACK(i + 11)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) {
          listing[i + 11] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 6] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
          listing[i + 8] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((listing[i + 7] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_STACK(i + 6) && LDA_A(i + 8) && CMP_STACK(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
          listing[i + 6] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((listing[i + 7] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_STACK(i + 6) && LDA_A(i + 8) && CMP_STACK(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 6] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if ((listing[i + 8] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY(i + 4) && LOCAL(i + 5) && LDA(i + 6) && SUB_IM_0(i + 7) && LDA(i + 9) && CMP(i + 10) && (listing[i + 11] === "\tbne L1") && LDA(i + 12)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
          listing[i + 6] = listing[i];
          listing[i + 9] = listing[i];
          listing[i + 12] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((listing[i + 8] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY(i + 4) && LOCAL(i + 5) && LDA_A(i + 6) && SUB_IM_0(i + 7) && LDA_A(i + 9) && CMP_STACK(i + 10) && (listing[i + 11] === "\tbne L1") && LDA_A(i + 12) && CMP_STACK(i + 13) && (listing[i + 14] === "\tbne L1") && LDA_A(i + 15) && CMP_STACK(i + 16)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 16],6,256))) {
          listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 13] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 16] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if ((listing[i + 9] === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && STA_STACK(i + 4) && LDY(i + 5) && LOCAL(i + 6) && LDA_A(i + 7) && SUB_STACK(i + 8) && LDA_A(i + 10) && CMP_STACK(i + 11) && (listing[i + 12] === "\tbne L1") && LDA_A(i + 13) && CMP_STACK(i + 14) && (listing[i + 15] === "\tbne L1") && LDA_A(i + 16) && CMP_STACK(i + 17)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
          listing[i + 8] = "\tsub " + pas.System.Copy(listing[i],6,256);
          listing[i + 11] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 14] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 17] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if ((listing[i + 13] === "\tbne L4") && (listing[i + 16] === "\tbne L1") && LDA_STACK(i) && ADC_SBC_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_IM_0(i + 11) && SUB_STACK(i + 12) && LDA_IM_0(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17) && CMP_STACK(i + 18)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 12] = "\tsub #$00";
          listing[i + 15] = "\tcmp #$00";
          return false;
        };
        if ((listing[i + 13] === "\tbne L4") && (listing[i + 16] === "\tbne L1") && LDA_IM_0(i) && (ADC_SBC_IM_0(i + 1) || ADC_SBC_STACK(i + 1)) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_IM_0(i + 11) && SUB_STACK(i + 12) && LDA_IM_0(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17) && CMP_STACK(i + 18)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 12] = "\tsub #$00";
          listing[i + 15] = "\tcmp #$00";
          return false;
        };
        if ((listing[i + 13] === "\tbne L4") && (listing[i + 16] === "\tbne L1") && LDA_STACK(i) && ADC_SBC_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_STACK(i + 11) && SUB_IM_0(i + 12) && LDA_STACK(i + 14) && CMP_IM_0(i + 15) && LDA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 11] = "\tlda #$00";
          listing[i + 14] = "\tlda #$00";
          return false;
        };
        if ((listing[i + 13] === "\tbne L4") && (listing[i + 16] === "\tbne L1") && LDA_IM_0(i) && ADC_SBC_STACK(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_STACK(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_STACK(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_STACK(i + 11) && SUB_IM_0(i + 12) && LDA_STACK(i + 14) && CMP_IM_0(i + 15) && LDA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 11] = "\tlda #$00";
          listing[i + 14] = "\tlda #$00";
          return false;
        };
        if ((listing[i + 15] === "\tbne L4") && (listing[i + 18] === "\tbne L1") && LDA_STACK(i) && ADC_SBC_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDA_VAL(i + 9) && ASL_A(i + 10) && TAY(i + 11) && LOCAL(i + 12) && LDA_STACK(i + 13) && SUB_IM_0(i + 14) && LDA_STACK(i + 16) && CMP_IM_0(i + 17) && LDA_STACK(i + 19)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 13] = "\tlda #$00";
          listing[i + 16] = "\tlda #$00";
          return false;
        };
        if ((listing[i + 15] === "\tbne L4") && (listing[i + 18] === "\tbne L1") && LDA_IM_0(i) && ADC_SBC_STACK(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_STACK(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_STACK(i + 7) && STA_STACK(i + 8) && LDA_VAL(i + 9) && ASL_A(i + 10) && TAY(i + 11) && LOCAL(i + 12) && LDA_STACK(i + 13) && SUB_IM_0(i + 14) && LDA_STACK(i + 16) && CMP_IM_0(i + 17) && LDA_STACK(i + 19)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 13] = "\tlda #$00";
          listing[i + 16] = "\tlda #$00";
          return false;
        };
        if (ENDL(i + 22) && LDY_IM_0(i) && LDA_VAL(i + 1) && SPL(i + 2) && DEY(i + 3) && STY_STACK(i + 4) && STA_STACK(i + 5) && LDY(i + 6) && LOCAL(i + 7) && LDA_STACK(i + 8) && SUB_IM_0(i + 9) && (listing[i + 10] === "\tbne L4") && LDA_STACK(i + 11) && CMP_IM(i + 12) && (listing[i + 13] === "\tbeq L5") && (listing[i + 14] === "\tlda #$00") && (listing[i + 15] === "\tadc #$FF") && (listing[i + 16] === "\tora #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
          if (GetBYTE(i + 12) < 128) {
            listing[i + 8] = listing[i + 11];
            listing[i + 9] = "\tsub " + pas.System.Copy(listing[i + 12],6,256);
            listing[i + 10] = "\tbeq L5";
            listing[i + 11] = "\tbvc L5";
            listing[i + 12] = "\teor #$FF";
            listing[i + 13] = "\tora #$01";
            listing[i + 14] = "L5";
            listing[i + 15] = "\t.ENDL";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            return false;
          };
        };
        if (ENDL(i + 22) && LOCAL(i) && LDA_IM_0(i + 1) && SUB_IM_0(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_IM_0(i + 4) && CMP_IM_0(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "\t.LOCAL";
          listing[i + 8] = "\tsub " + pas.System.Copy(listing[i + 8],6,256);
          listing[i + 9] = "\tbne L4";
          listing[i + 12] = "\tbeq L5";
          listing[i + 13] = "\tlda #$00";
          listing[i + 14] = "\tadc #$FF";
          listing[i + 15] = "\tora #$01";
          listing[i + 16] = "\tbne L5";
          listing[i + 17] = "L4\tbvc L5";
          listing[i + 18] = "\teor #$FF";
          listing[i + 19] = "\tora #$01";
          listing[i + 20] = "L5";
          listing[i + 21] = "";
          return false;
        };
        return Result;
      };
      function opt_LT_GTEQ(i) {
        var Result = false;
        var p = 0;
        var k = 0;
        Result = true;
        if (LAB_A(i + 11) && LDA_A(i) && CMP_IM_0(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM_0(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP_IM_0(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP(i + 10) && (JCS(i + 12) || JCC(i + 12)) && (SKIP(i + 13) === false)) {
          if (CMP_IM_0(i + 10)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            if (JCS(i + 12)) {
              listing[i + 12] = "\tjmp " + pas.System.Copy(listing[i + 12],6,256)}
             else listing[i + 12] = "";
          } else if (JCS(i + 12)) {
            listing[i + 1] = "";
            listing[i + 2] = "\tjne " + pas.System.Copy(listing[i + 12],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "\tjne " + pas.System.Copy(listing[i + 12],6,256);
            listing[i + 7] = "";
            listing[i + 8] = "\tjne " + pas.System.Copy(listing[i + 12],6,256);
          } else {
            listing[i + 1] = "";
            listing[i + 4] = "";
            listing[i + 7] = "";
            listing[i + 11] = listing[i + 12];
            listing[i + 12] = "@";
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM_0(i + 4) && LAB_A(i + 5) && JCC(i + 6) && (SKIP(i + 7) === false)) {
          k = GetWORD(i + 4,i + 1);
          if (k === 0) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
          } else {
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = "@";
            listing[i + 4] = listing[i + 3];
            listing[i + 2] = listing[i + 5];
            listing[i + 3] = "\tbne @+";
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_VAL(i) && CMP_IM_0(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP(i + 4) && LAB_A(i + 5) && (JCS(i + 6) || JCC(i + 6)) && (SKIP(i + 7) === false)) {
          if (CMP_IM_0(i + 4)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            if (JCS(i + 6)) {
              listing[i + 6] = "\tjmp " + pas.System.Copy(listing[i + 6],6,256)}
             else listing[i + 6] = "";
          } else if (JCS(i + 6)) {
            listing[i + 1] = "";
            listing[i + 2] = "\tjne " + pas.System.Copy(listing[i + 6],6,256);
          } else {
            listing[i + 1] = "";
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = "@";
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP_IM_0(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP_IM_0(i + 4) && LAB_A(i + 5) && BCS(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && (STA(i + 10) || AND_ORA_EOR(i + 10)) && (DEX(i + 12) === false)) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM_0(i + 1) && (JCS(i + 2) || JCC(i + 2)) && (SKIP(i + 3) === false)) {
          listing[i] = "";
          listing[i + 1] = "";
          if (JCS(i + 2)) {
            listing[i + 2] = "\tjmp " + pas.System.Copy(listing[i + 2],6,256)}
           else listing[i + 2] = "";
          return false;
        };
        if (ENDL(i + 8) && (BPL(i + 9) || BMI(i + 9)) && DEY(i + 10) && LAB_A(i + 11) && (STY(i + 12) || TYA(i + 12)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          p = ((GetBYTE(i + 2) & 255) << 24) >> 24;
          if (p === 0) {
            listing[i] = listing[i + 1];
            listing[i + 1] = listing[i + 9];
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
          } else if (BPL(i + 9) && (p === 127)) {
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tcmp #$7F";
            listing[i + 2] = "\tbeq @+";
            listing[i + 3] = "";
            listing[i + 4] = "";
          } else if (BMI(i + 9) && (p === -128)) {
            listing[i] = "\tbeq @+";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
          } else {
            listing[i] = listing[i + 1];
            listing[i + 1] = listing[i + 2];
            listing[i + 2] = "\tsvc";
            listing[i + 3] = "\teor #$80";
            listing[i + 4] = listing[i + 9];
          };
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 8) && (BPL(i + 9) || BMI(i + 9)) && DEY(i + 10) && LAB_A(i + 11) && (STY(i + 12) || TYA(i + 12)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (SUB_IM(i + 2) === false) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          listing[i] = listing[i + 1];
          listing[i + 1] = listing[i + 2];
          listing[i + 2] = "\tsvc";
          listing[i + 3] = "\teor #$80";
          listing[i + 4] = listing[i + 9];
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && BMI_A(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && STA_A(i + 6) && (DEX(i + 8) === false)) {
          listing[i] = "";
          listing[i + 2] = "\tcmp #$80";
          listing[i + 3] = "\tlda #$00";
          listing[i + 4] = "\trol @";
          listing[i + 5] = "";
          return false;
        };
        if (ENDL(i + 15) && BMI(i + 16) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          p = ((GetWORD(i + 5,i + 2) & 65535) << 16) >> 16;
          if (p === 0) {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = listing[i + 1];
          } else if (p !== -32768) {
            listing[i + 10] = listing[i + 4];
            listing[i + 11] = listing[i + 5];
            listing[i + 12] = listing[i + 1];
            listing[i + 13] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 14] = "\tsvc";
            listing[i + 15] = "\teor #$80";
          } else {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "\tbeq @+";
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 15) && BPL(i + 16) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          p = ((GetWORD(i + 5,i + 2) & 65535) << 16) >> 16;
          if (p === 0) {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = listing[i + 1];
          } else {
            listing[i + 10] = listing[i + 4];
            listing[i + 11] = listing[i + 5];
            listing[i + 12] = listing[i + 1];
            listing[i + 13] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 14] = "\tsvc";
            listing[i + 15] = "\teor #$80";
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 15) && (BPL(i + 16) || BMI(i + 16)) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (CMP_IM(i + 5) === false) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          listing[i + 10] = listing[i + 4];
          listing[i + 11] = listing[i + 5];
          listing[i + 12] = listing[i + 1];
          listing[i + 13] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 14] = "\tsvc";
          listing[i + 15] = "\teor #$80";
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 22) && (BPL(i + 23) || BMI(i + 23)) && DEY(i + 24) && LAB_A(i + 25) && (STY(i + 26) || TYA(i + 26)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP_IM(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP_IM(i + 11) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          p = GetBYTE(i + 11) + (GetBYTE(i + 8) << 8) + (GetBYTE(i + 5) << 16) + (GetBYTE(i + 2) << 24);
          if (p === 0) {
            listing[i] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            return false;
          } else if (BMI(i + 23) && (p === -2147483648)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "\tbeq @+";
            return false;
          } else {
            if ((i > 0) && LDY_1(i - 1) && TYA(i + 26) && (JEQ(i + 27) || JNE(i + 27))) {
              listing[i - 1] = "";
              if (JEQ(i + 27)) {
                if (BPL(i + 23)) {
                  listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 27],6,256)}
                 else listing[i + 23] = "\tjpl " + pas.System.Copy(listing[i + 27],6,256);
              } else {
                if (BPL(i + 23)) {
                  listing[i + 23] = "\tjpl " + pas.System.Copy(listing[i + 27],6,256)}
                 else listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 27],6,256);
              };
              listing[i + 24] = "";
              listing[i + 25] = "";
              listing[i + 26] = "";
              listing[i + 27] = "";
              return false;
            };
          };
        };
        if (ENDL(i + 22) && (BPL(i + 23) || BMI(i + 23)) && DEY(i + 24) && LAB_A(i + 25) && TYA(i + 26) && (JEQ(i + 27) || JNE(i + 27)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (CMP_IM(i + 11) === false) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          if (JEQ(i + 27)) {
            if (BPL(i + 23)) {
              listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 27],6,256)}
             else listing[i + 23] = "\tjpl " + pas.System.Copy(listing[i + 27],6,256);
          } else {
            if (BPL(i + 23)) {
              listing[i + 23] = "\tjpl " + pas.System.Copy(listing[i + 27],6,256)}
             else listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 27],6,256);
          };
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          listing[i + 24] = "";
          listing[i + 25] = "";
          listing[i + 26] = "";
          listing[i + 27] = "";
          return false;
        };
        return Result;
      };
      function opt_LTEQ(i) {
        var Result = false;
        var p = 0;
        var c = 0;
        var tmp = "";
        Result = true;
        if (LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP_IM(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP_IM(i + 10) && LAB_A(i + 11) && BCC_A(i + 12) && JNE(i + 13) && LAB_A(i + 14)) {
          c = GetWORD(i + 10,i + 7) + (GetWORD(i + 4,i + 1) << 16);
          if (c === 0) {
            listing[i + 1] = "";
            listing[i + 2] = listing[i + 13];
            listing[i + 4] = "";
            listing[i + 5] = listing[i + 13];
            listing[i + 7] = "";
            listing[i + 8] = listing[i + 13];
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 14] = "";
            return false;
          } else if (c < 0xFFFFFFFF) {
            c += 1;
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw(c >>> 24) & 255,2);
            listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw(c >>> 16) & 255,2);
            listing[i + 7] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw(c >>> 8) & 255,2);
            if ((c & 0xff) === 0) {
              listing[i + 8] = "\tsne";
              listing[i + 10] = "";
              listing[i + 11] = "";
            } else listing[i + 10] = "\tcmp #$" + pas.SysUtils.IntToHex(c & 0xff,2);
            listing[i + 12] = "";
            listing[i + 13] = "\tjcs " + pas.System.Copy(listing[i + 13],6,256);
            listing[i + 14] = "";
            return false;
          } else {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && JCC(i + 6) && JEQ(i + 7)) {
          p = GetWORD(i + 4,i + 1);
          if ((p > 0) && (p < 0xFFFF)) {
            p += 1;
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 2] = listing[i + 6];
            listing[i + 7] = "@";
            if ((p & 0xff) !== 0) {
              listing[i + 5] = "\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2)}
             else listing[i + 5] = "";
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = "\tbne @+";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && BCC_A(i + 6) && JNE(i + 7) && LAB_A(i + 8)) {
          p = GetWORD(i + 4,i + 1);
          if (p === 0) {
            listing[i + 1] = "";
            listing[i + 2] = listing[i + 7];
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 8] = "";
            return false;
          } else if (p < 0xFFFF) {
            p += 1;
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            if ((p & 0xff) === 0) {
              listing[i + 2] = "\tsne";
              listing[i + 4] = "";
              listing[i + 5] = "";
            } else listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 6] = "";
            listing[i + 7] = "\tjcs " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 8] = "";
            return false;
          } else {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && BNE(i + 2) && LDA(i + 3) && CMP(i + 4) && (CMP_IM(i + 4) === false) && LAB_A(i + 5) && BCC_A(i + 6) && BEQ_A(i + 7) && DEY(i + 8) && LAB_A(i + 9)) {
          tmp = listing[i];
          listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "\tcmp " + pas.System.Copy(tmp,6,256);
          tmp = listing[i + 3];
          listing[i + 3] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 4] = "\tcmp " + pas.System.Copy(tmp,6,256);
          listing[i + 6] = "\tbcs @+";
          listing[i + 7] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && BCC_A(i + 6) && BEQ_A(i + 7) && DEY(i + 8) && LAB_A(i + 9) && TYA(i + 10) && (STA(i + 11) || AND_ORA_EOR(i + 11)) && (DEX(i + 13) === false)) {
          c = GetWORD(i + 4,i + 1);
          if (c === 0) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "";
            listing[i + 6] = "";
            return false;
          } else if (c < 0xFFFF) {
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 8) & 255,2);
            listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
            listing[i + 7] = "";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BCC_A(i + 2) && JNE(i + 3) && LAB_A(i + 4)) {
          p = GetBYTE(i + 1);
          if (p === 0) {
            listing[i + 2] = "";
            listing[i + 4] = "";
            return false;
          } else if (p < 0xFF) {
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex((p + 1) & 0xff,2);
            listing[i + 2] = "";
            listing[i + 3] = "\tjcs " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "";
            return false;
          } else {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && JCC(i + 2) && JEQ(i + 3)) {
          listing[i + 2] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 3] = "\tjcs " + pas.System.Copy(listing[i + 3],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && BCC(i + 2) && BEQ(i + 3) && DEY(i + 4) && LAB_A(i + 5) && (STY(i + 6) || TYA(i + 6))) {
          listing[i + 2] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 3] = "\tbcs @+";
          return false;
        };
        if (ENDL(i + 8) && BMI(i + 9) && BEQ(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          p = ((GetBYTE(i + 2) & 255) << 24) >> 24;
          if (p === 0) {
            listing[i + 4] = listing[i + 1];
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
          } else if (p === -128) {
            listing[i + 4] = listing[i + 1];
            listing[i + 5] = "\tcmp #$80";
            listing[i + 6] = "\tbeq @+";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
          } else {
            p += 1;
            listing[i + 4] = listing[i + 1];
            listing[i + 5] = "\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 6] = "\tsvc";
            listing[i + 7] = "\teor #$80";
            listing[i + 8] = "\tbmi @+";
            listing[i + 9] = "";
            listing[i + 10] = "";
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (ENDL(i + 8) && BMI(i + 9) && BEQ(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (SUB_IM(i + 2) === false) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          tmp = listing[i + 1];
          listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "\tsub " + pas.System.Copy(tmp,6,256);
          listing[i + 9] = "\tbpl @+";
          listing[i + 10] = "";
          return false;
        };
        if (ENDL(i + 15) && BMI_A(i + 16) && BEQ_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          p = GetWORD(i + 5,i + 2);
          if (p === 0) {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = listing[i + 1];
            listing[i + 15] = "\tbmi @+";
            listing[i + 16] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 17] = "\tseq";
          } else {
            p += 1;
            if (p === 0x8000) {
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              listing[i + 13] = "";
              listing[i + 14] = "";
              listing[i + 15] = "";
              listing[i + 16] = "";
            } else {
              listing[i + 10] = listing[i + 4];
              listing[i + 11] = "\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2);
              listing[i + 12] = listing[i + 1];
              listing[i + 13] = "\tsbc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
              listing[i + 14] = "\tsvc";
              listing[i + 15] = "\teor #$80";
              listing[i + 16] = "\tbmi @+";
              listing[i + 17] = "";
            };
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 15) && BMI_A(i + 16) && BEQ_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA(i + 4) && CMP(i + 5) && (CMP_IM(i + 5) === false) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          listing[i + 11] = "\tlda " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 12] = "\tcmp " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 13] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 14] = "\tsbc " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 15] = "\tsvc";
          listing[i + 16] = "\teor #$80";
          listing[i + 17] = "\tbpl @+";
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          return false;
        };
        if (ENDL(i + 22) && BMI_A(i + 23) && BEQ_A(i + 24) && DEY(i + 25) && LAB_A(i + 26) && (STY(i + 27) || TYA(i + 27)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP_IM(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP_IM(i + 11) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          if (SUB_IM_0(i + 2) && CMP_IM_0(i + 5) && CMP_IM_0(i + 8) && CMP_IM_0(i + 11)) {
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tbmi @+";
            listing[i + 2] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 4] = "\tora " + pas.System.Copy(listing[i + 10],6,256);
            listing[i + 5] = "\tseq";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            return false;
          } else {
            if ((i > 0) && LDY_1(i - 1) && TYA(i + 27) && (JEQ(i + 28) || JNE(i + 28))) {
              listing[i - 1] = "";
              if (JEQ(i + 28)) {
                listing[i + 23] = "\tsmi";
                listing[i + 24] = "\tjne " + pas.System.Copy(listing[i + 28],6,256);
              } else {
                listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 28],6,256);
                listing[i + 24] = "\tjeq " + pas.System.Copy(listing[i + 28],6,256);
              };
              listing[i + 25] = "";
              listing[i + 26] = "";
              listing[i + 27] = "";
              listing[i + 28] = "";
              return false;
            };
          };
        };
        if (ENDL(i + 22) && BMI_A(i + 23) && BEQ_A(i + 24) && DEY(i + 25) && LAB_A(i + 26) && TYA(i + 27) && (JEQ(i + 28) || JNE(i + 28)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (CMP_IM(i + 11) === false) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          if (JEQ(i + 28)) {
            listing[i + 23] = "\tsmi";
            listing[i + 24] = "\tjne " + pas.System.Copy(listing[i + 28],6,256);
          } else {
            listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 28],6,256);
            listing[i + 24] = "\tjeq " + pas.System.Copy(listing[i + 28],6,256);
          };
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          listing[i + 25] = "";
          listing[i + 26] = "";
          listing[i + 27] = "";
          listing[i + 28] = "";
          return false;
        };
        return Result;
      };
      function opt_GT(i) {
        var Result = false;
        var p = 0;
        var c = 0;
        var tmp = "";
        Result = true;
        if (LAB_A(i + 11) && JCC(i + 12) && JEQ(i + 13) && LDA_A(i) && BNE_A(i + 1) && DEY(i + 2) && LDA_A(i + 3) && BNE_A(i + 4) && DEY(i + 5) && LDA_A(i + 6) && BNE_A(i + 7) && DEY(i + 8) && LDA_A(i + 9) && CMP_IM_0(i + 10)) {
          listing[i + 1] = "";
          listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 4] = "";
          listing[i + 6] = "\tora " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 7] = "";
          listing[i + 9] = "\tora " + pas.System.Copy(listing[i + 9],6,256);
          listing[i + 10] = "";
          listing[i + 11] = "";
          listing[i + 12] = "";
          return false;
        };
        if (LAB_A(i + 11) && JCC(i + 12) && JEQ(i + 13) && LDA_VAL(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP_IM(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP_IM(i + 10)) {
          c = GetBYTE(i + 10) + (GetBYTE(i + 7) << 8) + (GetBYTE(i + 4) << 16) + (GetBYTE(i + 1) << 24);
          if (c === 0) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "\tora " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "\tora " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          } else if (c < 0xFFFFFFFF) {
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 24) & 255,2);
            listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 16) & 255,2);
            listing[i + 7] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 8) & 255,2);
            listing[i + 10] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
            listing[i + 13] = "";
            return false;
          } else if (c === 0xFFFFFFFF) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "\tjmp " + pas.System.Copy(listing[i + 13],6,256);
            return false;
          };
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_IM_0(i + 2) && BNE_A(i + 3) && LDA_A(i + 4) && CMP(i + 5) && (CMP_IM_0(i + 5) === false) && LAB_A(i + 6) && BCS_A(i + 7) && DEY(i + 8) && LAB_A(i + 9) && TYA(i + 10) && (STA(i + 11) || AND_ORA_EOR(i + 11)) && (DEX(i + 13) === false)) {
          listing[i + 2] = "";
          listing[i + 6] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_BP2_Y(i) && BNE(i + 1) && DEY(i + 2) && LDA_BP2_Y(i + 3) && CMP_IM_0(i + 4) && LAB_A(i + 5) && JCC(i + 6) && JEQ(i + 7)) {
          listing[i + 1] = "";
          listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && JCC(i + 6) && JEQ(i + 7)) {
          c = GetWORD(i + 4,i + 1);
          if (c === 0) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          } else if (c < 0xFFFF) {
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 8) & 255,2);
            listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
            listing[i + 7] = "";
            return false;
          } else if (c === 0xFFFF) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "\tjmp " + pas.System.Copy(listing[i + 7],6,256);
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && BEQ(i + 6) && JCS(i + 7) && LAB_A(i + 8)) {
          c = GetWORD(i + 4,i + 1);
          if (c === 0) {
            listing[i + 1] = "";
            listing[i + 2] = "\tjne " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "\tjne " + pas.System.Copy(listing[i + 7],6,256);
            return false;
          } else if (c < 0xFFFF) {
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 8) & 255,2);
            listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
            listing[i + 6] = "";
            listing[i + 8] = "";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && (listing[i + 1] === "\tadd #$FF") && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && CMP_IM_0(i + 7) && BNE(i + 8) && LDA_STACK(i + 9) && CMP(i + 10) && LAB_A(i + 11) && JCS(i + 12) && (SKIP(i + 13) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          listing[i + 12] = "\tjmp " + pas.System.Copy(listing[i + 12],6,256);
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && SEQ(i + 6) && BCS(i + 7) && DEY(i + 8) && LAB_A(i + 9)) {
          c = GetWORD(i + 4,i + 1);
          if (c === 0) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "\tbne @+";
            return false;
          } else if (c < 0xFFFF) {
            listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex(rtl.lw((c + 1) >>> 8) & 255,2);
            listing[i + 4] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
            listing[i + 6] = "";
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && BNE(i + 2) && LDA_A(i + 3) && CMP(i + 4) && (CMP_IM(i + 4) === false) && LAB_A(i + 5) && SEQ(i + 6) && BCS(i + 7) && DEY(i + 8)) {
          tmp = listing[i];
          listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "\tcmp " + pas.System.Copy(tmp,6,256);
          tmp = listing[i + 3];
          listing[i + 3] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 4] = "\tcmp " + pas.System.Copy(tmp,6,256);
          listing[i + 6] = "";
          listing[i + 7] = "\tbcc @+";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && JCC(i + 2) && JEQ(i + 3)) {
          if (CMP_IM_0(i + 1)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          } else {
            c = GetBYTE(i + 1);
            if (c < 255) {
              listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
              listing[i + 3] = "";
              return false;
            } else if (c === 255) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "\tjmp " + pas.System.Copy(listing[i + 3],6,256);
              return false;
            };
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && SEQ(i + 2) && BCS_A(i + 3)) {
          if (CMP_IM_0(i + 1)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tbne @+";
            return false;
          } else {
            c = GetBYTE(i + 1);
            if (c < 255) {
              listing[i + 1] = "\tcmp #$" + pas.SysUtils.IntToHex((c + 1) & 255,2);
              listing[i + 2] = "";
              return false;
            };
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && SEQ(i + 2) && BCS_A(i + 3)) {
          tmp = listing[i];
          listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "\tcmp " + pas.System.Copy(tmp,6,256);
          listing[i + 2] = "\tbcc @+";
          listing[i + 3] = "";
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && SNE(i + 3) && LAB_A(i + 4) && JMP(i + 5)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 3] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && SNE(i + 3) && LAB_A(i + 4) && DEY(i + 5) && LAB_A(i + 6) && TYA(i + 7) && JEQ(i + 8)) {
          listing[i + 1] = "\tjmi " + pas.System.Copy(listing[i + 8],6,256);
          listing[i + 3] = "\tjeq " + pas.System.Copy(listing[i + 8],6,256);
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if (ENDL(i + 8) && SEQ(i + 9) && BPL_A(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          p = ((GetBYTE(i + 2) & 255) << 24) >> 24;
          if (p === 0) {
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tsmi";
            listing[i + 2] = "\tbne @+";
            listing[i + 3] = "";
            listing[i + 4] = "";
          } else if (p === 127) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "\tbeq @+";
          } else {
            p += 1;
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = "\tsvc";
            listing[i + 3] = "\teor #$80";
            listing[i + 4] = "\tbpl @+";
          };
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          return false;
        };
        if (ENDL(i + 8) && SEQ(i + 9) && BPL_A(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (SUB_IM(i + 2) === false) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          tmp = listing[i + 1];
          listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "\tsub " + pas.System.Copy(tmp,6,256);
          listing[i + 9] = "";
          listing[i + 10] = "\tbmi @+";
          return false;
        };
        if (ENDL(i + 15) && SEQ(i + 16) && BPL_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          p = ((GetWORD(i + 5,i + 2) & 65535) << 16) >> 16;
          if (p === 0) {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = listing[i + 1];
            listing[i + 14] = "\tbmi @+";
            listing[i + 15] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 16] = "\tsne";
            listing[i + 17] = "@";
          } else if (p < 0x7FFF) {
            p += 1;
            listing[i + 10] = listing[i + 4];
            listing[i + 11] = "\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 12] = listing[i + 1];
            listing[i + 13] = "\tsbc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 14] = "\tsvc";
            listing[i + 15] = "\teor #$80";
            listing[i + 16] = "";
          } else {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "\tbeq @+";
            listing[i + 16] = "";
            listing[i + 17] = "";
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 15) && SEQ(i + 16) && BPL_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (CMP_IM(i + 5) === false) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          tmp = listing[i + 1];
          listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 2] = "\tsub " + pas.System.Copy(tmp,6,256);
          tmp = listing[i + 4];
          listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 5] = "\tcmp " + pas.System.Copy(tmp,6,256);
          listing[i + 16] = "";
          listing[i + 17] = "\tbmi @+";
          return false;
        };
        if (ENDL(i + 22) && SEQ(i + 23) && BPL(i + 24) && DEY(i + 25) && LAB_A(i + 26) && (STY(i + 27) || TYA(i + 27)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP_IM(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP_IM(i + 11) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          p = GetBYTE(i + 11) + (GetBYTE(i + 8) << 8) + (GetBYTE(i + 5) << 16) + (GetBYTE(i + 2) << 24);
          if (p === 0) {
            if (LDA_IM_0(i + 1)) {
              listing[i + 16] = "";
              listing[i + 17] = "";
              listing[i + 18] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
              listing[i + 19] = "\tora " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 20] = "\tora " + pas.System.Copy(listing[i + 10],6,256);
              listing[i + 21] = "\tsne";
              listing[i + 22] = "";
            } else {
              listing[i + 16] = listing[i + 1];
              listing[i + 17] = "\tbmi @+";
              listing[i + 18] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
              listing[i + 19] = "\tora " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 20] = "\tora " + pas.System.Copy(listing[i + 10],6,256);
              listing[i + 21] = "\tsne";
              listing[i + 22] = "@";
            };
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          } else if (p < 0x7FFFFFFF) {
            if ((i > 0) && LDY_1(i - 1) && TYA(i + 27) && (JEQ(i + 28) || JNE(i + 28))) {
              listing[i - 1] = "";
              if (JEQ(i + 28)) {
                listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 28],6,256);
                listing[i + 24] = "\tjeq " + pas.System.Copy(listing[i + 28],6,256);
              } else {
                listing[i + 23] = "\tsmi";
                listing[i + 24] = "\tjne " + pas.System.Copy(listing[i + 28],6,256);
              };
              listing[i + 25] = "";
              listing[i + 26] = "";
              listing[i + 27] = "";
              listing[i + 28] = "";
              return false;
            };
          } else {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "\tbeq @+";
            listing[i + 23] = "";
            listing[i + 24] = "";
            return false;
          };
        };
        if (ENDL(i + 22) && SEQ(i + 23) && BPL(i + 24) && DEY(i + 25) && LAB_A(i + 26) && TYA(i + 27) && JEQ(i + 28) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (CMP_IM(i + 11) === false) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          listing[i + 23] = "\tjmi " + pas.System.Copy(listing[i + 28],6,256);
          listing[i + 24] = "\tjeq " + pas.System.Copy(listing[i + 28],6,256);
          for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          listing[i + 25] = "";
          listing[i + 26] = "";
          listing[i + 27] = "";
          listing[i + 28] = "";
          return false;
        };
        return Result;
      };
      function opt_NE_EQ(i) {
        var Result = false;
        var p = 0;
        Result = true;
        if (STA_STACK(i) && LDY_1(i + 1) && LDA_VAL(i + 2) && CMP_STACK(i + 3) && (BEQ_A(i + 4) || BNE_A(i + 4)) && DEY(i + 5) && LAB_A(i + 6) && (TYA(i + 7) || STY(i + 7))) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 2] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
          listing[i] = "";
          listing[i + 3] = "";
          return false;
        };
        if (STA_STACK(i) && LDY_1(i + 1) && LDA_STACK(i + 2) && AND_ORA_EOR(i + 3) && (BEQ_A(i + 4) || BNE_A(i + 4)) && DEY(i + 5) && LAB_A(i + 6) && (TYA(i + 7) || STY(i + 7))) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i + 2] = "";
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_IM_0(i + 2) && BNE_A(i + 3) && LDA_A(i + 4) && CMP_IM_0(i + 5) && LAB_A(i + 6) && (BEQ_A(i + 7) || BNE_A(i + 7)) && DEY(i + 8) && LAB_A(i + 9) && (TYA(i + 10) || STY(i + 10)) && (DEX(i + 11) === false)) {
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && ORA(i + 1) && (BEQ(i + 2) || BNE(i + 2)) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && JNE(i + 6)) {
          if (BEQ(i + 2)) listing[i + 6] = "\tjeq " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP(i + 4) && LAB_A(i + 5) && BNE(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JNE(i + 10)) {
          if (CMP_IM_0(i + 1)) listing[i + 1] = "";
          if (CMP_IM_0(i + 4)) listing[i + 4] = "";
          listing[i + 2] = listing[i + 10];
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP(i + 4) && LAB_A(i + 5) && BEQ(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JNE(i + 10)) {
          if (CMP_IM_0(i + 1)) listing[i + 1] = "";
          if (CMP_IM_0(i + 4)) listing[i + 4] = "";
          listing[i + 2] = "\tjeq " + pas.System.Copy(listing[i + 10],6,256);
          listing[i + 10] = "\tjeq " + pas.System.Copy(listing[i + 10],6,256);
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          for (var $l2 = i - 1; $l2 >= 0; $l2--) {
            p = $l2;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if (LDY(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && BNE(i + 5) && LDA_STACK(i + 6) && LAB_A(i + 7) && (JEQ(i + 8) || JNE(i + 8))) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 4] = "\tora (:bp2),y";
          listing[i + 2] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (LDY(i) && LDA_BP2_Y(i + 1) && CMP_IM_0(i + 2) && BNE(i + 3) && DEY(i + 4) && LDA_BP2_Y(i + 5) && CMP_IM_0(i + 6) && LAB_A(i + 7) && (JEQ(i + 8) || JNE(i + 8))) {
          listing[i + 5] = "\tora (:bp2),y";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (ENDL(i + 8) && (BEQ(i + 9) || BNE(i + 9)) && DEY(i + 10) && LAB_A(i + 11) && (STY(i + 12) || TYA(i + 12)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbeq L5") && (listing[i + 4] === "\tbvc L5") && (listing[i + 5] === "\teor #$FF") && (listing[i + 6] === "\tora #$01") && (listing[i + 7] === "L5")) {
          if (SUB_IM_0(i + 2)) {
            listing[i] = listing[i + 1];
            listing[i + 1] = "";
            listing[i + 2] = "";
          } else {
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "";
          };
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (ENDL(i + 15) && (BEQ(i + 16) || BNE(i + 16)) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (listing[i + 6] === "\tbeq L5") && LDA_IM_0(i + 7) && (listing[i + 8] === "\tadc #$FF") && (listing[i + 9] === "\tora #$01") && (listing[i + 10] === "\tbne L5") && (listing[i + 11] === "L4\tbvc L5") && (listing[i + 12] === "\teor #$FF") && (listing[i + 13] === "\tora #$01") && (listing[i + 14] === "L5")) {
          if (SUB_IM_0(i + 2) && CMP_IM_0(i + 5)) {
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = listing[i + 1];
            listing[i + 15] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
          } else {
            listing[i + 10] = listing[i + 1];
            listing[i + 11] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 12] = "\tbne @+";
            listing[i + 13] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 14] = "\tcmp " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 15] = "@";
          };
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (ENDL(i + 22) && (BEQ(i + 23) || BNE(i + 23)) && DEY(i + 24) && LAB_A(i + 25) && (STY(i + 26) || TYA(i + 26)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (listing[i + 3] === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (listing[i + 6] === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (listing[i + 9] === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (listing[i + 12] === "L1\tbeq L5") && (listing[i + 13] === "\tbcs L3") && (listing[i + 14] === "\tlda #$FF") && (listing[i + 15] === "\tbne L5") && (listing[i + 16] === "L3\tlda #$01") && (listing[i + 17] === "\tbne L5") && (listing[i + 18] === "L4\tbvc L5") && (listing[i + 19] === "\teor #$FF") && (listing[i + 20] === "\tora #$01") && (listing[i + 21] === "L5")) {
          if (SUB_IM_0(i + 2) && CMP_IM_0(i + 5) && CMP_IM_0(i + 8) && CMP_IM_0(i + 11)) {
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 2] = "\tora " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 10],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
          } else {
            listing[i] = listing[i + 1];
            listing[i + 1] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "\tbne @+";
            listing[i + 3] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 4] = "\tcmp " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 5] = "\tbne @+";
            listing[i + 6] = "\tlda " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 7] = "\tcmp " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 8] = "\tbne @+";
            listing[i + 9] = "\tlda " + pas.System.Copy(listing[i + 10],6,256);
            listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i + 11],6,256);
            listing[i + 11] = "@";
          };
          listing[i + 12] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          listing[i + 19] = "";
          listing[i + 20] = "";
          listing[i + 21] = "";
          listing[i + 22] = "";
          return false;
        };
        return Result;
      };
      function opt_CMP(i) {
        var Result = false;
        var p = 0;
        Result = true;
        if (LDY_1(i) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && STA(i + 5)) {
          listing[i] = "\tlda #$00";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (LDY_1(i) && BMI(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && STA_A(i + 6)) {
          listing[i] = "";
          listing[i + 2] = "\tasl @";
          listing[i + 3] = "\tlda #$00";
          listing[i + 4] = "\tadc #$00";
          listing[i + 5] = "";
          return false;
        };
        if (LDY_1(i) && (LDA_STACK(i + 1) === false) && BPL(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && STA_A(i + 6)) {
          listing[i] = "";
          listing[i + 2] = "\teor #$80";
          listing[i + 3] = "\tasl @";
          listing[i + 4] = "\tlda #$00";
          listing[i + 5] = "\tadc #$00";
          return false;
        };
        if (CMP_IM_0(i + 10) && LDA_A(i) && AND_IM(i + 1) && (listing[i + 1] === listing[i + 4]) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && CMP_IM_0(i + 7) && BNE(i + 8) && LDA_STACK(i + 9) && LAB_A(i + 11) && (JEQ(i + 12) || JNE(i + 12))) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          return false;
        };
        if (CMP(i + 8) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && AND_ORA_EOR(i + 5) && BNE(i + 6) && LDA_STACK(i + 7) && BNE(i + 9) && LDA_STACK(i + 10) && BNE(i + 11) && LDA_STACK(i + 12)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
          listing[i + 7] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i + 10] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i + 12] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && BNE(i + 5) && LDA_STACK(i + 6) && BNE(i + 7) && LDA_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
          listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i + 8] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (CMP(i + 10) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && AND_ORA_EOR(i + 7) && BNE(i + 8) && LDA_STACK(i + 9) && BNE(i + 11) && LDA_STACK(i + 12) && BNE(i + 13) && LDA_STACK(i + 14)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i + 12] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i + 14] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (CMP_STACK(i + 13) && LDA(i) && (IY(i) === false) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && (IY(i) === false) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && (IY(i) === false) && ADD_SUB(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && (IY(i) === false) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12)) if ((pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
          listing_tmp[0] = listing[i + 6];
          listing_tmp[1] = listing[i + 7];
          listing_tmp[2] = listing[i + 8];
          listing_tmp[3] = listing[i + 9];
          listing_tmp[4] = listing[i + 10];
          listing_tmp[5] = listing[i + 11];
          listing[i + 6] = listing[i];
          listing[i + 7] = listing[i + 1];
          listing[i + 8] = listing[i + 2];
          listing[i + 9] = listing[i + 3];
          listing[i + 10] = listing[i + 4];
          listing[i + 11] = listing[i + 5];
          listing[i] = listing_tmp[0];
          listing[i + 1] = listing_tmp[1];
          listing[i + 2] = listing_tmp[2];
          listing[i + 3] = listing_tmp[3];
          listing[i + 4] = listing_tmp[4];
          listing[i + 5] = listing_tmp[5];
          return false;
        };
        if (LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && AND_ORA_EOR(i + 3) && BNE(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i + 5] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && AND_ORA_EOR(i + 3) && CMP_VAL(i + 4) && BNE(i + 5) && LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (BNE(i) && LDA_IM_0(i + 1) && LAB_A(i + 2) && JNE(i + 3)) {
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (STA_STACK(i) && LDA(i + 1) && CMP_STACK(i + 2) && (JEQ(i + 3) || JNE(i + 3))) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i + 1] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 2] = "";
          return false;
        };
        if (STY_STACK(i) && LDA(i + 1) && CMP_STACK(i + 2) && (JEQ(i + 3) || JNE(i + 3))) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i] = "\ttya";
          listing[i + 1] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 2] = "";
          return false;
        };
        if (STA_STACK(i) && LDA(i + 1) && SUB_STACK(i + 2) && CMP_VAL(i + 3) && SKIP(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i + 2] = "\tadc " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "\teor #$FF";
          listing[i + 1] = "\tsec";
          return false;
        };
        if ((CMP(i) || LDA(i) || AND_ORA_EOR(i)) && (BEQ_A(i + 1) || BNE_A(i + 1) || BCC_A(i + 1)) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          if (BCC_A(i + 1)) {
            listing[i + 1] = "\tjcs " + pas.System.Copy(listing[i + 5],6,256)}
           else if (BNE_A(i + 1)) {
            listing[i + 1] = "\tjeq " + pas.System.Copy(listing[i + 5],6,256)}
           else listing[i + 1] = "\tjne " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              listing[p] = "";
              break;
            };
          };
          return false;
        };
        if (LDY_1(i) && LDA(i + 1) && SEQ(i + 2) && DEY(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          listing[i] = "";
          listing[i + 3] = "\tjmp " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if (LDY_1(i) && LDA_Y(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && CMP_STACK(i + 4)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
          listing[i + 4] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (STA_STACK(i) && LDY_1(i + 1) && LDA_STACK(i + 2) && AND_ORA_EOR(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i] = "";
          listing[i + 2] = "";
          return false;
        };
        if (AND_ORA_EOR(i) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA_STACK(i + 3) && CMP(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 1] = "";
          listing[i + 3] = listing[i];
          listing[i] = "";
          return false;
        };
        if (STA_STACK(i) && LDA_A(i + 1) && (IY(i + 1) === false) && LDY_1(i + 2) && ORA_STACK(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 3] = "\tora " + pas.System.Copy(listing[i + 1],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && LDY_1(i + 1) && ORA_IM_0(i + 2)) {
          listing[i + 2] = listing[i];
          listing[i] = "";
          return false;
        };
        if (LDA(i) && LDY_1(i + 1) && CMP(i + 2) && BNE(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
          listing[i] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (CMP_STACK(i + 8) && LDA(i) && AND_IM(i + 1) && (listing[i + 1] === listing[i + 4]) && STA_STACK(i + 2) && LDA(i + 3) && STA_STACK(i + 5) && LDY_1(i + 6) && LDA_STACK(i + 7) && (BEQ(i + 9) || BNE(i + 9)) && DEY(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 5] = "\tldy #1";
          listing[i + 6] = listing[i];
          listing[i + 7] = "\teor " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 8] = listing[i + 4];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (CMP_STACK(i + 10) && LDY_IM(i) && LDA(i + 1) && AND_IM(i + 2) && (listing[i + 2] === listing[i + 6]) && STA_STACK(i + 3) && LDY_IM(i + 4) && LDA(i + 5) && STA_STACK(i + 7) && LDY_1(i + 8) && LDA_STACK(i + 9) && (BEQ(i + 11) || BNE(i + 11)) && DEY(i + 12)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
          listing[i + 9] = "\tldy #1";
          listing[i + 10] = listing[i + 6];
          listing[i + 2] = listing[i + 4];
          listing[i + 3] = "\teor " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (CMP_STACK(i + 12) && MWY_BP2(i) && (listing[i] === listing[i + 5]) && LDY_IM(i + 1) && LDA_BP2_Y(i + 2) && AND_IM(i + 3) && (listing[i + 3] === listing[i + 8]) && STA_STACK(i + 4) && LDY_IM(i + 6) && LDA_BP2_Y(i + 7) && AND_IM(i + 8) && STA_STACK(i + 9) && LDY_1(i + 10) && LDA_STACK(i + 11) && (BEQ(i + 13) || BNE(i + 13)) && DEY(i + 14)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i + 11] = "\tldy #1";
          listing[i + 12] = listing[i + 8];
          listing[i + 3] = listing[i + 6];
          listing[i + 4] = "\teor (:bp2),y";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          return false;
        };
        if (LAB_A(i + 4) && LDY_1(i) && CMP(i + 1) && BNE(i + 2) && DEY(i + 3) && STY(i + 5) && LDA_IM_0(i + 6) && SUB(i + 7)) if (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          listing[i] = "\tldy #$00";
          listing[i + 5] = "\ttya";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (CMP(i + 9) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY_1(i + 4) && LDA_STACK(i + 5) && CMP(i + 6) && LDA_STACK(i + 8) && LDA_STACK(i + 11)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
          listing[i + 5] = listing[i];
          listing[i + 8] = listing[i];
          listing[i + 11] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (CMP(i + 15) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && AND_ORA_EOR(i + 5) && STA_STACK(i + 6) && LDY_1(i + 7) && LDA_STACK(i + 8) && CMP(i + 9) && LDA_STACK(i + 11) && CMP(i + 12) && LDA_STACK(i + 14) && LDA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
          listing[i + 11] = listing[i];
          listing[i + 14] = listing[i];
          listing[i + 17] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY_1(i + 3) && LDA_STACK(i + 4) && CMP(i + 5) && LDA_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
          listing[i + 4] = listing[i];
          listing[i + 7] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 3] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA(i + 3) && CMP_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
          listing[i + 4] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA_STACK(i + 3) && (BEQ(i + 4) || BNE(i + 4)) && DEY(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 1] = "";
          listing[i + 3] = "\tcmp #$00";
          return false;
        };
        if (CMP_STACK(i + 19) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDY_1(i + 8) && LDA(i + 9) && CMP_STACK(i + 10) && LDA(i + 12) && CMP_STACK(i + 13) && LDA(i + 15) && CMP_STACK(i + 16) && LDA(i + 18)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
          listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 13] = "\tcmp " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 16] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 19] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (CMP(i + 19) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDY_1(i + 8) && LDA_STACK(i + 9) && CMP(i + 10) && LDA_STACK(i + 12) && CMP(i + 13) && LDA_STACK(i + 15) && CMP(i + 16) && LDA_STACK(i + 18)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 9] = listing[i + 6];
          listing[i + 12] = listing[i + 4];
          listing[i + 15] = listing[i + 2];
          listing[i + 18] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (CMP_STACK(i + 18) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && STA_STACK(i + 6) && LDY_1(i + 7) && LDA(i + 8) && CMP_STACK(i + 9) && LDA(i + 11) && CMP_STACK(i + 12) && LDA(i + 14) && CMP_STACK(i + 15) && LDA(i + 17)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 12] = "\tcmp " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 15] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 18] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          return false;
        };
        if (CMP_STACK(i + 9) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDY_1(i + 4) && LDA(i + 5) && CMP_STACK(i + 6) && LDA(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
          listing[i + 6] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (CMP_STACK(i + 4) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
          listing[i + 4] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP_STACK(i + 5) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LDA_Y(i + 3) && LDY_1(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i + 5] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP_STACK(i + 6) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && INY(i + 3) && LDA_Y(i + 4) && LDY_1(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 6] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP_STACK(i + 7) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LDA_Y(i + 3) && STA_STACK(i + 4) && LDY_1(i + 5) && LDA(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP_STACK(i + 7) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && TAY(i + 4) && LDA_Y(i + 5) && LDY_1(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          listing[i + 7] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP_STACK(i + 5) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && STA_STACK(i + 3) && LDA_VAL(i + 4) && LDA_VAL(i + 6) && SBC_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
          listing[i + 5] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i + 7] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (CMP_STACK(i + 8) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && CMP_STACK(i + 5) && (BEQ(i + 6) || BNE(i + 6)) && LDA_A(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
          listing[i + 5] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 8] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (CMP(i + 15) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDA_STACK(i + 8) && CMP(i + 9) && LDA_STACK(i + 11) && CMP(i + 12) && LDA_STACK(i + 14) && LDA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 8] = listing[i + 6];
          listing[i + 11] = listing[i + 4];
          listing[i + 14] = listing[i + 2];
          listing[i + 17] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (CMP_STACK(i + 18) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDA_A(i + 8) && CMP_STACK(i + 9) && LDA_A(i + 11) && CMP_STACK(i + 12) && LDA_A(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
          listing[i + 9] = "\tcmp " + pas.System.Copy(listing[i + 6],6,256);
          listing[i + 12] = "\tcmp " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 15] = "\tcmp " + pas.System.Copy(listing[i + 2],6,256);
          listing[i + 18] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (CMP_STACK(i + 3) && LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
          listing[i + 3] = "\tcmp " + pas.System.Copy(listing[i],6,256);
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP(i + 3) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (BEQ(i + 4) || BNE(i + 4)) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i + 5] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (BNE(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && LDA_STACK(i + 6)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
          listing[i + 4] = listing[i + 2];
          listing[i + 6] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (BNE(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && CMP(i + 3) && SKIP(i + 4) && LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
          listing[i + 6] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (CMP_STACK(i + 6) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
          listing[i + 5] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          return false;
        };
        if (BNE(i + 6) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && CMP_VAL(i + 5) && LDA_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
          listing[i + 4] = listing[i + 2];
          listing[i + 7] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (CMP_STACK(i + 7) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && SKIP(i + 8)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if (BNE(i + 13) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && BNE(i + 9) && LDA_STACK(i + 10) && BNE(i + 11) && LDA_STACK(i + 12) && LDA_STACK(i + 14)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 8] = listing[i + 6];
          listing[i + 10] = listing[i + 4];
          listing[i + 12] = listing[i + 2];
          listing[i + 14] = listing[i];
          listing[i] = "";
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          return false;
        };
        if (BNE(i + 20) && ADD_SUB(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_IM_0(i + 5) && ADC_SBC_IM_0(i + 6) && STA_STACK(i + 7) && LDA_IM_0(i + 8) && ADC_SBC_IM_0(i + 9) && STA_STACK(i + 10) && LDY_1(i + 11) && LDA_IM_0(i + 12) && CMP_STACK(i + 13) && BNE(i + 14) && LDA_IM_0(i + 15) && CMP_STACK(i + 16) && BNE(i + 17) && LDA_IM_0(i + 18) && CMP_STACK(i + 19) && LDA_A(i + 21) && CMP_STACK(i + 22)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 12] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          return false;
        };
        if (BNE(i + 21) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDA_IM_0(i + 9) && ADC_SBC_IM_0(i + 10) && STA_STACK(i + 11) && LDY_1(i + 12) && LDA_STACK(i + 13) && CMP_IM_0(i + 14) && BNE(i + 15) && LDA_STACK(i + 16) && CMP_IM_0(i + 17) && BNE(i + 18) && LDA_STACK(i + 19) && CMP_VAL(i + 20) && LDA_STACK(i + 22) && CMP_VAL(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          listing[i + 16] = "";
          listing[i + 17] = "";
          listing[i + 18] = "";
          return false;
        };
        if (DEY(i + 7) && STA_STACK(i) && LDA(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY_IM_0(i + 4) && LDA_STACK(i + 5) && SPL(i + 6) && STA_STACK(i + 8) && STY_STACK(i + 9) && STY_STACK(i + 10)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          return false;
        };
        if (ADC_SBC(i + 12) && LDY_IM_0(i) && LDA(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDA_STACK(i + 8) && ADD_SUB(i + 9) && STA(i + 10) && LDA_STACK(i + 11) && STA(i + 13) && (ADC_SBC(i + 15) === false)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 11] = "\ttya";
          return false;
        };
        if (LAB_A(i + 20) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && CMP_STACK(i + 10) && BNE(i + 11) && LDA_A(i + 12) && CMP_STACK(i + 13) && BNE(i + 14) && LDA_A(i + 15) && CMP_STACK(i + 16) && BNE(i + 17) && LDA_A(i + 18) && CMP_STACK(i + 19)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
          listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i + 7],6,256);
          listing[i + 13] = "\tcmp " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 16] = "\tcmp " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 19] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          return false;
        };
        if (LAB_A(i + 16) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && CMP(i + 6) && BNE(i + 7) && LDA_A(i + 8) && CMP(i + 9) && BNE(i + 10) && LDA_A(i + 11) && CMP_STACK(i + 12) && BNE(i + 13) && LDA_A(i + 14) && CMP_STACK(i + 15)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
          listing[i + 12] = "\tcmp " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 15] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (LAB_A(i + 14) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && CMP(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP(i + 10) && BNE(i + 11) && LDA_A(i + 12) && CMP_STACK(i + 13)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) {
          listing[i + 13] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (CMP_STACK(i + 6) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && LDA_A(i + 7) && SBC_STACK(i + 8)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
          listing[i + 6] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 8] = "\tsbc " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          return false;
        };
        if (CMP_STACK(i + 4) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
          listing[i + 4] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (BNE(i + 5) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && CMP(i + 4) && LDA_A(i + 6) && CMP_STACK(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
          listing[i + 7] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          return false;
        };
        if (BNE(i + 8) && LDY(i) && (listing[i] === listing[i + 5]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 6) && CMP_STACK(i + 7) && LDA_A(i + 9) && CMP_STACK(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
          listing[i + 7] = "\tcmp " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 10] = "\tcmp " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if (CMP_STACK(i + 7) && LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
          listing[i + 6] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
          listing[i + 7] = "\tcmp " + pas.System.Copy(listing[i + 4],6,256);
          listing[i + 1] = "";
          listing[i + 2] = "";
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          return false;
        };
        if (BNE(i + 12) && LDA_A(i) && (listing[i] === listing[i + 7]) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && ASL_A(i + 8) && TAY(i + 9) && LDA_A(i + 10) && CMP_STACK(i + 11) && LDA_A(i + 13) && CMP_STACK(i + 14)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
          listing[i + 11] = "\tcmp " + pas.System.Copy(listing[i + 5],6,256);
          listing[i + 14] = "\tcmp " + pas.System.Copy(listing[i + 3],6,256);
          listing[i + 3] = "";
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          return false;
        };
        if (BNE(i + 24) && LDA_A(i) && (listing[i] === listing[i + 12]) && ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_ADR(i + 6) && STA_STACK(i + 7) && LDA_ADR(i + 8) && STA_STACK(i + 9) && LDA_ADR(i + 10) && STA_STACK(i + 11) && ASL_A(i + 13) && ASL_A(i + 14) && TAY(i + 15) && LDA_STACK(i + 16) && CMP(i + 17) && BNE(i + 18) && LDA_STACK(i + 19) && CMP(i + 20) && BNE(i + 21) && LDA_STACK(i + 22) && CMP(i + 23) && LDA_STACK(i + 25) && CMP(i + 26)) if ((pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 25],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 16],6,256))) {
          listing[i + 16] = listing[i + 10];
          listing[i + 19] = listing[i + 8];
          listing[i + 22] = listing[i + 6];
          listing[i + 25] = listing[i + 4];
          listing[i + 4] = "";
          listing[i + 5] = "";
          listing[i + 6] = "";
          listing[i + 7] = "";
          listing[i + 8] = "";
          listing[i + 9] = "";
          listing[i + 10] = "";
          listing[i + 11] = "";
          listing[i + 12] = "";
          listing[i + 13] = "";
          listing[i + 14] = "";
          listing[i + 15] = "";
          return false;
        };
        return Result;
      };
      function PeepholeOptimization_STACK() {
        var Result = false;
        var i = 0;
        var tmp = "";
        Result = true;
        tmp = "";
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (JSR(i) || CMP(i) || SKIP(i)) break;
          if (MWY_BP2(i)) if (tmp === listing[i]) {
            listing[i] = ""}
           else tmp = listing[i];
        };
        Rebuild();
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (opt_LT_GTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_LTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_GT(i) === false) {
            Result = false;
            break;
          };
          if (opt_NE_EQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_CMP(i) === false) {
            Result = false;
            break;
          };
          if (opt_BRANCH(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_INX(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_ADD(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_CMP(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_ADR(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_AL_CL(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_AX_CX(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_EAX_ECX(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_PRINT(i) === false) {
            Result = false;
            break;
          };
        };
        return Result;
      };
      function OptimizeEAX() {
        var Result = false;
        var i = 0;
        var tmp = "";
        Result = false;
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if ((pas.System.Pos(" :eax",listing[i]) === 5) && (pas.System.Pos("\t.if",listing[i + 1]) === 0)) {
            Result = true;
            tmp = pas.System.Copy(listing[i],6,256);
            if (tmp === ":eax") {
              listing[i] = pas.System.Copy(listing[i],1,5) + ":STACKORIGIN+16"}
             else if (tmp === ":eax+1") {
              listing[i] = pas.System.Copy(listing[i],1,5) + ":STACKORIGIN+STACKWIDTH+16"}
             else if (tmp === ":eax+2") {
              listing[i] = pas.System.Copy(listing[i],1,5) + ":STACKORIGIN+STACKWIDTH*2+16"}
             else if (tmp === ":eax+3") listing[i] = pas.System.Copy(listing[i],1,5) + ":STACKORIGIN+STACKWIDTH*3+16";
          };
        };
        return Result;
      };
      function OptimizeEAX_OFF() {
        var i = 0;
        var tmp = "";
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.System.Pos(" :STACKORIGIN+",listing[i]) === 5) {
            tmp = pas.System.Copy(listing[i],6,256);
            if (tmp === ":STACKORIGIN+16") {
              listing[i] = pas.System.Copy(listing[i],1,5) + ":eax"}
             else if (tmp === ":STACKORIGIN+STACKWIDTH+16") {
              listing[i] = pas.System.Copy(listing[i],1,5) + ":eax+1"}
             else if (tmp === ":STACKORIGIN+STACKWIDTH*2+16") {
              listing[i] = pas.System.Copy(listing[i],1,5) + ":eax+2"}
             else if (tmp === ":STACKORIGIN+STACKWIDTH*3+16") listing[i] = pas.System.Copy(listing[i],1,5) + ":eax+3";
          };
        };
      };
      function OptimizeAssignment() {
        var k = 0;
        function opt_STA_ADD(i) {
          var Result = false;
          Result = true;
          if (STA_STACK(i) && LDA_A(i + 1) && ADD_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADC(i + 4) && STA(i + 5) && LDA(i + 6) && ADC(i + 7) && STA(i + 8) && LDA(i + 9) && ADC(i + 10) && STA(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i] = "\tasl " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 2] = "\trol " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 3] = "\trol " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADC(i + 4) && STA(i + 5) && (ADC(i + 7) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i] = "\tasl " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && (ADC(i + 4) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "\tasl " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && (ADC(i + 4) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i + 1] = "\tasl @";
            return false;
          };
          if (LDA(i) && ADD(i + 1) && ADD(i + 2) && ADD(i + 3) && STA(i + 4) && (ADC(i + 6) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i] = "\tasl " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = listing[i];
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDA(i) && ADD(i + 1) && ADD(i + 2) && ADD(i + 3) && STA(i + 4) && (ADC(i + 6) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 1] = "\tasl @";
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "";
            return false;
          };
          if ((LDA_A(i) === false) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA(i + 8) && LDA_STACK(i + 9) && ADC_SBC_IM_0(i + 10) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 6] = listing[i + 11];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 8];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i + 7];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA(i + 8) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = listing[i + 7];
            listing[i + 2] = listing[i + 8];
            listing[i + 5] = listing[i + 11];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDA(i) && (LDA_IM_0(i) === false) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && (ADD_IM_0(i + 1) === false) && (SUB_IM_0(i + 1) === false) && STA_STACK(i + 2) && (LDA_IM(i + 3) === false) && LDA(i + 3) && (IY(i + 3) === false) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA_VAL(i + 8) && (IY(i + 8) === false) && LDA_STACK(i + 9) && ADC_SBC_IM_0(i + 10) && STA(i + 11) && (ADC_SBC(i + 13) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = "\tldy " + pas.System.Copy(listing[i + 3],6,256);
            if (ADC_IM_0(i + 4)) {
              listing[i + 3] = "\tscc";
              listing[i + 4] = "\tiny";
            } else {
              listing[i + 3] = "\tscs";
              listing[i + 4] = "\tdey";
            };
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 9] = "\ttya";
            if (ADC_IM_0(i + 10)) {
              listing[i + 9] = "\tscc";
              listing[i + 10] = "\tiny";
              listing[i + 11] = "\tsty " + pas.System.Copy(listing[i + 11],6,256);
            } else {
              listing[i + 9] = "\tscs";
              listing[i + 10] = "\tdey";
              listing[i + 11] = "\tsty " + pas.System.Copy(listing[i + 11],6,256);
            };
            return false;
          };
          if ((((i > 0) && LDA_IM_0(i - 1)) === false) && ADD_SUB(i) && (ADD_IM_0(i) === false) && (SUB_IM_0(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && ADC_IM_0(i + 9) && STA_VAL(i + 10) && (IY(i + 10) === false) && (ADC(i + 12) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 4] = listing[i + 10];
            if ((listing[i + 6] === "\tadd #$01") && (pas.System.Pos(listing[i + 7],listing[i + 10]) > 0)) {
              listing[i + 1] = listing[i + 7];
              listing[i + 5] = "\tinc " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 6] = "\tsne";
              listing[i + 7] = "\tinc " + pas.System.Copy(listing[i + 10],6,256);
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
            } else {
              if ((IY(i) === false) && (IY(i + 2) === false)) {
                listing[i + 1] = "\ttay";
                listing[i + 5] = "\ttya";
              };
              listing[i + 8] = "\tscc";
              listing[i + 9] = "\tinc " + pas.System.Copy(listing[i + 4],6,256);
              listing[i + 10] = "";
            };
            return false;
          };
          if ((((i > 0) && LDA_IM_0(i - 1)) === false) && ADD_SUB(i) && (ADD_IM_0(i) === false) && (SUB_IM_0(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && SUB(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && SBC_IM_0(i + 9) && STA_VAL(i + 10) && (IY(i + 10) === false) && (SBC(i + 12) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 4] = listing[i + 10];
            if ((listing[i + 6] === "\tsub #$01") && (pas.System.Pos(listing[i + 7],listing[i + 10]) > 0)) {
              listing[i + 1] = listing[i + 7];
              listing[i + 8] = "\tdec " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 5] = "\tlda " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 6] = "\tsne";
              listing[i + 7] = "\tdec " + pas.System.Copy(listing[i + 10],6,256);
              listing[i + 9] = "";
              listing[i + 10] = "";
            } else {
              if ((IY(i) === false) && (IY(i + 2) === false)) {
                listing[i + 1] = "\ttay";
                listing[i + 5] = "\ttya";
              };
              listing[i + 8] = "\tscs";
              listing[i + 9] = "\tdec " + pas.System.Copy(listing[i + 4],6,256);
              listing[i + 10] = "";
            };
            return false;
          };
          if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && STY_STACK(i + 3) && LDA(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA(i + 7) && ADC_SBC(i + 8) && STA(i + 9) && (ADC_SBC(i + 11) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA(i + 3) && ADD_SUB(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA(i + 8) && (ADC_SBC(i + 10) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && STA_A(i + 7)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i] = listing[i + 5];
            listing[i + 3] = listing[i + 7];
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (LDA_STACK(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA(i + 8) && (ADC_SBC(i + 10) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA_STACK(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_IM_0(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA(i + 13) && LDA_VAL(i + 14) && ADD_STACK(i + 15) && STA(i + 16) && (ADC(i + 18) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (listing[i] === listing[i + 12])) {
            listing[i + 2] = listing[i + 13];
            listing[i + 4] = "\tadc " + pas.System.Copy(listing[i + 14],6,256);
            listing[i + 5] = listing[i + 16];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && LDA(i + 2) && ADD_SUB_STACK(i + 3) && STA(i + 4) && (ADC_SBC(i + 6) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && ASL_STACK(i + 6) && LDA(i + 7) && ADD_SUB_STACK(i + 8) && STA(i + 9) && (ADC_SBC(i + 11) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8) && STA(i + 9) && (ADC_SBC(i + 11) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          return Result;
        };
        function opt_STA_LDY(i) {
          var Result = false;
          var p = 0;
          var tmp = "";
          Result = true;
          if (LDY_STACK(i) && (LDA_ADR(i + 1) || STA_ADR(i + 1) || BEQ(i + 1) || STA_ADR(i + 2) || STA_ADR(i + 3))) {
            tmp = "\tsta " + pas.System.Copy(listing[i],6,256);
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if ((listing[p] === tmp) && (LDA_STACK(p - 1) === false)) {
                if ((p > 1) && ASL_A(p - 2) && ROL_STACK(p - 1)) if (pas.System.Copy(listing[p - 1],6,256) !== pas.System.Copy(listing[p],6,256)) {
                  listing[p - 1] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && ASL_A(p - 3) && ROL_STACK(p - 2) && ASL_A(p - 1)) if (pas.System.Copy(listing[p - 2],6,256) !== pas.System.Copy(listing[p],6,256)) {
                  listing[p - 2] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_A(p - 4) && ROL_STACK(p - 3) && ASL_A(p - 2) && ASL_A(p - 1)) if (pas.System.Copy(listing[p - 3],6,256) !== pas.System.Copy(listing[p],6,256)) {
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && ASL_A(p - 3) && ROL_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 2],6,256) !== pas.System.Copy(listing[p],6,256)) {
                  listing[p - 2] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_STACK(p - 4) && ROL_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p - 2],6,256)) && (pas.System.Copy(listing[p - 2],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && ADD_SUB(p - 8) && STA_STACK(p - 7) && LDA_STACK(p - 6) && ADC_SBC(p - 5) && STA_STACK(p - 4) && ASL_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 7],6,256) === pas.System.Copy(listing[p - 3],6,256)) && (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p - 2],6,256)) && (pas.System.Copy(listing[p - 2],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 7] = "";
                  listing[p - 6] = "";
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  listing[p - 3] = "";
                  listing[p - 2] = "\tasl @";
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_A(p - 4) && ROL_STACK(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 3],6,256) !== pas.System.Copy(listing[p],6,256)) {
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ASL_A(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 4],6,256) !== pas.System.Copy(listing[p],6,256)) {
                  listing[p - 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_STACK(p - 6) && ROL_A(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && ADD_SUB(p - 8) && STA_STACK(p - 7) && LDA_STACK(p - 6) && ADC_SBC(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 7],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 6] = "";
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && ASL_A(p - 8) && ROL_STACK(p - 7) && ADD_SUB_STACK(p - 6) && ASL_A(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 7],6,256) !== pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 4],6,256)) && (pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 7] = "";
                  Result = false;
                  break;
                };
                if ((p > 6) && ASL_A(p - 7) && ROL_STACK(p - 6) && ADD_SUB_STACK(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 6],6,256) !== pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 5],6,256) === pas.System.Copy(listing[p - 4],6,256)) && (pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 6] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_A(p - 4) && ROL_STACK(p - 3) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 3],6,256) !== pas.System.Copy(listing[p - 1],6,256)) {
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ASL_A(p - 3) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 4],6,256) !== pas.System.Copy(listing[p - 1],6,256)) {
                  listing[p - 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_A(p - 6) && ROL_STACK(p - 5) && ASL_A(p - 4) && ASL_A(p - 3) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 5],6,256) !== pas.System.Copy(listing[p - 1],6,256)) {
                  listing[p - 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && ASL_A(p - 8) && ROL_STACK(p - 7) && ASL_A(p - 6) && ADD_SUB_STACK(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 7],6,256) !== pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 5],6,256) === pas.System.Copy(listing[p - 4],6,256)) && (pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 7] = "";
                  Result = false;
                  break;
                };
                if ((p > 8) && ASL_A(p - 9) && ROL_STACK(p - 8) && ASL_A(p - 7) && ASL_A(p - 6) && ADD_SUB_STACK(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 8],6,256) !== pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 5],6,256) === pas.System.Copy(listing[p - 4],6,256)) && (pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 8] = "";
                  Result = false;
                  break;
                };
                if ((p > 8) && ASL_A(p - 9) && ROL_STACK(p - 8) && ASL_A(p - 7) && ADD_SUB_STACK(p - 6) && ASL_A(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 8],6,256) !== pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 4],6,256)) && (pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 8] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && ADD_SUB(p - 1) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 6) && LDA_STACK(p - 7) && ADC_SBC(p - 6) && ASL_STACK(p - 5) && ROL_A(p - 4) && STA_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 5],6,256) === pas.System.Copy(listing[p - 2],6,256)) && (pas.System.Copy(listing[p - 2],6,256) === pas.System.Copy(listing[p],6,256))) {
                  listing[p - 6] = "\tsta #$00";
                  listing[p - 4] = "";
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ADD_SUB_STACK(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 4],6,256) !== pas.System.Copy(listing[p - 3],6,256))) {
                  listing[p - 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ADD_SUB_VAL(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  listing[p - 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_A(p - 6) && ROL_STACK(p - 5) && ASL_A(p - 4) && ADD_SUB_STACK(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if ((pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p],6,256)) && (pas.System.Copy(listing[p - 5],6,256) !== pas.System.Copy(listing[p - 3],6,256))) {
                  listing[p - 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_A(p - 6) && ROL_STACK(p - 5) && ASL_A(p - 4) && ADD_SUB_VAL(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  listing[p - 5] = "";
                  Result = false;
                  break;
                };
                break;
              } else if ((pas.System.Pos(pas.System.Copy(listing[i],6,256),listing[p]) > 0) || LAB_A(i) || (listing[i] === "\teif") || ((pas.System.Pos("\tjsr ",listing[i]) === 1) && (pas.System.Pos("\tjsr @",listing[i]) === 0))) break;
            };
            if (Result === false) return false;
          };
          return Result;
        };
        function opt_STA_BP(i) {
          var Result = false;
          var p = 0;
          Result = true;
          if (STA_BP_Y(i + 8) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDY_STACK(i + 6) && LDA_STACK(i + 7)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDY_STACK(i + 6) && STY_BP_1(i + 7) && LDY_STACK(i + 8) && LDA_STACK(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDY_STACK(i + 13) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_BP_1(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_STACK(i + 8) && SCC(i + 9) && INC_BP_1(i + 10) && LDA(i + 11) && (ADD_SUB(i + 12) || AND_ORA_EOR(i + 12))) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
            listing[i + 2] = "\ttay";
            listing[i + 6] = "\ttya";
            listing[i + 8] = "\ttay";
            listing[i + 13] = "";
            return false;
          };
          if (MVY_IM(i) && (pas.System.Pos(" :bp+1",listing[i]) > 0) && LDY_IM(i + 1) && LDA_A(i + 2) && STA_BP_Y(i + 3)) {
            p = GetWORD(i + 1,i);
            listing[i + 3] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (MVY_IM(i) && (pas.System.Pos(" :bp+1",listing[i]) > 0) && LDY(i + 1) && (LDY_IM(i + 1) === false) && LDA_A(i + 2) && STA_BP_Y(i + 3)) {
            p = GetBYTE(i);
            listing[i + 3] = "\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y";
            listing[i] = "";
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY_IM(i + 2) && LDA_A(i + 3) && STA_BP_Y(i + 4)) {
            p = GetWORD(i + 2,i);
            listing[i + 4] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY_IM(i + 2) && STA_BP_Y(i + 3)) {
            p = GetWORD(i + 2,i);
            listing[i + 3] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY(i + 2) && (LDY_IM(i + 2) === false) && LDA_A(i + 3) && STA_BP_Y(i + 4)) {
            p = GetBYTE(i);
            listing[i] = "";
            listing[i + 1] = "";
            if ((p === 0) && (LDY_STACK(i + 2) === false)) {
              listing[i + 4] = "\tsta " + pas.System.Copy(listing[i + 2],6,256);
              listing[i + 2] = "";
            } else listing[i + 4] = "\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y";
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY(i + 2) && (LDY_IM(i + 2) === false) && STA_BP_Y(i + 3)) {
            p = GetBYTE(i);
            if ((p === 0) && (LDY_STACK(i + 2) === false)) {
              listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 2],6,256);
              listing[i + 2] = "";
            } else listing[i + 3] = "\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y";
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_BP_Y(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA_IM(i + 2) && STA_BP_1(i + 3) && LDY(i + 4) && (LDY_IM(i + 4) === false) && LDA_A(i + 5) && AND_ORA_EOR(i + 6) && LDY_STACK(i + 7)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            p = GetBYTE(i + 2);
            listing[i + 7] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = "\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP_Y(i + 7) && LDA(i) && STA_STACK(i + 1) && LDA_IM(i + 2) && STA_BP_1(i + 3) && LDY(i + 4) && (LDY_IM(i + 4) === false) && LDA_A(i + 5) && LDY_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            p = GetBYTE(i + 2);
            listing[i + 6] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 7] = "\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_BP_Y(i + 5) && LDA(i) && STA_STACK(i + 1) && LDY_IM(i + 2) && STY_BP_1(i + 3) && LDY_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            p = GetBYTE(i + 2);
            listing[i + 4] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 5] = "\tlda $" + pas.SysUtils.IntToHex(p,2) + "00,y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP_Y(i + 6) && ADD_IM(i) && TAY(i + 1) && LDA_IM(i + 2) && ADC_IM_0(i + 3) && STA_BP_1(i + 4) && LDA_A(i + 5) && (IY(i + 5) === false)) {
            p = GetWORD(i,i + 2);
            listing[i] = "\ttay";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 6] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            return false;
          };
          return Result;
        };
        function opt_STA_LSR(i) {
          var Result = false;
          var p = 0;
          Result = true;
          if (LSR_STACK(i) && ROR_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_A(i + 4) && (LDA_STACK(i + 5) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            p = i;
            while (LSR_STACK(p) && ROR_STACK(p + 1)) p -= 2;
            if (LDA_A(p) && STA_STACK(p + 1) && (pas.System.Copy(listing[p + 1],6,256) === pas.System.Copy(listing[i],6,256))) {
              p = i;
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                listing[p] = "\tlsr @";
                p -= 2;
              };
              listing[p + 1] = "";
              return false;
            };
            if (LDA_A(p) && STA_STACK(p + 1) && (pas.System.Copy(listing[p + 1],6,256) === pas.System.Copy(listing[i + 1],6,256))) {
              p = i;
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                listing[p + 1] = "\tror @";
                p -= 2;
              };
              listing[p + 1] = "";
              listing[i + 2] = "";
              return false;
            };
          };
          if (LSR_STACK(i) && ROR_STACK(i + 1) && LDA_STACK(i + 2) && STA_A(i + 3) && (LDA_STACK(i + 4) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            p = i;
            while (LSR_STACK(p) && ROR_STACK(p + 1)) p -= 2;
            if (LDA_A(p) && STA_STACK(p + 1) && (pas.System.Copy(listing[p + 1],6,256) === pas.System.Copy(listing[i],6,256))) {
              p = i;
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                listing[p] = "\tlsr @";
                p -= 2;
              };
              listing[p + 1] = "";
              return false;
            };
            if (LDA_A(p) && STA_STACK(p + 1) && (pas.System.Copy(listing[p + 1],6,256) === pas.System.Copy(listing[i + 1],6,256))) {
              p = i;
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                listing[p + 1] = "\tror @";
                p -= 2;
              };
              listing[p + 1] = "";
              listing[i + 2] = "";
              return false;
            };
          };
          if (STA_STACK(i) && LDA_IM_0(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4) && ROR_STACK(i + 5) && ROR_STACK(i + 6) && (ROR(i + 7) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            p = i + 4;
            while (LSR_STACK(p) && ROR_STACK(p + 1) && ROR_STACK(p + 2)) {
              listing[p] = "\tlsr @";
              listing[p + 1] = "";
              listing[p + 2] = "";
              p += 3;
            };
            listing[p - 1] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LSR_STACK(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3)) {
            if (LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && (ADC_SBC(i + 8) === false)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "\tlsr " + pas.System.Copy(listing[p - 2],6,256);
                p -= 4;
              };
              listing[i + 1] = "\tlsr " + pas.System.Copy(listing[i + 1],6,256);
              listing[i] = "";
              return false;
            };
            if (LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && (LDA_STACK(i + 7) === false) && (ADC_SBC(i + 8) === false)) if (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "";
                listing[p - 1] = "\tlsr " + pas.System.Copy(listing[p - 1],6,256);
                p -= 4;
              };
              listing[i + 2] = "\tlsr " + pas.System.Copy(listing[i + 2],6,256);
              listing[i] = "";
              listing[i + 1] = "";
              return false;
            };
            if (LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8) && STA_VAL(i + 9) && (LDA_STACK(i + 10) === false) && (ADC_SBC(i + 11) === false)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "\tlsr " + pas.System.Copy(listing[p - 2],6,256);
                p -= 4;
              };
              listing[i + 1] = "\tlsr " + pas.System.Copy(listing[i + 1],6,256);
              listing[i] = "";
              return false;
            };
            if (LDA_STACK(i + 4) && STA_VAL(i + 5) && (LDA_STACK(i + 6) === false)) if (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "";
                listing[p - 1] = "\tlsr " + pas.System.Copy(listing[p - 1],6,256);
                p -= 4;
              };
              listing[i + 2] = "\tlsr " + pas.System.Copy(listing[i + 2],6,256);
              listing[i] = "";
              listing[i + 1] = "";
              return false;
            };
            if (LDA_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (LDA_STACK(i + 8) === false)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "\tlsr " + pas.System.Copy(listing[p - 2],6,256);
                p -= 4;
              };
              listing[i + 1] = "\tlsr " + pas.System.Copy(listing[i + 1],6,256);
              listing[i] = "";
              return false;
            };
            if (LDA_VAL(i + 4) && ADD_SUB_STACK(i + 5) && STA_VAL(i + 6) && (LDA_STACK(i + 7) === false) && (ADC_SBC(i + 8) === false)) if (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "";
                listing[p - 1] = "\tlsr " + pas.System.Copy(listing[p - 1],6,256);
                p -= 4;
              };
              listing[i + 2] = "\tlsr " + pas.System.Copy(listing[i + 2],6,256);
              listing[i] = "";
              listing[i + 1] = "";
              return false;
            };
            if (LDA_STACK(i + 4) && AND_ORA_EOR_VAL(i + 5) && STA_VAL(i + 6) && (LDA_STACK(i + 7) === false) && (AND_ORA_EOR(i + 8) === false)) if (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
              p = i - 1;
              while ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && (listing[p - 1] === listing[i + 2]) && (listing[p] === listing[i + 3])) {
                listing[p - 3] = "";
                listing[p - 2] = "";
                listing[p - 1] = "\tlsr " + pas.System.Copy(listing[p - 1],6,256);
                p -= 4;
              };
              listing[i + 2] = "\tlsr " + pas.System.Copy(listing[i + 2],6,256);
              listing[i] = "";
              listing[i + 1] = "";
              return false;
            };
          };
          return Result;
        };
        function opt_STA_IMUL(i) {
          var Result = false;
          Result = true;
          if ((listing[i] === "\tjsr @mul40") && LDA(i + 1) && ADD_EAX(i + 2)) {
            listing[i + 1] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            return false;
          };
          if ((listing[i] === "\tjsr @mul40") && LDA_EAX(i + 1) && ADD_SUB(i + 2)) {
            listing[i + 1] = "";
            return false;
          };
          if (LDA_IM_0(i) && (listing[i + 1] === "\tsta :eax+2") && LDA_IM_0(i + 2) && (listing[i + 3] === "\tsta :eax+3") && LDA_A(i + 4) && STA_ECX(i + 5) && LDA_A(i + 6) && STA_ECX_1(i + 7) && LDA_IM_0(i + 8) && (listing[i + 9] === "\tsta :ecx+2") && LDA_IM_0(i + 10) && (listing[i + 11] === "\tsta :ecx+3") && (listing[i + 12] === "\tjsr imulECX")) {
            listing[i] = listing[i + 4];
            listing[i + 1] = listing[i + 5];
            listing[i + 2] = listing[i + 6];
            listing[i + 3] = listing[i + 7];
            listing[i + 4] = "\t.ifdef fmulinit";
            listing[i + 5] = "\tfmulu_16";
            listing[i + 6] = "\tels";
            listing[i + 7] = "\timulCX";
            listing[i + 8] = "\teif";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (STA_EAX(i) && LDA_IM_0(i + 1) && ADC_SBC_IM_0(i + 2) && STA_EAX_1(i + 3) && LDA_IM_0(i + 4) && ADC_SBC_IM_0(i + 5) && (listing[i + 6] === "\tsta :eax+2") && LDA_IM_0(i + 7) && ADC_SBC_IM_0(i + 8) && (listing[i + 9] === "\tsta :eax+3") && LDA(i + 10) && STA_ECX(i + 11) && LDA_IM_0(i + 12) && STA_ECX_1(i + 13) && (listing[i + 14] === "\tsta :ecx+2") && (listing[i + 15] === "\tsta :ecx+3") && (listing[i + 16] === "\tjsr imulECX")) {
            listing[i + 1] = listing[i + 10];
            listing[i + 2] = listing[i + 11];
            listing[i + 3] = "\t.ifdef fmulinit";
            listing[i + 4] = "\tfmulu_8";
            listing[i + 5] = "\tels";
            listing[i + 6] = "\timulCL";
            listing[i + 7] = "\teif";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            return false;
          };
          return Result;
        };
        function opt_STA_IMUL_CX(i) {
          var Result = false;
          var tmp = "";
          Result = true;
          if (IFDEF_MUL16(i + 8)) {
            if (LDA(i) && (LDA_IM(i) === false) && STA_ECX(i + 1) && LDA(i + 2) && (LDA_IM(i + 2) === false) && STA_ECX_1(i + 3) && LDA_IM(i + 4) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7)) {
              tmp = listing[i];
              listing[i] = listing[i + 4];
              listing[i + 4] = tmp;
              tmp = listing[i + 2];
              listing[i + 2] = listing[i + 6];
              listing[i + 6] = tmp;
              return false;
            };
            if (LDA(i) && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7)) {
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 9] = "\tfmulu_8";
              listing[i + 11] = "\timulCL";
              return false;
            };
            if ((listing[i] === "\tlda #$02") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
              if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && ADC_SBC(i + 17) && STA(i + 18) && (LDA_EAX_X(i + 19) === false)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tsta :eax";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
              if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tsta :eax";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tsta :eax";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
            if (STA_EAX(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_EAX_1(i + 3) && (listing[i + 4] === "\tlda #$02") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                if ((STA_STACK(i + 14) === false) && (STA_STACK(i + 16) === false)) {
                  listing[i] = listing[i + 14];
                  listing[i + 3] = listing[i + 16];
                  listing[i + 4] = "\tasl " + pas.System.Copy(listing[i + 14],6,256);
                  listing[i + 5] = "\trol " + pas.System.Copy(listing[i + 16],6,256);
                  listing[i + 13] = "";
                  listing[i + 14] = "";
                  listing[i + 15] = "";
                  listing[i + 16] = "";
                } else {
                  listing[i + 4] = "\tasl :eax";
                  listing[i + 5] = "\trol :eax+1";
                };
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
            if ((listing[i] === "\tlda #$04") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tasl @";
                listing[i + 6] = "\trol :eax+1";
                listing[i + 7] = "\tsta :eax";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
              if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tasl @";
                listing[i + 6] = "\trol :eax+1";
                listing[i + 7] = "\tsta :eax";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
            if (STA_EAX(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_EAX_1(i + 3) && (listing[i + 4] === "\tlda #$04") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                if ((STA_STACK(i + 14) === false) && (STA_STACK(i + 16) === false)) {
                  listing[i] = listing[i + 14];
                  listing[i + 3] = listing[i + 16];
                  listing[i + 4] = "\tasl " + pas.System.Copy(listing[i + 14],6,256);
                  listing[i + 5] = "\trol " + pas.System.Copy(listing[i + 16],6,256);
                  listing[i + 6] = "\tasl " + pas.System.Copy(listing[i + 14],6,256);
                  listing[i + 7] = "\trol " + pas.System.Copy(listing[i + 16],6,256);
                  listing[i + 13] = "";
                  listing[i + 14] = "";
                  listing[i + 15] = "";
                  listing[i + 16] = "";
                } else {
                  listing[i + 4] = "\tasl :eax";
                  listing[i + 5] = "\trol :eax+1";
                  listing[i + 6] = "\tasl :eax";
                  listing[i + 7] = "\trol :eax+1";
                };
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
            if ((listing[i] === "\tlda #$08") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
              if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tasl @";
                listing[i + 6] = "\trol :eax+1";
                listing[i + 7] = "\tasl @";
                listing[i + 8] = "\trol :eax+1";
                listing[i + 9] = "\tsta :eax";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
              if (LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && TAY(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA_BP_1(i + 18)) {
                listing[i] = listing[i + 6];
                listing[i + 1] = listing[i + 7];
                listing[i + 2] = listing[i + 4];
                listing[i + 3] = "\tasl @";
                listing[i + 4] = "\trol :eax+1";
                listing[i + 5] = "\tasl @";
                listing[i + 6] = "\trol :eax+1";
                listing[i + 7] = "\tasl @";
                listing[i + 8] = "\trol :eax+1";
                listing[i + 9] = "\tsta :eax";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
            if (STA_EAX(i) && (LDA(i + 1) || TYA(i + 1)) && ADC_SBC(i + 2) && STA_EAX_1(i + 3) && (listing[i + 4] === "\tlda #$08") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                listing[i + 3] = "\tasl :eax";
                listing[i + 4] = "\trol @";
                listing[i + 5] = "\tasl :eax";
                listing[i + 6] = "\trol @";
                listing[i + 7] = "\tasl :eax";
                listing[i + 8] = "\trol @";
                listing[i + 9] = "\tsta :eax+1";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
              if (LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && STA(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA(i + 18) && (ADC_SBC(i + 20) === false)) {
                listing[i + 3] = "\tasl :eax";
                listing[i + 4] = "\trol @";
                listing[i + 5] = "\tasl :eax";
                listing[i + 6] = "\trol @";
                listing[i + 7] = "\tasl :eax";
                listing[i + 8] = "\trol @";
                listing[i + 9] = "\tsta :eax+1";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
            if (LDA_A(i) && STA_EAX(i + 1) && LDA_A(i + 2) && STA_EAX_1(i + 3) && (listing[i + 4] === "\tlda #$0A") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7) && LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              listing[i + 1] = listing[i + 14];
              listing[i + 3] = listing[i + 16];
              listing[i + 4] = "\ttay";
              listing[i + 5] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tasl @";
              listing[i + 7] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 8] = "\tasl @";
              listing[i + 9] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 10] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 11] = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 12] = "\ttya";
              listing[i + 13] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 14] = "\tasl " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 15] = "\trol @";
              listing[i + 16] = "\tsta " + pas.System.Copy(listing[i + 3],6,256);
              return false;
            };
            if (LDA_A(i) && STA_ECX(i + 1) && LDA_A(i + 2) && STA_ECX_1(i + 3) && (listing[i + 4] === "\tlda #$0A") && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7) && LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              listing[i + 1] = listing[i + 14];
              listing[i + 3] = listing[i + 16];
              listing[i + 4] = "\ttay";
              listing[i + 5] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tasl @";
              listing[i + 7] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 8] = "\tasl @";
              listing[i + 9] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 10] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 11] = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 12] = "\ttya";
              listing[i + 13] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 14] = "\tasl " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 15] = "\trol @";
              listing[i + 16] = "\tsta " + pas.System.Copy(listing[i + 3],6,256);
              return false;
            };
            if ((listing[i] === "\tlda #$0A") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7)) {
              if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && TAY(i + 15)) {
                listing[i] = listing[i + 4];
                listing[i + 1] = "\tasl @";
                listing[i + 2] = "\tasl @";
                listing[i + 3] = "\tadd " + pas.System.Copy(listing[i],6,256);
                listing[i + 4] = "\tasl @";
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                listing[i + 13] = "";
                return false;
              };
              if (LDA(i + 13) && ADD_SUB(i + 14) && (ADD_EAX(i + 15) || SUB_EAX(i + 15)) && TAY(i + 16)) {
                listing[i] = listing[i + 4];
                listing[i + 1] = "\tasl @";
                listing[i + 2] = "\tasl @";
                listing[i + 3] = "\tadd " + pas.System.Copy(listing[i],6,256);
                listing[i + 4] = "\tasl @";
                listing[i + 5] = "\tsta :eax";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                return false;
              };
            };
          };
          if ((listing[i] === "\tlda #$0A") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && IFDEF_MUL16(i + 4)) {
            if (LDA_EAX(i + 9) && ADD_SUB(i + 10) && TAY(i + 11)) {
              if (STA_EAX_1(i - 1) && (ADC_IM_0(i - 2) || SBC_IM_0(i - 2)) && LDA_IM_0(i - 3) && STA_EAX(i - 4)) {
                listing[i - 1] = "";
                listing[i - 2] = "";
                listing[i - 3] = "";
                listing[i] = "";
              } else listing[i] = "\tlda :eax";
              listing[i + 1] = "\tasl @";
              listing[i + 2] = "\tasl @";
              listing[i + 3] = "\tadd :eax";
              listing[i + 4] = "\tasl @";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              listing[i + 9] = "";
              return false;
            };
            if (LDA(i + 9) && AND_ORA_EOR(i + 10) && (ADD_EAX(i + 11) || SUB_EAX(i + 11)) && (TAY(i + 12) || STA_STACK(i + 12))) {
              listing[i] = "\tlda :eax";
              listing[i + 1] = "\tasl @";
              listing[i + 2] = "\tasl @";
              listing[i + 3] = "\tadd :eax";
              listing[i + 4] = "\tasl @";
              listing[i + 5] = "\tsta :eax";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              return false;
            };
          };
          if (LDY_IM_0(i) && LDA(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_EAX(i + 4) && (listing[i + 5] === "\tsty :eax+1") && (listing[i + 6] === "\tlda #$0A") && STA_ECX(i + 7) && LDA_IM_0(i + 8) && STA_ECX_1(i + 9) && IFDEF_MUL16(i + 10)) {
            if (LDA(i + 15) && (ADD_EAX(i + 16) || SUB_EAX(i + 16)) && TAY(i + 17)) {
              listing[i] = "";
              listing[i + 2] = "\tasl @";
              listing[i + 3] = "\tasl @";
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 5] = "\tasl @";
              listing[i + 6] = "\tsta :eax";
              listing[i + 7] = "";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              listing[i + 13] = "";
              listing[i + 14] = "";
              if (listing[i + 16] === "\tadd :eax") {
                listing[i + 15] = "\tadd " + pas.System.Copy(listing[i + 15],6,256)}
               else listing[i + 15] = "\tsub " + pas.System.Copy(listing[i + 15],6,256);
              listing[i + 6] = "";
              listing[i + 16] = "";
              return false;
            };
            if (LDA(i + 15) && ADD_SUB(i + 16) && (ADD_EAX(i + 17) || SUB_EAX(i + 17)) && (STA(i + 18) || TAY(i + 18))) {
              listing[i] = "";
              listing[i + 2] = "\tasl @";
              listing[i + 3] = "\tasl @";
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 5] = "\tasl @";
              listing[i + 6] = "\tsta :eax";
              listing[i + 7] = "";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              listing[i + 13] = "";
              listing[i + 14] = "";
              if (listing[i + 17] === "\tadd :eax") {
                listing[i + 15] = "\tadd " + pas.System.Copy(listing[i + 15],6,256)}
               else listing[i + 15] = "\tsub " + pas.System.Copy(listing[i + 15],6,256);
              listing[i + 6] = "";
              listing[i + 17] = "";
              return false;
            };
          };
          if ((listing[i] === "\tlda #$10") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
            if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
              listing[i] = listing[i + 6];
              listing[i + 1] = listing[i + 7];
              listing[i + 2] = listing[i + 4];
              listing[i + 3] = "\tasl @";
              listing[i + 4] = "\trol :eax+1";
              listing[i + 5] = "\tasl @";
              listing[i + 6] = "\trol :eax+1";
              listing[i + 7] = "\tasl @";
              listing[i + 8] = "\trol :eax+1";
              listing[i + 9] = "\tasl @";
              listing[i + 10] = "\trol :eax+1";
              listing[i + 11] = "\tsta :eax";
              listing[i + 12] = "";
              return false;
            };
            if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && ADC_SBC(i + 17) && STA(i + 18) && (LDA_EAX_X(i + 19) === false)) {
              listing[i] = listing[i + 6];
              listing[i + 1] = listing[i + 7];
              listing[i + 2] = listing[i + 4];
              listing[i + 3] = "\tasl @";
              listing[i + 4] = "\trol :eax+1";
              listing[i + 5] = "\tasl @";
              listing[i + 6] = "\trol :eax+1";
              listing[i + 7] = "\tasl @";
              listing[i + 8] = "\trol :eax+1";
              listing[i + 9] = "\tasl @";
              listing[i + 10] = "\trol :eax+1";
              listing[i + 11] = "\tsta :eax";
              listing[i + 12] = "";
              return false;
            };
          };
          if (LDA_IM_0(i) && STA_ECX(i + 1) && (listing[i + 2] === "\tlda #$01") && STA_ECX_1(i + 3) && LDA_A(i + 4) && STA_EAX(i + 5) && LDA_A(i + 6) && STA_EAX_1(i + 7)) {
            if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 6] = listing[i + 4];
              listing[i + 4] = "\tlda #$00";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              return false;
            };
            if (LDA_EAX_1(i + 13) && STA(i + 14) && LDA_EAX(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 6] = listing[i + 4];
              listing[i + 4] = "\tlda #$00";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              return false;
            };
            if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && ADC_SBC(i + 17) && STA(i + 18) && (LDA_EAX_X(i + 19) === false)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 6] = listing[i + 4];
              listing[i + 4] = "\tlda #$00";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              return false;
            };
            if (LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && TAY(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA_BP_1(i + 18)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 6] = listing[i + 4];
              listing[i + 4] = "\tlda #$00";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              listing[i + 11] = "";
              listing[i + 12] = "";
              return false;
            };
          };
          if (LDA_A(i) && STA_ECX(i + 1) && LDA_A(i + 2) && STA_ECX(i + 3) && LDA_IM_0(i + 4) && STA_EAX(i + 5) && (listing[i + 6] === "\tlda #$01") && STA_EAX_1(i + 7) && LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
            listing[i + 6] = listing[i];
            listing[i + 4] = "\tlda #$00";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (LDA_A(i) && STA_EAX(i + 1) && LDA_A(i + 2) && STA_EAX_1(i + 3) && LDA_IM_0(i + 4) && STA_ECX(i + 5) && (listing[i + 6] === "\tlda #$01") && STA_ECX_1(i + 7) && LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && STA(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA(i + 18) && (ADC_SBC(i + 20) === false)) {
            listing[i + 14] = "";
            listing[i + 17] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if ((listing[i] === "\tlda #$40") && STA_ECX(i + 1) && (listing[i + 2] === "\tlda #$01") && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
            listing[i] = listing[i + 4];
            listing[i + 1] = listing[i + 5];
            listing[i + 2] = listing[i + 6];
            listing[i + 3] = listing[i + 7];
            listing[i + 4] = "\tjsr @mul320";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if ((listing[i + 11] === "\timulCX") && (LDA_IM(i) === false) && STA_EAX(i + 1) && LDA_IM_0(i + 2) && STA_EAX_1(i + 3) && LDA_A(i + 4) && STA_ECX(i + 5) && LDA_A(i + 6) && STA_ECX_1(i + 7) && IFDEF_MUL16(i + 8)) {
            listing[i + 11] = "\timulCX_AL";
            return false;
          };
          if ((listing[i + 11] === "\timulCX") && LDA_A(i) && STA_ECX(i + 1) && LDA_A(i + 2) && STA_ECX_1(i + 3) && LDA_A(i + 4) && (LDA_IM(i + 4) === false) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7) && IFDEF_MUL16(i + 8)) {
            listing[i + 11] = "\timulCX_AL";
            return false;
          };
          if ((listing[i + 11] === "\timulCX") && (LDA_IM(i) === false) && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA_A(i + 4) && STA_EAX(i + 5) && LDA_A(i + 6) && STA_EAX_1(i + 7) && IFDEF_MUL16(i + 8)) {
            listing[i + 1] = "\tsta :eax";
            listing[i + 3] = "\tsta :eax+1";
            listing[i + 5] = "\tsta :ecx";
            listing[i + 7] = "\tsta :ecx+1";
            listing[i + 11] = "\timulCX_AL";
            return false;
          };
          if (STA_EAX(i) && LDA_A(i + 1) && STA_ECX(i + 2) && LDA_A(i + 3) && STA_ECX_1(i + 4) && LDA_A(i + 5) && STA_EAX_1(i + 6) && IFDEF_MUL16(i + 7)) {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = listing[i + 5];
            listing_tmp[2] = listing[i + 6];
            listing_tmp[3] = listing[i + 1];
            listing_tmp[4] = listing[i + 2];
            listing_tmp[5] = listing[i + 3];
            listing_tmp[6] = listing[i + 4];
            listing[i] = listing_tmp[0];
            listing[i + 1] = listing_tmp[1];
            listing[i + 2] = listing_tmp[2];
            listing[i + 3] = listing_tmp[3];
            listing[i + 4] = listing_tmp[4];
            listing[i + 5] = listing_tmp[5];
            listing[i + 6] = listing_tmp[6];
            return false;
          };
          return Result;
        };
        function opt_STA_ZTMP(i) {
          var Result = false;
          var p = 0;
          Result = true;
          if (LDA_A(i) && BPL_A(i + 1) && LDA_A(i + 2) && SUB(i + 3) && (listing[i + 4] === "\tsta :eax+2") && LDA_A(i + 5) && SBC(i + 6) && (listing[i + 7] === "\tsta :eax+3") && LAB_A(i + 8)) {
            if (LDA_EAX(i + 9) && STA_A(i + 10) && LDA_EAX_1(i + 11) && STA_A(i + 12) && (EAX(i + 13) === false)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              return false;
            };
            if (MWY_BP2(i + 9) && LDY_IM_0(i + 10) && LDA_EAX(i + 11) && ADD_SUB(i + 12) && (pas.System.Pos(" (:bp2),y",listing[i + 12]) > 0) && INY(i + 13) && STA_A(i + 14) && LDA_EAX_1(i + 15) && ADC_SBC(i + 16) && (pas.System.Pos(" (:bp2),y",listing[i + 16]) > 0) && STA_A(i + 17) && (LDA_A(i + 18) === false)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              return false;
            };
            if (LDA_A(i + 9) && (ADD_EAX(i + 10) || SUB_EAX(i + 10)) && STA_A(i + 11) && LDA_A(i + 12) && (ADC_EAX_1(i + 13) || SBC_EAX_1(i + 13)) && STA_A(i + 14) && (EAX(i + 15) === false) && (ADC_SBC(i + 16) === false)) {
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              return false;
            };
          };
          if ((pas.System.Pos("lda :ztmp",listing[i + 21]) === 0) && IFDEF_MUL16(i + 16) && STA_EAX(i + 2) && (listing[i + 3] === "\tsta :ztmp10") && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_EAX_1(i + 6) && (listing[i + 7] === "\tsta :ztmp11") && LDA_A(i + 8) && ADD_SUB(i + 9) && STA_ECX(i + 10) && (listing[i + 11] === "\tsta :ztmp8") && LDA_A(i + 12) && ADC_SBC(i + 13) && STA_ECX_1(i + 14) && (listing[i + 15] === "\tsta :ztmp9")) {
            listing[i + 3] = "";
            listing[i + 7] = "";
            listing[i + 11] = "";
            listing[i + 15] = "";
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",listing[i + 19]) === 0) && IFDEF_MUL16(i + 14) && STA_ECX(i + 2) && (listing[i + 3] === "\tsta :ztmp8") && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_ECX_1(i + 6) && (listing[i + 7] === "\tsta :ztmp9") && LDA_A(i + 8) && STA_EAX(i + 9) && (listing[i + 10] === "\tsta :ztmp10") && LDA_A(i + 11) && STA_EAX_1(i + 12) && (listing[i + 13] === "\tsta :ztmp11")) {
            listing[i + 3] = "";
            listing[i + 7] = "";
            listing[i + 10] = "";
            listing[i + 13] = "";
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",listing[i + 19]) === 0) && IFDEF_MUL16(i + 14) && STA_EAX(i + 2) && (listing[i + 3] === "\tsta :ztmp10") && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_EAX_1(i + 6) && (listing[i + 7] === "\tsta :ztmp11") && LDA_A(i + 8) && STA_ECX(i + 9) && (listing[i + 10] === "\tsta :ztmp8") && LDA_A(i + 11) && STA_ECX_1(i + 12) && (listing[i + 13] === "\tsta :ztmp9")) {
            listing[i + 3] = "";
            listing[i + 7] = "";
            listing[i + 10] = "";
            listing[i + 13] = "";
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",listing[i + 17]) === 0) && IFDEF_MUL16(i + 12) && (STA_EAX(i + 1) || STA_ECX(i + 1)) && (pas.System.Pos("sta :ztmp",listing[i + 2]) > 0) && LDA_A(i + 3) && (STA_EAX_1(i + 4) || STA_ECX_1(i + 4)) && (pas.System.Pos("sta :ztmp",listing[i + 5]) > 0) && LDA_A(i + 6) && (STA_EAX(i + 7) || STA_ECX(i + 7)) && (pas.System.Pos("sta :ztmp",listing[i + 8]) > 0) && LDA_A(i + 9) && (STA_EAX_1(i + 10) || STA_ECX_1(i + 10)) && (pas.System.Pos("sta :ztmp",listing[i + 11]) > 0)) {
            listing[i + 2] = "";
            listing[i + 5] = "";
            listing[i + 8] = "";
            listing[i + 11] = "";
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",listing[i + 16]) === 0) && IFDEF_MUL16(i + 11) && DEY(i) && ((listing[i + 1] === "\tsty :eax+1") || (listing[i + 1] === "\tsty :ecx+1")) && (pas.System.Pos("sty :ztmp",listing[i + 2]) > 0) && (STA_EAX(i + 3) || STA_ECX(i + 3)) && (pas.System.Pos("sta :ztmp",listing[i + 4]) > 0) && LDA_A(i + 5) && (STA_EAX(i + 6) || STA_ECX(i + 6)) && (pas.System.Pos("sta :ztmp",listing[i + 7]) > 0) && LDA_A(i + 8) && (STA_EAX_1(i + 9) || STA_ECX_1(i + 9)) && (pas.System.Pos("sta :ztmp",listing[i + 10]) > 0)) {
            listing[i + 2] = "";
            listing[i + 4] = "";
            listing[i + 7] = "";
            listing[i + 10] = "";
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",listing[i + 11]) === 0) && IFDEF_MUL8(i + 6) && STA_ECX(i + 1) && (listing[i + 2] === "\tsta :ztmp8") && LDA_A(i + 3) && STA_EAX(i + 4) && (listing[i + 5] === "\tsta :ztmp10")) {
            listing[i + 2] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA_EAX_1(i + 9) && LDA_A(i) && BPL_A(i + 1) && (listing[i + 2] === "\tlda :eax+2") && SUB(i + 3) && (listing[i + 4] === "\tsta :eax+2") && (listing[i + 5] === "\tlda :eax+3") && SBC(i + 6) && (listing[i + 7] === "\tsta :eax+3") && LAB_A(i + 8) && (STA_A(i + 10) || LDA_EAX(i + 11))) if ((pas.System.Copy(listing[i + 4],6,256) !== pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 7],6,256) !== pas.System.Copy(listing[i + 11],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if ((l === (i + 8)) && LDA_A(i) && BPL_A(i + 1) && LDA_EAX_1(i + 2) && (pas.System.Pos("\tsub :ztmp",listing[i + 3]) === 1) && STA_EAX_1(i + 4) && LAB_A(i + 5) && LDA_EAX(i + 6) && STA_A(i + 7)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((l === (i + 10)) && LDA_A(i) && BPL_A(i + 1) && LDA_EAX_1(i + 2) && (pas.System.Pos("\tsub :ztmp",listing[i + 3]) === 1) && STA_EAX_1(i + 4) && LAB_A(i + 5) && LDA_STACK(i + 6) && (ADD_EAX(i + 7) || SUB_EAX(i + 7)) && LDY(i + 8) && STA_A(i + 9)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((l === (i + 10)) && LDA_A(i) && BPL_A(i + 1) && LDA_EAX_1(i + 2) && (pas.System.Pos("\tsub :ztmp",listing[i + 3]) === 1) && STA_EAX_1(i + 4) && LAB_A(i + 5) && LDA_EAX(i + 6) && STA_A(i + 7) && LDA_EAX_1(i + 8) && STA_A(i + 9)) {
            listing_tmp[0] = listing[i + 8];
            listing_tmp[1] = listing[i + 9];
            listing_tmp[2] = listing[i + 6];
            listing_tmp[3] = listing[i + 7];
            listing[i + 6] = listing_tmp[0];
            listing[i + 7] = listing_tmp[1];
            listing[i + 8] = listing_tmp[2];
            listing[i + 9] = listing_tmp[3];
            return false;
          };
          if (STA_EAX_1(i + 11) && STA_STACK(i) && LDA_A(i + 1) && STA_ECX(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && STA_ECX_1(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_EAX(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 10],6,256)) {
            listing_tmp[0] = listing[i + 7];
            listing_tmp[1] = listing[i + 8];
            listing_tmp[2] = listing[i + 9];
            listing_tmp[3] = listing[i + 10];
            listing_tmp[4] = listing[i + 11];
            listing_tmp[5] = listing[i + 12];
            listing_tmp[6] = listing[i + 1];
            listing_tmp[7] = listing[i + 2];
            listing_tmp[8] = listing[i + 3];
            listing_tmp[9] = listing[i + 4];
            listing_tmp[10] = listing[i + 5];
            listing_tmp[11] = listing[i + 6];
            for (p = 0; p <= 11; p++) listing[i + 1 + p] = listing_tmp[p];
            return false;
          };
          if (STA_EAX_1(i + 4) && LDA_A(i) && BPL_A(i + 1) && LDA_A(i + 2) && SUB(i + 3) && LAB_A(i + 5) && LDA_STACK(i + 6) && (ADD_EAX(i + 7) || SUB_EAX(i + 7)) && STA_STACK(i + 8) && (EAX(i + 9) === false) && (ADC_SBC(i + 10) === false)) if (pas.System.Copy(listing[i + 4],6,256) !== pas.System.Copy(listing[i + 7],6,256)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_EAX_1(i + 18) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_SUB(i + 7) && STA_ECX(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && ADC_SBC(i + 11) && STA_ECX_1(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_EAX(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = listing[i + 1];
            listing_tmp[2] = listing[i + 15];
            listing_tmp[3] = listing[i + 16];
            listing_tmp[4] = listing[i + 3];
            listing_tmp[5] = listing[i + 4];
            listing_tmp[6] = listing[i + 18];
            listing_tmp[7] = listing[i + 19];
            listing_tmp[8] = listing[i + 6];
            listing_tmp[9] = listing[i + 7];
            listing_tmp[10] = listing[i + 8];
            listing_tmp[11] = listing[i + 9];
            listing_tmp[12] = listing[i + 10];
            listing_tmp[13] = listing[i + 11];
            listing_tmp[14] = listing[i + 12];
            listing_tmp[15] = listing[i + 13];
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            for (p = 0; p <= 15; p++) listing[i + p] = listing_tmp[p];
            return false;
          };
          return Result;
        };
        function PeepholeOptimization_END() {
          var Result = false;
          var i = 0;
          var p = 0;
          var k = 0;
          var tmp = "";
          var old = "";
          var yes = false;
          var ok = false;
          Result = true;
          Rebuild();
          tmp = "";
          old = "";
          for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
            i = $l;
            if (ADD_SUB_STACK(i) || ADC_SBC_STACK(i) || AND_ORA_EOR_STACK(i)) {
              tmp = pas.System.Copy(listing[i],6,256);
              for (var $l1 = i - 1; $l1 >= 1; $l1--) {
                p = $l1;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (SKIP(p - 2) === false) && (LDA_STACK(p - 1) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false) && (IY(0) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(listing[p - 1],6 - 1,256);
                      for (var $l2 = p, $end1 = i; $l2 <= $end1; $l2++) {
                        k = $l2;
                        if (pas.System.Pos(old,listing[k]) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    listing[i] = pas.System.Copy(listing[i],1,5) + pas.System.Copy(listing[p - 1],6,256);
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      listing[p] = ""}
                     else {
                      listing[p - 1] = "";
                      listing[p] = "";
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (LDY(p) || INY(p) || DEY(p) || TAY(p) || TYA(p) || onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && (ADD_SUB(i + 1) || ADC_SBC(i + 1) || AND_ORA_EOR(i + 1) || (ASL_A(i + 1) && TAY(i + 2)) || (ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3)) || (LSR_A(i + 1) && TAY(i + 2)))) {
              tmp = pas.System.Copy(listing[i],6,256);
              yes = false;
              for (var $l3 = i - 1; $l3 >= 1; $l3--) {
                p = $l3;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (SKIP(p - 2) === false) && (LDA_STACK(p - 1) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false))) {
                    if (IY(p - 1) && yes) break;
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(listing[p - 1],6 - 1,256);
                      for (var $l4 = p, $end2 = i; $l4 <= $end2; $l4++) {
                        k = $l4;
                        if (pas.System.Pos(old,listing[k]) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    listing[i] = listing[p - 1];
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      listing[p] = ""}
                     else {
                      listing[p - 1] = "";
                      listing[p] = "";
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (LDY(p) || INY(p) || DEY(p) || TAY(p)) {
                  yes = true}
                 else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && STA_BP2_Y(i + 2) && (ADD_SUB(i + 1) || ADC_SBC(i + 1) || AND_ORA_EOR(i + 1)) && (pas.System.Pos(" :STACK",listing[i + 1]) === 0)) {
              tmp = pas.System.Copy(listing[i],6,256);
              for (var $l5 = i - 1; $l5 >= 1; $l5--) {
                p = $l5;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (SKIP(p - 2) === false) && (LDA_STACK(p - 1) === false) && (IY(p - 1) === false) && (pas.System.Copy(listing[p - 1],6,256) !== pas.System.Copy(listing[i + 1],6,256))) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false) && (IY(0) === false) && (pas.System.Copy(listing[p - 1],6,256) !== pas.System.Copy(listing[i + 1],6,256)))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(listing[p - 1],6 - 1,256);
                      for (var $l6 = p, $end3 = i; $l6 <= $end3; $l6++) {
                        k = $l6;
                        if (pas.System.Pos(old,listing[k]) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    listing[i] = listing[p - 1];
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      listing[p] = ""}
                     else {
                      listing[p - 1] = "";
                      listing[p] = "";
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && STA_BP2_Y(i + 1)) {
              tmp = pas.System.Copy(listing[i],6,256);
              for (var $l7 = i - 1; $l7 >= 1; $l7--) {
                p = $l7;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (SKIP(p - 2) === false) && (LDA_STACK(p - 1) === false) && (IY(p - 1) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false) && (IY(0) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(listing[p - 1],6 - 1,256);
                      for (var $l8 = p, $end4 = i; $l8 <= $end4; $l8++) {
                        k = $l8;
                        if (pas.System.Pos(old,listing[k]) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    listing[i] = listing[p - 1];
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      listing[p] = ""}
                     else {
                      listing[p - 1] = "";
                      listing[p] = "";
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDY_STACK(i) && STY_BP_1(i + 1)) {
              tmp = pas.System.Copy(listing[i],6,256);
              for (var $l9 = i - 1; $l9 >= 1; $l9--) {
                p = $l9;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (SKIP(p - 2) === false) && (LDA_STACK(p - 1) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(listing[p - 1],6 - 1,256);
                      for (var $l10 = p, $end5 = i; $l10 <= $end5; $l10++) {
                        k = $l10;
                        if (pas.System.Pos(old,listing[k]) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    listing[i] = "\tldy " + pas.System.Copy(listing[p - 1],6,256);
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      listing[p] = ""}
                     else {
                      listing[p - 1] = "";
                      listing[p] = "";
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (STA_STACK(i + 1) && ((LDA_A(i) && (LDA_STACK(i) === false)) || (AND_ORA_EOR(i) && (AND_ORA_EOR_STACK(i) === false)) || ASL_A(i) || ROL_A(i) || ADD_SUB_VAL(i) || ADC_SBC_VAL(i))) {
              tmp = pas.System.Copy(listing[i + 1],6,256);
              for (var $l11 = i - 1; $l11 >= 1; $l11--) {
                p = $l11;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (STA_STACK(p)) {
                    if ((p > 2) && TAY(p - 3) && LDA_STACK(p - 2) && ADC_IM_0(p - 1)) {}
                    else {
                      listing[p] = "";
                      Result = false;
                      break;
                    };
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && (EAX(i) === false) && STA_A(i + 1) && (IY(i + 1) === false) && (pas.System.Pos(":bp2",listing[i + 1]) === 0) && (STA_A(i + 2) === false) && (TAY(i + 2) === false) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256))) {
              tmp = pas.System.Copy(listing[i],6,256);
              for (var $l12 = i - 1; $l12 >= 1; $l12--) {
                p = $l12;
                if ((pas.System.Pos(tmp,listing[p]) > 0) && ((STA_STACK(p) && (LDA_STACK(p - 1) === false)) || (STY_STACK(p) && (LDY_STACK(p - 1) === false)))) {
                  if (STA_STACK(p)) {
                    listing[p] = "\tsta " + pas.System.Copy(listing[i + 1],6,256)}
                   else listing[p] = "\tsty " + pas.System.Copy(listing[i + 1],6,256);
                  listing[i] = "";
                  listing[i + 1] = "";
                  Result = false;
                  break;
                } else if ((pas.System.Pos(tmp,listing[p]) === 6) || (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[p],6,256)) || onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDY_STACK(i) && STY(i + 1) && (pas.System.Pos(":bp2",listing[i + 1]) === 0) && (STY(i + 2) === false) && (TYA(i + 2) === false) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256))) {
              tmp = "\tsta " + pas.System.Copy(listing[i],6,256);
              for (var $l13 = i - 1; $l13 >= 1; $l13--) {
                p = $l13;
                if ((listing[p] === tmp) && (LDA_STACK(p - 1) === false)) {
                  listing[p] = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
                  listing[i] = "";
                  listing[i + 1] = "";
                  Result = false;
                  break;
                } else if ((pas.System.Pos(pas.System.Copy(listing[i],6,256),listing[p]) === 6) || (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[p],6,256)) || onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA(i) && ADD_STACK(i + 1) && TAY(i + 2) && LDA(i + 3) && ADC_STACK(i + 4) && STA_BP_1(i + 5)) {
              tmp = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
              for (var $l14 = i - 1; $l14 >= 1; $l14--) {
                p = $l14;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if ((p > 1) && LDA(p - 2) && ADD_SUB(p - 1) && STA_STACK(p) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && LDA(p + 4) && ADC_SBC(p + 5) && STA_STACK(p + 6) && LDA(p + 7) && ADC_SBC(p + 8) && STA_STACK(p + 9)) {
                    listing[p + 4] = "";
                    listing[p + 5] = "";
                    listing[p + 6] = "";
                    listing[p + 7] = "";
                    listing[p + 8] = "";
                    listing[p + 9] = "";
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (DEY(i) && STA_STACK(i + 1) && STY_STACK(i + 2) && ASL_STACK(i + 3) && ROL_STACK(i + 4)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
              tmp = listing[i + 1];
              listing[i + 1] = listing[i + 2];
              p = i + 3;
              while (ASL_STACK(p) && ROL_STACK(p + 1)) {
                listing[p - 1] = "\tasl @";
                listing[p] = listing[p + 1];
                p += 2;
              };
              listing[p - 1] = tmp;
              Result = false;
              break;
            };
            if (LDA_STACK(i) && STA_BP2(i + 1) && LDA_STACK(i + 2) && STA_BP2_1(i + 3)) {
              tmp = "\tsta " + pas.System.Copy(listing[i],6,256);
              for (var $l15 = i - 1; $l15 >= 0; $l15--) {
                p = $l15;
                if (listing[p] === tmp) {
                  if ((p > 1) && LDY_IM_0(i + 4) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1) && (listing[p + 1] === (listing[p - 2] + "+1")) && ADC_IM_0(p + 2) && STA_STACK(p + 3)) if (pas.System.Pos(listing[p - 2],listing[p + 1]) > 0) {
                    listing[i] = "\tmwy " + pas.System.Copy(listing[p - 2],6,256) + " :bp2";
                    listing[i + 1] = "\tldy " + pas.System.Copy(listing[p - 1],6,256);
                    listing[i + 2] = "";
                    listing[i + 3] = "";
                    listing[i + 4] = "";
                    listing[p - 2] = "";
                    listing[p - 1] = "";
                    listing[p] = "";
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                    Result = false;
                    break;
                  };
                  if (STA_STACK(p) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && LDA(p + 4) && ADC_SBC(p + 5) && STA_STACK(p + 6) && LDA(p + 7) && ADC_SBC(p + 8) && STA_STACK(p + 9)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                    listing[p + 4] = "";
                    listing[p + 5] = "";
                    listing[p + 6] = "";
                    listing[p + 7] = "";
                    listing[p + 8] = "";
                    listing[p + 9] = "";
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (MWY_BP2(i) && LDY(i + 1) && LDA_STACK(i + 2) && ADD_SUB(i + 3) && STA_BP2_Y(i + 4) && INY(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7) && STA_BP2_Y(i + 8) && (INY(i + 9) === false)) {
              tmp = "\tsta " + pas.System.Copy(listing[i + 2],6,256);
              for (var $l16 = i - 1; $l16 >= 0; $l16--) {
                p = $l16;
                if (listing[p] === tmp) {
                  if ((listing[p - 3] === listing[i]) && (listing[p - 2] === listing[i + 1]) && LDA_BP2_Y(p - 1) && INY(p + 1) && LDA_BP2_Y(p + 2) && STA_STACK(p + 3)) {
                    listing[p - 3] = "";
                    listing[p - 2] = "";
                    listing[p - 1] = "";
                    listing[p] = "";
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                    listing[i + 2] = "\tlda (:bp2),y";
                    listing[i + 6] = "\tlda (:bp2),y";
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA(i + 4) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "\tsty " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 1] = "\tsty " + pas.System.Copy(listing[i + 5],6,256);
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              Result = false;
              break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && LDA_STACK(i + 2) && STA_STACK(i + 3) && LDA(i + 4)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
              listing[i + 2] = "";
              listing[i + 3] = "";
              Result = false;
              break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA_STACK(i + 3) && STA_STACK(i + 4) && LDA(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
              listing[i + 3] = "";
              listing[i + 4] = "";
              Result = false;
              break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA_STACK(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 6) && LDA_STACK(i + 7) && STA_VAL(i + 8)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
              listing[i] = "\tsty " + pas.System.Copy(listing[i + 4],6,256);
              listing[i + 1] = "\tsty " + pas.System.Copy(listing[i + 6],6,256);
              listing[i + 2] = "\tsty " + pas.System.Copy(listing[i + 8],6,256);
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              Result = false;
              break;
            };
            if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA_STACK(i + 3) && STA_STACK(i + 4) && LDA(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
              listing[i + 1] = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 3] = "";
              listing[i + 4] = "";
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDA_STACK(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
              listing[i + 6] = listing[i + 1];
              listing[i + 1] = "";
              listing[i + 2] = "";
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDY(i + 1) && MVA_STACK(i + 2)) if (pas.System.Pos(pas.System.Copy(listing[i],6,256),listing[i + 2]) > 0) {
              tmp = pas.System.Copy(listing[i],6,256);
              listing[i + 2] = "\tsta" + pas.System.Copy(listing[i + 2],6 + tmp.length,256);
              listing[i] = "";
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDY(i + 1) && LDA_STACK(i + 2) && STA(i + 3) && IY(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256))) {
              listing[i] = "";
              listing[i + 2] = "";
              Result = false;
              break;
            };
            if (LDA_A(i) && (IY(i) === false) && (LDA_A(i + 1) || MVA(i + 1) || MWA(i + 1))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if (LDA_A(i) && IY(i) && LDA_A(i + 1) && (IY(i + 1) === false)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if (LDA_A(i) && IY(i) && LDA_A(i + 1) && IY(i + 1)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_STACK(i + 3) && TAY(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
              listing[i + 1] = "";
              listing[i + 2] = "\tadd " + pas.System.Copy(listing[i + 2],6,256);
              listing[i + 3] = "";
              Result = false;
              break;
            };
            if (ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA(i + 5) && ADC_SBC(i + 6) && STA(i + 7) && LDA(i + 8) && ADC_SBC(i + 9) && STA(i + 10)) {
              if (((i + 22) === (l - 1)) && LDA(i + 17) && ADC_SBC(i + 18) && STA_STACK(i + 19) && LDA(i + 20) && ADC_SBC(i + 21) && STA_STACK(i + 22)) {
                listing[i + 17] = "";
                listing[i + 18] = "";
                listing[i + 19] = "";
                listing[i + 20] = "";
                listing[i + 21] = "";
                listing[i + 22] = "";
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && (AND_ORA_EOR(i + 12) || ADD_SUB(i + 12)) && STA(i + 13)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 4],6,256) !== pas.System.Copy(listing[i + 14],6,256))) {
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && (AND_ORA_EOR(i + 12) || ADD_SUB(i + 12)) && LDY(i + 13) && STA(i + 14) && (LDA(i + 15) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) {
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && (AND_ORA_EOR(i + 12) || ADD_SUB(i + 12)) && STA(i + 13) && LDA_STACK(i + 14) && (AND_ORA_EOR(i + 15) || ADC_SBC(i + 15)) && STA(i + 16)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 7],6,256) !== pas.System.Copy(listing[i + 17],6,256))) {
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                Result = false;
                break;
              };
              if (LDA(i + 11) && ADD_SUB(i + 12) && STA_STACK(i + 13) && LDY_STACK(i + 14) && STY_BP_1(i + 15) && LDY_STACK(i + 16) && LDA_STACK(i + 17) && STA_BP_Y(i + 18)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 13],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && ADD_SUB(i + 12) && TAY(i + 13) && LDA_STACK(i + 14) && ADC_SBC(i + 15) && STA_BP_1(i + 16) && LDA(i + 17) && STA_BP_Y(i + 18)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                Result = false;
                break;
              };
            };
            if (SCC(i) && INC_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && (ADD_SUB(i + 4) || AND_ORA_EOR(i + 4)) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "";
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 4) && STA(i + 5) && LDA_STACK(i + 6) && STA(i + 7)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "\tlsr @";
              Result = false;
              break;
            };
            if (LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 4) && LSR_A(i + 5) && ROR_STACK(i + 6) && ROR_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "\tlsr @";
              listing[i + 4] = "";
              Result = false;
              break;
            };
            if ((l === (i + 3)) && LDA_A(i) && (ADD_IM_0(i + 1) || SUB_IM_0(i + 1)) && STA_VAL(i + 2)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 3)) && LDA_IM_0(i) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && STA_VAL(i + 2)) {
              listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && LDY_IM_0(i) && LDA_A(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_VAL(i + 4)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && ROL_STACK(i) && STA_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 9)) && ROL_STACK(i) && ASL_A(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 10)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ROL_STACK(i) && STA_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && ROL_STACK(i) && ASL_A(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && ROL_STACK(i) && STA_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 3)) && ROL_STACK(i) && LDY(i + 1) && STA_VAL(i + 2)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 3)) && ROL_STACK(i) && ADD_SUB(i + 1) && STA_VAL(i + 2)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && ROL_STACK(i) && ADD_SUB(i + 1) && TAY(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && ROL_STACK(i) && ADD_SUB(i + 1) && ADD_SUB(i + 2) && STA_VAL(i + 3)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && ROL_STACK(i) && ADD_SUB(i + 1) && AND_ORA_EOR(i + 2) && STA_VAL(i + 3)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && ROL_STACK(i) && ADD_SUB(i + 1) && ADD_SUB(i + 2) && AND_ORA_EOR(i + 3) && STA_VAL(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 3)) && ASL_A(i) && ROL_STACK(i + 1) && STA_VAL(i + 2)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && STA_VAL(i + 4)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && STA_VAL(i + 5)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ASL_A(i + 5) && STA_VAL(i + 6)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_VAL(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 9)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_VAL(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && STA_VAL(i + 5)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && STA_VAL(i + 6)) {
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_STACK(i + 2) && STA_VAL(i + 3)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_STACK(i + 3) && STA_VAL(i + 4)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4) && STA_VAL(i + 5)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_VAL(i + 6)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 5],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && AND_ORA_EOR(i + 3) && STA_VAL(i + 4)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && AND_ORA_EOR(i + 4) && STA_VAL(i + 5)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && AND_ORA_EOR(i + 4) && STA_VAL(i + 5)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && ROL_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADD_SUB_VAL(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 6)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
              listing[i + 1] = listing[i + 6];
              listing[i + 5] = "";
              listing[i + 6] = "";
              Result = false;
              break;
            };
            if ((l === (i + 9)) && ROL_STACK(i) && ADD_SUB_VAL(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && ADC_SBC_IM_0(i + 7) && STA_VAL(i + 8)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 10)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && ADD_SUB_STACK(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && ADC_SBC_IM_0(i + 8) && STA_VAL(i + 9)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 5],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 11)) && LDA(i) && (LDA_STACK(i) === false) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && (LDA_STACK(i + 3) === false) && ADC_SBC_IM(i + 4) && AND_ORA_EOR(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && STA_VAL(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
              p = GetWORD(i + 1,i + 4);
              if ((p === 1) && ADD_IM(i + 1) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
                listing[i] = "\tinc " + pas.System.Copy(listing[i],6,256);
                listing[i + 1] = "\tsne";
                listing[i + 2] = "\tinc " + pas.System.Copy(listing[i + 3],6,256);
                listing[i + 4] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
              } else {
                listing[i + 2] = listing[i + 8];
                listing[i + 6] = listing[i + 10];
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
              };
              Result = false;
              break;
            };
            if ((l === (i + 6)) && AND_ORA_EOR(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
              listing[i + 1] = listing[i + 5];
              listing[i + 4] = "";
              listing[i + 5] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && UNUSED_A(i) && (LDA(i + 1) || LDY(i + 1)) && (LDY(i + 2) || LDA_A(i + 2)) && STA_VAL(i + 3)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && UNUSED_A(i) && LDA(i + 1) && STA_VAL(i + 2) && LDA(i + 3) && STA_VAL(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && UNUSED_A(i) && LDA_VAL(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && UNUSED_A(i) && LDA_A(i + 1) && STA_VAL(i + 2) && LDA_IM(i + 3) && (ADD_SUB(i + 4) || AND_ORA_EOR(i + 4)) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 6)) && UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2) || ASL_A(i + 2) || LSR_A(i + 2)) && STA_VAL(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && LDY(i + 3) && STA_VAL(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && STA_VAL(i + 3)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && UNUSED_A(i) && ASL_STACK(i + 1) && LDA_VAL(i + 2) && (ADD_SUB_STACK(i + 3) || AND_ORA_EOR_STACK(i + 3)) && STA_VAL(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 4)) && UNUSED_A(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && UNUSED_A(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && UNUSED_A(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 3)) && UNUSED_A(i) && LDA_A(i + 1) && STA_VAL(i + 2)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 7)) && UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && STA_VAL(i + 3) && LDA_A(i + 4) && (ADC_SBC(i + 5) || AND_ORA_EOR(i + 5)) && STA_VAL(i + 6)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 5],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if (UNUSED_A(i) && LDA(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && TAY(i + 3) && LDA(i + 4) && (ADC_SBC(i + 5) || AND_ORA_EOR(i + 5)) && STA_BP_1(i + 6) && LDA(i + 7) && STA_BP_Y(i + 8)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 7],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 5)) && UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && TAY(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && UNUSED_A(i) && MWY(i + 1) && LDY_IM(i + 2) && LDA(i + 3) && STA_BP2_Y(i + 4) && INY(i + 5) && LDA(i + 6) && STA_BP2_Y(i + 7)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 6],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && UNUSED_A(i) && INY(i + 1) && LDA_A(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4) && LDA_A(i + 5) && (ADC_SBC(i + 6) || AND_ORA_EOR(i + 6)) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 6],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 8)) && UNUSED_A(i) && LDA_A(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 6],6,256))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((l === (i + 12)) && LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
              listing[i + 8] = listing[i + 2];
              listing[i + 10] = listing[i];
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              Result = false;
              break;
            };
            if ((l === (i + 11)) && LDY(i) && BEQ(i + 1) && LAB_L(i + 2) && ASL_A(i + 3) && ROL_STACK(i + 4) && ROL_STACK(i + 5) && ROL_STACK(i + 6) && DEY(i + 7) && BNE(i + 8) && LAB_L(i + 9) && STA_A(i + 10)) {
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              if (LDY_IM(i) && (GetBYTE(i) > 7)) {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "\tlda #$00";
              };
              Result = false;
              break;
            };
            if ((l === (i + 13)) && LDY(i) && BEQ(i + 1) && LAB_L(i + 2) && ASL_A(i + 3) && ROL_STACK(i + 4) && ROL_STACK(i + 5) && ROL_STACK(i + 6) && DEY(i + 7) && BNE(i + 8) && LAB_L(i + 9) && STA_VAL(i + 10) && LDA_STACK(i + 11) && STA_A(i + 12)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 11],6,256)) {
              listing[i + 5] = "";
              listing[i + 6] = "";
              if (LDY_IM(i) && (GetBYTE(i) > 15)) {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "\tlda #$00";
                listing[i + 11] = "";
              };
              Result = false;
              break;
            };
            if (ASL_STACK(i) && (listing[i] === listing[i + 4]) && ROL_STACK(i + 1) && (listing[i + 1] === listing[i + 5]) && ROL_STACK(i + 2) && (listing[i + 2] === listing[i + 6]) && ROL_STACK(i + 3) && (listing[i + 3] !== listing[i + 7])) {
              listing[i + 3] = "";
              return false;
            };
            if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_VAL(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
              listing[i + 6] = listing[i];
              listing[i] = "";
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
              listing[i + 6] = "\tasl " + pas.System.Copy(listing[i],6,256);
              listing[i + 7] = "\trol " + pas.System.Copy(listing[i + 2],6,256);
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              Result = false;
              break;
            };
            if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
              listing[i + 1] = listing[i + 9];
              listing[i + 3] = "\tasl " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 5] = "\tasl " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 8] = "";
              listing[i + 9] = "";
              Result = false;
              break;
            };
            if (LDA(i) && ASL_A(i + 1) && STA(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
              listing[i] = "\tasl " + pas.System.Copy(listing[i],6,256);
              listing[i + 1] = "";
              listing[i + 2] = "";
              Result = false;
              break;
            };
            if (STA_STACK(i) && ASL_STACK(i + 1) && LDA_VAL(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
              listing[i + 1] = listing[i];
              listing[i] = "\tasl @";
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDA_VAL(i + 1) && ORA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
              listing[i] = "";
              listing[i + 1] = "\tora " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 2] = "";
              Result = false;
              break;
            };
          };
          return Result;
        };
        function PeepholeOptimization_STA() {
          var Result = false;
          var i = 0;
          Result = true;
          Rebuild();
          for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
            i = $l;
            if (opt_STA_ADD(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_LDY(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_BP(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_LSR(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_IMUL(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_IMUL_CX(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_ZTMP(i) === false) {
              Result = false;
              break;
            };
          };
          return Result;
        };
        function opt_STZ(i) {
          var Result = false;
          Result = true;
          if (listing[i + 1] !== "\tsta @PARAM?") {
            if (LDA_IM_0(i) && STA_VAL(i + 1) && (IY(i + 1) === false) && (LDA_A(i + 2) || JSR(i + 2))) {
              listing[i] = "";
              listing[i + 1] = "\tstz " + pas.System.Copy(listing[i + 1],6,256);
              return false;
            };
            if ((l === (i + 2)) && LDA_IM_0(i) && STA_VAL(i + 1) && (IY(i + 1) === false)) {
              listing[i] = "";
              listing[i + 1] = "\tstz " + pas.System.Copy(listing[i + 1],6,256);
              return false;
            };
          };
          return Result;
        };
        function opt_LDA(i) {
          var Result = false;
          var tmp = "";
          Result = true;
          if (LDA_IM(i) && STA_STACK(i + 1) && INY(i + 2)) {
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = "\tiny";
          };
          if (LDY(i) && LDA_A(i + 1) && STA_A(i + 2) && STY(i + 3) && STY(i + 4) && STY(i + 5)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i] = "";
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "\tsta " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 5] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          if (STY_STACK(i) && LDA(i + 1) && AND_ORA_EOR_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\ttya";
            listing[i + 1] = pas.System.Copy(listing[i + 2],1,5) + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            return false;
          };
          if ((LAB_A(i) || DEY(i)) && STY_STACK(i + 1) && LDA_STACK(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "\ttya";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && (STY(i + 1) || INY(i + 1) || DEY(i + 1) || LDY(i + 1)) && (LDY_1(i + 1) === false) && LDA_STACK(i + 2) && (SKIP(i + 3) === false) && (CMP(i + 3) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STY_STACK(i) && STA(i + 1) && LDA_STACK(i + 2) && STA_A(i + 3) && (IY(i + 3) === false) && LDA_A(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tsty " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STY_STACK(i) && STY_STACK(i + 1)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if (LDY(i) && LDA_A(i + 1) && STY(i + 2) && STA_A(i + 3)) {
            tmp = listing[i + 1];
            listing[i + 1] = listing[i + 2];
            listing[i + 2] = tmp;
            return false;
          };
          if (LDY_IM(i) && LDA_IM(i + 1) && STY(i + 2) && STA(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i + 1] = "";
            listing[i + 3] = "\tsty " + pas.System.Copy(listing[i + 3],6,256);
            return false;
          };
          if (LDY_IM(i) && LDA_IM(i + 1) && STY_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = "\tlda " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDY(i + 1) && STY(i + 2) && LDY(i + 3) && LDA_STACK(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((listing[i] === listing[i + 3]) && (AND_ORA_EOR(i + 1) || LSR_A(i + 1) || ASL_A(i + 1)) && (listing[i + 1] === listing[i + 4]) && STA(i + 2) && STA(i + 5)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDA_A(i) || ADC_SBC(i)) && MWY(i + 1) && LDY(i + 2) && LDA_A(i + 3)) {
            listing[i] = "";
            return false;
          };
          if (LDA_IM_0(i) && (STA_A(i + 1) || LDY(i + 1)) && MVA_IM_0(i + 2)) {
            listing[i + 2] = "\tsta " + pas.System.Copy(listing[i + 2],11,256);
            return false;
          };
          if (LDA_VAL(i) && ASL_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_IM(i) === false) && (LDA_IM(i + 2) === false) && LDA(i) && STA_A(i + 1) && LDA(i + 2)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256))) {
            listing[i + 2] = "";
            return false;
          };
          if (LDA_IM(i) && STA_A(i + 1) && STA_STACK(i + 2) && STA_A(i + 3) && LDA_STACK(i + 4)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = listing[i];
            listing[i + 2] = "";
            return false;
          };
          if (LDA_STACK(i + 6) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY_VAL(i + 3) && LDA_STACK(i + 4) && STA_A(i + 5) && STA_A(i + 7)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 4] = listing[i];
            listing[i + 6] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA_STACK(i + 5) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3) && STA_A(i + 4)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 5] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_STACK(i + 7) && LDA_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && AND_ORA_EOR_STACK(i + 5) && STA_VAL(i + 6) && AND_ORA_EOR_STACK(i + 8) && STA_VAL(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 5] = pas.System.Copy(listing[i + 5],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = pas.System.Copy(listing[i + 8],1,5) + pas.System.Copy(listing[i + 2],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_VAL(i + 7) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && AND_ORA_EOR_STACK(i + 5) && STA_VAL(i + 6) && AND_ORA_EOR_STACK(i + 8) && STA_VAL(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 5] = pas.System.Copy(listing[i + 5],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = pas.System.Copy(listing[i + 8],1,5) + pas.System.Copy(listing[i + 2],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_STACK(i + 6) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && AND_ORA_EOR(i + 3) && (AND_ORA_EOR_STACK(i + 3) === false) && STA_STACK(i + 4) && LDA_VAL(i + 5)) if ((pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && AND_ORA_EOR_STACK(i + 3) && STA_A(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 2] = pas.System.Copy(listing[i + 3],1,5) + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 1] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && AND_ORA_EOR(i + 3) && (IY(i + 3) === false) && AND_ORA_EOR_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = pas.System.Copy(listing[i + 4],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && IY(i) && AND_ORA_EOR(i + 1) && STA_A(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = pas.System.Copy(listing[i + 1],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
            return false;
          };
          if (LDY_VAL(i + 5) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_BP2_Y(i) && INY(i + 1) && LDA_BP2_Y(i + 2)) {
            listing[i] = "";
            return false;
          };
          if (LDA_BP2_Y(i) && LDA_A(i + 1)) {
            listing[i] = "";
            if ((i > 0) && INY(i - 1)) listing[i - 1] = "";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && MWY_BP2(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2))) {
            listing[i] = "";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && (LDA_A(i + 1) || MVA(i + 1) || MWA(i + 1))) {
            listing[i] = "";
            return false;
          };
          if (LDA_A(i) && IY(i) && LDA_A(i + 1) && (IY(i + 1) === false)) {
            listing[i] = "";
            return false;
          };
          if (LDA_A(i) && IY(i) && LDA_A(i + 1) && IY(i + 1)) {
            listing[i] = "";
            return false;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && STA_STACK(i + 2)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_IM_0(i + 3) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 2] = "";
            if ((ASL(i + 3) === false) && (LSR(i + 3) === false)) listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && (ADD_IM_0(i + 2) === false) && (CMP(i + 2) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i + 1] = "";
            if ((ASL(i + 2) === false) && (LSR(i + 2) === false) && (SKIP(i + 2) === false)) listing[i] = "";
            return false;
          };
          if (AND_ORA_EOR(i) && (LDA_A(i + 1) || MVA(i + 1) || MWA(i + 1))) {
            listing[i] = "";
            return false;
          };
          if (LDA_A(i) && (SKIP(i + 1) === false) && (TAY(i + 1) === false) && (STA(i + 1) === false) && MWA(i + 2)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDY(i + 5) && MWY_BP2(i) && LDY(i + 1) && LDA(i + 2) && SKIP(i + 3) && MWY(i + 4) && LDA(i + 6)) if (listing[i] === listing[i + 4]) {
            listing[i + 4] = "";
            if (listing[i + 1] === listing[i + 5]) listing[i + 5] = "";
            return false;
          };
          if ((listing[i] === "\tlsr #$00") && (listing[i + 1] === "\tror @")) {
            listing[i] = "\tlsr @";
            listing[i + 1] = "";
            return false;
          };
          if ((listing[i] === "\tlsr #$00") && ROR_STACK(i + 1)) {
            listing[i] = "";
            listing[i + 1] = "\tlsr " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if (BNE(i) && BNE(i + 1)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && STA_BP2_Y(i + 1) && INY(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && STA_BP2_Y(i + 4)) if (listing[i] === listing[i + 3]) {
            listing[i + 3] = "";
            if (INY(i + 5) && LDA(i + 6) && STA_BP2_Y(i + 7)) if (listing[i] === listing[i + 6]) {
              listing[i + 6] = "";
              if (INY(i + 8) && LDA(i + 9) && STA_BP2_Y(i + 10)) if (listing[i] === listing[i + 9]) listing[i + 9] = "";
            };
            return false;
          };
          if ((listing[i] === "\tlsr #$00") && (listing[i + 1] === "\tror #$00") && ROR_STACK(i + 2) && ROR_STACK(i + 3)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "\tlsr " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 3] = "\tror " + pas.System.Copy(listing[i + 3],6,256);
            return false;
          };
          if (TYA(i) && LDA(i + 1) && STA(i + 2)) {
            listing[i] = "";
            return false;
          };
          if (TYA(i) && LDA(i + 1) && AND_ORA_EOR(i + 2) && STA(i + 3)) {
            listing[i] = "";
            return false;
          };
          if (LDY(i + 4) && LDA_IM(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && MWY_BP2(i + 3) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 5] = listing[i];
            listing[i + 1] = "";
            return false;
          };
          if (LDY(i + 7) && LDA_IM(i) && STA_STACK(i + 1) && MWY_BP2(i + 2) && LDY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDA_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 8] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && LDY_STACK(i + 2) && (SKIP(i + 3) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256))) {
            listing[i] = "\ttay";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDY(i + 1) && LDA_STACK(i + 2) && STA(i + 3) && IY(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 1],6,256))) {
            listing[i] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && MWY_BP2(i + 1) && LDY(i + 2) && LDA_STACK(i + 3) && STA(i + 4) && IY(i + 4)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA(i) && LDY(i + 1)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i] = "\ttay";
            listing[i + 1] = "";
            return false;
          };
          if (STA(i) && MWY_BP2(i + 1) && LDY(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 2] = "\ttay";
            return false;
          };
          if ((LDA_A(i) || ADC_SBC(i)) && (IY(i) === false) && LDY(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2))) {
            if ((i > 0) && ADC_SBC(i) && LDA_A(i - 1)) listing[i - 1] = "";
            listing[i] = "";
            return false;
          };
          if (LDY_IM_0(i) && INY(i + 1)) {
            listing[i] = "\tldy #$01";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_STACK(i + 8) && STA_STACK(i) && (IY(i + 1) === false) && (IY(i + 3) === false) && LDA_A(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && STA_STACK(i + 4) && LDY_STACK(i + 5) && LDA_STACK(i + 6) && STA_A(i + 7) && STA_A(i + 9)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 6] = listing[i + 1];
            listing[i + 8] = listing[i + 3];
            listing[i] = "\ttay";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA_STACK(i + 16) && LDY_VAL(i) && (listing[i] === listing[i + 9]) && LDA_A(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LDA_STACK(i + 10) && STA_A(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && STA_A(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 16],6,256))) {
            listing[i + 10] = listing[i + 1];
            listing[i + 12] = listing[i + 3];
            listing[i + 14] = listing[i + 5];
            listing[i + 16] = listing[i + 7];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (LDA_STACK(i + 15) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDY_STACK(i + 8) && LDA_STACK(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 12) && LDA_STACK(i + 13) && STA_A(i + 14) && STA_A(i + 16)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            listing[i + 9] = listing[i];
            listing[i + 11] = listing[i + 2];
            listing[i + 13] = listing[i + 4];
            listing[i + 15] = listing[i + 6];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (LDA_STACK(i + 18) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 2] = listing[i + 13];
            listing[i + 5] = listing[i + 15];
            listing[i + 8] = listing[i + 17];
            listing[i + 11] = listing[i + 19];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            return false;
          };
          if (STA_STACK(i + 15) && LDA_A(i) && STA_A(i + 1) && LDA_A(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 8] = listing[i];
            listing[i + 10] = listing[i + 2];
            listing[i + 12] = listing[i + 4];
            listing[i + 14] = listing[i + 6];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (STA_STACK(i + 15) && LDA_A(i) && STA_A(i + 1) && LDA_A(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 5],6,256) !== pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 7],6,256) !== pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 8] = listing[i];
            listing[i + 10] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_STACK(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3)) if ((pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_A(i) === false) && STA_VAL(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5) && LDA_A(i + 6) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 6] = listing[i + 2];
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_STACK(i + 6) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 4] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_STACK(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 4] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_STACK(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && (ADD_SUB(i + 5) || AND_ORA_EOR(i + 5))) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i + 7) && STA_VAL(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 1] = listing[i + 5];
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (STA_STACK(i + 5) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (STA_STACK(i + 3) && LDA_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((listing[i] === "\tsta @PARAM?") && INY(i + 1) && LDA(i + 2) && STA(i + 3)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if ((listing[i + 7] === "\tsta @PARAM?") && ADD_SUB(i) && STA_BP2(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_BP2_1(i + 4) && LDY_IM_0(i + 5) && LDA_BP2_Y(i + 6)) {
            listing[i + 1] = "\ttay";
            listing[i + 4] = "\tsta :bp+1";
            listing[i + 5] = "";
            listing[i + 6] = "\tlda (:bp),y";
            return false;
          };
          if (INY(i) && LDA_A(i + 1) && INY(i + 2) && LDA_A(i + 3) && LDA_A(i + 4)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_EAX_1(i + 6) && LDA_VAL(i) && STA_EAX(i + 1) && LDA_VAL(i + 2) && STA_EAX_1(i + 3) && LDA_EAX(i + 4) && STA_STACK(i + 5) && STA_STACK(i + 7)) if (pas.System.Copy(listing[i + 5],6,256) !== pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 4] = listing[i];
            listing[i + 6] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          return Result;
        };
        function opt_TAY(i) {
          var Result = false;
          var p = 0;
          Result = true;
          if (LDA_A(i) && (IY(i) === false) && TAY(i + 1) && LDA_A(i + 2)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && (IY(i) === false) && (listing[i + 1] === "\tsub #$01") && TAY(i + 2) && (SBC(i + 4) === false)) {
            if (LDA_IM(i)) {
              p = GetBYTE(i);
              listing[i] = "\tldy #$" + pas.SysUtils.IntToHex((p - 1) & 0xff,2);
              listing[i + 1] = "";
              listing[i + 2] = "";
            } else {
              listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
              listing[i + 1] = "\tdey";
              listing[i + 2] = "";
            };
            return false;
          };
          if (TYA(i) && (listing[i + 1] === "\tadd #$01") && TAY(i + 2) && (SKIP(i + 3) === false)) {
            listing[i] = "\tiny";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (TYA(i) && (listing[i + 1] === "\tsub #$01") && TAY(i + 2) && (SKIP(i + 3) === false)) {
            listing[i] = "\tdey";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA(i) && (IY(i) === false) && (listing[i + 1] === "\tadd #$01") && TAY(i + 2) && LDA(i + 3) && ADD(i + 4)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\tiny";
            listing[i + 2] = "";
            return false;
          };
          if (ADD_IM_0(i) && TAY(i + 1) && (ADC(i + 3) === false)) {
            listing[i] = "";
            return false;
          };
          if (SUB_IM_0(i) && TAY(i + 1) && (SBC(i + 3) === false)) {
            listing[i] = "";
            return false;
          };
          if (LDA(i) && (IY(i) === false) && TAY(i + 1)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if (TAY(i + 2) && STA_STACK(i) && ASL_A(i + 1) && LDA_VAL(i + 3) && STA_STACK(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i] = "";
            return false;
          };
          if (TAY(i + 3) && STA_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && LDA_VAL(i + 4) && STA_STACK(i + 5)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "";
            return false;
          };
          if (TAY(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && LDA_VAL(i + 5) && ADC_SBC_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = pas.System.Copy(listing[i + 6],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (TAY(i + 4) && LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && LDA_VAL(i + 5) && ADC_SBC_STACK(i + 6)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 6] = pas.System.Copy(listing[i + 6],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (TAY(i + 4) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_A(i + 3) && LDA_VAL(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_A(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 7] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (TAY(i + 5) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ASL_A(i + 4) && LDA_STACK(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && STA_A(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 6] = listing[i];
            listing[i + 8] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (TAY(i + 6) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && ASL_A(i + 5) && LDA_STACK(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 7] = listing[i];
            listing[i + 9] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (TAY(i + 6) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && ASL_A(i + 5)) if ((pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 4] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (TAY(i + 8) && LDA_A(i) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && ADC_SBC(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && ASL_A(i + 7) && LDA_STACK(i + 9) && STA_VAL(i + 10) && LDA_STACK(i + 11) && STA_VAL(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing_tmp[0] = listing[i + 6];
            listing_tmp[1] = listing[i + 7];
            listing_tmp[2] = listing[i + 8];
            listing_tmp[3] = listing[i];
            listing_tmp[4] = listing[i + 1];
            listing_tmp[5] = listing[i + 10];
            listing_tmp[6] = listing[i + 3];
            listing_tmp[7] = listing[i + 4];
            listing_tmp[8] = listing[i + 12];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            for (p = 0; p <= 8; p++) listing[i + p] = listing_tmp[p];
            return false;
          };
          if (TAY(i + 11) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDA_A(i + 8) && ASL_A(i + 9) && ASL_A(i + 10) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 12] = listing[i];
            listing[i + 14] = listing[i + 2];
            listing[i + 16] = listing[i + 4];
            listing[i + 18] = listing[i + 6];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (LDA_A(i) && (listing[i] === listing[i + 5]) && ADD_IM(i + 1) && (listing[i + 1] === listing[i + 6]) && ASL_A(i + 2) && ASL_A(i + 3) && STA_STACK(i + 4) && ASL_A(i + 7) && ASL_A(i + 8)) {
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (TAY(i + 5) && LDA_A(i) && (listing[i] === listing[i + 3]) && ASL_A(i + 1) && STA_STACK(i + 2) && ASL_A(i + 4)) {
            listing[i + 3] = "\tsty " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "\ttay";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (TAY(i + 7) && LDA_A(i) && (listing[i] === listing[i + 4]) && ASL_A(i + 1) && ASL_A(i + 2) && STA_STACK(i + 3) && ASL_A(i + 5) && ASL_A(i + 6)) {
            listing[i + 4] = "\tsty " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 3] = "\ttay";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (TAY(i + 7) && LDA(i) && (listing[i] === listing[i + 5]) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && ASL_A(i + 6) && LDA_ADR(i + 8) && ADD_SUB_STACK(i + 9) && STA(i + 10)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            if (ADD_STACK(i + 9)) {
              listing[i + 8] = "\tadd " + pas.System.Copy(listing[i + 8],6,256)}
             else listing[i + 8] = "\tsub " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 9] = "";
            return false;
          };
          if (TAY(i + 7) && LDA(i) && (listing[i] === listing[i + 5]) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && ASL_A(i + 6) && LDA_STACK(i + 8) && ADD_SUB(i + 9) && STA(i + 10)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (TAY(i + 8) && LDA_A(i) && (listing[i] === listing[i + 5]) && ASL_A(i + 1) && ASL_A(i + 2) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDA_A(i + 5) && ASL_A(i + 6) && ASL_A(i + 7)) {
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (TAY(i + 9) && LDA_A(i) && (listing[i] === listing[i + 5]) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && STA_STACK(i + 4) && ASL_A(i + 6) && ASL_A(i + 7) && ASL_A(i + 8)) {
            listing[i + 5] = "\tsty " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 4] = "\ttay";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          if (TAY(i + 9) && LDA(i) && (listing[i] === listing[i + 7]) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && ASL_A(i + 8) && LDA_STACK(i + 10) && ADD_SUB(i + 11) && STA(i + 12) && LDA_STACK(i + 13) && ADC_SBC(i + 14) && STA(i + 15)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
            listing[i + 10] = listing[i + 3];
            listing[i + 13] = listing[i + 5];
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          if (TAY(i + 9) && LDA_A(i) && (listing[i] === listing[i + 7]) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && ASL_A(i + 8) && LDA_STACK(i + 10) && STA_ADR(i + 11) && LDA_STACK(i + 12) && STA_ADR(i + 13)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
            listing[i + 4] = listing[i + 11];
            listing[i + 6] = listing[i + 13];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (TAY(i + 11) && LDY(i) && (listing[i] === listing[i + 7]) && LDA_ADR(i + 1) && (listing[i + 1] === listing[i + 8]) && ASL_A(i + 2) && ASL_A(i + 3) && TAY(i + 4) && LDA_ADR(i + 5) && STA_A(i + 6) && ASL_A(i + 9) && ASL_A(i + 10)) if ((pas.System.Copy(listing[i + 6],6,256) !== pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) !== pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (TAY(i + 11) && LDA_A(i) && (listing[i] === listing[i + 9]) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && ADD_SUB(i + 4) && STA_STACK(i + 5) && LDA_ADR(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && ASL_A(i + 10) && LDA_STACK(i + 12) && STA_ADR(i + 13) && LDA_STACK(i + 14) && STA_ADR(i + 15)) if ((pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 5] = listing[i + 13];
            listing[i + 8] = listing[i + 15];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (TAY(i + 11) && LDA_A(i) && (listing[i] === listing[i + 9]) && ASL_A(i + 1) && TAY(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && ASL_A(i + 10) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15)) if ((pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 5] = listing[i + 13];
            listing[i + 8] = listing[i + 15];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (TAY(i + 13) && LDA_A(i) && (listing[i] === listing[i + 7]) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB(i + 3) && (listing[i + 3] === listing[i + 10]) && ASL_A(i + 4) && ADD_SUB(i + 5) && (listing[i + 5] === listing[i + 12]) && STA_STACK(i + 6) && ASL_A(i + 8) && ASL_A(i + 9) && ASL_A(i + 11)) {
            listing[i + 7] = "\tsty " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 6] = "\ttay";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (TAY(i + 19) && LDA_A(i) && (listing[i] === listing[i + 16]) && ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_A(i + 4) && AND_ORA_EOR(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && AND_ORA_EOR(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10) && AND_ORA_EOR(i + 11) && STA_STACK(i + 12) && LDA_A(i + 13) && AND_ORA_EOR(i + 14) && STA_STACK(i + 15) && ASL_A(i + 17) && ASL_A(i + 18) && LDA_STACK(i + 20) && STA_A(i + 21) && LDA_STACK(i + 22) && STA_A(i + 23) && LDA_STACK(i + 24) && STA_A(i + 25) && LDA_STACK(i + 26) && STA_A(i + 27)) if ((pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 12],6,256) === pas.System.Copy(listing[i + 24],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 26],6,256))) {
            listing[i + 6] = listing[i + 21];
            listing[i + 9] = listing[i + 23];
            listing[i + 12] = listing[i + 25];
            listing[i + 15] = listing[i + 27];
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            listing[i + 26] = "";
            listing[i + 27] = "";
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && TAY(i + 3)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && TAY(i + 6)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 2) || STA_ADR(i + 3)) && ROL_STACK(i) && TAY(i + 1)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 3) || STA_ADR(i + 4)) && ROL_STACK(i) && ASL_A(i + 1) && TAY(i + 2)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_STACK(i) && ADD_SUB_VAL(i + 1) && ADD_SUB_VAL(i + 2) && TAY(i + 3)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ROL_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && TAY(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ASL_STACK(i) && ROL_A(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ROL_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && AND_ORA_EOR_VAL(i + 3) && ADD_SUB_STACK(i + 4) && TAY(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 4],6,256)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && ADD_SUB_VAL(i + 5) && TAY(i + 6)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && ADD_SUB_VAL(i + 6) && TAY(i + 7)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && TAY(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ROL_STACK(i) && ADD_SUB_VAL(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && AND_ORA_EOR_VAL(i + 4) && ADD_SUB_STACK(i + 5) && TAY(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD_SUB_VAL(i + 6) && TAY(i + 7)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4) && ASL_A(i + 5) && ADD_SUB_VAL(i + 6) && TAY(i + 7)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 1] = "";
            if (ADD_STACK(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i],6,256);
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && AND_ORA_EOR_VAL(i + 5) && ADD_SUB_STACK(i + 6) && TAY(i + 7)) if (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_STACK(i + 2) && ASL_A(i + 3) && STA_STACK(i + 4) && LDA_VAL(i + 5) && AND_ORA_EOR(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_VAL(i + 5) && AND_ORA_EOR_VAL(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && STA_STACK(i + 4) && LDA_VAL(i + 5) && AND_ORA_EOR_VAL(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 10) || STA_ADR(i + 11)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_STACK(i + 3) && ASL_A(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && AND_ORA_EOR(i + 7) && ADD_SUB_STACK(i + 8) && TAY(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && ASL_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB_VAL(i + 7) && TAY(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && ASL_STACK(i + 5) && LDA_VAL(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ASL_STACK(i) && ROL_STACK(i + 1) && LDA_STACK(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_A(i) && LDA_A(i + 1) && ASL_A(i + 2) && TAY(i + 3)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ASL_STACK(i) && ROL_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && TAY(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          return Result;
        };
        function opt_LDY(i) {
          var Result = false;
          var p = 0;
          var tmp = "";
          Result = true;
          if (INY(i) && LDA_IM_0(i + 1) && ASL_STACK(i + 2)) {
            listing[i] = "";
            return false;
          };
          if (INY(i) && (LSR_STACK(i + 1) || ASL_STACK(i + 1))) {
            listing[i] = "";
            return false;
          };
          if (TAY(i) && TYA(i + 1)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((INY(i) || DEY(i)) && (LDY(i + 1) || MVY(i + 1))) {
            listing[i] = "";
            pas.Common.optyY = "";
            return false;
          };
          if (LDY(i) && STY(i + 1) && (STY_BP_1(i + 1) === false)) {
            listing[i] = "\tlda " + pas.System.Copy(listing[i],6,256);
            k = i + 1;
            while (STY(k)) {
              listing[k] = "\tsta " + pas.System.Copy(listing[k],6,256);
              k += 1;
            };
            pas.Common.optyY = "";
            return false;
          };
          if (LDY_IM(i) && INY(i + 1)) {
            p = GetBYTE(i) + 1;
            if (p < 256) {
              listing[i] = "\tldy #$" + pas.SysUtils.IntToHex(p,2);
              listing[i + 1] = "";
              return false;
            };
          };
          if (LDA_VAL(i) && (LDA_IM(i) === false) && ADD_SUB(i + 1) && STA_VAL(i + 2) && LDY(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 3] = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = "\ttya";
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && STA(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA(i + 3) && LDY(i + 4) && LDA(i + 5) && STA_A(i + 6) && LDA(i + 7) && STA_A(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 5] = listing[i];
            listing[i + 7] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (TAY(i) && STY(i + 1) && LDY(i + 2)) {
            listing[i] = "";
            listing[i + 1] = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if (STA(i) && STA(i + 1) && LDY(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 2] = "\ttay";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && LDY(i + 1) && CMP(i + 2)) {
            tmp = listing[i];
            listing[i] = listing[i + 1];
            listing[i + 1] = tmp;
            return false;
          };
          if (STY_STACK(i) && TYA(i + 1) && STA_STACK(i + 2) && LDA(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDY_STACK(i + 3) && STY_STACK(i) && LDA_A(i + 1) && ADD_SUB(i + 2) && (SKIP(i + 4) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDY_STACK(i + 4) && STA_STACK(i) && TAY(i + 1) && LDA_VAL(i + 2) && ADD_SUB_VAL(i + 3) && STA_VAL(i + 5)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDY_STACK(i + 5) && LDA(i) && (listing[i + 1] === "\tadd #$01") && STA_STACK(i + 2) && LDY(i + 3) && LDA_A(i + 4)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 5] = "\tiny";
            return false;
          };
          if (LDY_STACK(i + 2) && STA_STACK(i) && (LDA_A(i + 1) || AND_ORA_EOR(i + 1)) && (IY(i + 1) === false) && STA_A(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\ttay";
            listing[i + 2] = "";
            return false;
          };
          if (LDY_STACK(i + 3) && STA_STACK(i) && LDA_A(i + 1) && (IY(i + 1) === false) && AND_ORA_EOR(i + 2) && (IY(i + 2) === false) && STA_A(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "\ttay";
            listing[i + 3] = "";
            return false;
          };
          if (LDY_STACK(i + 4) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LDA_A(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDY(i) && (listing[i] === listing[i + 3]) && INY(i + 1) && (LDA_A(i + 2) || STA_A(i + 2))) {
            listing[i + 3] = "\tdey";
            return false;
          };
          if (TAY(i + 10) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_VAL(i + 4) && STA_A(i + 5) && LDA_VAL(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && ASL_A(i + 9)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
            listing[i + 8] = listing[i];
            listing[i + 1] = "";
            return false;
          };
          if (LDY_IM(i + 5) && LDA_BP2(i) && ADD_IM(i + 1) && (pas.System.Pos("-DATAORIGIN",listing[i + 1]) > 0) && STA_BP2(i + 2) && SCC(i + 3) && INC_BP2_1(i + 4)) {
            if (LDY_IM_0(i + 5)) {
              listing[i] = "\tldy " + pas.System.Copy(listing[i + 1],6,256)}
             else listing[i] = "\tldy " + pas.System.Copy(listing[i + 1],6,256) + "+" + pas.System.Copy(listing[i + 5],7,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDY_IM(i + 12) && LDA_BP2(i) && ADD_IM(i + 1) && (pas.System.Pos("-DATAORIGIN",listing[i + 1]) > 0) && STA_BP2(i + 2) && LDA_BP2_1(i + 3) && ADC_IM_0(i + 4) && STA_BP2_1(i + 5) && LDA_BP2(i + 6) && ADD_IM(i + 7) && STA_BP2(i + 8) && LDA_BP2_1(i + 9) && ADC_IM_0(i + 10) && STA_BP2_1(i + 11)) {
            if (LDY_IM_0(i + 5)) {
              listing[i] = "\tldy " + pas.System.Copy(listing[i + 1],6,256)}
             else listing[i] = "\tldy " + pas.System.Copy(listing[i + 1],6,256) + "+" + pas.System.Copy(listing[i + 7],7,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && STA_ADR(i + 2)) {
            listing[i + 3] = "";
            return false;
          };
          if (LDY(i) && (listing[i] === listing[i + 5]) && LDA_ADR(i + 1) && STA_ADR(i + 2) && LDA_ADR(i + 3) && STA_ADR(i + 4)) {
            listing[i + 5] = "";
            return false;
          };
          if (LDY(i) && (listing[i] === listing[i + 2]) && LDA_ADR(i + 1) && STA_ADR(i + 3)) {
            listing[i + 2] = "";
            return false;
          };
          if (LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && ADD_SUB(i + 2) && STA_ADR(i + 4)) {
            listing[i + 3] = "";
            return false;
          };
          if (LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 4) && ADD_SUB_STACK(i + 5)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            if (ADD_STACK(i + 5)) {
              listing[i + 5] = "\tadd " + pas.System.Copy(listing[i + 1],6,256)}
             else listing[i + 5] = "\tsub " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDY_VAL(i) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDY_VAL(i + 3) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB_STACK(i + 7)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            if (ADD_STACK(i + 7)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 2] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            if (listing[i] === listing[i + 3]) listing[i + 3] = "";
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && (LDY(i + 3) || INY(i + 3)) && LDA_ADR(i + 4) && AND_ORA_EOR_STACK(i + 5)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 2] = "";
            listing[i + 4] = pas.System.Copy(listing[i + 5],1,5) + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 5] = "";
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && (LDY(i + 3) || INY(i + 3)) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && AND_ORA_EOR(i + 7)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 2] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 4] = pas.System.Copy(listing[i + 7],1,5) + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 7] = "";
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_A(i + 7) && LDA_STACK(i + 8) && (ADC_SBC(i + 9) || AND_ORA_EOR(i + 9))) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 2] = "";
            listing[i + 5] = listing[i + 1];
            listing[i + 8] = listing[i + 3];
            listing[i + 1] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && (ADD_SUB_STACK(i + 6) || AND_ORA_EOR_STACK(i + 6)) && STA_A(i + 7) && LDA_A(i + 8) && (ADC_SBC_STACK(i + 9) || AND_ORA_EOR_STACK(i + 9))) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 2] = "";
            listing[i + 6] = pas.System.Copy(listing[i + 6],1,5) + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 9] = pas.System.Copy(listing[i + 9],1,5) + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 1] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD_SUB_STACK(i + 6) && STA(i + 7) && (ADC_SBC_STACK(i + 9) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 5] = pas.System.Copy(listing[i + 5],1,5) + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 6] = pas.System.Copy(listing[i + 6],1,5) + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDY_STACK(i + 5) && STY_STACK(i) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 6) && STA_ADR(i + 7) && LDA_STACK(i + 8) && STA_ADR(i + 9)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 6] = listing[i + 1];
            listing[i + 8] = listing[i + 3];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDY(i + 5) && (listing[i + 5] === listing[i]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 6) && STA_ADR(i + 7) && LDA_STACK(i + 8) && STA_ADR(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 6] = listing[i + 1];
            listing[i + 8] = listing[i + 3];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (ROL_A(i + 10) && LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && ASL_STACK(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 12] = listing[i + 1];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (ROL_A(i + 10) && LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && ASL_STACK(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_STACK(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15)) if ((pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
            listing[i + 15] = listing[i + 1];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STY_STACK(i) && LDA_ADR(i + 1) && LDY_STACK(i + 2) && STA_ADR(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDY(i + 5) && (listing[i + 5] === listing[i]) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 6] = listing[i + 1];
            listing[i + 9] = listing[i + 3];
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDY(i + 7) && (listing[i + 7] === listing[i]) && LDA_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADC_SBC_VAL(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 8) && STA_ADR(i + 9) && LDA_STACK(i + 10) && STA_ADR(i + 11)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 3] = listing[i + 9];
            listing[i + 6] = listing[i + 11];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDY(i + 6) && LDA_A(i) && (IY(i) === false) && ADD_SUB_VAL(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && ADC_SBC_VAL(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_STACK(i + 7) && STA_ADR(i + 8) && LDA_STACK(i + 9) && STA_ADR(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing_tmp[0] = listing[i + 6];
            listing_tmp[1] = listing[i];
            listing_tmp[2] = listing[i + 1];
            listing_tmp[3] = listing[i + 8];
            listing_tmp[4] = listing[i + 3];
            listing_tmp[5] = listing[i + 4];
            listing_tmp[6] = listing[i + 10];
            listing[i] = listing_tmp[0];
            listing[i + 1] = listing_tmp[1];
            listing[i + 2] = listing_tmp[2];
            listing[i + 3] = listing_tmp[3];
            listing[i + 4] = listing_tmp[4];
            listing[i + 5] = listing_tmp[5];
            listing[i + 6] = listing_tmp[6];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (TAY(i + 5) && LDY(i) && (listing[i] === listing[i + 3]) && LDA_ADR(i + 1) && (listing[i + 1] === listing[i + 4]) && STA_STACK(i + 2)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          return Result;
        };
        function opt_AND(i) {
          var Result = false;
          var p = 0;
          Result = true;
          if (LDA_IM_0(i) && AND_(i + 1) && STA_A(i + 2)) {
            listing[i + 1] = "";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && AND_IM_0(i + 1) && STA_A(i + 2)) {
            listing[i] = "";
            listing[i + 1] = "\tlda #$00";
            return false;
          };
          if (LDA_STACK(i) && AND_IM_0(i + 1) && STA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tlda #$00";
            return false;
          };
          if (AND_IM_0(i) && MWY(i + 1) && LDY(i + 2) && LDA_A(i + 3)) {
            listing[i] = "";
            return false;
          };
          if (LDA_A(i) && (listing[i + 1] === "\tand #$FF") && STA_A(i + 2)) {
            if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
              listing[i] = "";
              listing[i + 2] = "";
            };
            listing[i + 1] = "";
            return false;
          };
          if (AND_ORA_EOR(i) && (listing[i + 1] === "\tand #$FF") && STA_A(i + 2)) {
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && AND_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tand " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 1) && AND_IM(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_BP2_Y(i + 5) && AND_IM(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && AND_IM(i + 10) && STA_STACK(i + 11) && INY(i + 12) && LDA_BP2_Y(i + 13) && AND_IM(i + 14) && STA_STACK(i + 15) && LDA_A(i + 16) && EOR_STACK(i + 17) && STA_A(i + 18) && LDA_A(i + 19) && EOR_STACK(i + 20) && STA_A(i + 21) && LDA_A(i + 22) && EOR_STACK(i + 23) && STA_A(i + 24) && LDA_A(i + 25) && EOR_STACK(i + 26) && STA_A(i + 27)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 23],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 26],6,256))) {
            for (p = 0; p <= 3; p++) if (listing[(p * 4) + i + 2] === "\tand #$00") {
              listing[(p * 4) + i + 1] = "";
              listing[(p * 4) + i + 2] = "";
              listing[(p * 4) + i + 3] = "";
              listing[(p * 3) + i + 17] = "";
            } else if (listing[(p * 4) + i + 2] === "\tand #$FF") {
              listing[(p * 4) + i + 1] = listing[(p * 3) + i + 16];
              listing[(p * 4) + i + 2] = "\teor (:bp2),y";
              listing[(p * 4) + i + 3] = listing[(p * 3) + i + 18];
              listing[(p * 3) + i + 16] = "";
              listing[(p * 3) + i + 17] = "";
              listing[(p * 3) + i + 18] = "";
            };
            if (listing[i + 13] === "") {
              listing[i + 12] = "";
              if (listing[i + 9] === "") {
                listing[i + 8] = "";
                if (listing[i + 5] === "") {
                  listing[i + 4] = "";
                };
              };
            };
            return false;
          };
          if (LDA_BP2_Y(i) && AND_IM_0(i + 1) && STA_A(i + 2)) {
            listing[i] = "";
            listing[i + 1] = "\tlda #$00";
            return false;
          };
          return Result;
        };
        function opt_ORA(i) {
          var Result = false;
          Result = true;
          if (LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7)) {
            if (LDA_A(i + 8) && ORA_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && ORA_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && ORA_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && ORA_STACK(i + 18) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
              listing[i + 9] = "\tora " + pas.System.Copy(listing[i],6,256);
              listing[i + 12] = "\tora " + pas.System.Copy(listing[i + 2],6,256);
              listing[i + 15] = "\tora " + pas.System.Copy(listing[i + 4],6,256);
              listing[i + 18] = "\tora " + pas.System.Copy(listing[i + 6],6,256);
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              return false;
            };
            if (LDA_STACK(i + 8) && AND_ORA_EOR(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && AND_ORA_EOR(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && AND_ORA_EOR(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && AND_ORA_EOR(i + 18) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
              listing[i + 8] = listing[i];
              listing[i + 11] = listing[i + 2];
              listing[i + 14] = listing[i + 4];
              listing[i + 17] = listing[i + 6];
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              return false;
            };
          };
          if (LDA_A(i) && ORA_IM_0(i + 1) && STA_A(i + 2)) {
            if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
              listing[i] = "";
              listing[i + 2] = "";
            };
            listing[i + 1] = "";
            return false;
          };
          if (LDA_A(i) && ORA_IM_0(i + 1) && AND_ORA_EOR(i + 2)) {
            listing[i + 1] = "";
            return false;
          };
          if (AND_ORA_EOR(i) && ORA_IM_0(i + 1)) {
            listing[i + 1] = "";
            return false;
          };
          if (LDA_IM_0(i) && ORA(i + 1) && STA_A(i + 2)) {
            listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            return false;
          };
          if (LDA_A(i) && (listing[i + 1] === "\tora #$FF") && STA_A(i + 2)) {
            listing[i] = "";
            listing[i + 1] = "\tlda #$FF";
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ORA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tora " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            return false;
          };
          if (LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && AND_ORA_EOR(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && ORA(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 3] = listing[i];
            listing[i + 6] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && AND_ORA_EOR_VAL(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 7] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ORA_STACK(i + 7) && STA(i + 8) && LDA(i + 9) && ORA_STACK(i + 10) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 2] = "\tora " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 5] = "\tora " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 8];
            listing[i + 7] = listing[i + 11];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDY(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ORA_STACK(i + 7) && STA(i + 8) && LDA(i + 9) && ORA_STACK(i + 10) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) !== pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 1] = listing[i + 6];
            listing[i + 2] = "\tora (:bp2),y";
            listing[i + 3] = listing[i + 8];
            listing[i + 4] = "\tiny";
            listing[i + 5] = listing[i + 9];
            listing[i + 6] = "\tora (:bp2),y";
            listing[i + 7] = listing[i + 11];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ORA(i + 7) && (ORA_STACK(i + 7) === false) && STA(i + 8) && LDA_STACK(i + 9) && ORA(i + 10) && (ORA_STACK(i + 10) === false) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 2] = listing[i + 7];
            listing[i + 5] = listing[i + 10];
            listing[i + 6] = listing[i + 11];
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 3] = listing[i + 8];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          return Result;
        };
        function opt_EOR(i) {
          var Result = false;
          var p = 0;
          Result = true;
          if (AND_ORA_EOR(i + 22) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && AND_ORA_EOR(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && AND_ORA_EOR(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && AND_ORA_EOR(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = listing[i + 1];
            listing_tmp[2] = listing[i + 13];
            listing_tmp[3] = listing[i + 14];
            listing_tmp[4] = listing[i + 3];
            listing_tmp[5] = listing[i + 4];
            listing_tmp[6] = listing[i + 16];
            listing_tmp[7] = listing[i + 17];
            listing_tmp[8] = listing[i + 6];
            listing_tmp[9] = listing[i + 7];
            listing_tmp[10] = listing[i + 19];
            listing_tmp[11] = listing[i + 20];
            listing_tmp[12] = listing[i + 9];
            listing_tmp[13] = listing[i + 10];
            listing_tmp[14] = listing[i + 22];
            listing_tmp[15] = listing[i + 23];
            for (p = 0; p <= 15; p++) listing[i + p] = listing_tmp[p];
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (AND_ORA_EOR_STACK(i + 22) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_VAL(i + 12) && AND_ORA_EOR_STACK(i + 13) && STA_A(i + 14) && LDA_VAL(i + 15) && AND_ORA_EOR_STACK(i + 16) && STA_A(i + 17) && LDA_VAL(i + 18) && AND_ORA_EOR_STACK(i + 19) && STA_A(i + 20) && LDA_VAL(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 22],6,256))) {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = listing[i + 1];
            listing_tmp[2] = pas.System.Copy(listing[i + 13],1,5) + pas.System.Copy(listing[i + 12],6,256);
            listing_tmp[3] = listing[i + 14];
            listing_tmp[4] = listing[i + 3];
            listing_tmp[5] = listing[i + 4];
            listing_tmp[6] = pas.System.Copy(listing[i + 16],1,5) + pas.System.Copy(listing[i + 15],6,256);
            listing_tmp[7] = listing[i + 17];
            listing_tmp[8] = listing[i + 6];
            listing_tmp[9] = listing[i + 7];
            listing_tmp[10] = pas.System.Copy(listing[i + 19],1,5) + pas.System.Copy(listing[i + 18],6,256);
            listing_tmp[11] = listing[i + 20];
            listing_tmp[12] = listing[i + 9];
            listing_tmp[13] = listing[i + 10];
            listing_tmp[14] = pas.System.Copy(listing[i + 22],1,5) + pas.System.Copy(listing[i + 21],6,256);
            listing_tmp[15] = listing[i + 23];
            for (p = 0; p <= 15; p++) listing[i + p] = listing_tmp[p];
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (AND_ORA_EOR_STACK(i + 26) && LDA_A(i) && AND_ORA_EOR(i + 1) && AND_ORA_EOR(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && AND_ORA_EOR(i + 5) && AND_ORA_EOR(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && AND_ORA_EOR(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && AND_ORA_EOR(i + 13) && AND_ORA_EOR(i + 14) && STA_STACK(i + 15) && LDA_A(i + 16) && AND_ORA_EOR_STACK(i + 17) && STA_A(i + 18) && LDA_A(i + 19) && AND_ORA_EOR_STACK(i + 20) && STA_A(i + 21) && LDA_A(i + 22) && AND_ORA_EOR_STACK(i + 23) && STA_A(i + 24) && LDA_A(i + 25) && STA_A(i + 27)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 23],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 26],6,256))) {
            listing_tmp[0] = listing[i];
            listing_tmp[1] = listing[i + 1];
            listing_tmp[2] = listing[i + 2];
            listing_tmp[3] = pas.System.Copy(listing[i + 17],1,5) + pas.System.Copy(listing[i + 16],6,256);
            listing_tmp[4] = listing[i + 18];
            listing_tmp[5] = listing[i + 4];
            listing_tmp[6] = listing[i + 5];
            listing_tmp[7] = listing[i + 6];
            listing_tmp[8] = pas.System.Copy(listing[i + 20],1,5) + pas.System.Copy(listing[i + 19],6,256);
            listing_tmp[9] = listing[i + 21];
            listing_tmp[10] = listing[i + 8];
            listing_tmp[11] = listing[i + 9];
            listing_tmp[12] = listing[i + 10];
            listing_tmp[13] = pas.System.Copy(listing[i + 23],1,5) + pas.System.Copy(listing[i + 22],6,256);
            listing_tmp[14] = listing[i + 24];
            listing_tmp[15] = listing[i + 12];
            listing_tmp[16] = listing[i + 13];
            listing_tmp[17] = listing[i + 14];
            listing_tmp[18] = pas.System.Copy(listing[i + 26],1,5) + pas.System.Copy(listing[i + 25],6,256);
            listing_tmp[19] = listing[i + 27];
            for (p = 0; p <= 19; p++) listing[i + p] = listing_tmp[p];
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            listing[i + 26] = "";
            listing[i + 27] = "";
            return false;
          };
          if (EOR_STACK(i + 18) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && EOR_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && EOR_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && EOR_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 9] = "\teor " + pas.System.Copy(listing[i],6,256);
            listing[i + 12] = "\teor " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 15] = "\teor " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 18] = "\teor " + pas.System.Copy(listing[i + 6],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (EOR_STACK(i + 21) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && INY(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && STA_STACK(i + 10) && LDA_A(i + 11) && EOR_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && EOR_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && EOR_STACK(i + 18) && STA_A(i + 19) && LDA_A(i + 20) && STA_A(i + 22)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            listing[i] = listing[i + 11];
            listing[i + 1] = "\teor (:bp2),y";
            listing[i + 2] = listing[i + 13];
            listing[i + 3] = "\tiny";
            listing[i + 4] = listing[i + 14];
            listing[i + 5] = "\teor (:bp2),y";
            listing[i + 6] = listing[i + 16];
            listing[i + 7] = "\tiny";
            listing[i + 8] = listing[i + 17];
            listing[i + 9] = "\teor (:bp2),y";
            listing[i + 10] = listing[i + 19];
            listing[i + 11] = "\tiny";
            listing[i + 12] = listing[i + 20];
            listing[i + 13] = "\teor (:bp2),y";
            listing[i + 14] = listing[i + 22];
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            return false;
          };
          if (AND_ORA_EOR(i + 6) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 2] = listing[i + 6];
            listing[i + 5] = listing[i + 3];
            listing[i + 6] = listing[i + 4];
            listing[i + 3] = listing[i + 7];
            listing[i + 4] = "";
            listing[i + 7] = "";
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && EOR_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\teor " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            return false;
          };
          if ((INY(i) === false) && LDA_A(i + 1) && EOR_IM_0(i + 2) && STA_A(i + 3)) {
            listing[i + 2] = "";
            return false;
          };
          if ((INY(i) === false) && LDA_IM_0(i + 1) && EOR(i + 2) && STA_A(i + 3)) {
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "";
            return false;
          };
          if (LDA_IM(i) && (pas.System.Pos("eor #",listing[i + 1]) > 0) && STA_A(i + 2)) {
            p = GetBYTE(i) ^ GetBYTE(i + 1);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p,2);
            listing[i + 1] = "";
            return false;
          };
          if ((listing[i] === "\tlda #$FF") && SUB(i + 1) && (SUB_IM(i + 1) === false) && LDY(i + 2) && STA_A(i + 3)) {
            listing[i + 1] = "\teor " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if ((listing[i] === "\tlda #$FF") && SUB(i + 1) && (SUB_IM(i + 1) === false) && STA_A(i + 2) && (SBC(i + 4) === false)) {
            listing[i + 1] = "\teor " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          return Result;
        };
        function opt_NOT(i) {
          var Result = false;
          Result = true;
          if (LDY_1(i) && LDA_VAL(i + 1) && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && STY(i + 5) && (TYA(i + 6) === false) && (STY(i + 6) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "\teor #$01";
            listing[i + 5] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          return Result;
        };
        function opt_ADD(i) {
          var Result = false;
          var p = 0;
          var err = 0;
          var tmp = "";
          Result = true;
          if ((pas.System.Pos("\tlda <adr.",listing[i]) > 0) && ADD_IM(i + 1) && STA_A(i + 2) && (pas.System.Pos("\tlda >adr.",listing[i + 3]) > 0) && ADC_IM(i + 4) && STA_A(i + 5)) {
            p = GetWORD(i + 1,i + 4);
            if (p !== 0) listing[i] = listing[i] + "+$" + pas.SysUtils.IntToHex(p,2);
            listing[i + 1] = "";
            if (p !== 0) listing[i + 3] = listing[i + 3] + "+$" + pas.SysUtils.IntToHex(p,2);
            listing[i + 4] = "";
            return false;
          };
          if (LDA_VAL(i) && ADC_SBC(i + 1) && STA_A(i + 2) && (listing[i + 2] === listing[i + 4]) && LDA_VAL(i + 3)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (ADC_SBC(i) && LDA_A(i + 1) && ADD_SUB(i + 2)) {
            listing[i] = "";
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (listing[i + 1] === "\tadd #$01") && STA_A(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tinc " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (listing[i + 1] === "\tadd #$01") && STA_A(i + 2) && (IY(i + 2) === false)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\tiny";
            listing[i + 2] = "\tsty " + pas.System.Copy(listing[i + 2],6,256);
            return false;
          };
          if (LDA(i) && (IY(i) === false) && (listing[i + 1] === "\tadd #$01") && TAY(i + 2) && (IY(i + 3) || IY(i + 4))) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\tiny";
            listing[i + 2] = "";
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && ((listing[i + 1] === "\tadd #$01") || (listing[i + 1] === "\tsub #$01")) && STA_VAL(i + 2) && (IY(i + 2) === false) && LDA_A(i + 3) && (ADD_SUB(i + 4) || STA_A(i + 4))) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            if (listing[i + 1] === "\tadd #$01") {
              listing[i + 1] = "\tiny"}
             else listing[i + 1] = "\tdey";
            listing[i + 2] = "\tsty " + pas.System.Copy(listing[i + 2],6,256);
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && ((listing[i + 1] === "\tadd #$01") || (listing[i + 1] === "\tsub #$01")) && STA_VAL(i + 2) && (IY(i + 2) === false) && LDY(i + 3)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            if (listing[i + 1] === "\tadd #$01") {
              listing[i + 1] = "\tiny"}
             else listing[i + 1] = "\tdey";
            listing[i + 2] = "\tsty " + pas.System.Copy(listing[i + 2],6,256);
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LDA_STACK(i + 4) && (SKIP(i + 5) === false)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 2] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && LDA_A(i + 2) && (ADC_SBC(i + 3) === false)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && ADC_IM_0(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LDA_STACK(i + 4) && ADD(i + 5)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 1] = listing[i];
            listing[i] = listing[i + 3];
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tadc " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          if (LDA(i) && ADD(i + 1) && LDY(i + 2) && LDA(i + 3)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && (listing[i + 2] === "\tadd #$01") && TAY(i + 3)) {
            listing[i + 2] = "\ttay";
            listing[i + 3] = "\tiny";
            return false;
          };
          if ((LDY_VAL(i) || TAY(i)) && LDA_VAL(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            if (ADD_STACK(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 1],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            if (ADD_STACK(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3) && ADD_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 3] = "\tadd " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 1] = "";
            listing[i + 4] = "";
            return false;
          };
          if (TYA(i) && (listing[i + 1] === "\tadd #$01") && TAY(i + 2) && SCC(i + 3) && INC_BP_1(i + 4)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "\tiny";
            listing[i + 3] = "\tsne";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && ADD(i + 1) && IY(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5)) {
            tmp = listing[i];
            listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "\tadd " + pas.System.Copy(tmp,6,256);
            return false;
          };
          if (LDA_STACK(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (STA_STACK(i + 2) || TAY(i + 2)) && LDA_STACK(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false) && STA_BP_1(i + 5)) {
            tmp = listing[i];
            listing[i] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "\tadd " + pas.System.Copy(tmp,6,256);
            tmp = listing[i + 3];
            listing[i + 3] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 4] = "\tadc " + pas.System.Copy(tmp,6,256);
            return false;
          };
          if (TAY(i + 8) && LDA_STACK(i) && ADD_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM_0(i + 7) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA_STACK(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA(i) && LDA_STACK(i + 1) && STA(i + 2) && LDA(i + 3) && ADD_SUB(i + 4) && (IY(i + 4) === false) && STA(i + 5) && (IY(i + 5) === false) && (ADC_SBC(i + 7) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Pos(listing[i + 2],listing[i + 5]) > 0)) {
            listing[i] = listing[i + 4];
            listing[i + 3] = listing[i + 1];
            listing[i + 4] = listing[i + 2];
            listing[i + 1] = listing[i + 5];
            listing[i + 2] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA(i + 5) && LDA(i + 6) && (IY(i + 6) === false) && ADD_SUB_STACK(i + 7) && STA(i + 8) && (IY(i + 8) === false) && (ADC_SBC(i + 10) === false)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA(i + 5) && LDA(i + 6) && (IY(i + 6) === false) && ADD_STACK(i + 7) && SUB(i + 8) && (IY(i + 8) === false) && STA(i + 9) && (IY(i + 9) === false) && (SBC(i + 11) === false)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADD_SUB_STACK(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_SBC_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 4] = pas.System.Copy(listing[i + 4],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i + 7] = pas.System.Copy(listing[i + 7],1,5) + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADD_SUB(i + 4) && STA(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 3] = listing[i];
            listing[i + 6] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (ADC_SBC(i + 14) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && ADC_SBC(i + 8) && STA_STACK(i + 9) && LDA_STACK(i + 10) && ADC_SBC(i + 11) && STA_STACK(i + 12) && LDA_STACK(i + 13) && STA_STACK(i + 15)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
            listing[i + 10] = listing[i];
            listing[i + 13] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_SBC(i + 19) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADD_SUB(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADC_SBC(i + 13) && STA_STACK(i + 14) && LDA_STACK(i + 15) && ADC_SBC(i + 16) && STA_STACK(i + 17) && LDA_STACK(i + 18) && STA_STACK(i + 20)) if ((pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 12],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 18],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (listing[i + 2] === listing[i + 11]) && (listing[i + 5] === listing[i + 14]) && (listing[i + 8] === listing[i + 17])) {
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            return false;
          };
          if (ADC_SBC(i + 16) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_SUB(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && STA_A(i + 17) && (ADC_SBC(i + 19) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_SBC(i + 10) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_SUB(i + 13) && STA_A(i + 14) && (ADC_SBC(i + 16) === false)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_SBC(i + 9) && ADD_SUB(i) && STA_VAL(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_VAL(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && STA_STACK(i + 10)) {
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (ADC_SBC(i + 9) && ADD_SUB(i) && STA_VAL(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && STA_STACK(i + 10)) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (ADC_SBC(i + 9) && ADD_SUB(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && STA_STACK(i + 10) && LDA_STACK(i + 11) && STA_STACK(i + 12) && LDA_STACK(i + 13) && STA_STACK(i + 14) && LDA_STACK(i + 15) && STA_STACK(i + 16)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 13],6,256) === pas.System.Copy(listing[i + 16],6,256))) {
            listing[i + 1] = listing[i + 4];
            listing[i + 4] = listing[i + 7];
            listing[i + 7] = listing[i + 10];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            return false;
          };
          if (ADC(i + 11) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && ASL_A(i + 5) && TAY(i + 6) && LDA_STACK(i + 7) && ADD(i + 8) && STA(i + 9) && LDA_STACK(i + 10) && STA(i + 12)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 7] = listing[i];
            listing[i + 10] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && STA_A(i + 7) && STA_A(i + 8) && LDA_A(i + 9)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = listing[i + 4];
            listing[i + 4] = listing[i + 3];
            listing[i + 2] = listing[i + 7];
            listing[i + 3] = listing[i + 8];
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
            listing[i + 2] = listing[i + 11];
            listing[i + 5] = listing[i + 13];
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (ADC(i + 13) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && ADC(i + 10) && STA_A(i + 11) && LDA_STACK(i + 12) && STA_A(i + 14) && (ADC(i + 16) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
            listing[i + 6] = listing[i];
            listing[i + 9] = listing[i + 2];
            listing[i + 12] = listing[i + 4];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (ADC(i + 18) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADD(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && ADC(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && ADC(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 8] = listing[i];
            listing[i + 11] = listing[i + 2];
            listing[i + 14] = listing[i + 4];
            listing[i + 17] = listing[i + 6];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (ADC(i + 12) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADD(i + 9) && STA_STACK(i + 10) && LDA_STACK(i + 11) && STA_STACK(i + 13) && LDA_IM_0(i + 14) && ADC_IM_0(i + 15) && STA_STACK(i + 16) && LDA_IM_0(i + 17) && ADC_IM_0(i + 18) && STA_STACK(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 19],6,256))) {
            listing[i + 8] = listing[i];
            listing[i + 11] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (ADC(i + 12) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADD(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 13) && (ADC(i + 15) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 8] = listing[i];
            listing[i + 11] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC(i + 8) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && ADD(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_A(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i + 4] = listing[i];
            listing[i + 7] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC(i + 6) && LDA_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD(i + 3) && (ADD_STACK(i + 3) === false) && STA_A(i + 4) && LDA_STACK(i + 5) && STA_A(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 5] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (ADD_SUB_VAL(i) && STA_VAL(i + 1) && LDA_A(i + 2) && ADC_SBC_VAL(i + 3) && STA_VAL(i + 4) && LDA_A(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && STA_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 1] = listing[i + 6];
            listing[i + 4] = listing[i + 8];
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (ADC_IM(i + 10) && LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && ADC_IM(i + 7) && STA_A(i + 8) && LDA_IM(i + 9) && STA_A(i + 11)) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 3],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 6],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 9],6,256)) << 24);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 10],6,256)) << 24);
            p = p + err;
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 9] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 1] = "";
            listing[i + 4] = "";
            listing[i + 7] = "";
            listing[i + 10] = "";
            return false;
          };
          if (ADC_IM(i + 4) && LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            p = GetWORD(i,i + 3) + GetWORD(i + 1,i + 4);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 4] = "";
            return false;
          };
          if (LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && (ADC(i + 4) === false)) {
            p = GetBYTE(i) + GetBYTE(i + 1);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            return false;
          };
          if (SUB_IM(i + 1) && ADD_IM(i + 2) && STA_A(i + 3)) {
            p = -GetBYTE(i + 1) + GetBYTE(i + 2);
            listing[i + 1] = "";
            listing[i + 2] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            return false;
          };
          if (ADD_IM(i + 1) && SUB_IM(i + 2) && STA_A(i + 3)) {
            p = GetBYTE(i + 1) - GetBYTE(i + 2);
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = "";
            return false;
          };
          if (ADD_IM(i + 1) && ADD_IM(i + 2) && STA_A(i + 3)) {
            p = GetBYTE(i + 1) + GetBYTE(i + 2);
            listing[i + 1] = "";
            listing[i + 2] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            return false;
          };
          if (SUB_IM(i + 1) && SUB_IM(i + 2) && STA_A(i + 3)) {
            p = GetBYTE(i + 1) + GetBYTE(i + 2);
            listing[i + 1] = "";
            listing[i + 2] = "\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            return false;
          };
          if (LDA_A(i) && (LDA_IM(i) === false) && ADD_SUB_IM(i + 1) && ADD_SUB(i + 2) && (ADD_SUB_IM(i + 2) === false) && ADD_SUB_IM(i + 3)) {
            tmp = listing[i + 2];
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = tmp;
            return false;
          };
          if (LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && ADC_IM(i + 7) && STA_A(i + 8) && (ADC(i + 10) === false)) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 3],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 6],6,256)) << 16);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16);
            p = p + err;
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 4] = "";
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 7] = "";
            return false;
          };
          if (ADC_STACK(i + 14) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 1) === false) && ASL_STACK(i + 5) && ROL_A(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && STA_STACK(i + 9) && LDA_IM(i + 10) && ADD_STACK(i + 11) && STA_A(i + 12) && LDA_IM(i + 13) && STA_A(i + 15)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            p = (GetWORD(i,i + 3) * 4) + GetWORD(i + 10,i + 13);
            listing[i + 10] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 13] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 3] = "";
            listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (ADC_STACK(i + 14) && LDA_VAL(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && STA_STACK(i + 9) && LDA_IM(i + 10) && ADD_STACK(i + 11) && STA_A(i + 12) && LDA_IM(i + 13) && STA_A(i + 15)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            p = (GetWORD(i + 1,i + 4) * 4) + GetWORD(i + 10,i + 13);
            listing[i + 10] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 13] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 1] = "";
            listing[i + 4] = "";
            return false;
          };
          if (ADC_STACK(i + 12) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 1) === false) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_STACK(i + 7) && LDA_IM(i + 8) && ADD_STACK(i + 9) && STA_A(i + 10) && LDA_IM(i + 11) && STA_A(i + 13)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
            p = (GetWORD(i,i + 3) * 2) + GetWORD(i + 8,i + 11);
            listing[i + 8] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 11] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 3] = "";
            listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (ADC_STACK(i + 12) && LDA_VAL(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_STACK(i + 7) && LDA_IM(i + 8) && ADD_STACK(i + 9) && STA_A(i + 10) && LDA_IM(i + 11) && STA_A(i + 13)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
            p = (GetWORD(i + 1,i + 4) * 2) + GetWORD(i + 8,i + 11);
            listing[i + 8] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 11] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 1] = "";
            listing[i + 4] = "";
            return false;
          };
          if (ADC_IM(i + 10) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            p = GetWORD(i,i + 3) + GetWORD(i + 7,i + 10);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = listing[i + 8];
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 5] = listing[i + 11];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_IM(i + 10) && LDA_A(i) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            p = (-1 * GetWORD(i + 1,i + 4)) + GetWORD(i + 7,i + 10);
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 2] = listing[i + 8];
            listing[i + 5] = listing[i + 11];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (SBC_IM(i + 10) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && SUB_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            p = GetWORD(i + 1,i + 4) - GetWORD(i + 7,i + 10);
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 2] = listing[i + 8];
            listing[i + 5] = listing[i + 11];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_IM(i + 22) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && ADC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && ADC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            p = GetBYTE(i + 1) + (GetBYTE(i + 4) << 8) + (GetBYTE(i + 7) << 16) + (GetBYTE(i + 10) << 24);
            err = GetBYTE(i + 13) + (GetBYTE(i + 16) << 8) + (GetBYTE(i + 19) << 16) + (GetBYTE(i + 22) << 24);
            p = p + err;
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 7] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 10] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 2] = listing[i + 14];
            listing[i + 5] = listing[i + 17];
            listing[i + 8] = listing[i + 20];
            listing[i + 11] = listing[i + 23];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (ADC_IM(i + 22) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADC(i + 7) && STA_STACK(i + 8) && LDA_IM(i + 9) && ADC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && ADC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && ADC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            p = GetBYTE(i) + (GetBYTE(i + 3) << 8) + (GetBYTE(i + 6) << 16) + (GetBYTE(i + 9) << 24);
            err = GetBYTE(i + 13) + (GetBYTE(i + 16) << 8) + (GetBYTE(i + 19) << 16) + (GetBYTE(i + 22) << 24);
            p = p + err;
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 9] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 2] = listing[i + 14];
            listing[i + 5] = listing[i + 17];
            listing[i + 8] = listing[i + 20];
            listing[i + 11] = listing[i + 23];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (ADC_IM(i + 22) && LDA_A(i) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && SBC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && SBC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && ADC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && ADC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            p = GetBYTE(i + 1) + (GetBYTE(i + 4) << 8) + (GetBYTE(i + 7) << 16) + (GetBYTE(i + 10) << 24);
            err = GetBYTE(i + 13) + (GetBYTE(i + 16) << 8) + (GetBYTE(i + 19) << 16) + (GetBYTE(i + 22) << 24);
            p = -p + err;
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 7] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 10] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 2] = listing[i + 14];
            listing[i + 5] = listing[i + 17];
            listing[i + 8] = listing[i + 20];
            listing[i + 11] = listing[i + 23];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (ADC_IM(i + 11) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_A(i + 4) && ADC_IM(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && ADD_IM(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i + 1,i + 5) + GetWORD(i + 8,i + 11);
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = listing[i + 9];
            listing[i + 5] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = listing[i + 12];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (ADC_IM(i + 11) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_IM(i + 4) && ADC(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && ADD_IM(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i,i + 4) + GetWORD(i + 8,i + 11);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = listing[i + 9];
            listing[i + 4] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = listing[i + 12];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (SBC_IM(i + 11) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_A(i + 4) && ADC_IM(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && SUB_IM(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i + 1,i + 5) - GetWORD(i + 8,i + 11);
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = listing[i + 9];
            listing[i + 5] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = listing[i + 12];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (SBC_IM(i + 11) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_IM(i + 4) && ADC(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && SUB_IM(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i,i + 4) - GetWORD(i + 8,i + 11);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = listing[i + 9];
            listing[i + 4] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = listing[i + 12];
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (ADC_IM(i + 10) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            p = GetWORD(i + 1,i + 4) + GetWORD(i + 7,i + 10);
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 2] = listing[i + 8];
            listing[i + 4] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 5] = listing[i + 11];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_IM_0(i + 10) && LDA(i) && (LDA_STACK(i) === false) && (listing[i + 1] === "\tadd #$01") && STA(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_IM_0(i + 7) && STA(i + 8) && LDA(i + 9) && STA(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i] = "\tinc " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\tbne @+";
            listing[i + 2] = "\tinc " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 3] = "\tbne @+";
            listing[i + 4] = "\tinc " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 5] = "\tbne @+";
            listing[i + 6] = "\tinc " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 7] = "@";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA_VAL(i) && (LDA_IM_0(i) === false) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && STA_A(i + 2) && LDA_A(i + 3) && STA_A(i + 5) && (ADC(i + 7) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Pos(listing[i],listing[i + 3]) > 0)) {
            if (listing[i + 1] === "\tadd #$01") {
              listing[i] = "\tinc " + pas.System.Copy(listing[i],6,256);
              listing[i + 1] = "\tsne";
              listing[i + 2] = "\tinc " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
            } else {
              listing[i + 3] = "\tscc";
              listing[i + 4] = "\tinc " + pas.System.Copy(listing[i + 5],6,256);
              listing[i + 5] = "";
            };
            return false;
          };
          if (ADC_SBC(i + 7) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && LDY(i + 4) && STA(i + 5) && LDA_STACK(i + 6) && STA(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 6] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (ADC_IM_0(i + 7) && LDA(i) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA(i + 3) && ADD(i + 4) && (STA(i + 5) || TAY(i + 5)) && LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = listing[i];
            listing[i + 7] = "\tadc " + pas.System.Copy(listing[i + 1],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (ADC_SBC_VAL(i + 6) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4) && LDA_STACK(i + 5) && STA_STACK(i + 7) && LDA_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 8] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA(i) && LDA(i + 1) && ADD_IM_0(i + 2) && STA(i + 3) && LDA(i + 4) && ADC(i + 5) && STA(i + 6)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 2] = "";
            listing[i + 5] = "\tadd " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          if (LDA(i) && (LDA_STACK(i) === false) && ADD_IM_0(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && (ADC_IM_0(i + 4) === false) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_SUB_STACK(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            if (ADD_STACK(i + 7)) {
              listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 7] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && (LDA_IM(i + 1) === false) && (listing[i + 2] === "\tadd #$01") && ADD_STACK(i + 3) && TAY(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "\ttay";
            listing[i + 3] = "\tiny";
            listing[i + 4] = "";
            return false;
          };
          if (STA(i) && LDA_STACK(i + 1) && STA(i + 2) && LDA(i + 3) && (IY(i + 3) === false) && ADD(i + 4) && STA(i + 5) && (IY(i + 5) === false) && (ADC(i + 7) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Pos(listing[i + 2],listing[i + 5]) > 0)) {
            listing[i] = "\tadd " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 3] = listing[i + 1];
            listing[i + 4] = listing[i + 2];
            listing[i + 1] = listing[i + 5];
            listing[i + 2] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ASL_A(i + 5) && ADD_SUB_STACK(i + 6) && STA(i + 7) && LDA_STACK(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            if (ADD_STACK(i + 6)) {
              listing[i + 6] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 6] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_STACK(i + 18) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && ADD_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && ADC_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && ADC_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 9] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 12] = "\tadc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 15] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 18] = "\tadc " + pas.System.Copy(listing[i + 6],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (ADC_IM_0(i + 9) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && (LDA_STACK(i + 4) === false) && ADD_SUB_VAL(i + 5) && ADD_STACK(i + 6) && TAY(i + 7) && LDA_STACK(i + 8) && STA_STACK(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 6] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_IM_0(i + 7) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && ADD_SUB_VAL(i + 3) && ADD_STACK(i + 4) && TAY(i + 5) && LDA_STACK(i + 6) && STA_STACK(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (ADC_STACK(i + 17) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && ADD_STACK(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && ADC_STACK(i + 11) && STA_A(i + 12) && LDA_A(i + 13) && ADC_STACK(i + 14) && STA_A(i + 15) && LDA_A(i + 16) && STA_A(i + 18)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 8] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 11] = "\tadc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 14] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 17] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ADD_STACK(i + 3) && STA_A(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 3] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADD_STACK(i + 3) && STA_A(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 3] = "\tadd " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && (LDA_STACK(i + 1) === false) && ADD(i + 2) && (ADD_STACK(i + 2) === false) && ADD_STACK(i + 3) && STA_A(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 1] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i] = "";
            listing[i + 3] = "";
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_IM(i + 2) === false) && ADD_SUB_IM(i + 3) && ADD_STACK(i + 4) && TAY(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 2] = "\tadd " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 1] = "";
            listing[i + 4] = "";
            if ((listing[i + 3] === "\tadd #$01") || (listing[i + 3] === "\tsub #$01")) {
              if (listing[i + 3] === "\tadd #$01") {
                listing[i + 5] = "\tiny"}
               else listing[i + 5] = "\tdey";
              listing[i + 3] = "";
              listing[i + 4] = "\ttay";
            };
            return false;
          };
          if (ADD_STACK(i + 5) && LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 6) && (ADC(i + 8) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            if (LDA_IM_0(i)) {
              listing[i + 5] = ""}
             else listing[i + 5] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_STACK(i + 11) && STA_STACK(i) && LDA(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && STA_STACK(i + 4) && LDA(i + 5) && STA_STACK(i + 6) && LDA(i + 7) && (LDA_STACK(i + 7) === false) && ADD_STACK(i + 8) && STA(i + 9) && LDA(i + 10) && (LDA_STACK(i + 10) === false) && STA_STACK(i + 12) && LDY_STACK(i + 13)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 12],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 11] = "\tadc " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (ADC_IM_0(i + 10) && LDA_IM_0(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA(i + 8) && LDA_STACK(i + 9) && STA(i + 11) && (ADC(i + 13) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 6] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 9] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 10] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (ADC_STACK(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ADD_STACK(i + 5) && STA_A(i + 6) && LDA(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 5] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = "\tadc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_SBC_STACK(i + 19) && (LDY_VAL(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADD_SUB_STACK(i + 10) && STA_A(i + 11) && LDA_A(i + 12) && ADC_SBC_STACK(i + 13) && STA_A(i + 14) && LDA_A(i + 15) && ADC_SBC_STACK(i + 16) && STA_A(i + 17) && LDA_A(i + 18) && STA_A(i + 20)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 19],6,256))) {
            if (ADD_STACK(i + 10)) {
              listing[i + 10] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 13] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 16] = "\tadc " + pas.System.Copy(listing[i + 5],6,256);
              listing[i + 19] = "\tadc " + pas.System.Copy(listing[i + 7],6,256);
            } else {
              listing[i + 10] = "\tsub " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 13] = "\tsbc " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 16] = "\tsbc " + pas.System.Copy(listing[i + 5],6,256);
              listing[i + 19] = "\tsbc " + pas.System.Copy(listing[i + 7],6,256);
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (ADC_SBC_STACK(i + 9) && (LDY_VAL(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADD_SUB_STACK(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_A(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            if (ADD_STACK(i + 6)) {
              listing[i + 6] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 9] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
            } else {
              listing[i + 6] = "\tsub " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 9] = "\tsbc " + pas.System.Copy(listing[i + 3],6,256);
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (ADC_SBC_STACK(i + 15) && (LDY_VAL(i) || TAY(i)) && LDA_A(i + 1) && ADD_SUB(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_ADR(i + 9) && STA_STACK(i + 10) && LDA_STACK(i + 11) && ADD_SUB_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 16)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            if (ADD_STACK(i + 12)) {
              listing[i + 12] = "\tadd " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 15] = "\tadc " + pas.System.Copy(listing[i + 9],6,256);
            } else {
              listing[i + 12] = "\tsub " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 15] = "\tsbc " + pas.System.Copy(listing[i + 9],6,256);
            };
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (STY_BP_1(i + 13) && LDA_STACK(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDY(i + 12) && LDY(i + 14) && LDA_STACK(i + 15) && STA_BP_Y(i + 16)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (ADC_IM_0(i + 16) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_A(i + 15) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19) && LDA_STACK(i + 20) && STA_A(i + 21) && LDA_STACK(i + 22) && STA_A(i + 23) && LDA_STACK(i + 24) && STA_A(i + 25)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 24],6,256))) {
            listing_tmp[0] = listing[i + 12];
            listing_tmp[1] = listing[i + 13];
            listing_tmp[2] = listing[i + 14];
            listing_tmp[3] = listing[i + 15];
            listing_tmp[4] = listing[i + 16];
            listing_tmp[5] = listing[i + 17];
            listing_tmp[6] = listing[i];
            listing_tmp[7] = listing[i + 1];
            listing_tmp[8] = listing[i + 19];
            listing_tmp[9] = listing[i + 3];
            listing_tmp[10] = listing[i + 4];
            listing_tmp[11] = listing[i + 21];
            listing_tmp[12] = listing[i + 6];
            listing_tmp[13] = listing[i + 7];
            listing_tmp[14] = listing[i + 23];
            listing_tmp[15] = listing[i + 9];
            listing_tmp[16] = listing[i + 10];
            listing_tmp[17] = listing[i + 25];
            for (p = 0; p <= 17; p++) listing[i + p] = listing_tmp[p];
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            return false;
          };
          if (STY_BP_1(i + 13) && LDA_STACK(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDY_STACK(i + 12) && LDY_STACK(i + 14) && LDA(i + 15) && STA_BP_Y(i + 16)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if ((LAB_A(i) === false) && LDA_A(i + 1) && ADD_EAX(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && ADC_EAX_1(i + 5) && STA_A(i + 6) && (ADC(i + 8) === false)) {
            listing[i + 2] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 5] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 1] = "\tlda :eax";
            listing[i + 4] = "\tlda :eax+1";
            return false;
          };
          if (LDA_STACK(i) && STA_EAX_1(i + 1) && LDA_EAX(i + 2) && ADD_SUB_VAL(i + 3) && STA_STACK(i + 4) && LDA_EAX_1(i + 5) && ADC_SBC_VAL(i + 6) && STA_STACK(i + 7)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 5] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_STACK(i) && STA_EAX_1(i + 1) && LDA_A(i + 2) && ADD_SUB_VAL(i + 3) && STA_VAL(i + 4) && LDA_A(i + 5) && (ADC_EAX_1(i + 6) || SBC_EAX_1(i + 6)) && STA_VAL(i + 7)) if ((pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 5],6,256))) {
            if (ADC(i + 6)) {
              listing[i + 6] = "\tadc " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 6] = "\tsbc " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && (LDA_STACK(i) === false) && STA_EAX(i + 1) && LDA_VAL(i + 2) && STA_EAX_1(i + 3) && LDA_VAL(i + 4) && (ADD_EAX(i + 5) || SUB_EAX(i + 5)) && STA_STACK(i + 6)) {
            if (ADD_EAX(i + 5)) {
              listing[i + 5] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 5] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (ADD_IM_0(i + 1) && LDA_VAL(i) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC(i + 4) && (ADC_IM_0(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_STACK(i + 7) && (TAY(i + 8) || STA_A(i + 8)) && LDA_A(i + 9) && ADC_STACK(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADD(i + 5)) {
            listing[i + 4] = "\tadc " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 5] = "";
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADD(i + 5)) {
            listing[i + 4] = "\tadc " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 5] = "";
            return false;
          };
          if (ADC_IM_0(i + 10) && LDA_IM_0(i) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM_0(i + 3) === false) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && STA_STACK(i + 11) && (ADC(i + 13) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i] = "\tlda " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDA_IM_0(i) && STA_STACK(i + 1) && ADD_STACK(i + 2) && STA(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "\tadd #$00";
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA_IM_0(i) && ADD(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 4] = "";
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA_IM_0(i) && ADD(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && STA_A(i + 5) && LDA_A(i + 6) && ADC_IM_0(i + 7) && STA_A(i + 8) && (ADC(i + 10) === false)) {
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 4] = "";
            listing[i + 7] = "";
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (IY(i + 1) === false) && STA(i + 2) && (IY(i + 2) === false) && (ADC(i + 4) === false)) if (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && STA(i + 2) && INY(i + 3) && LDA(i + 4) && ADC(i + 5)) {
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 5] = "\tadd " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM(i + 1) === false) && TAY(i + 2) && LDA_A(i + 3) && ADC(i + 4) && (ADC_IM(i + 4) === false) && STA_A(i + 5) && (STA_BP_1(i + 5) === false)) {
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM(i + 1) === false) && STA(i + 2) && (STA_BP2(i + 2) === false) && LDA(i + 3) && ADC(i + 4)) {
            listing[i] = "";
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if ((LDA_IM(i) === false) && ADD_IM_0(i + 1) && STA(i + 2) && LDA(i + 3) && ADC(i + 4)) {
            listing[i + 1] = "";
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (ADC_IM_0(i) && ADD(i + 1) && (ADD_IM(i + 1) === false) && STA_A(i + 2) && (ADC(i + 4) === false)) {
            listing[i] = "";
            listing[i + 1] = "\tadc " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if (ADC_IM_0(i) && LDY(i + 1) && ADD(i + 2) && (ADD_IM(i + 2) === false) && STA_A(i + 3) && (ADC(i + 5) === false)) {
            listing[i] = "";
            listing[i + 2] = "\tadc " + pas.System.Copy(listing[i + 2],6,256);
            return false;
          };
          if (ADD(i) && ADD_IM_0(i + 1)) {
            listing[i + 1] = "";
            return false;
          };
          if (ADD(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADD_IM_0(i + 3)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA(i) && (IY(i) === false) && ADD_IM_0(i + 1) && STA(i + 2) && (IY(i + 2) === false) && (INY(i + 3) === false) && (ADC(i + 4) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && (ADD(i + 4) || STA_A(i + 4))) {
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && ADD_IM_0(i + 1) && STA(i + 2) && INY(i + 3) && LDA(i + 4) && ADC(i + 5)) {
            listing[i + 1] = "";
            listing[i + 5] = "\tadd " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_IM_0(i + 3) && ADC(i + 4) && STA_A(i + 5) && LDA_IM_0(i + 6) && ADC(i + 7) && STA_A(i + 8) && LDA_IM_0(i + 9) && ADC(i + 10) && STA_A(i + 11)) {
            listing[i + 1] = "";
            listing[i + 3] = "";
            listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 6] = "";
            listing[i + 7] = "\tlda " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 9] = "";
            listing[i + 10] = "\tlda " + pas.System.Copy(listing[i + 10],6,256);
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && ADC_IM_0(i + 7) && STA_A(i + 8) && LDA_A(i + 9) && ADC_IM_0(i + 10) && STA_A(i + 11)) {
            listing[i + 1] = "";
            listing[i + 4] = "";
            listing[i + 7] = "";
            listing[i + 10] = "";
            return false;
          };
          if (LDA_VAL(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_VAL(i + 3) && ADC_IM_0(i + 4) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            listing[i + 1] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDA_VAL(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_IM_0(i + 3) && ADC(i + 4) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            listing[i + 1] = "";
            listing[i + 3] = "";
            listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            listing[i + 1] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDA_IM_0(i) && ADC_IM_0(i + 1) && LDA_A(i + 2) && AND_ORA_EOR(i + 3)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && (LDA_STACK(i + 1) === false) && ADD_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && ADD_STACK(i + 1) && STA(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i] = "\tadd " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 1] = "";
            return false;
          };
          return Result;
        };
        function opt_SUB(i) {
          var Result = false;
          var p = 0;
          var err = 0;
          Result = true;
          if ((pas.System.Pos("\tlda <adr.",listing[i]) > 0) && SUB_IM(i + 1) && STA_A(i + 2) && (pas.System.Pos("\tlda >adr.",listing[i + 3]) > 0) && SBC_IM(i + 4) && STA_A(i + 5)) {
            p = GetWORD(i + 1,i + 4);
            if (p !== 0) listing[i] = listing[i] + "-$" + pas.SysUtils.IntToHex(p,2);
            listing[i + 1] = "";
            if (p !== 0) listing[i + 3] = listing[i + 3] + "-$" + pas.SysUtils.IntToHex(p,2);
            listing[i + 4] = "";
            return false;
          };
          if (LDA(i) && LDA(i + 1) && ADD_SUB(i + 2)) {
            listing[i] = "";
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (listing[i + 1] === "\tsub #$01") && STA_A(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tdec " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (listing[i + 1] === "\tsub #$01") && STA_A(i + 2) && (IY(i + 2) === false)) if (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256)) {
            if (LDA_IM(i)) {
              p = GetBYTE(i);
              listing[i] = "\tlda #$" + pas.SysUtils.IntToHex((p - 1) & 0xff,2);
              listing[i + 1] = "";
            } else {
              listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
              listing[i + 1] = "\tdey";
              listing[i + 2] = "\tsty " + pas.System.Copy(listing[i + 2],6,256);
            };
            return false;
          };
          if (TYA(i) && (listing[i + 1] === "\tsub #$01") && TAY(i + 2) && SCS(i + 3) && DEC_(i + 4)) {
            listing[i + 1] = "\tsne";
            listing[i + 2] = listing[i + 4];
            listing[i + 3] = "\tdey";
            listing[i + 4] = "";
            return false;
          };
          if (STA(i) && LDA(i + 1) && ((listing[i + 2] === "\tadd #$01") || (listing[i + 2] === "\tsub #$01")) && ADD(i + 3) && TAY(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            if (ADD(i + 2)) {
              listing[i + 3] = "\tiny"}
             else listing[i + 3] = "\tdey";
            listing[i + 2] = "\ttay";
            listing[i + 4] = "";
            return false;
          };
          if (LDA(i) && SUB_IM_0(i + 1) && STA(i + 2) && LDA(i + 3) && SBC(i + 4)) {
            listing[i + 1] = "";
            listing[i + 4] = "\tsub " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (LDA(i) && SUB_IM_0(i + 1) && STA(i + 2) && (SBC(i + 4) === false)) {
            listing[i + 1] = "";
            return false;
          };
          if (SUB(i) && SUB_IM_0(i + 1)) {
            listing[i + 1] = "";
            return false;
          };
          if (LDA_A(i) && SUB_STACK(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_STACK(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing_tmp[0] = listing[i + 6];
            listing_tmp[1] = listing[i + 7];
            listing_tmp[2] = listing[i];
            listing_tmp[3] = listing[i + 1];
            listing_tmp[4] = listing[i + 9];
            listing_tmp[5] = listing[i + 10];
            listing_tmp[6] = listing[i + 3];
            listing_tmp[7] = listing[i + 4];
            listing_tmp[8] = listing[i + 12];
            listing[i] = listing_tmp[0];
            listing[i + 1] = listing_tmp[1];
            listing[i + 2] = listing_tmp[2];
            listing[i + 3] = listing_tmp[3];
            listing[i + 4] = listing_tmp[4];
            listing[i + 5] = listing_tmp[5];
            listing[i + 6] = listing_tmp[6];
            listing[i + 7] = listing_tmp[7];
            listing[i + 8] = listing_tmp[8];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (SBC_STACK(i + 9) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA(i + 5) && SUB_STACK(i + 6) && STA(i + 7) && LDA(i + 8) && STA(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = listing[i + 5];
            listing[i + 5] = "\tsub (:bp2),y";
            listing[i + 6] = "\tiny";
            listing[i + 9] = "\tsbc (:bp2),y";
            return false;
          };
          if (SBC(i + 9) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && SUB(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && STA_A(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 1] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 8] = listing[i];
            return false;
          };
          if (SBC_STACK(i + 18) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && SUB_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && SBC_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && SBC_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 9] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 12] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 15] = "\tsbc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 18] = "\tsbc " + pas.System.Copy(listing[i + 6],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (SBC(i + 10) && LDA_A(i) && SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 2] = listing[i + 13];
            listing[i + 5] = listing[i + 15];
            listing[i + 8] = listing[i + 17];
            listing[i + 11] = listing[i + 19];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            return false;
          };
          if (SBC(i + 12) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && SUB(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 13) && (SBC(i + 15) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 8] = listing[i];
            listing[i + 11] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_SBC(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 4] = listing[i];
            listing[i + 7] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (SBC_STACK(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && SUB_STACK(i + 5) && STA_A(i + 6) && LDA(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 5] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 8] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_SBC(i + 6) && LDA(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB(i + 3) && STA(i + 4) && LDA_STACK(i + 5) && STA(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) !== pas.System.Copy(listing[i],6,256))) {
            listing[i + 5] = "\tlda " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA(i + 6)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) !== pas.System.Copy(listing[i],6,256))) {
            listing[i + 4] = "\tlda " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA(i + 3) && LDA_VAL(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 6],6,256) !== pas.System.Copy(listing[i],6,256))) {
            listing[i + 7] = "\tlda " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STY_STACK(i) && SUB(i + 1) && STA_VAL(i + 2) && LDA_STACK(i + 3) && SBC(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 3] = "\ttya";
            return false;
          };
          if (SBC_IM_0(i + 10) && LDA_VAL(i) && (listing[i + 1] === "\tsub #$01") && STA_A(i + 2) && LDA_A(i + 3) && SBC_IM_0(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && SBC_IM_0(i + 7) && STA_A(i + 8) && LDA_A(i + 9) && STA_A(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 1] = "\tbne @+1";
            listing[i + 2] = listing[i + 3];
            listing[i + 3] = "\tbne @+";
            listing[i + 4] = listing[i + 6];
            listing[i + 5] = "\tsne";
            listing[i + 6] = "\tdec " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 7] = "\tdec " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 8] = "@";
            listing[i + 9] = "\tdec " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 10] = "@";
            listing[i + 11] = "\tdec " + pas.System.Copy(listing[i],6,256);
            return false;
          };
          if ((l === 6) && LDA_VAL(i) && SUB_IM(i + 1) && (SUB_IM_0(i + 1) === false) && STA_A(i + 2) && LDA_A(i + 3) && SBC_IM_0(i + 4) && STA_A(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            if (listing[i + 1] === "\tsub #$01") {
              listing[i + 1] = "\tbne @+";
              listing[i + 2] = "\tdec " + pas.System.Copy(listing[i],6,256) + "+1";
              listing[i + 3] = "@";
              listing[i + 4] = "\tdec " + pas.System.Copy(listing[i],6,256);
              listing[i + 5] = "";
            } else {
              listing[i + 3] = "\tscs";
              listing[i + 4] = "\tdec " + pas.System.Copy(listing[i + 5],6,256);
              listing[i + 5] = "";
            };
            return false;
          };
          if (LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && (SBC(i + 7) === false)) {
            p = GetWORD(i,i + 3) - GetWORD(i + 1,i + 4);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 4] = "";
            return false;
          };
          if ((l === 3) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2)) {
            p = GetBYTE(i) - GetBYTE(i + 1);
            listing[i] = "";
            listing[i + 1] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            return false;
          };
          if (LDA_A(i) && (LDA_IM(i) === false) && ADD_IM(i + 1) && SUB_IM(i + 2) && STA_A(i + 3)) {
            p = -(GetBYTE(i + 1) - GetBYTE(i + 2));
            listing[i + 1] = "";
            listing[i + 2] = "\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            return false;
          };
          if (LDA_IM(i) && SUB_IM(i + 1) && STA_BP2_Y(i + 2) && INY(i + 3) && LDA_IM(i + 4) && SBC_IM(i + 5) && STA_BP2_Y(i + 6) && (INY(i + 7) === false)) {
            p = GetWORD(i,i + 4) - GetWORD(i + 1,i + 5);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            listing[i + 4] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 5] = "";
            return false;
          };
          if (SBC_IM(i + 7) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && STA_A(i + 8) && (SBC(i + 10) === false)) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 3],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 6],6,256)) << 16);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16);
            p = p - err;
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 4] = "";
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 7] = "";
            return false;
          };
          if (SBC_IM(i + 10) && LDA_A(i) && (LDA_IM(i) === false) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && SUB_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            p = GetWORD(i + 1,i + 4) + GetWORD(i + 7,i + 10);
            listing[i + 1] = "\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tsbc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 2] = listing[i + 8];
            listing[i + 5] = listing[i + 11];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (SBC_IM(i + 10) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && SBC_IM(i + 7) && STA_A(i + 8) && LDA_IM(i + 9) && STA_A(i + 11)) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 3],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 6],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 9],6,256)) << 24);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 10],6,256)) << 24);
            p = p - err;
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 9] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 1] = "";
            listing[i + 4] = "";
            listing[i + 7] = "";
            listing[i + 10] = "";
            return false;
          };
          if (SBC_IM(i + 7) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && STA_A(i + 8)) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 3],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 6],6,256)) << 16);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16);
            p = p - err;
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 3] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 1] = "";
            listing[i + 4] = "";
            listing[i + 7] = "";
            return false;
          };
          if (SBC_IM(i + 22) && LDA_A(i) && (LDA_IM(i) === false) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && SBC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && SBC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && SUB_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && SBC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && SBC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 10],6,256)) << 24);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 13],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 16],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 19],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 22],6,256)) << 24);
            p = p + err;
            listing[i + 1] = "\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tsbc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 7] = "\tsbc #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 10] = "\tsbc #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 2] = listing[i + 14];
            listing[i + 5] = listing[i + 17];
            listing[i + 8] = listing[i + 20];
            listing[i + 11] = listing[i + 23];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (SBC_IM(i + 22) && LDA_A(i) && (LDA_IM(i) === false) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && SUB_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && SBC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && SBC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            p = pas.Common.GetVAL(pas.System.Copy(listing[i + 1],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 4],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 7],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 10],6,256)) << 24);
            err = pas.Common.GetVAL(pas.System.Copy(listing[i + 13],6,256)) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 16],6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 19],6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(listing[i + 22],6,256)) << 24);
            p = p - err;
            listing[i + 1] = "\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 4] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 7] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 16) & 255,2);
            listing[i + 10] = "\tadc #$" + pas.SysUtils.IntToHex((p >>> 24) & 255,2);
            listing[i + 2] = listing[i + 14];
            listing[i + 5] = listing[i + 17];
            listing[i + 8] = listing[i + 20];
            listing[i + 11] = listing[i + 23];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && SUB(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && SBC_IM_0(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = listing[i];
            listing[i + 7] = "\tsbc " + pas.System.Copy(listing[i + 1],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (TAY(i + 5) && LDA_A(i) && (IY(i) === false) && SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && SUB(i + 4) && LDA_STACK(i + 6) && SBC_IM_0(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = listing[i];
            listing[i + 7] = "\tsbc " + pas.System.Copy(listing[i + 1],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (SBC_IM_0(i + 10) && LDA_A(i) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && SUB(i + 7) && TAY(i + 8) && LDA_STACK(i + 9) && STA_BP_1(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 2] = "\ttay";
            listing[i + 5] = "\tsta :bp+1";
            listing[i + 6] = "\ttya";
            listing[i + 9] = "\tscs";
            listing[i + 10] = "\tdec :bp+1";
            listing[i + 11] = "";
            return false;
          };
          if (LDA_A(i) && SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SUB_STACK(i + 4) && STA_A(i + 5) && SCS(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 2] = "\tclc";
            listing[i + 3] = "\tsbc " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "\teor #$FF";
            listing[i + 6] = "\tscc";
            return false;
          };
          if (LDA_VAL(i) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 5) && SUB(i + 1) && (SUB_IM(i + 1) === false) && SBC_IM_0(i + 4) && (LDA_A(i + 6) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 3] = "\tscs";
            listing[i + 4] = "\tdec " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 5] = "";
            return false;
          };
          return Result;
        };
        function opt_LSR(i) {
          var Result = false;
          var p = 0;
          var tmp = "";
          Result = true;
          if (ROR_STACK(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            if (LSR_STACK(i + 6) && ROR_STACK(i + 7) && LSR_STACK(i + 8) && ROR_STACK(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && LDA_STACK(i + 12)) if (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 12],6,256)) {
              listing[i + 1] = listing[i + 2];
              listing[i + 2] = listing[i + 3];
              listing[i + 3] = listing[i];
              listing[i] = "";
              listing[i + 5] = "\tror @";
              listing[i + 7] = "\tror @";
              listing[i + 9] = "\tror @";
              listing[i + 11] = "\tror @";
              listing[i + 12] = "";
              return false;
            };
            if (LSR_STACK(i + 6) && ROR_STACK(i + 7) && LSR_STACK(i + 8) && ROR_STACK(i + 9) && LDA_STACK(i + 10)) if (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 10],6,256)) {
              listing[i + 1] = listing[i + 2];
              listing[i + 2] = listing[i + 3];
              listing[i + 3] = listing[i];
              listing[i] = "";
              listing[i + 5] = "\tror @";
              listing[i + 7] = "\tror @";
              listing[i + 9] = "\tror @";
              listing[i + 10] = "";
              return false;
            };
            if (LSR_STACK(i + 6) && ROR_STACK(i + 7) && LDA_STACK(i + 8)) if (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
              listing[i + 1] = listing[i + 2];
              listing[i + 2] = listing[i + 3];
              listing[i + 3] = listing[i];
              listing[i] = "";
              listing[i + 5] = "\tror @";
              listing[i + 7] = "\tror @";
              listing[i + 8] = "";
              return false;
            };
            if (LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
              listing[i + 1] = listing[i + 2];
              listing[i + 2] = listing[i + 3];
              listing[i + 3] = listing[i];
              listing[i] = "";
              listing[i + 5] = "\tror @";
              listing[i + 6] = "";
              return false;
            };
          };
          if (ROR_STACK(i + 7) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LSR_STACK(i + 6)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            if (LSR_STACK(i + 8) && ROR_STACK(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && LSR_STACK(i + 12) && ROR_STACK(i + 13) && LDA_STACK(i + 14)) if (pas.System.Copy(listing[i + 13],6,256) === pas.System.Copy(listing[i + 14],6,256)) {
              p = GetBYTE(i);
              listing[i] = "\tldy #$" + pas.SysUtils.IntToHex((p & 255) + 1,2);
              listing[i + 2] = listing[i + 5];
              listing[i + 3] = "\tdey";
              listing[i + 5] = "";
              listing[i + 7] = "\tror @";
              listing[i + 9] = "\tror @";
              listing[i + 11] = "\tror @";
              listing[i + 13] = "\tror @";
              listing[i + 14] = "";
              return false;
            };
            if (LSR_STACK(i + 8) && ROR_STACK(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && LDA_STACK(i + 12)) if (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 12],6,256)) {
              p = GetBYTE(i);
              listing[i] = "\tldy #$" + pas.SysUtils.IntToHex((p & 255) + 1,2);
              listing[i + 2] = listing[i + 5];
              listing[i + 3] = "\tdey";
              listing[i + 5] = "";
              listing[i + 7] = "\tror @";
              listing[i + 9] = "\tror @";
              listing[i + 11] = "\tror @";
              listing[i + 12] = "";
              return false;
            };
            if (LSR_STACK(i + 8) && ROR_STACK(i + 9) && LDA_STACK(i + 10)) if (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 10],6,256)) {
              p = GetBYTE(i);
              listing[i] = "\tldy #$" + pas.SysUtils.IntToHex((p & 255) + 1,2);
              listing[i + 2] = listing[i + 5];
              listing[i + 3] = "\tdey";
              listing[i + 5] = "";
              listing[i + 7] = "\tror @";
              listing[i + 9] = "\tror @";
              listing[i + 10] = "";
              return false;
            };
            if (LDA_STACK(i + 8)) if (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
              p = GetBYTE(i);
              listing[i] = "\tldy #$" + pas.SysUtils.IntToHex((p & 255) + 1,2);
              listing[i + 2] = listing[i + 5];
              listing[i + 3] = "\tdey";
              listing[i + 5] = "";
              listing[i + 7] = "\tror @";
              listing[i + 8] = "";
              return false;
            };
          };
          if (ROR_STACK(i + 10) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && LSR_A(i + 7) && ROR_STACK(i + 8) && ROR_STACK(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 3] = "\tror " + pas.System.Copy(listing[i],6,256);
            listing[i] = "\tlsr " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 1] = "\tror " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 2] = "\tror " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            return false;
          };
          if (ROR_STACK(i + 11) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && STA_STACK(i + 7) && LSR_STACK(i + 8) && ROR_STACK(i + 9) && ROR_STACK(i + 10) && LDA_STACK(i + 12) && STA(i + 13) && LDA_STACK(i + 14) && STA(i + 15) && LDA_STACK(i + 16) && STA(i + 17) && LDA_STACK(i + 18) && STA(i + 19)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 3] = "\tror " + pas.System.Copy(listing[i],6,256);
            listing[i] = "\tlsr " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 1] = "\tror " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 2] = "\tror " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            return false;
          };
          if (ROR_STACK(i + 8) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && (LDA_IM_0(i + 4) === false) && STA_STACK(i + 5) && LSR_STACK(i + 6) && ROR_STACK(i + 7) && (ROR_STACK(i + 9) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            tmp = listing[i + 4];
            listing[i + 4] = listing[i];
            listing[i] = tmp;
            tmp = listing[i + 5];
            listing[i + 5] = listing[i + 1];
            listing[i + 1] = tmp;
            p = i + 6;
            while ((listing[p] === listing[p + 3]) && (listing[p + 1] === listing[p + 4]) && (listing[p + 2] === listing[p + 5])) p += 3;
            if (LDA_STACK(p + 3) && (pas.System.Copy(listing[p + 2],6,256) === pas.System.Copy(listing[p + 3],6,256))) {
              listing[p + 3] = "";
              listing[i + 5] = "";
              p = i + 6;
              while ((listing[p] === listing[p + 3]) && (listing[p + 1] === listing[p + 4]) && (listing[p + 2] === listing[p + 5])) {
                listing[p + 2] = "\tror @";
                p += 3;
              };
              listing[p + 2] = "\tror @";
            };
            return false;
          };
          if (ROR_STACK(i + 4) && STA_STACK(i) && LDA_IM_0(i + 1) && (ADC_IM_0(i + 2) || SBC_IM_0(i + 2)) && LSR_A(i + 3) && LDA_STACK(i + 5) && STA(i + 6)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i] = listing[i + 6];
            listing[i + 4] = "\tror " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (ROR_STACK(i + 8) && STA_STACK(i) && LDA_IM_0(i + 1) && (ADC_IM_0(i + 2) || SBC_IM_0(i + 2)) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && (ADC_IM_0(i + 5) || SBC_IM_0(i + 5)) && LSR_A(i + 6) && ROR_STACK(i + 7) && LDA_STACK(i + 9) && STA(i + 10) && LDA_STACK(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "\tlsr @";
            listing[i + 7] = listing[i + 8];
            listing[i + 8] = listing[i + 3];
            return false;
          };
          if (LDA_A(i) && LSR_STACK(i + 1) && ROR_STACK(i + 2) && LDA_A(i + 3)) {
            listing[i] = "";
            return false;
          };
          if (LDA_A(i) && LSR_STACK(i + 1) && ROR_STACK(i + 2) && LSR_STACK(i + 3)) {
            listing[i] = "";
            return false;
          };
          if (LDA(i) && ADC_SBC(i + 1) && LSR_STACK(i + 2) && ROR_STACK(i + 3) && ROR_STACK(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && LSR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 4)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i] = "";
            listing[i + 3] = "\tror @";
            listing[i + 4] = "";
            return false;
          };
          if (LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && STA_im_0(i + 4)) {
            p = 0;
            while ((listing[i] === listing[i - (p * 4)]) && (listing[i + 1] === listing[(i + 1) - (p * 4)]) && (listing[i + 2] === listing[(i + 2) - (p * 4)]) && (listing[i + 3] === listing[(i + 3) - (p * 4)])) p += 1;
            if (LDA_A((i + 3) - (p * 4)) || TYA((i + 3) - (p * 4))) {
              if (IY((i + 3) - (p * 4)) && (LDY((i + 2) - (p * 4)) || INY((i + 2) - (p * 4)))) listing[(i + 2) - (p * 4)] = "";
              listing[(i + 3) - (p * 4)] = "";
            };
            p -= 1;
            while (p >= 0) {
              listing[i - (p * 4)] = "";
              listing[(i + 1) - (p * 4)] = "\tlsr " + pas.System.Copy(listing[(i + 1) - (p * 4)],6,256);
              p -= 1;
            };
            listing[i + 4] = "";
            return false;
          };
          if (LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && STA_im_0(i + 3)) {
            p = 0;
            while ((listing[i] === listing[i - (p * 3)]) && (listing[i + 1] === listing[(i + 1) - (p * 3)]) && (listing[i + 2] === listing[(i + 2) - (p * 3)])) p += 1;
            if (LDA_A((i + 2) - (p * 3)) || TYA((i + 2) - (p * 3))) {
              if (IY((i + 2) - (p * 3)) && (LDY((i + 1) - (p * 3)) || INY((i + 1) - (p * 3)))) listing[(i + 1) - (p * 3)] = "";
              listing[(i + 2) - (p * 3)] = "";
            };
            p -= 1;
            while (p >= 0) {
              listing[i - (p * 3)] = "";
              listing[(i + 1) - (p * 3)] = "\tlsr " + pas.System.Copy(listing[(i + 1) - (p * 3)],6,256);
              p -= 1;
            };
            listing[i + 3] = "";
            return false;
          };
          if (LSR_A(i) && ROR_STACK(i + 1) && STA_im_0(i + 2)) {
            p = 0;
            while ((listing[i] === listing[i - (p * 2)]) && (listing[i + 1] === listing[(i + 1) - (p * 2)])) p += 1;
            if (LDA_A((i + 1) - (p * 2)) || TYA((i + 1) - (p * 2))) {
              if (IY((i + 1) - (p * 2)) && (LDY(i - (p * 2)) || INY(i - (p * 2)))) listing[i - (p * 2)] = "";
              listing[(i + 1) - (p * 2)] = "";
            };
            p -= 1;
            while (p >= 0) {
              listing[i - (p * 2)] = "";
              listing[(i + 1) - (p * 2)] = "\tlsr " + pas.System.Copy(listing[(i + 1) - (p * 2)],6,256);
              p -= 1;
            };
            listing[i + 2] = "";
            return false;
          };
          if (ROR_STACK(i + 4) && STA_STACK(i) && STY_STACK(i + 1) && LSR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 5) && STA(i + 6) && (LDA_A(i + 7) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tlsr " + pas.System.Copy(listing[i + 3],6,256);
            return false;
          };
          if (ROR_STACK(i + 6) && STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LSR_STACK(i + 3) && ROR_STACK(i + 4) && ROR_STACK(i + 5) && LDA_STACK(i + 7) && STA(i + 8) && (LDA_A(i + 9) === false)) if ((pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tlsr " + pas.System.Copy(listing[i + 5],6,256);
            return false;
          };
          if (ROR_STACK(i + 5) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4) && LDA_STACK(i + 6) && STA(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 1] = listing[i + 3];
            listing[i + 3] = listing[i];
            listing[i] = listing[i + 2];
            listing[i + 2] = "";
            listing[i + 5] = "\tror @";
            listing[i + 6] = "";
            return false;
          };
          if (ROR_A(i + 4) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && LSR_STACK(i + 3) && STA(i + 5) && LDA_STACK(i + 6) && STA(i + 7)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i] = "\tlsr " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\tror " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (ROR_STACK(i + 11) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LSR_STACK(i + 9) && ROR_STACK(i + 10) && LDA_STACK(i + 12) && STA(i + 13) && (LDA_STACK(i + 14) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "\tlsr " + pas.System.Copy(listing[i + 10],6,256);
            return false;
          };
          if (ROR_STACK(i + 10) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && LSR_A(i + 8) && ROR_STACK(i + 9) && LDA_STACK(i + 11) && STA_VAL(i + 12) && LDA_STACK(i + 13) && STA_VAL(i + 14)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 13],6,256))) {
            listing[i + 2] = listing[i + 12];
            listing[i + 5] = listing[i + 14];
            listing[i + 9] = "\tror " + pas.System.Copy(listing[i + 14],6,256);
            listing[i + 10] = "\tror " + pas.System.Copy(listing[i + 12],6,256);
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            return false;
          };
          if (ROL_A(i + 12) && STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4) && ROR_STACK(i + 5) && ROR_STACK(i + 6) && ROR_STACK(i + 7) && LDA_STACK(i + 8) && ASL_STACK(i + 9) && ROL_A(i + 10) && ASL_STACK(i + 11) && STA_STACK(i + 13)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDA_IM_0(i) && (pas.System.Pos("sta :STACKORIGIN+STACKWIDTH*2",listing[i + 1]) > 0) && LSR_A(i + 2) && (pas.System.Pos("ror :STACKORIGIN+STACKWIDTH*2",listing[i + 3]) > 0) && ROR_STACK(i + 4) && ROR_STACK(i + 5) && STA(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "\tlsr " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 1] = listing[i + 5];
            listing[i + 2] = "\tlda #$00";
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "\tlda #$00";
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = "";
            return false;
          };
          if (LDA_IM_0(i) && (pas.System.Pos("sta :STACKORIGIN+STACKWIDTH*2",listing[i + 1]) > 0) && (pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH*2",listing[i + 2]) > 0) && ROR_STACK(i + 3) && ROR_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tlsr " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 1] = listing[i + 4];
            listing[i + 3] = "\tlda #$00";
            listing[i + 4] = "\tsta " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "";
            return false;
          };
          if ((pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH*2",listing[i]) > 0) && (pas.System.Pos("ror :STACKORIGIN+STACKWIDTH",listing[i + 1]) > 0) && ROR_A(i + 2) && ORA(i + 3) && STA(i + 4) && (LDA_A(i + 5) === false)) {
            listing[i] = "";
            listing[i + 1] = "\tlsr " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if ((pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH*2",listing[i]) > 0) && (pas.System.Pos("ror :STACKORIGIN+STACKWIDTH",listing[i + 1]) > 0) && ROR_A(i + 2) && (pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH",listing[i + 3]) > 0) && ROR_A(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 1] = "\tlsr " + pas.System.Copy(listing[i + 1],6,256);
            return false;
          };
          if (LDA_VAL(i) && LSR_A(i + 1) && STA_A(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\tlsr " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LSR_A(i + 1) && STA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            return false;
          };
          if (STA_STACK(i) && LSR_A(i + 1) && LSR_A(i + 2) && STA_STACK(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            return false;
          };
          if (DEY(i + 8) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && LDY(i + 3) && BEQ(i + 4) && LAB_L(i + 5) && LSR_STACK(i + 6) && ROR_A(i + 7) && BNE(i + 9) && LAB_L(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 6] = "\tlsr " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (DEY(i + 14) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && ROR_STACK(i + 12) && ROR_A(i + 13) && BNE(i + 15) && LAB_L(i + 16) && STA_VAL(i + 17) && LDA_STACK(i + 18) && STA_VAL(i + 19) && LDA_STACK(i + 20) && STA_VAL(i + 21) && LDA_STACK(i + 22) && STA_VAL(i + 23)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 12],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 23],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 21],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 10] = "\tlsr " + pas.System.Copy(listing[i],6,256);
            listing[i + 11] = "\tror " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 12] = "\tror " + pas.System.Copy(listing[i + 4],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (LDY_STACK(i + 11) && STA_STACK(i) && LDA_STACK(i + 1) && (ADC_IM_0(i + 2) || SBC_IM_0(i + 2)) && STA_STACK(i + 3) && LDA_STACK(i + 4) && (ADC_IM_0(i + 5) || SBC_IM_0(i + 5)) && STA_STACK(i + 6) && LDA_STACK(i + 7) && (ADC_IM_0(i + 8) || SBC_IM_0(i + 8)) && STA_STACK(i + 9) && LDA(i + 10) && BEQ(i + 12) && LAB_L(i + 13)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 11],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          return Result;
        };
        function opt_ASL(i) {
          var Result = false;
          var p = 0;
          var tmp = "";
          var yes = false;
          Result = true;
          if (ASL_A(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_IM_0(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing_tmp[0] = listing[i + 2];
            listing_tmp[1] = listing[i + 3];
            listing_tmp[2] = listing[i];
            listing_tmp[3] = listing[i + 1];
            listing_tmp[4] = listing[i + 4];
            listing_tmp[5] = listing[i + 5];
            listing[i] = listing_tmp[0];
            listing[i + 1] = listing_tmp[1];
            listing[i + 2] = listing_tmp[2];
            listing[i + 3] = listing_tmp[3];
            listing[i + 4] = listing_tmp[4];
            listing[i + 5] = listing_tmp[5];
            return false;
          };
          if (ROL_A(i) && LDA_A(i + 1) && (STA_A(i + 2) || LSR_A(i + 2) || ASL_A(i + 2))) {
            listing[i] = "";
            return false;
          };
          if (ROL_A(i) && LDA_A(i + 1) && (AND_ORA_EOR(i + 2) || ADD_SUB(i + 2)) && (STA_A(i + 3) || MWY_BP2(i + 3) || LDY(i + 3) || TAY(i + 3))) {
            listing[i] = "";
            return false;
          };
          if (ROL_A(i) && MWY_BP2(i + 1) && LDA_A(i + 2) && (AND_ORA_EOR(i + 3) || ADD_SUB(i + 3)) && (STA_A(i + 4) || LDY(i + 4) || TAY(i + 4))) {
            listing[i] = "";
            return false;
          };
          if (ROL_A(i) && LDA_A(i + 1) && (AND_ORA_EOR(i + 2) || ADD_SUB(i + 2)) && (AND_ORA_EOR(i + 3) || ADD_SUB(i + 3)) && (STA_A(i + 4) || MWY_BP2(i + 4) || LDY(i + 4))) {
            listing[i] = "";
            return false;
          };
          if (LDA_VAL(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && ASL_STACK(i + 3)) {
            listing[i] = "";
            return false;
          };
          if (ROL_A(i + 14) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_IM_0(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ASL_STACK(i + 13) && STA_STACK(i + 15)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && ASL_STACK(i + 6) && ROL_A(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            if (STA_STACK(i + 8) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
              listing[i + 5] = "";
              return false;
            };
            if ((listing[i + 8] === listing[i + 6]) && (listing[i + 9] === listing[i + 7]) && STA_STACK(i + 10) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
              listing[i + 5] = "";
              return false;
            };
          };
          if (ASL_STACK(i) && ROL_A(i + 1) && LDA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if (ROL_A(i + 6) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && ASL_STACK(i + 5) && LDY_STACK(i + 7)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tasl @";
            listing[i + 6] = "";
            listing[i + 7] = "\ttay";
            return false;
          };
          if (ROL_A(i + 3) && STA_STACK(i) && LDA_A(i + 1) && ASL_STACK(i + 2) && LDY_STACK(i + 4)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "\tasl @";
            listing[i + 4] = "\ttay";
            return false;
          };
          if (ROL_A(i + 4) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ASL_STACK(i + 3) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (IY(i + 7) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 1] = "\tsta " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 3] = "\tasl " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (LDA_A(i) && STA_STACK(i + 1) && ASL_STACK(i + 2) && (LDA_A(i + 3) || MWA(i + 3))) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = "\tasl @";
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && (ASL_STACK(i + 3) || LSR_STACK(i + 3)) && (ROL(i + 4) === false) && (ROR(i + 4) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && (ASL(i + 3) || LSR(i + 3)) && STA_im_0(i + 4) && (ROR_STACK(i + 5) || ROL_STACK(i + 5))) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 4] = "";
            return false;
          };
          if ((listing[i] === "\tasl #$00") && (listing[i + 1] === "\trol #$00")) {
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if ((ASL_STACK(i) || ASL_A(i)) && (listing[i + 1] === "\trol #$00")) {
            listing[i + 1] = "";
            return false;
          };
          if (ROL_STACK(i) && (listing[i + 1] === "\trol #$00")) {
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ASL_STACK(i + 2) && LDY_STACK(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
            listing[i] = "";
            listing[i + 1] = "\tasl @";
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\ttay";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "\tasl @";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_A(i + 1) && STA_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && LDA_VAL(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
            listing[i + 1] = listing[i];
            listing[i] = "\tasl @";
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && (LDY_STACK(i + 4) || LDA_STACK(i + 4))) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\tasl @";
            if (LDY_STACK(i + 4)) {
              listing[i + 4] = "\ttay"}
             else listing[i + 4] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && LDY_STACK(i + 2)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "";
            listing[i + 1] = "\tasl @";
            listing[i + 2] = "\ttay";
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ASL_STACK(i + 2) && LDY_STACK(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "\tasl @";
            listing[i + 3] = "\ttay";
            return false;
          };
          if (ASL_A(i) && ROL_STACK(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && LDY_STACK(i + 4)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 1] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_A(i + 6) && LDA_A(i + 7) && ADC_SBC(i + 8) && STA_A(i + 9) && (ADC_SBC(i + 11) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            yes = pas.System.Pos(" :STACK",listing[i + 8]) > 0;
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              if (!yes) listing[(k - 4) + 1] = "";
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            if (!yes) listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_A(i + 6) && (ADC_SBC(i + 8) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              listing[(k - 4) + 1] = "";
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA(i + 4) && ASL_A(i + 5) && TAY(i + 6) && LDA_STACK(i + 7) && ADD_SUB(i + 8) && STA_A(i + 9) && LDA(i + 10) && ADC_SBC(i + 11) && STA_A(i + 12) && (ADC_SBC(i + 14) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            yes = pas.System.Pos(" :STACK",listing[i + 10]) > 0;
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              if (!yes) listing[(k - 4) + 1] = "";
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            if (!yes) listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_SBC(i + 16) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && ASL_A(i + 10) && TAY(i + 11) && LDA_STACK(i + 12) && ADD_SUB(i + 13) && STA(i + 14) && LDA_STACK(i + 15) && STA(i + 17) && (ADC_SBC(i + 19) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && (EAX(i + 5) === false) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (EAX(i + 7) === false) && (LDA_STACK(i + 8) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_STACK(i + 3) && STA_VAL(i + 4) && (EAX(i + 4) === false) && LDA_STACK(i + 5) && STA_VAL(i + 6) && (EAX(i + 6) === false) && (LDA_STACK(i + 7) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            k = i;
            while ((listing[i] === listing[k - 3]) && (listing[i + 1] === listing[(k - 3) + 1]) && (listing[i + 2] === listing[(k - 3) + 2])) {
              k -= 3;
            };
            if (STA_STACK(k - 1) && (pas.System.Copy(listing[k - 1],6,256) === pas.System.Copy(listing[i + 2],6,256))) {
              k = i;
              while ((listing[i] === listing[k - 3]) && (listing[i + 1] === listing[(k - 3) + 1]) && (listing[i + 2] === listing[(k - 3) + 2])) {
                listing[(k - 3) + 2] = "\trol @";
                k -= 3;
              };
              listing[i + 2] = "\trol @";
              listing[k - 1] = "";
              listing[i + 5] = listing[i + 3];
              listing[i + 3] = listing[i + 6];
              listing[i + 6] = listing[i + 4];
              listing[i + 4] = "";
              return false;
            };
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && (EAX(i + 3) === false) && LDA_STACK(i + 4) && STA_VAL(i + 5) && (EAX(i + 5) === false) && (LDA_STACK(i + 6) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            k = i;
            while ((listing[i] === listing[k - 2]) && (listing[i + 1] === listing[(k - 2) + 1])) {
              k -= 2;
            };
            if (STA_STACK(k - 1) && (pas.System.Copy(listing[k - 1],6,256) === pas.System.Copy(listing[i],6,256))) {
              k = i;
              while ((listing[i] === listing[k - 2]) && (listing[i + 1] === listing[(k - 2) + 1])) {
                listing[k - 2] = "\tasl @";
                k -= 2;
              };
              listing[i] = "\tasl @";
              listing[k - 1] = "";
              listing[i + 2] = "";
              return false;
            } else if (STA_STACK(k - 1) && (pas.System.Copy(listing[k - 1],6,256) === pas.System.Copy(listing[i + 1],6,256))) {
              k = i;
              while ((listing[i] === listing[k - 2]) && (listing[i + 1] === listing[(k - 2) + 1])) {
                listing[(k - 2) + 1] = "\trol @";
                k -= 2;
              };
              listing[i + 1] = "\trol @";
              listing[k - 1] = "";
              listing[i + 4] = listing[i + 2];
              listing[i + 2] = listing[i + 5];
              listing[i + 5] = listing[i + 3];
              listing[i + 3] = "";
              return false;
            };
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && (EAX(i + 5) === false) && (LDA_STACK(i + 6) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              listing[(k - 4) + 1] = "";
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            if (STA_STACK(k - 1) && ADC_SBC(k - 2) && LDA(k - 3) && STA_STACK(k - 4) && ADC_SBC(k - 5) && LDA(k - 6) && STA_STACK(k - 7) && ADC_SBC(k - 8) && LDA(k - 9)) if ((pas.System.Copy(listing[k - 7],6,256) === pas.System.Copy(listing[i + 1],6,256)) && (pas.System.Copy(listing[k - 4],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[k - 1],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
              listing[k - 1] = "";
              listing[k - 2] = "";
              listing[k - 3] = "";
              listing[k - 4] = "";
              listing[k - 5] = "";
              listing[k - 6] = "";
              listing[k - 7] = "";
              listing[k - 8] = "";
              listing[k - 9] = "";
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_STACK(i + 3) && STA_VAL(i + 4) && (LDA_STACK(i + 5) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
            listing[i] = "";
            listing[i + 2] = "\trol @";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && (EAX(i + 3) === false) && (LDA_STACK(i + 4) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            k = i;
            while ((listing[i] === listing[k - 2]) && (listing[i + 1] === listing[(k - 2) + 1])) {
              listing[(k - 2) + 1] = "";
              k -= 2;
            };
            listing[i + 1] = "";
            return false;
          };
          if (ROL_A(i + 6) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && ASL_STACK(i + 5) && STA_STACK(i + 7) && LDA_VAL(i + 8) && ADD_STACK(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 1] = listing[i + 7];
            listing[i + 9] = "\tadd " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 8] = "\trol " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 7] = "\tasl @";
            listing[i + 6] = listing[i + 8];
            listing[i + 5] = "\tasl @";
            listing[i + 4] = listing[i];
            listing[i + 3] = "";
            listing[i] = listing[i + 2];
            listing[i + 2] = "";
            return false;
          };
          if (ROL_A(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_STACK(i + 7)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 1] = listing[i + 5];
            listing[i + 7] = "\tadd " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 6] = "\trol " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 5] = "\tasl @";
            listing[i + 4] = listing[i];
            listing[i + 3] = "";
            listing[i] = listing[i + 2];
            listing[i + 2] = "";
            return false;
          };
          if (ROL_A(i + 7) && LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && ASL_STACK(i + 6) && STA_STACK(i + 8) && LDA_A(i + 9) && ADD_STACK(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i] = "\tldy #$01";
            listing[i + 2] = listing[i + 5];
            listing[i + 3] = "\tdey";
            listing[i + 5] = "\tasl @";
            listing[i + 6] = "\trol " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "\tadd " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 10] = "";
            return false;
          };
          if (LDY_STACK(i + 9) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_STACK(i + 7) && MWY_BP2(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 2] = listing[i + 1];
            listing[i + 1] = listing[i];
            listing[i] = listing[i + 8];
            listing[i + 4] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (LDY_STACK(i + 4) && ASL_STACK(i) && ROL_A(i + 1) && STA_STACK(i + 2) && MWY_BP2(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i + 1] = "\tlda " + pas.System.Copy(listing[i],6,256);
            listing[i + 2] = "";
            listing[i + 4] = "\ttay";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && STA_BP2_Y(i + 7) && INY(i + 8) && LDA_STACK(i + 9) && STA_BP2_Y(i + 10) && (INY(i + 11) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_A(i + 6) && (LDA_A(i + 7) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              listing[(k - 4) + 1] = "";
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_A(i + 6) && (LDA_A(i + 7) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            k = i;
            while ((listing[i] === listing[k - 4]) && (listing[i + 1] === listing[(k - 4) + 1]) && (listing[i + 2] === listing[(k - 4) + 2]) && (listing[i + 3] === listing[(k - 4) + 3])) {
              listing[(k - 4) + 1] = "";
              listing[(k - 4) + 2] = "";
              listing[(k - 4) + 3] = "";
              k -= 4;
            };
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ASL_STACK(i + 10) && STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && LDA(i + 7) && ADC_SBC(i + 8) && STA_STACK(i + 9) && (ROL_STACK(i + 11) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 10],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          if (ROL_STACK(i + 5) && ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && ASL_STACK(i + 4) && LDA_STACK(i + 6)) if ((listing[i] === listing[i + 4]) && (listing[i + 1] === listing[i + 5]) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ROL_STACK(i + 7) && ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && ASL_STACK(i + 4) && ROL_STACK(i + 5) && ASL_STACK(i + 6) && LDA_STACK(i + 8)) if ((listing[i] === listing[i + 4]) && (listing[i + 1] === listing[i + 5]) && (listing[i + 4] === listing[i + 6]) && (listing[i + 5] === listing[i + 7]) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_VAL(i + 3) && ADD_STACK(i + 4) && STA_VAL(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i] = "";
            listing[i + 2] = "\trol @";
            listing[i + 3] = "\tadd " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "";
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_VAL(i + 3) && (ADD_STACK(i + 4) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            tmp = listing[i];
            listing[i] = listing[i + 1];
            listing[i + 1] = "\trol @";
            listing[i + 2] = tmp;
            return false;
          };
          if (ROL_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && LDA_A(i + 6)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256))) {
            listing[i + 1] = listing[i + 5];
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((ADD_SUB(i) || LDA_A(i) || ROL_A(i) || AND_ORA_EOR(i)) && STA_STACK(i + 1) && ASL_STACK(i + 2) && (ROL_STACK(i + 3) === false)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            p = 0;
            while (listing[i + 2] === listing[i + 2 + p]) p += 1;
            p -= 1;
            listing[i + 2 + p] = "\tsta " + pas.System.Copy(listing[i + 2],6,256);
            while (p >= 0) {
              p -= 1;
              listing[i + 2 + p] = "\tasl @";
            };
            return false;
          };
          if (ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_STACK(i + 2) && AND_ORA_EOR_VAL(i + 3) && STA(i + 4) && (LDA(i + 5) === false)) if (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 2],6,256)) {
            p = i;
            while (ASL_A(p) && ROL_STACK(p + 1)) {
              listing[p + 1] = "";
              p -= 2;
            };
            return false;
          };
          if (ROL_STACK(i + 11) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && ASL_STACK(i + 8) && ROL_STACK(i + 9) && ROL_STACK(i + 10) && LDA_STACK(i + 12) && STA_VAL(i + 13) && LDA_STACK(i + 14) && STA_VAL(i + 15) && LDA_STACK(i + 16) && STA_VAL(i + 17) && LDA_STACK(i + 18) && STA_VAL(i + 19)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 18],6,256))) {
            listing[i + 1] = listing[i + 13];
            listing[i + 3] = listing[i + 15];
            listing[i + 5] = listing[i + 17];
            listing[i + 7] = listing[i + 19];
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 8] = "\tasl " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 9] = "\trol " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 10] = "\trol " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 11] = "\trol " + pas.System.Copy(listing[i + 7],6,256);
            return false;
          };
          if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && (ROL_STACK(i + 5) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_STACK(i) && LDA_IM_0(i + 1) && STA_STACK(i + 2) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && LDA_STACK(i + 5)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256))) {
            listing[i + 1] = listing[i];
            listing[i] = "\tasl @";
            listing[i + 2] = "\tlda #$00";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (ADC_SBC_VAL(i + 10) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && ASL_STACK(i + 4) && ROL_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB_VAL(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && STA_VAL(i + 11)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 6] = listing[i + 5];
            listing[i + 5] = "\tasl @";
            listing[i + 4] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (ADC_IM_0(i + 8) && LDA_VAL(i) && STA(i + 1) && LDA_VAL(i + 2) && ASL_A(i + 3) && ROL(i + 4) && ADD(i + 5) && STA(i + 6) && (STA_EAX(i + 6) === false) && LDA(i + 7) && STA(i + 9) && (STA_EAX_1(i + 9) === false) && (ADC(i + 11) === false)) if ((pas.System.Pos(listing[i + 6],listing[i + 9]) > 0) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            if (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i],6,256)) {
              listing[i] = "";
              listing[i + 1] = "";
            } else listing[i + 1] = listing[i + 9];
            listing[i + 4] = "\trol " + pas.System.Copy(listing[i + 9],6,256);
            listing[i + 7] = "";
            listing[i + 8] = "\tscc";
            listing[i + 9] = "\tinc " + pas.System.Copy(listing[i + 9],6,256);
            return false;
          };
          if (DEY(i + 8) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && LDY(i + 3) && BEQ(i + 4) && LAB_L(i + 5) && ASL_A(i + 6) && ROL_STACK(i + 7) && BNE(i + 9) && LAB_L(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 7] = "\trol " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (DEY(i + 14) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && ASL_A(i + 10) && ROL_STACK(i + 11) && ROL_STACK(i + 12) && ROL_STACK(i + 13) && BNE(i + 15) && LAB_L(i + 16) && STA_VAL(i + 17) && LDA_STACK(i + 18) && STA_VAL(i + 19) && LDA_STACK(i + 20) && STA_VAL(i + 21) && LDA_STACK(i + 22) && STA_VAL(i + 23)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 13],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 12],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 23],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 21],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 11] = "\trol " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 12] = "\trol " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 13] = "\trol " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (MWY_BP2(i + 21) && LDA_IM_0(i) && STA_STACK(i + 1) && LDA_IM_0(i + 2) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && ASL_A(i + 10) && ROL_STACK(i + 11) && ROL_STACK(i + 12) && ROL_STACK(i + 13) && DEY(i + 14) && BNE(i + 15) && LAB_L(i + 16) && STA_STACK(i + 17) && LDA_A(i + 18) && ADD_SUB_STACK(i + 19) && STA_A(i + 20)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 17],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 17],6,256) !== pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 17],6,256) !== pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 17],6,256) !== pas.System.Copy(listing[i + 13],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (MWY_BP2(i + 24) && LDA_IM_0(i) && STA_STACK(i + 1) && LDA_IM_0(i + 2) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && ASL_A(i + 10) && ROL_STACK(i + 11) && ROL_STACK(i + 12) && ROL_STACK(i + 13) && DEY(i + 14) && BNE(i + 15) && LAB_L(i + 16) && STA_STACK(i + 17) && LDA_A(i + 18) && ADD_SUB_STACK(i + 19) && STA_A(i + 20) && LDA_A(i + 21) && ADC_SBC_STACK(i + 22) && STA_A(i + 23)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 17],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 17],6,256) !== pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 17],6,256) !== pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 17],6,256) !== pas.System.Copy(listing[i + 13],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (ASL_A(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && DEY(i + 4) && BNE(i + 5) && LAB_L(i + 6) && STA_STACK(i + 7) && LDA_VAL(i + 8) && ORA_STACK(i + 9) && STA_STACK(i + 10) && LDA_VAL(i + 11) && ORA_STACK(i + 12) && STA_STACK(i + 13) && LDA_STACK(i + 14) && STA_VAL(i + 15) && LDA_STACK(i + 16) && STA_VAL(i + 17)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 13],6,256) === pas.System.Copy(listing[i + 16],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (TAY(i + 4) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && LDA_VAL(i + 5) && ADC_SBC_IM_0(i + 6) && STA_A(i + 7)) {
            listing[i + 1] = "";
            return false;
          };
          if (TAY(i + 4) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && LDA_VAL(i + 5) && ADC_SBC_IM_0(i + 6) && STA_A(i + 7)) {
            listing[i] = "";
            return false;
          };
          if ((STA_A(i + 5) || TAY(i + 5)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4)) {
            if (ADD_STACK(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if ((STA_A(i + 6) || TAY(i + 6)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_STACK(i + 3) && ADD_SUB_VAL(i + 4) && AND_ORA_EOR_VAL(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            if (ADD_STACK(i + 3)) {
              listing[i + 3] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 3] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if ((STA_A(i + 7) || TAY(i + 7)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4) && ADD_SUB_VAL(i + 5) && AND_ORA_EOR_VAL(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            if (ADD_STACK(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if ((STA_A(i + 7) || TAY(i + 7)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4) && ASL_A(i + 5) && ADD_SUB_VAL(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            if (ADD_STACK(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if ((STA_A(i + 7) || TAY(i + 7)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && ASL_A(i + 5) && ADD_SUB_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            if (ADD_STACK(i + 6)) {
              listing[i + 6] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 6] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            return false;
          };
          if ((LDA_A(i) || ROL_A(i)) && ASL_STACK(i + 1) && ROL_STACK(i + 2)) {
            if (LDA_A(i + 3)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 5) && ASL_STACK(i + 3) && ROL_STACK(i + 4)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 7) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 9) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6) && ASL_STACK(i + 7) && ROL_STACK(i + 8)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 11) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6) && ASL_STACK(i + 7) && ROL_STACK(i + 8) && ASL_STACK(i + 9) && ROL_STACK(i + 10)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 13) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6) && ASL_STACK(i + 7) && ROL_STACK(i + 8) && ASL_STACK(i + 9) && ROL_STACK(i + 10) && ASL_STACK(i + 11) && ROL_STACK(i + 12)) {
              listing[i] = "";
              return false;
            };
          };
          if ((LDA_A(i) || ROL_A(i)) && ASL_STACK(i + 1)) {
            if (LDA_A(i + 2)) {
              listing[i] = "";
              return false;
            };
            if ((MWY_BP2(i + 2) || LDY(i + 2)) && LDA_A(i + 3)) {
              listing[i] = "";
              return false;
            };
            if (ROL_A(i + 2) && LDA_A(i + 3)) {
              listing[i] = "";
              listing[i + 2] = "";
              return false;
            };
            if (ROL_A(i + 2) && (MWY_BP2(i + 3) || LDY(i + 3)) && LDA_A(i + 4)) {
              listing[i] = "";
              listing[i + 2] = "";
              return false;
            };
            if (ROL_A(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && MWY_BP2(i + 5) && LDY(i + 6) && LDA_A(i + 7)) {
              listing[i] = "";
              listing[i + 2] = "";
              return false;
            };
            if (ROL_A(i + 2) && MWY_BP2(i + 3) && LDY(i + 4) && LDA_A(i + 5)) {
              listing[i] = "";
              listing[i + 2] = "";
              return false;
            };
            if (ROL_A(i + 2) && MWY_BP2(i + 3) && LDY(i + 4) && INY(i + 5) && LDA_A(i + 6)) {
              listing[i] = "";
              listing[i + 2] = "";
              return false;
            };
            if (MWY_BP2(i + 2) && LDY(i + 3) && LDA_A(i + 4)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 3) && ASL_STACK(i + 2)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 4) && ASL_STACK(i + 2) && (MWY_BP2(i + 3) || LDY(i + 3))) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 5) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && (MWY_BP2(i + 4) || LDY(i + 4))) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 6) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && (MWY_BP2(i + 5) || LDY(i + 5))) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 7) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && (MWY_BP2(i + 6) || LDY(i + 6))) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 8) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && ASL_STACK(i + 6) && (MWY_BP2(i + 7) || LDY(i + 7))) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 4) && ASL_STACK(i + 2) && ASL_STACK(i + 3)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 5) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 6) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 7) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && ASL_STACK(i + 6)) {
              listing[i] = "";
              return false;
            };
            if (LDA_A(i + 8) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && ASL_STACK(i + 6) && ASL_STACK(i + 7)) {
              listing[i] = "";
              return false;
            };
          };
          return Result;
        };
        function opt_SPL(i) {
          var Result = false;
          var p = 0;
          var err = 0;
          Result = true;
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_IM(i + 1) && (LDA_IM_0(i + 1) === false) && DEY(i + 3)) {
            pas.System.val$6(pas.System.Copy(listing[i + 1],7,256),{get: function () {
                return p;
              }, set: function (v) {
                p = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                err = v;
              }});
            listing[i + 2] = "";
            listing[i + 3] = "";
            if (p > 127) listing[i] = "\tldy #$FF";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && STY_STACK(i + 4) && (LDA_STACK(i + 5) || STA_STACK(i + 5))) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 5] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_A(i + 1) && DEY(i + 3) && STY_STACK(i + 4) && STA_STACK(i + 5) && (LDA_A(i + 6) || LDY(i + 6))) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && LDA_STACK(i + 4)) if (listing[i + 1] === listing[i + 4]) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && ADD_SUB_VAL(i + 4) && STA_STACK(i + 5) && TYA(i + 6) && LDY_STACK(i + 7) && (LDA(i + 8) || MVA(i + 8))) if (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 6] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && ADD_SUB(i + 4) && AND_ORA_EOR_VAL(i + 5) && STA(i + 6)) {
            listing[i] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_IM_0(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7)) {
            listing[i] = "\tlda #$00";
            listing[i + 1] = listing[i + 4];
            listing[i + 2] = "\tlda #$00";
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 4] = "\tlda #$00";
            listing[i + 5] = "\tsta " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 6] = "\tlda #$00";
            listing[i + 7] = "\tsta " + pas.System.Copy(listing[i + 7],6,256);
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_IM_0(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && (STA_A(i + 7) === false) && (STY(i + 7) === false)) {
            listing[i] = "\tlda #$00";
            listing[i + 1] = listing[i + 4];
            listing[i + 2] = "\tlda #$00";
            listing[i + 3] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 4] = "\tlda #$00";
            listing[i + 5] = "\tsta " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 6] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && STY_STACK(i + 4) && MWY_BP2(i + 5) && LDY_IM(i + 6) && LDA_BP2_Y(i + 7) && ADD_STACK(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
            listing[i + 7] = "\tadd (:bp2),y";
            listing[i + 8] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDA_STACK(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 5] = "\tsta " + pas.System.Copy(listing[i + 5],6,256);
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && LDA_A(i + 7) && ADD_SUB_STACK(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && ADC_SBC_STACK(i + 11) && STA_A(i + 12) && (ADC_SBC(i + 14) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (SPL(i + 10) && SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDY_IM_0(i + 8) && LDA_VAL(i + 9) && DEY(i + 11) && STA_STACK(i + 12) && STY_STACK(i + 13) && STY_STACK(i + 14) && STY_STACK(i + 15)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (SPL(i + 3) && STA_STACK(i) && LDY_IM_0(i + 1) && LDA_STACK(i + 2) && DEY(i + 4) && STA_STACK(i + 5) && STY_STACK(i + 6)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "";
            return false;
          };
          if (SPL(i + 3) && STA_STACK(i) && LDY_IM_0(i + 1) && LDA_STACK(i + 2) && DEY(i + 4) && STA_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i] = "";
            return false;
          };
          if (SPL(i + 3) && STA_STACK(i) && LDY_IM_0(i + 1) && LDA_STACK(i + 2) && DEY(i + 4) && STY_STACK(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && STA(i + 8) && (IY(i + 8) === false)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i],6,256) !== pas.System.Copy(listing[i + 2],6,256))) {
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = "\tsty " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (SPL(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_VAL(i + 3) && DEY(i + 5) && STA_STACK(i + 6) && STY_STACK(i + 7) && LDA(i + 8) && STA(i + 9) && LDA(i + 10) && ADD_SUB_STACK(i + 11)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) {
            if (ADD_STACK(i + 11)) {
              listing[i + 11] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 11] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (SPL(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA(i + 3) && DEY(i + 5) && ADD_SUB_VAL(i + 6) && ADD_SUB_STACK(i + 7) && (STA(i + 8) || TAY(i + 8))) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            if (ADD(i + 7)) {
              listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 7] = "\tsub " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (SPL(i + 4) && (ADD_SUB(i) || AND_ORA_EOR(i)) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_STACK(i + 3) && DEY(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 3] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (SPL(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_STACK(i + 3) && DEY(i + 5) && STA_STACK(i + 6)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i + 3] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (SPL(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_A(i + 3) && DEY(i + 5) && STA_STACK(i + 6) && STA_STACK(i + 7) && STY_STACK(i + 8) && LDA_STACK(i + 9) && STA_STACK(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 1],6,256) !== pas.System.Copy(listing[i + 3],6,256))) {
            listing[i + 9] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (SPL(i + 4) && LDY_IM_0(i) && LDA_A(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && DEY(i + 5) && STY_STACK(i + 6) && ADD_SUB(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 6] = "";
            listing[i + 9] = "\ttya";
            return false;
          };
          if (SPL(i + 5) && LDY_IM_0(i) && LDA_A(i + 1) && STA_STACK(i + 2) && LDY_IM_0(i + 3) && LDA_STACK(i + 4) && DEY(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (SPL(i + 6) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDY_IM_0(i + 4) && LDA(i + 5) && DEY(i + 7) && ADD_SUB_STACK(i + 8) && STA(i + 9) && TYA(i + 10) && ADC_SBC_STACK(i + 11) && STA(i + 12)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            if (ADD_STACK(i + 8)) {
              listing[i + 8] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 8] = "\tsub " + pas.System.Copy(listing[i],6,256);
            if (ADC_STACK(i + 11)) {
              listing[i + 11] = "\tadc " + pas.System.Copy(listing[i + 2],6,256)}
             else listing[i + 11] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (SPL(i + 12) && STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && ADC_SBC(i + 8) && STA_STACK(i + 9) && LDY_IM_0(i + 10) && LDA_STACK(i + 11) && DEY(i + 13) && STA_STACK(i + 14) && STY_STACK(i + 15) && STY_STACK(i + 16) && STY_STACK(i + 17)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          if (LDY_IM_0(i) && (LDA_A(i + 1) || AND_ORA_EOR(i + 1)) && SPL(i + 2) && DEY(i + 3)) {
            if (STA_A(i + 4) && LOCAL(i + 5) && LDA_A(i + 6)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (STY(i + 4) && ASL_A(i + 5) && TAY(i + 6)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (ADD_SUB(i + 4) && STA_STACK(i + 5) && TYA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDY_STACK(i + 9)) if (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 5] = "\ttay";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              listing[i + 9] = "";
              return false;
            };
            if (STY_STACK(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && STA_STACK(i + 9) && LDY_STACK(i + 10)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
              listing[i] = listing[i + 1];
              listing[i + 1] = "\tasl @";
              listing[i + 2] = "\ttay";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              listing[i + 9] = "";
              listing[i + 10] = "";
              return false;
            };
            if (STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDA_STACK(i + 8) && ADD_SUB(i + 9) && STA_VAL(i + 10) && LDA_STACK(i + 11) && ADC_SBC(i + 12) && STA(i + 13) && (ADC_SBC(i + 15) === false)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              listing[i + 7] = "";
              listing[i + 8] = "";
              listing[i + 11] = "\ttya";
              return false;
            };
            if (STY_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
              listing[i + 4] = "";
              listing[i + 7] = "\ttya";
              return false;
            };
            if (STY_STACK(i + 4) && ADD(i + 5) && STA_VAL(i + 6) && LDA(i + 7) && ADC_STACK(i + 8)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
              listing[i + 4] = "";
              listing[i + 8] = "\tadc " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 7] = "\ttya";
              return false;
            };
            if (STY_STACK(i + 4) && STA(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && STA(i + 8) && STA(i + 9)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
              listing[i + 7] = listing[i + 6];
              listing[i + 6] = listing[i + 5];
              listing[i + 4] = "\tsty " + pas.System.Copy(listing[i + 8],6,256);
              listing[i + 5] = "\tsty " + pas.System.Copy(listing[i + 9],6,256);
              listing[i + 8] = "";
              listing[i + 9] = "";
              return false;
            };
            if (STY_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (STA_A(i + 8) === false)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
              listing[i + 4] = "\tsty " + pas.System.Copy(listing[i + 7],6,256);
              listing[i + 6] = "";
              listing[i + 7] = "";
              return false;
            };
            if (STY_STACK(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_SUB_STACK(i + 7) && STA(i + 8) && (ADC_SBC(i + 10) === false)) if ((pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 4],6,256) !== pas.System.Copy(listing[i + 6],6,256))) {
              listing[i + 4] = "\tsty #$00";
              return false;
            };
            if (STY_STACK(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADD_STACK(i + 7)) if (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
              listing[i + 4] = listing[i + 5];
              listing[i + 5] = "\ttya";
              listing[i + 6] = "\tadd " + pas.System.Copy(listing[i + 6],6,256);
              listing[i + 7] = "";
              return false;
            };
            if (STA_A(i + 4) && (LDA_A(i + 5) || ASL(i + 5) || LSR(i + 5))) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (STA_A(i + 4) && STA_A(i + 5) && (LDA_A(i + 6) || ASL(i + 6) || LSR(i + 6))) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (STA_im_0(i + 4) && STY_im_0(i + 5) && STY_im_0(i + 6) && (STA_A(i + 7) === false) && (STY(i + 7) === false)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              return false;
            };
            if (STA_im_0(i + 4) && (STA_A(i + 5) || STY(i + 5))) {
              listing[i + 4] = "";
              return false;
            };
            if (STA_im_0(i + 4) && (STA_A(i + 5) === false) && (STY(i + 5) === false)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (STY_im_0(i + 4) && (TYA(i + 5) || CMP(i + 5) || ADD_SUB(i + 5) || AND_ORA_EOR(i + 5) || SKIP(i + 5))) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (STY_im_0(i + 4) && STA_im_0(i + 5) && (STA_A(i + 6) === false)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              return false;
            };
            if (STA_A(i + 4) && STY_im_0(i + 5)) {
              listing[i + 5] = "";
              return false;
            };
            if (STY_im_0(i + 4) && STA_A(i + 5)) {
              listing[i + 4] = "";
              return false;
            };
            if (STY_im_0(i + 4) && STY_im_0(i + 5) && (LDA_A(i + 6) || LDY(i + 6) || MWY(i + 6))) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              return false;
            };
            if (STY_im_0(i + 4) && (LDA_A(i + 5) || LDY(i + 5) || MWY(i + 5))) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (STY_im_0(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && (ADC_SBC(i + 8) === false)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (STY_im_0(i + 4) && ADD_SUB(i + 5) && TAY(i + 6)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (STY_im_0(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA(i + 7) && ADC_SBC(i + 8) && STA(i + 9)) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              return false;
            };
            if (STA_A(i + 4) && (MWY(i + 5) || LDY(i + 5))) {
              listing[i] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
          };
          return Result;
        };
        function opt_POKE(i) {
          var Result = false;
          var p = 0;
          var tmp = "";
          var yes = false;
          Result = true;
          if (((pas.System.Pos(listing[i],listing[i + 3]) > 0) || ((pas.System.Pos("\tlda <",listing[i]) > 0) && (pas.System.Pos("\tlda >",listing[i + 3]) > 0))) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && TAY(i + 2) && LDA_VAL(i + 3) && (LDA_IM(i + 3) === false) && ADC_IM_0(i + 4) && STA_BP_1(i + 5)) {
            if (LDA_BP_Y(i + 6) && (STA(i + 7) || LSR_A(i + 7) || ASL_A(i + 7)) && (pas.System.Pos(" :STACK",listing[i + 7]) === 0)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 7)) listing[i + 7] = "\tsta (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && STA_BP_1(i + 9)) if (pas.System.Copy(listing[i + 7],6,256) !== pas.System.Copy(listing[i + 8],6,256)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && TAY(i + 7) && LDA(i + 8) && STA(i + 9)) if (pas.System.Copy(listing[i + 7],6,256) !== pas.System.Copy(listing[i + 8],6,256)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              if (LDA_BP_Y(i + 8)) listing[i + 8] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 9)) listing[i + 9] = "\tsta (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && LDY(i + 7) && STA(i + 8)) if (pas.System.Copy(listing[i + 7],6,256) !== pas.System.Copy(listing[i + 8],6,256)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA(i + 6) && (LDA_BP_Y(i + 6) === false) && (LDA_STACK(i + 6) === false) && (AND_ORA_EOR(i + 7) || ADD_SUB(i + 7)) && (pas.System.Pos(" (:bp),y",listing[i + 7]) > 0) && STA(i + 8) && (STA_BP_Y(i + 8) === false) && (STA_STACK(i + 8) === false)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 7] = pas.System.Copy(listing[i + 7],1,5) + "(:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && AND_ORA_EOR(i + 7) && (STA_VAL(i + 8) || CMP(i + 8))) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
              if (CMP_BP_Y(i + 8)) listing[i + 8] = "\tcmp (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && STA_STACK(i + 7)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && CMP(i + 7)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              if (CMP_BP_Y(i + 7)) listing[i + 7] = "\tcmp (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA_BP_Y(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && (MWY_BP2(i + 9) || LDY(i + 9))) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 6] = "\tlda (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
            if (LDA(i + 6) && STA_VAL(i + 7)) {
              if (pas.System.Pos("\tlda <",listing[i]) > 0) {
                listing[i + 4] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2"}
               else listing[i + 4] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              if (LDA_BP_Y(i + 6)) listing[i + 6] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 7)) listing[i + 7] = "\tsta (:bp2),y";
              listing[i] = "";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
              return false;
            };
          };
          if ((pas.System.Pos("+",listing[i]) === 1) || (pas.System.Pos("-",listing[i]) === 1)) {
            tmp = pas.System.Copy(listing[i],2,256);
            yes = false;
            for (var $l = i + 1, $end = l - 1; $l <= $end; $l++) {
              p = $l;
              if (MWY_BP2(p) && (listing[p] === ("\tmwy " + tmp + " :bp2"))) {
                listing[p] = ""}
               else if (pas.System.Pos("(:bp2),y",listing[p]) > 0) {
                listing[p] = pas.System.Copy(listing[p],1,5) + "(" + tmp + "),y";
                yes = true;
              } else if ((pas.System.Pos("+",listing[p]) === 1) || (pas.System.Pos("-",listing[p]) === 1)) {
                if (listing[p].length === 1) listing[p] = "";
                break;
              };
            };
            if (yes) {
              listing[i] = "";
              return false;
            };
          };
          if (((pas.System.Pos("+",listing[i]) === 1) || (pas.System.Pos("-",listing[i]) === 1)) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && (("\tlda " + pas.System.Copy(listing[i + 1],6,256) + "+1") === listing[i + 2]) && STA_BP_1(i + 3)) {
            if (LDA(i + 4) && ADD_SUB(i + 5) && STA(i + 6)) {
              listing[i + 1] = "\tmwy " + pas.System.Copy(listing[i + 1],6,256) + " :bp2";
              listing[i + 2] = "\tldy #$00";
              listing[i + 3] = "";
              if (LDA_BP_Y(i + 4)) listing[i + 4] = "\tlda (:bp2),y";
              if (ADD_BP_Y(i + 5)) listing[i + 5] = "\tadd (:bp2),y";
              if (SUB_BP_Y(i + 5)) listing[i + 5] = "\tsub (:bp2),y";
              if (STA_BP_Y(i + 6)) listing[i + 6] = "\tsta (:bp2),y";
              return false;
            };
            if (LDA(i + 4) && AND_ORA_EOR(i + 5) && STA(i + 6)) {
              listing[i + 1] = "\tmwy " + pas.System.Copy(listing[i + 1],6,256) + " :bp2";
              listing[i + 2] = "\tldy #$00";
              listing[i + 3] = "";
              if (LDA_BP_Y(i + 4)) listing[i + 4] = "\tlda (:bp2),y";
              if (AND_BP_Y(i + 5)) listing[i + 5] = "\tand (:bp2),y";
              if (ORA_BP_Y(i + 5)) listing[i + 5] = "\tora (:bp2),y";
              if (EOR_BP_Y(i + 5)) listing[i + 5] = "\teor (:bp2),y";
              if (STA_BP_Y(i + 6)) listing[i + 6] = "\tsta (:bp2),y";
              return false;
            };
            if (LDA(i + 4) && LDY(i + 5) && STA(i + 6)) {
              listing[i + 1] = "\tmwy " + pas.System.Copy(listing[i + 1],6,256) + " :bp2";
              listing[i + 2] = "\tldy #$00";
              listing[i + 3] = "";
              if (LDA_BP_Y(i + 4)) listing[i + 4] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 6)) listing[i + 6] = "\tsta (:bp2),y";
              return false;
            };
          };
          if (((pas.System.Pos("+",listing[i]) === 1) || (pas.System.Pos("-",listing[i]) === 1)) && LDA_VAL(i + 1) && (LDA_IM(i + 1) === false) && ADD(i + 2) && TAY(i + 3) && LDA_VAL(i + 4) && ((listing[i + 1] + "+1") === listing[i + 4]) && ADC_IM_0(i + 5) && STA_BP_1(i + 6)) {
            if (LDA(i + 7) && STA(i + 8)) {
              listing[i + 1] = "\tmwy " + pas.System.Copy(listing[i + 1],6,256) + " :bp2";
              listing[i + 2] = "\tldy " + pas.System.Copy(listing[i + 2],6,256);
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda (:bp2),y";
              if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
              return false;
            };
          };
          return Result;
        };
        function opt_BP(i) {
          var Result = false;
          var p = 0;
          var tmp = "";
          var yes = false;
          Result = true;
          if (listing[i] === "\tmwy :bp2 :bp2") {
            listing[i] = "";
            return false;
          };
          if ((pas.System.Pos("\tldy >",listing[i]) > 0) && STY_BP_1(i + 1) && (pas.System.Pos("\tldy <",listing[i + 2]) > 0) && LDA_BP_Y(i + 3) && (listing[i + 4] === "\tadd #$01") && STA_BP_Y(i + 5)) if (pas.System.Copy(listing[i],7,256) === pas.System.Copy(listing[i + 2],7,256)) {
            listing[i] = "\tinc " + pas.System.Copy(listing[i],7,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((pas.System.Pos("\tldy >",listing[i]) > 0) && STY_BP_1(i + 1) && (pas.System.Pos("\tldy <",listing[i + 2]) > 0) && LDA_BP_Y(i + 3) && (listing[i + 4] === "\tsub #$01") && STA_BP_Y(i + 5)) if (pas.System.Copy(listing[i],7,256) === pas.System.Copy(listing[i + 2],7,256)) {
            listing[i] = "\tdec " + pas.System.Copy(listing[i],7,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && LDY(i + 1) && STY_BP_1(i + 2) && TAY(i + 3) && LDA_BP_Y(i + 4)) {
            listing[i + 3] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            return false;
          };
          if (STA_BP_1(i + 5) && STA_STACK(i) && STA_BP_1(i + 1) && LDA_BP_Y(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 6) && STA_STACK(i) && STA_BP_1(i + 1) && LDA_BP_Y(i + 2) && (AND_ORA_EOR(i + 3) || ADD_SUB(i + 3)) && STA_STACK(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (STY_BP_1(i + 7) && LDY(i) && STY_BP_1(i + 1) && LDY(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && (STA(i + 5) || AND_ORA_EOR(i + 5)) && LDY(i + 6)) if ((listing[i] === listing[i + 6]) && (listing[i + 1] === listing[i + 7])) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (STY_BP_1(i + 8) && LDY(i) && STY_BP_1(i + 1) && LDY(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && AND_ORA_EOR(i + 5) && STA(i + 6) && LDY(i + 7)) if ((listing[i] === listing[i + 7]) && (listing[i + 1] === listing[i + 8])) {
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (STA_BP_1(i + 3) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && LDY_STACK(i + 4)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i + 4] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "\tldy " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 3] = "\tsty :bp+1";
            return false;
          };
          if (STA_BP_1(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && LDY_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 5] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            if (ADD_IM_0(i + 3) || SUB_IM_0(i + 3)) {
              listing[i + 3] = "\tldy " + pas.System.Copy(listing[i + 2],6,256);
              listing[i + 4] = "\tsty :bp+1";
              listing[i + 2] = "";
            };
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_STACK(i) && SUB(i + 1) && (SUB_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_STACK(i + 3) && SBC(i + 4) && (SBC_STACK(i + 4) === false) && LDY_STACK(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = "";
            listing[i + 2] = "\ttay";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_VAL(i) && (IY(i) === false) && (ADD_IM_0(i + 1) || SUB_IM_0(i + 1)) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && LDY_STACK(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            if (ADC(i + 4)) {
              listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256)}
             else listing[i + 4] = "\tsub " + pas.System.Copy(listing[i + 4],6,256);
            if (ADD_IM_0(i + 4) || SUB_IM_0(i + 4)) {
              listing[i + 3] = "\tldy " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 4] = "\tsty :bp+1";
              listing[i + 5] = "";
            };
            return false;
          };
          if (STA_BP_1(i + 3) && LDY(i) && LDA(i + 1) && (IY(i + 1) === false) && ADD_IM_0(i + 2)) {
            listing[i + 3] = listing[i];
            listing[i] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "\tsty :bp+1";
            listing[i + 2] = "";
            return false;
          };
          if (STY_BP_1(i + 3) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDY_VAL(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 5] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STY_BP_1(i + 3) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDY_VAL(i + 4) && LDA_BP_Y(i + 5) && LDY_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STY_BP_1(i + 3) && (LDA_A(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDY_VAL(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 1] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (IY(i + 1) === false) && STA_STACK(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY(i + 6) && LDA_A(i + 7) && (ADD_SUB(i + 8) || AND_ORA_EOR(i + 8)) && LDY_STACK(i + 9)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 9] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 10] = "\tsta (:bp2),y";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 10) && ADD(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADC_IM_0(i + 3) && STA_STACK(i + 4) && LDA_IM_0(i + 5) && ADD_STACK(i + 6) && TAY(i + 7) && LDA_VAL(i + 8) && ADC_STACK(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 1] = "\ttay";
            listing[i + 3] = "\tadc " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 4] = "\tsta :bp+1";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (STA_BP_1(i + 7) && (ADC(i) === false) && LDA_IM_0(i + 2) && ADD_STACK(i + 3) && TAY(i + 4) && LDA_IM(i + 5) && (LDA_IM_0(i + 5) === false) && ADC_STACK(i + 6)) {
            listing[i + 2] = "";
            listing[i + 3] = "\tldy " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 4] = "";
            listing[i + 6] = "\tadd " + pas.System.Copy(listing[i + 6],6,256);
            return false;
          };
          if (STA_BP_Y(i + 11) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ADD_SUB(i + 5) && TAY(i + 6) && LDA(i + 7) && ADC_SBC_STACK(i + 8) && STA_BP_1(i + 9) && LDA_STACK(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 10] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            if (ADC_STACK(i + 8)) {
              listing[i + 8] = "\tadc " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 8] = "\tsbc " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_BP_Y(i + 9) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && ADD_SUB(i + 3) && TAY(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_BP_1(i + 7) && LDA_STACK(i + 8)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
            listing[i + 8] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_BP_Y(i + 6) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_BP_1(i + 3) && LDY(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 5] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "\tldy " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 3] = "\tsty :bp+1";
            return false;
          };
          if (STA_BP_1(i + 5) && STY_STACK(i) && LDA(i + 1) && ADD_SUB(i + 2) && STA(i + 3) && LDA_STACK(i + 4)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) {
            listing[i] = "\tsty :bp+1";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(i + 3) === false) && (IY(i + 3) === false) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && (LDA_IM_0(i + 9) === false) && ADC_STACK(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 6] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && LDY_IM(i + 3) && LDA_BP2_Y(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 2] = listing[i + 5];
            listing[i + 5] = listing[i];
            listing[i + 6] = listing[i + 1];
            listing[i] = listing[i + 3];
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_A(i + 8)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 7],6,256))) {
            listing[i + 1] = listing[i + 6];
            listing[i + 4] = listing[i + 8];
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && MWY_BP2(i + 2) && LDY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 6] = listing[i];
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (STA_STACK(i) && MWY_BP2(i + 1) && LDY(i + 2) && LDA_STACK(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_A(i) && MWY_BP2(i + 1) && LDY(i + 2) && LDA_A(i + 3)) {
            listing[i] = "";
            return false;
          };
          if ((LDA_A(i) || AND_ORA_EOR(i)) && MWY_BP2(i + 1) && (pas.System.Pos("\tmwy #",listing[i + 1]) === 0) && LDY_IM_0(i + 2) && STA_BP2_Y(i + 3) && (listing[i + 4] === "")) {
            yes = true;
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (pas.System.Copy(listing[p],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
                yes = false;
                break;
              };
            };
            if (yes) {
              tmp = GetString$1(i + 1);
              listing[i + 1] = "\tmvy " + tmp + "+1 :bp+1";
              listing[i + 2] = "\tldy " + tmp;
              listing[i + 3] = "\tsta (:bp),y";
              return false;
            };
          };
          if ((ASL(i) || LSR(i)) && MWY_BP2(i + 1) && (pas.System.Pos("\tmwy #",listing[i + 1]) === 0) && LDY_IM_0(i + 2) && STA_BP2_Y(i + 3) && (listing[i + 4] === "")) {
            yes = true;
            for (var $l1 = i - 1; $l1 >= 0; $l1--) {
              p = $l1;
              if (pas.System.Copy(listing[p],6,256) === pas.System.Copy(listing[i + 1],6,256)) {
                yes = false;
                break;
              };
            };
            if (yes) {
              tmp = GetString$1(i + 1);
              listing[i + 1] = "\tmvy " + tmp + "+1 :bp+1";
              listing[i + 2] = "\tldy " + tmp;
              listing[i + 3] = "\tsta (:bp),y";
              return false;
            };
          };
          if (STA_BP2_Y(i + 7) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && INY(i + 8) && LDA_STACK(i + 9)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 6] = listing[i];
            listing[i + 9] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_BP2_Y(i + 11) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && ADD_BP2_Y(i + 7) && INY(i + 8) && STA(i + 9) && LDA_STACK(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 6] = listing[i];
            listing[i + 10] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (ADC_BP2_Y(i + 15) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && MWY_BP2(i + 8) && LDY(i + 9) && LDA_STACK(i + 10) && ADD_BP2_Y(i + 11) && INY(i + 12) && STA(i + 13) && LDA_STACK(i + 14) && STA(i + 16) && LDA_STACK(i + 17) && ADC(i + 18) && STA(i + 19) && LDA_STACK(i + 20) && ADC(i + 21) && STA(i + 22)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 20],6,256))) {
            listing[i + 10] = listing[i];
            listing[i + 14] = listing[i + 2];
            listing[i + 17] = listing[i + 4];
            listing[i + 20] = listing[i + 6];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (STA_BP2_Y(i + 13) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA(i + 6) && STA_BP2_Y(i + 7) && INY(i + 8) && LDA(i + 9) && STA_BP2_Y(i + 10) && INY(i + 11) && LDA_STACK(i + 12) && INY(i + 14) && LDA_STACK(i + 15) && STA_BP2_Y(i + 16)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            listing[i + 12] = listing[i];
            listing[i + 15] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 10) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_STACK(i + 13) && LDA_STACK(i + 14) && STA_STACK(i + 15) && LDA_STACK(i + 16) && STA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 12],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 14],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 11] = listing[i + 8];
            listing[i + 8] = listing[i + 5];
            listing[i + 5] = listing[i + 2];
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            listing[i + 16] = "";
            listing[i + 17] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 10) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && STA_STACK(i + 11) && LDA(i + 12) && ADD_SUB(i + 13) && STA(i + 14) && LDA(i + 15) && ADC_SBC(i + 16) && STA(i + 17) && LDA(i + 18) && ADC_SBC(i + 19) && STA(i + 20) && LDA(i + 21) && ADC_SBC(i + 22) && STA(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 22],6,256))) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            if (ADD(i + 13)) {
              listing[i + 13] = "\tadd (:bp2),y+";
              listing[i + 16] = "\tadc (:bp2),y+";
              listing[i + 19] = "\tadc (:bp2),y+";
              listing[i + 22] = "\tadc (:bp2),y";
            } else {
              listing[i + 13] = "\tsub (:bp2),y+";
              listing[i + 16] = "\tsbc (:bp2),y+";
              listing[i + 19] = "\tsbc (:bp2),y+";
              listing[i + 22] = "\tsbc (:bp2),y";
            };
            return false;
          };
          if (LDA_BP2_Y(i + 10) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && (ADD_SUB(i + 13) || AND_ORA_EOR(i + 13)) && (IY(i + 13) === false) && STA(i + 14) && LDA_STACK(i + 15) && (ADC_SBC(i + 16) || AND_ORA_EOR(i + 16)) && STA(i + 17) && LDA_STACK(i + 18) && (ADC_SBC(i + 19) || AND_ORA_EOR(i + 19)) && STA(i + 20) && LDA_STACK(i + 21) && (ADC_SBC(i + 22) || AND_ORA_EOR(i + 22)) && STA(i + 23)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            listing[i + 1] = "\tlda (:bp2),y";
            listing[i + 2] = listing[i + 13];
            listing[i + 3] = listing[i + 14];
            listing[i + 4] = "\tiny";
            listing[i + 5] = "\tlda (:bp2),y";
            listing[i + 6] = listing[i + 16];
            listing[i + 7] = listing[i + 17];
            listing[i + 8] = "\tiny";
            listing[i + 9] = "\tlda (:bp2),y";
            listing[i + 10] = listing[i + 19];
            listing[i + 11] = listing[i + 20];
            listing[i + 12] = "\tiny";
            listing[i + 13] = "\tlda (:bp2),y";
            listing[i + 14] = listing[i + 22];
            listing[i + 15] = listing[i + 23];
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (STA_BP2_Y(i + 15) && MWY(i) && (listing[i] === listing[i + 9]) && LDY_IM(i + 1) && (listing[i + 1] === listing[i + 10]) && LDA_BP2_Y(i + 2) && ADD_SUB(i + 3) && STA_STACK(i + 4) && INY(i + 5) && LDA_BP2_Y(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if ((pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 4] = "\tsta (:bp2),y";
            listing[i + 8] = "\tsta (:bp2),y";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 4) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && STA_STACK(i + 5) && LDA_STACK(i + 6) && (ADD_SUB(i + 7) || AND_ORA_EOR(i + 7)) && (IY(i + 7) === false) && STA(i + 8) && LDA_STACK(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i + 1] = "\tlda (:bp2),y";
            listing[i + 2] = listing[i + 7];
            listing[i + 3] = listing[i + 8];
            listing[i + 4] = "\tiny";
            listing[i + 5] = "\tlda (:bp2),y";
            listing[i + 6] = listing[i + 10];
            listing[i + 7] = listing[i + 11];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 4) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && (ADD_SUB_STACK(i + 7) || AND_ORA_EOR_STACK(i + 7)) && STA(i + 8) && LDA_A(i + 9) && (IY(i + 9) === false) && (ADC_SBC_STACK(i + 10) || AND_ORA_EOR_STACK(i + 10)) && STA(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 1] = listing[i + 6];
            listing[i + 2] = pas.System.Copy(listing[i + 7],1,5) + "(:bp2),y";
            listing[i + 3] = listing[i + 8];
            listing[i + 4] = "\tiny";
            listing[i + 5] = listing[i + 9];
            listing[i + 6] = pas.System.Copy(listing[i + 10],1,5) + "(:bp2),y";
            listing[i + 7] = listing[i + 11];
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if ((i > 0) && STA_BP2_Y(i + 28) && LDY(i) && (listing[i] === listing[i + 17]) && MWY_BP2(i - 1) && (listing[i - 1] === listing[i + 16]) && LDA_BP2_Y(i + 1) && ADD_SUB(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_BP2_Y(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && INY(i + 12) && LDA_BP2_Y(i + 13) && ADC_SBC(i + 14) && STA_STACK(i + 15) && LDA_STACK(i + 18) && STA_BP2_Y(i + 19) && INY(i + 20) && LDA_STACK(i + 21) && STA_BP2_Y(i + 22) && INY(i + 23) && LDA_STACK(i + 24) && STA_BP2_Y(i + 25) && INY(i + 26) && LDA_STACK(i + 27)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 21],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 24],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 27],6,256))) {
            listing[i + 3] = "\tsta (:bp2),y";
            listing[i + 7] = "\tsta (:bp2),y";
            listing[i + 11] = "\tsta (:bp2),y";
            listing[i + 15] = "\tsta (:bp2),y";
            listing[i + 16] = "";
            listing[i + 17] = "";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            listing[i + 26] = "";
            listing[i + 27] = "";
            listing[i + 28] = "";
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDA(i) && ADD_SUB(i + 1) && STA(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA(i + 8) && LDA(i + 9) && ADC_SBC(i + 10) && STA(i + 11) && LDA(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDY_IM_0(i + 18) && LDA(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA(i + 22) && STA_BP2_Y(i + 23) && INY(i + 24) && LDA(i + 25) && STA_BP2_Y(i + 26) && INY(i + 27) && LDA(i + 28)) if ((pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 25],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 28],6,256))) {
            listing_tmp[0] = listing[i + 12];
            listing_tmp[1] = listing[i + 13];
            listing_tmp[2] = listing[i + 14];
            listing_tmp[3] = listing[i + 15];
            listing_tmp[4] = listing[i + 16];
            listing_tmp[5] = listing[i + 17];
            listing_tmp[6] = listing[i + 18];
            listing_tmp[7] = listing[i];
            listing_tmp[8] = listing[i + 1];
            listing_tmp[9] = listing[i + 20];
            listing_tmp[10] = listing[i + 21];
            listing_tmp[11] = listing[i + 3];
            listing_tmp[12] = listing[i + 4];
            listing_tmp[13] = listing[i + 20];
            listing_tmp[14] = listing[i + 21];
            listing_tmp[15] = listing[i + 6];
            listing_tmp[16] = listing[i + 7];
            listing_tmp[17] = listing[i + 20];
            listing_tmp[18] = listing[i + 21];
            listing_tmp[19] = listing[i + 9];
            listing_tmp[20] = listing[i + 10];
            listing_tmp[21] = listing[i + 20];
            for (p = 0; p <= 21; p++) listing[i + p] = listing_tmp[p];
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            listing[i + 26] = "";
            listing[i + 27] = "";
            listing[i + 28] = "";
            listing[i + 29] = "";
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDA_IM(i) && STA(i + 1) && LDA_IM(i + 2) && STA(i + 3) && LDA_IM(i + 4) && STA(i + 5) && LDA_IM(i + 6) && STA(i + 7) && LDA(i + 8) && ADD_SUB(i + 9) && STA_BP2(i + 10) && LDA(i + 11) && ADC_SBC(i + 12) && STA_BP2_1(i + 13) && LDY_IM_0(i + 14) && LDA(i + 15) && ADD_SUB(i + 16) && STA_BP2_Y(i + 17) && INY(i + 18) && LDA(i + 19) && ADC_SBC(i + 20) && STA_BP2_Y(i + 21) && INY(i + 22) && LDA(i + 23) && ADC_SBC(i + 24) && STA_BP2_Y(i + 25) && INY(i + 26) && LDA(i + 27) && ADC_SBC(i + 28)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 16],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 20],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 24],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 28],6,256))) {
            listing[i + 16] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 20] = "\tadc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 24] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i + 28] = "\tadc " + pas.System.Copy(listing[i + 6],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            return false;
          };
          if (STA_BP2_Y(i + 15) && LDY(i) && (listing[i] === listing[i + 10]) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM(i + 6) === false) && STA_BP2(i + 7) && (listing[i + 8] === (listing[i + 6] + "+1")) && STA_BP2_1(i + 9) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            if (pas.System.Pos(listing[i + 6],listing[i + 8]) > 0) {
              listing[i] = "\tmwy " + pas.System.Copy(listing[i + 6],6,256) + " :TMP";
              listing[i + 1] = "";
              listing[i + 2] = "";
              listing[i + 3] = "";
            } else {
              listing[i] = listing[i + 6];
              listing[i + 1] = "\tsta :TMP";
              listing[i + 2] = listing[i + 8];
              listing[i + 3] = "\tsta :TMP+1";
            };
            listing[i + 4] = "\tldy #$00";
            listing[i + 5] = "\tlda (:bp2),y";
            listing[i + 6] = "\tsta (:TMP),y";
            listing[i + 7] = "\tiny";
            listing[i + 8] = "\tlda (:bp2),y";
            listing[i + 9] = "\tsta (:TMP),y";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (STA_BP2_Y(i + 37) && STA_BP2(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_BP2_1(i + 3) && LDY(i + 4) && (listing[i + 4] === listing[i + 26]) && LDA_BP2_Y(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_STACK(i + 11) && INY(i + 12) && LDA_BP2_Y(i + 13) && (ADC_SBC(i + 14) || AND_ORA_EOR(i + 14)) && STA_STACK(i + 15) && INY(i + 16) && LDA_BP2_Y(i + 17) && (ADC_SBC(i + 18) || AND_ORA_EOR(i + 18)) && STA_STACK(i + 19) && LDA_A(i + 20) && ADD_SUB(i + 21) && STA_BP2(i + 22) && LDA_A(i + 23) && ADC_SBC(i + 24) && STA_BP2_1(i + 25) && LDA_STACK(i + 27) && STA_BP2_Y(i + 28) && INY(i + 29) && LDA_STACK(i + 30) && STA_BP2_Y(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && STA_BP2_Y(i + 34) && INY(i + 35) && LDA_STACK(i + 36)) if ((pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 27],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 30],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 33],6,256)) && (pas.System.Copy(listing[i + 19],6,256) === pas.System.Copy(listing[i + 36],6,256))) {
            listing[i + 22] = "\tsta :TMP";
            listing[i + 25] = "\tsta :TMP+1";
            listing_tmp[0] = listing[i + 20];
            listing_tmp[1] = listing[i + 21];
            listing_tmp[2] = listing[i + 22];
            listing_tmp[3] = listing[i + 23];
            listing_tmp[4] = listing[i + 24];
            listing_tmp[5] = listing[i + 25];
            listing_tmp[6] = listing[i + 4];
            listing_tmp[7] = listing[i + 5];
            listing_tmp[8] = listing[i + 6];
            listing_tmp[9] = "\tsta (:TMP),y";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = listing[i + 9];
            listing_tmp[12] = listing[i + 10];
            listing_tmp[13] = "\tsta (:TMP),y";
            listing_tmp[14] = "\tiny";
            listing_tmp[15] = listing[i + 13];
            listing_tmp[16] = listing[i + 14];
            listing_tmp[17] = "\tsta (:TMP),y";
            listing_tmp[18] = "\tiny";
            listing_tmp[19] = listing[i + 17];
            listing_tmp[20] = listing[i + 18];
            listing_tmp[21] = "\tsta (:TMP),y";
            for (p = 0; p <= 21; p++) listing[i + p + 4] = listing_tmp[p];
            listing[i + 26] = "";
            listing[i + 27] = "";
            listing[i + 28] = "";
            listing[i + 29] = "";
            listing[i + 30] = "";
            listing[i + 31] = "";
            listing[i + 32] = "";
            listing[i + 33] = "";
            listing[i + 34] = "";
            listing[i + 35] = "";
            listing[i + 36] = "";
            listing[i + 37] = "";
            return false;
          };
          if (STA_BP2_Y(i + 23) && STA_BP2(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_BP2_1(i + 3) && LDY(i + 4) && (listing[i + 4] === listing[i + 18]) && LDA_BP2_Y(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_STACK(i + 11) && LDA_A(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA_A(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDA_STACK(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA_STACK(i + 22)) if ((pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 22],6,256))) {
            listing[i + 14] = "\tsta :TMP";
            listing[i + 17] = "\tsta :TMP+1";
            listing_tmp[0] = listing[i + 12];
            listing_tmp[1] = listing[i + 13];
            listing_tmp[2] = listing[i + 14];
            listing_tmp[3] = listing[i + 15];
            listing_tmp[4] = listing[i + 16];
            listing_tmp[5] = listing[i + 17];
            listing_tmp[6] = listing[i + 4];
            listing_tmp[7] = listing[i + 5];
            listing_tmp[8] = listing[i + 6];
            listing_tmp[9] = "\tsta (:TMP),y";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = listing[i + 9];
            listing_tmp[12] = listing[i + 10];
            listing_tmp[13] = "\tsta (:TMP),y";
            for (p = 0; p <= 13; p++) listing[i + p + 4] = listing_tmp[p];
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            return false;
          };
          if (STA_BP2_Y(i + 21) && STA_BP2(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_BP2_1(i + 3) && LDY(i + 4) && (listing[i + 4] === listing[i + 16]) && LDA_BP2_Y(i + 5) && STA_STACK(i + 6) && INY(i + 7) && LDA_BP2_Y(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10) && ADD_SUB(i + 11) && STA_BP2(i + 12) && LDA_A(i + 13) && ADC_SBC(i + 14) && STA_BP2_1(i + 15) && LDA_STACK(i + 17) && STA_BP2_Y(i + 18) && INY(i + 19) && LDA_STACK(i + 20)) if ((pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 20],6,256))) {
            listing[i + 12] = "\tsta :TMP";
            listing[i + 15] = "\tsta :TMP+1";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 17] = "\tlda (:bp2),y";
            listing[i + 18] = "\tsta (:TMP),y";
            listing[i + 20] = "\tlda (:bp2),y";
            listing[i + 21] = "\tsta (:TMP),y";
            return false;
          };
          if (STA_BP2_Y(i + 18) && LDA_A(i) && (IY(i) === false) && STA_A(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_A(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_A(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_A(i + 7) && LDY(i + 8) && LDA_A(i + 9) && STA_BP2(i + 10) && LDA_A(i + 11) && STA_BP2_1(i + 12) && LDY(i + 13) && LDA_A(i + 14) && STA_BP2_Y(i + 15) && INY(i + 16) && LDA_A(i + 17) && (LDA_A(i + 19) === false)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 14] = listing[i];
            listing[i + 17] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_Y(i + 13) && MWY_BP2(i) && LDY_IM(i + 1) && (listing[i + 1] === listing[i + 8]) && LDA_BP2_Y(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_BP2_Y(i + 5) && STA_STACK(i + 6) && MWY_BP2(i + 7) && (listing[i + 7] !== listing[i]) && LDA_STACK(i + 9) && STA_BP2_Y(i + 10) && INY(i + 11) && LDA_STACK(i + 12)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 12],6,256))) {
            listing[i + 1] = "\tmwy " + GetString$1(i + 7) + " :TMP";
            listing[i + 2] = listing[i + 8];
            listing[i + 3] = "\tlda (:bp2),y";
            listing[i + 4] = "\tsta (:TMP),y";
            listing[i + 5] = "\tiny";
            listing[i + 6] = "\tlda (:bp2),y";
            listing[i + 7] = "\tsta (:TMP),y";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDY(i) && (listing[i] === listing[i + 7]) && LDA_BP2_Y(i + 1) && STA(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA(i + 5) && MWY_BP2(i + 6) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_IM_0(i + 11)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
            listing[i] = "\tmwy " + GetString$1(i + 6) + " :TMP";
            listing[i + 1] = listing[i + 7];
            listing[i + 2] = "\tlda (:bp2),y";
            listing[i + 3] = "\tsta (:TMP),y";
            listing[i + 4] = "\tiny";
            listing[i + 5] = "\tlda #$00";
            listing[i + 6] = "\tsta (:TMP),y";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA(i + 5) && LDA(i + 6) && ADD_SUB(i + 7) && TAY(i + 8) && LDA(i + 9) && ADC_SBC(i + 10) && LDA(i + 12)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP2_1(i + 27) && AND_ORA_EOR_BP2_Y(i + 42) && LDY(i) && (listing[i] === listing[i + 28]) && LDA_STACK(i + 1) && AND_ORA_EOR_BP2_Y(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_STACK(i + 5) && AND_ORA_EOR_BP2_Y(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_STACK(i + 9) && AND_ORA_EOR_BP2_Y(i + 10) && STA_STACK(i + 11) && INY(i + 12) && LDA_STACK(i + 13) && AND_ORA_EOR_BP2_Y(i + 14) && STA_STACK(i + 15) && LDA_IM_0(i + 16) && STA_STACK(i + 17) && LDA_A(i + 18) && ASL_A(i + 19) && ROL_STACK(i + 20) && ASL_A(i + 21) && ROL_STACK(i + 22) && ADD_SUB(i + 23) && STA_BP2(i + 24) && LDA_A(i + 25) && ADC_SBC_STACK(i + 26) && LDY(i + 28) && LDA_STACK(i + 29) && AND_ORA_EOR_BP2_Y(i + 30) && STA_A(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && AND_ORA_EOR_BP2_Y(i + 34) && STA_A(i + 35) && INY(i + 36) && LDA_STACK(i + 37) && AND_ORA_EOR_BP2_Y(i + 38) && STA_A(i + 39) && INY(i + 40) && LDA_STACK(i + 41) && STA_A(i + 43)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 13],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 29],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 33],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 37],6,256)) && (pas.System.Copy(listing[i + 15],6,256) === pas.System.Copy(listing[i + 41],6,256))) {
            listing[i + 24] = "\tsta :TMP";
            listing[i + 27] = "\tsta :TMP+1";
            listing_tmp[0] = listing[i + 16];
            listing_tmp[1] = listing[i + 17];
            listing_tmp[2] = listing[i + 18];
            listing_tmp[3] = listing[i + 19];
            listing_tmp[4] = listing[i + 20];
            listing_tmp[5] = listing[i + 21];
            listing_tmp[6] = listing[i + 22];
            listing_tmp[7] = listing[i + 23];
            listing_tmp[8] = listing[i + 24];
            listing_tmp[9] = listing[i + 25];
            listing_tmp[10] = listing[i + 26];
            listing_tmp[11] = listing[i + 27];
            listing_tmp[12] = listing[i + 28];
            listing_tmp[13] = listing[i + 29];
            listing_tmp[14] = listing[i + 30];
            listing_tmp[15] = pas.System.Copy(listing[i + 2],1,5) + "(:TMP),y";
            listing_tmp[16] = listing[i + 31];
            listing_tmp[17] = "\tiny";
            listing_tmp[18] = listing[i + 33];
            listing_tmp[19] = listing[i + 34];
            listing_tmp[20] = pas.System.Copy(listing[i + 6],1,5) + "(:TMP),y";
            listing_tmp[21] = listing[i + 35];
            listing_tmp[22] = "\tiny";
            listing_tmp[23] = listing[i + 37];
            listing_tmp[24] = listing[i + 38];
            listing_tmp[25] = pas.System.Copy(listing[i + 10],1,5) + "(:TMP),y";
            listing_tmp[26] = listing[i + 39];
            listing_tmp[27] = "\tiny";
            listing_tmp[28] = listing[i + 41];
            listing_tmp[29] = listing[i + 42];
            listing_tmp[30] = pas.System.Copy(listing[i + 14],1,5) + "(:TMP),y";
            listing_tmp[31] = listing[i + 43];
            for (p = 0; p <= 31; p++) listing[i + p] = listing_tmp[p];
            listing[i + 32] = "";
            listing[i + 33] = "";
            listing[i + 34] = "";
            listing[i + 35] = "";
            listing[i + 36] = "";
            listing[i + 37] = "";
            listing[i + 38] = "";
            listing[i + 39] = "";
            listing[i + 40] = "";
            listing[i + 41] = "";
            listing[i + 42] = "";
            listing[i + 43] = "";
            return false;
          };
          if (STA_BP2_1(i + 23) && AND_ORA_EOR_BP2_Y(i + 38) && LDY(i) && (listing[i] === listing[i + 24]) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && STA_STACK(i + 11) && LDA_IM_0(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14) && ASL_A(i + 15) && ROL_STACK(i + 16) && ASL_A(i + 17) && ROL_STACK(i + 18) && ADD_SUB(i + 19) && STA_BP2(i + 20) && LDA_A(i + 21) && ADC_SBC_STACK(i + 22) && LDA_STACK(i + 25) && AND_ORA_EOR_BP2_Y(i + 26) && STA_A(i + 27) && INY(i + 28) && LDA_STACK(i + 29) && AND_ORA_EOR_BP2_Y(i + 30) && STA_A(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && AND_ORA_EOR_BP2_Y(i + 34) && STA_A(i + 35) && INY(i + 36) && LDA_STACK(i + 37) && STA_A(i + 39)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 25],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 29],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 33],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 37],6,256))) {
            listing[i + 20] = "\tsta :TMP";
            listing[i + 23] = "\tsta :TMP+1";
            listing[i + 25] = "\tlda (:bp2),y";
            listing[i + 26] = pas.System.Copy(listing[i + 26],1,5) + "(:TMP),y";
            listing[i + 29] = "\tlda (:bp2),y";
            listing[i + 30] = pas.System.Copy(listing[i + 26],1,5) + "(:TMP),y";
            listing[i + 33] = "\tlda (:bp2),y";
            listing[i + 34] = pas.System.Copy(listing[i + 26],1,5) + "(:TMP),y";
            listing[i + 37] = "\tlda (:bp2),y";
            listing[i + 38] = pas.System.Copy(listing[i + 26],1,5) + "(:TMP),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDY(i) && (listing[i] === listing[i + 18]) && LDA_BP2_Y(i + 1) && STA(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && STA(i + 11) && LDA_A(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA_A(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDA(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA(i + 22) && STA_BP2_Y(i + 23) && INY(i + 24) && LDA(i + 25) && STA_BP2_Y(i + 26) && INY(i + 27) && LDA(i + 28)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 25],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 28],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 13],6,256))) {
            listing[i] = listing[i + 12];
            listing[i + 1] = listing[i + 13];
            listing[i + 2] = "\tsta :TMP";
            listing[i + 3] = listing[i + 15];
            listing[i + 4] = listing[i + 16];
            listing[i + 5] = "\tsta :TMP+1";
            listing[i + 6] = "\tldy #$00";
            listing[i + 7] = "\tlda (:bp2),y";
            listing[i + 8] = "\tsta (:TMP),y";
            listing[i + 9] = "\tiny";
            listing[i + 10] = "\tlda (:bp2),y";
            listing[i + 11] = "\tsta (:TMP),y";
            listing[i + 12] = "\tiny";
            listing[i + 13] = "\tlda (:bp2),y";
            listing[i + 14] = "\tsta (:TMP),y";
            listing[i + 15] = "\tiny";
            listing[i + 16] = "\tlda (:bp2),y";
            listing[i + 17] = "\tsta (:TMP),y";
            listing[i + 18] = "";
            listing[i + 19] = "";
            listing[i + 20] = "";
            listing[i + 21] = "";
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            listing[i + 26] = "";
            listing[i + 27] = "";
            listing[i + 28] = "";
            listing[i + 29] = "";
            return false;
          };
          if (STA_BP2_Y(i + 18) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && MWY_BP2(i + 12) && LDY_IM(i + 13) && LDA_STACK(i + 14) && STA_BP2_Y(i + 15) && INY(i + 16) && LDA_STACK(i + 17) && (INY(i + 19) === false)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 17],6,256))) {
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY_IM(i + 7) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing_tmp[0] = listing[i + 6];
            listing_tmp[1] = listing[i + 7];
            listing_tmp[2] = listing[i];
            listing_tmp[3] = listing[i + 1];
            listing_tmp[4] = listing[i + 9];
            listing_tmp[5] = listing[i + 10];
            listing_tmp[6] = listing[i + 3];
            listing_tmp[7] = listing[i + 4];
            listing_tmp[8] = listing[i + 9];
            for (p = 0; p <= 8; p++) listing[i + p] = listing_tmp[p];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (STA_BP_Y(i + 12) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY_IM(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && LDY_STACK(i + 8) && STY_BP_1(i + 9) && LDY_STACK(i + 10) && LDA_STACK(i + 11)) if ((pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing[i + 8] = "\tldy " + pas.System.Copy(listing[i + 2],6,256);
            listing[i + 10] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY_IM(i + 5) && LDA(i + 6) && ADD_SUB_STACK(i + 7) && STA_BP2_Y(i + 8) && INY(i + 9) && LDA(i + 10) && ADC_SBC_STACK(i + 11)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            if (ADD_STACK(i + 7)) {
              listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256)}
             else listing[i + 7] = "\tsub " + pas.System.Copy(listing[i],6,256);
            if (ADC_STACK(i + 11)) {
              listing[i + 11] = "\tadc " + pas.System.Copy(listing[i + 2],6,256)}
             else listing[i + 11] = "\tsbc " + pas.System.Copy(listing[i + 2],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP_Y(i + 16) && LDA_A(i) && ADD_SUB(i + 1) && TAY(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && ADD_SUB(i + 10) && TAY(i + 11) && LDA(i + 12) && ADC_SBC(i + 13) && STA_BP_1(i + 14) && LDA_STACK(i + 15)) if ((pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (listing[i] === listing[i + 9]) && (listing[i + 1] === listing[i + 10]) && (listing[i + 3] === listing[i + 12]) && (listing[i + 4] === listing[i + 13])) {
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (STA_BP_1(i + 12) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && TAY(i + 3) && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && STA_BP_1(i + 7) && LDA_BP_Y(i + 8) && AND_ORA_EOR(i + 9) && STA_STACK(i + 10) && LDA_STACK(i + 11) && LDY_STACK(i + 13) && LDA_STACK(i + 14)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 2] = "";
            listing[i + 6] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_A(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_BP2_Y(i + 8) && LDY_STACK(i + 9)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i],6,256) === GetString$1(i + 6)) && (pas.System.Pos(listing[i],listing[i + 3]) > 0)) {
            listing[i + 9] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 10] = "\tsta (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_Y(i + 15) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDY(i + 6) && STY_BP_1(i + 7) && LDY(i + 8) && LDA_BP_Y(i + 9) && STA_STACK(i + 10) && LDY_STACK(i + 11) && STY_BP_1(i + 12) && LDY_STACK(i + 13) && LDA_STACK(i + 14)) if ((listing[i + 3] !== listing[i + 6]) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 15] = "\tsta (:bp2),y";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_Y(i + 15) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDY(i + 6) && STY_BP_1(i + 7) && LDY(i + 8) && LDA_BP_Y(i + 9) && STA_STACK(i + 10) && LDY_STACK(i + 11) && STY_BP_1(i + 12) && LDY_STACK(i + 13) && LDA_STACK(i + 14)) if ((listing[i + 3] === listing[i + 6]) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 14],6,256)) && (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 11] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 12] = "\tldy #$00";
            listing[i + 13] = "\tlda (:bp2),y";
            listing[i + 14] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 15] = "\tsta (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (STA_BP_Y(i + 14) && LDA_A(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_BP2_Y(i + 8) && STA_STACK(i + 9) && LDY_STACK(i + 10) && STY_BP_1(i + 11) && LDY_STACK(i + 12) && LDA_STACK(i + 13)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Pos(listing[i],listing[i + 3]) > 0) && (pas.System.Copy(listing[i],6,256) === GetString$1(i + 6))) {
            listing[i + 9] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 10] = "\tsta (:bp2),y";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i,i + 3) + GetWORD(i + 6,i + 9);
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex(p & 255,2);
            listing[i + 7] = listing[i + 1];
            listing[i + 9] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 10] = listing[i + 4];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_VAL(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i + 1,i + 4) + GetWORD(i + 6,i + 9);
            listing[i + 6] = "\tlda #$" + pas.SysUtils.IntToHex(p & 255,2);
            listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 9] = "\tlda #$" + pas.SysUtils.IntToHex((p >>> 8) & 255,2);
            listing[i + 10] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_Y(i + 9) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY(i + 6) && LDA_A(i + 7) && LDY_STACK(i + 8)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) {
            p = GetWORD(i,i + 3);
            listing[i + 8] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 9] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY(i + 6) && LDA_A(i + 7) && (ADD_SUB(i + 8) || AND_ORA_EOR(i + 8)) && LDY_STACK(i + 9)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
            p = GetWORD(i,i + 3);
            listing[i + 9] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 10] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 6) && STY_STACK(i) && LDA(i + 1) && ADD_SUB(i + 2) && ADD_SUB(i + 3) && STA(i + 4) && LDA_STACK(i + 5)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i] = "\tsty :bp+1";
            listing[i + 5] = "";
            listing[i + 6] = "";
            return false;
          };
          if (LDY_STACK(i + 7) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_BP_1(i + 4) && LDA(i + 5) && (IY(i + 5) === false) && ADD_SUB(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i + 1] = "\ttay";
            listing[i + 7] = "";
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_BP2_Y(i + 8) && LDY_STACK(i + 9)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 9],6,256)) {
            p = GetWORD(i,i + 3);
            listing[i + 9] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 10] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP2_Y(i + 7) && STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && (INY(i + 8) === false)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_1(i + 5) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_IM(i + 1) && STA_BP2(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC_IM_0(i + 4) && LDY_IM_0(i + 6)) {
            p = GetBYTE(i + 1);
            if (p <= 0xFC) {
              listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
              listing[i + 1] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 2] = "";
              listing[i + 3] = "";
              listing[i + 4] = "";
              listing[i + 5] = "";
              listing[i + 6] = "";
              return false;
            };
          };
          if (STA_BP2_1(i + 4) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && STA_BP2(i + 1) && (listing[i + 2] === (listing[i] + "+1")) && ADD_IM_0(i + 3) && LDY(i + 5)) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (STA_BP2_1(i + 3) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && STA_BP2(i + 1) && (listing[i + 2] === (listing[i] + "+1")) && LDY(i + 4)) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_1(i + 3) && LDA_ADR(i) && (IY(i) === false) && STA_BP2(i + 1) && LDA_ADR(i + 2) && (IY(i + 2) === false) && LDY(i + 4)) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && (listing[i + 1] === "\tsta :TMP") && (listing[i + 2] === (listing[i] + "+1")) && (listing[i + 3] === "\tsta :TMP+1") && LDY(i + 4)) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :TMP";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (LDY_VAL(i) && (LDY_IM(i) === false) && LDA_VAL(i + 1) && (LDA_IM(i + 1) === false) && STA_BP_1(i + 2) && LDA_BP_Y(i + 3) && MWY_BP2(i + 4)) if ((pas.System.Copy(listing[i],6,256) === GetString$1(i + 4)) && (("\tlda " + pas.System.Copy(listing[i],6,256) + "+1") === listing[i + 1])) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 1] = "\tldy #$00";
            listing[i + 2] = "\tlda (:bp2),y";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_Y(i + 8) && STA_STACK(i) && TAY(i + 1) && LDA(i + 2) && STA_BP2(i + 3) && LDA(i + 4) && STA_BP2_1(i + 5) && LDY(i + 6) && LDA_STACK(i + 7)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 7],6,256)) {
            listing[i] = "";
            listing[i + 7] = listing[i + 6];
            listing[i + 6] = "\ttya";
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && MWY_BP2(i + 2) && LDY(i + 3) && LDA_BP2_Y(i + 4) && LDY_STACK(i + 5)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 5] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 9) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && INY(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && INY(i + 8) && STA_STACK(i + 10) && LDA_STACK(i + 11) && ADD_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && ADC_STACK(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && ADC_STACK(i + 18) && STA_A(i + 19) && LDA_STACK(i + 20) && ADC_STACK(i + 21) && STA_A(i + 22)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 15],6,256)) && (pas.System.Copy(listing[i + 7],6,256) === pas.System.Copy(listing[i + 18],6,256)) && (pas.System.Copy(listing[i + 10],6,256) === pas.System.Copy(listing[i + 21],6,256))) {
            listing[i + 12] = "\tadd (:bp2),y+";
            listing[i + 15] = "\tadc (:bp2),y+";
            listing[i + 18] = "\tadc (:bp2),y+";
            listing[i + 21] = "\tadc (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (STA_BP2_1(i + 15) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_BP2(i + 13) && LDA_STACK(i + 14) && LDY_IM_0(i + 16)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 2] = listing[i + 13];
            listing[i + 5] = listing[i + 15];
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDA(i) && ADD_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_STACK(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            listing_tmp[0] = listing[i + 6];
            listing_tmp[1] = listing[i + 7];
            listing_tmp[2] = listing[i];
            listing_tmp[3] = listing[i + 1];
            listing_tmp[4] = listing[i + 9];
            listing_tmp[5] = listing[i + 10];
            listing_tmp[6] = listing[i + 3];
            listing_tmp[7] = listing[i + 4];
            listing_tmp[8] = listing[i + 12];
            listing[i] = listing_tmp[0];
            listing[i + 1] = listing_tmp[1];
            listing[i + 2] = listing_tmp[2];
            listing[i + 3] = listing_tmp[3];
            listing[i + 4] = listing_tmp[4];
            listing[i + 5] = listing_tmp[5];
            listing[i + 6] = listing_tmp[6];
            listing[i + 7] = listing_tmp[7];
            listing[i + 8] = listing_tmp[8];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            return false;
          };
          if (LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADD_STACK(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && ADC_STACK(i + 9) && STA_A(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 9],6,256))) {
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = listing[i + 5];
            listing[i + 5] = "\tadd (:bp2),y";
            listing[i + 6] = "\tiny";
            listing[i + 9] = "\tadc (:bp2),y";
            return false;
          };
          if (LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && ADC(i + 9) && STA_A(i + 10)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 4],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i + 1] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 8] = listing[i];
            return false;
          };
          if (STA_BP_1(i + 1) && LDA(i) && (IY(i) === false) && LDY(i + 2) && LDA_STA_BP(i + 3)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "\tsty :bp+1";
            return false;
          };
          if (STY_BP_1(i + 5) && MWY_BP2(i) && LDY(i + 1) && LDA_BP2_Y(i + 2) && STA_STACK(i + 3) && LDY_VAL(i + 4) && LDY_VAL(i + 6) && LDA_STA_BP(i + 7)) if ((pas.System.Copy(listing[i + 6],6,256) === GetString$1(i)) && ((listing[i + 6] + "+1") === listing[i + 4])) {
            listing[i + 4] = listing[i];
            listing[i + 5] = "\tldy #$00";
            listing[i + 6] = "";
            if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_A(i) && (listing[i] === listing[i + 8]) && ADD(i + 1) && (listing[i + 1] === listing[i + 9]) && TAY(i + 2) && LDA_A(i + 3) && (listing[i + 3] === listing[i + 11]) && ADC(i + 4) && (listing[i + 4] === listing[i + 12]) && LDA_STA_BP(i + 6) && STA_BP2(i + 10) && STA_BP2_1(i + 13)) {
            listing[i] = listing[i + 8];
            listing[i + 1] = listing[i + 9];
            listing[i + 2] = listing[i + 10];
            listing[i + 3] = listing[i + 11];
            listing[i + 4] = listing[i + 12];
            listing[i + 5] = listing[i + 13];
            listing[i + 8] = listing[i + 7];
            listing[i + 7] = listing[i + 6];
            if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
            listing[i + 6] = "\tldy #$00";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC_IM_0(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i] = "\tmwy " + pas.System.Copy(listing[i],6,256) + " :bp2";
            listing[i + 1] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
            return false;
          };
          if (STA_BP_1(i + 5) && (pas.System.Pos("\tlda <",listing[i]) > 0) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (pas.System.Pos("\tlda >",listing[i + 3]) > 0) && ADC_IM_0(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            listing[i] = "\tmwy #" + pas.System.Copy(listing[i],7,256) + " :bp2";
            listing[i + 1] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta (:bp2),y";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM(i) && ADD_IM(i + 1) && TAY(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && LDA_STA_BP(i + 6)) {
            p = GetWORD(i,i + 3) + GetWORD(i + 1,i + 4);
            if (LDA_BP_Y(i + 6)) listing[i + 6] = "\tlda $" + pas.SysUtils.IntToHex(p,4);
            if (STA_BP_Y(i + 7)) listing[i + 7] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && TAY(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && LDA_STA_BP(i + 6)) {
            p = GetWORD(i,i + 3);
            if (LDA_BP_Y(i + 6)) listing[i + 6] = "\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y";
            if (STA_BP_Y(i + 7)) listing[i + 7] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 2) && LDY_IM(i) && LDA_IM(i + 1) && LDA_STA_BP(i + 3)) {
            p = GetWORD(i,i + 1);
            if (LDA_BP_Y(i + 3)) listing[i + 3] = "\tlda $" + pas.SysUtils.IntToHex(p,4);
            if (STA_BP_Y(i + 4)) listing[i + 4] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            p = GetWORD(i,i + 3) + GetWORD(i + 6,i + 9);
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && (ADD_IM(i + 1) || SUB(i + 1)) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && (ADC_IM(i + 4) || SBC_IM(i + 4)) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            if (ADD_IM(i + 1)) {
              p = GetWORD(i + 1,i + 4) + GetWORD(i + 6,i + 9)}
             else p = GetWORD(i + 6,i + 9) - GetWORD(i + 1,i + 4);
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i],6,256);
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(i + 3) === false) && (IY(i + 3) === false) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM_0(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "\tsta :bp2";
            listing[i + 2] = "";
            listing[i + 4] = "\tsta :bp2+1";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta (:bp2),y";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(i + 3) === false) && (IY(i + 3) === false) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM_0(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 10] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = listing[i + 7];
            listing[i + 7] = "\tsta :bp2";
            listing[i + 8] = listing[i + 9];
            listing[i + 9] = listing[i + 10];
            listing[i + 10] = "\tsta :bp2+1";
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && ADD(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(+3) === false) && ADC(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM_0(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM_0(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 2] = "\tsta :bp2";
            listing[i + 5] = "\tsta :bp2+1";
            listing[i + 6] = "\tldy " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta (:bp2),y";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA(i) && (IY(i) === false) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_IM(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            p = GetWORD(i + 1,i + 4);
            if (SUB_IM(i + 1)) p = -p & 65535;
            listing[i + 6] = "\tldy " + pas.System.Copy(listing[i],6,256);
            if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y";
            if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 4) && ADD_IM(i) && STA_STACK(i + 1) && LDA_IM(i + 2) && ADC_IM_0(i + 3) && LDY_STACK(i + 5) && LDA_STA_BP(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            p = GetWORD(i,i + 2);
            listing[i] = "\ttay";
            if (LDA_BP_Y(i + 6)) listing[i + 6] = "\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y";
            if (STA_BP_Y(i + 7)) listing[i + 7] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) {
            p = GetWORD(i,i + 3);
            listing[i + 6] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            if (LDA_BP_Y(i + 7)) listing[i + 7] = "\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y";
            if (STA_BP_Y(i + 8)) listing[i + 8] = "\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (ADD_IM(i + 1) === false) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 7] = "\tsta :bp2";
            listing[i + 8] = listing[i + 9];
            listing[i + 9] = "\tadc #$00";
            listing[i + 10] = "\tsta :bp2+1";
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i],6,256);
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 7] = "\tsta :bp2";
            listing[i + 8] = listing[i + 9];
            listing[i + 9] = "\tadc #$00";
            listing[i + 10] = "\tsta :bp2+1";
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_VAL(i) && (LDA_IM(i) === false) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) {
            listing[i + 5] = listing[i + 6];
            listing[i + 6] = listing[i + 1];
            listing[i + 7] = "\tsta :bp2";
            listing[i + 8] = listing[i + 9];
            listing[i + 9] = "\tsbc #$00";
            listing[i + 10] = "\tsta :bp2+1";
            listing[i + 11] = "\tldy " + pas.System.Copy(listing[i],6,256);
            if (LDA_BP_Y(i + 12)) listing[i + 12] = "\tlda (:bp2),y";
            if (STA_BP_Y(i + 13)) listing[i + 13] = "\tsta (:bp2),y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          if (STA_BP_1(i + 4) && ADD_SUB(i) && (IY(i) === false) && (ADD_SUB_IM(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && ADC_SBC(i + 3) && LDY_STACK(i + 5) && LDA_STA_BP(i + 6)) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 5],6,256)) {
            listing[i + 1] = "\ttay";
            listing[i + 5] = "";
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA_A(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDY_IM_0(i + 18) && LDA_STACK(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA_STACK(i + 22) && STA_BP2_Y(i + 23) && INY(i + 24) && LDA_STACK(i + 25) && STA_BP2_Y(i + 26) && INY(i + 27) && LDA_STACK(i + 28)) if ((pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 19],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 22],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 25],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 28],6,256))) {
            listing_tmp[0] = listing[i + 12];
            listing_tmp[1] = listing[i + 13];
            listing_tmp[2] = listing[i + 14];
            listing_tmp[3] = listing[i + 15];
            listing_tmp[4] = listing[i + 16];
            listing_tmp[5] = listing[i + 17];
            listing_tmp[6] = listing[i + 18];
            listing_tmp[7] = listing[i];
            listing_tmp[8] = listing[i + 1];
            listing_tmp[9] = "\tsta (:bp2),y";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = listing[i + 3];
            listing_tmp[12] = listing[i + 4];
            listing_tmp[13] = "\tsta (:bp2),y";
            listing_tmp[14] = "\tiny";
            listing_tmp[15] = listing[i + 6];
            listing_tmp[16] = listing[i + 7];
            listing_tmp[17] = "\tsta (:bp2),y";
            listing_tmp[18] = "\tiny";
            listing_tmp[19] = listing[i + 9];
            listing_tmp[20] = listing[i + 10];
            listing_tmp[21] = "\tsta (:bp2),y";
            for (p = 0; p <= 21; p++) listing[i + p] = listing_tmp[p];
            listing[i + 22] = "";
            listing[i + 23] = "";
            listing[i + 24] = "";
            listing[i + 25] = "";
            listing[i + 26] = "";
            listing[i + 27] = "";
            listing[i + 28] = "";
            listing[i + 29] = "";
            return false;
          };
          if (STA_BP2_Y(i + 17) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_SUB(i + 7) && STA_BP2(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_BP2_1(i + 11) && LDY_IM_0(i + 12) && LDA_STACK(i + 13) && STA_BP2_Y(i + 14) && INY(i + 15) && LDA_STACK(i + 16)) if ((pas.System.Copy(listing[i + 2],6,256) !== pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 13],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 16],6,256))) {
            listing_tmp[0] = listing[i + 6];
            listing_tmp[1] = listing[i + 7];
            listing_tmp[2] = listing[i + 8];
            listing_tmp[3] = listing[i + 9];
            listing_tmp[4] = listing[i + 10];
            listing_tmp[5] = listing[i + 11];
            listing_tmp[6] = "\tldy #$00";
            listing_tmp[7] = listing[i];
            listing_tmp[8] = listing[i + 1];
            listing_tmp[9] = listing[i + 2];
            listing_tmp[10] = "\tsta (:bp2),y";
            listing_tmp[11] = "\tiny";
            listing_tmp[12] = listing[i + 3];
            listing_tmp[13] = listing[i + 4];
            listing_tmp[14] = listing[i + 5];
            listing_tmp[15] = "\tsta (:bp2),y";
            for (p = 0; p <= 15; p++) listing[i + p] = listing_tmp[p];
            listing[i + 16] = "";
            listing[i + 17] = "";
            return false;
          };
          if (STA_BP2_Y(i + 15) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && ADD(i + 5) && STA_BP2(i + 6) && LDA(i + 7) && ADC(i + 8) && STA_BP2_1(i + 9) && LDY_IM_0(i + 10) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 11] = listing[i];
            listing[i + 14] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_Y(i + 15) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && ADD(i + 5) && STA_BP2(i + 6) && LDA(i + 7) && ADC(i + 8) && STA_BP2_1(i + 9) && LDY_IM_0(i + 10) && LDA(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA(i + 14) && INY(i + 16) && LDA_STACK(i + 17) && STA_BP2_Y(i + 18) && INY(i + 19) && LDA_STACK(i + 20) && STA_BP2_Y(i + 21)) if ((pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 17],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 20],6,256))) {
            listing[i + 17] = listing[i];
            listing[i + 20] = listing[i + 2];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            return false;
          };
          if (STA_BP2_Y(i + 15) && MWY_BP2(i) && MWY_BP2(i + 9) && LDY(i + 1) && LDA_BP2_Y(i + 2) && INY(i + 3) && ADD_SUB(i + 4) && STA_STACK(i + 5) && LDA_BP2_Y(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDY(i + 10) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if ((listing[i] === listing[i + 9]) && (listing[i + 1] === listing[i + 10]) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 14],6,256))) {
            listing[i + 3] = listing[i + 4];
            listing[i + 4] = listing[i + 12];
            listing[i + 5] = listing[i + 13];
            listing[i + 8] = listing[i + 12];
            listing[i + 9] = "";
            listing[i + 10] = "";
            listing[i + 11] = "";
            listing[i + 12] = "";
            listing[i + 13] = "";
            listing[i + 14] = "";
            listing[i + 15] = "";
            return false;
          };
          if (LDA_BP2_Y(i + 8) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && STA(i + 6) && (IY(i + 6) === false) && INY(i + 7) && STA(i + 9) && (IY(i + 9) === false) && INY(i + 10) && LDA_BP2_Y(i + 11) && STA(i + 12) && (IY(i + 12) === false) && INY(i + 13) && LDA_BP2_Y(i + 14) && STA(i + 15) && (IY(i + 15) === false)) {
            p = GetWORD(i,i + 2);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tlda $" + pas.SysUtils.IntToHex(p,4);
            listing[i + 7] = "";
            listing[i + 8] = "\tlda $" + pas.SysUtils.IntToHex(p + 1,4);
            listing[i + 10] = "";
            listing[i + 11] = "\tlda $" + pas.SysUtils.IntToHex(p + 2,4);
            listing[i + 13] = "";
            listing[i + 14] = "\tlda $" + pas.SysUtils.IntToHex(p + 3,4);
            return false;
          };
          if (LDA_BP2_Y(i + 8) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && STA(i + 6) && (IY(i + 6) === false) && INY(i + 7) && STA(i + 9) && (IY(i + 9) === false) && (INY(i + 10) === false)) {
            p = GetWORD(i,i + 2);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "\tlda $" + pas.SysUtils.IntToHex(p,4);
            listing[i + 7] = "";
            listing[i + 8] = "\tlda $" + pas.SysUtils.IntToHex(p + 1,4);
            return false;
          };
          if (STA_BP2_Y(i + 9) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA(i + 5) && (IY(i + 5) === false) && STA_BP2_Y(i + 6) && INY(i + 7) && LDA(i + 8) && (IY(i + 8) === false) && INY(i + 10) && LDA(i + 11) && (IY(i + 11) === false) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA(i + 14) && (IY(i + 14) === false) && STA_BP2_Y(i + 15)) {
            p = GetWORD(i,i + 2);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 6] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i + 7] = "";
            listing[i + 9] = "\tsta $" + pas.SysUtils.IntToHex(p + 1,4);
            listing[i + 10] = "";
            listing[i + 12] = "\tsta $" + pas.SysUtils.IntToHex(p + 2,4);
            listing[i + 13] = "";
            listing[i + 15] = "\tsta $" + pas.SysUtils.IntToHex(p + 3,4);
            return false;
          };
          if (STA_BP2_Y(i + 9) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA(i + 5) && (IY(i + 5) === false) && STA_BP2_Y(i + 6) && INY(i + 7) && LDA(i + 8) && (IY(i + 8) === false) && (INY(i + 10) === false)) {
            p = GetWORD(i,i + 2);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 6] = "\tsta $" + pas.SysUtils.IntToHex(p,4);
            listing[i + 7] = "";
            listing[i + 9] = "\tsta $" + pas.SysUtils.IntToHex(p + 1,4);
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_VAL(i) && (IY(i) === false) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA_VAL(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM_0(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (IY(i + 1) === false) && TAY(i + 2) && LDA_VAL(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 4] = "\tadd " + pas.System.Copy(listing[i + 4],6,256);
            return false;
          };
          if (STA_BP_1(i + 9) && STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && ADD_STACK(i + 5) && TAY(i + 6) && LDA_IM_0(i + 7) && ADC_STACK(i + 8)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 8],6,256))) {
            listing[i] = listing[i + 6];
            listing[i + 3] = listing[i + 9];
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            listing[i + 7] = "";
            listing[i + 8] = "";
            listing[i + 9] = "";
            return false;
          };
          return Result;
        };
        function opt_BP_ADR(i) {
          var Result = false;
          var p = 0;
          var q = 0;
          var tmp = "";
          Result = true;
          if ((pas.System.Pos("\tlda <adr.",listing[i]) > 0) && ADD_STACK(i + 1) && TAY(i + 2) && (pas.System.Pos("\tlda >adr.",listing[i + 3]) > 0) && ADC_STACK(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && ADD_SUB(i + 7) && STA_BP_Y(i + 8)) {
            tmp = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (listing[p] === tmp) {
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3)) {
                  listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + ",y";
                  listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + ",y";
                  listing[i] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = listing[p - 2];
                  listing[i + 4] = listing[p - 1];
                  listing[i + 5] = "\ttay";
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + ",y";
                  listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + ",y";
                  listing[i] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = listing[p - 2];
                  listing[i + 4] = listing[p - 1];
                  listing[i + 5] = "\ttay";
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA(p - 1) && (LDA_STACK(p - 1) === false) && (LDA_IM(p - 1) === false) && LDA(p + 1) && ADD_SUB(p + 2) && STA_STACK(p + 3)) {
                  listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + ",y";
                  listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + ",y";
                  listing[i] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = listing[p - 1];
                  listing[i + 5] = "\ttay";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && ((LDA(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA(p + 1) && ADC(p + 2) && STA_STACK(p + 3)) {
                  if (LDA_IM(p - 2)) {
                    q = GetWORD(p - 2,p + 1);
                    listing[i + 4] = "\tldy " + pas.System.Copy(listing[p - 1],6,256);
                    listing[i + 5] = "";
                  } else {
                    q = GetWORD(p - 1,p + 2);
                    if (IY(p - 2) === false) {
                      listing[i + 4] = "\tldy " + pas.System.Copy(listing[p - 2],6,256);
                      listing[i + 5] = "";
                    } else {
                      listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
                      listing[i + 5] = "\ttay";
                    };
                  };
                  listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + "+$" + pas.SysUtils.IntToHex(q,2) + ",y";
                  listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + "+$" + pas.SysUtils.IntToHex(q,2) + ",y";
                  listing[i] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = "";
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA(p + 1) && SBC(p + 2) && STA_STACK(p + 3)) {
                  q = GetWORD(p - 1,p + 2);
                  if (IY(p - 2) === false) {
                    listing[i + 4] = "\tldy " + pas.System.Copy(listing[p - 2],6,256);
                    listing[i + 5] = "";
                  } else {
                    listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
                    listing[i + 5] = "\ttay";
                  };
                  listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + "-$" + pas.SysUtils.IntToHex(q,2) + ",y";
                  listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + "-$" + pas.SysUtils.IntToHex(q,2) + ",y";
                  listing[i] = "";
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = "";
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA_IM(p - 2) && SUB(p - 1) && (SUB_IM(p - 1) === false) && LDA(p + 1) && SBC(p + 2) && STA_STACK(p + 3)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                break;
              };
            };
            if (Result === false) return false;
          };
          if ((pas.System.Pos("\tlda <adr.",listing[i]) > 0) && ADD_IM(i + 1) && TAY(i + 2) && (pas.System.Pos("\tlda >adr.",listing[i + 3]) > 0) && ADC_IM(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && ADD_SUB(i + 7) && STA_BP_Y(i + 8)) {
            q = GetWORD(i + 1,i + 4);
            listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + "+$" + pas.SysUtils.IntToHex(q,2);
            listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + "+$" + pas.SysUtils.IntToHex(q,2);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((pas.System.Pos("\tlda <adr.",listing[i]) > 0) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (ADD_IM(i + 1) === false) && TAY(i + 2) && (pas.System.Pos("\tlda >adr.",listing[i + 3]) > 0) && ADC_IM(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && ADD_SUB(i + 7) && STA_BP_Y(i + 8)) {
            listing[i + 5] = "\tldy " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 6] = "\tlda " + pas.System.Copy(listing[i],7,256) + ",y";
            listing[i + 8] = "\tsta " + pas.System.Copy(listing[i],7,256) + ",y";
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            return false;
          };
          return Result;
        };
        function opt_BP2_ADR(i) {
          var Result = false;
          var p = 0;
          var q = 0;
          var tmp = "";
          Result = true;
          if (LDA_VAL(i) && ADD_STACK(i + 1) && STA_BP2(i + 2) && LDA_VAL(i + 3) && ADC_STACK(i + 4) && STA_BP2_1(i + 5) && LDY_IM_0(i + 6)) {
            tmp = "\tsta " + pas.System.Copy(listing[i + 1],6,256);
            if (LDA_IM_0(i) && LDA_IM_0(i + 3)) {
              listing[i] = "";
              listing[i + 1] = "\tlda " + pas.System.Copy(listing[i + 1],6,256);
              listing[i + 3] = "";
              listing[i + 4] = "\tlda " + pas.System.Copy(listing[i + 4],6,256);
            };
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (listing[p] === tmp) {
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1) && LDA(p + 1) && ADC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  q = GetWORD(p - 1,p + 2);
                  q = q * 4;
                  if (q <= (256 - 4)) {
                    listing[i + 6] = "\tldy #$" + pas.SysUtils.IntToHex(q,2);
                    listing[p - 1] = "";
                    listing[p + 2] = "";
                    Result = false;
                    break;
                  };
                };
                if ((p > 1) && LDA_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA_IM(p + 1) && ADC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  q = GetWORD(p - 2,p + 1);
                  q = q * 4;
                  if (q <= (256 - 4)) {
                    listing[i + 6] = "\tldy #$" + pas.SysUtils.IntToHex(q,2);
                    listing[p - 2] = "";
                    listing[p - 1] = "\tlda " + pas.System.Copy(listing[p - 1],6,256);
                    listing[p + 2] = "";
                    Result = false;
                    break;
                  };
                };
                break;
              } else if (onBreak(p)) break;
            };
            if (Result === false) return false;
            for (var $l1 = i - 1; $l1 >= 0; $l1--) {
              p = $l1;
              if (listing[p] === tmp) {
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1) && LDA(p + 1) && ADC_IM_0(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = GetWORD(p - 1,p + 2);
                  q = q * 2;
                  if (q <= (256 - 2)) {
                    listing[i + 6] = "\tldy #$" + pas.SysUtils.IntToHex(q,2);
                    listing[p - 1] = "";
                    listing[p + 2] = "";
                    Result = false;
                    break;
                  };
                };
                if ((p > 1) && LDA_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA_IM_0(p + 1) && ADC_IM_0(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = GetWORD(p - 2,p + 1);
                  q = q * 2;
                  if (q <= (256 - 2)) {
                    listing[i + 6] = "\tldy #$" + pas.SysUtils.IntToHex(q,2);
                    listing[p - 2] = "";
                    listing[p - 1] = "\tlda " + pas.System.Copy(listing[p - 1],6,256);
                    listing[p + 2] = "";
                    Result = false;
                    break;
                  };
                };
                break;
              } else if (onBreak(p)) break;
            };
            if (Result === false) return false;
            if (Result === false) return false;
          };
          return Result;
        };
        function opt_ADR(i) {
          var Result = false;
          var p = 0;
          var q = 0;
          var tmp = "";
          Result = true;
          if (LDA_STACK(i) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            tmp = "\tsta " + pas.System.Copy(listing[i],6,256);
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (listing[p] === tmp) {
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\tasl @";
                  listing[i + 4] = "\ttay";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && AND_ORA_EOR(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\tasl @";
                  listing[i + 4] = "\ttay";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA_VAL(p - 3) && (LDA_IM(p - 3) === false) && ADD_SUB(p - 2) && AND_ORA_EOR(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\tasl @";
                  listing[i + 4] = "\ttay";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\tasl @";
                  listing[i + 4] = "\ttay";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\tasl @";
                  listing[i + 4] = "\ttay";
                  listing[i + 5] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  listing[p + 7] = "\tsta #$00";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && ((LDA(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA_A(p + 1) && ADC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  if (LDA_IM(p - 2)) {
                    q = GetWORD(p - 2,p + 1);
                    listing[i] = "\tlda " + pas.System.Copy(listing[p - 1],6,256);
                  } else {
                    q = GetWORD(p - 1,p + 2);
                    listing[i] = "\tlda " + pas.System.Copy(listing[p - 2],6,256);
                  };
                  q = q * 4;
                  listing[i + 1] = "\tasl @";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  LDA_STA_ADR(i,q,"+");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  listing[p + 7] = "\tsta #$00";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA_A(p + 1) && SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  q = GetWORD(p - 1,p + 2);
                  listing[i] = "\tlda " + pas.System.Copy(listing[p - 2],6,256);
                  q = q * 4;
                  listing[i + 1] = "\tasl @";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "";
                  listing[p + 6] = "";
                  listing[p + 7] = "\tsta #$00";
                  Result = false;
                  break;
                };
                break;
              };
            };
            if (Result === false) return false;
            for (var $l1 = i - 1; $l1 >= 0; $l1--) {
              p = $l1;
              if (listing[p] === tmp) {
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && AND_ORA_EOR(p - 1) && (AND_ORA_EOR_STACK(p - 1) === false) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA(p - 3) && (LDA_STACK(p - 3) === false) && ADD_SUB_VAL(p - 2) && AND_ORA_EOR(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  listing[i + 1] = "";
                  listing[i + 2] = "\tasl @";
                  listing[i + 3] = "\ttay";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "\tsta #$00";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_STACK(p - 2) && (pas.System.Copy(listing[p - 2],6,256) === pas.System.Copy(listing[p],6,256)) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = GetWORD(p - 1,p + 2);
                  listing[i] = "\tlda " + pas.System.Copy(listing[p],6,256);
                  q = q * 2;
                  listing[i + 1] = "\tasl @";
                  listing[i + 2] = "\ttay";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "\tsta #$00";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_A(p - 2) === false) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = GetWORD(p - 1,p + 2);
                  listing[i] = "\tlda " + pas.System.Copy(listing[p],6,256);
                  q = q * 2;
                  listing[i + 1] = "\tasl @";
                  listing[i + 2] = "\ttay";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "\tsta #$00";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && ((LDA(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA_A(p + 1) && ADC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  if (LDA_IM(p - 2)) {
                    q = GetWORD(p - 2,p + 1);
                    listing[i] = "\tlda " + pas.System.Copy(listing[p - 1],6,256);
                  } else {
                    q = GetWORD(p - 1,p + 2);
                    listing[i] = "\tlda " + pas.System.Copy(listing[p - 2],6,256);
                  };
                  q = q * 2;
                  listing[i + 1] = "\tasl @";
                  listing[i + 2] = "\ttay";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  LDA_STA_ADR(i,q,"+");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "\tsta #$00";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA_A(p + 1) && SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = GetWORD(p - 1,p + 2);
                  listing[i] = "\tlda " + pas.System.Copy(listing[p - 2],6,256);
                  q = q * 2;
                  listing[i + 1] = "\tasl @";
                  listing[i + 2] = "\ttay";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[p + 4] = "";
                  listing[p + 5] = "\tsta #$00";
                  Result = false;
                  break;
                };
                break;
              };
            };
            if (Result === false) return false;
            for (var $l2 = i - 1; $l2 >= 0; $l2--) {
              p = $l2;
              if (listing[p] === tmp) {
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ((LDA_A(p - 3) === false) || (LDA_A(p - 3) && (LDA_STACK(p - 3) === false) && (LDA_IM(p - 3) === false))) && SUB_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && ADC(p + 2) && STA_STACK(p + 3) && (ADC(p + 5) === false)) {
                  q = GetBYTE(p - 2);
                  LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = "";
                  if (LDA_EAX_1(p + 1) && ADD_EAX(p - 1)) {
                    listing[p - 1] = "\tadd " + pas.System.Copy(listing[p - 3],6,256);
                    listing[p - 3] = "\tlda :eax";
                  };
                  Result = false;
                  break;
                };
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ((LDA_A(p - 3) === false) || (LDA_A(p - 3) && (LDA_STACK(p - 3) === false) && (LDA_IM(p - 3) === false))) && ADD_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && ADC(p + 2) && STA_STACK(p + 3) && (ADC(p + 5) === false)) {
                  q = GetBYTE(p - 2);
                  LDA_STA_ADR(i,q,"+");
                  listing[p - 2] = "";
                  if (LDA_EAX_1(p + 1) && ADD_EAX(p - 1)) {
                    listing[p - 1] = "\tadd " + pas.System.Copy(listing[p - 3],6,256);
                    listing[p - 3] = "\tlda :eax";
                  };
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA_VAL(p - 3) && (LDA_IM(p - 3) === false) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && ROL_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 2],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  listing[p - 2] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && ASL_A(p - 2) && ROL_STACK(p - 1)) if (pas.System.Copy(listing[p - 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
                  listing[p - 1] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_STACK(p - 2) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 2],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  q = GetWORD(p - 1,p + 2);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && ROL_STACK(p - 3) && ADD_SUB_VAL(p - 2) && (ADD_SUB_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  listing[p - 3] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_STACK(p - 3) && ADD_SUB_IM(p - 2) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  q = GetBYTE(p - 2);
                  if (ADD_IM(p - 2)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 3] = "";
                  listing[p - 2] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 4) && ROL_A(p - 5) && STA_STACK(p - 4) && LDA_A(p - 3) && (LDA_IM(p - 3) === false) && AND_ORA_EOR(p - 2) && ADD_SUB(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 4],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && ROL_A(p - 4) && STA_STACK(p - 3) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_STACK(p - 4) && ROL_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  listing[p - 3] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_STACK(p - 4) && ROL_STACK(p - 3) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_STACK(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  listing[p - 3] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 3) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_A(p - 4) && STA_STACK(p - 3) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256)) {
                  q = GetWORD(p - 1,p + 2);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 1] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA_VAL(p - 3) && (LDA_IM(p - 3) === false) && AND_ORA_EOR(p - 2) && (AND_ORA_EOR_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && ((LDA_A(p - 2) === false) || (LDA_VAL(p - 2) && (LDA_IM(p - 2) === false))) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA_A(p + 1) && ADD_SUB(p + 2) && STA_STACK(p + 3) && (listing[i + 3] === listing[p + 3]) && (ADC_SBC(p + 5) === false)) {
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && (LDA_IM(p + 1) === false) && ASL_STACK(p + 2) && (pas.System.Copy(listing[p],6,256) === pas.System.Copy(listing[p + 2],6,256)) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 5) && LDY_IM_0(p - 6) && LDA(p - 5) && SPL(p - 4) && DEY(p - 3) && STY_STACK(p - 2) && ADD_SUB(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  listing[p - 2] = "\tsty #$00";
                  Result = false;
                  break;
                };
                if ((p > 4) && LDY_IM_0(p - 5) && LDA(p - 4) && SPL(p - 3) && DEY(p - 2) && ADD_SUB(p - 1) && TYA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  listing[p - 5] = "";
                  listing[p - 3] = "";
                  listing[p - 2] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_A(p - 8) === false) && ADD_SUB(p - 7) && (ADD_SUB_IM(p - 7) === false) && STA_STACK(p - 6) && LDA_STACK(p - 5) && ADC_SBC(p - 4) && STA_STACK(p - 3) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if (pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 1],6,256)) {
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  listing[p - 3] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && ADD_SUB_IM(p - 7) && STA_STACK(p - 6) && LDA(p - 5) && ADC_SBC_IM(p - 4) && STA_STACK(p - 3) && LDA_VAL(p - 2) && SUB_STACK(p - 1) && LDA_A(p + 1) && SBC_STACK(p + 2) && STA_STACK(p + 3) && (SBC(p + 5) === false)) if ((pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 2],6,256))) {
                  q = GetWORD(p - 7,p - 4);
                  if (ADD_IM(p - 7)) {
                    LDA_STA_ADR(i,q,"-")}
                   else LDA_STA_ADR(i,q,"+");
                  listing[p - 1] = "\tsub " + pas.System.Copy(listing[p - 8],6,256);
                  listing[p + 2] = "\tsbc " + pas.System.Copy(listing[p - 5],6,256);
                  listing[p - 8] = "";
                  listing[p - 7] = "";
                  listing[p - 6] = "";
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && ADD_SUB_IM(p - 7) && STA_STACK(p - 6) && LDA(p - 5) && ADC_SBC_IM(p - 4) && STA_STACK(p - 3) && LDA_VAL(p - 2) && ADD_STACK(p - 1) && LDA_A(p + 1) && ADC_STACK(p + 2) && STA_STACK(p + 3) && (ADC(p + 5) === false)) if ((pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 1],6,256)) && (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 2],6,256))) {
                  q = GetWORD(p - 7,p - 4);
                  if (ADD_IM(p - 7)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 1] = "\tadd " + pas.System.Copy(listing[p - 8],6,256);
                  listing[p + 2] = "\tadc " + pas.System.Copy(listing[p - 5],6,256);
                  listing[p - 8] = "";
                  listing[p - 7] = "";
                  listing[p - 6] = "";
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && (LDA_IM(p - 8) === false) && ADD_SUB_IM(p - 7) && STA_STACK(p - 6) && LDA(p - 5) && ADC_SBC_IM(p - 4) && STA_STACK(p - 3) && LDA_STACK(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && (ADD_IM(p - 1) === false) && LDA_A(p + 1) && ADC(p + 2) && (ADC_STACK(p + 2) === false) && (ADC_IM(p + 2) === false) && STA_STACK(p + 3) && (ADC(p + 5) === false)) if ((pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 2],6,256)) && (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256))) {
                  q = GetWORD(p - 7,p - 4);
                  if (ADD_IM(p - 7)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = listing[p - 8];
                  listing[p + 1] = listing[p - 5];
                  listing[p - 8] = "";
                  listing[p - 7] = "";
                  listing[p - 6] = "";
                  listing[p - 5] = "";
                  listing[p - 4] = "";
                  listing[p - 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && (LDA_IM(p - 8) === false) && ADD(p - 7) && (ADD_STACK(p - 7) === false) && (ADD_IM(p - 7) === false) && STA_STACK(p - 6) && LDA(p - 5) && ADC(p - 4) && (ADC_STACK(p - 4) === false) && (ADC_IM(p - 4) === false) && STA_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if ((pas.System.Copy(listing[p - 6],6,256) === pas.System.Copy(listing[p - 2],6,256)) && (pas.System.Copy(listing[p - 3],6,256) === pas.System.Copy(listing[p + 3],6,256))) {
                  q = GetWORD(p - 1,p + 2);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (ADD_SUB(p - 7) === false) && (ADC_SBC(p - 4) === false) && LDA_STACK(p - 2) && ADD_SUB_IM(p - 1) && LDA_STACK(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  q = GetWORD(p - 1,p + 2);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  listing[p - 1] = "";
                  listing[p + 2] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && (IY(p - 2) === false) && ((LDA_A(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA_VAL(p + 1) && ADC(p + 2) && (ADC_STACK(p + 2) === false) && STA_STACK(p + 3) && (ADC(p + 5) === false)) {
                  if (LDA_IM(p - 2)) {
                    q = GetWORD(p - 2,p + 1);
                    listing[i] = "\tldy " + pas.System.Copy(listing[p - 1],6,256);
                    listing[i + 1] = "";
                  } else {
                    q = GetWORD(p - 1,p + 2);
                    listing[i] = "\tldy " + pas.System.Copy(listing[p - 2],6,256);
                    listing[i + 1] = "";
                  };
                  listing[i + 2] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  LDA_STA_ADR(i,q,"+");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && (IY(p - 2) === false) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA_A(p + 1) && SBC_IM(p + 2) && STA_STACK(p + 3) && (SBC(p + 5) === false)) {
                  q = GetWORD(p - 1,p + 2);
                  listing[i] = "\tldy " + pas.System.Copy(listing[p - 2],6,256);
                  listing[i + 1] = "";
                  listing[i + 2] = "";
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  LDA_STA_ADR(i,q,"-");
                  listing[p - 2] = "";
                  listing[p - 1] = "";
                  listing[p] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA_IM(p - 2) && SUB(p - 1) && (SUB_IM(p - 1) === false) && LDA_A(p + 1) && SBC(p + 2) && STA_STACK(p + 3) && (SBC(p + 5) === false)) {
                  listing[i + 3] = "";
                  listing[i + 4] = "";
                  listing[i + 5] = "";
                  listing[p + 1] = "";
                  listing[p + 2] = "";
                  listing[p + 3] = "";
                  Result = false;
                  break;
                };
                break;
              } else if (listing[p] === ("\tasl " + pas.System.Copy(listing[i],6,256))) break;
            };
            if (Result === false) return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && (ADD_STACK(i + 1) === false) && TAY(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_IM(i) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            listing[i] = "\tldy " + pas.System.Copy(listing[i],6,256);
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            q = GetBYTE(i);
            if (LDA_ADR_Y(i + 6)) {
              pas.System.Delete({a: i + 6, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 6]),2);
              if (q !== 0) listing[i + 6] = listing[i + 6] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            if (STA_ADR_Y(i + 7)) {
              pas.System.Delete({a: i + 7, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 7]),2);
              if (q !== 0) listing[i + 7] = listing[i + 7] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            listing[i] = "";
            if ((LDA_ADR(i + 8) === false) && (STA_ADR(i + 9) === false)) return false;
            if (LDA_ADR_Y(i + 8)) {
              pas.System.Delete({a: i + 8, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 8]),2);
              if (q !== 0) listing[i + 8] = listing[i + 8] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            if (STA_ADR_Y(i + 9)) {
              pas.System.Delete({a: i + 9, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 9]),2);
              if (q !== 0) listing[i + 9] = listing[i + 9] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            if ((LDA_ADR(i + 10) === false) && (STA_ADR(i + 11) === false)) return false;
            if (LDA_ADR_Y(i + 10)) {
              pas.System.Delete({a: i + 10, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 10]),2);
              if (q !== 0) listing[i + 10] = listing[i + 10] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            if (STA_ADR_Y(i + 11)) {
              pas.System.Delete({a: i + 11, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 11]),2);
              if (q !== 0) listing[i + 11] = listing[i + 11] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            if ((LDA_ADR(i + 12) === false) && (STA_ADR(i + 13) === false)) return false;
            if (LDA_ADR_Y(i + 12)) {
              pas.System.Delete({a: i + 12, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 12]),2);
              if (q !== 0) listing[i + 12] = listing[i + 12] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            if (STA_ADR_Y(i + 13)) {
              pas.System.Delete({a: i + 13, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",listing[i + 13]),2);
              if (q !== 0) listing[i + 13] = listing[i + 13] + "+$" + pas.SysUtils.IntToHex(q,2);
            };
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && (LDA_IM(i) === false) && (LDA_STACK(i) === false) && ADD_IM(i + 1) && TAY(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_VAL(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            q = GetWORD(i + 1,i + 4);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            listing[i + 7] = "\tadd " + pas.System.Copy(listing[i],6,256);
            listing[i + 10] = "\tadc " + pas.System.Copy(listing[i + 3],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (ADD_IM(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 1) === false) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            q = GetWORD(i,i + 3);
            LDA_STA_ADR(i + 12,q,"+");
            listing[i + 7] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 10] = "\tadc " + pas.System.Copy(listing[i + 4],6,256);
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_VAL(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && (ADD_STACK(i + 7) === false) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC(i + 10) && (ADC_STACK(i + 10) === false) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if ((pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            q = GetWORD(i + 1,i + 4);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            listing[i + 6] = listing[i];
            listing[i + 9] = listing[i + 3];
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_STACK(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            q = GetWORD(i + 1,i + 4);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 12) || STA_ADR(i + 13)) && (IY(i + 12) || IY(i + 13)) && LDA_STACK(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM_0(i + 7) && TAY(i + 8) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA_STACK(i + 11)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256))) {
            q = GetWORD(i + 1,i + 4);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 6,q,"+")}
             else LDA_STA_ADR(i + 6,q,"-");
            listing[i] = "";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && STY_STACK(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 2],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 5],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256)) && (pas.System.Copy(listing[i + 6],6,256) === pas.System.Copy(listing[i + 8],6,256)) && (pas.System.Copy(listing[i + 8],6,256) === pas.System.Copy(listing[i + 12],6,256)) && (pas.System.Copy(listing[i + 9],6,256) === pas.System.Copy(listing[i + 11],6,256)) && (pas.System.Copy(listing[i + 11],6,256) === pas.System.Copy(listing[i + 15],6,256))) {
            q = GetWORD(i + 1,i + 4);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            listing[i] = "\tsty #$00";
            listing[i + 1] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            return false;
          };
          return Result;
        };
        function opt_FORTMP(i) {
          var Result = false;
          var tmp = "";
          Result = true;
          if ((pas.System.Pos("sta @FORTMP_",listing[i + 1]) > 0) && LDA_IM(i)) {
            listing[i + 1] = "\tmva " + pas.System.Copy(listing[i],6,4) + " " + pas.System.Copy(listing[i + 1],6,256);
            listing[i] = "";
            return false;
          };
          if ((pas.System.Pos("sta @FORTMP_",listing[i + 1]) > 0) && LDA_ADR(i) && (IY(i) === false)) {
            listing[i + 1] = "\tmva " + pas.System.Copy(listing[i],6,256) + " " + pas.System.Copy(listing[i + 1],6,256);
            listing[i] = "";
            return false;
          };
          if (pas.System.Pos("@FORTMP_",listing[i]) === 0) {
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && MVA_IM(i + 3) && (STA(i + 4) === false)) if ((pas.System.Copy(listing[i],6,4) === pas.System.Copy(listing[i + 1],6,4)) && (pas.System.Copy(listing[i + 1],6,4) === pas.System.Copy(listing[i + 2],6,4)) && (pas.System.Copy(listing[i + 2],6,4) === pas.System.Copy(listing[i + 3],6,4))) {
              listing[i + 1] = "\tsta" + pas.System.Copy(listing[i + 1],10,256);
              listing[i + 2] = "\tsta" + pas.System.Copy(listing[i + 2],10,256);
              listing[i + 3] = "\tsta" + pas.System.Copy(listing[i + 3],10,256);
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && MVA_IM(i + 3) && (STA(i + 4) === false)) if ((pas.System.Copy(listing[i],6,4) === pas.System.Copy(listing[i + 3],6,4)) && (pas.System.Copy(listing[i],6,4) !== pas.System.Copy(listing[i + 1],6,4)) && (pas.System.Copy(listing[i + 1],6,4) !== pas.System.Copy(listing[i + 2],6,4)) && (pas.System.Copy(listing[i + 2],6,4) !== pas.System.Copy(listing[i + 3],6,4))) {
              tmp = listing[i];
              listing[i] = listing[i + 1];
              listing[i + 1] = listing[i + 2];
              listing[i + 2] = tmp;
              listing[i + 3] = "\tsta" + pas.System.Copy(listing[i + 3],10,256);
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && (STA(i + 3) === false)) if ((pas.System.Copy(listing[i],6,4) === pas.System.Copy(listing[i + 1],6,4)) && (pas.System.Copy(listing[i + 1],6,4) === pas.System.Copy(listing[i + 2],6,4))) {
              listing[i + 1] = "\tsta" + pas.System.Copy(listing[i + 1],10,256);
              listing[i + 2] = "\tsta" + pas.System.Copy(listing[i + 2],10,256);
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && (STA(i + 3) === false)) if ((pas.System.Copy(listing[i],6,4) === pas.System.Copy(listing[i + 2],6,4)) && (pas.System.Copy(listing[i],6,4) !== pas.System.Copy(listing[i + 1],6,4))) {
              tmp = listing[i];
              listing[i] = listing[i + 1];
              listing[i + 1] = tmp;
              listing[i + 2] = "\tsta" + pas.System.Copy(listing[i + 2],10,256);
              return false;
            };
            if (MVA_IM(i) && STA(i + 1) && MVA_IM(i + 2) && (STA(i + 3) === false)) if (pas.System.Copy(listing[i],6,4) === pas.System.Copy(listing[i + 2],6,4)) {
              listing[i + 2] = "\tsta" + pas.System.Copy(listing[i + 2],10,256);
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && (STA(i + 2) === false)) if (pas.System.Copy(listing[i],6,4) === pas.System.Copy(listing[i + 1],6,4)) {
              listing[i + 1] = "\tsta" + pas.System.Copy(listing[i + 1],10,256);
              return false;
            };
          };
          return Result;
        };
        function PeepholeOptimization() {
          var Result = false;
          var i = 0;
          Result = true;
          Rebuild();
          for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
            i = $l;
            if (opt_FORTMP(i) === false) {
              Result = false;
              break;
            };
            if ((i === (l - 1)) && (STA_STACK(i) || STY_STACK(i) || LDA_A(i) || LDY(i) || AND_ORA_EOR(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i) || ADC(i) || SBC(i))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 2)) && SKIP(i + 1) && STA_STACK(i)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 2)) && JMP(i + 1) && (STA_STACK(i) || STY_STACK(i) || LDA_A(i) || LDY(i) || AND_ORA_EOR(i) || INY(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i) || ADC(i) || SBC(i))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 2)) && STA_im_0(i) && INY(i + 1)) {
              listing[i] = "";
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((i === (l - 3)) && (LDA_VAL(i + 1) || TYA(i + 1)) && STA_A(i + 2) && (LDA_A(i) || AND_ORA_EOR(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 3)) && STA_STACK(i) && (JNE(i + 1) || JEQ(i + 1)) && (LAB_L(i + 2) || LAB_B(i + 2))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 3)) && INY(i) && AND_ORA_EOR(i + 1) && (IY(i + 1) === false) && STA_A(i + 2) && (IY(i + 2) === false)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 4)) && LDA_VAL(i + 1) && STA_A(i + 2) && STA_A(i + 3) && (LDA_A(i) || AND_ORA_EOR(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i))) {
              listing[i] = "";
              Result = false;
              break;
            };
            if ((i === (l - 4)) && LDA_STACK(i) && STA_STACK(i + 1) && (LDA_VAL(i + 2) || TYA(i + 2)) && STA_A(i + 3)) {
              listing[i] = "";
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((i === (l - 4)) && INY(i) && LDA_A(i + 1) && (IY(i + 1) === false) && AND_ORA_EOR(i + 2) && (IY(i + 2) === false) && STA_A(i + 3) && (IY(i + 3) === false)) {
              listing[i] = "";
              Result = false;
              break;
            };
            if (LDA_VAL(i) && AND_IM(i + 1) && (listing[i + 2] === "\tjsr #$00") && LDA_IM_0(i + 3) && STA_STACK(i + 4) && (listing[i + 5] === "\tlda @BYTE.MOD.RESULT")) {
              listing[i + 2] = listing[i + 4];
              listing[i + 3] = "";
              listing[i + 4] = listing[i];
              listing[i + 5] = listing[i + 1];
              listing[i] = "";
              listing[i + 1] = "\tlda #$00";
              Result = false;
              break;
            };
            if ((listing[i] === "\tjsr #$00") && (listing[i + 1] === "\tlda @BYTE.MOD.RESULT")) {
              listing[i] = "";
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if ((listing[i] === "\tjsr #$00") && (listing[i + 1] === "\tldy @BYTE.MOD.RESULT")) {
              listing[i] = "\ttay";
              listing[i + 1] = "";
              Result = false;
              break;
            };
            if (opt_STA_0(i) === false) {
              Result = false;
              break;
            };
            if (opt_LDA(i) === false) {
              Result = false;
              break;
            };
            if (opt_TAY(i) === false) {
              Result = false;
              break;
            };
            if (opt_LDY(i) === false) {
              Result = false;
              break;
            };
            if (opt_BP(i) === false) {
              Result = false;
              break;
            };
            if (opt_AND(i) === false) {
              Result = false;
              break;
            };
            if (opt_ORA(i) === false) {
              Result = false;
              break;
            };
            if (opt_EOR(i) === false) {
              Result = false;
              break;
            };
            if (opt_NOT(i) === false) {
              Result = false;
              break;
            };
            if (opt_ADD(i) === false) {
              Result = false;
              break;
            };
            if (opt_SUB(i) === false) {
              Result = false;
              break;
            };
            if (opt_LSR(i) === false) {
              Result = false;
              break;
            };
            if (opt_ASL(i) === false) {
              Result = false;
              break;
            };
            if (opt_SPL(i) === false) {
              Result = false;
              break;
            };
            if (opt_ADR(i) === false) {
              Result = false;
              break;
            };
            if (opt_BP_ADR(i) === false) {
              Result = false;
              break;
            };
            if (opt_BP2_ADR(i) === false) {
              Result = false;
              break;
            };
            if (opt_POKE(i) === false) {
              Result = false;
              break;
            };
            if (pas.Common.target.cpu !== pas.Common.TCPU.CPU_6502) {
              if (opt_STZ(i) === false) {
                Result = false;
                break;
              };
            };
          };
          return Result;
        };
        do {
        } while (!PeepholeOptimization());
        while (RemoveUnusedSTACK()) do {
        } while (!PeepholeOptimization());
        do {
        } while (!PeepholeOptimization_STA());
        while (RemoveUnusedSTACK()) do {
        } while (!PeepholeOptimization());
        do {
        } while (!PeepholeOptimization_END());
        while (RemoveUnusedSTACK()) do {
        } while (!PeepholeOptimization());
      };
      function OptimizeRelation() {
        var Result = false;
        var i = 0;
        var p = 0;
        var tmp = "";
        var yes = false;
        Result = true;
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.System.Pos("@+",listing[i]) > 0) break;
          if (listing[i] === "@") listing[i] = "";
        };
        Rebuild();
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (CMP(i) && LAB_A(i + 1) && (JEQ(i + 2) || JNE(i + 2)) && LAB_A(i + 3)) {
            listing[i + 3] = "";
            Result = false;
            break;
          };
          if (LDA_IM(i) && ADD_IM(i + 1) && STA(i + 2) && (ADC(i + 4) === false)) {
            p = GetBYTE(i) + GetBYTE(i + 1);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            Result = false;
            break;
          };
          if (LDA_IM(i) && SUB_IM(i + 1) && STA(i + 2) && (SBC(i + 4) === false)) {
            p = GetBYTE(i) - GetBYTE(i + 1);
            listing[i] = "\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2);
            listing[i + 1] = "";
            Result = false;
            break;
          };
          if (LDA(i) && LDY_1(i + 1) && (listing[i + 2] === "\tand #$00") && BNE(i + 3) && LDA(i + 4)) {
            listing[i] = "";
            listing[i + 2] = "";
            listing[i + 3] = "";
            Result = false;
            break;
          };
          if ((i > 0) && (listing[i] === "\tand #$00")) if (LDA_IM_0(i - 1)) {
            listing[i] = "";
            Result = false;
            break;
          };
          if (LDA_IM_0(i) && BNE(i + 1) && LDA(i + 2)) {
            listing[i] = "";
            listing[i + 1] = "";
            Result = false;
            break;
          };
          if (LDA(i) && SKIP(i + 1) && LDA(i + 2) && (listing[i] === listing[i + 2])) {
            listing[i + 2] = "";
            Result = false;
            break;
          };
          if ((LDA_A(i) || ADC_SBC(i)) && ((listing[i + 1] === "\teor #$00") || (listing[i + 1] === "\tora #$00")) && SKIP(i + 2)) {
            listing[i + 1] = "";
            Result = false;
            break;
          };
          if (AND_ORA_EOR(i) && ((listing[i + 1] === "\teor #$00") || (listing[i + 1] === "\tora #$00")) && SKIP(i + 2)) {
            listing[i + 1] = "";
            Result = false;
            break;
          };
          if (STA_STACK(i) && INY(i + 1) && LDA_STACK(i + 2) && CMP(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 2] = "";
            Result = false;
            break;
          };
          if (STA_STACK(i) && LDA(i + 1) && AND_ORA_EOR_STACK(i + 2)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "";
            listing[i + 1] = pas.System.Copy(listing[i + 2],1,5) + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            Result = false;
            break;
          };
          if (STY_STACK(i) && LDA_STACK(i + 1) && AND_ORA_EOR_STACK(i + 2) && STA_STACK(i + 3)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256))) {
            listing[i] = "\ttya";
            listing[i + 1] = pas.System.Copy(listing[i + 2],1,5) + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            Result = false;
            break;
          };
          if (STY_STACK(i) && LDA(i + 1) && ADD_STACK(i + 2) && STA(i + 3)) if (pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 2],6,256)) {
            listing[i] = "\ttya";
            listing[i + 1] = "\tadd " + pas.System.Copy(listing[i + 1],6,256);
            listing[i + 2] = "";
            Result = false;
            break;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && AND_ORA_EOR(i + 2) && (AND_ORA_EOR_STACK(i + 2) === false) && STA_STACK(i + 3) && LDA_STACK(i + 4) && BNE(i + 5) && LDA_STACK(i + 6)) if ((pas.System.Copy(listing[i],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 3],6,256) === pas.System.Copy(listing[i + 6],6,256))) {
            listing[i] = listing[i + 5];
            listing[i + 4] = "";
            listing[i + 5] = "";
            listing[i + 6] = "";
            Result = false;
            break;
          };
          if ((AND_ORA_EOR(i) || ASL_A(i) || ROL_A(i) || LSR_A(i) || ROR_A(i)) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA_STACK(i + 3) && (BNE(i + 4) || BEQ(i + 4))) if (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) {
            listing[i + 1] = "";
            listing[i + 3] = listing[i];
            listing[i] = "";
            Result = false;
            break;
          };
          if ((STY_STACK(i) || STA_STACK(i)) && MVA_STACK(i + 1) && (pas.System.Copy(listing[i],6,256) === GetString$1(i + 1))) {
            listing[i + 1] = pas.System.Copy(listing[i],1,5) + pas.System.Copy(listing[i + 1],GetString$1(i + 1).length + 7,256);
            listing[i] = "";
            Result = false;
            break;
          };
          if (opt_LOCAL(i) === false) {
            Result = false;
            break;
          };
          if (opt_LT_GTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_LTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_GT(i) === false) {
            Result = false;
            break;
          };
          if (opt_NE_EQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_CMP(i) === false) {
            Result = false;
            break;
          };
          if (opt_CMP_BP2(i) === false) {
            Result = false;
            break;
          };
          if (opt_BRANCH(i) === false) {
            Result = false;
            break;
          };
          if (LDY_1(i) && LDA(i + 1) && CMP(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && TYA(i + 6) && AND_(i + 7) && (AND_STACK(i + 7) === false) && JEQ(i + 8)) {
            listing[i] = "";
            listing[i + 4] = "\tjmp " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 6] = "";
            listing[i + 7] = "\tlda " + pas.System.Copy(listing[i + 7],6,256);
            Result = false;
            break;
          };
          if (LDY_1(i) && LDA(i + 1) && SKIP(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && AND_(i + 6) && (AND_STACK(i + 6) === false) && JEQ(i + 7)) {
            listing[i] = "";
            listing[i + 3] = "\tjmp " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 5] = "";
            listing[i + 6] = "\tlda " + pas.System.Copy(listing[i + 6],6,256);
            Result = false;
            break;
          };
          if (LAB_A(i) && TYA(i + 1) && AND_STACK(i + 2) && JEQ(i + 3)) {
            tmp = pas.System.Copy(listing[i + 2],6,256);
            yes = true;
            for (var $l2 = i - 1; $l2 >= 0; $l2--) {
              p = $l2;
              if (ORA_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && AND_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && (pas.System.Copy(listing[p],6,256) !== pas.System.Copy(listing[i + 2],6,256))) || (TYA(p) && (LAB_A(p - 1) === false) && (AND_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l3 = i - 1; $l3 >= 0; $l3--) {
                p = $l3;
                if (LDY_1(p)) listing[p] = "";
                if (listing[p] === ("\tsty " + tmp)) listing[p] = "";
                if ((TYA(p) === false) && (listing[p + 1] === listing[i + 2]) && (listing[p + 2] === ("\tsta " + tmp))) {
                  listing[p + 1] = listing[i + 3];
                  listing[p + 2] = "";
                };
                if (LAB_A(p) && TYA(p + 1) && AND_(p + 2) && (listing[p + 3] === ("\tsta " + tmp))) {
                  if (listing[p + 2] === listing[i + 2]) {
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                  } else {
                    listing[p + 1] = "\tlda " + pas.System.Copy(listing[p + 2],6,256);
                    listing[p + 2] = listing[i + 3];
                    listing[p + 3] = "";
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) listing[p] = "\tjmp " + pas.System.Copy(listing[i + 3],6,256);
              };
              listing[i + 1] = "";
              listing[i + 2] = "\tlda " + pas.System.Copy(listing[i + 2],6,256);
              for (var $l4 = i; $l4 >= 0; $l4--) {
                p = $l4;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (listing[p] === ("\tsta " + tmp)) listing[p] = listing[i + 3];
                  break;
                };
              };
              listing[i + 3] = "";
              Result = false;
              break;
            };
          };
          if (LDY_1(i) && LDA(i + 1) && CMP(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && TYA(i + 6) && (ORA_STACK(i + 7) === false) && ORA(i + 7) && JEQ(i + 8)) {
            listing[i] = "";
            listing[i + 4] = "\tjmp *+6";
            listing[i + 5] = "@\tjmp " + pas.System.Copy(listing[i + 8],6,256) + "x";
            listing[i + 6] = "\tlda:sne " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 7] = "\tjmp " + pas.System.Copy(listing[i + 8],6,256);
            listing[i + 8] = pas.System.Copy(listing[i + 8],6,256) + "x";
            Result = false;
            break;
          };
          if (LDY_1(i) && LDA(i + 1) && SKIP(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && (ORA_STACK(i + 6) === false) && ORA(i + 6) && JEQ(i + 7)) {
            listing[i] = "";
            listing[i + 3] = "\tjmp *+6";
            listing[i + 4] = "@\tjmp " + pas.System.Copy(listing[i + 7],6,256) + "x";
            listing[i + 5] = "\tlda:sne " + pas.System.Copy(listing[i + 6],6,256);
            listing[i + 6] = "\tjmp " + pas.System.Copy(listing[i + 7],6,256);
            listing[i + 7] = pas.System.Copy(listing[i + 7],6,256) + "x";
            Result = false;
            break;
          };
          if (LDY_1(i) && (listing[i + 1] === "\tand #$01") && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && (ORA_STACK(i + 6) === false) && ORA(i + 6) && JEQ(i + 7)) {
            listing[i] = "";
            listing[i + 2] = "\teor #$01";
            listing[i + 3] = "";
            listing[i + 4] = "";
            listing[i + 5] = "";
            Result = false;
            break;
          };
          if (LAB_A(i) && TYA(i + 1) && ORA_STACK(i + 2) && JEQ(i + 3)) {
            tmp = pas.System.Copy(listing[i + 2],6,256);
            yes = true;
            for (var $l5 = i - 1; $l5 >= 0; $l5--) {
              p = $l5;
              if (AND_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && ORA_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && (pas.System.Copy(listing[p],6,256) !== pas.System.Copy(listing[i + 2],6,256))) || (TYA(p) && (LAB_A(p - 1) === false) && (ORA_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l6 = i - 1; $l6 >= 0; $l6--) {
                p = $l6;
                if (LDY_1(p)) listing[p] = "";
                if (listing[p] === ("\tsty " + tmp)) listing[p] = "";
                if ((TYA(p) === false) && (listing[p + 1] === listing[i + 2]) && (listing[p + 2] === ("\tsta " + tmp))) {
                  listing[p + 1] = "\tjne " + pas.System.Copy(listing[i + 3],6,256) + "x";
                  listing[p + 2] = "";
                };
                if (LAB_A(p) && TYA(p + 1) && (pas.System.Pos("ora ",listing[p + 2]) > 0) && (listing[p + 3] === ("\tsta " + tmp))) {
                  if (listing[p + 2] === listing[i + 2]) {
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                  } else {
                    listing[p + 1] = "\tlda " + pas.System.Copy(listing[p + 2],6,256);
                    listing[p + 2] = "\tjne " + pas.System.Copy(listing[i + 3],6,256) + "x";
                    listing[p + 3] = "";
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) {
                  listing[p] = "\tjmp *+6";
                  listing[p + 1] = "@\tjmp " + pas.System.Copy(listing[i + 3],6,256) + "x";
                };
              };
              listing[i + 1] = "\tjmp " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 2] = pas.System.Copy(listing[i + 3],6,256) + "x";
              for (var $l7 = i; $l7 >= 0; $l7--) {
                p = $l7;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (listing[p] === ("\tsta " + tmp)) listing[p] = "\tjne " + pas.System.Copy(listing[i + 3],6,256) + "x";
                  break;
                };
              };
              listing[i + 3] = "";
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && AND_STACK(i + 2) && JNE(i + 3)) {
            tmp = pas.System.Copy(listing[i + 2],6,256);
            yes = true;
            for (var $l8 = i - 1; $l8 >= 0; $l8--) {
              p = $l8;
              if (ORA_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && AND_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && (pas.System.Copy(listing[p],6,256) !== pas.System.Copy(listing[i + 2],6,256))) || (TYA(p) && (LAB_A(p - 1) === false) && (AND_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l9 = i - 1; $l9 >= 0; $l9--) {
                p = $l9;
                if (LDY_1(p)) listing[p] = "";
                if (listing[p] === ("\tsty " + tmp)) listing[p] = "";
                if ((TYA(p) === false) && (listing[p + 1] === listing[i + 2]) && (listing[p + 2] === ("\tsta " + tmp))) {
                  listing[p + 1] = "\tjeq " + pas.System.Copy(listing[i + 3],6,256) + "w";
                  listing[p + 2] = "";
                };
                if (LAB_A(p) && TYA(p + 1) && AND_(p + 2) && (listing[p + 3] === ("\tsta " + tmp))) {
                  if (listing[p + 2] === listing[i + 2]) {
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                  } else {
                    listing[p + 1] = "\tlda " + pas.System.Copy(listing[p + 2],6,256);
                    listing[p + 2] = "\tjeq " + pas.System.Copy(listing[i + 3],6,256) + "w";
                    listing[p + 3] = "";
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) listing[p] = "\tjmp " + pas.System.Copy(listing[i + 3],6,256) + "w";
              };
              listing[i + 1] = "\tjmp " + pas.System.Copy(listing[i + 3],6,256);
              listing[i + 2] = pas.System.Copy(listing[i + 3],6,256) + "w";
              for (var $l10 = i; $l10 >= 0; $l10--) {
                p = $l10;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (listing[p] === ("\tsta " + tmp)) listing[p] = "\tjeq " + pas.System.Copy(listing[i + 3],6,256) + "w";
                  break;
                };
              };
              listing[i + 3] = "";
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && ORA_STACK(i + 2) && JNE(i + 3)) {
            tmp = pas.System.Copy(listing[i + 2],6,256);
            yes = true;
            for (var $l11 = i - 1; $l11 >= 0; $l11--) {
              p = $l11;
              if (AND_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && ORA_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && (pas.System.Copy(listing[p],6,256) !== pas.System.Copy(listing[i + 2],6,256))) || (TYA(p) && (LAB_A(p - 1) === false) && (ORA_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l12 = i - 1; $l12 >= 0; $l12--) {
                p = $l12;
                if (LDY_1(p)) listing[p] = "";
                if (listing[p] === ("\tsty " + tmp)) listing[p] = "";
                if ((TYA(p) === false) && (listing[p + 1] === listing[i + 2]) && (listing[p + 2] === ("\tsta " + tmp))) {
                  listing[p + 1] = "\tjne " + pas.System.Copy(listing[i + 3],6,256);
                  listing[p + 2] = "";
                };
                if (LAB_A(p) && TYA(p + 1) && ORA(p + 2) && (listing[p + 3] === ("\tsta " + tmp))) {
                  if (listing[p + 2] === listing[i + 2]) {
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                  } else {
                    listing[p + 1] = "\tlda " + pas.System.Copy(listing[p + 2],6,256);
                    listing[p + 2] = "\tjne " + pas.System.Copy(listing[i + 3],6,256);
                    listing[p + 3] = "";
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) {
                  listing[p] = "\tjmp *+6";
                  listing[p + 1] = "@\tjmp " + pas.System.Copy(listing[i + 3],6,256);
                };
              };
              listing[i + 1] = "";
              listing[i + 2] = "";
              for (var $l13 = i; $l13 >= 0; $l13--) {
                p = $l13;
                if (pas.System.Pos(tmp,listing[p]) > 0) {
                  if (listing[p] === ("\tsta " + tmp)) listing[p] = "\tjne " + pas.System.Copy(listing[i + 3],6,256);
                  break;
                };
              };
              listing[i + 3] = "";
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && AND_STACK(i + 2) && (STA_VAL(i + 3) || (LDY(i + 3) && STA_ADR(i + 4)))) {
            tmp = pas.System.Copy(listing[i + 2],6,256);
            yes = true;
            for (var $l14 = i - 1; $l14 >= 1; $l14--) {
              p = $l14;
              if (ORA_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && AND_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && (pas.System.Copy(listing[p],6,256) !== pas.System.Copy(listing[i + 2],6,256))) || (TYA(p) && (LAB_A(p - 1) === false) && (AND_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l15 = i - 1; $l15 >= 0; $l15--) {
                p = $l15;
                if (LDY_1(p)) listing[p] = "";
                if (listing[p] === ("\tsty " + tmp)) listing[p] = "";
                if ((TYA(p) === false) && (listing[p + 1] === listing[i + 2]) && (listing[p + 2] === ("\tsta " + tmp))) {
                  listing[p + 1] = "\tjeq l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s";
                  listing[p + 2] = "";
                };
                if (LAB_A(p) && TYA(p + 1) && AND_(p + 2) && (listing[p + 3] === ("\tsta " + tmp))) {
                  if (listing[p + 2] === listing[i + 2]) {
                    listing[p + 1] = "";
                    listing[p + 2] = "";
                    listing[p + 3] = "";
                  } else {
                    listing[p + 1] = "\tlda " + pas.System.Copy(listing[p + 2],6,256);
                    listing[p + 2] = "\tjeq l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s";
                    listing[p + 3] = "";
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) listing[p] = "\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s";
              };
              listing[i + 1] = "\tlda:sne #$01";
              listing[i + 2] = "l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s\tlda #$00";
              Result = false;
              break;
            };
          };
        };
        return Result;
      };
      function index(k, x, msb) {
        var m = 0;
        if (msb) {
          listing[l] = "\tlda " + GetARG(0,x,true);
          listing[l + 1] = "\tsta " + GetARG(0,x,true);
          listing[l + 2] = "\tlda " + GetARG(1,x,true);
          l += 3;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            listing[l] = "\tasl " + GetARG(0,x,true);
            listing[l + 1] = "\trol @";
            l += 2;
          };
          listing[l] = "\tsta " + GetARG(1,x,true);
          listing[l + 1] = "\tlda " + GetARG(0,x,true);
          listing[l + 2] = "\tsta " + GetARG(0,x,true);
        } else {
          listing[l] = "\tlda " + GetARG(1,x,true);
          listing[l + 1] = "\tsta " + GetARG(1,x,true);
          listing[l + 2] = "\tlda " + GetARG(0,x,true);
          l += 3;
          for (var $l1 = 0, $end1 = k - 1; $l1 <= $end1; $l1++) {
            m = $l1;
            listing[l] = "\tasl @";
            listing[l + 1] = "\trol " + GetARG(1,x,true);
            l += 2;
          };
          listing[l] = "\tsta " + GetARG(0,x,true);
          listing[l + 1] = "\tlda " + GetARG(1,x,true);
          listing[l + 2] = "\tsta " + GetARG(1,x,true);
        };
        l += 3;
      };
      function imulCL_opt() {
        var Result = false;
        var tmp = "";
        Result = true;
        if (IFDEF_MUL8(m + 4)) {
          if (STA_EAX(m + 1) && STA_ECX(m + 3)) {
            listing[m + 1] = "\tsta :ecx";
            listing[m + 3] = "\tsta :eax";
          };
          if (LDA_IM(m) && LDA_A(m + 2) && (LDA_IM(m + 2) === false)) {
            tmp = listing[m + 2];
            listing[m + 2] = listing[m];
            listing[m] = tmp;
          };
          if ((m > 1) && LDA_STACK(m)) if (STA_STACK(m - 1) && (pas.System.Copy(listing[m],6,256) === pas.System.Copy(listing[m - 1],6,256)) && LDA_VAL(m - 2) && (LDA_IM(m - 2) === false)) {
            listing[m] = listing[m - 2];
            listing[m - 2] = "";
            listing[m - 1] = "";
          };
          if (LDA_IM(m + 2)) {
            k = GetBYTE(m + 2)}
           else k = -1;
          if ((k in rtl.createSet(0,1,2,4,8,16,32)) && (LDA_IM(m) === false) && STA_ECX(m + 1) && STA_EAX(m + 3)) {
            s[x - 1][1] = "\tlda #$00";
            s[x - 1][2] = "";
            s[x - 1][3] = "";
            l = m;
            if (LDA_VAL(l)) {
              s[x - 1][0] = listing[l]}
             else {
              s[x - 1][0] = "";
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              l += 2;
            };
            var $tmp = k;
            if ($tmp === 2) {
              index(1,x - 1,false)}
             else if ($tmp === 4) {
              index(2,x - 1,false)}
             else if ($tmp === 8) {
              index(3,x - 1,false)}
             else if ($tmp === 16) {
              index(4,x - 1,false)}
             else if ($tmp === 32) index(5,x - 1,false);
            if (k in rtl.createSet(0,1)) {
              if (k === 0) listing[l] = "\tlda #$00";
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              listing[l + 1] = "\tsta :eax";
              listing[l + 2] = "\tlda #$00";
              listing[l + 3] = "\tsta :eax+1";
              l += 4;
            } else {
              listing[l] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 1] = "\tsta :eax";
              listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[l + 3] = "\tsta :eax+1";
              l += 4;
            };
            return false;
          };
          if ((k in rtl.createSet(3,5,7,10,40,64,96,128,255)) && (LDA_IM(m) === false) && STA_ECX(m + 1) && STA_EAX(m + 3)) {
            var $tmp1 = k;
            if ($tmp1 === 3) {
              s[x - 1][1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                s[x - 1][0] = "\tlda #$00"}
               else s[x - 1][0] = "";
              listing[m + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 3] = "\tsta " + GetARG(1,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 4] = listing[m]}
               else listing[m + 4] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 5] = "\tasl @";
              listing[m + 6] = "\trol " + GetARG(1,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 7] = "\tadd " + pas.System.Copy(listing[m],6,256)}
               else listing[m + 7] = "\tadd " + GetARG(0,x - 1,true);
              listing[m + 8] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 9] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 10] = "\tadc #$00";
              listing[m + 11] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 12] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 13] = "\tsta :eax";
              listing[m + 14] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 15] = "\tsta :eax+1";
              l = m + 16;
              return false;
            } else if ($tmp1 === 5) {
              s[x - 1][1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                s[x - 1][0] = "\tlda #$00"}
               else s[x - 1][0] = "";
              listing[m + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 3] = "\tsta " + GetARG(1,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 4] = listing[m]}
               else listing[m + 4] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 5] = "\tasl @";
              listing[m + 6] = "\trol " + GetARG(1,x - 1,true);
              listing[m + 7] = "\tasl @";
              listing[m + 8] = "\trol " + GetARG(1,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 9] = "\tadd " + pas.System.Copy(listing[m],6,256)}
               else listing[m + 9] = "\tadd " + GetARG(0,x - 1,true);
              listing[m + 10] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 11] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 12] = "\tadc #$00";
              listing[m + 13] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 14] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 15] = "\tsta :eax";
              listing[m + 16] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 17] = "\tsta :eax+1";
              l = m + 18;
              return false;
            } else if ($tmp1 === 7) {
              s[x - 1][1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                s[x - 1][0] = "\tlda #$00"}
               else s[x - 1][0] = "";
              listing[m + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 3] = "\tsta " + GetARG(1,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 4] = listing[m]}
               else listing[m + 4] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 5] = "\tasl @";
              listing[m + 6] = "\trol " + GetARG(1,x - 1,true);
              listing[m + 7] = "\tasl @";
              listing[m + 8] = "\trol " + GetARG(1,x - 1,true);
              listing[m + 9] = "\tasl @";
              listing[m + 10] = "\trol " + GetARG(1,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 11] = "\tsub " + pas.System.Copy(listing[m],6,256)}
               else listing[m + 11] = "\tsub " + GetARG(0,x - 1,true);
              listing[m + 12] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 13] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 14] = "\tsbc #$00";
              listing[m + 15] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 16] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 17] = "\tsta :eax";
              listing[m + 18] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 19] = "\tsta :eax+1";
              l = m + 20;
              return false;
            } else if ($tmp1 === 10) {
              s[x - 1][0] = "";
              s[x - 1][1] = "\tlda #$00";
              listing[m + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 4] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 5] = "\tasl @";
              listing[m + 6] = "\trol " + GetARG(1,x - 1,true);
              listing[m + 7] = "\tasl @";
              listing[m + 8] = "\trol " + GetARG(1,x - 1,true);
              listing[m + 9] = "\tadd " + GetARG(0,x - 1,true);
              listing[m + 10] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 11] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 12] = "\tadc #$00";
              listing[m + 13] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 14] = "\tasl " + GetARG(0,x - 1,true);
              listing[m + 15] = "\trol " + GetARG(1,x - 1,true);
              listing[m + 16] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 17] = "\tsta :eax";
              listing[m + 18] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 19] = "\tsta :eax+1";
              l = m + 20;
              return false;
            } else if ($tmp1 === 40) {
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              listing[m + 1] = "\tjsr @mul40";
              l = m + 2;
              return false;
            } else if ($tmp1 === 64) {
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              listing[m + 1] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 2] = "\tlda #$00";
              listing[m + 3] = "\tlsr " + GetARG(1,x - 1,true);
              listing[m + 4] = "\tror @";
              listing[m + 5] = "\tlsr " + GetARG(1,x - 1,true);
              listing[m + 6] = "\tror @";
              listing[m + 7] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 8] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 9] = "\tsta :eax";
              listing[m + 10] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 11] = "\tsta :eax+1";
              l = m + 12;
              return false;
            } else if ($tmp1 === 96) {
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              listing[m + 1] = "\tjsr @mul96";
              l = m + 2;
              return false;
            } else if ($tmp1 === 128) {
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              listing[m + 1] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 2] = "\tlda #$00";
              listing[m + 3] = "\tlsr " + GetARG(1,x - 1,true);
              listing[m + 4] = "\tror @";
              listing[m + 5] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 6] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 7] = "\tsta :eax";
              listing[m + 8] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 9] = "\tsta :eax+1";
              l = m + 10;
              return false;
            } else if ($tmp1 === 255) {
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              if (LDA_VAL(m)) {
                s[x - 1][0] = "\tlda #$00"}
               else s[x - 1][0] = "";
              listing[m + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[m + 2] = "\tlda #$00";
              if (LDA_VAL(m)) {
                listing[m + 3] = "\tsub " + pas.System.Copy(listing[m],6,256)}
               else listing[m + 3] = "\tsub " + GetARG(0,x - 1,true);
              listing[m + 4] = "\tsta " + GetARG(0,x - 1,true);
              if (LDA_VAL(m)) {
                listing[m + 5] = "\tlda " + pas.System.Copy(listing[m],6,256)}
               else listing[m + 5] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 6] = "\tsbc #$00";
              listing[m + 7] = "\tsta " + GetARG(1,x - 1,true);
              listing[m + 8] = "\tlda " + GetARG(0,x - 1,true);
              listing[m + 9] = "\tsta :eax";
              listing[m + 10] = "\tlda " + GetARG(1,x - 1,true);
              listing[m + 11] = "\tsta :eax+1";
              l = m + 12;
              return false;
            };
          };
        };
        return Result;
      };
      function system_poke() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(0,x - 1,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x - 1,false)) < 0)) {
          listing[l] = "\tldy " + GetARG(1,x,true);
          listing[l + 1] = "\tsty :bp+1";
          listing[l + 2] = "\tldy " + GetARG(0,x,true);
          listing[l + 3] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 4] = "\tsta (:bp),y";
          l += 5;
        } else {
          k = pas.Common.GetVAL(GetARG(0,x - 1,true));
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l] = "\tlda #$" + pas.SysUtils.IntToHex(k,2);
          k = pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8);
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l + 1] = "\tsta $" + pas.SysUtils.IntToHex(k,4);
          l += 2;
        };
        x -= 2;
        return Result;
      };
      function system_dpoke() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x,false)) < 0) || (pas.Common.GetVAL(GetARG(0,x - 1,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x - 1,false)) < 0)) {
          listing[l] = "\tlda " + GetARG(0,x,true);
          listing[l + 1] = "\tsta :bp2";
          listing[l + 2] = "\tlda " + GetARG(1,x,true);
          listing[l + 3] = "\tsta :bp2+1";
          listing[l + 4] = "\tldy #$00";
          listing[l + 5] = "\tlda " + GetARG(0,x - 1,true);
          listing[l + 6] = "\tsta (:bp2),y";
          listing[l + 7] = "\tiny";
          listing[l + 8] = "\tlda " + GetARG(1,x - 1,true);
          listing[l + 9] = "\tsta (:bp2),y";
          l += 10;
        } else {
          k = pas.Common.GetVAL(GetARG(0,x - 1,true));
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l] = "\tlda #$" + pas.SysUtils.IntToHex(k,2);
          k = pas.Common.GetVAL(GetARG(1,x - 1,true));
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l + 2] = "\tlda #$" + pas.SysUtils.IntToHex(k,2);
          k = pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8);
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l + 1] = "\tsta $" + pas.SysUtils.IntToHex(k,4);
          listing[l + 3] = "\tsta $" + pas.SysUtils.IntToHex(k,4) + "+1";
          l += 4;
        };
        x -= 2;
        return Result;
      };
      function system_peek() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x,false)) < 0)) {
          listing[l] = "\tldy " + GetARG(1,x,true);
          listing[l + 1] = "\tsty :bp+1";
          listing[l + 2] = "\tldy " + GetARG(0,x,true);
          listing[l + 3] = "\tlda (:bp),y";
          listing[l + 4] = "\tsta " + GetARG(0,x,true);
          l += 5;
        } else {
          k = pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8);
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l] = "\tlda $" + pas.SysUtils.IntToHex(k,4);
          listing[l + 1] = "\tsta " + GetARG(0,x,true);
          l += 2;
        };
        return Result;
      };
      function system_dpeek() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x,false)) < 0)) {
          listing[l] = "\tlda " + GetARG(0,x,true);
          listing[l + 1] = "\tsta :bp2";
          listing[l + 2] = "\tlda " + GetARG(1,x,true);
          listing[l + 3] = "\tsta :bp2+1";
          listing[l + 4] = "\tldy #$00";
          listing[l + 5] = "\tlda (:bp2),y";
          listing[l + 6] = "\tsta " + GetARG(0,x,true);
          listing[l + 7] = "\tiny";
          listing[l + 8] = "\tlda (:bp2),y";
          listing[l + 9] = "\tsta " + GetARG(1,x,true);
          l += 10;
        } else {
          k = pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8);
          if ((k > 0xFFFF) || (k < 0)) return true;
          listing[l] = "\tlda $" + pas.SysUtils.IntToHex(k,4);
          listing[l + 1] = "\tsta " + GetARG(0,x,true);
          listing[l + 2] = "\tlda $" + pas.SysUtils.IntToHex(k,4) + "+1";
          listing[l + 3] = "\tsta " + GetARG(1,x,true);
          l += 4;
        };
        return Result;
      };
      l = 0;
      x = 0;
      arg0 = "";
      inxUse = false;
      listing = rtl.arraySetLength(null,"",1024);
      listing_tmp = rtl.arraySetLength(null,"",128);
      for (i = 0; i <= 15; i++) for (k = 0; k <= 3; k++) s[i][k] = "";
      for (var $l = 0, $end = rtl.length(pas.Common.OptimizeBuf) - 1 - 1; $l <= $end; $l++) {
        i = $l;
        a = pas.Common.OptimizeBuf[i];
        if ((a !== "") && (pas.System.Pos(";",a) === 0)) {
          t = a;
          if (a === "\tinx") {
            x += 1;
            inxUse = true;
            t = "";
            continue;
          };
          if (a === "\tdex") {
            x -= 1;
            t = "";
            continue;
          };
          if (pas.System.Pos("@print",a) > 0) {
            x = 51;
            arg0 = "@print";
            $mod.ResetOpty();
            break;
          };
          if ((pas.System.Pos("\tjsr ",a) > 0) || (pas.System.Pos("m@",a) > 0)) {
            if (pas.System.Pos("\tjsr ",a) > 0) {
              arg0 = pas.System.Copy(a,6,256)}
             else arg0 = pas.System.Copy(a,2,256);
            if (arg0.length > 20) {
              x = 51;
              $mod.ResetOpty();
              break;
            };
            elf = $impl.ElfHash(arg0);
            if (elf === 0x8D58F81) {
              t = "";
              listing[l] = "\tldy #$00";
              listing[l + 1] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tspl";
              listing[l + 3] = "\tdey";
              listing[l + 4] = "\tsty " + GetARG(1,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(0,x - 1,true);
              l += 6;
            } else if (elf === 0x78D58FC) {
              t = "";
              listing[l] = "\tldy #$00";
              listing[l + 1] = "\tlda " + GetARG(0,x,true);
              listing[l + 2] = "\tspl";
              listing[l + 3] = "\tdey";
              listing[l + 4] = "\tsty " + GetARG(1,x,true);
              listing[l + 5] = "\tsta " + GetARG(0,x,true);
              l += 6;
            } else if (elf === 0xA4BEA14) {
              t = "";
              if ((s[x][1] === "") && (s[x][2] === "") && (s[x][3] === "")) {
                listing[l] = "\tldy #$00";
                listing[l + 1] = "\tlda " + GetARG(0,x,true);
                listing[l + 2] = "\tspl";
                listing[l + 3] = "\tdey";
                listing[l + 4] = "\tsta " + GetARG(0,x,true);
                listing[l + 5] = "\tsty " + GetARG(1,x,true);
                listing[l + 6] = "\tsty " + GetARG(2,x,true);
                listing[l + 7] = "\tsty " + GetARG(3,x,true);
                l += 8;
              };
            } else if (elf === 0x5F632F4) {
              t = "";
              if ((s[x - 1][1] === "") && (s[x - 1][2] === "") && (s[x - 1][3] === "")) {
                listing[l] = "\tldy #$00";
                listing[l + 1] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 2] = "\tspl";
                listing[l + 3] = "\tdey";
                listing[l + 4] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 5] = "\tsty " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tsty " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tsty " + GetARG(3,x - 1,true);
                l += 8;
              };
            } else if (elf === 0xA4C0C6C) {
              t = "";
              if ((s[x][2] === "") && (s[x][3] === "")) {
                listing[l] = "\tlda " + GetARG(0,x,true);
                listing[l + 1] = "\tsta " + GetARG(0,x,true);
                listing[l + 2] = "\tldy #$00";
                listing[l + 3] = "\tlda " + GetARG(1,x,true);
                listing[l + 4] = "\tspl";
                listing[l + 5] = "\tdey";
                listing[l + 6] = "\tsta " + GetARG(1,x,true);
                listing[l + 7] = "\tsty " + GetARG(2,x,true);
                listing[l + 8] = "\tsty " + GetARG(3,x,true);
                l += 9;
              };
            } else if (elf === 0x5F7F48C) {
              t = "";
              if ((s[x - 1][2] === "") && (s[x - 1][3] === "")) {
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 2] = "\tldy #$00";
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tspl";
                listing[l + 5] = "\tdey";
                listing[l + 6] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 7] = "\tsty " + GetARG(2,x - 1,true);
                listing[l + 8] = "\tsty " + GetARG(3,x - 1,true);
                l += 9;
              };
            } else if (elf === 0xF7B015C) {
              t = "";
              s[x][3] = "";
              listing[l] = "\tlda " + GetARG(2,x,true);
              listing[l + 1] = "\tsta " + GetARG(3,x,true);
              listing[l + 2] = "\tlda " + GetARG(1,x,true);
              listing[l + 3] = "\tsta " + GetARG(2,x,true);
              listing[l + 4] = "\tlda " + GetARG(0,x,true);
              listing[l + 5] = "\tsta " + GetARG(1,x,true);
              listing[l + 6] = "\tlda #$00";
              s[x][0] = "";
              listing[l + 7] = "\tsta " + GetARG(0,x,true);
              l += 8;
            } else if (elf === 0x7B01501) {
              t = "";
              s[x - 1][3] = "";
              listing[l] = "\tlda " + GetARG(2,x - 1,true);
              listing[l + 1] = "\tsta " + GetARG(3,x - 1,true);
              listing[l + 2] = "\tlda " + GetARG(1,x - 1,true);
              listing[l + 3] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 6] = "\tlda #$00";
              s[x - 1][0] = "";
              listing[l + 7] = "\tsta " + GetARG(0,x - 1,true);
              l += 8;
            } else if (elf === 0x6ED7EC5) {
              t = "";
              listing[l] = "\tlda " + GetARG(0,x,true);
              listing[l + 1] = "\t:4 lsr @";
              listing[l + 2] = "\tsta " + GetARG(0,x,true);
              l += 3;
            } else if (elf === 0x6EEC424) {
              t = "";
              listing[l] = "\tlda " + GetARG(1,x,true);
              s[x][0] = "";
              listing[l + 1] = "\tsta " + GetARG(0,x,true);
              l += 2;
            } else if (elf === 0x6ED7624) {
              t = "";
              s[x][0] = "";
              s[x][1] = "";
              listing[l] = "\tlda " + GetARG(3,x,true);
              listing[l + 1] = "\tsta " + GetARG(1,x,true);
              listing[l + 2] = "\tlda " + GetARG(2,x,true);
              listing[l + 3] = "\tsta " + GetARG(0,x,true);
              l += 4;
            } else if (elf === 0xD523E88) {
              t = "";
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              s[x - 1][2] = "";
              s[x - 1][3] = "";
              listing[l] = "\tlda :ztmp8";
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tlda :ztmp9";
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tlda :ztmp10";
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 6] = "\tlda :ztmp11";
              listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
              l += 8;
            } else if (elf === 0x53B7FA8) {
              t = "";
              s[x - 1][0] = "";
              s[x - 1][1] = "";
              s[x - 1][2] = "";
              s[x - 1][3] = "";
              listing[l] = "\tlda :eax";
              listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
              listing[l + 2] = "\tlda :eax+1";
              listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
              listing[l + 4] = "\tlda :eax+2";
              listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
              listing[l + 6] = "\tlda :eax+3";
              listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
              l += 8;
            } else if (elf === 0xE887644) {
              t = "";
              if ((l > 3) && LDA_IM(l - 4)) {
                k = GetBYTE(l - 4)}
               else k = 0;
              if (k in rtl.createSet(2,4,8,16,32,64,128)) {
                listing[l - 4] = listing[l - 2];
                l -= 4;
                var $tmp = k;
                if ($tmp === 2) {
                  listing[l + 1] = "\tand #$01"}
                 else if ($tmp === 4) {
                  listing[l + 1] = "\tand #$03"}
                 else if ($tmp === 8) {
                  listing[l + 1] = "\tand #$07"}
                 else if ($tmp === 16) {
                  listing[l + 1] = "\tand #$0F"}
                 else if ($tmp === 32) {
                  listing[l + 1] = "\tand #$1F"}
                 else if ($tmp === 64) {
                  listing[l + 1] = "\tand #$3F"}
                 else if ($tmp === 128) listing[l + 1] = "\tand #$7F";
                listing[l + 2] = "\tjsr #$00";
                l += 3;
              } else {
                listing[l] = "\tjsr @BYTE.MOD";
                l += 1;
              };
            } else if (elf === 0xE886C96) {
              t = "";
              if ((l > 3) && LDA_IM(l - 4)) {
                k = GetBYTE(l - 4)}
               else k = 0;
              if (k in rtl.createSet(null,2,32)) {
                listing[l - 4] = listing[l - 2];
                l -= 4;
                opt_BYTE_DIV(k);
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tsta :eax";
                l += 2;
              } else {
                listing[l] = "\tjsr @BYTE.DIV";
                l += 1;
              };
            } else if ((elf === 0x4C07985) || (elf === 0xD334D44)) {
              t = "";
              s[x][1] = "";
              s[x][2] = "";
              s[x][3] = "";
              s[x - 1][1] = "";
              s[x - 1][2] = "";
              s[x - 1][3] = "";
              m = l;
              listing[l] = "\tlda " + GetARG(0,x,true);
              listing[l + 1] = "\tsta :ecx";
              if (elf === 0xD334D44) {
                listing[l + 2] = "\tsta :ztmp8";
                l += 1;
              };
              listing[l + 2] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 3] = "\tsta :eax";
              if (elf === 0xD334D44) {
                listing[l + 4] = "\tsta :ztmp10";
                l += 1;
              };
              listing[l + 4] = "\t.ifdef fmulinit";
              listing[l + 5] = "\tfmulu_8";
              listing[l + 6] = "\tels";
              listing[l + 7] = "\timulCL";
              listing[l + 8] = "\teif";
              if (LDA_IM(l) && (listing[l + 1] === "\tsta :ecx") && LDA_IM(l + 2) && STA_EAX(l + 3)) {
                k = GetBYTE(l) * GetBYTE(l + 2);
                listing[l] = "\tlda #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[l + 1] = "\tsta :eax";
                listing[l + 2] = "\tlda #$" + pas.SysUtils.IntToHex((k >>> 8) & 255,2);
                listing[l + 3] = "\tsta :eax+1";
                l += 4;
              } else if (imulCL_opt()) l += 9;
              if (elf === 0xD334D44) {
                listing[l] = "\tlda :ztmp10";
                listing[l + 1] = "\tbpl @+";
                listing[l + 2] = "\tlda :eax+1";
                listing[l + 3] = "\tsub :ztmp8";
                listing[l + 4] = "\tsta :eax+1";
                listing[l + 5] = "@";
                listing[l + 6] = "\tlda :ztmp8";
                listing[l + 7] = "\tbpl @+";
                listing[l + 8] = "\tlda :eax+1";
                listing[l + 9] = "\tsub :ztmp10";
                listing[l + 10] = "\tsta :eax+1";
                listing[l + 11] = "@";
                listing[l + 12] = "\tlda :eax";
                listing[l + 13] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 14] = "\tlda :eax+1";
                listing[l + 15] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 16] = "\tlda #$00";
                listing[l + 17] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 18] = "\tlda #$00";
                listing[l + 19] = "\tsta " + GetARG(3,x - 1,true);
                l += 20;
              };
            } else if ((elf === 0x4C1C364) || (elf === 0x135CDB4)) {
              t = "";
              s[x][2] = "";
              s[x][3] = "";
              s[x - 1][2] = "";
              s[x - 1][3] = "";
              m = l;
              listing[l] = "\tlda " + GetARG(0,x,true);
              listing[l + 1] = "\tsta :ecx";
              if (elf === 0x135CDB4) {
                listing[l + 2] = "\tsta :ztmp8";
                l += 1;
              };
              listing[l + 2] = "\tlda " + GetARG(1,x,true);
              listing[l + 3] = "\tsta :ecx+1";
              if (elf === 0x135CDB4) {
                listing[l + 4] = "\tsta :ztmp9";
                l += 1;
              };
              listing[l + 4] = "\tlda " + GetARG(0,x - 1,true);
              listing[l + 5] = "\tsta :eax";
              if (elf === 0x135CDB4) {
                listing[l + 6] = "\tsta :ztmp10";
                l += 1;
              };
              listing[l + 6] = "\tlda " + GetARG(1,x - 1,true);
              listing[l + 7] = "\tsta :eax+1";
              if (elf === 0x135CDB4) {
                listing[l + 8] = "\tsta :ztmp11";
                l += 1;
              };
              if (LDA_IM(l) && (listing[l + 1] === "\tsta :ecx") && LDA_IM(l + 2) && (listing[l + 3] === "\tsta :ecx+1") && LDA_IM(l + 4) && STA_EAX(l + 5) && LDA_IM(l + 6) && STA_EAX_1(l + 7)) {
                k = GetWORD(l,l + 2) * GetWORD(l + 4,l + 6);
                listing[l] = "\tlda #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[l + 1] = "\tsta :eax";
                listing[l + 2] = "\tlda #$" + pas.SysUtils.IntToHex((k >>> 8) & 255,2);
                listing[l + 3] = "\tsta :eax+1";
                listing[l + 4] = "\tlda #$" + pas.SysUtils.IntToHex((k >>> 16) & 255,2);
                listing[l + 5] = "\tsta :eax+2";
                listing[l + 6] = "\tlda #$" + pas.SysUtils.IntToHex((k >>> 24) & 255,2);
                listing[l + 7] = "\tsta :eax+3";
                listing[l + 8] = "";
                listing[l + 9] = "";
                listing[l + 10] = "";
                listing[l + 11] = "";
                listing[l + 12] = "";
              } else {
                listing[l + 8] = "\t.ifdef fmulinit";
                listing[l + 9] = "\tfmulu_16";
                listing[l + 10] = "\tels";
                listing[l + 11] = "\timulCX";
                listing[l + 12] = "\teif";
              };
              l += 13;
              if (elf === 0x135CDB4) {
                listing[l] = "\tlda :ztmp11";
                listing[l + 1] = "\tbpl @+";
                listing[l + 2] = "\tlda :eax+2";
                listing[l + 3] = "\tsub :ztmp8";
                listing[l + 4] = "\tsta :eax+2";
                listing[l + 5] = "\tlda :eax+3";
                listing[l + 6] = "\tsbc :ztmp9";
                listing[l + 7] = "\tsta :eax+3";
                listing[l + 8] = "@";
                listing[l + 9] = "\tlda :ztmp9";
                listing[l + 10] = "\tbpl @+";
                listing[l + 11] = "\tlda :eax+2";
                listing[l + 12] = "\tsub :ztmp10";
                listing[l + 13] = "\tsta :eax+2";
                listing[l + 14] = "\tlda :eax+3";
                listing[l + 15] = "\tsbc :ztmp11";
                listing[l + 16] = "\tsta :eax+3";
                listing[l + 17] = "@";
                listing[l + 18] = "\tlda :eax";
                listing[l + 19] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 20] = "\tlda :eax+1";
                listing[l + 21] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 22] = "\tlda :eax+2";
                listing[l + 23] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 24] = "\tlda :eax+3";
                listing[l + 25] = "\tsta " + GetARG(3,x - 1,true);
                l += 26;
              };
              if ((listing[m + 1] === "\tsta :ecx") && LDA_IM_0(m + 2) && (listing[m + 3] === "\tsta :ecx+1") && LDA_A(m + 4) && STA_EAX(m + 5) && LDA_IM_0(m + 6) && STA_EAX_1(m + 7) && IFDEF_MUL16(m + 8)) {
                listing[m + 2] = listing[m + 4];
                listing[m + 3] = listing[m + 5];
                listing[m + 4] = listing[m + 8];
                listing[m + 5] = "\tfmulu_8";
                listing[m + 6] = listing[m + 10];
                listing[m + 7] = "\timulCL";
                listing[m + 8] = listing[m + 12];
                l = m + 9;
                imulCL_opt();
              };
            } else if ((elf === 0x4C07164) || (elf === 0xE3FD7A2)) {
              t = "";
              if (pas.Common.target.id === pas.Common.TComputer.NEO) {
                listing[l] = "\tlda " + GetARG(0,x,true);
                listing[l + 1] = "\tsta VAR1_B0";
                listing[l + 2] = "\tlda " + GetARG(1,x,true);
                listing[l + 3] = "\tsta VAR1_B1";
                listing[l + 4] = "\tlda " + GetARG(2,x,true);
                listing[l + 5] = "\tsta VAR1_B2";
                listing[l + 6] = "\tlda " + GetARG(3,x,true);
                listing[l + 7] = "\tsta VAR1_B3";
                listing[l + 8] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 9] = "\tsta VAR2_B0";
                listing[l + 10] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 11] = "\tsta VAR2_B1";
                listing[l + 12] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 13] = "\tsta VAR2_B2";
                listing[l + 14] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 15] = "\tsta VAR2_B3";
              } else {
                listing[l] = "\tlda " + GetARG(0,x,true);
                listing[l + 1] = "\tsta :ecx";
                listing[l + 2] = "\tlda " + GetARG(1,x,true);
                listing[l + 3] = "\tsta :ecx+1";
                listing[l + 4] = "\tlda " + GetARG(2,x,true);
                listing[l + 5] = "\tsta :ecx+2";
                listing[l + 6] = "\tlda " + GetARG(3,x,true);
                listing[l + 7] = "\tsta :ecx+3";
                listing[l + 8] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 9] = "\tsta :eax";
                listing[l + 10] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 11] = "\tsta :eax+1";
                listing[l + 12] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 13] = "\tsta :eax+2";
                listing[l + 14] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 15] = "\tsta :eax+3";
              };
              listing[l + 16] = "\tjsr imulECX";
              l += 17;
              if (elf === 0xE3FD7A2) {
                listing[l] = "\tlda :eax";
                listing[l + 1] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 2] = "\tlda :eax+1";
                listing[l + 3] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tlda :eax+2";
                listing[l + 5] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 6] = "\tlda :eax+3";
                listing[l + 7] = "\tsta " + GetARG(3,x - 1,true);
                if (STA_im_0(l + 1)) {
                  listing[l] = "";
                  listing[l + 1] = "";
                };
                if (STA_im_0(l + 3)) {
                  listing[l + 2] = "";
                  listing[l + 3] = "";
                };
                if (STA_im_0(l + 5)) {
                  listing[l + 4] = "";
                  listing[l + 5] = "";
                };
                if (STA_im_0(l + 7)) {
                  listing[l + 6] = "";
                  listing[l + 7] = "";
                };
                l += 8;
              };
            } else if (elf === 0x9BBA11B) {
              if (system_peek()) {
                x = 50;
                break;
              };
            } else if (elf === 0x9BBBB75) {
              if (system_poke()) {
                x = 50;
                break;
              };
            } else if (elf === 0xBA7C10B) {
              if (system_dpeek()) {
                x = 50;
                break;
              };
            } else if (elf === 0xBA7DB65) {
              if (system_dpoke()) {
                x = 50;
                break;
              };
            } else if (elf === 0xF6664EC) {
              if (opt_SHR_BYTE()) {
                x = 50;
                break;
              };
            } else if (elf === 0xF66A4EC) {
              opt_SHR_WORD();
            } else if (elf === 0x692BA8C) {
              opt_SHR_CARD();
            } else if (elf === 0x8FB5525) {
              opt_SHL_BYTE();
            } else if (elf === 0x8FAAFC4) {
              if (opt_SHL_WORD()) {
                x = 50;
                break;
              };
            } else if (elf === 0x8FB5DC4) {
              opt_SHL_CARD();
            } else if ((pas.System.Pos("add",arg0) > 0) || (pas.System.Pos("sub",arg0) > 0)) {
              t = "";
              if (elf === 0xB6624DC) {
                s[x][1] = "";
                s[x][2] = "";
                s[x][3] = "";
                s[x - 1][1] = "\tmva #$00";
                s[x - 1][2] = "\tmva #$00";
                s[x - 1][3] = "\tmva #$00";
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tsub " + GetARG(0,x,true);
                listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tsbc #$00";
                listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tsbc #$00";
                listing[l + 8] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 9] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 10] = "\tsbc #$00";
                listing[l + 11] = "\tsta " + GetARG(3,x - 1,true);
                listing[l + 3] = "";
                listing[l + 4] = "";
                listing[l + 5] = "";
                listing[l + 6] = "";
                listing[l + 7] = "";
                listing[l + 8] = "";
                listing[l + 9] = "";
                listing[l + 10] = "";
                listing[l + 11] = "";
                l += 3;
              };
              if (elf === 0xB66E428) {
                s[x][2] = "";
                s[x][3] = "";
                s[x - 1][2] = "\tmva #$00";
                s[x - 1][3] = "\tmva #$00";
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tsub " + GetARG(0,x,true);
                listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tsbc " + GetARG(1,x,true);
                listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tsbc #$00";
                listing[l + 8] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 9] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 10] = "\tsbc #$00";
                listing[l + 11] = "\tsta " + GetARG(3,x - 1,true);
                listing[l + 6] = "";
                listing[l + 7] = "";
                listing[l + 8] = "";
                listing[l + 9] = "";
                listing[l + 10] = "";
                listing[l + 11] = "";
                l += 6;
              };
              if (elf === 0x96B92E8) {
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tsub " + GetARG(0,x,true);
                listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tsbc " + GetARG(1,x,true);
                listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tsbc " + GetARG(2,x,true);
                listing[l + 8] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 9] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 10] = "\tsbc " + GetARG(3,x,true);
                listing[l + 11] = "\tsta " + GetARG(3,x - 1,true);
                l += 12;
              };
              if (elf === 0xA86250C) {
                if ((pas.System.Pos(",y",s[x - 1][0]) > 0) || (pas.System.Pos(",y",s[x][0]) > 0)) {
                  x = 30;
                  break;
                };
                s[x][1] = "";
                s[x][2] = "";
                s[x][3] = "";
                s[x - 1][1] = "\tmva #$00";
                s[x - 1][2] = "\tmva #$00";
                s[x - 1][3] = "\tmva #$00";
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tadd " + GetARG(0,x,true);
                listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tadc #$00";
                listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tadc #$00";
                listing[l + 8] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 9] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 10] = "\tadc #$00";
                listing[l + 11] = "\tsta " + GetARG(3,x - 1,true);
                listing[l + 3] = "";
                listing[l + 4] = "";
                listing[l + 5] = "";
                listing[l + 6] = "";
                listing[l + 7] = "";
                listing[l + 8] = "";
                listing[l + 9] = "";
                listing[l + 10] = "";
                listing[l + 11] = "";
                l += 3;
              };
              if (elf === 0xA86E5F8) {
                s[x][2] = "";
                s[x][3] = "";
                s[x - 1][2] = "\tmva #$00";
                s[x - 1][3] = "\tmva #$00";
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tadd " + GetARG(0,x,true);
                listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tadc " + GetARG(1,x,true);
                listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tadc #$00";
                listing[l + 8] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 9] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 10] = "\tadc #$00";
                listing[l + 11] = "\tsta " + GetARG(3,x - 1,true);
                listing[l + 6] = "";
                listing[l + 7] = "";
                listing[l + 8] = "";
                listing[l + 9] = "";
                listing[l + 10] = "";
                listing[l + 11] = "";
                l += 6;
              };
              if (elf === 0x96C4308) {
                listing[l] = "\tlda " + GetARG(0,x - 1,true);
                listing[l + 1] = "\tadd " + GetARG(0,x,true);
                listing[l + 2] = "\tsta " + GetARG(0,x - 1,true);
                listing[l + 3] = "\tlda " + GetARG(1,x - 1,true);
                listing[l + 4] = "\tadc " + GetARG(1,x,true);
                listing[l + 5] = "\tsta " + GetARG(1,x - 1,true);
                listing[l + 6] = "\tlda " + GetARG(2,x - 1,true);
                listing[l + 7] = "\tadc " + GetARG(2,x,true);
                listing[l + 8] = "\tsta " + GetARG(2,x - 1,true);
                listing[l + 9] = "\tlda " + GetARG(3,x - 1,true);
                listing[l + 10] = "\tadc " + GetARG(3,x,true);
                listing[l + 11] = "\tsta " + GetARG(3,x - 1,true);
                l += 12;
              };
            } else if (elf === 0x4746C5) {}
            else if (elf === 0x58D0867) {}
            else if (elf === 0x44A824C) {}
            else if (elf === 0x44B931) {}
            else if (elf === 0x94C6F26) {}
            else if (elf === 0x9B849A6) {}
            else if (elf === 0xFEB1076) {}
            else if (elf === 0x94C77F4) {}
            else if (elf === 0x9B85174) {}
            else if (elf === 0xFEB2AA4) {}
            else if (elf === 0xE886C96) {}
            else if (elf === 0x4676D26) {}
            else if (elf === 0x6294046) {}
            else if (elf === 0xE887644) {}
            else if (elf === 0x46775F4) {}
            else if (elf === 0x6295A94) {}
            else if (elf === 0xE965FAC) {}
            else if (elf === 0x96287FC) {}
            else if (elf === 0xE9645D6) {}
            else if (elf === 0x9627D86) {}
            else if (elf === 0x2042144) {}
            else if (elf === 0x63448B3) {}
            else if (elf === 0x20C1143) {}
            else if (elf === 0x627E0C3) {}
            else if (elf === 0x44B29C) {}
            else if (elf === 0x44A8E6) {}
            else if (elf === 0x44A584) {}
            else if (elf === 0x44B892) {}
            else if (elf === 0x44C66) {}
            else if (elf === 0x44969) {}
            else if (elf === 0x44AB653) {}
            else if (elf === 0x4B74A64) {}
            else if (elf === 0x94C3D21) {}
            else if (elf === 0x94C31C4) {}
            else if (elf === 0x94C4CD2) {}
            else if (elf === 0x94C46DC) {}
            else if (elf === 0x94C3CA6) {}
            else if (elf === 0x94C3A74) {}
            else if (elf === 0xC430164) {}
            else if (elf === 0x4C3F2C3) {}
            else if (elf === 0x94C3826) {}
            else if (elf === 0x494C3E1) {}
            else if (elf === 0x494C384) {}
            else if (elf === 0x94C38C5) {}
            else {
              x = 51;
              break;
            };
          };
          if (t !== "") {
            if (pas.System.Pos("(:bp),",t) === 0) {
              if (pas.System.Pos(":STACKORIGIN,",t) > 7) {
                s[x][0] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",s[x][0]) > 0) {
                  listing[l] = "\tlda " + GetARG(0,x,true);
                  listing[l + 1] = "\tsta " + GetARG(0,x,true);
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,",t) > 7) {
                s[x][1] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",s[x][1]) > 0) {
                  listing[l] = "\tlda " + GetARG(1,x,true);
                  listing[l + 1] = "\tsta " + GetARG(1,x,true);
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,",t) > 7) {
                s[x][2] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",s[x][2]) > 0) {
                  listing[l] = "\tlda " + GetARG(2,x,true);
                  listing[l + 1] = "\tsta " + GetARG(2,x,true);
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,",t) > 7) {
                s[x][3] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",s[x][3]) > 0) {
                  listing[l] = "\tlda " + GetARG(3,x,true);
                  listing[l + 1] = "\tsta " + GetARG(3,x,true);
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,",t) > 7) {
                s[x - 1][1] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,",t) > 7) {
                s[x - 1][2] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,",t) > 7) {
                s[x - 1][3] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH,",t) > 7) {
                s[x + 1][1] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*2,",t) > 7) {
                s[x + 1][2] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*3,",t) > 7) {
                s[x + 1][3] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
            };
            if (pas.System.Pos(":STACKORIGIN,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,14);
              arg0 = GetARG(0,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,25);
              arg0 = GetARG(1,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,27);
              arg0 = GetARG(2,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,27);
              arg0 = GetARG(3,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN-1,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(0,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(1,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(2,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(3,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN+1,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(0,x + 1,true);
            if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(1,x + 1,true);
            if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*2,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(2,x + 1,true);
            if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*3,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(3,x + 1,true);
            if (t !== "") {
              listing[l] = t;
              l += 1;
            };
          };
        };
      };
      if ((x === 0) && inxUse) {
        if (pas.Common.optimize.line !== pas.Common.optimize.old) {
          $mod.WriteOut("");
          $mod.WriteOut("; optimize OK (" + pas.Common.UnitName[pas.Common.optimize.unitIndex - 1].Name + "), line = " + pas.Common.IntToStr(pas.Common.optimize.line));
          $mod.WriteOut("");
          pas.Common.optimize.old = pas.Common.optimize.line;
        };
        do {
          OptimizeAssignment();
          do {
          } while (!OptimizeRelation());
          OptimizeAssignment();
        } while (!OptimizeRelation());
        if (OptimizeEAX()) {
          OptimizeAssignment();
          OptimizeEAX_OFF();
          OptimizeAssignment();
        };
        found = false;
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (pas.System.Pos("@FORTMP_",listing[i]) > 0) if (MVA_IM(i)) {
            found = true;
            if (pas.System.Pos("+3",listing[i]) > 0) {
              pas.Common.optyFOR3 = listing[i]}
             else if (pas.System.Pos("+2",listing[i]) > 0) {
              pas.Common.optyFOR2 = listing[i]}
             else if (pas.System.Pos("+1",listing[i]) > 0) {
              pas.Common.optyFOR1 = listing[i]}
             else pas.Common.optyFOR0 = listing[i];
            listing[i] = "";
          } else if (CMP(i) || SUB(i) || SBC(i)) {
            found = true;
            if (CMP(i)) arg0 = "\tcmp ";
            if (SUB(i)) arg0 = "\tsub ";
            if (SBC(i)) arg0 = "\tsbc ";
            if (pas.System.Pos("+3",listing[i]) > 0) {
              if (pas.System.Pos(pas.System.Copy(listing[i],6,256),pas.Common.optyFOR3) > 0) listing[i] = arg0 + GetString(pas.Common.optyFOR3);
            } else if (pas.System.Pos("+2",listing[i]) > 0) {
              if (pas.System.Pos(pas.System.Copy(listing[i],6,256),pas.Common.optyFOR2) > 0) listing[i] = arg0 + GetString(pas.Common.optyFOR2);
            } else if (pas.System.Pos("+1",listing[i]) > 0) {
              if (pas.System.Pos(pas.System.Copy(listing[i],6,256),pas.Common.optyFOR1) > 0) listing[i] = arg0 + GetString(pas.Common.optyFOR1);
            } else if (pas.System.Pos(pas.System.Copy(listing[i],6,256),pas.Common.optyFOR0) > 0) listing[i] = arg0 + GetString(pas.Common.optyFOR0);
          };
        };
        if (found) {
          Rebuild();
          if (l > 0) {
            if ((l === 3) && LDA_A(0) && CMP_IM_0(1) && (pas.System.Pos("\tjcc l_",listing[2]) > 0)) {
              listing[0] = "\t#for:dec " + pas.System.Copy(listing[0],6,256);
              listing[1] = "\t#for";
              listing[2] = "";
            };
            if ((l === 5) && LDA_A(0) && CMP(1) && (CMP_IM(1) === false) && (listing[2] === "\tbcc *+7") && (listing[3] === "\tbeq *+5") && JMP(4)) {
              listing[2] = "\tlda " + pas.System.Copy(listing[1],6,256);
              listing[3] = "\tcmp " + pas.System.Copy(listing[0],6,256);
              listing[4] = "\tjcc " + pas.System.Copy(listing[4],6,256);
              listing[0] = "";
              listing[1] = "";
            };
            if ((l === 5) && LDA_A(0) && CMP_IM(1) && (listing[2] === "\tbcc *+7") && (listing[3] === "\tbeq *+5") && JMP(4)) {
              k = GetBYTE(1) + 1;
              if (k < 0x100) {
                if (k === 0x80) {
                  listing[1] = "";
                  listing[2] = "";
                  listing[3] = "";
                  listing[4] = "\tjmi " + pas.System.Copy(listing[4],6,256);
                } else {
                  listing[1] = "\tcmp #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                  listing[2] = "";
                  listing[3] = "";
                  listing[4] = "\tjcs " + pas.System.Copy(listing[4],6,256);
                };
              } else {
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
                listing[4] = "";
              };
            };
            if ((l === 7) && LDA_A(0) && CMP_IM_0(1) && BNE_A(2) && LDA_A(3) && CMP_IM_0(4) && LAB_A(5) && (pas.System.Pos("\tjcc l_",listing[6]) > 0)) {
              listing[0] = "";
              listing[1] = "";
              listing[2] = "";
              listing[3] = "";
              listing[4] = "";
              listing[5] = "";
              listing[6] = "";
            };
            if ((l === 7) && LDA_A(0) && (LDA_IM(0) === false) && SUB_IM(1) && SVC(2) && (listing[3] === "\teor #$80") && (listing[4] === "\tbmi *+7") && (listing[5] === "\tbeq *+5") && JMP(6)) {
              k = GetBYTE(1) + 1;
              if (k !== 0x80) {
                listing[1] = "\tsub #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[4] = "\tasl @";
                listing[5] = "\tjcc " + pas.System.Copy(listing[6],6,256);
                listing[6] = "";
              };
            };
            if ((l === 6) && LDA_A(0) && (LDA_IM(0) === false) && SUB_IM(1) && SVC(2) && (listing[3] === "\teor #$80") && (listing[4] === "\tbpl *+5") && JMP(5)) {
              listing[4] = "\tjmi " + pas.System.Copy(listing[5],6,256);
              listing[5] = "";
            };
            if ((l === 9) && LDA_A(0) && CMP_IM(1) && BNE_A(2) && LDA_A(3) && CMP_IM(4) && LAB_A(5) && (listing[6] === "\tbcc *+7") && (listing[7] === "\tbeq *+5") && JMP(8)) {
              k = (GetBYTE(1) << 8) + GetBYTE(4);
              if (k === 0xFFFF) {
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
                listing[4] = "";
                listing[5] = "";
                listing[6] = "";
                listing[7] = "";
                listing[8] = "";
              } else {
                listing[5] = listing[4];
                listing[4] = listing[3];
                listing[3] = "\tjne " + pas.System.Copy(listing[8],6,256);
                listing[2] = "\tbcc @+";
                listing[6] = "\tbcc @+";
                listing[7] = listing[3];
                listing[8] = "@";
              };
            };
            if ((l === 9) && LDA_A(0) && CMP(1) && (CMP_IM(1) === false) && BNE_A(2) && LDA_A(3) && CMP(4) && (CMP_IM(4) === false) && LAB_A(5) && (listing[6] === "\tbcc *+7") && (listing[7] === "\tbeq *+5") && JMP(8)) {
              listing[7] = "@";
              listing[8] = "\tjcc " + pas.System.Copy(listing[8],6,256);
              listing[5] = "\tlda " + pas.System.Copy(listing[4],6,256);
              listing[6] = "\tcmp " + pas.System.Copy(listing[3],6,256);
              listing[4] = "\tbne @+";
              listing[2] = "\tlda " + pas.System.Copy(listing[1],6,256);
              listing[3] = "\tcmp " + pas.System.Copy(listing[0],6,256);
              listing[0] = "";
              listing[1] = "";
            };
            if ((l === 15) && LDA_A(0) && CMP(1) && (CMP_IM(1) === false) && BNE_A(2) && LDA_A(3) && CMP(4) && (CMP_IM(4) === false) && BNE_A(5) && LDA_A(6) && CMP(7) && (CMP_IM(7) === false) && BNE_A(8) && LDA_A(9) && CMP(10) && (CMP_IM(10) === false) && LAB_A(11) && (listing[12] === "\tbcc *+7") && (listing[13] === "\tbeq *+5") && JMP(14)) {
              listing[13] = "@";
              listing[14] = "\tjcc " + pas.System.Copy(listing[14],6,256);
              listing[11] = "\tlda " + pas.System.Copy(listing[10],6,256);
              listing[12] = "\tcmp " + pas.System.Copy(listing[9],6,256);
              listing[8] = "\tlda " + pas.System.Copy(listing[7],6,256);
              listing[9] = "\tcmp " + pas.System.Copy(listing[6],6,256);
              listing[10] = "\tbne @+";
              listing[5] = "\tlda " + pas.System.Copy(listing[4],6,256);
              listing[6] = "\tcmp " + pas.System.Copy(listing[3],6,256);
              listing[7] = "\tbne @+";
              listing[2] = "\tlda " + pas.System.Copy(listing[1],6,256);
              listing[3] = "\tcmp " + pas.System.Copy(listing[0],6,256);
              listing[4] = "\tbne @+";
              listing[0] = "";
              listing[1] = "";
            };
            if ((l === 13) && LDA_A(0) && CMP_IM_0(1) && BNE_A(2) && LDA_A(3) && CMP_IM_0(4) && BNE_A(5) && LDA_A(6) && CMP_IM_0(7) && BNE_A(8) && LDA_A(9) && CMP_IM_0(10) && LAB_A(11) && (pas.System.Pos("\tjcc l_",listing[12]) > 0)) {
              listing[0] = "";
              listing[1] = "";
              listing[2] = "";
              listing[3] = "";
              listing[4] = "";
              listing[5] = "";
              listing[6] = "";
              listing[7] = "";
              listing[8] = "";
              listing[9] = "";
              listing[10] = "";
              listing[11] = "";
              listing[12] = "";
            };
            if ((l === 15) && LDA_A(0) && (listing[1] === "\tcmp #$FF") && BNE_A(2) && LDA_A(3) && (listing[4] === "\tcmp #$FF") && BNE_A(5) && LDA_A(6) && (listing[7] === "\tcmp #$FF") && BNE_A(8) && LDA_A(9) && (listing[10] === "\tcmp #$FF") && LAB_A(11) && (listing[12] === "\tbcc *+7") && (listing[13] === "\tbeq *+5") && JMP(14)) {
              listing[0] = "";
              listing[1] = "";
              listing[2] = "";
              listing[3] = "";
              listing[4] = "";
              listing[5] = "";
              listing[6] = "";
              listing[7] = "";
              listing[8] = "";
              listing[9] = "";
              listing[10] = "";
              listing[11] = "";
              listing[12] = "";
              listing[13] = "";
              listing[14] = "";
            };
            if ((l === 20) && LOCAL(0) && LDA_A(1) && (LDA_IM(1) === false) && SUB_IM(2) && (listing[3] === "\tbne L4") && LDA_A(4) && (LDA_IM(4) === false) && CMP_IM(5) && (listing[6] === "L1\tbeq L5") && (listing[7] === "\tbcs L3") && (listing[8] === "\tlda #$FF") && (listing[9] === "\tbne L5") && (listing[10] === "L3\tlda #$01") && (listing[11] === "\tbne L5") && (listing[12] === "L4\tbvc L5") && (listing[13] === "\teor #$FF") && (listing[14] === "\tora #$01") && (listing[15] === "L5") && ENDL(16) && (listing[17] === "\tbmi *+7") && (listing[18] === "\tbeq *+5") && JMP(19)) {
              k = (GetBYTE(2) << 8) + GetBYTE(5) + 1;
              if (k !== 0x8000) {
                listing[5] = "\tcmp #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[6] = listing[1];
                listing[7] = "\tsbc #$" + pas.SysUtils.IntToHex((k >>> 8) & 255,2);
                listing[8] = "\tsvc";
                listing[9] = "\teor #$80";
                listing[10] = "\tasl @";
                listing[11] = "\tjcc " + pas.System.Copy(listing[19],6,256);
                listing[12] = "";
                listing[13] = "";
                listing[14] = "";
                listing[15] = "";
                listing[16] = "";
                listing[17] = "";
                listing[18] = "";
                listing[19] = "";
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
              };
            };
            if ((l === 19) && LOCAL(0) && LDA_A(1) && (LDA_IM(1) === false) && SUB_IM(2) && (listing[3] === "\tbne L4") && LDA_A(4) && (LDA_IM(4) === false) && CMP_IM(5) && (listing[6] === "L1\tbeq L5") && (listing[7] === "\tbcs L3") && (listing[8] === "\tlda #$FF") && (listing[9] === "\tbne L5") && (listing[10] === "L3\tlda #$01") && (listing[11] === "\tbne L5") && (listing[12] === "L4\tbvc L5") && (listing[13] === "\teor #$FF") && (listing[14] === "\tora #$01") && (listing[15] === "L5") && ENDL(16) && (listing[17] === "\tbpl *+5") && JMP(18)) {
              k = (GetBYTE(2) << 8) + GetBYTE(5);
              if (k !== 0x8000) {
                listing[5] = "\tcmp #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[6] = listing[1];
                listing[7] = "\tsbc #$" + pas.SysUtils.IntToHex((k >>> 8) & 255,2);
                listing[8] = "\tsvc";
                listing[9] = "\teor #$80";
                listing[10] = "\tjmi " + pas.System.Copy(listing[18],6,256);
                listing[11] = "";
                listing[12] = "";
                listing[13] = "";
                listing[14] = "";
                listing[15] = "";
                listing[16] = "";
                listing[17] = "";
                listing[18] = "";
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
              };
            };
          };
        };
        Rebuild();
        for (var $l2 = 0, $end2 = l - 1; $l2 <= $end2; $l2++) {
          i = $l2;
          if (MVA_IM(i) || (MVA(i) && (pas.System.Pos("\tmva adr.",listing[i]) === 0) && (pas.System.Pos(":STACK",listing[i]) === 0) && (IY(i) === false)) || (LDA_VAL(i) && (IY(i) === false))) {
            arg0 = GetString$1(i);
            if (SKIP(i + 1) || ((i > 0) && (LOCAL(i - 1) || (SKIP(i - 1) && LDA_IM(i))))) {}
            else if (arg0 === pas.Common.optyA) if (MVA(i)) {
              listing[i] = "\tsta " + GetStringLast(i)}
             else listing[i] = "";
            pas.Common.optyA = arg0;
          } else if (MVA(i) && (IY(i) === false)) {
            if (MVA_STACK(i)) {
              arg0 = ""}
             else {
              arg0 = listing[i];
              k = listing[i].length;
              while (arg0.charAt(k - 1) !== " ") k -= 1;
              arg0 = pas.System.Copy(arg0,k + 1,256);
            };
            pas.Common.optyA = arg0;
          } else if (TYA(i) || AND_ORA_EOR(i) || ADD_SUB(i) || ADC_SBC(i) || ASL(i) || LSR(i) || ROL(i) || ROR(i)) {
            if ((STA(i + 1) || STA_ADR(i + 1)) && (IY(i + 1) === false)) {
              arg0 = GetString$1(i + 1)}
             else arg0 = "";
            pas.Common.optyA = arg0;
          } else if (((pas.Common.optyA !== "") && STY(i) && (listing[i] === ("\tsty " + pas.Common.optyA))) || LDA_A(i) || MVA(i) || MWA(i) || TYA(i) || LAB_A(i) || JSR(i) || LAB_L(i) || LAB_B(i) || LAB_C(i) || (pas.System.Pos("\t.if",listing[i]) > 0)) {
            arg0 = "";
            pas.Common.optyA = "";
          };
        };
        Rebuild();
        i = 0;
        k = 0;
        while (i < l) {
          if (MWY_BP2(i) || (LDA_A(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_BP2(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC(i + 4) && STA_BP2_1(i + 5)) || (LDA_A(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && TAY(i + 2) && (listing[i + 3] === (listing[i] + "+1")) && ADC(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6)) || (LDA_VAL(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (listing[i] === (listing[i + 2] + "+1")) && ASL_A(i + 3) && ROL_STACK(i + 4) && ADD(i + 5) && (ADD_STACK(i + 5) === false) && STA_BP2(i + 6) && LDA_A(i + 7) && ADC_STACK(i + 8) && STA_BP2_1(i + 9) && (pas.System.Copy(listing[i + 7],6,256) === (pas.System.Copy(listing[i + 5],6,256) + "+1")) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 4],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 8],6,256))) || (LDA_VAL(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (listing[i + 2] === (listing[i] + "+1")) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_STACK(i + 7) && STA_BP2(i + 8) && LDA_A(i + 9) && ADC_STACK(i + 10) && STA_BP2_1(i + 11) && (pas.System.Copy(listing[i + 9],6,256) === (pas.System.Copy(listing[i + 6],6,256) + "+1")) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 7],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 10],6,256))) || (LDA_VAL(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (listing[i + 2] === (listing[i] + "+1")) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_TMP(i + 8) && LDA_STACK(i + 9) && ADC(i + 10) && STA_TMP_1(i + 11) && LDY_IM_0(i + 12) && (listing[i + 13] === "\tmva (:TMP),y :bp2") && INY(i + 14) && (listing[i + 15] === "\tmva (:TMP),y :bp2+1") && (pas.System.Copy(listing[i + 10],6,256) === (pas.System.Copy(listing[i + 7],6,256) + "+1")) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 3],6,256)) && (pas.System.Copy(listing[i + 1],6,256) === pas.System.Copy(listing[i + 6],6,256)) && (pas.System.Copy(listing[i + 5],6,256) === pas.System.Copy(listing[i + 9],6,256)))) {
            if (LDA_BP_Y(i + 6)) {}
            else if (STA_TMP_1(i + 11) && ASL_STACK(i + 3) && ROL_A(i + 4)) {
              arg0 = "];" + GetString$1(i) + ";" + GetString$1(i + 2) + ";" + GetString$1(i + 7) + ";" + GetString$1(i + 10) + ";";
              k = 16;
            } else if (ASL_STACK(i + 3) && ROL_A(i + 4)) {
              arg0 = "&;" + GetString$1(i) + ";" + GetString$1(i + 2) + ";" + GetString$1(i + 6) + ";" + GetString$1(i + 9) + ";";
              k = 12;
            } else if (ASL_A(i + 3) && ROL_STACK(i + 4)) {
              arg0 = "%;" + GetString$1(i) + ";" + GetString$1(i + 2) + ";" + GetString$1(i + 5) + ";" + GetString$1(i + 7) + ";";
              k = 10;
            } else if (LDA_A(i)) {
              arg0 = "+;" + GetString$1(i) + ";" + GetString$1(i + 1) + ";" + GetString$1(i + 3) + ";" + GetString$1(i + 4) + ";";
              k = 6;
            } else {
              arg0 = listing[i];
              arg0 = rtl.setCharAt(arg0,3,"?");
              k = 1;
            };
            if (LDA_BP_Y(i + 6)) {
              arg0 = "+;" + GetString$1(i) + ";" + GetString$1(i + 1) + ";" + GetString$1(i + 3) + ";" + GetString$1(i + 4) + ";";
              if (arg0 === pas.Common.optyBP2) {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "\tldy #$00";
                listing[i + 6] = "\tlda (:bp2),y";
                k = 7;
              } else {
                arg0 = pas.Common.optyBP2;
                k = 1;
              };
            } else if (arg0 === pas.Common.optyBP2) {
              if (arg0.charAt(0) === "]") {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
                listing[i + 12] = "";
                listing[i + 13] = "";
                listing[i + 14] = "";
                listing[i + 15] = "";
              } else if (arg0.charAt(0) === "&") {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
                listing[i + 10] = "";
                listing[i + 11] = "";
              } else if (arg0.charAt(0) === "%") {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "";
                listing[i + 6] = "";
                listing[i + 7] = "";
                listing[i + 8] = "";
                listing[i + 9] = "";
              } else if (arg0.charAt(0) === "+") {
                listing[i] = "";
                listing[i + 1] = "";
                listing[i + 2] = "";
                listing[i + 3] = "";
                listing[i + 4] = "";
                listing[i + 5] = "";
              } else listing[i] = "";
            };
            pas.Common.optyBP2 = arg0;
            i += k;
          } else {
            if ((pas.Common.optyBP2 !== "") && (STA_A(i) || STY(i) || ASL(i) || ROL(i) || LSR(i) || ROR(i) || INC_(i) || DEC_(i))) if ((pas.System.Pos("? " + pas.System.Copy(listing[i],6,256) + " ",pas.Common.optyBP2) > 0) || (pas.System.Pos(";" + pas.System.Copy(listing[i],6,256) + ";",pas.Common.optyBP2) > 0)) pas.Common.optyBP2 = "";
            if (STA_BP2(i) || STA_BP2_1(i) || JSR(i) || LAB_L(i) || LAB_B(i) || LAB_C(i)) pas.Common.optyBP2 = "";
            i += 1;
          };
        };
        Rebuild();
        for (var $l3 = 0, $end3 = l - 1; $l3 <= $end3; $l3++) {
          i = $l3;
          if (LDY_VAL(i)) {
            arg0 = GetString$1(i);
            if (LDY_IM_0(i) && LDA(i + 1) && SPL(i + 2)) {
              arg0 = "";
              pas.Common.optyY = "";
            } else if (arg0 === pas.Common.optyY) {
              listing[i] = ""}
             else {
              if ((pas.Common.optyY !== "") && (pas.System.Pos("#$",pas.Common.optyY) === 1) && (pas.System.Pos("#$",arg0) === 1)) {
                k = pas.Common.StrToInt(pas.System.Copy(arg0,2,256)) - pas.Common.StrToInt(pas.System.Copy(pas.Common.optyY,2,256));
                if (k === 1) {
                  listing[i] = "\tiny"}
                 else if (k === -1) listing[i] = "\tdey";
              };
              pas.Common.optyY = arg0;
            };
          } else if (INY(i)) {
            if (SKIP(i - 1)) {
              arg0 = "";
              pas.Common.optyY = "";
            } else if (pas.Common.optyY !== "") if ((pas.Common.optyY.charAt(0) === "#") && (pas.Common.optyY.charAt(1) === "$")) {
              pas.Common.optyY = "#$" + pas.SysUtils.IntToHex((pas.Common.StrToInt(pas.System.Copy(pas.Common.optyY,2,256)) + 1) & 255,2)}
             else pas.Common.optyY = "+#$01" + pas.Common.optyY;
          } else if (DEY(i)) {
            if (SKIP(i - 1)) {
              arg0 = "";
              pas.Common.optyY = "";
            } else if (pas.Common.optyY !== "") if ((pas.Common.optyY.charAt(0) === "#") && (pas.Common.optyY.charAt(1) === "$")) {
              pas.Common.optyY = "#$" + pas.SysUtils.IntToHex((pas.Common.StrToInt(pas.System.Copy(pas.Common.optyY,2,256)) - 1) & 255,2)}
             else pas.Common.optyY = "-#$01" + pas.Common.optyY;
          } else if (TAY(i)) {
            if ((i > 1) && ((ADD_SUB_VAL(i - 1) && (ADC_SBC(i + 2) === false) && LDA_VAL(i - 2) && (IY(i - 2) === false)) || (ASL_A(i - 1) && LDA_VAL(i - 2) && (IY(i - 2) === false)) || ((i > 2) && ASL_A(i - 1) && ASL_A(i - 2) && LDA_VAL(i - 3) && (IY(i - 3) === false)) || ((i > 3) && ASL_A(i - 1) && ASL_A(i - 2) && ASL_A(i - 3) && LDA_VAL(i - 4) && (IY(i - 4) === false)) || ((i > 2) && ADD(i - 1) && ASL_A(i - 2) && LDA_VAL(i - 3) && (pas.System.Copy(listing[i - 1],6,256) === pas.System.Copy(listing[i - 3],6,256)) && (IY(i - 3) === false)) || ((i > 5) && ADD(i - 1) && ASL_A(i - 2) && ADD(i - 3) && ASL_A(i - 4) && ASL_A(i - 5) && LDA_VAL(i - 6) && (pas.System.Copy(listing[i - 3],6,256) === pas.System.Copy(listing[i - 6],6,256)) && (IY(i - 6) === false)))) {
              if (ADD_IM(i - 1) && LDA_A(i - 2)) arg0 = "+" + pas.System.Copy(listing[i - 1],6,256) + GetString$1(i - 2);
              if (SUB_IM(i - 1) && LDA_A(i - 2)) arg0 = "-" + pas.System.Copy(listing[i - 1],6,256) + GetString$1(i - 2);
              if (ADD(i - 1) && (ADD_IM(i - 1) === false) && LDA_A(i - 2)) if (GetString$1(i - 1) >= GetString$1(i - 2)) {
                arg0 = "*+$01" + GetString$1(i - 1) + "|" + GetString$1(i - 2)}
               else arg0 = "*+$01" + GetString$1(i - 2) + "|" + GetString$1(i - 1);
              if (SUB(i - 1) && (SUB_IM(i - 1) === false) && LDA_A(i - 2)) if (GetString$1(i - 1) >= GetString$1(i - 2)) {
                arg0 = "*-$01" + GetString$1(i - 1) + "|" + GetString$1(i - 2)}
               else arg0 = "*-$01" + GetString$1(i - 2) + "|" + GetString$1(i - 1);
              if (ASL_A(i - 1) && LDA_A(i - 2)) arg0 = "*#$02" + GetString$1(i - 2);
              if ((i > 2) && ASL_A(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) arg0 = "*#$04" + GetString$1(i - 3);
              if ((i > 3) && ASL_A(i - 1) && ASL_A(i - 2) && ASL_A(i - 3) && LDA_A(i - 4)) arg0 = "*#$08" + GetString$1(i - 4);
              if ((i > 2) && ADD(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) arg0 = "*#$03" + GetString$1(i - 3);
              if ((i > 5) && ADD(i - 1) && ASL_A(i - 2) && ADD(i - 3) && ASL_A(i - 4) && ASL_A(i - 5) && LDA_A(i - 6)) arg0 = "*#$0A" + GetString$1(i - 6) + "+" + GetString$1(i - 1);
              if (arg0 === pas.Common.optyY) {
                if ((i > 5) && ADD(i - 1) && ASL_A(i - 2) && ADD(i - 3) && ASL_A(i - 4) && ASL_A(i - 5) && LDA_A(i - 6)) {
                  listing[i - 6] = "";
                  listing[i - 5] = "";
                  listing[i - 4] = "";
                  listing[i - 3] = "";
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "";
                } else if ((i > 3) && ASL_A(i - 1) && ASL_A(i - 2) && ASL_A(i - 3) && LDA_A(i - 4)) {
                  listing[i - 4] = "";
                  listing[i - 3] = "";
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "";
                } else if ((i > 2) && ADD(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) {
                  listing[i - 3] = "";
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "";
                } else if ((i > 2) && ASL_A(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) {
                  listing[i - 3] = "";
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "";
                } else {
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "";
                };
              } else if ((pas.Common.optyY !== "") && (arg0.charAt(0) === "+") && (pas.Common.optyY.charAt(0) === "+")) {
                k = pas.Common.StrToInt(pas.System.Copy(arg0,3,3)) - pas.Common.StrToInt(pas.System.Copy(pas.Common.optyY,3,3));
                if (k === 1) {
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "\tiny";
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    listing[i + 1] = "";
                    listing[i + 2] = "";
                    listing[i + 3] = "";
                  };
                } else if (k === -1) {
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "\tdey";
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    listing[i + 1] = "";
                    listing[i + 2] = "";
                    listing[i + 3] = "";
                  };
                };
              } else if ((pas.Common.optyY !== "") && (arg0.charAt(0) === "-") && (pas.Common.optyY.charAt(0) === "-")) {
                k = pas.Common.StrToInt(pas.System.Copy(arg0,3,3)) - pas.Common.StrToInt(pas.System.Copy(pas.Common.optyY,3,3));
                if (k === 1) {
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "\tdey";
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    listing[i + 1] = "";
                    listing[i + 2] = "";
                    listing[i + 3] = "";
                  };
                } else if (k === -1) {
                  listing[i - 2] = "";
                  listing[i - 1] = "";
                  listing[i] = "\tiny";
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    listing[i + 1] = "";
                    listing[i + 2] = "";
                    listing[i + 3] = "";
                  };
                };
              };
              pas.Common.optyY = arg0;
            } else {
              arg0 = "";
              pas.Common.optyY = "";
            };
          } else if (LabelIsUsed(i) || INY(i) || DEY(i) || TAY(i) || LDY_STACK(i) || MVY(i) || MWY(i) || JSR(i) || (pas.System.Pos(",y-",listing[i]) > 0) || (pas.System.Pos(",y+",listing[i]) > 0) || ((pas.Common.optyA !== "") && (pas.Common.optyA === pas.Common.optyY)) || LAB_L(i) || LAB_B(i) || LAB_C(i) || (pas.System.Pos("\t.if",listing[i]) > 0)) {
            arg0 = "";
            pas.Common.optyY = "";
          };
        };
        for (var $l4 = 0, $end4 = l - 1; $l4 <= $end4; $l4++) {
          i = $l4;
          if (listing[i] !== "") WriteInstruction(i);
        };
      } else {
        l = rtl.length(pas.Common.OptimizeBuf) - 1;
        if (l > 1023) {
          pas.System.Writeln("Out of resources, LISTING");
          pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
        };
        for (var $l5 = 0, $end5 = l - 1; $l5 <= $end5; $l5++) {
          i = $l5;
          listing[i] = pas.Common.OptimizeBuf[i];
        };
        do {
        } while (!PeepholeOptimization_STACK());
        if (pas.Common.optyA !== "") for (var $l6 = 0, $end6 = l - 1; $l6 <= $end6; $l6++) {
          i = $l6;
          if ((listing[i] === ("\tinc " + pas.Common.optyA)) || (listing[i] === ("\tdec " + pas.Common.optyA)) || LDA(i) || LDA_ADR(i) || MVA(i) || MWA(i) || TYA(i) || LAB_A(i) || JSR(i) || (pas.System.Pos("\tjmp ",listing[i]) > 0) || (pas.System.Pos("\t.if",listing[i]) > 0)) {
            pas.Common.optyA = "";
            break;
          };
        };
        if (pas.Common.optyY !== "") for (var $l7 = 0, $end7 = l - 1; $l7 <= $end7; $l7++) {
          i = $l7;
          if (LabelIsUsed(i) || LDY(i) || MVY(i) || MWY(i) || INY(i) || DEY(i) || TAY(i) || LAB_A(i) || JSR(i) || (pas.System.Pos("\tjmp ",listing[i]) > 0) || (pas.System.Pos("\t.if",listing[i]) > 0)) {
            pas.Common.optyY = "";
            break;
          };
        };
        if (pas.Common.optyBP2 !== "") for (var $l8 = 0, $end8 = l - 1; $l8 <= $end8; $l8++) {
          i = $l8;
          if ((pas.Common.optyBP2 !== "") && (STA_A(i) || STY(i) || ASL(i) || ROL(i) || LSR(i) || ROR(i) || INC_(i) || DEC_(i))) if ((pas.System.Pos("? " + pas.System.Copy(listing[i],6,256) + " ",pas.Common.optyBP2) > 0) || (pas.System.Pos(";" + pas.System.Copy(listing[i],6,256) + ";",pas.Common.optyBP2) > 0)) {
            pas.Common.optyBP2 = "";
            break;
          };
          if (STA_BP2(i) || STA_BP2_1(i) || JSR(i) || (pas.System.Pos("\tjmp ",listing[i]) > 0)) {
            pas.Common.optyBP2 = "";
            break;
          };
        };
        if (pas.Common.optimize.line !== pas.Common.optimize.old) {
          $mod.WriteOut("");
          if (x === 51) {
            $mod.WriteOut("; optimize FAIL (" + "'" + arg0 + "'" + ", " + pas.Common.UnitName[pas.Common.optimize.unitIndex - 1].Name + "), line = " + pas.Common.IntToStr(pas.Common.optimize.line))}
           else $mod.WriteOut("; optimize FAIL (" + pas.Common.IntToStr(x) + ", " + pas.Common.UnitName[pas.Common.optimize.unitIndex - 1].Name + "), line = " + pas.Common.IntToStr(pas.Common.optimize.line));
          $mod.WriteOut("");
          pas.Common.optimize.old = pas.Common.optimize.line;
        };
        for (var $l9 = 0, $end9 = l - 1; $l9 <= $end9; $l9++) {
          i = $l9;
          WriteInstruction(i);
        };
      };
      pas.Common.OptimizeBuf = rtl.arraySetLength(pas.Common.OptimizeBuf,"",1);
    };
  };
},["SysUtils","Common","Console","StringUtilities","Utilities"]);
rtl.module("Parser",["System","Common","Numbers"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  var FieldInListName$a$clone = function (a) {
    var b = [];
    b.length = 256;
    for (var c = 0; c < 256; c++) b[c] = pas.Common.TField.$clone(a[c]);
    return b;
  };
  this.CompileType = function (i, DataType, NumAllocElements, AllocElementType) {
    var Result = 0;
    var NestedNumAllocElements = 0;
    var NestedFunctionNumAllocElements = 0;
    var LowerBound = 0;
    var UpperBound = 0;
    var ConstVal = 0;
    var IdentIndex = 0;
    var NumFieldsInList = 0;
    var FieldInListIndex = 0;
    var RecType = 0;
    var k = 0;
    var j = 0;
    var NestedDataType = 0;
    var ExpressionType = 0;
    var NestedAllocElementType = 0;
    var NestedFunctionAllocElementType = 0;
    var NestedFunctionResultType = 0;
    var FieldInListName = rtl.arraySetLength(null,pas.Common.TField,256);
    var ExitLoop = false;
    var isForward = false;
    var IsNestedFunction = false;
    var isInt = false;
    var isInl = false;
    var isOvr = false;
    var Name = "";
    function BoundaryType() {
      var Result = 0;
      if ((LowerBound < 0) || (UpperBound < 0)) {
        if ((LowerBound >= -128) && (UpperBound <= 127)) {
          Result = 131}
         else if ((LowerBound >= -32768) && (UpperBound <= 32767)) {
          Result = 132}
         else Result = 133;
      } else {
        if ((LowerBound >= 0) && (UpperBound <= 255)) {
          Result = 128}
         else if ((LowerBound >= 0) && (UpperBound <= 65535)) {
          Result = 129}
         else Result = 130;
      };
      return Result;
    };
    function DeclareField(Name, FieldType, NumAllocElements, AllocElementType, Data) {
      var x = 0;
      var $ir = rtl.createIntfRefs();
      try {
        for (var $l = 1, $end = pas.Common.TypeArray[RecType - 1].NumFields; $l <= $end; $l++) {
          x = $l;
          if (pas.Common.TypeArray[RecType - 1].Field[x].Name === Name) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DuplicateIdentifier,"Duplicate identifier '{0}'.",Name,""]),pas.Messages.IMessage)));
        };
        pas.Common.TypeArray[RecType - 1].NumFields += 1;
        x = pas.Common.TypeArray[RecType - 1].NumFields;
        if (x >= 256) pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXFIELDS","",""]),pas.Messages.IMessage)));
        if (FieldType === 154) {
          FieldType = 136;
          AllocElementType = 0;
          NumAllocElements = 0;
        };
        pas.Common.TypeArray[RecType - 1].Field[x].Name = Name;
        pas.Common.TypeArray[RecType - 1].Field[x].DataType = FieldType;
        pas.Common.TypeArray[RecType - 1].Field[x].Value = Data;
        pas.Common.TypeArray[RecType - 1].Field[x].AllocElementType = AllocElementType;
        pas.Common.TypeArray[RecType - 1].Field[x].NumAllocElements = NumAllocElements;
        if (!(FieldType in rtl.createSet(139,140))) {
          if (FieldType in pas.Common.Pointers) {
            if ((FieldType === 136) && (AllocElementType === 149)) {
              pas.Common.TypeArray[RecType - 1].Size += pas.Common.DataSize[8]}
             else if (rtl.lw(NumAllocElements >>> 16) > 0) {
              pas.Common.TypeArray[RecType - 1].Size += rtl.lw(NumAllocElements >>> 16) * (NumAllocElements & 0xFFFF) * pas.Common.DataSize[AllocElementType - 128]}
             else pas.Common.TypeArray[RecType - 1].Size += NumAllocElements * pas.Common.DataSize[AllocElementType - 128];
          } else pas.Common.TypeArray[RecType - 1].Size += pas.Common.DataSize[FieldType - 128];
        } else pas.Common.TypeArray[RecType - 1].Size += pas.Common.DataSize[FieldType - 128];
        pas.Common.TypeArray[RecType - 1].Field[x].Kind = 0;
      } finally {
        $ir.free();
      };
    };
    var $ir = rtl.createIntfRefs();
    try {
      NumAllocElements.set(0);
      if (pas.Common.Tok[i].Kind in rtl.createSet(4,5)) {
        DataType.set(136);
        AllocElementType.set(147);
        i = $impl.DeclareFunction(i,{get: function () {
            return NestedNumAllocElements;
          }, set: function (v) {
            NestedNumAllocElements = v;
          }});
        NumAllocElements.set(rtl.lw(NestedNumAllocElements << 16));
        Result = i - 1;
      } else if (pas.Common.Tok[i].Kind === 56) {
        DataType.set(136);
        if (pas.Common.Tok[i + 1].Kind === 32) {
          NumAllocElements.set(0);
          AllocElementType.set(134);
          DataType.set(137);
        } else if (pas.Common.Tok[i + 1].Kind === 170) {
          IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i + 1].Name);
          if (IdentIndex === 0) {
            NumAllocElements.set(i + 1);
            AllocElementType.set(149);
          } else if ((IdentIndex > 0) && (pas.Common.Ident[IdentIndex - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers))) {
            NumAllocElements.set(pas.Common.Ident[IdentIndex - 1].NumAllocElements);
            if (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) {
              if (pas.Common.Ident[IdentIndex - 1].DataType === 137) {
                NumAllocElements.set(0);
                AllocElementType.set(134);
                DataType.set(137);
              } else {
                NumAllocElements.set(rtl.lw(pas.Common.Ident[IdentIndex - 1].NumAllocElements | rtl.lw(pas.Common.Ident[IdentIndex - 1].NumAllocElements_ << 16)));
                AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                DataType.set(154);
              };
            } else {
              NumAllocElements.set(rtl.lw(pas.Common.Ident[IdentIndex - 1].NumAllocElements | rtl.lw(pas.Common.Ident[IdentIndex - 1].NumAllocElements_ << 16)));
              AllocElementType.set(pas.Common.Ident[IdentIndex - 1].DataType);
            };
          };
        } else {
          if (!(pas.Common.Tok[i + 1].Kind in rtl.unionSet(rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes),rtl.createSet(136)))) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected);
          NumAllocElements.set(0);
          AllocElementType.set(pas.Common.Tok[i + 1].Kind);
        };
        Result = i + 1;
      } else if (pas.Common.Tok[i].Kind === 54) {
        Name = pas.Common.Tok[i - 2].Name;
        pas.Common.NumTypes += 1;
        RecType = pas.Common.NumTypes;
        if (pas.Common.NumTypes > 1024) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXTYPES","",""]),pas.Messages.IMessage)));
        i += 1;
        pas.Common.TypeArray[RecType - 1].Field[0].Name = Name;
        pas.Common.TypeArray[RecType - 1].NumFields = 0;
        ConstVal = 0;
        LowerBound = 0;
        UpperBound = 0;
        NumFieldsInList = 0;
        do {
          pas.Common.CheckTok(i,170);
          NumFieldsInList += 1;
          FieldInListName[NumFieldsInList - 1].Name = pas.Common.Tok[i].Name;
          i += 1;
          if (pas.Common.Tok[i].Kind in rtl.createSet(25,43)) {
            i = $mod.CompileConstExpression(i + 1,{get: function () {
                return ConstVal;
              }, set: function (v) {
                ConstVal = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},133,false,true);
            i += 1;
          };
          FieldInListName[NumFieldsInList - 1].Value = ConstVal;
          if (NumFieldsInList === 1) {
            LowerBound = ConstVal;
            UpperBound = ConstVal;
          } else {
            if (ConstVal < LowerBound) LowerBound = ConstVal;
            if (ConstVal > UpperBound) UpperBound = ConstVal;
            if (FieldInListName[NumFieldsInList - 1].Value < FieldInListName[NumFieldsInList - 1 - 1].Value) pas.Messages.Note(i,"Values in enumeration types have to be ascending");
          };
          ConstVal += 1;
          if (pas.Common.Tok[i].Kind === 52) i += 1;
        } while (!(pas.Common.Tok[i].Kind === 55));
        DataType.set(BoundaryType());
        for (var $l = 1, $end = NumFieldsInList; $l <= $end; $l++) {
          FieldInListIndex = $l;
          $mod.DefineIdent(i,FieldInListName[FieldInListIndex - 1].Name,146,DataType.get(),0,0,FieldInListName[FieldInListIndex - 1].Value,170);
          pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = RecType;
          pas.Common.Ident[pas.Common.NumIdent - 1].Pass = pas.Common.TPass.CALL_DETERMINATION;
          DeclareField(FieldInListName[FieldInListIndex - 1].Name,DataType.get(),0,0,FieldInListName[FieldInListIndex - 1].Value);
        };
        pas.Common.TypeArray[RecType - 1].Block = pas.Common.BlockStack[pas.Common.BlockStackTop];
        AllocElementType.set(DataType.get());
        DataType.set(146);
        NumAllocElements.set(RecType);
        Result = i;
      } else if (pas.Common.Tok[i].Kind === 148) {
        AllocElementType.set(128);
        NumAllocElements.set(1);
        DataType.set(148);
        Result = i;
      } else if (pas.Common.Tok[i].Kind === 138) {
        if (pas.Common.Tok[i + 1].Kind === 31) {
          i = $mod.CompileType(i + 2,DataType,NumAllocElements,AllocElementType)}
         else {
          AllocElementType.set(0);
          NumAllocElements.set(128);
        };
        DataType.set(138);
        Result = i;
      } else if (pas.Common.Tok[i].Kind === 127) {
        pas.Common.CheckTok(i + 1,31);
        if (!(pas.Common.Tok[i + 2].Kind in rtl.createSet(134,128))) pas.Messages.Error$1(i + 2,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeDeclarationOfSetElements,"Illegal type declaration of set elements","",""]),pas.Messages.IMessage)));
        DataType.set(136);
        NumAllocElements.set(32);
        AllocElementType.set(pas.Common.Tok[i + 2].Kind);
        Result = i + 2;
      } else if (pas.Common.Tok[i].Kind === 140) {
        Name = pas.Common.Tok[i - 2].Name;
        pas.Common.NumTypes += 1;
        RecType = pas.Common.NumTypes;
        if (pas.Common.NumTypes > 1024) pas.Messages.Error$1(i,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXTYPES","",""]),pas.Messages.IMessage)));
        i += 1;
        pas.Common.TypeArray[RecType - 1].NumFields = 0;
        pas.Common.TypeArray[RecType - 1].Field[0].Name = Name;
        if (pas.Common.Tok[i].Kind in rtl.createSet(4,5,99,100)) {
          while (pas.Common.Tok[i].Kind in rtl.createSet(4,5,99,100)) {
            IsNestedFunction = pas.Common.Tok[i].Kind === 5;
            k = i;
            i = $mod.DefineFunction(i,0,{get: function () {
                return isForward;
              }, set: function (v) {
                isForward = v;
              }},{get: function () {
                return isInt;
              }, set: function (v) {
                isInt = v;
              }},{get: function () {
                return isInl;
              }, set: function (v) {
                isInl = v;
              }},{get: function () {
                return isOvr;
              }, set: function (v) {
                isOvr = v;
              }},{get: function () {
                return IsNestedFunction;
              }, set: function (v) {
                IsNestedFunction = v;
              }},{get: function () {
                return NestedFunctionResultType;
              }, set: function (v) {
                NestedFunctionResultType = v;
              }},{get: function () {
                return NestedFunctionNumAllocElements;
              }, set: function (v) {
                NestedFunctionNumAllocElements = v;
              }},{get: function () {
                return NestedFunctionAllocElementType;
              }, set: function (v) {
                NestedFunctionAllocElementType = v;
              }});
            pas.Common.NumBlocks += 1;
            pas.Common.Ident[pas.Common.NumIdent - 1].ProcAsBlock = pas.Common.NumBlocks;
            pas.Common.Ident[pas.Common.NumIdent - 1].IsUnresolvedForward = true;
            pas.Common.Ident[pas.Common.NumIdent - 1].ObjectIndex = RecType;
            pas.Common.Ident[pas.Common.NumIdent - 1].Name = Name + "." + pas.Common.Tok[k + 1].Name;
            pas.Common.CheckTok(i,53);
            i += 1;
          };
          if (pas.Common.Tok[i].Kind in rtl.createSet(170)) pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FieldAfterMethodOrProperty,"Fields cannot appear after a method or property definition","",""]),pas.Messages.IMessage)));
        } else do {
          NumFieldsInList = 0;
          do {
            if (pas.Common.Tok[i].Kind in rtl.createSet(4,5,99,100)) pas.Messages.Error$1(i,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FieldAfterMethodOrProperty,"Fields cannot appear after a method or property definition","",""]),pas.Messages.IMessage)));
            pas.Common.CheckTok(i,170);
            NumFieldsInList += 1;
            FieldInListName[NumFieldsInList - 1].Name = pas.Common.Tok[i].Name;
            i += 1;
            ExitLoop = false;
            if (pas.Common.Tok[i].Kind === 52) {
              i += 1}
             else ExitLoop = true;
          } while (!ExitLoop);
          pas.Common.CheckTok(i,60);
          j = i + 1;
          i = $mod.CompileType(i + 1,DataType,NumAllocElements,AllocElementType);
          if (pas.Common.Tok[j].Kind === 30) i = $mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              NestedAllocElementType = v;
            }});
          for (var $l1 = 1, $end1 = NumFieldsInList; $l1 <= $end1; $l1++) {
            FieldInListIndex = $l1;
            DeclareField(FieldInListName[FieldInListIndex - 1].Name,DataType.get(),NumAllocElements.get(),AllocElementType.get(),0);
            if (DataType.get() in rtl.createSet(139,140)) for (var $l2 = 1, $end2 = pas.Common.TypeArray[NumAllocElements.get() - 1].NumFields; $l2 <= $end2; $l2++) {
              k = $l2;
              DeclareField(FieldInListName[FieldInListIndex - 1].Name + "." + pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].Name,pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].DataType,pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].NumAllocElements,pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].AllocElementType,0);
              pas.Common.TypeArray[RecType - 1].Field[pas.Common.TypeArray[RecType - 1].NumFields].Kind = 1;
            };
          };
          ExitLoop = false;
          if (pas.Common.Tok[i + 1].Kind !== 53) {
            i += 1;
            ExitLoop = true;
          } else {
            i += 2;
            if (pas.Common.Tok[i].Kind === 14) {
              ExitLoop = true}
             else if (pas.Common.Tok[i].Kind in rtl.createSet(4,5,99,100)) {
              while (pas.Common.Tok[i].Kind in rtl.createSet(4,5,99,100)) {
                IsNestedFunction = pas.Common.Tok[i].Kind === 5;
                k = i;
                i = $mod.DefineFunction(i,0,{get: function () {
                    return isForward;
                  }, set: function (v) {
                    isForward = v;
                  }},{get: function () {
                    return isInt;
                  }, set: function (v) {
                    isInt = v;
                  }},{get: function () {
                    return isInl;
                  }, set: function (v) {
                    isInl = v;
                  }},{get: function () {
                    return isOvr;
                  }, set: function (v) {
                    isOvr = v;
                  }},{get: function () {
                    return IsNestedFunction;
                  }, set: function (v) {
                    IsNestedFunction = v;
                  }},{get: function () {
                    return NestedFunctionResultType;
                  }, set: function (v) {
                    NestedFunctionResultType = v;
                  }},{get: function () {
                    return NestedFunctionNumAllocElements;
                  }, set: function (v) {
                    NestedFunctionNumAllocElements = v;
                  }},{get: function () {
                    return NestedFunctionAllocElementType;
                  }, set: function (v) {
                    NestedFunctionAllocElementType = v;
                  }});
                pas.Common.NumBlocks += 1;
                pas.Common.Ident[pas.Common.NumIdent - 1].ProcAsBlock = pas.Common.NumBlocks;
                pas.Common.Ident[pas.Common.NumIdent - 1].IsUnresolvedForward = true;
                pas.Common.Ident[pas.Common.NumIdent - 1].ObjectIndex = RecType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Name = Name + "." + pas.Common.Tok[k + 1].Name;
                pas.Common.CheckTok(i,53);
                i += 1;
              };
              ExitLoop = true;
            };
          };
        } while (!ExitLoop);
        pas.Common.CheckTok(i,14);
        pas.Common.TypeArray[RecType - 1].Block = pas.Common.BlockStack[pas.Common.BlockStackTop];
        DataType.set(140);
        NumAllocElements.set(RecType);
        AllocElementType.set(0);
        Result = i;
      } else if ((pas.Common.Tok[i].Kind === 139) || ((pas.Common.Tok[i].Kind === 112) && (pas.Common.Tok[i + 1].Kind === 139))) {
        Name = pas.Common.Tok[i - 2].Name;
        if (pas.Common.Tok[i].Kind === 112) i += 1;
        pas.Common.NumTypes += 1;
        RecType = pas.Common.NumTypes;
        if (pas.Common.NumTypes > 1024) pas.Messages.Error$1(i,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXTYPES","",""]),pas.Messages.IMessage)));
        i += 1;
        pas.Common.TypeArray[RecType - 1].Size = 0;
        pas.Common.TypeArray[RecType - 1].NumFields = 0;
        pas.Common.TypeArray[RecType - 1].Field[0].Name = Name;
        do {
          NumFieldsInList = 0;
          do {
            pas.Common.CheckTok(i,170);
            NumFieldsInList += 1;
            FieldInListName[NumFieldsInList - 1].Name = pas.Common.Tok[i].Name;
            i += 1;
            ExitLoop = false;
            if (pas.Common.Tok[i].Kind === 52) {
              i += 1}
             else ExitLoop = true;
          } while (!ExitLoop);
          pas.Common.CheckTok(i,60);
          j = i + 1;
          i = $mod.CompileType(i + 1,DataType,NumAllocElements,AllocElementType);
          if (pas.Common.Tok[j].Kind === 30) i = $mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              NestedAllocElementType = v;
            }});
          for (var $l3 = 1, $end3 = NumFieldsInList; $l3 <= $end3; $l3++) {
            FieldInListIndex = $l3;
            DeclareField(FieldInListName[FieldInListIndex - 1].Name,DataType.get(),NumAllocElements.get(),AllocElementType.get(),0);
            if (DataType.get() === 139) for (var $l4 = 1, $end4 = pas.Common.TypeArray[NumAllocElements.get() - 1].NumFields; $l4 <= $end4; $l4++) {
              k = $l4;
              DeclareField(FieldInListName[FieldInListIndex - 1].Name + "." + pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].Name,pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].DataType,pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].NumAllocElements,pas.Common.TypeArray[NumAllocElements.get() - 1].Field[k].AllocElementType,0);
            };
          };
          ExitLoop = false;
          if (pas.Common.Tok[i + 1].Kind !== 53) {
            i += 1;
            ExitLoop = true;
          } else {
            i += 2;
            if (pas.Common.Tok[i].Kind === 14) ExitLoop = true;
          };
        } while (!ExitLoop);
        pas.Common.CheckTok(i,14);
        pas.Common.TypeArray[RecType - 1].Block = pas.Common.BlockStack[pas.Common.BlockStackTop];
        DataType.set(139);
        NumAllocElements.set(RecType);
        AllocElementType.set(0);
        if (pas.Common.TypeArray[RecType - 1].Size >= 256) pas.Messages.Error$1(i,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.RecordSizeExceedsLimit,"Record size {0} exceeds the 256 bytes limit.",pas.SysUtils.IntToStr(pas.Common.TypeArray[RecType - 1].Size),""]),pas.Messages.IMessage)));
        Result = i;
      } else if (pas.Common.Tok[i].Kind === 145) {
        DataType.set(136);
        AllocElementType.set(134);
        NumAllocElements.set(0);
        Result = i;
      } else if (pas.Common.Tok[i].Kind === 32) {
        DataType.set(137);
        AllocElementType.set(134);
        if (pas.Common.Tok[i + 1].Kind !== 58) {
          UpperBound = 255;
          Result = i;
        } else {
          i = $mod.CompileConstExpression(i + 2,{get: function () {
              return UpperBound;
            }, set: function (v) {
              UpperBound = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              ExpressionType = v;
            }},133,false,true);
          if ((UpperBound < 1) || (UpperBound > 255)) pas.Messages.Error$1(i,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.StringLengthNotInRange,"String length must be a value from 1 to 255","",""]),pas.Messages.IMessage)));
          pas.Common.CheckTok(i + 1,59);
          Result = i + 1;
        };
        NumAllocElements.set(UpperBound + 1);
        if (UpperBound > 255) pas.Messages.Error$2(i,pas.Messages.TErrorCode.SubrangeBounds);
      } else if (pas.Common.Tok[i].Kind in pas.Common.AllTypes) {
        DataType.set(pas.Common.Tok[i].Kind);
        NumAllocElements.set(0);
        AllocElementType.set(0);
        Result = i;
      } else if ((pas.Common.Tok[i].Kind === 30) || ((pas.Common.Tok[i].Kind === 112) && (pas.Common.Tok[i + 1].Kind === 30))) {
        DataType.set(136);
        if (pas.Common.Tok[i].Kind === 112) i += 1;
        pas.Common.CheckTok(i + 1,58);
        if (pas.Common.Tok[i + 2].Kind in rtl.unionSet(pas.Common.AllTypes,pas.Common.StringTypes)) {
          if (pas.Common.Tok[i + 2].Kind === 128) {
            LowerBound = 0;
            UpperBound = 255;
            NumAllocElements.set(256);
          } else pas.Messages.Error$1(i,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidTypeDefinition,"Invalid type definition.","",""]),pas.Messages.IMessage)));
          i += 2;
        } else {
          i = $mod.CompileConstExpression(i + 2,{get: function () {
              return LowerBound;
            }, set: function (v) {
              LowerBound = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              ExpressionType = v;
            }},133,false,true);
          if (!(ExpressionType in pas.Common.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotInteger,"Array lower bound must be an integer value","",""]),pas.Messages.IMessage)));
          if (LowerBound !== 0) pas.Messages.Error$1(i,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotZero,"Array lower bound is not zero","",""]),pas.Messages.IMessage)));
          pas.Common.CheckTok(i + 1,42);
          i = $mod.CompileConstExpression(i + 2,{get: function () {
              return UpperBound;
            }, set: function (v) {
              UpperBound = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              ExpressionType = v;
            }},133,false,true);
          if (!(ExpressionType in pas.Common.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayUpperBoundNotInteger,"Array upper bound must be integer","",""]),pas.Messages.IMessage)));
          if (UpperBound < 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UpperBoundOfRange);
          if (UpperBound > 65535) pas.Messages.Error$2(i,pas.Messages.TErrorCode.HighLimit);
          NumAllocElements.set((UpperBound - LowerBound) + 1);
          if (pas.Common.Tok[i + 1].Kind === 52) {
            i = $mod.CompileConstExpression(i + 2,{get: function () {
                return LowerBound;
              }, set: function (v) {
                LowerBound = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},133,false,true);
            if (!(ExpressionType in pas.Common.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(13,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotInteger,"Array lower bound must be integer","",""]),pas.Messages.IMessage)));
            if (LowerBound !== 0) pas.Messages.Error$1(i,$ir.ref(14,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotZero,"Array lower bound is not zero","",""]),pas.Messages.IMessage)));
            pas.Common.CheckTok(i + 1,42);
            i = $mod.CompileConstExpression(i + 2,{get: function () {
                return UpperBound;
              }, set: function (v) {
                UpperBound = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},133,false,true);
            if (!(ExpressionType in pas.Common.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(15,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayUpperBoundNotInteger,"Array upper bound must be integer","",""]),pas.Messages.IMessage)));
            if (UpperBound < 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UpperBoundOfRange);
            if (UpperBound > 65535) pas.Messages.Error$2(i,pas.Messages.TErrorCode.HighLimit);
            NumAllocElements.set(rtl.or(NumAllocElements.get(),rtl.shl((UpperBound - LowerBound) + 1,16)));
          };
        };
        pas.Common.CheckTok(i + 1,59);
        pas.Common.CheckTok(i + 2,31);
        if (pas.Common.Tok[i + 3].Kind in rtl.createSet(139,140)) pas.Messages.Error$1(i,$ir.ref(16,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidArrayOfPointers,"Only arrays of ^{0} are supported.",pas.Common.InfoAboutToken(pas.Common.Tok[i + 3].Kind),""]),pas.Messages.IMessage)));
        if (pas.Common.Tok[i + 3].Kind === 30) {
          i = $mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              NestedAllocElementType = v;
            }});
          Result = i;
        } else {
          Result = i;
          i = $mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              NestedAllocElementType = v;
            }});
        };
        if ((rtl.lw(NumAllocElements.get() >>> 16) * (NumAllocElements.get() & 0xFFFF) * pas.Common.DataSize[NestedDataType - 128]) > (40960 - 1)) pas.Messages.Error$1(i,$ir.ref(17,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArraySizeExceedsRAMSize,"Array [0..{0}, 0..{1} size exceeds the available RAM",pas.SysUtils.IntToStr((NumAllocElements.get() & 0xFFFF) - 1),pas.SysUtils.IntToStr(rtl.lw(NumAllocElements.get() >>> 16) - 1)]),pas.Messages.IMessage)));
        if (NestedNumAllocElements > 0) if (NestedDataType in rtl.createSet(139,140,146)) {
          if (rtl.lw(NumAllocElements.get() >>> 16) > 0) pas.Messages.Error$1(i,$ir.ref(18,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.MultiDimensionalArrayOfTypeNotSupported,"Multidimensional arrays of element type {0} are not supported.",pas.Common.InfoAboutToken(NestedDataType),""]),pas.Messages.IMessage)));
          if (NestedDataType in rtl.createSet(139,140)) {
            pas.Messages.Error$1(i,$ir.ref(19,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OnlyArrayOfTypeSupported,"Only Array [0..{0}] of ^{1} supported",pas.SysUtils.IntToStr(NumAllocElements.get() - 1),pas.Common.InfoAboutToken(NestedDataType)]),pas.Messages.IMessage)))}
           else pas.Messages.Error$1(i,$ir.ref(20,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayOfTypeNotSupported,"Arrays of type {0} are not supported.",pas.Common.InfoAboutToken(NestedDataType),""]),pas.Messages.IMessage)));
          NumAllocElements.set(rtl.lw(NumAllocElements.get() | rtl.lw(NestedNumAllocElements << 16)));
        } else if (!(NestedDataType in rtl.createSet(137,139,140)) && (pas.Common.Tok[i].Kind !== 145)) {
          if ((NestedAllocElementType in rtl.createSet(139,140,147)) && (rtl.lw(NumAllocElements.get() >>> 16) > 0)) pas.Messages.Error$1(i,$ir.ref(21,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.MultiDimensionalArrayOfTypeNotSupported,"Multidimensional arrays of element type {0} are not supported.",pas.Common.InfoAboutToken(NestedAllocElementType),""]),pas.Messages.IMessage)));
          NestedDataType = NestedAllocElementType;
          if (NestedAllocElementType === 147) {
            NumAllocElements.set(rtl.lw(NumAllocElements.get() | NestedNumAllocElements))}
           else if (NestedAllocElementType in rtl.createSet(139,140)) {
            NumAllocElements.set(rtl.lw(NestedNumAllocElements | rtl.lw(NumAllocElements.get() << 16)))}
           else NumAllocElements.set(rtl.lw(NumAllocElements.get() | rtl.lw(NestedNumAllocElements << 16)));
        };
        AllocElementType.set(NestedDataType);
      } else if ((pas.Common.Tok[i].Kind === 170) && (pas.Common.Ident[$mod.GetIdentIndex(pas.Common.Tok[i].Name) - 1].Kind === 2)) {
        IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
        if (pas.Common.Ident[IdentIndex - 1].Kind !== 2) pas.Messages.Error$1(i,$ir.ref(22,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected but {0} found",pas.Common.Tok[i].Name,""]),pas.Messages.IMessage)));
        DataType.set(pas.Common.Ident[IdentIndex - 1].DataType);
        NumAllocElements.set(rtl.lw(pas.Common.Ident[IdentIndex - 1].NumAllocElements | rtl.lw(pas.Common.Ident[IdentIndex - 1].NumAllocElements_ << 16)));
        AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
        Result = i;
      } else {
        i = $mod.CompileConstExpression(i,{get: function () {
            return ConstVal;
          }, set: function (v) {
            ConstVal = v;
          }},{get: function () {
            return ExpressionType;
          }, set: function (v) {
            ExpressionType = v;
          }},133,false,true);
        LowerBound = ConstVal;
        pas.Common.CheckTok(i + 1,42);
        i = $mod.CompileConstExpression(i + 2,{get: function () {
            return ConstVal;
          }, set: function (v) {
            ConstVal = v;
          }},{get: function () {
            return ExpressionType;
          }, set: function (v) {
            ExpressionType = v;
          }},133,false,true);
        UpperBound = ConstVal;
        if (UpperBound < LowerBound) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UpperBoundOfRange);
        DataType.set(BoundaryType());
        NumAllocElements.set(0);
        AllocElementType.set(0);
        Result = i;
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.CompileConstExpression = function (i, ConstVal, ConstValType, VarType, Err, War) {
    var Result = 0;
    var j = 0;
    var RightConstVal = 0;
    var RightConstValType = 0;
    var Yes = false;
    ConstVal.set(0);
    ConstValType.set(0);
    Result = i;
    i = $impl.CompileSimpleConstExpression(i,ConstVal,ConstValType);
    if (pas.Common.isError) return Result;
    if (pas.Common.Tok[i + 1].Kind in rtl.createSet(43,44,45,46,47,48)) {
      j = $impl.CompileSimpleConstExpression(i + 2,{get: function () {
          return RightConstVal;
        }, set: function (v) {
          RightConstVal = v;
        }},{get: function () {
          return RightConstValType;
        }, set: function (v) {
          RightConstValType = v;
        }});
      var $tmp = pas.Common.Tok[i + 1].Kind;
      if ($tmp === 43) {
        Yes = ConstVal.get() === RightConstVal}
       else if ($tmp === 44) {
        Yes = ConstVal.get() !== RightConstVal}
       else if ($tmp === 45) {
        Yes = ConstVal.get() < RightConstVal}
       else if ($tmp === 46) {
        Yes = ConstVal.get() <= RightConstVal}
       else if ($tmp === 47) {
        Yes = ConstVal.get() > RightConstVal}
       else if ($tmp === 48) {
        Yes = ConstVal.get() >= RightConstVal}
       else {
        Yes = false;
      };
      if (Yes) {
        ConstVal.set(0xff)}
       else ConstVal.set(0);
      ConstValType.set(135);
      i = j;
    };
    Result = i;
    if (ConstValType.get() in rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.Pointers)) if (VarType in rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.Pointers)) {
      var $tmp1 = VarType;
      if ($tmp1 === 131) {
        Yes = (ConstVal.get() < -128) || (ConstVal.get() > 127)}
       else if ($tmp1 === 132) {
        Yes = (ConstVal.get() < -32768) || (ConstVal.get() > 32767)}
       else if ($tmp1 === 133) {
        Yes = (ConstVal.get() < -2147483648) || (ConstVal.get() > 2147483647)}
       else {
        Yes = (Math.abs(ConstVal.get()) > 0xFFFFFFFF) || (pas.Common.DataSize[ConstValType.get() - 128] > pas.Common.DataSize[VarType - 128]) || ((ConstValType.get() in pas.Common.SignedOrdinalTypes) && (VarType in pas.Common.UnsignedOrdinalTypes));
      };
      if (Yes) if (Err) {
        pas.Common.isConst = false;
        pas.Common.isError = false;
        pas.Messages.ErrorRangeCheckError(i,0,ConstVal.get(),VarType);
      } else if (War) if (VarType !== 135) pas.Messages.WarningForRangeCheckError(i,0,ConstVal.get(),VarType);
    };
    return Result;
  };
  this.CompileConstTerm = function (i, ConstVal, ConstValType) {
    var Result = 0;
    var j = 0;
    var k = 0;
    var RightConstVal = 0;
    var RightConstValType = 0;
    var $ir = rtl.createIntfRefs();
    try {
      ConstVal.set(0);
      ConstValType.set(0);
      Result = i;
      j = $impl.CompileConstFactor(i,ConstVal,ConstValType);
      if (pas.Common.isError) return Result;
      while (pas.Common.Tok[j + 1].Kind in rtl.createSet(63,64,66,65,67,68,71)) {
        k = $impl.CompileConstFactor(j + 2,{get: function () {
            return RightConstVal;
          }, set: function (v) {
            RightConstVal = v;
          }},{get: function () {
            return RightConstValType;
          }, set: function (v) {
            RightConstValType = v;
          }});
        if (pas.Common.isError) break;
        if ((ConstValType.get() in pas.Common.RealTypes) && (RightConstValType in pas.Common.IntegerTypes)) {
          RightConstVal = pas.Numbers.FromInt64(RightConstVal);
          RightConstValType = ConstValType.get();
        };
        if ((ConstValType.get() in pas.Common.IntegerTypes) && (RightConstValType in pas.Common.RealTypes)) {
          ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          ConstValType.set(RightConstValType);
        };
        if ((pas.Common.Tok[j + 1].Kind === 64) && (ConstValType.get() in pas.Common.IntegerTypes)) {
          ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          ConstValType.set(142);
        };
        if ((pas.Common.Tok[j + 1].Kind === 64) && (RightConstValType in pas.Common.IntegerTypes)) {
          RightConstVal = pas.Numbers.FromInt64(RightConstVal);
          RightConstValType = 142;
        };
        if ((ConstValType.get() in rtl.createSet(143,144)) && (RightConstValType in rtl.createSet(141,142))) RightConstValType = ConstValType.get();
        if ((RightConstValType in rtl.createSet(143,144)) && (ConstValType.get() in rtl.createSet(141,142))) ConstValType.set(RightConstValType);
        var $tmp = pas.Common.Tok[j + 1].Kind;
        if ($tmp === 63) {
          ConstVal.set(pas.Numbers.Multiply(ConstValType.get(),ConstVal.get(),RightConstVal))}
         else if ($tmp === 64) {
          try {
            ConstVal.set(pas.Numbers.Divide(ConstValType.get(),ConstVal.get(),RightConstVal));
          } catch ($e) {
            if (pas.SysUtils.EDivByZero.isPrototypeOf($e)) {
              pas.Common.isError = false;
              pas.Common.isConst = false;
              pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DivisionByZero,"Division by zero","",""]),pas.Messages.IMessage)));
            } else throw $e
          };
        } else if ($tmp === 66) {
          ConstVal.set(ConstVal.get() % RightConstVal)}
         else if ($tmp === 65) {
          ConstVal.set(rtl.trunc(ConstVal.get() / RightConstVal))}
         else if ($tmp === 67) {
          ConstVal.set(rtl.shl(ConstVal.get(),RightConstVal))}
         else if ($tmp === 68) {
          ConstVal.set(rtl.shr(ConstVal.get(),RightConstVal))}
         else if ($tmp === 71) ConstVal.set(rtl.and(ConstVal.get(),RightConstVal));
        ConstValType.set(pas.Common.GetCommonType(j + 1,ConstValType.get(),RightConstValType));
        if (!(ConstValType.get() in rtl.unionSet(pas.Common.RealTypes,rtl.createSet(135)))) ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
        pas.Common.CheckOperator(i,pas.Common.Tok[j + 1].Kind,ConstValType.get(),RightConstValType);
        j = k;
      };
      Result = j;
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.DefineIdent = function (tokenIndex, Name, Kind, DataType, NumAllocElements, AllocElementType, Data, IdType) {
    var identIndex = 0;
    var NumAllocElements_ = 0;
    var $ir = rtl.createIntfRefs();
    try {
      identIndex = $mod.GetIdentIndex(Name);
      if ((pas.Common.i > 0) && !(pas.Common.Ident[identIndex - 1].Kind in rtl.createSet(4,5,99,100)) && (pas.Common.Ident[identIndex - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop]) && (pas.Common.Ident[identIndex - 1].isOverload === false) && (pas.Common.Ident[pas.Common.i - 1].UnitIndex === pas.Common.UnitNameIndex)) {
        pas.Messages.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierAlreadyDefined,"Identifier " + Name + " is already defined","",""]),pas.Messages.IMessage)))}
       else {
        pas.Common.NumIdent += 1;
        if (pas.Common.NumIdent > 16384) pas.Messages.Error$1(pas.Common.NumTok,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, IDENT","",""]),pas.Messages.IMessage)));
        pas.Common.Ident[pas.Common.NumIdent - 1].Name = Name;
        pas.Common.Ident[pas.Common.NumIdent - 1].Kind = Kind;
        pas.Common.Ident[pas.Common.NumIdent - 1].DataType = DataType;
        pas.Common.Ident[pas.Common.NumIdent - 1].Block = pas.Common.BlockStack[pas.Common.BlockStackTop];
        pas.Common.Ident[pas.Common.NumIdent - 1].NumParams = 0;
        pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute = false;
        pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = pas.Common.TParameterPassingMethod.VALPASSING;
        pas.Common.Ident[pas.Common.NumIdent - 1].IsUnresolvedForward = false;
        pas.Common.Ident[pas.Common.NumIdent - 1].Section = pas.Common.PublicSection;
        pas.Common.Ident[pas.Common.NumIdent - 1].UnitIndex = pas.Common.UnitNameIndex;
        pas.Common.Ident[pas.Common.NumIdent - 1].IdType = IdType;
        if ((Kind === 3) && (Data !== 0)) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute = true;
          pas.Common.Ident[pas.Common.NumIdent - 1].isInit = true;
        };
        NumAllocElements_ = rtl.lw(NumAllocElements >>> 16);
        NumAllocElements = NumAllocElements & 0xFFFF;
        if (Name !== "RESULT") if ((pas.Common.NumIdent > (pas.Common.NumPredefIdent + 1)) && (pas.Common.UnitNameIndex === 1) && (pas.Common.pass === pas.Common.TPass.CODE_GENERATION)) if (!((pas.Common.Ident[pas.Common.NumIdent - 1].Pass in rtl.createSet(pas.Common.TPass.CALL_DETERMINATION,pas.Common.TPass.CODE_GENERATION)) || pas.Common.Ident[pas.Common.NumIdent - 1].IsNotDead)) pas.Messages.NoteForIdentifierNotUsed(tokenIndex,pas.Common.NumIdent);
        var $tmp = Kind;
        if (($tmp === 4) || ($tmp === 5) || ($tmp === 7) || ($tmp === 99) || ($tmp === 100)) {
          pas.Common.Ident[pas.Common.NumIdent - 1].Value = pas.Common.CodeSize;
        } else if ($tmp === 3) {
          if (pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute) {
            pas.Common.Ident[pas.Common.NumIdent - 1].Value = Data - 1}
           else pas.Common.Ident[pas.Common.NumIdent - 1].Value = 32768 + pas.Common.VarDataSize;
          if (!pas.Common.OutputDisabled) pas.Common.VarDataSize = pas.Common.VarDataSize + pas.Common.DataSize[DataType - 128];
          pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements;
          pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements_ = NumAllocElements_;
          pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = AllocElementType;
          if (!pas.Common.OutputDisabled) {
            if ((DataType === 136) && (AllocElementType in rtl.createSet(139,140)) && (NumAllocElements_ === 0)) {
              pas.Common.VarDataSize += pas.Common.DataSize[8]}
             else if (DataType in rtl.createSet(146)) {
              pas.Common.VarDataSize += 1}
             else if ((DataType in rtl.createSet(139,140)) && (NumAllocElements > 0)) {
              pas.Common.VarDataSize = pas.Common.VarDataSize + 0}
             else if ((DataType in rtl.createSet(138,148)) && (NumAllocElements > 0)) {
              pas.Common.VarDataSize = pas.Common.VarDataSize + 12}
             else {
              if ((pas.Common.Ident[pas.Common.NumIdent - 1].IdType === 30) && (pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute === false) && ($mod.Elements(pas.Common.NumIdent) === 1)) {}
              else if ((128 <= AllocElementType) && (AllocElementType <= 149)) {
                pas.Common.VarDataSize = pas.Common.VarDataSize + (($mod.Elements(pas.Common.NumIdent) * pas.Common.DataSize[AllocElementType - 128]) & 0xFFFFFFFF);
              };
            };
            if (NumAllocElements > 0) pas.Common.VarDataSize -= pas.Common.DataSize[DataType - 128];
          };
        } else if (($tmp === 1) || ($tmp === 146)) {
          pas.Common.Ident[pas.Common.NumIdent - 1].Value = Data;
          if (DataType in rtl.unionSet(pas.Common.Pointers,rtl.createSet(146))) {
            pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements;
            pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements_ = NumAllocElements_;
            pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = AllocElementType;
          };
          pas.Common.Ident[pas.Common.NumIdent - 1].isInit = true;
        } else if ($tmp === 2) {
          pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements;
          pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements_ = NumAllocElements_;
          pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = AllocElementType;
        } else if ($tmp === 6) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isInit = false;
        };
      };
    } finally {
      $ir.free();
    };
  };
  this.DefineFunction = function (i, ForwardIdentIndex, isForward, isInt, isInl, isOvr, IsNestedFunction, NestedFunctionResultType, NestedFunctionNumAllocElements, NestedFunctionAllocElementType) {
    var Result = 0;
    var VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
    var NumVarOfSameType = 0;
    var VarOfSameTypeIndex = 0;
    var x = 0;
    var ListPassMethod = 0;
    var VarType = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    var $ir = rtl.createIntfRefs();
    try {
      VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
      if (ForwardIdentIndex === 0) {
        if (pas.Common.Tok[i + 1].Kind !== 170) pas.Messages.Error$1(i + 1,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ReservedWordUserAsIdentifier,"Reserved word used as identifier","",""]),pas.Messages.IMessage)));
        if (pas.Common.Tok[i].Kind in rtl.createSet(4,99,100)) {
          $mod.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,pas.Common.Tok[i].Kind,0,0,0,0,170);
          IsNestedFunction.set(false);
        } else {
          $mod.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,5,0,0,0,0,170);
          IsNestedFunction.set(true);
        };
        NumVarOfSameType = 0;
        if ((pas.Common.Tok[i + 2].Kind === 54) && (pas.Common.Tok[i + 3].Kind === 55)) i += 2;
        if (pas.Common.Tok[i + 2].Kind === 54) {
          i = i + 2;
          do {
            NumVarOfSameType = 0;
            ListPassMethod = pas.Common.TParameterPassingMethod.VALPASSING;
            if (pas.Common.Tok[i + 1].Kind === 1) {
              ListPassMethod = pas.Common.TParameterPassingMethod.CONSTPASSING;
              i += 1;
            } else if (pas.Common.Tok[i + 1].Kind === 3) {
              ListPassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
              i += 1;
            };
            do {
              if (pas.Common.Tok[i + 1].Kind !== 170) {
                pas.Messages.Error$1(i + 1,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FormalParameterNameExpected,"Formal parameter name expected but {0} found.",pas.Common.GetSpelling(i + 1),""]),pas.Messages.IMessage)))}
               else {
                for (var $l = 1, $end = NumVarOfSameType; $l <= $end; $l++) {
                  x = $l;
                  if (VarOfSameType[x - 1].Name === pas.Common.Tok[i + 1].Name) pas.Messages.Error$1(i + 1,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierAlreadyDefined,"Identifier {0} is already defined.",pas.Common.Tok[i + 1].Name,""]),pas.Messages.IMessage)));
                };
                NumVarOfSameType += 1;
                VarOfSameType[NumVarOfSameType - 1].Name = pas.Common.Tok[i + 1].Name;
              };
              i = i + 2;
            } while (!(pas.Common.Tok[i].Kind !== 52));
            VarType = 0;
            NumAllocElements = 0;
            AllocElementType = 0;
            if ((ListPassMethod in rtl.createSet(pas.Common.TParameterPassingMethod.CONSTPASSING,pas.Common.TParameterPassingMethod.VARPASSING)) && (pas.Common.Tok[i].Kind !== 60)) {
              ListPassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
              i -= 1;
            } else {
              pas.Common.CheckTok(i,60);
              if (pas.Common.Tok[i + 1].Kind === 56) pas.Messages.Error$1(i + 1,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","",""]),pas.Messages.IMessage)));
              i = $mod.CompileType(i + 1,{get: function () {
                  return VarType;
                }, set: function (v) {
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  AllocElementType = v;
                }});
              if ((VarType === 138) && (ListPassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) pas.Messages.Error$1(i,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileParameterMustBeVAR,"File parameters must be var parameters","",""]),pas.Messages.IMessage)));
            };
            for (var $l1 = 1, $end1 = NumVarOfSameType; $l1 <= $end1; $l1++) {
              VarOfSameTypeIndex = $l1;
              pas.Common.Ident[pas.Common.NumIdent - 1].NumParams += 1;
              if (pas.Common.Ident[pas.Common.NumIdent - 1].NumParams > 8) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.TooManyParameters,pas.Common.NumIdent)}
               else {
                VarOfSameType[VarOfSameTypeIndex - 1].DataType = VarType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].DataType = VarType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].Name = VarOfSameType[VarOfSameTypeIndex - 1].Name;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].NumAllocElements = NumAllocElements;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].AllocElementType = AllocElementType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].PassMethod = ListPassMethod;
              };
            };
            i = i + 1;
          } while (!(pas.Common.Tok[i].Kind !== 53));
          pas.Common.CheckTok(i,55);
          i = i + 1;
        } else i = i + 2;
        NestedFunctionResultType.set(0);
        NestedFunctionNumAllocElements.set(0);
        NestedFunctionAllocElementType.set(0);
        if (IsNestedFunction.get()) {
          pas.Common.CheckTok(i,60);
          if (pas.Common.Tok[i + 1].Kind === 30) pas.Messages.Error$1(i + 1,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","",""]),pas.Messages.IMessage)));
          i = $mod.CompileType(i + 1,{get: function () {
              return VarType;
            }, set: function (v) {
              VarType = v;
            }},{get: function () {
              return NumAllocElements;
            }, set: function (v) {
              NumAllocElements = v;
            }},{get: function () {
              return AllocElementType;
            }, set: function (v) {
              AllocElementType = v;
            }});
          NestedFunctionResultType.set(VarType);
          pas.Common.Ident[pas.Common.NumIdent - 1].DataType = NestedFunctionResultType.get();
          NestedFunctionNumAllocElements.set(NumAllocElements);
          pas.Common.Ident[pas.Common.NumIdent - 1].NestedFunctionNumAllocElements = NumAllocElements;
          NestedFunctionAllocElementType.set(AllocElementType);
          pas.Common.Ident[pas.Common.NumIdent - 1].NestedFunctionAllocElementType = AllocElementType;
          pas.Common.Ident[pas.Common.NumIdent - 1].isNestedFunction = true;
          i = i + 1;
        };
        pas.Common.CheckTok(i,53);
      };
      isForward.set(false);
      isInt.set(false);
      isInl.set(false);
      isOvr.set(false);
      while (pas.Common.Tok[i + 1].Kind in rtl.createSet(101,102,103,104,105,106,107,108,95,109)) {
        var $tmp = pas.Common.Tok[i + 1].Kind;
        if ($tmp === 101) {
          isOvr.set(true);
          pas.Common.Ident[pas.Common.NumIdent - 1].isOverload = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 102) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isAsm = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 103) {
          if (pas.Common.INTERFACETOK_USE) if (IsNestedFunction.get()) {
            pas.Messages.Error$1(i,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FunctionDirectiveForwardNotAllowedInInterfaceSection,"Function directive 'FORWARD' not allowed in interface section","",""]),pas.Messages.IMessage)))}
           else pas.Messages.Error$1(i,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ProcedureDirectiveForwardNotAllowedInInterfaceSection,"Procedure directive 'FORWARD' not allowed in interface section","",""]),pas.Messages.IMessage)));
          isForward.set(true);
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 104) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isRegister = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 107) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isStdCall = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 108) {
          isInl.set(true);
          pas.Common.Ident[pas.Common.NumIdent - 1].isInline = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 105) {
          isInt.set(true);
          pas.Common.Ident[pas.Common.NumIdent - 1].isInterrupt = true;
          pas.Common.Ident[pas.Common.NumIdent - 1].IsNotDead = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 106) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isRecursion = true;
          pas.Common.Ident[pas.Common.NumIdent - 1].isPascal = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 95) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isExternal = true;
          isForward.set(true);
          i += 1;
          pas.Common.Ident[pas.Common.NumIdent - 1].Alias = "";
          pas.Common.Ident[pas.Common.NumIdent - 1].Libraries = 0;
          if (pas.Common.Tok[i + 1].Kind === 170) {
            pas.Common.Ident[pas.Common.NumIdent - 1].Alias = pas.Common.Tok[i + 1].Name;
            if (pas.Common.Tok[i + 2].Kind === 174) {
              pas.Common.Ident[pas.Common.NumIdent - 1].Libraries = i + 2;
              i += 1;
            };
            i += 1;
          } else if (pas.Common.Tok[i + 1].Kind === 174) {
            pas.Common.Ident[pas.Common.NumIdent - 1].Alias = pas.Common.Ident[pas.Common.NumIdent - 1].Name;
            pas.Common.Ident[pas.Common.NumIdent - 1].Libraries = i + 1;
            i += 1;
          };
          pas.Common.CheckTok(i + 1,53);
        } else if ($tmp === 109) {
          pas.Common.Ident[pas.Common.NumIdent - 1].isKeep = true;
          pas.Common.Ident[pas.Common.NumIdent - 1].IsNotDead = true;
          i += 1;
          pas.Common.CheckTok(i + 1,53);
        };
        i += 1;
      };
      if (pas.Common.Ident[pas.Common.NumIdent - 1].isRegister && (pas.Common.Ident[pas.Common.NumIdent - 1].isPascal || pas.Common.Ident[pas.Common.NumIdent - 1].isRecursion)) pas.Messages.Error$1(i,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineRegisterWithPascal,'Calling convention directive "REGISTER" not applicable with "PASCAL"',"",""]),pas.Messages.IMessage)));
      if (pas.Common.Ident[pas.Common.NumIdent - 1].isInline && (pas.Common.Ident[pas.Common.NumIdent - 1].isPascal || pas.Common.Ident[pas.Common.NumIdent - 1].isRecursion)) pas.Messages.Error$1(i,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineInlineWithPascal,'Calling convention directive "INLINE" not applicable with "PASCAL"',"",""]),pas.Messages.IMessage)));
      if (pas.Common.Ident[pas.Common.NumIdent - 1].isInline && pas.Common.Ident[pas.Common.NumIdent - 1].isInterrupt) pas.Messages.Error$1(i,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineInlineWithInterrupt,'Procedure directive "INLINE" cannot be used with "INTERRUPT"',"",""]),pas.Messages.IMessage)));
      if (pas.Common.Ident[pas.Common.NumIdent - 1].isInline && pas.Common.Ident[pas.Common.NumIdent - 1].isExternal) pas.Messages.Error$1(i,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineInlineWithExternal,'Procedure directive "INLINE" cannot be used with "EXTERNAL"',"",""]),pas.Messages.IMessage)));
      Result = i;
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.Elements = function (IdentIndex) {
    var Result = 0;
    if (pas.Common.Ident[IdentIndex - 1].DataType === 146) {
      Result = 0}
     else if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) {
      Result = pas.Common.Ident[IdentIndex - 1].NumAllocElements_}
     else if ((pas.Common.Ident[IdentIndex - 1].NumAllocElements_ === 0) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(147))) {
      Result = pas.Common.Ident[IdentIndex - 1].NumAllocElements}
     else Result = pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.Ident[IdentIndex - 1].NumAllocElements_;
    return Result;
  };
  this.GetIdentIndex = function (S) {
    var Result = 0;
    var TempIndex = 0;
    function UnitAllowedAccess(IdentIndex, Index) {
      var Result = false;
      var i = 0;
      Result = false;
      if (pas.Common.Ident[IdentIndex - 1].Section) for (var $l = 256; $l >= 1; $l--) {
        i = $l;
        if (pas.Common.UnitName[Index - 1].Allow[i - 1] === pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name) return true;
      };
      return Result;
    };
    function Search(X, UnitIndex) {
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      Result = 0;
      for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = 1, $end = pas.Common.NumIdent; $l1 <= $end; $l1++) {
          IdentIndex = $l1;
          if ((X === pas.Common.Ident[IdentIndex - 1].Name) && (pas.Common.BlockStack[BlockStackIndex] === pas.Common.Ident[IdentIndex - 1].Block)) if ((pas.Common.Ident[IdentIndex - 1].UnitIndex === UnitIndex) || (pas.Common.Ident[IdentIndex - 1].UnitIndex === 1) || (pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name === "SYSTEM") || UnitAllowedAccess(IdentIndex,UnitIndex)) {
            Result = IdentIndex;
            pas.Common.Ident[IdentIndex - 1].Pass = pas.Common.pass;
            if (pas.System.Pos(".",X) > 0) $mod.GetIdentIndex(pas.System.Copy(X,1,pas.System.Pos(".",X) - 1));
            if ((pas.Common.Ident[IdentIndex - 1].UnitIndex === UnitIndex) || (pas.Common.Ident[IdentIndex - 1].UnitIndex === 1)) return Result;
          };
        };
      };
      return Result;
    };
    function SearchCurrentUnit(X, UnitIndex) {
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      Result = 0;
      for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = 1, $end = pas.Common.NumIdent; $l1 <= $end; $l1++) {
          IdentIndex = $l1;
          if ((X === pas.Common.Ident[IdentIndex - 1].Name) && (pas.Common.BlockStack[BlockStackIndex] === pas.Common.Ident[IdentIndex - 1].Block)) if ((pas.Common.Ident[IdentIndex - 1].UnitIndex === UnitIndex) || UnitAllowedAccess(IdentIndex,UnitIndex)) {
            Result = IdentIndex;
            pas.Common.Ident[IdentIndex - 1].Pass = pas.Common.pass;
            if (pas.System.Pos(".",X) > 0) $mod.GetIdentIndex(pas.System.Copy(X,1,pas.System.Pos(".",X) - 1));
            if (pas.Common.Ident[IdentIndex - 1].UnitIndex === UnitIndex) return Result;
          };
        };
      };
      return Result;
    };
    if (S === "") return -1;
    Result = Search(S,pas.Common.UnitNameIndex);
    if ((Result === 0) && (pas.System.Pos(".",S) > 0)) {
      TempIndex = Search(pas.System.Copy(S,1,pas.System.Pos(".",S) - 1),pas.Common.UnitNameIndex);
      if (TempIndex > 0) if ((pas.Common.Ident[TempIndex - 1].Kind === 7) || (pas.Common.Ident[TempIndex - 1].DataType === 146)) {
        Result = SearchCurrentUnit(pas.System.Copy(S,pas.System.Pos(".",S) + 1,S.length),pas.Common.Ident[TempIndex - 1].UnitIndex)}
       else if (pas.Common.Ident[TempIndex - 1].DataType === 140) Result = SearchCurrentUnit(pas.Common.TypeArray[pas.Common.Ident[TempIndex - 1].NumAllocElements - 1].Field[0].Name + pas.System.Copy(S,pas.System.Pos(".",S),S.length),pas.Common.Ident[TempIndex - 1].UnitIndex);
    };
    return Result;
  };
  this.GetSizeOf = function (i, ValType) {
    var Result = 0;
    var IdentIndex = 0;
    IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i + 2].Name);
    var $tmp = ValType;
    if ($tmp === 146) {
      Result = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]}
     else if ($tmp === 139) {
      if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Tok[i + 3].Kind === 55)) {
        Result = pas.Common.DataSize[8]}
       else Result = $mod.RecordSize(IdentIndex,"")}
     else if (($tmp === 136) || ($tmp === 137)) {
      if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 139) {
        if (pas.Common.Ident[IdentIndex - 1].NumAllocElements_ > 0) {
          if (pas.Common.Tok[i + 3].Kind === 58) {
            Result = pas.Common.DataSize[8]}
           else Result = pas.Common.Ident[IdentIndex - 1].NumAllocElements_ * 2;
        } else if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
          Result = $mod.RecordSize(IdentIndex,"")}
         else Result = pas.Common.DataSize[8];
      } else if ($mod.Elements(IdentIndex) > 0) {
        Result = ($mod.Elements(IdentIndex) * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]) & 0xFFFFFFFF}
       else Result = pas.Common.DataSize[8];
    } else {
      if (ValType === 0) {
        Result = 0}
       else Result = pas.Common.DataSize[ValType - 128];
    };
    return Result;
  };
  this.ObjectRecordSize = function (i) {
    var Result = 0;
    var j = 0;
    var FieldType = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    Result = 0;
    FieldType = 0;
    if (i > 0) {
      for (var $l = 1, $end = pas.Common.TypeArray[i - 1].NumFields; $l <= $end; $l++) {
        j = $l;
        FieldType = pas.Common.TypeArray[i - 1].Field[j].DataType;
        NumAllocElements = pas.Common.TypeArray[i - 1].Field[j].NumAllocElements;
        AllocElementType = pas.Common.TypeArray[i - 1].Field[j].AllocElementType;
        if (FieldType !== 139) Result += pas.Common.DataSize[FieldType - 128];
      };
    };
    return Result;
  };
  this.RecordSize = function (IdentIndex, field) {
    var Result = 0;
    var i = 0;
    var j = 0;
    var name = "";
    var base = "";
    var FieldType = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    var yes = false;
    i = pas.Common.Ident[IdentIndex - 1].NumAllocElements;
    Result = 0;
    FieldType = 0;
    yes = false;
    if (i > 0) {
      for (var $l = 1, $end = pas.Common.TypeArray[i - 1].NumFields; $l <= $end; $l++) {
        j = $l;
        FieldType = pas.Common.TypeArray[i - 1].Field[j].DataType;
        NumAllocElements = pas.Common.TypeArray[i - 1].Field[j].NumAllocElements;
        AllocElementType = pas.Common.TypeArray[i - 1].Field[j].AllocElementType;
        if (AllocElementType in rtl.createSet(149,147)) {
          AllocElementType = 136;
          NumAllocElements = 0;
        };
        if (pas.Common.TypeArray[i - 1].Field[j].Name === field) {
          yes = true;
          break;
        };
        if (FieldType !== 139) if ((FieldType in pas.Common.Pointers) && (NumAllocElements > 0)) {
          Result += NumAllocElements * pas.Common.DataSize[AllocElementType - 128]}
         else Result += pas.Common.DataSize[FieldType - 128];
      };
    } else {
      name = pas.Common.Ident[IdentIndex - 1].Name;
      base = pas.System.Copy(name,1,pas.System.Pos(".",name) - 1);
      IdentIndex = $mod.GetIdentIndex(base);
      for (var $l1 = 1, $end1 = pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].NumFields; $l1 <= $end1; $l1++) {
        i = $l1;
        if (pas.System.Pos(name,base + "." + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[i].Name) > 0) if (pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[i].DataType !== 139) {
          FieldType = pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[i].DataType;
          NumAllocElements = pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[i].NumAllocElements;
          AllocElementType = pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[i].AllocElementType;
          if (pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[i].Name === field) {
            yes = true;
            break;
          };
          if (FieldType !== 139) if ((FieldType in pas.Common.Pointers) && (NumAllocElements > 0)) {
            Result += NumAllocElements * pas.Common.DataSize[AllocElementType - 128]}
           else Result += pas.Common.DataSize[FieldType - 128];
        };
      };
    };
    if (field !== "") if (!yes) {
      Result = -1}
     else Result = Result + (FieldType << 16);
    return Result;
  };
  this.SaveToDataSegment = function (ConstDataSize, ConstVal, ConstValType) {
    if ((ConstDataSize < 0) || (ConstDataSize > 0xFFFF)) {
      pas.System.Writeln("SaveToDataSegment: ",ConstDataSize);
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    var $tmp = ConstValType;
    if (($tmp === 131) || ($tmp === 128) || ($tmp === 134) || ($tmp === 135)) {
      pas.Common.DataSegment[ConstDataSize] = ConstVal & 255}
     else if (($tmp === 132) || ($tmp === 129) || ($tmp === 141) || ($tmp === 136) || ($tmp === 137) || ($tmp === 145)) {
      pas.Common.DataSegment[ConstDataSize] = ConstVal & 255;
      pas.Common.DataSegment[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
    } else if ($tmp === 160) {
      pas.Common.DataSegment[ConstDataSize] = (ConstVal & 255) | 0x8000;
      pas.Common.DataSegment[ConstDataSize + 1] = (Math.floor(ConstVal / 256) & 255) | 0x4000;
    } else if ($tmp === 161) {
      pas.Common.DataSegment[ConstDataSize] = (ConstVal & 255) | 0x2000;
      pas.Common.DataSegment[ConstDataSize + 1] = (Math.floor(ConstVal / 256) & 255) | 0x1000;
    } else if (($tmp === 133) || ($tmp === 130) || ($tmp === 142)) {
      pas.Common.DataSegment[ConstDataSize] = ConstVal & 255;
      pas.Common.DataSegment[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
      pas.Common.DataSegment[ConstDataSize + 2] = Math.floor(ConstVal / 65536) & 255;
      pas.Common.DataSegment[ConstDataSize + 3] = Math.floor(ConstVal / 16777216) & 255;
    } else if ($tmp === 143) {
      ConstVal = pas.Numbers.CastToSingle(ConstVal);
      pas.Common.DataSegment[ConstDataSize] = ConstVal & 255;
      pas.Common.DataSegment[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
      pas.Common.DataSegment[ConstDataSize + 2] = Math.floor(ConstVal / 65536) & 255;
      pas.Common.DataSegment[ConstDataSize + 3] = Math.floor(ConstVal / 16777216) & 255;
    } else if ($tmp === 144) {
      ConstVal = pas.Numbers.CastToHalfSingle(ConstVal);
      pas.Common.DataSegment[ConstDataSize] = ConstVal & 255;
      pas.Common.DataSegment[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
    };
    pas.Common.DataSegmentUse = true;
  };
  $mod.$implcode = function () {
    $impl.CompileConstFactor = function (i, ConstVal, ConstValType) {
      var Result = 0;
      var IdentIndex = 0;
      var j = 0;
      var Kind = 0;
      var ArrayIndexType = 0;
      var ArrayIndex = 0;
      function GetStaticValue(x) {
        var Result = 0;
        Result = pas.Common.StaticStringData[(pas.Common.Ident[IdentIndex - 1].Value - 256 - pas.Common.CODEORIGIN_BASE) + (ArrayIndex * pas.Common.DataSize[ConstValType.get() - 128]) + x];
        return Result;
      };
      var $ir = rtl.createIntfRefs();
      try {
        ConstVal.set(0);
        ConstValType.set(0);
        Result = i;
        j = 0;
        var $tmp = pas.Common.Tok[i].Kind;
        if ($tmp === 86) {
          pas.Common.CheckTok(i + 1,54);
          if (pas.Common.Tok[i + 2].Kind in pas.Common.AllTypes) {
            ConstValType.set(pas.Common.Tok[i + 2].Kind);
            i += 2;
          } else {
            i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
            if (pas.Common.isError) return Result;
          };
          if (ConstValType.get() in pas.Common.Pointers) {
            ConstVal.set(0)}
           else ConstVal.set(pas.Common.LowBound(i,ConstValType.get()));
          ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          pas.Common.CheckTok(i + 1,55);
          Result = i + 1;
        } else if ($tmp === 85) {
          pas.Common.CheckTok(i + 1,54);
          if (pas.Common.Tok[i + 2].Kind in pas.Common.AllTypes) {
            ConstValType.set(pas.Common.Tok[i + 2].Kind);
            i += 2;
          } else {
            i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
            if (pas.Common.isError) return Result;
          };
          if (ConstValType.get() in pas.Common.Pointers) {
            IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i].Name);
            if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) {
              ConstVal.set(pas.Common.Ident[IdentIndex - 1].NumAllocElements_ - 1)}
             else if (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) {
              ConstVal.set(pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1)}
             else ConstVal.set(0);
          } else ConstVal.set(pas.Common.HighBound(i,ConstValType.get()));
          ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          pas.Common.CheckTok(i + 1,55);
          Result = i + 1;
        } else if ($tmp === 84) {
          pas.Common.CheckTok(i + 1,54);
          ConstVal.set(0);
          if (pas.Common.Tok[i + 2].Kind === 170) {
            IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i + 2].Name);
            if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
            if (pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(3,1)) {
              if ((pas.Common.Ident[IdentIndex - 1].DataType === 137) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0))) {
                if ((pas.Common.Ident[IdentIndex - 1].DataType === 137) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 134)) {
                  pas.Common.isError = true;
                  return Result;
                } else {
                  if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) {
                    ConstVal.set(pas.Common.Ident[IdentIndex - 1].NumAllocElements_)}
                   else ConstVal.set(pas.Common.Ident[IdentIndex - 1].NumAllocElements);
                  ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
                };
              } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.TypeMismatch);
            } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
            i += 2;
          } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
          pas.Common.CheckTok(i + 1,55);
          Result = i + 1;
        } else if ($tmp === 83) {
          pas.Common.CheckTok(i + 1,54);
          if (pas.Common.Tok[i + 2].Kind in rtl.unionSet(rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes),rtl.createSet(136))) {
            ConstVal.set(pas.Common.DataSize[pas.Common.Tok[i + 2].Kind - 128]);
            ConstValType.set(128);
            j = i + 2;
          } else {
            if (pas.Common.Tok[i + 2].Kind !== 170) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
            j = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
            if (pas.Common.isError) return Result;
            ConstVal.set($mod.GetSizeOf(i,ConstValType.get()));
            ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          };
          pas.Common.CheckTok(j + 1,55);
          Result = j + 1;
        } else if ($tmp === 49) {
          pas.Common.CheckTok(i + 1,54);
          pas.Common.OldConstValType = 0;
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          if (pas.Common.OldConstValType in rtl.createSet(160,161)) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidVariableAddress,"Can't take the address of variable","",""]),pas.Messages.IMessage)));
          pas.Common.GetCommonConstType(i,133,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,55);
          var $tmp1 = ConstValType.get();
          if (($tmp1 === 133) || ($tmp1 === 130)) {
            ConstVal.set(ConstVal.get() & 0xFFFF)}
           else if (($tmp1 === 132) || ($tmp1 === 129)) {
            ConstVal.set(ConstVal.get() & 0xFF)}
           else if (($tmp1 === 131) || ($tmp1 === 128)) ConstVal.set(ConstVal.get() & 0xF);
          ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          Result = i + 1;
        } else if ($tmp === 50) {
          pas.Common.CheckTok(i + 1,54);
          pas.Common.OldConstValType = 0;
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          if (pas.Common.OldConstValType in rtl.createSet(160,161)) pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidVariableAddress,"Can't take the address of variable","",""]),pas.Messages.IMessage)));
          pas.Common.GetCommonConstType(i,133,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,55);
          var $tmp2 = ConstValType.get();
          if (($tmp2 === 133) || ($tmp2 === 130)) {
            ConstVal.set(Math.floor(ConstVal.get() / 65536))}
           else if (($tmp2 === 132) || ($tmp2 === 129)) {
            ConstVal.set(Math.floor(ConstVal.get() / 256))}
           else if (($tmp2 === 131) || ($tmp2 === 128)) ConstVal.set(Math.floor(ConstVal.get() / 16));
          ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          Result = i + 1;
        } else if (($tmp === 87) || ($tmp === 88)) {
          Kind = pas.Common.Tok[i].Kind;
          pas.Common.CheckTok(i + 1,54);
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          if (!(ConstValType.get() in pas.Common.RealTypes)) pas.Messages.ErrorIncompatibleTypes(i,ConstValType.get(),142,false);
          pas.Common.CheckTok(i + 1,55);
          var $tmp3 = Kind;
          if ($tmp3 === 87) {
            ConstVal.set(pas.Numbers.Trunc(ConstValType.get(),ConstVal.get()))}
           else if ($tmp3 === 88) ConstVal.set(pas.Numbers.Frac(ConstValType.get(),ConstVal.get()));
          Result = i + 1;
        } else if (($tmp === 90) || ($tmp === 89)) {
          Kind = pas.Common.Tok[i].Kind;
          pas.Common.CheckTok(i + 1,54);
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          pas.Common.GetCommonConstType(i,142,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,55);
          ConstVal.set(ConstVal.get() & 0xFFFFFFFF);
          var $tmp4 = Kind;
          if ($tmp4 === 90) {
            if (ConstVal.get() < 0) {
              ConstVal.set(-((Math.abs(ConstVal.get()) >>> 8) + (((Math.abs(ConstVal.get()) & 0xff) > 127) + 0)))}
             else ConstVal.set(Math.floor(ConstVal.get() / 256) + (((Math.abs(ConstVal.get()) & 0xff) > 127) + 0))}
           else if ($tmp4 === 89) if (ConstVal.get() < 0) {
            ConstVal.set(-(Math.abs(ConstVal.get()) >>> 8))}
           else ConstVal.set(Math.floor(ConstVal.get() / 256));
          ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          Result = i + 1;
        } else if ($tmp === 91) {
          pas.Common.CheckTok(i + 1,54);
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          pas.Common.GetCommonConstType(i,130,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,55);
          ConstVal.set(pas.System.Odd(ConstVal.get()) + 0);
          ConstValType.set(135);
          Result = i + 1;
        } else if ($tmp === 36) {
          pas.Common.CheckTok(i + 1,54);
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,128,false,true);
          if (pas.Common.isError) return Result;
          pas.Common.GetCommonConstType(i,133,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,55);
          ConstValType.set(134);
          Result = i + 1;
        } else if ($tmp === 35) {
          pas.Common.CheckTok(i + 1,54);
          j = i + 2;
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,128,false,true);
          if (!(ConstValType.get() in rtl.unionSet(pas.Common.OrdinalTypes,rtl.createSet(146)))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
          if (pas.Common.isError) return Result;
          pas.Common.CheckTok(i + 1,55);
          if (ConstValType.get() in rtl.createSet(134,135,146)) ConstValType.set(128);
          Result = i + 1;
        } else if (($tmp === 111) || ($tmp === 110)) {
          Kind = pas.Common.Tok[i].Kind;
          pas.Common.CheckTok(i + 1,54);
          i = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (!(ConstValType.get() in pas.Common.OrdinalTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
          if (pas.Common.isError) return Result;
          pas.Common.CheckTok(i + 1,55);
          if (Kind === 111) {
            ConstVal.set(ConstVal.get() - 1)}
           else ConstVal.set(ConstVal.get() + 1);
          if (!(ConstValType.get() in rtl.createSet(134,135))) ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          Result = i + 1;
        } else if ($tmp === 170) {
          IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i].Name);
          if (IdentIndex > 0) {
            if ((pas.Common.Ident[IdentIndex - 1].Kind === 2) && (pas.Common.Tok[i + 1].Kind === 54)) {
              pas.Common.CheckTok(i + 1,54);
              j = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
              if (pas.Common.isError) return Result;
              if (!(ConstValType.get() in pas.Common.AllTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.TypeMismatch);
              if ((pas.Common.Ident[$mod.GetIdentIndex(pas.Common.Tok[i].Name) - 1].DataType in pas.Common.RealTypes) && (ConstValType.get() in pas.Common.RealTypes)) {}
              else if (pas.Common.Ident[$mod.GetIdentIndex(pas.Common.Tok[i].Name) - 1].DataType in pas.Common.Pointers) {
                pas.Messages.Error$1(j,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "' + pas.Common.InfoAboutToken(ConstValType.get()) + '" to "' + pas.Common.Tok[i].Name + '"',"",""]),pas.Messages.IMessage)));
              };
              ConstValType.set(pas.Common.Ident[$mod.GetIdentIndex(pas.Common.Tok[i].Name) - 1].DataType);
              pas.Common.CheckTok(j + 1,55);
              i = j + 1;
            } else if (!(pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(1,2,146))) {
              pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantExpected,"Constant expected but {0} found",pas.Common.Ident[IdentIndex - 1].Name,""]),pas.Messages.IMessage)));
            } else if (pas.Common.Tok[i + 1].Kind === 58) {
              if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
               else {
                j = $mod.CompileConstExpression(i + 2,{get: function () {
                    return ArrayIndex;
                  }, set: function (v) {
                    ArrayIndex = v;
                  }},{get: function () {
                    return ArrayIndexType;
                  }, set: function (v) {
                    ArrayIndexType = v;
                  }},133,false,true);
                if (pas.Common.isError) return Result;
                if ((ArrayIndex < 0) || (ArrayIndex > ((pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1) + ((pas.Common.Ident[IdentIndex - 1].DataType === 137) + 0)))) {
                  pas.Common.isConst = false;
                  pas.Messages.Error$2(i,pas.Messages.TErrorCode.SubrangeBounds);
                };
                pas.Common.CheckTok(j + 1,59);
                if (pas.Common.Tok[j + 2].Kind === 58) {
                  pas.Common.isError = true;
                  return Result;
                };
                ConstValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                var $tmp5 = pas.Common.DataSize[ConstValType.get() - 128];
                if ($tmp5 === 1) {
                  ConstVal.set(GetStaticValue(0 + ((pas.Common.Ident[IdentIndex - 1].IdType === 145) + 0)))}
                 else if ($tmp5 === 2) {
                  ConstVal.set(GetStaticValue(0) + rtl.shl(GetStaticValue(1),8))}
                 else if ($tmp5 === 4) ConstVal.set(GetStaticValue(0) + rtl.shl(GetStaticValue(1),8) + rtl.shl(GetStaticValue(2),16) + rtl.shl(GetStaticValue(3),24));
                if (ConstValType.get() in rtl.createSet(144,143)) ConstVal.set(rtl.shl(ConstVal.get(),32));
                i = j + 1;
              }}
             else {
              ConstValType.set(pas.Common.Ident[IdentIndex - 1].DataType);
              if ((ConstValType.get() in pas.Common.Pointers) || (pas.Common.Ident[IdentIndex - 1].DataType === 137)) {
                ConstVal.set(pas.Common.Ident[IdentIndex - 1].Value - 256)}
               else ConstVal.set(pas.Common.Ident[IdentIndex - 1].Value);
              if (ConstValType.get() === 146) {
                pas.Common.CheckTok(i + 1,54);
                j = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
                if (pas.Common.isError) return Result;
                pas.Common.CheckTok(j + 1,55);
                ConstValType.set(pas.Common.Tok[i].Kind);
                i = j + 1;
              };
            }}
           else pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
          Result = i;
        } else if ($tmp === 57) {
          if (pas.Common.Tok[i + 1].Kind !== 170) {
            pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
           else {
            IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i + 1].Name);
            if (IdentIndex > 0) {
              var $tmp6 = pas.Common.Ident[IdentIndex - 1].Kind;
              if ($tmp6 === 1) {
                if (!((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0))) {
                  pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp)}
                 else ConstVal.set(pas.Common.Ident[IdentIndex - 1].Value - 256)}
               else if ($tmp6 === 3) {
                if (pas.Common.Ident[IdentIndex - 1].isAbsolute) {
                  if ((((pas.Common.Ident[IdentIndex - 1].Value & 0xff) === 0) && ((Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 16777216) & 0x7f & 255) in rtl.createSet(null,1,127))) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements in rtl.createSet(null,0,1)))) {
                    pas.Common.isError = true;
                    return 0;
                  } else {
                    ConstVal.set(pas.Common.Ident[IdentIndex - 1].Value);
                    if (ConstVal.get() < 0) {
                      pas.Common.isError = true;
                      return 0;
                    };
                  };
                } else {
                  if (pas.Common.isConst) {
                    pas.Common.isError = true;
                    return Result;
                  };
                  ConstVal.set(pas.Common.Ident[IdentIndex - 1].Value - 32768);
                  ConstValType.set(160);
                  if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Tok[i + 2].Kind === 58)) {
                    j = $mod.CompileConstExpression(i + 3,{get: function () {
                        return ArrayIndex;
                      }, set: function (v) {
                        ArrayIndex = v;
                      }},{get: function () {
                        return ArrayIndexType;
                      }, set: function (v) {
                        ArrayIndexType = v;
                      }},133,false,true);
                    if (pas.Common.isError) return Result;
                    pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                    if (pas.Common.Tok[j + 1].Kind === 52) {
                      ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128] * pas.Common.Ident[IdentIndex - 1].NumAllocElements_));
                      j = $mod.CompileConstExpression(j + 2,{get: function () {
                          return ArrayIndex;
                        }, set: function (v) {
                          ArrayIndex = v;
                        }},{get: function () {
                          return ArrayIndexType;
                        }, set: function (v) {
                          ArrayIndexType = v;
                        }},133,false,true);
                      if (pas.Common.isError) return Result;
                      pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                      ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]));
                    } else ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]));
                    i = j;
                    pas.Common.CheckTok(i + 1,59);
                  };
                  Result = i + 1;
                  return Result;
                }}
               else {
                pas.Messages.Error$1(i + 1,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantTakeAddressOfIdentifier,"Can't take the address of " + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].Kind),"",""]),pas.Messages.IMessage)));
              };
              if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Tok[i + 2].Kind === 58)) {
                j = $mod.CompileConstExpression(i + 3,{get: function () {
                    return ArrayIndex;
                  }, set: function (v) {
                    ArrayIndex = v;
                  }},{get: function () {
                    return ArrayIndexType;
                  }, set: function (v) {
                    ArrayIndexType = v;
                  }},133,false,true);
                if (pas.Common.isError) return Result;
                pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                if (pas.Common.Tok[j + 1].Kind === 52) {
                  ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128] * pas.Common.Ident[IdentIndex - 1].NumAllocElements_));
                  j = $mod.CompileConstExpression(j + 2,{get: function () {
                      return ArrayIndex;
                    }, set: function (v) {
                      ArrayIndex = v;
                    }},{get: function () {
                      return ArrayIndexType;
                    }, set: function (v) {
                      ArrayIndexType = v;
                    }},133,false,true);
                  if (pas.Common.isError) return Result;
                  pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                  ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]));
                } else ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]));
                i = j;
                pas.Common.CheckTok(i + 1,59);
              };
              ConstValType.set(136);
            } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
            Result = i + 1;
          }}
         else if ($tmp === 171) {
          ConstVal.set(pas.Common.Tok[i].Value);
          ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          Result = i;
        } else if ($tmp === 172) {
          ConstVal.set(pas.Numbers.FromSingle(pas.Common.Tok[i].FracValue));
          ConstValType.set(142);
          Result = i;
        } else if ($tmp === 174) {
          ConstVal.set((pas.Common.Tok[i].StrAddress - 256) + pas.Common.CODEORIGIN_BASE);
          ConstValType.set(137);
          Result = i;
        } else if ($tmp === 173) {
          ConstVal.set(pas.Common.Tok[i].Value);
          ConstValType.set(134);
          Result = i;
        } else if ($tmp === 54) {
          j = $mod.CompileConstExpression(i + 1,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          pas.Common.CheckTok(j + 1,55);
          Result = j + 1;
        } else if ($tmp === 72) {
          Result = $impl.CompileConstFactor(i + 1,ConstVal,ConstValType);
          if (pas.Common.isError) return Result;
          if (ConstValType.get() === 135) {
            ConstVal.set(!(ConstVal.get() !== 0) + 0)}
           else {
            ConstVal.set(~ConstVal.get());
            ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
          };
        } else if (($tmp === 141) || ($tmp === 142) || ($tmp === 143) || ($tmp === 144)) {
          pas.Common.CheckTok(i + 1,54);
          j = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          if (!(ConstValType.get() in pas.Common.RealTypes)) ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          pas.Common.CheckTok(j + 1,55);
          ConstValType.set(pas.Common.Tok[i].Kind);
          Result = j + 1;
        } else if (($tmp === 133) || ($tmp === 130) || ($tmp === 132) || ($tmp === 129) || ($tmp === 134) || ($tmp === 145) || ($tmp === 131) || ($tmp === 128) || ($tmp === 135) || ($tmp === 136) || ($tmp === 137)) {
          pas.Common.CheckTok(i + 1,54);
          if ((pas.Common.Tok[i + 2].Kind === 170) && (pas.Common.Ident[$mod.GetIdentIndex(pas.Common.Tok[i + 2].Name) - 1].Kind === 5)) {
            pas.Common.isError = true}
           else j = $mod.CompileConstExpression(i + 2,ConstVal,ConstValType,133,false,true);
          if (pas.Common.isError) return Result;
          if ((ConstValType.get() in pas.Common.Pointers) && (pas.Common.Tok[i + 2].Kind === 170) && (pas.Common.Tok[i + 3].Kind !== 58)) {
            IdentIndex = $mod.GetIdentIndex(pas.Common.Tok[i + 2].Name);
            if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 139)) if (((pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements in rtl.createSet(0,1))) || (pas.Common.Ident[IdentIndex - 1].DataType === 137)) {}
            else pas.Messages.ErrorIdentifierIllegalTypeConversion(i + 2,IdentIndex,pas.Common.Tok[i].Kind);
          };
          pas.Common.CheckTok(j + 1,55);
          if (ConstValType.get() in rtl.createSet(160,161)) pas.Common.OldConstValType = ConstValType.get();
          ConstValType.set(pas.Common.Tok[i].Kind);
          Result = j + 1;
        } else {
          pas.Messages.Error$2(i,pas.Messages.TErrorCode.IdNumExpExpected);
        };
      } finally {
        $ir.free();
      };
      return Result;
    };
    $impl.CompileSimpleConstExpression = function (i, ConstVal, ConstValType) {
      var Result = 0;
      var j = 0;
      var k = 0;
      var RightConstVal = 0;
      var RightConstValType = 0;
      ConstVal.set(0);
      ConstValType.set(0);
      Result = i;
      if (pas.Common.Tok[i].Kind in rtl.createSet(61,62)) {
        j = i + 1}
       else j = i;
      j = $mod.CompileConstTerm(j,ConstVal,ConstValType);
      if (pas.Common.isError) return Result;
      if (pas.Common.Tok[i].Kind === 62) {
        ConstVal.set(pas.Numbers.Negate(ConstValType,ConstVal.get()));
      };
      while (pas.Common.Tok[j + 1].Kind in rtl.createSet(61,62,69,70)) {
        k = $mod.CompileConstTerm(j + 2,{get: function () {
            return RightConstVal;
          }, set: function (v) {
            RightConstVal = v;
          }},{get: function () {
            return RightConstValType;
          }, set: function (v) {
            RightConstValType = v;
          }});
        if (pas.Common.isError) break;
        if ((ConstValType.get() in pas.Common.RealTypes) && (RightConstValType in pas.Common.IntegerTypes)) {
          RightConstVal = pas.Numbers.FromInt64(RightConstVal);
          RightConstValType = ConstValType.get();
        };
        if ((ConstValType.get() in pas.Common.IntegerTypes) && (RightConstValType in pas.Common.RealTypes)) {
          ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          ConstValType.set(RightConstValType);
        };
        if ((ConstValType.get() in rtl.createSet(143,144)) && (RightConstValType in rtl.createSet(141,142))) RightConstValType = ConstValType.get();
        if ((RightConstValType in rtl.createSet(143,144)) && (ConstValType.get() in rtl.createSet(141,142))) ConstValType.set(RightConstValType);
        var $tmp = pas.Common.Tok[j + 1].Kind;
        if ($tmp === 61) {
          ConstVal.set(pas.Numbers.Add(ConstValType.get(),ConstVal.get(),RightConstVal))}
         else if ($tmp === 62) {
          ConstVal.set(pas.Numbers.Subtract(ConstValType.get(),ConstVal.get(),RightConstVal))}
         else if ($tmp === 69) {
          ConstVal.set(rtl.or(ConstVal.get(),RightConstVal))}
         else if ($tmp === 70) ConstVal.set(rtl.xor(ConstVal.get(),RightConstVal));
        ConstValType.set(pas.Common.GetCommonType(j + 1,ConstValType.get(),RightConstValType));
        if (!(ConstValType.get() in rtl.unionSet(pas.Common.RealTypes,rtl.createSet(135)))) ConstValType.set(pas.Common.GetValueType(ConstVal.get()));
        pas.Common.CheckOperator(i,pas.Common.Tok[j + 1].Kind,ConstValType.get(),RightConstValType);
        j = k;
      };
      Result = j;
      return Result;
    };
    $impl.DeclareFunction = function (i, ProcVarIndex) {
      var Result = 0;
      var VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
      var NumVarOfSameType = 0;
      var VarOfSameTypeIndex = 0;
      var x = 0;
      var ListPassMethod = 0;
      var VarType = 0;
      var AllocElementType = 0;
      var NumAllocElements = 0;
      var IsNestedFunction = false;
      var $ir = rtl.createIntfRefs();
      try {
        VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
        pas.Common.NumProc += 1;
        if (pas.Common.Tok[i].Kind in rtl.createSet(4,99,100)) {
          $mod.DefineIdent(i,"@FN" + pas.SysUtils.IntToHex(pas.Common.NumProc,4),pas.Common.Tok[i].Kind,0,0,0,0,170);
          IsNestedFunction = false;
        } else {
          $mod.DefineIdent(i,"@FN" + pas.SysUtils.IntToHex(pas.Common.NumProc,4),5,0,0,0,0,170);
          IsNestedFunction = true;
        };
        NumVarOfSameType = 0;
        ProcVarIndex.set(pas.Common.NumProc);
        i -= 1;
        if ((pas.Common.Tok[i + 2].Kind === 54) && (pas.Common.Tok[i + 3].Kind === 55)) i += 2;
        if (pas.Common.Tok[i + 2].Kind === 54) {
          i = i + 2;
          do {
            NumVarOfSameType = 0;
            ListPassMethod = pas.Common.TParameterPassingMethod.VALPASSING;
            if (pas.Common.Tok[i + 1].Kind === 1) {
              ListPassMethod = pas.Common.TParameterPassingMethod.CONSTPASSING;
              i += 1;
            } else if (pas.Common.Tok[i + 1].Kind === 3) {
              ListPassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
              i += 1;
            };
            do {
              if (pas.Common.Tok[i + 1].Kind !== 170) {
                pas.Messages.Error$1(i + 1,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FormalParameterNameExpected,"Formal parameter name expected but {0} found.",pas.Common.GetSpelling(i + 1),""]),pas.Messages.IMessage)))}
               else {
                for (var $l = 1, $end = NumVarOfSameType; $l <= $end; $l++) {
                  x = $l;
                  if (VarOfSameType[x - 1].Name === pas.Common.Tok[i + 1].Name) pas.Messages.Error$1(i + 1,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierAlreadyDefined,"Identifier {0}is already defined.",pas.Common.Tok[i + 1].Name,""]),pas.Messages.IMessage)));
                };
                NumVarOfSameType += 1;
                VarOfSameType[NumVarOfSameType - 1].Name = pas.Common.Tok[i + 1].Name;
              };
              i = i + 2;
            } while (!(pas.Common.Tok[i].Kind !== 52));
            VarType = 0;
            NumAllocElements = 0;
            AllocElementType = 0;
            if ((ListPassMethod in rtl.createSet(pas.Common.TParameterPassingMethod.CONSTPASSING,pas.Common.TParameterPassingMethod.VARPASSING)) && (pas.Common.Tok[i].Kind !== 60)) {
              ListPassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
              i -= 1;
            } else {
              pas.Common.CheckTok(i,60);
              if (pas.Common.Tok[i + 1].Kind === 56) pas.Messages.Error$1(i + 1,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","",""]),pas.Messages.IMessage)));
              i = $mod.CompileType(i + 1,{get: function () {
                  return VarType;
                }, set: function (v) {
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  AllocElementType = v;
                }});
              if ((VarType === 138) && (ListPassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileParameterMustBeVAR,"File parameters must be var parameters","",""]),pas.Messages.IMessage)));
            };
            for (var $l1 = 1, $end1 = NumVarOfSameType; $l1 <= $end1; $l1++) {
              VarOfSameTypeIndex = $l1;
              pas.Common.Ident[pas.Common.NumIdent - 1].NumParams += 1;
              if (pas.Common.Ident[pas.Common.NumIdent - 1].NumParams > 8) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.TooManyParameters,pas.Common.NumIdent)}
               else {
                VarOfSameType[VarOfSameTypeIndex - 1].DataType = VarType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].DataType = VarType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].Name = VarOfSameType[VarOfSameTypeIndex - 1].Name;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].NumAllocElements = NumAllocElements;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].AllocElementType = AllocElementType;
                pas.Common.Ident[pas.Common.NumIdent - 1].Param[pas.Common.Ident[pas.Common.NumIdent - 1].NumParams - 1].PassMethod = ListPassMethod;
              };
            };
            i = i + 1;
          } while (!(pas.Common.Tok[i].Kind !== 53));
          pas.Common.CheckTok(i,55);
          i = i + 1;
        } else i = i + 2;
        if (IsNestedFunction) {
          pas.Common.CheckTok(i,60);
          if (pas.Common.Tok[i + 1].Kind === 30) pas.Messages.Error$1(i + 1,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","",""]),pas.Messages.IMessage)));
          i = $mod.CompileType(i + 1,{get: function () {
              return VarType;
            }, set: function (v) {
              VarType = v;
            }},{get: function () {
              return NumAllocElements;
            }, set: function (v) {
              NumAllocElements = v;
            }},{get: function () {
              return AllocElementType;
            }, set: function (v) {
              AllocElementType = v;
            }});
          pas.Common.Ident[pas.Common.NumIdent - 1].DataType = VarType;
          pas.Common.Ident[pas.Common.NumIdent - 1].NestedFunctionNumAllocElements = NumAllocElements;
          pas.Common.Ident[pas.Common.NumIdent - 1].NestedFunctionAllocElementType = AllocElementType;
          i = i + 1;
        };
        pas.Common.Ident[pas.Common.NumIdent - 1].isStdCall = true;
        pas.Common.Ident[pas.Common.NumIdent - 1].isNestedFunction = IsNestedFunction;
        Result = i;
      } finally {
        $ir.free();
      };
      return Result;
    };
  };
},["SysUtils","Messages","Utilities"]);
rtl.module("program",["System","SysUtils","Math","browserconsole","Common","CommonTypes","Console","Diagnostic","FileIO","MathEvaluate","Messages","Numbers","Scanner","Optimize","Parser","StringUtilities","Utilities"],function () {
  "use strict";
  var $mod = this;
  this.evaluationContext = null;
  this.GetIdentResult = function (ProcAsBlock) {
    var Result = 0;
    var IdentIndex = 0;
    Result = 0;
    for (var $l = 1, $end = pas.Common.NumIdent; $l <= $end; $l++) {
      IdentIndex = $l;
      if ((pas.Common.Ident[IdentIndex - 1].Block === ProcAsBlock) && (pas.Common.Ident[IdentIndex - 1].Name === "RESULT")) return IdentIndex;
    };
    return Result;
  };
  this.GetOverloadName = function (IdentIndex) {
    var Result = "";
    var ParamIndex = 0;
    Result = "@" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].NumParams,2);
    if (pas.Common.Ident[IdentIndex - 1].NumParams > 0) for (var $l = pas.Common.Ident[IdentIndex - 1].NumParams; $l >= 1; $l--) {
      ParamIndex = $l;
      Result = Result + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].PassMethod,2) + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType,2) + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].AllocElementType,2) + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].NumAllocElements,8 * ((pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].NumAllocElements !== 0) + 0));
    };
    return Result;
  };
  this.GetLocalName = function (IdentIndex, a) {
    var Result = "";
    if ((pas.Common.Ident[IdentIndex - 1].UnitIndex > 1) && (pas.Common.Ident[IdentIndex - 1].UnitIndex !== pas.Common.UnitNameIndex) && pas.Common.Ident[IdentIndex - 1].Section) {
      Result = pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + "." + a + pas.Common.Ident[IdentIndex - 1].Name}
     else Result = a + pas.Common.Ident[IdentIndex - 1].Name;
    return Result;
  };
  this.ExtractName = function (IdentIndex, a) {
    var Result = "";
    var lab = "";
    if (pas.System.Pos(pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + ".",a) === 1) {
      lab = pas.Common.Ident[IdentIndex - 1].Name;
      if (pas.SysUtils.TStringHelper.IndexOf.call({get: function () {
          return lab;
        }, set: function (v) {
          lab = v;
        }},".") > 0) lab = pas.System.Copy(lab,1,pas.SysUtils.TStringHelper.LastIndexOf.call({get: function () {
          return lab;
        }, set: function (v) {
          lab = v;
        }},"."));
      if (pas.System.Pos(pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + ".adr.",a) === 1) {
        Result = pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + ".adr." + lab}
       else Result = pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + "." + lab;
    } else Result = pas.System.Copy(a,1,pas.SysUtils.TStringHelper.IndexOf.call({get: function () {
        return a;
      }, set: function (v) {
        rtl.raiseE("EPropReadOnly");
      }},"."));
    return Result;
  };
  this.TestName = function (IdentIndex, a) {
    var Result = false;
    if (pas.System.Pos(pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + ".",a) === 1) a = pas.System.Copy(a,pas.SysUtils.TStringHelper.IndexOf.call({get: function () {
        return a;
      }, set: function (v) {
        a = v;
      }},".") + 2,a.length);
    Result = pas.System.Pos(".",a) > 0;
    return Result;
  };
  var TBest = rtl.recNewT(null,"",function () {
    this.hit = 0;
    this.IdentIndex = 0;
    this.b = 0;
    this.$eq = function (b) {
      return (this.hit === b.hit) && (this.IdentIndex === b.IdentIndex) && (this.b === b.b);
    };
    this.$assign = function (s) {
      this.hit = s.hit;
      this.IdentIndex = s.IdentIndex;
      this.b = s.b;
      return this;
    };
  });
  this.GetIdentProc = function (S, ProcIdentIndex, Param, NumParams) {
    var Result = 0;
    var IdentIndex = 0;
    var BlockStackIndex = 0;
    var i = 0;
    var k = 0;
    var b = 0;
    var hits = 0;
    var m = 0;
    var df = 0;
    var yes = false;
    var best = [];
    Result = 0;
    best = [];
    best = rtl.arraySetLength(best,TBest,1);
    best[0].$assign(TBest.$new());
    for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
      BlockStackIndex = $l;
      for (var $l1 = pas.Common.NumIdent; $l1 >= 1; $l1--) {
        IdentIndex = $l1;
        if ((pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(4,5,99,100)) && (pas.Common.Ident[IdentIndex - 1].UnitIndex === pas.Common.Ident[ProcIdentIndex - 1].UnitIndex) && (S === pas.Common.Ident[IdentIndex - 1].Name) && (pas.Common.BlockStack[BlockStackIndex] === pas.Common.Ident[IdentIndex - 1].Block) && (pas.Common.Ident[IdentIndex - 1].NumParams === NumParams)) {
          hits = 0;
          for (var $l2 = 1, $end = NumParams; $l2 <= $end; $l2++) {
            i = $l2;
            if (((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType in pas.Common.UnsignedOrdinalTypes) && (Param[i - 1].DataType in pas.Common.UnsignedOrdinalTypes) && (pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType - 128] >= pas.Common.DataSize[Param[i - 1].DataType - 128])) || ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType in pas.Common.SignedOrdinalTypes) && (Param[i - 1].DataType in pas.Common.SignedOrdinalTypes) && (pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType - 128] >= pas.Common.DataSize[Param[i - 1].DataType - 128])) || ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType in pas.Common.SignedOrdinalTypes) && (Param[i - 1].DataType in pas.Common.UnsignedOrdinalTypes) && (pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType - 128] >= pas.Common.DataSize[Param[i - 1].DataType - 128])) || (pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType === Param[i - 1].DataType) || ((Param[i - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType === Param[i - 1].AllocElementType)) || ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType === 0) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING))) {
              if (pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType === 147) {
                var $tmp = Param[i - 1].AllocElementType;
                if (($tmp === 4) || ($tmp === 5)) {
                  yes = pas.Common.Ident[pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(rtl.lw(pas.Common.Ident[IdentIndex - 1].Param[i - 1].NumAllocElements >>> 16),4)) - 1].NumParams === pas.Common.Ident[pas.Parser.GetIdentIndex(Param[i - 1].Name) - 1].NumParams}
                 else if ($tmp === 147) {
                  yes = pas.Common.Ident[pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(rtl.lw(pas.Common.Ident[IdentIndex - 1].Param[i - 1].NumAllocElements >>> 16),4)) - 1].NumParams === pas.Common.Ident[pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(rtl.lw(Param[i - 1].NumAllocElements >>> 16),4)) - 1].NumParams}
                 else {
                  yes = false;
                };
                if (yes) hits += 1;
              } else hits += 1;
              if ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType === 0) && (Param[i - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType === 0) && (Param[i - 1].AllocElementType !== 0) && (Param[i - 1].NumAllocElements > 0)) {
                hits += 1;
              };
              if ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType in pas.Common.IntegerTypes) && (Param[i - 1].DataType in pas.Common.IntegerTypes)) {
                if (pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType in pas.Common.UnsignedOrdinalTypes) {
                  b = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType - 128];
                  k = pas.Common.DataSize[Param[i - 1].DataType - 128];
                  if (b >= k) {
                    df = 4 - Math.abs(b - k);
                    if (Param[i - 1].DataType in pas.Common.UnsignedOrdinalTypes) df += 2;
                    hits += df;
                  };
                } else {
                  b = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType - 128];
                  k = pas.Common.DataSize[Param[i - 1].DataType - 128];
                  if (Param[i - 1].DataType in rtl.createSet(128,129)) k += 1;
                  if (b >= k) {
                    df = 4 - Math.abs(b - k);
                    if (Param[i - 1].DataType in pas.Common.SignedOrdinalTypes) df += 2;
                    hits += df;
                  };
                };
              };
              if ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType === Param[i - 1].DataType) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType === Param[i - 1].AllocElementType)) {
                hits += 1;
              };
              if ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].DataType === Param[i - 1].DataType) && ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType === Param[i - 1].AllocElementType) || ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType === 0) && (Param[i - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].NumAllocElements === Param[i - 1].NumAllocElements)) || ((pas.Common.Ident[IdentIndex - 1].Param[i - 1].AllocElementType !== 0) && (Param[i - 1].AllocElementType === 0) && (pas.Common.Ident[IdentIndex - 1].Param[i - 1].NumAllocElements === Param[i - 1].NumAllocElements)))) {
                hits += 1;
              };
            };
          };
          k = rtl.length(best) - 1;
          best[k].IdentIndex = IdentIndex;
          best[k].hit = hits;
          best[k].b = pas.Common.Ident[IdentIndex - 1].Block;
          best = rtl.arraySetLength(best,TBest,k + 2);
        };
      };
    };
    m = 0;
    b = 0;
    if ((rtl.length(best) - 1) === 1) {
      Result = best[0].IdentIndex}
     else {
      if (NumParams === 0) {
        for (var $l3 = 0, $end1 = rtl.length(best) - 1 - 1; $l3 <= $end1; $l3++) {
          i = $l3;
          if (best[i].b >= b) {
            b = best[i].b;
            Result = best[i].IdentIndex;
          };
        };
      } else for (var $l4 = 0, $end2 = rtl.length(best) - 1 - 1; $l4 <= $end2; $l4++) {
        i = $l4;
        if ((best[i].hit > m) && (best[i].b >= b)) {
          m = best[i].hit;
          b = best[i].b;
          Result = best[i].IdentIndex;
        };
      };
    };
    best = rtl.arraySetLength(best,TBest,0);
    return Result;
  };
  var TOV = rtl.recNewT(null,"",function () {
    this.i = 0;
    this.j = 0;
    this.u = 0;
    this.b = 0;
    this.$eq = function (b) {
      return (this.i === b.i) && (this.j === b.j) && (this.u === b.u) && (this.b === b.b);
    };
    this.$assign = function (s) {
      this.i = s.i;
      this.j = s.j;
      this.u = s.u;
      this.b = s.b;
      return this;
    };
  });
  var TL = rtl.recNewT(null,"",function () {
    this.u = 0;
    this.b = 0;
    this.NumParams = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Param = rtl.arraySetLength(null,pas.Common.TParam,8);
      return r;
    };
    this.$eq = function (b) {
      return (this.u === b.u) && (this.b === b.b) && rtl.arrayEq(this.Param,b.Param) && (this.NumParams === b.NumParams);
    };
    this.$assign = function (s) {
      this.u = s.u;
      this.b = s.b;
      this.Param = pas.Common.TParamList$clone(s.Param);
      this.NumParams = s.NumParams;
      return this;
    };
  });
  this.TestIdentProc = function (x, S) {
    var IdentIndex = 0;
    var BlockStackIndex = 0;
    var k = 0;
    var m = 0;
    var ok = false;
    var ov = [];
    var l = [];
    function addOverlay(UnitIndex, Block, ovr) {
      var i = 0;
      for (var $l = rtl.length(ov) - 1 - 1; $l >= 0; $l--) {
        i = $l;
        if ((ov[i].u === UnitIndex) && (ov[i].b === Block)) {
          ov[i].i += ovr + 0;
          ov[i].j += 1;
          return;
        };
      };
      i = rtl.length(ov) - 1;
      ov[i].u = UnitIndex;
      ov[i].b = Block;
      ov[i].i = ovr + 0;
      ov[i].j = 1;
      ov = rtl.arraySetLength(ov,TOV,i + 2);
    };
    var $ir = rtl.createIntfRefs();
    try {
      ov = [];
      ov = rtl.arraySetLength(ov,TOV,1);
      l = [];
      l = rtl.arraySetLength(l,TL,1);
      for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = pas.Common.NumIdent; $l1 >= 1; $l1--) {
          IdentIndex = $l1;
          if ((pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(4,5,99,100)) && (S === pas.Common.Ident[IdentIndex - 1].Name) && (pas.Common.BlockStack[BlockStackIndex] === pas.Common.Ident[IdentIndex - 1].Block)) {
            for (var $l2 = 0, $end = rtl.length(l) - 1 - 1; $l2 <= $end; $l2++) {
              k = $l2;
              if ((pas.Common.Ident[IdentIndex - 1].NumParams === l[k].NumParams) && (pas.Common.Ident[IdentIndex - 1].UnitIndex === l[k].u) && (pas.Common.Ident[IdentIndex - 1].Block === l[k].b)) {
                ok = true;
                for (var $l3 = 1, $end1 = l[k].NumParams; $l3 <= $end1; $l3++) {
                  m = $l3;
                  if ((pas.Common.Ident[IdentIndex - 1].Param[m - 1].DataType !== l[k].Param[m - 1].DataType) || (pas.Common.Ident[IdentIndex - 1].Param[m - 1].AllocElementType !== l[k].Param[m - 1].AllocElementType)) {
                    ok = false;
                    break;
                  };
                  if ((pas.Common.Ident[IdentIndex - 1].Param[m - 1].DataType === l[k].Param[m - 1].DataType) && (pas.Common.Ident[IdentIndex - 1].Param[m - 1].AllocElementType === 147) && (l[k].Param[m - 1].AllocElementType === 147) && (rtl.lw(pas.Common.Ident[IdentIndex - 1].Param[m - 1].NumAllocElements >>> 16) !== rtl.lw(l[k].Param[m - 1].NumAllocElements >>> 16))) {
                    ok = false;
                    break;
                  };
                };
                if (ok) pas.Messages.Error$1(x,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongParameterList,"Overloaded functions '" + pas.Common.Ident[IdentIndex - 1].Name + "' have the same parameter list","",""]),pas.Messages.IMessage)));
              };
            };
            k = rtl.length(l) - 1;
            l[k].NumParams = pas.Common.Ident[IdentIndex - 1].NumParams;
            l[k].Param = pas.Common.Ident[IdentIndex - 1].Param;
            l[k].u = pas.Common.Ident[IdentIndex - 1].UnitIndex;
            l[k].b = pas.Common.Ident[IdentIndex - 1].Block;
            l = rtl.arraySetLength(l,TL,k + 2);
            addOverlay(pas.Common.Ident[IdentIndex - 1].UnitIndex,pas.Common.Ident[IdentIndex - 1].Block,pas.Common.Ident[IdentIndex - 1].isOverload);
          };
        };
      };
      for (var $l4 = 0, $end2 = rtl.length(ov) - 1 - 1; $l4 <= $end2; $l4++) {
        pas.Common.i = $l4;
        if (ov[pas.Common.i].j > 1) if (ov[pas.Common.i].i !== ov[pas.Common.i].j) pas.Messages.Error$1(x,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.NotAllDeclarationsOverloaded,"Not all declarations of " + pas.Common.Ident[pas.Common.NumIdent - 1].Name + " are declared with OVERLOAD","",""]),pas.Messages.IMessage)));
      };
      l = rtl.arraySetLength(l,TL,0);
      ov = rtl.arraySetLength(ov,TOV,0);
    } finally {
      $ir.free();
    };
  };
  this.AddCallGraphChild = function (ParentBlock, ChildBlock) {
    if (ParentBlock !== ChildBlock) {
      pas.Common.CallGraph[ParentBlock - 1].NumChildren += 1;
      pas.Common.CallGraph[ParentBlock - 1].ChildBlock[pas.Common.CallGraph[ParentBlock - 1].NumChildren - 1] = ChildBlock;
    };
  };
  this.asm65separator = function (a) {
    if (a) pas.Optimize.asm65("","");
    pas.Optimize.asm65("; " + pas.System.StringOfChar("-",60),"");
  };
  this.GetStackVariable = function (n) {
    var Result = "";
    var $tmp = n;
    if ($tmp === 0) {
      Result = " :STACKORIGIN,x"}
     else if ($tmp === 1) {
      Result = " :STACKORIGIN+STACKWIDTH,x"}
     else if ($tmp === 2) {
      Result = " :STACKORIGIN+STACKWIDTH*2,x"}
     else if ($tmp === 3) {
      Result = " :STACKORIGIN+STACKWIDTH*3,x"}
     else {
      Result = "";
    };
    return Result;
  };
  this.a65 = function (code, Value, Kind, Size, IdentIndex) {
    var v = 0;
    var svar = "";
    var $tmp = code;
    if ($tmp === pas.Common.TCode65.putEOL) {
      pas.Optimize.asm65("\t@printEOL","")}
     else if ($tmp === pas.Common.TCode65.putCHAR) {
      pas.Optimize.asm65("\tjsr @printCHAR","")}
     else if ($tmp === pas.Common.TCode65.shlAL_CL) {
      pas.Optimize.asm65("\tjsr @shlEAX_CL.BYTE","")}
     else if ($tmp === pas.Common.TCode65.shlAX_CL) {
      pas.Optimize.asm65("\tjsr @shlEAX_CL.WORD","")}
     else if ($tmp === pas.Common.TCode65.shlEAX_CL) {
      pas.Optimize.asm65("\tjsr @shlEAX_CL.CARD","")}
     else if ($tmp === pas.Common.TCode65.shrAL_CL) {
      pas.Optimize.asm65("\tjsr @shrAL_CL","")}
     else if ($tmp === pas.Common.TCode65.shrAX_CL) {
      pas.Optimize.asm65("\tjsr @shrAX_CL","")}
     else if ($tmp === pas.Common.TCode65.shrEAX_CL) {
      pas.Optimize.asm65("\tjsr @shrEAX_CL","")}
     else if ($tmp === pas.Common.TCode65.je) {
      pas.Optimize.asm65("\tbeq *+5","")}
     else if ($tmp === pas.Common.TCode65.jne) {
      pas.Optimize.asm65("\tbne *+5","")}
     else if ($tmp === pas.Common.TCode65.addBX) {
      pas.Optimize.asm65("\tinx","")}
     else if ($tmp === pas.Common.TCode65.subBX) {
      pas.Optimize.asm65("\tdex","")}
     else if ($tmp === pas.Common.TCode65.addAL_CL) {
      pas.Optimize.asm65("\tjsr addAL_CL","")}
     else if ($tmp === pas.Common.TCode65.addAX_CX) {
      pas.Optimize.asm65("\tjsr addAX_CX","")}
     else if ($tmp === pas.Common.TCode65.addEAX_ECX) {
      pas.Optimize.asm65("\tjsr addEAX_ECX","")}
     else if ($tmp === pas.Common.TCode65.subAL_CL) {
      pas.Optimize.asm65("\tjsr subAL_CL","")}
     else if ($tmp === pas.Common.TCode65.subAX_CX) {
      pas.Optimize.asm65("\tjsr subAX_CX","")}
     else if ($tmp === pas.Common.TCode65.subEAX_ECX) {
      pas.Optimize.asm65("\tjsr subEAX_ECX","")}
     else if ($tmp === pas.Common.TCode65.imulECX) {
      pas.Optimize.asm65("\tjsr imulECX","")}
     else if ($tmp === pas.Common.TCode65.cmpSTRING2CHAR) {
      pas.Optimize.asm65("\tjsr cmpSTRING2CHAR","")}
     else if ($tmp === pas.Common.TCode65.cmpCHAR2STRING) {
      pas.Optimize.asm65("\tjsr cmpCHAR2STRING","")}
     else if ($tmp === pas.Common.TCode65.movaBX_Value) {
      if (Kind === 3) {
        svar = $mod.GetLocalName(IdentIndex,"");
        pas.Optimize.asm65("\tmva <" + svar + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tmva >" + svar + $mod.GetStackVariable(1),"");
      } else {
        v = Value & 255;
        pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $mod.GetStackVariable(0),"");
        if (Size in rtl.createSet(2,4)) {
          v = Math.floor(Value / 256) & 255;
          pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $mod.GetStackVariable(1),"");
        };
        if (Size === 4) {
          v = Math.floor(Value / 65536) & 255;
          pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $mod.GetStackVariable(2),"");
          v = Math.floor(Value / 16777216) & 255;
          pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $mod.GetStackVariable(3),"");
        };
      };
    };
  };
  this.Gen = function () {
    if (!pas.Common.OutputDisabled) pas.Common.CodeSize += 1;
  };
  this.ExpandParam = function (Dest, Source) {
    var i = 0;
    if ((Source in pas.Common.IntegerTypes) && (Dest in pas.Common.IntegerTypes)) {
      i = pas.Common.DataSize[Dest - 128] - pas.Common.DataSize[Source - 128];
      if (i > 0) {
        var $tmp = i;
        if ($tmp === 1) {
          if (Source in pas.Common.SignedOrdinalTypes) {
            pas.Optimize.asm65("\tjsr @expandSHORT2SMALL","")}
           else pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH,x","")}
         else if ($tmp === 2) {
          if (Source in pas.Common.SignedOrdinalTypes) {
            pas.Optimize.asm65("\tjsr @expandToCARD.SMALL","")}
           else {
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x","");
          }}
         else if ($tmp === 3) if (Source in pas.Common.SignedOrdinalTypes) {
          pas.Optimize.asm65("\tjsr @expandToCARD.SHORT","")}
         else {
          pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x","");
        };
      };
    };
  };
  this.ExpandParam_m1 = function (Dest, Source) {
    var i = 0;
    if ((Source in pas.Common.IntegerTypes) && (Dest in pas.Common.IntegerTypes)) {
      i = pas.Common.DataSize[Dest - 128] - pas.Common.DataSize[Source - 128];
      if (i > 0) {
        var $tmp = i;
        if ($tmp === 1) {
          if (Source in pas.Common.SignedOrdinalTypes) {
            pas.Optimize.asm65("\tjsr @expandSHORT2SMALL1","")}
           else pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x","")}
         else if ($tmp === 2) {
          if (Source in pas.Common.SignedOrdinalTypes) {
            pas.Optimize.asm65("\tjsr @expandToCARD1.SMALL","")}
           else {
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*3,x","");
          }}
         else if ($tmp === 3) if (Source in pas.Common.SignedOrdinalTypes) {
          pas.Optimize.asm65("\tjsr @expandToCARD1.SHORT","")}
         else {
          pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*3,x","");
        };
      };
    };
  };
  this.ExpandExpression = function (ValType, RightValType, VarType, ForceMinusSign) {
    var m = 0;
    var sign = false;
    if ((ValType.get() in pas.Common.IntegerTypes) && (RightValType in pas.Common.IntegerTypes)) {
      if ((pas.Common.DataSize[ValType.get() - 128] < pas.Common.DataSize[RightValType - 128]) && ((VarType === 0) || (pas.Common.DataSize[RightValType - 128] >= pas.Common.DataSize[VarType - 128]))) {
        $mod.ExpandParam_m1(RightValType,ValType.get());
        ValType.set(RightValType);
      } else {
        if (VarType in pas.Common.Pointers) VarType = 129;
        m = pas.Common.DataSize[ValType.get() - 128];
        if (pas.Common.DataSize[RightValType - 128] > m) m = pas.Common.DataSize[RightValType - 128];
        if (VarType === 135) {
          m += 1}
         else if (VarType !== 0) if (pas.Common.DataSize[VarType - 128] > m) m += 1;
        if ((ValType.get() in pas.Common.SignedOrdinalTypes) || (RightValType in pas.Common.SignedOrdinalTypes) || ForceMinusSign) {
          sign = true}
         else sign = false;
        var $tmp = m;
        if ($tmp === 1) {
          if (sign) {
            VarType = 131}
           else VarType = 128}
         else if ($tmp === 2) {
          if (sign) {
            VarType = 132}
           else VarType = 129}
         else {
          if (sign) {
            VarType = 133}
           else VarType = 130;
        };
        $mod.ExpandParam_m1(VarType,ValType.get());
        $mod.ExpandParam(VarType,RightValType);
        ValType.set(VarType);
      };
    };
  };
  this.ExpandWord = function () {
    $mod.Gen();
  };
  this.ExpandByte = function () {
    $mod.Gen();
    $mod.ExpandWord();
  };
  this.InfoAboutSize = function (Size) {
    var Result = "";
    var $tmp = Size;
    if ($tmp === 1) {
      Result = " BYTE / CHAR / SHORTINT / BOOLEAN"}
     else if ($tmp === 2) {
      Result = " WORD / SMALLINT / SHORTREAL / POINTER"}
     else if ($tmp === 4) {
      Result = " CARDINAL / INTEGER / REAL / SINGLE"}
     else {
      Result = " unknown";
    };
    return Result;
  };
  this.GenerateIndexShift = function (ElementType, Ofset) {
    var $tmp = pas.Common.DataSize[ElementType - 128];
    if ($tmp === 2) {
      if (Ofset === 0) {
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tasl :STACKORIGIN,x","");
        pas.Optimize.asm65("\trol @","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      } else {
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH,x","");
        pas.Optimize.asm65("\tasl :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\trol @","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
      }}
     else if ($tmp === 4) if (Ofset === 0) {
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tasl :STACKORIGIN,x","");
      pas.Optimize.asm65("\trol @","");
      pas.Optimize.asm65("\tasl :STACKORIGIN,x","");
      pas.Optimize.asm65("\trol @","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
    } else {
      pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH,x","");
      pas.Optimize.asm65("\tasl :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
      pas.Optimize.asm65("\trol @","");
      pas.Optimize.asm65("\tasl :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
      pas.Optimize.asm65("\trol @","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + "+STACKWIDTH,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.Common.IntToStr(Ofset) + ",x","");
    };
  };
  this.StopOptimization = function () {
    if (pas.Common.run_func === 0) {
      pas.Common.optimize.use = false;
      if ((rtl.length(pas.Common.OptimizeBuf) - 1) > 0) pas.Optimize.asm65("","");
    };
  };
  this.StartOptimization = function (i) {
    $mod.StopOptimization();
    pas.Common.optimize.use = true;
    pas.Common.optimize.unitIndex = pas.Common.Tok[i].UnitIndex;
    pas.Common.optimize.line = pas.Common.Tok[i].Line;
  };
  this.LoadBP2 = function (IdentIndex, svar) {
    var lab = "";
    if (pas.System.Pos(".",svar) > 0) {
      lab = $mod.ExtractName(IdentIndex,svar);
      if (pas.Common.Ident[pas.Parser.GetIdentIndex(lab) - 1].AllocElementType === 139) {
        pas.Optimize.asm65("\tmwy " + lab + " :bp2","");
        pas.Optimize.asm65("\tlda :bp2","");
        pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda :bp2+1","");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
    } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
  };
  this.Push = function (Value, IndirectionLevel, Size, IdentIndex, par) {
    var Kind = 0;
    var NumAllocElements = 0;
    var svar = "";
    var svara = "";
    var lab = "";
    if (IdentIndex > 0) {
      Kind = pas.Common.Ident[IdentIndex - 1].Kind;
      if (pas.Common.Ident[IdentIndex - 1].DataType === 146) {
        Size = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
        NumAllocElements = 0;
      } else NumAllocElements = pas.Parser.Elements(IdentIndex);
      svar = $mod.GetLocalName(IdentIndex,"");
    } else {
      Kind = 1;
      NumAllocElements = 0;
      svar = "";
    };
    svara = svar;
    if (pas.System.Pos(".",svar) > 0) {
      svara = $mod.GetLocalName(IdentIndex,"adr.")}
     else svara = "adr." + svar;
    $mod.asm65separator(true);
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("; Push" + $mod.InfoAboutSize(Size),"");
    var $tmp = IndirectionLevel;
    if ($tmp === 0) {
      pas.Optimize.asm65("; as Value $" + pas.SysUtils.IntToHex(Value,8) + " (" + pas.Common.IntToStr(Value) + ")","");
      pas.Optimize.asm65("","");
      $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
      $mod.Gen();
      $mod.a65(pas.Common.TCode65.movaBX_Value,Value,Kind,Size,IdentIndex);
    } else if ($tmp === 1) {
      pas.Optimize.asm65("; as Pointer","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
      var $tmp1 = Size;
      if ($tmp1 === 1) {
        pas.Optimize.asm65("\tmva " + svar + $mod.GetStackVariable(0),"");
        $mod.ExpandByte();
      } else if ($tmp1 === 2) {
        if ($mod.TestName(IdentIndex,svar)) {
          lab = $mod.ExtractName(IdentIndex,svar);
          if (pas.Common.Ident[pas.Parser.GetIdentIndex(lab) - 1].AllocElementType === 139) {
            pas.Optimize.asm65("\tlda " + lab,"");
            pas.Optimize.asm65("\tldy " + lab + "+1","");
            pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
            pas.Optimize.asm65("\tscc","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tsty" + $mod.GetStackVariable(1),"");
          } else {
            pas.Optimize.asm65("\tmva " + svar + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tmva " + svar + "+1" + $mod.GetStackVariable(1),"");
          };
        } else {
          pas.Optimize.asm65("\tmva " + svar + $mod.GetStackVariable(0),"");
          pas.Optimize.asm65("\tmva " + svar + "+1" + $mod.GetStackVariable(1),"");
        };
        $mod.ExpandWord();
      } else if ($tmp1 === 4) {
        pas.Optimize.asm65("\tmva " + svar + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tmva " + svar + "+1" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tmva " + svar + "+2" + $mod.GetStackVariable(2),"");
        pas.Optimize.asm65("\tmva " + svar + "+3" + $mod.GetStackVariable(3),"");
      };
    } else if ($tmp === 5) {
      pas.Optimize.asm65("; as Pointer to Record","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tlda #" + svar + "-DATAORIGIN","")}
       else pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(par,2),"");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd " + $mod.ExtractName(IdentIndex,svar),"");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tlda #$00","");
        pas.Optimize.asm65("\tadc " + $mod.ExtractName(IdentIndex,svar) + "+1","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
      } else {
        pas.Optimize.asm65("\tadd " + svar,"");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tlda #$00","");
        pas.Optimize.asm65("\tadc " + svar + "+1","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
      };
    } else if ($tmp === 2) {
      pas.Optimize.asm65("; as Pointer to Pointer","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
      if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+" + svar,"");
      if ($mod.TestName(IdentIndex,svar)) {
        if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) {
          pas.Optimize.asm65("\tmwy " + svar + " :bp2","")}
         else pas.Optimize.asm65("\tmwy " + $mod.ExtractName(IdentIndex,svar) + " :bp2","");
      } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
      if ($mod.TestName(IdentIndex,svar)) {
        if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) {
          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(par,2),"")}
         else pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","");
      } else pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(par,2),"");
      var $tmp2 = Size;
      if ($tmp2 === 1) {
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(0),"");
        $mod.ExpandByte();
      } else if ($tmp2 === 2) {
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(1),"");
        $mod.ExpandWord();
      } else if ($tmp2 === 4) {
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(2),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tmva (:bp2),y" + $mod.GetStackVariable(3),"");
      };
      if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+","");
    } else if (($tmp === 3) || ($tmp === 4)) {
      pas.Optimize.asm65("; as Pointer to Array Origin","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      var $tmp3 = Size;
      if ($tmp3 === 1) {
        if ((NumAllocElements > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+" + svar,"");
          if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
            pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
            pas.Optimize.asm65("\tadd" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
            pas.Optimize.asm65("\tadc" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tsta :bp+1","");
          } else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tsta :bp+1","");
          };
          pas.Optimize.asm65("\tlda (:bp),y","");
          pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
          if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+","");
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
          } else {
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
          };
        };
        $mod.ExpandByte();
      } else if ($tmp3 === 2) {
        if (IndirectionLevel === 3) $mod.GenerateIndexShift(129,0);
        pas.Optimize.asm65("","");
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isStriped) {
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr(NumAllocElements) + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
          } else {
            if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
              pas.Optimize.asm65("\tadd" + $mod.GetStackVariable(0),"");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
              pas.Optimize.asm65("\tadc" + $mod.GetStackVariable(1),"");
              pas.Optimize.asm65("\tsta :bp2+1","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd" + $mod.GetStackVariable(0),"");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc" + $mod.GetStackVariable(1),"");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
          };
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
          } else {
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            if (pas.Common.Ident[IdentIndex - 1].isStriped) {
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr(NumAllocElements) + ",y","")}
             else pas.Optimize.asm65("\tlda " + svara + "+1,y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
          };
        };
        $mod.ExpandWord();
      } else if ($tmp3 === 4) {
        if (IndirectionLevel === 3) $mod.GenerateIndexShift(130,0);
        pas.Optimize.asm65("","");
        if (((NumAllocElements * 4) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isStriped) {
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr(NumAllocElements & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 2) & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 3) & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
          } else {
            if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
              pas.Optimize.asm65("\tadd" + $mod.GetStackVariable(0),"");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
              pas.Optimize.asm65("\tadc" + $mod.GetStackVariable(1),"");
              pas.Optimize.asm65("\tsta :bp2+1","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd" + $mod.GetStackVariable(0),"");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc" + $mod.GetStackVariable(1),"");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
          };
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
          } else {
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
            if (pas.Common.Ident[IdentIndex - 1].isStriped) {
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr(NumAllocElements & 0xFFFFFFFF) + ",y","");
              pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 2) & 0xFFFFFFFF) + ",y","");
              pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 3) & 0xFFFFFFFF) + ",y","");
              pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
            } else {
              pas.Optimize.asm65("\tlda " + svara + "+1,y","");
              pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + "+2,y","");
              pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
              pas.Optimize.asm65("\tlda " + svara + "+3,y","");
              pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
            };
          };
        };
      };
    } else if ($tmp === 6) {
      pas.Optimize.asm65("; as Pointer to Array ^Record","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd " + $mod.ExtractName(IdentIndex,svar),"");
        pas.Optimize.asm65("\tsta :TMP","");
        pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tadc " + $mod.ExtractName(IdentIndex,svar) + "+1","");
        pas.Optimize.asm65("\tsta :TMP+1","");
      } else {
        pas.Optimize.asm65("\tadd " + svar,"");
        pas.Optimize.asm65("\tsta :TMP","");
        pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tadc " + svar + "+1","");
        pas.Optimize.asm65("\tsta :TMP+1","");
      };
      pas.Optimize.asm65("\tldy #$00","");
      pas.Optimize.asm65("\tmva (:TMP),y :bp2","");
      pas.Optimize.asm65("\tiny","");
      pas.Optimize.asm65("\tmva (:TMP),y :bp2+1","");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","")}
       else pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(par,2),"");
      var $tmp4 = Size;
      if ($tmp4 === 1) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        $mod.ExpandByte();
      } else if ($tmp4 === 2) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
        $mod.ExpandWord();
      } else if ($tmp4 === 4) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
      };
    } else if ($tmp === 12) {
      pas.Optimize.asm65("; as Pointer to Array ^Record to String","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd " + $mod.ExtractName(IdentIndex,svar),"");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tadc " + $mod.ExtractName(IdentIndex,svar) + "+1","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      } else {
        pas.Optimize.asm65("\tadd " + svar,"");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tadc " + svar + "+1","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      };
      pas.Optimize.asm65("\tldy #$00","");
      pas.Optimize.asm65("\tlda (:bp2),y","");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
      } else pas.Optimize.asm65("\tadd #$" + pas.SysUtils.IntToHex(par,2),"");
      pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
      pas.Optimize.asm65("\tiny","");
      pas.Optimize.asm65("\tlda (:bp2),y","");
      pas.Optimize.asm65("\tadc #$00","");
      pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
    } else if ($tmp === 10) {
      pas.Optimize.asm65("; as Pointer to Record^ Array Origin","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tmwy " + $mod.ExtractName(IdentIndex,svar) + " :bp2","")}
       else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
      pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","")}
       else pas.Optimize.asm65("\tadd #$" + pas.SysUtils.IntToHex(par,2),"");
      pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
      pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
      pas.Optimize.asm65("\tadc #$00","");
      pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
      pas.Optimize.asm65("\tldy" + $mod.GetStackVariable(0),"");
      var $tmp5 = Size;
      if ($tmp5 === 1) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        $mod.ExpandByte();
      } else if ($tmp5 === 2) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
        $mod.ExpandWord();
      } else if ($tmp5 === 4) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(1),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(2),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta" + $mod.GetStackVariable(3),"");
      };
    } else if ($tmp === 11) {
      if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
        if ($mod.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tlda " + $mod.ExtractName(IdentIndex,svar),"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda " + $mod.ExtractName(IdentIndex,svar) + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :TMP+1","");
        } else {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :TMP+1","");
        };
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda (:TMP),y","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:TMP),y","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      } else {
        pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda " + svara + ",y","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda " + svara + "+1,y","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      };
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tadd #$" + pas.SysUtils.IntToHex(par,2),"");
      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tadc #$00","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
      var $tmp6 = Size;
      if ($tmp6 === 1) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      } else if ($tmp6 === 2) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      } else if ($tmp6 === 4) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    };
  };
  this.SaveToSystemStack = function (cnt) {
    var i = 0;
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) for (var $in = pas.Common.IFTmpPosStack, $l = 0, $end = rtl.length($in) - 1; $l <= $end; $l++) {
      i = $in[$l];
      if (i === cnt) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        break;
      };
    };
  };
  this.RestoreFromSystemStack = function (cnt) {
    var i = 0;
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    pas.Optimize.asm65("\tlda IFTMP_" + pas.SysUtils.IntToHex(cnt,4),"");
    if (pas.Common.pass === pas.Common.TPass.CALL_DETERMINATION) {
      i = rtl.length(pas.Common.IFTmpPosStack) - 1;
      pas.Common.IFTmpPosStack[i] = cnt;
      pas.Common.IFTmpPosStack = rtl.arraySetLength(pas.Common.IFTmpPosStack,0,i + 2);
    };
  };
  this.RemoveFromSystemStack = function () {
    $mod.Gen();
    $mod.Gen();
  };
  this.GenerateFileOpen = function (IdentIndex, ioCode) {
    pas.Optimize.ResetOpty();
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\ttxa:pha","");
    if (pas.Common.IOCheck) {
      pas.Optimize.asm65("\tsec","")}
     else pas.Optimize.asm65("\tclc","");
    var $tmp = ioCode;
    if (($tmp === pas.Common.TIOCode.Append) || ($tmp === pas.Common.TIOCode.OpenRead) || ($tmp === pas.Common.TIOCode.OpenWrite)) {
      pas.Optimize.asm65("\t@openfile " + pas.Common.Ident[IdentIndex - 1].Name + ", #" + pas.Common.IntToStr(ioCode),"")}
     else if ($tmp === pas.Common.TIOCode.FileMode) {
      pas.Optimize.asm65("\t@openfile " + pas.Common.Ident[IdentIndex - 1].Name + ", MAIN.SYSTEM.FileMode","")}
     else if ($tmp === pas.Common.TIOCode.Close) pas.Optimize.asm65("\t@closefile " + pas.Common.Ident[IdentIndex - 1].Name,"");
    pas.Optimize.asm65("\tpla:tax","");
    pas.Optimize.asm65("","");
  };
  this.GenerateFileRead = function (IdentIndex, ioCode, NumParams) {
    pas.Optimize.ResetOpty();
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\ttxa:pha","");
    if (pas.Common.IOCheck) {
      pas.Optimize.asm65("\tsec","")}
     else pas.Optimize.asm65("\tclc","");
    var $tmp = ioCode;
    if (($tmp === pas.Common.TIOCode.Read) || ($tmp === pas.Common.TIOCode.Write) || ($tmp === pas.Common.TIOCode.ReadRecord) || ($tmp === pas.Common.TIOCode.WriteRecord)) if (NumParams === 3) {
      pas.Optimize.asm65("\t@readfile " + pas.Common.Ident[IdentIndex - 1].Name + ", #" + pas.Common.IntToStr(pas.Common.GetIOBits(ioCode) | 0x80),"")}
     else pas.Optimize.asm65("\t@readfile " + pas.Common.Ident[IdentIndex - 1].Name + ", #" + pas.Common.IntToStr(pas.Common.GetIOBits(ioCode)),"");
    pas.Optimize.asm65("\tpla:tax","");
    pas.Optimize.asm65("","");
  };
  this.GenerateIncDec = function (IndirectionLevel, ExpressionType, Down, IdentIndex) {
    var b = "";
    var c = "";
    var svar = "";
    var svara = "";
    var NumAllocElements = 0;
    if (IdentIndex > 0) {
      if (pas.Common.Ident[IdentIndex - 1].DataType === 146) {
        NumAllocElements = 0;
      } else NumAllocElements = pas.Parser.Elements(IdentIndex);
      svar = $mod.GetLocalName(IdentIndex,"");
    } else {
      NumAllocElements = 0;
      svar = "";
    };
    svara = svar;
    if (pas.System.Pos(".",svar) > 0) {
      svara = $mod.GetLocalName(IdentIndex,"adr.")}
     else svara = "adr." + svar;
    if (Down) {
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; Dec(var X [ ; N: int ] ) -> " + pas.Common.InfoAboutToken(ExpressionType),"");
      b = "sub";
      c = "sbc";
    } else {
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; Inc(var X [ ; N: int ] ) -> " + pas.Common.InfoAboutToken(ExpressionType),"");
      b = "add";
      c = "adc";
    };
    var $tmp = IndirectionLevel;
    if ($tmp === 1) {
      pas.Optimize.asm65("; as Pointer","");
      pas.Optimize.asm65("","");
      var $tmp1 = pas.Common.DataSize[ExpressionType - 128];
      if ($tmp1 === 1) {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta " + svar,"");
      } else if ($tmp1 === 2) {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp1 === 4) {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
        pas.Optimize.asm65("\tlda " + svar + "+2","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta " + svar + "+2","");
        pas.Optimize.asm65("\tlda " + svar + "+3","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta " + svar + "+3","");
      };
    } else if ($tmp === 2) {
      pas.Optimize.asm65("; as Pointer To Pointer","");
      pas.Optimize.asm65("","");
      $mod.LoadBP2(IdentIndex,svar);
      pas.Optimize.asm65("\tldy #$00","");
      var $tmp2 = pas.Common.DataSize[ExpressionType - 128];
      if ($tmp2 === 1) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp2 === 2) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp2 === 4) {
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      };
    } else if (($tmp === 3) || ($tmp === 4)) {
      pas.Optimize.asm65("; as Pointer To Array Origin","");
      pas.Optimize.asm65("","");
      var $tmp3 = pas.Common.DataSize[ExpressionType - 128];
      if ($tmp3 === 1) {
        if ((NumAllocElements > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\ttay","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :bp+1","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda (:bp),y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp),y","");
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          } else {
            pas.Optimize.asm65("\tlda <" + svara,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda >" + svara,"");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp+1","");
            pas.Optimize.asm65("\tlda (:bp),y","");
            pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp),y","");
          };
        };
      } else if ($tmp3 === 2) {
        if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
          $mod.LoadBP2(IdentIndex,svar);
          pas.Optimize.asm65("\tlda :bp2","");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda :bp2+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :bp2+1","");
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else {
          if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.Ident[IdentIndex - 1].isStriped) {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr(NumAllocElements) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr(NumAllocElements) + ",y","");
            } else {
              if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              };
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            };
          } else {
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
            pas.Optimize.asm65("\tlda " + svara + "+1,y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta " + svara + "+1,y","");
          };
        }}
       else if ($tmp3 === 4) if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
        $mod.LoadBP2(IdentIndex,svar);
        pas.Optimize.asm65("\tlda :bp2","");
        pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda :bp2+1","");
        pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :bp2+1","");
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else {
        if (((NumAllocElements * 4) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isStriped) {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr(NumAllocElements & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr(NumAllocElements & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 2) & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 2) & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tlda " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 3) & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 3) & 0xFFFFFFFF) + ",y","");
          } else {
            if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          };
        } else {
          pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda " + svara + ",y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svara + ",y","");
          pas.Optimize.asm65("\tlda " + svara + "+1,y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta " + svara + "+1,y","");
          pas.Optimize.asm65("\tlda " + svara + "+2,y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta " + svara + "+2,y","");
          pas.Optimize.asm65("\tlda " + svara + "+3,y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta " + svara + "+3,y","");
        };
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    };
    $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
  };
  this.GenerateAssignment = function (IndirectionLevel, Size, IdentIndex, Param, ParamY) {
    var NumAllocElements = 0;
    var IdentTemp = 0;
    var svar = "";
    var svara = "";
    function LoadRegisterY() {
      if (ParamY !== "") {
        pas.Optimize.asm65("\tldy #" + ParamY,"")}
       else if (pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) > 0) {
        if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && !(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(0,147))) {
          pas.Optimize.asm65("\tldy #$00","")}
         else pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","");
      } else pas.Optimize.asm65("\tldy #$00","");
    };
    if (IdentIndex > 0) {
      if (pas.Common.Ident[IdentIndex - 1].DataType === 146) {
        Size = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
        NumAllocElements = 0;
      } else NumAllocElements = pas.Parser.Elements(IdentIndex);
      svar = $mod.GetLocalName(IdentIndex,"");
    } else {
      svar = Param;
      NumAllocElements = 0;
    };
    svara = svar;
    if (pas.System.Pos(".",svar) > 0) {
      svara = $mod.GetLocalName(IdentIndex,"adr.")}
     else svara = "adr." + svar;
    $mod.asm65separator(true);
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("; Generate Assignment for" + $mod.InfoAboutSize(Size),"");
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    var $tmp = IndirectionLevel;
    if ($tmp === 6) {
      pas.Optimize.asm65("; as Pointer to Array ^Record","");
      if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
        if ($mod.TestName(IdentIndex,svar)) {
          IdentTemp = pas.Parser.GetIdentIndex($mod.ExtractName(IdentIndex,svar));
          if ((IdentTemp > 0) && (pas.Common.Ident[IdentTemp - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType === 139) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements_ > 1) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements_ <= 128)) {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda " + $mod.GetLocalName(IdentTemp,"adr.") + ",y","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda " + $mod.GetLocalName(IdentTemp,"adr.") + "+1,y","");
            pas.Optimize.asm65("\tsta :bp2+1","");
          } else {
            pas.Optimize.asm65("\tlda " + $mod.ExtractName(IdentIndex,svar),"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :TMP","");
            pas.Optimize.asm65("\tlda " + $mod.ExtractName(IdentIndex,svar) + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :TMP+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tmva (:TMP),y :bp2","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tmva (:TMP),y :bp2+1","");
          };
        } else {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :TMP+1","");
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tmva (:TMP),y :bp2","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tmva (:TMP),y :bp2+1","");
        };
      } else {
        pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda " + svara + ",y","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda " + svara + "+1,y","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      };
      LoadRegisterY();
      var $tmp1 = Size;
      if ($tmp1 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp1 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp1 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 9) {
      pas.Optimize.asm65("; as Pointer to Dereference","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tsta :bp2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta :bp2+1","");
      LoadRegisterY();
      var $tmp2 = Size;
      if ($tmp2 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp2 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp2 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if (($tmp === 3) || ($tmp === 4)) {
      pas.Optimize.asm65("; as Pointer to Array Origin","");
      var $tmp3 = Size;
      if ($tmp3 === 1) {
        if ((NumAllocElements > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-" + svar,"");
          if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
            pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp+1","");
          } else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp+1","");
          };
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp),y","");
          if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-","");
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
          };
        };
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      } else if ($tmp3 === 2) {
        if (IndirectionLevel === 3) $mod.GenerateIndexShift(129,1);
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isStriped) {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr(NumAllocElements) + ",y","");
          } else {
            if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          };
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            if (pas.Common.Ident[IdentIndex - 1].isStriped) {
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr(NumAllocElements) + ",y","")}
             else pas.Optimize.asm65("\tsta " + svara + "+1,y","");
          };
        };
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      } else if ($tmp3 === 4) {
        if (IndirectionLevel === 3) $mod.GenerateIndexShift(130,1);
        if (((NumAllocElements * 4) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if (pas.Common.Ident[IdentIndex - 1].isStriped) {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr(NumAllocElements & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 2) & 0xFFFFFFFF) + ",y","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 3) & 0xFFFFFFFF) + ",y","");
          } else {
            if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].IdType === 30) && (pas.Common.Ident[IdentIndex - 1].Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2),"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 256) & 255,2),"");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          };
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svara + ",y","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            if (pas.Common.Ident[IdentIndex - 1].isStriped) {
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr(NumAllocElements & 0xFFFFFFFF) + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 2) & 0xFFFFFFFF) + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.Common.IntToStr((NumAllocElements * 3) & 0xFFFFFFFF) + ",y","");
            } else {
              pas.Optimize.asm65("\tsta " + svara + "+1,y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svara + "+2,y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svara + "+3,y","");
            };
          };
        };
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      };
    } else if ($tmp === 8) {
      pas.Optimize.asm65("; as StringPointer to Array Origin","");
      var $tmp4 = Size;
      if ($tmp4 === 2) {
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :bp2+1","");
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tpha","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :bp2+1","");
          pas.Optimize.asm65("\tpla","");
          pas.Optimize.asm65("\tsta :bp2","");
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tpha","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tpla","");
            pas.Optimize.asm65("\tsta :bp2","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda " + svara + "+1,y","");
            pas.Optimize.asm65("\tsta :bp2+1","");
          };
        };
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda #$01","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      };
    } else if ($tmp === 7) {
      pas.Optimize.asm65("; as StringPointer to Array Origin","");
      var $tmp5 = Size;
      if ($tmp5 === 2) {
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :bp2+1","");
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta @move.dst","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta @move.dst+1","");
        } else {
          if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta @move.dst","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta @move.dst+1","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda " + svara + ",y","");
            pas.Optimize.asm65("\tsta @move.dst","");
            pas.Optimize.asm65("\tlda " + svara + "+1,y","");
            pas.Optimize.asm65("\tsta @move.dst+1","");
          };
        };
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @move.src","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @move.src+1","");
        if (pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements > 0) {
          pas.Optimize.asm65("\tlda <" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements),"");
          pas.Optimize.asm65("\tsta @move.cnt","");
          pas.Optimize.asm65("\tlda >" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements),"");
          pas.Optimize.asm65("\tsta @move.cnt+1","");
          pas.Optimize.asm65("\tjsr @move","");
          if (pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements < 256) {
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda #" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements - 1),"");
            pas.Optimize.asm65("\tcmp (@move.src),y","");
            pas.Optimize.asm65("\tscs","");
            pas.Optimize.asm65("\tsta (@move.dst),y","");
          };
        } else {
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (@move.src),y","");
          pas.Optimize.asm65("\tadd #1","");
          pas.Optimize.asm65("\tsta @move.cnt","");
          pas.Optimize.asm65("\tscc","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tsty @move.cnt+1","");
          pas.Optimize.asm65("\tjsr @move","");
        };
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      };
    } else if ($tmp === 12) {
      $mod.Gen();
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd " + $mod.ExtractName(IdentIndex,svar),"");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tadc " + $mod.ExtractName(IdentIndex,svar) + "+1","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      } else {
        pas.Optimize.asm65("\tadd " + svar,"");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tadc " + svar + "+1","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      };
      pas.Optimize.asm65("\tldy #$00","");
      pas.Optimize.asm65("\tlda (:bp2),y","");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","")}
       else pas.Optimize.asm65("\tadd #" + ParamY,"");
      pas.Optimize.asm65("\tsta @move.dst","");
      pas.Optimize.asm65("\tiny","");
      pas.Optimize.asm65("\tlda (:bp2),y","");
      pas.Optimize.asm65("\tadc #$00","");
      pas.Optimize.asm65("\tsta @move.dst+1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta @move.src","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @move.src+1","");
      pas.Optimize.asm65("\tlda <" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements),"");
      pas.Optimize.asm65("\tsta @move.cnt","");
      pas.Optimize.asm65("\tlda >" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements),"");
      pas.Optimize.asm65("\tsta @move.cnt+1","");
      pas.Optimize.asm65("\tjsr @move","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 10) {
      pas.Optimize.asm65("; as Pointer to Record^ Array Origin","");
      pas.Optimize.asm65("","");
      $mod.Gen();
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tmwy " + $mod.ExtractName(IdentIndex,svar) + " :bp2","")}
       else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      if ($mod.TestName(IdentIndex,svar)) {
        pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","")}
       else pas.Optimize.asm65("\tadd #" + ParamY,"");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tadc #$00","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
      var $tmp6 = Size;
      if ($tmp6 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp6 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp6 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 11) {
      pas.Optimize.asm65("\tdex","");
      if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
        if ($mod.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tlda " + $mod.ExtractName(IdentIndex,svar),"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda " + $mod.ExtractName(IdentIndex,svar) + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :TMP+1","");
        } else {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :TMP+1","");
        };
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda (:TMP),y","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:TMP),y","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      } else {
        pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda " + svara + ",y","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda " + svara + "+1,y","");
        pas.Optimize.asm65("\tsta :bp2+1","");
      };
      pas.Optimize.asm65("\tinx","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tadd #" + ParamY,"");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tadc #$00","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
      var $tmp7 = Size;
      if ($tmp7 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp7 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp7 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 2) {
      pas.Optimize.asm65("; as Pointer to Pointer","");
      if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-" + svar,"");
      if ($mod.TestName(IdentIndex,svar)) {
        if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && !(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(0,147))) {
          pas.Optimize.asm65("\tmwy " + svar + " :bp2","")}
         else pas.Optimize.asm65("\tmwy " + $mod.ExtractName(IdentIndex,svar) + " :bp2","");
      } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
      LoadRegisterY();
      var $tmp8 = Size;
      if ($tmp8 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp8 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      } else if ($tmp8 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta (:bp2),y","");
      };
      if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 1) {
      pas.Optimize.asm65("; as Pointer","");
      var $tmp9 = Size;
      if ($tmp9 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta " + svar,"");
      } else if ($tmp9 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp9 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta " + svar + "+2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta " + svar + "+3","");
      };
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    };
    $mod.StopOptimization();
  };
  this.GenerateReturn = function (IsFunction, isInt, isInl, isOvr) {
    var yes = false;
    $mod.Gen();
    yes = true;
    if (!isInt) if (!IsFunction) {
      pas.Optimize.asm65("@exit","");
      if (!isInl) {
        pas.Optimize.asm65("\t.ifdef @new","");
        pas.Optimize.asm65("\tlda <@VarData","");
        pas.Optimize.asm65("\tsta :ztmp","");
        pas.Optimize.asm65("\tlda >@VarData","");
        pas.Optimize.asm65("\tldy #@VarDataSize-1","");
        pas.Optimize.asm65("\tjmp @FreeMem","");
        pas.Optimize.asm65("\tels","");
        pas.Optimize.asm65("\trts","; ret");
        pas.Optimize.asm65("\teif","");
      };
      yes = false;
    };
    if (yes && (isInl === false)) if (isInt) {
      pas.Optimize.asm65("\trti","; ret")}
     else pas.Optimize.asm65("\trts","; ret");
    pas.Optimize.asm65(".endl","");
    if (isOvr) {
      pas.Optimize.asm65(".endl","; overload");
    };
  };
  this.GenerateIfThenCondition = function () {
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    pas.Optimize.asm65("\tlda :STACKORIGIN+1,x","");
    $mod.a65(pas.Common.TCode65.jne,0,1,4,0);
  };
  this.GenerateElseCondition = function () {
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    $mod.a65(pas.Common.TCode65.je,0,1,4,0);
  };
  this.GenerateRepeatUntilCondition = function () {
    $mod.GenerateIfThenCondition();
  };
  this.GenerateRelationOperation = function (rel, ValType) {
    var $tmp = rel;
    if ($tmp === 43) {
      $mod.Gen();
      $mod.Gen();
      pas.Optimize.asm65("\tbeq @+","");
    } else if (($tmp === 44) || ($tmp === 0)) {
      $mod.Gen();
      $mod.Gen();
      pas.Optimize.asm65("\tbne @+","");
    } else if ($tmp === 47) {
      $mod.Gen();
      $mod.Gen();
      pas.Optimize.asm65("\tseq","");
      if (ValType in rtl.unionSet(pas.Common.RealTypes,pas.Common.SignedOrdinalTypes)) {
        pas.Optimize.asm65("\tbpl @+","")}
       else pas.Optimize.asm65("\tbcs @+","");
    } else if ($tmp === 48) {
      $mod.Gen();
      $mod.Gen();
      if (ValType in rtl.unionSet(pas.Common.RealTypes,pas.Common.SignedOrdinalTypes)) {
        pas.Optimize.asm65("\tbpl @+","")}
       else pas.Optimize.asm65("\tbcs @+","");
    } else if ($tmp === 45) {
      $mod.Gen();
      $mod.Gen();
      if (ValType in rtl.unionSet(pas.Common.RealTypes,pas.Common.SignedOrdinalTypes)) {
        pas.Optimize.asm65("\tbmi @+","")}
       else pas.Optimize.asm65("\tbcc @+","");
    } else if ($tmp === 46) {
      $mod.Gen();
      $mod.Gen();
      if (ValType in rtl.unionSet(pas.Common.RealTypes,pas.Common.SignedOrdinalTypes)) {
        pas.Optimize.asm65("\tbmi @+","");
        pas.Optimize.asm65("\tbeq @+","");
      } else {
        pas.Optimize.asm65("\tbcc @+","");
        pas.Optimize.asm65("\tbeq @+","");
      };
    };
  };
  this.GenerateForToDoCondition = function (ValType, Down, IdentIndex) {
    var svar = "";
    var CounterSize = 0;
    svar = $mod.GetLocalName(IdentIndex,"");
    CounterSize = pas.Common.DataSize[ValType - 128];
    pas.Optimize.asm65(";" + $mod.InfoAboutSize(CounterSize),"");
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    var $tmp = CounterSize;
    if ($tmp === 1) {
      $mod.ExpandByte();
      if (ValType === 131) {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tsub :STACKORIGIN+1,x","");
        pas.Optimize.asm65("\tsvc","");
        pas.Optimize.asm65("\teor #$80","");
      } else {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
      };
    } else if ($tmp === 2) {
      $mod.ExpandWord();
      if (ValType === 132) {
        pas.Optimize.asm65("\t.LOCAL","");
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\tsub :STACKORIGIN+1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne L4","");
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
        pas.Optimize.asm65("L1\tbeq L5","");
        pas.Optimize.asm65("\tbcs L3","");
        pas.Optimize.asm65("\tlda #$FF","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L3\tlda #$01","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L4\tbvc L5","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tora #$01","");
        pas.Optimize.asm65("L5","");
        pas.Optimize.asm65("\t.ENDL","");
      } else {
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
        pas.Optimize.asm65("@","");
      };
    } else if ($tmp === 4) {
      if (ValType === 133) {
        pas.Optimize.asm65("\t.LOCAL","");
        pas.Optimize.asm65("\tlda " + svar + "+3","");
        pas.Optimize.asm65("\tsub :STACKORIGIN+1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tbne L4","");
        pas.Optimize.asm65("\tlda " + svar + "+2","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tbne L1","");
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne L1","");
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
        pas.Optimize.asm65("L1\tbeq L5","");
        pas.Optimize.asm65("\tbcs L3","");
        pas.Optimize.asm65("\tlda #$FF","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L3\tlda #$01","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L4\tbvc L5","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tora #$01","");
        pas.Optimize.asm65("L5","");
        pas.Optimize.asm65("\t.ENDL","");
      } else {
        pas.Optimize.asm65("\tlda " + svar + "+3","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda " + svar + "+2","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
        pas.Optimize.asm65("@","");
      };
    };
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    if (Down) {
      if (ValType in rtl.createSet(131,132,133)) {
        pas.Optimize.asm65("\tbpl *+5","")}
       else pas.Optimize.asm65("\tbcs *+5","");
    } else {
      if (ValType in rtl.createSet(131,132,133)) {
        pas.Optimize.asm65("\tbmi *+7","");
        pas.Optimize.asm65("\tbeq *+5","");
      } else {
        pas.Optimize.asm65("\tbcc *+7","");
        pas.Optimize.asm65("\tbeq *+5","");
      };
    };
  };
  this.GenerateIfThenProlog = function () {
    pas.Common.CodePosStackTop += 1;
    pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),"");
  };
  this.GenerateCaseEqualityCheck = function (Value, SelectorType, Join, CaseLocalCnt) {
    $mod.Gen();
    $mod.Gen();
    var $tmp = pas.Common.DataSize[SelectorType - 128];
    if ($tmp === 1) if (Join === false) {
      pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
      if (Value !== 0) pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value & 255,2),"");
    } else pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value & 255,2),"");
    pas.Optimize.asm65("\tbeq @+","");
  };
  this.GenerateCaseRangeCheck = function (Value1, Value2, SelectorType, Join, CaseLocalCnt) {
    $mod.Gen();
    $mod.Gen();
    if ((SelectorType in rtl.createSet(128,134,146)) && (Value1 >= 0) && (Value2 >= 0)) {
      if ((Value1 === 0) && (Value2 === 255)) {
        pas.Optimize.asm65("\tjmp @+","");
      } else if (Value1 === 0) {
        if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        if (Value2 === 127) {
          pas.Optimize.asm65("\tcmp #$00","");
          pas.Optimize.asm65("\tbpl @+","");
        } else {
          pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value2 + 1,2),"");
          pas.Optimize.asm65("\tbcc @+","");
        };
      } else if (Value2 === 255) {
        if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        if (Value1 === 128) {
          pas.Optimize.asm65("\tcmp #$00","");
          pas.Optimize.asm65("\tbmi @+","");
        } else {
          pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value1,2),"");
          pas.Optimize.asm65("\tbcs @+","");
        };
      } else if (Value1 === Value2) {
        if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value1,2),"");
        pas.Optimize.asm65("\tbeq @+","");
      } else {
        if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        pas.Optimize.asm65("\tclc","; clear carry for add");
        pas.Optimize.asm65("\tadc #$FF-$" + pas.SysUtils.IntToHex(Value2,2),"; make m = $FF");
        pas.Optimize.asm65("\tadc #$" + pas.SysUtils.IntToHex(Value2,2) + "-$" + pas.SysUtils.IntToHex(Value1,2) + "+1","; carry set if in range n to m");
        pas.Optimize.asm65("\tbcs @+","");
      };
    } else {
      var $tmp = pas.Common.DataSize[SelectorType - 128];
      if ($tmp === 1) {
        if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        pas.Optimize.asm65("\tcmp #" + pas.Common.IntToStr(Value1 & 255),"");
      };
      $mod.GenerateRelationOperation(45,SelectorType);
      var $tmp1 = pas.Common.DataSize[SelectorType - 128];
      if ($tmp1 === 1) {
        pas.Optimize.asm65("\tcmp #" + pas.Common.IntToStr(Value2 & 255),"");
      };
      $mod.GenerateRelationOperation(47,SelectorType);
      pas.Optimize.asm65("\tjmp *+6","");
      pas.Optimize.asm65("@","");
    };
  };
  this.GenerateCaseStatementProlog = function () {
    $mod.GenerateIfThenProlog();
  };
  this.GenerateCaseStatementEpilog = function (cnt) {
    var StoredCodeSize = 0;
    pas.Optimize.ResetOpty();
    pas.Optimize.asm65("\tjmp a_" + pas.SysUtils.IntToHex(cnt,4),"");
    pas.Optimize.asm65("s_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),"");
    StoredCodeSize = pas.Common.CodeSize;
    $mod.Gen();
    pas.Optimize.asm65("l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop] + 3,4),"");
    $mod.Gen();
    pas.Common.CodePosStack[pas.Common.CodePosStackTop] = StoredCodeSize;
  };
  this.GenerateCaseEpilog = function (NumCaseStatements, cnt) {
    pas.Optimize.ResetOpty();
    pas.Common.CodePosStackTop -= NumCaseStatements;
    if (!pas.Common.OutputDisabled) pas.Common.CodeSize += NumCaseStatements;
    pas.Optimize.asm65("a_" + pas.SysUtils.IntToHex(cnt,4),"");
  };
  this.GenerateAsmLabels = function (l) {
    if (!pas.Common.OutputDisabled) if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
      pas.Optimize.asm65("l_" + pas.SysUtils.IntToHex(l,4),"");
    };
  };
  this.GenerateIfThenEpilog = function () {
    var CodePos = 0;
    pas.Optimize.ResetOpty();
    CodePos = pas.Common.CodePosStack[pas.Common.CodePosStackTop];
    pas.Common.CodePosStackTop -= 1;
    $mod.GenerateAsmLabels(CodePos + 3);
  };
  this.GenerateWhileDoProlog = function () {
    $mod.GenerateIfThenProlog();
  };
  this.GenerateWhileDoEpilog = function () {
    var CodePos = 0;
    var ReturnPos = 0;
    CodePos = pas.Common.CodePosStack[pas.Common.CodePosStackTop];
    pas.Common.CodePosStackTop -= 1;
    ReturnPos = pas.Common.CodePosStack[pas.Common.CodePosStackTop];
    pas.Common.CodePosStackTop -= 1;
    $mod.Gen();
    pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(ReturnPos,4),"");
    $mod.GenerateAsmLabels(CodePos + 3);
  };
  this.GenerateRepeatUntilProlog = function () {
    pas.Common.CodePosStackTop += 1;
    pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
    $mod.GenerateAsmLabels(pas.Common.CodeSize);
  };
  this.GenerateRepeatUntilEpilog = function () {
    var ReturnPos = 0;
    pas.Optimize.ResetOpty();
    ReturnPos = pas.Common.CodePosStack[pas.Common.CodePosStackTop];
    pas.Common.CodePosStackTop -= 1;
    $mod.Gen();
    pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(ReturnPos,4),"");
  };
  this.GenerateForToDoProlog = function () {
    $mod.GenerateWhileDoProlog();
  };
  this.GenerateForToDoEpilog = function (ValType, Down, IdentIndex, Epilog, forBPL) {
    var svar = "";
    var CounterSize = 0;
    svar = $mod.GetLocalName(IdentIndex,"");
    CounterSize = pas.Common.DataSize[ValType - 128];
    var $tmp = CounterSize;
    if ($tmp === 1) {
      $mod.Gen();
    } else if ($tmp === 2) {
      $mod.Gen();
    } else if ($tmp === 4) {
      $mod.Gen();
      $mod.Gen();
    };
    if (Down) {
      $mod.Gen();
      var $tmp1 = CounterSize;
      if ($tmp1 === 1) {
        pas.Optimize.asm65("\tdec " + svar,"")}
       else if ($tmp1 === 2) {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tdec " + svar + "+1","");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("\tdec " + svar,"");
      } else if ($tmp1 === 4) {
        pas.Optimize.asm65("\tlda " + svar,"");
        pas.Optimize.asm65("\tbne @+1","");
        pas.Optimize.asm65("\tlda " + svar + "+1","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda " + svar + "+2","");
        pas.Optimize.asm65("\tsne","");
        pas.Optimize.asm65("\tdec " + svar + "+3","");
        pas.Optimize.asm65("\tdec " + svar + "+2","");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("\tdec " + svar + "+1","");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("\tdec " + svar,"");
      };
    } else {
      $mod.Gen();
      var $tmp2 = CounterSize;
      if ($tmp2 === 1) {
        pas.Optimize.asm65("\tinc " + svar,"")}
       else if ($tmp2 === 2) {
        pas.Optimize.asm65("\tinc " + svar,"");
        pas.Optimize.asm65("\tsne","");
        pas.Optimize.asm65("\tinc " + svar + "+1","");
      } else if ($tmp2 === 4) {
        pas.Optimize.asm65("\tinc " + svar,"");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tinc " + svar + "+1","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tinc " + svar + "+2","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tinc " + svar + "+3","");
        pas.Optimize.asm65("@","");
      };
    };
    $mod.Gen();
    $mod.Gen();
    if (Epilog) {
      if (ValType in rtl.createSet(131,132,133)) {
        var $tmp3 = CounterSize;
        if ($tmp3 === 1) {
          if (Down) {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tcmp #$7f","");
            pas.Optimize.asm65("\tseq","");
          } else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tcmp #$80","");
            pas.Optimize.asm65("\tseq","");
          };
        };
      } else if (Down) {
        var $tmp4 = CounterSize;
        if ($tmp4 === 1) {
          if ((forBPL & 1) !== 0) {
            pas.Optimize.asm65("\tbmi *+5","")}
           else if ((forBPL & 2) !== 0) {
            pas.Optimize.asm65("\tseq","")}
           else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tcmp #$FF","");
            pas.Optimize.asm65("\tseq","");
          }}
         else if ($tmp4 === 2) {
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tcmp #$FF","");
          pas.Optimize.asm65("\tseq","");
        } else if ($tmp4 === 4) {
          pas.Optimize.asm65("\tlda " + svar + "+3","");
          pas.Optimize.asm65("\tcmp #$FF","");
          pas.Optimize.asm65("\tseq","");
        };
      } else {
        pas.Optimize.asm65("\tseq","");
      };
      $mod.GenerateWhileDoEpilog();
    };
  };
  this.CompilerTitle = function () {
    var Result = "";
    Result = "Mad Pascal Compiler version " + pas.Common.title + " [" + "2025/3/24" + "] for MOS 6502 CPU";
    return Result;
  };
  this.GenerateProgramProlog = function () {
    var i = 0;
    var j = 0;
    var tmp = false;
    var a = "";
    var header = "";
    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
      tmp = pas.Common.optimize.use;
      pas.Common.optimize.use = false;
      $mod.Gen();
      $mod.asm65separator(false);
      pas.Optimize.asm65("; " + $mod.CompilerTitle(),"");
      $mod.asm65separator(false);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("STACKWIDTH\t= 16","");
      if (pas.Common.target.id === pas.Common.TComputer.A8) pas.Optimize.asm65("CODEORIGIN\t= $" + pas.SysUtils.IntToHex(pas.Common.CODEORIGIN_BASE,4),"");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("TRUE\t\t= " + pas.Common.IntToStr(pas.Common.Ident[pas.Parser.GetIdentIndex("TRUE") - 1].Value),"");
      pas.Optimize.asm65("FALSE\t\t= " + pas.Common.IntToStr(pas.Common.Ident[pas.Parser.GetIdentIndex("FALSE") - 1].Value),"");
      pas.Optimize.asm65("EOL\t\t= $" + pas.SysUtils.IntToHex(pas.Common.Ident[pas.Parser.GetIdentIndex("EOL") - 1].Value,2),"");
      pas.Optimize.asm65("__BUFFER\t= $" + pas.SysUtils.IntToHex(pas.Common.Ident[pas.Parser.GetIdentIndex("__BUFFER") - 1].Value,4),"");
      pas.Optimize.asm65("@BUF\t\t= __BUFFER","");
      $mod.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.ZPAGE_BASE,2),"");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("zpage","");
      pas.Optimize.asm65("","");
      if (pas.Common.target.id === pas.Common.TComputer.A8) {
        pas.Optimize.asm65(".if .def(@vbxe_detect)","");
        pas.Optimize.asm65("fxptr\t.ds 2","; VBXE pointer");
        pas.Optimize.asm65(".fi","");
        pas.Optimize.asm65("","");
      };
      pas.Optimize.asm65(".if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)","");
      pas.Optimize.asm65("psptr\t.ds 2","; PROGRAMSTACK Pointer");
      pas.Optimize.asm65(".fi","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("bp\t.ds 2","");
      pas.Optimize.asm65("bp2\t.ds 2","");
      pas.Optimize.asm65("bp3\t= bp+1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("eax\t.ds 4",";8 bytes (aex + edx) -> divREAL");
      pas.Optimize.asm65("edx\t.ds 4","");
      pas.Optimize.asm65("ecx\t.ds 4","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("TMP","");
      pas.Optimize.asm65("ztmp","");
      pas.Optimize.asm65("ztmp8\t.ds 1","");
      pas.Optimize.asm65("ztmp9\t.ds 1","");
      pas.Optimize.asm65("ztmp10\t.ds 1","");
      pas.Optimize.asm65("ztmp11\t.ds 1","");
      if (pas.Common.STACK_BASE >= 0) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.STACK_BASE,4),"");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("STACKORIGIN\t.ds STACKWIDTH*4","");
      pas.Optimize.asm65("zpend","");
      $mod.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("ax\t= eax","");
      pas.Optimize.asm65("al\t= eax","");
      pas.Optimize.asm65("ah\t= eax+1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("cx\t= ecx","");
      pas.Optimize.asm65("cl\t= ecx","");
      pas.Optimize.asm65("ch\t= ecx+1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("dx\t= edx","");
      pas.Optimize.asm65("dl\t= edx","");
      pas.Optimize.asm65("dh\t= edx+1","");
      if (pas.Common.target.id === pas.Common.TComputer.NEO) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FP1MAN0 = VAR1_B0","");
        pas.Optimize.asm65("FP1MAN1 = VAR1_B1","");
        pas.Optimize.asm65("FP1MAN2 = VAR1_B2","");
        pas.Optimize.asm65("FP1MAN3 = VAR1_B3","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FP2MAN0 = VAR2_B0","");
        pas.Optimize.asm65("FP2MAN1 = VAR2_B1","");
        pas.Optimize.asm65("FP2MAN2 = VAR2_B2","");
        pas.Optimize.asm65("FP2MAN3 = VAR2_B3","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FPMAN0 = FP1MAN0","");
        pas.Optimize.asm65("FPMAN1 = FP1MAN1","");
        pas.Optimize.asm65("FPMAN2 = FP1MAN2","");
        pas.Optimize.asm65("FPMAN3 = FP1MAN3","");
      } else {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg eax","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FP1MAN0\t.ds 1","");
        pas.Optimize.asm65("FP1MAN1\t.ds 1","");
        pas.Optimize.asm65("FP1MAN2\t.ds 1","");
        pas.Optimize.asm65("FP1MAN3\t.ds 1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg edx","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FP2MAN0\t.ds 1","");
        pas.Optimize.asm65("FP2MAN1\t.ds 1","");
        pas.Optimize.asm65("FP2MAN2\t.ds 1","");
        pas.Optimize.asm65("FP2MAN3\t.ds 1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg ecx","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FPMAN0\t.ds 1","");
        pas.Optimize.asm65("FPMAN1\t.ds 1","");
        pas.Optimize.asm65("FPMAN2\t.ds 1","");
        pas.Optimize.asm65("FPMAN3\t.ds 1","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\torg ztmp8","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("FP1SGN\t.ds 1","");
      pas.Optimize.asm65("FP1EXP\t.ds 1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\torg ztmp10","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("FP2SGN\t.ds 1","");
      pas.Optimize.asm65("FP2EXP\t.ds 1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\torg bp2","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("FPSGN\t.ds 1","");
      pas.Optimize.asm65("FPEXP\t.ds 1","");
      if ((pas.Common.target.id === pas.Common.TComputer.A8) && (pas.Common.LIBRARY_USE === false)) {
        if (pas.Common.RCLIBRARY) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg MAIN.SYSTEM.__PORTB_BANKS+$40","");
          pas.Optimize.asm65("\ticl 'atari\\xmsproc.asm'","");
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.BASICOFF","");
        pas.Optimize.asm65("\torg CODEORIGIN","");
        pas.Optimize.asm65("\ticl 'atari\\basicoff.asm'","");
        pas.Optimize.asm65("\tini CODEORIGIN","");
        pas.Optimize.asm65("\t.fi","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.S_VBXE","");
        pas.Optimize.asm65("\topt h-","");
        pas.Optimize.asm65("\tins 'atari\\s_vbxe\\sdxld2.obx'","");
        pas.Optimize.asm65("\topt h+","");
        pas.Optimize.asm65("\t.fi","");
      };
      if (((rtl.length(pas.Common.resArray) - 1) > 0) && (pas.Common.target.id === pas.Common.TComputer.A8) && pas.Common.LIBRARY_USE) pas.Optimize.asm65("\tert 'Resources in LIBRARY not allowed'","");
      if (((rtl.length(pas.Common.resArray) - 1) > 0) && (pas.Common.target.id === pas.Common.TComputer.A8) && (pas.Common.LIBRARY_USE === false)) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg CODEORIGIN","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".local\tMAIN.@RESOURCE","");
        pas.Optimize.asm65(".endl","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".local\tRESOURCE","");
        pas.Optimize.asm65("\ticl 'atari\\resource.asm'","");
        pas.Optimize.asm65("\t?EXTDETECT = 0","");
        pas.Optimize.asm65("\t?VBXDETECT = 0","");
        pas.Optimize.asm65("","");
        for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.Common.resArray[i].resStream === false) {
            a = "\t" + pas.Common.resArray[i].resType + " '" + pas.Common.resArray[i].resFile + "'" + " ";
            a = a + pas.Common.resArray[i].resFullName;
            for (j = 1; j <= 8; j++) a = a + " " + pas.Common.resArray[i].resPar[j - 1];
            pas.Optimize.asm65(a,"");
          };
        };
        pas.Optimize.asm65(".endl","");
      };
      $mod.asm65separator(true);
      if (pas.Common.target.id === pas.Common.TComputer.A8) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg CODEORIGIN","");
      } else {
        for (var $in = pas.Common.target.header, $l1 = 0, $end1 = rtl.length($in) - 1; $l1 <= $end1; $l1++) {
          header = $in[$l1];
          if (header === "END") {
            break}
           else if (header !== "") {
            pas.Optimize.asm65("\t" + header,"")}
           else pas.Optimize.asm65("","");
        };
        if (pas.Common.target.id === pas.Common.TComputer.RAW) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\topt h-f+","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.target.codeorigin,4),"");
          pas.Optimize.asm65("\tjmp START","");
          pas.Optimize.asm65("","");
          pas.Common.CODEORIGIN_BASE = pas.Common.target.codeorigin + 3;
        } else if (pas.Common.target.id === pas.Common.TComputer.NEO) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\topt h-f+c+","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.target.codeorigin,4),"");
          pas.Optimize.asm65("\tjmp START","");
          pas.Optimize.asm65("","");
          pas.Common.CODEORIGIN_BASE = pas.Common.target.codeorigin + 3;
        };
        pas.Optimize.asm65("CODEORIGIN","");
      };
      for (var $l2 = 0, $end2 = pas.Common.NumStaticStrChars - 1; $l2 <= $end2; $l2++) {
        i = $l2;
        $mod.Gen();
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\tSTATICDATA","");
      $mod.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("RTLIB","");
      if (pas.Common.target.id === pas.Common.TComputer.A8) {
        pas.Optimize.asm65("\ticl 'rtl6502_a8.asm'","")}
       else pas.Optimize.asm65("\ticl 'rtl6502_" + pas.Utilities.AnsiLowerCase(pas.Common.target.name) + ".asm'","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".print 'ZPAGE: ',zpage,'..',zpend-1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".print 'RTBUF: ',@buf,'..',@buf+255","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".print 'RTLIB: ',RTLIB,'..',*-1","");
      $mod.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("START","");
      if (pas.Common.LIBRARY_USE) pas.Optimize.asm65("\tstx MAIN.@regX+1","");
      pas.Optimize.asm65("\ttsx","");
      pas.Optimize.asm65("\tstx MAIN.@halt+1","");
      pas.Optimize.asm65("","");
      if ((pas.Common.target.id === pas.Common.TComputer.A8) && (pas.Common.LIBRARY_USE === false)) {
        pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.ROMOFF","");
        pas.Optimize.asm65("\ticl 'atari\\romoff.asm'","");
        pas.Optimize.asm65("\t.fi","");
        pas.Optimize.asm65("","");
      };
      if (pas.Common.FastMul > 0) {
        pas.Optimize.asm65("\tfmulinit","");
        pas.Optimize.asm65("","");
      };
      if (pas.Common.LIBRARY_USE === false) {
        pas.Optimize.asm65("VLEN\t= VARDATASIZE-VARINITSIZE","");
        pas.Optimize.asm65("VADR\t= DATAORIGIN+VARINITSIZE","");
        pas.Optimize.asm65("","");
        if (pas.Common.target.id === pas.Common.TComputer.A8) {
          pas.Optimize.asm65("\tift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)","");
          pas.Optimize.asm65("\tert 'Invalid memory address range ',VADR","");
          pas.Optimize.asm65("\teif","");
          pas.Optimize.asm65("","");
        };
        pas.Optimize.asm65("\tift (VLEN > 0) && (VLEN <= 256)","");
        pas.Optimize.asm65("\tldx #256-VLEN","");
        pas.Optimize.asm65("\tlda #$00","");
        pas.Optimize.asm65("\tsta:rne VADR+VLEN-256,x+","");
        pas.Optimize.asm65("\teli VLEN>256","");
        pas.Optimize.asm65("\tm@init","");
        pas.Optimize.asm65("\teif","");
        pas.Optimize.asm65("","");
      };
      pas.Optimize.asm65(".ifdef psptr","");
      pas.Optimize.asm65("\tmwa #PROGRAMSTACK psptr","");
      pas.Optimize.asm65(".fi","");
      pas.Optimize.asm65("","");
      if (pas.Common.target.id in rtl.createSet(pas.Common.TComputer.C64,pas.Common.TComputer.C4P)) {
        pas.Optimize.asm65("\tlda #$0e","");
        pas.Optimize.asm65("\tjsr $ffd2","; shifted charset");
        pas.Optimize.asm65("","");
      };
      if (pas.Common.target.id === pas.Common.TComputer.NEO) {
        pas.Optimize.asm65("\tstz $FF04","; set radians as default");
        pas.Optimize.asm65("\tmva #35 $FF01","");
        pas.Optimize.asm65("\tmva #4  $FF00","");
      };
      if ((pas.Common.target.id === pas.Common.TComputer.A8) && (pas.Common.LIBRARY_USE === false)) {
        pas.Optimize.asm65("\tldx #$00","; X = 0");
        pas.Optimize.asm65("\tstx bp","; BP = 0");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tstx audctl","; reset POKEY");
        pas.Optimize.asm65("\tstx audctl+$10","");
        pas.Optimize.asm65("\tlda #3","");
        pas.Optimize.asm65("\tsta skctl","");
        pas.Optimize.asm65("\tsta skctl+$10","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tdex","; X = 255");
        pas.Optimize.asm65("","");
      } else {
        pas.Optimize.asm65("\tldx #$00","");
        pas.Optimize.asm65("\tstx bp","; BP = 0");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tdex","; X = 255");
        pas.Optimize.asm65("","");
      };
      if (pas.Common.target.cpu !== pas.Common.TCPU.CPU_6502) pas.Optimize.asm65("\topt c+","");
      pas.Optimize.asm65("\tUNITINITIALIZATION","");
      pas.Optimize.asm65("","");
      pas.Common.optimize.use = tmp;
    };
  };
  this.GenerateProgramEpilog = function (ExitCode) {
    $mod.Gen();
    $mod.Gen();
    pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(ExitCode,2),"");
    pas.Optimize.asm65("\tjmp @halt","");
  };
  this.GenerateDeclarationProlog = function () {
    pas.Common.CodePosStackTop += 1;
    pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),"");
  };
  this.GenerateDeclarationEpilog = function () {
    $mod.GenerateIfThenEpilog();
  };
  this.GenerateRead = function () {
    pas.Optimize.asm65("\t@getline","");
  };
  this.GenerateWriteString = function (Address, IndirectionLevel, ValueType) {
    pas.Optimize.asm65("","");
    var $tmp = IndirectionLevel;
    if ($tmp === 7) {
      pas.Optimize.asm65("\tjsr @printBOOLEAN","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 6) {
      pas.Optimize.asm65("\t@printCHAR","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 9) {
      pas.Optimize.asm65("\tjsr @printSHORTREAL","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 8) {
      pas.Optimize.asm65("\tjsr @printREAL","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 11) {
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta @FTOA.I","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @FTOA.I+1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta @FTOA.I+2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta @FTOA.I+3","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      pas.Optimize.asm65("\tjsr @FTOA","");
    } else if ($tmp === 10) {
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta @F16_F2A.I","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @F16_F2A.I+1","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      pas.Optimize.asm65("\tjsr @F16_F2A","");
    } else if ($tmp === 0) {
      var $tmp1 = pas.Common.DataSize[ValueType - 128];
      if ($tmp1 === 1) {
        if (ValueType === 131) {
          pas.Optimize.asm65("\tjsr @printSHORTINT","")}
         else pas.Optimize.asm65("\tjsr @printBYTE","")}
       else if ($tmp1 === 2) {
        if (ValueType === 132) {
          pas.Optimize.asm65("\tjsr @printSMALLINT","")}
         else pas.Optimize.asm65("\tjsr @printWORD","")}
       else if ($tmp1 === 4) if (ValueType === 133) {
        pas.Optimize.asm65("\tjsr @printINT","")}
       else pas.Optimize.asm65("\tjsr @printCARD","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 1) {
      pas.Optimize.asm65("\t@printSTRING #CODEORIGIN+$" + pas.SysUtils.IntToHex(Address - 256,4),"");
    } else if ($tmp === 2) {
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tjsr @printSTRING","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    } else if ($tmp === 12) {
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tjsr @printPCHAR","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    };
  };
  this.GenerateUnaryOperation = function (op, ValType) {
    var $tmp = op;
    if ($tmp === 61) {}
    else if ($tmp === 62) {
      $mod.Gen();
      $mod.Gen();
      $mod.Gen();
      if (ValType === 144) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\teor #$80","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
      } else if (ValType === 143) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\teor #$80","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
      } else {
        var $tmp1 = pas.Common.DataSize[ValType - 128];
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc #$00","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc #$00","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc #$00","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        } else if ($tmp1 === 2) {
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc #$00","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc #$00","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        } else if ($tmp1 === 4) {
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        };
      };
    } else if ($tmp === 72) {
      $mod.Gen();
      $mod.Gen();
      $mod.Gen();
      if (ValType === 135) {
        pas.Optimize.asm65("\tldy #1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tbeq @+","");
        pas.Optimize.asm65("\tdey","");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("\tsty :STACKORIGIN,x","");
      } else {
        $mod.ExpandParam(133,ValType);
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
      };
    };
  };
  this.GenerateBinaryOperation = function (op, ResultType) {
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("; Generate Binary Operation for " + pas.Common.InfoAboutToken(ResultType),"");
    $mod.Gen();
    $mod.Gen();
    $mod.Gen();
    var $tmp = op;
    if ($tmp === 61) {
      if (ResultType === 144) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_ADD.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_ADD.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_ADD.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_ADD.A+1","");
        pas.Optimize.asm65("\tjsr @F16_ADD","");
        pas.Optimize.asm65("\tlda :eax","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :eax+1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      } else if (ResultType === 143) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :FP2MAN0","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :FP2MAN1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :FP2MAN2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :FP2MAN3","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta :FP1MAN0","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :FP1MAN1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :FP1MAN2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :FP1MAN3","");
        pas.Optimize.asm65("\tjsr @FADD","");
        pas.Optimize.asm65("\tlda :FPMAN0","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :FPMAN1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :FPMAN2","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :FPMAN3","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      } else {
        var $tmp1 = pas.Common.DataSize[ResultType - 128];
        if ($tmp1 === 1) {
          $mod.a65(pas.Common.TCode65.addAL_CL,0,1,4,0)}
         else if ($tmp1 === 2) {
          $mod.a65(pas.Common.TCode65.addAX_CX,0,1,4,0)}
         else if ($tmp1 === 4) $mod.a65(pas.Common.TCode65.addEAX_ECX,0,1,4,0);
      };
    } else if ($tmp === 62) {
      if (ResultType === 144) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_SUB.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_SUB.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_SUB.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_SUB.A+1","");
        pas.Optimize.asm65("\tjsr @F16_SUB","");
        pas.Optimize.asm65("\tlda :eax","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :eax+1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      } else if (ResultType === 143) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :FP2MAN0","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :FP2MAN1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :FP2MAN2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :FP2MAN3","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta :FP1MAN0","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :FP1MAN1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :FP1MAN2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :FP1MAN3","");
        pas.Optimize.asm65("\tjsr @FSUB","");
        pas.Optimize.asm65("\tlda :FPMAN0","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :FPMAN1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :FPMAN2","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :FPMAN3","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      } else {
        var $tmp2 = pas.Common.DataSize[ResultType - 128];
        if ($tmp2 === 1) {
          $mod.a65(pas.Common.TCode65.subAL_CL,0,1,4,0)}
         else if ($tmp2 === 2) {
          $mod.a65(pas.Common.TCode65.subAX_CX,0,1,4,0)}
         else if ($tmp2 === 4) $mod.a65(pas.Common.TCode65.subEAX_ECX,0,1,4,0);
      };
    } else if ($tmp === 63) {
      if (ResultType in pas.Common.RealTypes) {
        var $tmp3 = ResultType;
        if ($tmp3 === 141) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_MUL.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_MUL.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_MUL.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_MUL.A+1","");
          pas.Optimize.asm65("\tjsr @SHORTREAL_MUL","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if ($tmp3 === 142) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.B+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.B+3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.A+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.A+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @REAL_MUL.A+3","");
          pas.Optimize.asm65("\tjsr @REAL_MUL","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :eax+2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :eax+3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        } else if ($tmp3 === 143) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :FP2MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP2MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP2MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP2MAN3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :FP1MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP1MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP1MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP1MAN3","");
          pas.Optimize.asm65("\tjsr @FMUL","");
          pas.Optimize.asm65("\tlda :FPMAN0","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :FPMAN1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :FPMAN2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :FPMAN3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        } else if ($tmp3 === 144) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_MUL.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_MUL.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_MUL.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_MUL.A+1","");
          pas.Optimize.asm65("\tjsr @F16_MUL","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        };
      } else {
        if (ResultType in pas.Common.SignedOrdinalTypes) {
          var $tmp4 = ResultType;
          if ($tmp4 === 131) {
            pas.Optimize.asm65("\tjsr mulSHORTINT","")}
           else if ($tmp4 === 132) {
            pas.Optimize.asm65("\tjsr mulSMALLINT","")}
           else if ($tmp4 === 133) pas.Optimize.asm65("\tjsr mulINTEGER","");
        } else {
          var $tmp5 = pas.Common.DataSize[ResultType - 128];
          if ($tmp5 === 1) {
            pas.Optimize.asm65("\tjsr imulBYTE","")}
           else if ($tmp5 === 2) {
            pas.Optimize.asm65("\tjsr imulWORD","")}
           else if ($tmp5 === 4) pas.Optimize.asm65("\tjsr imulCARD","");
          if (pas.Common.DataSize[ResultType - 128] === 1) {
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          } else {
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          };
        };
      };
    } else if (($tmp === 64) || ($tmp === 65) || ($tmp === 66)) {
      if (ResultType in pas.Common.RealTypes) {
        var $tmp6 = ResultType;
        if ($tmp6 === 141) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_DIV.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_DIV.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_DIV.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @SHORTREAL_DIV.A+1","");
          pas.Optimize.asm65("\tjsr @SHORTREAL_DIV","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if ($tmp6 === 142) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.B+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.B+3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.A+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.A+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @REAL_DIV.A+3","");
          pas.Optimize.asm65("\tjsr @REAL_DIV","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :eax+2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :eax+3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        } else if ($tmp6 === 143) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :FP2MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP2MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP2MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP2MAN3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :FP1MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP1MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP1MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP1MAN3","");
          pas.Optimize.asm65("\tjsr @FDIV","");
          pas.Optimize.asm65("\tlda :FPMAN0","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :FPMAN1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :FPMAN2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :FPMAN3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        } else if ($tmp6 === 144) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_DIV.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_DIV.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_DIV.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_DIV.A+1","");
          pas.Optimize.asm65("\tjsr @F16_DIV","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        };
      } else {
        if (ResultType in pas.Common.SignedOrdinalTypes) {
          var $tmp7 = ResultType;
          if ($tmp7 === 131) {
            if (op === 66) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @SHORTINT.MOD.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @SHORTINT.MOD.A","");
              pas.Optimize.asm65("\tjsr @SHORTINT.MOD","");
              pas.Optimize.asm65("\tlda @SHORTINT.MOD.RESULT","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @SHORTINT.DIV.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @SHORTINT.DIV.A","");
              pas.Optimize.asm65("\tjsr @SHORTINT.DIV","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            }}
           else if ($tmp7 === 132) {
            if (op === 66) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.MOD.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.MOD.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.MOD.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.MOD.A+1","");
              pas.Optimize.asm65("\tjsr @SMALLINT.MOD","");
              pas.Optimize.asm65("\tlda @SMALLINT.MOD.RESULT","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda @SMALLINT.MOD.RESULT+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.DIV.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.DIV.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.DIV.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @SMALLINT.DIV.A+1","");
              pas.Optimize.asm65("\tjsr @SMALLINT.DIV","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            }}
           else if ($tmp7 === 133) if (op === 66) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.B+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.B+3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @INTEGER.MOD.A+3","");
            pas.Optimize.asm65("\tjsr @INTEGER.MOD","");
            pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.B+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.B+3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @INTEGER.DIV.A+3","");
            pas.Optimize.asm65("\tjsr @INTEGER.DIV","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          };
        } else {
          var $tmp8 = ResultType;
          if ($tmp8 === 128) {
            if (op === 66) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @BYTE.MOD.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @BYTE.MOD.A","");
              pas.Optimize.asm65("\tjsr @BYTE.MOD","");
              pas.Optimize.asm65("\tlda @BYTE.MOD.RESULT","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @BYTE.DIV.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @BYTE.DIV.A","");
              pas.Optimize.asm65("\tjsr @BYTE.DIV","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            }}
           else if ($tmp8 === 129) {
            if (op === 66) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @WORD.MOD.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @WORD.MOD.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @WORD.MOD.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @WORD.MOD.A+1","");
              pas.Optimize.asm65("\tjsr @WORD.MOD","");
              pas.Optimize.asm65("\tlda @WORD.MOD.RESULT","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda @WORD.MOD.RESULT+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @WORD.DIV.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @WORD.DIV.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @WORD.DIV.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @WORD.DIV.A+1","");
              pas.Optimize.asm65("\tjsr @WORD.DIV","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            }}
           else if ($tmp8 === 130) if (op === 66) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.B+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.B+3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.MOD.A+3","");
            pas.Optimize.asm65("\tjsr @CARDINAL.MOD","");
            pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.B+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.B+3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @CARDINAL.DIV.A+3","");
            pas.Optimize.asm65("\tjsr @CARDINAL.DIV","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          };
        };
      };
    } else if ($tmp === 67) {
      if (ResultType in pas.Common.SignedOrdinalTypes) {
        var $tmp9 = pas.Common.DataSize[ResultType - 128];
        if ($tmp9 === 1) {
          pas.Optimize.asm65("\tjsr @expandToCARD1.SHORT","");
          $mod.a65(pas.Common.TCode65.shlEAX_CL,0,1,4,0);
        } else if ($tmp9 === 2) {
          pas.Optimize.asm65("\tjsr @expandToCARD1.SMALL","");
          $mod.a65(pas.Common.TCode65.shlEAX_CL,0,1,4,0);
        } else if ($tmp9 === 4) $mod.a65(pas.Common.TCode65.shlEAX_CL,0,1,4,0);
      } else {
        var $tmp10 = pas.Common.DataSize[ResultType - 128];
        if ($tmp10 === 1) {
          $mod.a65(pas.Common.TCode65.shlAL_CL,0,1,4,0)}
         else if ($tmp10 === 2) {
          $mod.a65(pas.Common.TCode65.shlAX_CL,0,1,4,0)}
         else if ($tmp10 === 4) $mod.a65(pas.Common.TCode65.shlEAX_CL,0,1,4,0);
      };
    } else if ($tmp === 68) {
      if (ResultType in pas.Common.SignedOrdinalTypes) {
        var $tmp11 = pas.Common.DataSize[ResultType - 128];
        if ($tmp11 === 1) {
          pas.Optimize.asm65("\tjsr @expandToCARD1.SHORT","");
          $mod.a65(pas.Common.TCode65.shrEAX_CL,0,1,4,0);
        } else if ($tmp11 === 2) {
          pas.Optimize.asm65("\tjsr @expandToCARD1.SMALL","");
          $mod.a65(pas.Common.TCode65.shrEAX_CL,0,1,4,0);
        } else if ($tmp11 === 4) $mod.a65(pas.Common.TCode65.shrEAX_CL,0,1,4,0);
      } else {
        var $tmp12 = pas.Common.DataSize[ResultType - 128];
        if ($tmp12 === 1) {
          $mod.a65(pas.Common.TCode65.shrAL_CL,0,1,4,0)}
         else if ($tmp12 === 2) {
          $mod.a65(pas.Common.TCode65.shrAX_CL,0,1,4,0)}
         else if ($tmp12 === 4) $mod.a65(pas.Common.TCode65.shrEAX_CL,0,1,4,0);
      };
    } else if ($tmp === 71) {
      var $tmp13 = pas.Common.DataSize[ResultType - 128];
      if ($tmp13 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      } else if ($tmp13 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      } else if ($tmp13 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      };
    } else if ($tmp === 69) {
      var $tmp14 = pas.Common.DataSize[ResultType - 128];
      if ($tmp14 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      } else if ($tmp14 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      } else if ($tmp14 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      };
    } else if ($tmp === 70) {
      var $tmp15 = pas.Common.DataSize[ResultType - 128];
      if ($tmp15 === 1) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      } else if ($tmp15 === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      } else if ($tmp15 === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      };
    };
    $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
  };
  this.GenerateRelationString = function (rel, LeftValType, RightValType) {
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("; relation STRING","");
    $mod.Gen();
    pas.Optimize.asm65("\tldy #1","");
    $mod.Gen();
    if ((LeftValType === 137) && (RightValType === 137)) {
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta @cmpSTRING.B","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @cmpSTRING.B+1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tsta @cmpSTRING.A","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @cmpSTRING.A+1","");
      pas.Optimize.asm65("\tjsr @cmpSTRING","");
    } else if (LeftValType === 134) {
      $mod.a65(pas.Common.TCode65.cmpCHAR2STRING,0,1,4,0)}
     else if (RightValType === 134) $mod.a65(pas.Common.TCode65.cmpSTRING2CHAR,0,1,4,0);
    $mod.GenerateRelationOperation(rel,128);
    $mod.Gen();
    pas.Optimize.asm65("\tdey","");
    pas.Optimize.asm65("@","");
    pas.Optimize.asm65("\tsty :STACKORIGIN-1,x","");
    $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
  };
  this.GenerateRelation = function (rel, ValType) {
    $mod.Gen();
    if (ValType === 144) {
      var $tmp = rel;
      if ($tmp === 43) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.A+1","");
        pas.Optimize.asm65("\tjsr @F16_EQ","");
        pas.Optimize.asm65("\tdex","");
      } else if (($tmp === 44) || ($tmp === 0)) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_EQ.A+1","");
        pas.Optimize.asm65("\tjsr @F16_EQ","");
        pas.Optimize.asm65("\tdex","");
        pas.Optimize.asm65("\teor #$01","");
      } else if ($tmp === 47) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_GT.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GT.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_GT.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GT.A+1","");
        pas.Optimize.asm65("\tjsr @F16_GT","");
        pas.Optimize.asm65("\tdex","");
      } else if ($tmp === 45) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_GT.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GT.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_GT.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GT.A+1","");
        pas.Optimize.asm65("\tjsr @F16_GT","");
        pas.Optimize.asm65("\tdex","");
      } else if ($tmp === 48) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.A+1","");
        pas.Optimize.asm65("\tjsr @F16_GTE","");
        pas.Optimize.asm65("\tdex","");
      } else if ($tmp === 46) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_GTE.A+1","");
        pas.Optimize.asm65("\tjsr @F16_GTE","");
        pas.Optimize.asm65("\tdex","");
      };
      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
    } else {
      if (ValType === 143) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @FCMPL.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @FCMPL.A+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta @FCMPL.A+2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta @FCMPL.A+3","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @FCMPL.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @FCMPL.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta @FCMPL.B+2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta @FCMPL.B+3","");
      };
      pas.Optimize.asm65("\tldy #1","");
      $mod.Gen();
      var $tmp1 = ValType;
      if (($tmp1 === 128) || ($tmp1 === 134) || ($tmp1 === 135)) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
      } else if ($tmp1 === 131) {
        pas.Optimize.asm65("\t.LOCAL","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
        pas.Optimize.asm65("\tbeq L5","");
        pas.Optimize.asm65("\tbvc L5","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tora #$01","");
        pas.Optimize.asm65("L5","");
        pas.Optimize.asm65("\t.ENDL","");
      } else if (($tmp1 === 132) || ($tmp1 === 141)) {
        pas.Optimize.asm65("\t.LOCAL","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsub :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne L4","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
        pas.Optimize.asm65("\tbeq L5","");
        pas.Optimize.asm65("\tlda #$00","");
        pas.Optimize.asm65("\tadc #$FF","");
        pas.Optimize.asm65("\tora #$01","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L4\tbvc L5","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tora #$01","");
        pas.Optimize.asm65("L5","");
        pas.Optimize.asm65("\t.ENDL","");
      } else if ($tmp1 === 143) {
        pas.Optimize.asm65("\tjsr @FCMPL","")}
       else if (($tmp1 === 142) || ($tmp1 === 133)) {
        pas.Optimize.asm65("\t.LOCAL","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsub :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tbne L4","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tbne L1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne L1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
        pas.Optimize.asm65("L1\tbeq L5","");
        pas.Optimize.asm65("\tbcs L3","");
        pas.Optimize.asm65("\tlda #$FF","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L3\tlda #$01","");
        pas.Optimize.asm65("\tbne L5","");
        pas.Optimize.asm65("L4\tbvc L5","");
        pas.Optimize.asm65("\teor #$FF","");
        pas.Optimize.asm65("\tora #$01","");
        pas.Optimize.asm65("L5","");
        pas.Optimize.asm65("\t.ENDL","");
      } else if (($tmp1 === 129) || ($tmp1 === 136) || ($tmp1 === 137)) {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
        pas.Optimize.asm65("@","");
      } else {
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tbne @+","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
        pas.Optimize.asm65("@","");
      };
      $mod.GenerateRelationOperation(rel,ValType);
      $mod.Gen();
      pas.Optimize.asm65("\tdey","");
      pas.Optimize.asm65("@","");
      pas.Optimize.asm65("\tsty :STACKORIGIN-1,x","");
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
    };
  };
  this.SafeCompileConstExpression = function (i, ConstVal, ValType, VarType, Err, War) {
    var Result = false;
    var j = 0;
    j = i.get();
    pas.Common.isError = false;
    pas.Common.isConst = true;
    i.set(pas.Parser.CompileConstExpression(i.get(),ConstVal,ValType,VarType,Err,War));
    Result = !pas.Common.isError;
    pas.Common.isConst = false;
    pas.Common.isError = false;
    if (!Result) i.set(j);
    return Result;
  };
  this.CompileArrayIndex = function (i, IdentIndex) {
    var Result = 0;
    var ConstVal = 0;
    var ActualParamType = 0;
    var ArrayIndexType = 0;
    var Size = 0;
    var NumAllocElements = 0;
    var NumAllocElements_ = 0;
    var j = 0;
    var yes = false;
    var ShortArrayIndex = false;
    if (pas.Common.optimize.use === false) $mod.StartOptimization(i);
    if (pas.Common.Ident[IdentIndex - 1].isStriped) {
      Size = 1}
     else Size = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
    ShortArrayIndex = false;
    if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].IdType === 154)) {
      NumAllocElements = pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements & 0xFFFF;
      NumAllocElements_ = rtl.lw(pas.Common.Ident[IdentIndex - 1].NestedNumAllocElements >>> 16);
      if (NumAllocElements_ > 0) {
        if (((NumAllocElements * NumAllocElements_) > 1) && ((NumAllocElements * NumAllocElements_ * Size) < 256)) ShortArrayIndex = true;
      } else if ((NumAllocElements > 1) && ((NumAllocElements * Size) < 256)) ShortArrayIndex = true;
    } else {
      NumAllocElements = pas.Common.Ident[IdentIndex - 1].NumAllocElements;
      NumAllocElements_ = pas.Common.Ident[IdentIndex - 1].NumAllocElements_;
    };
    if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140,147)) NumAllocElements_ = 0;
    ActualParamType = 129;
    j = i + 2;
    if ($mod.SafeCompileConstExpression({get: function () {
        return j;
      }, set: function (v) {
        j = v;
      }},{get: function () {
        return ConstVal;
      }, set: function (v) {
        ConstVal = v;
      }},{get: function () {
        return ArrayIndexType;
      }, set: function (v) {
        ArrayIndexType = v;
      }},ActualParamType,false,true)) {
      i = j;
      pas.Common.CheckArrayIndex(i,IdentIndex,ConstVal,ArrayIndexType);
      ArrayIndexType = 129;
      ShortArrayIndex = false;
      if (NumAllocElements_ > 0) {
        $mod.Push(ConstVal * NumAllocElements_ * Size,0,pas.Common.DataSize[ArrayIndexType - 128],0,0)}
       else $mod.Push(ConstVal * Size,0,pas.Common.DataSize[ArrayIndexType - 128],0,0);
    } else {
      i = $mod.CompileExpression(i + 2,{get: function () {
          return ArrayIndexType;
        }, set: function (v) {
          ArrayIndexType = v;
        }},ActualParamType);
      pas.Common.GetCommonType(i,ActualParamType,ArrayIndexType);
      var $tmp = ArrayIndexType;
      if ($tmp === 131) {
        ArrayIndexType = 128}
       else if ($tmp === 132) {
        ArrayIndexType = 129}
       else if ($tmp === 133) ArrayIndexType = 130;
      if (pas.Common.DataSize[ArrayIndexType - 128] === 4) {
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
      };
      if (pas.Common.DataSize[ArrayIndexType - 128] === 1) {
        $mod.ExpandParam(129,ArrayIndexType);
      } else ArrayIndexType = 129;
      if ((Size > 1) || (pas.Parser.Elements(IdentIndex) > 256) || (pas.Parser.Elements(IdentIndex) in rtl.createSet(0,1))) {
        ArrayIndexType = 129;
      };
      if (NumAllocElements_ > 0) {
        $mod.Push((NumAllocElements_ * Size) & 0xFFFFFFFF,0,pas.Common.DataSize[ArrayIndexType - 128],0,0);
        $mod.GenerateBinaryOperation(63,ArrayIndexType);
      } else if (pas.Common.Ident[IdentIndex - 1].isStriped === false) $mod.GenerateIndexShift(pas.Common.Ident[IdentIndex - 1].AllocElementType,0);
    };
    yes = false;
    if (NumAllocElements_ > 0) {
      if (pas.Common.Tok[i + 1].Kind === 59) {
        i += 1;
        pas.Common.CheckTok(i + 1,58);
        yes = true;
      } else {
        pas.Common.CheckTok(i + 1,52);
        yes = true;
      };
    } else pas.Common.CheckTok(i + 1,59);
    if (yes) {
      j = i + 2;
      if ($mod.SafeCompileConstExpression({get: function () {
          return j;
        }, set: function (v) {
          j = v;
        }},{get: function () {
          return ConstVal;
        }, set: function (v) {
          ConstVal = v;
        }},{get: function () {
          return ArrayIndexType;
        }, set: function (v) {
          ArrayIndexType = v;
        }},ActualParamType,false,true)) {
        i = j;
        pas.Common.CheckArrayIndex_(i,IdentIndex,ConstVal,ArrayIndexType);
        ArrayIndexType = 129;
        ShortArrayIndex = false;
        $mod.Push(ConstVal * Size,0,pas.Common.DataSize[ArrayIndexType - 128],0,0);
      } else {
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ArrayIndexType;
          }, set: function (v) {
            ArrayIndexType = v;
          }},ActualParamType);
        pas.Common.GetCommonType(i,ActualParamType,ArrayIndexType);
        var $tmp1 = ArrayIndexType;
        if ($tmp1 === 131) {
          ArrayIndexType = 128}
         else if ($tmp1 === 132) {
          ArrayIndexType = 129}
         else if ($tmp1 === 133) ArrayIndexType = 130;
        if (pas.Common.DataSize[ArrayIndexType - 128] === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        };
        if (pas.Common.DataSize[ArrayIndexType - 128] === 1) {
          $mod.ExpandParam(129,ArrayIndexType);
          ArrayIndexType = 129;
        } else ArrayIndexType = 129;
        if (pas.Common.Ident[IdentIndex - 1].isStriped === false) $mod.GenerateIndexShift(pas.Common.Ident[IdentIndex - 1].AllocElementType,0);
      };
      $mod.GenerateBinaryOperation(61,129);
    };
    if (ShortArrayIndex) {
      pas.Optimize.asm65("\tlda #$00","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
    };
    Result = i;
    return Result;
  };
  this.CompileAddress = function (i, ValType, AllocElementType, VarPass) {
    var Result = 0;
    var IdentIndex = 0;
    var IdentTemp = 0;
    var j = 0;
    var Name = "";
    var svar = "";
    var lab = "";
    var NumAllocElements = 0;
    var rec = false;
    var dereference = false;
    var address = false;
    var $ir = rtl.createIntfRefs();
    try {
      Result = i;
      lab = "";
      rec = false;
      dereference = false;
      address = false;
      AllocElementType.set(0);
      if (pas.Common.Tok[i + 1].Kind === 57) {
        if (VarPass) pas.Messages.Error$1(i + 1,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantAsignValuesToAnAddress,"Can't assign values to an address","",""]),pas.Messages.IMessage)));
        address = true;
        i += 1;
      };
      if ((pas.Common.Tok[i + 1].Kind === 145) && (pas.Common.Tok[i + 2].Kind === 54)) {
        j = $mod.CompileExpression(i + 3,ValType,136);
        pas.Common.CheckTok(j + 1,55);
        if (pas.Common.Tok[j + 2].Kind !== 56) pas.Messages.Error$1(i + 3,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantAsignValuesToAnAddress,"Can't assign values to an address","",""]),pas.Messages.IMessage)));
        i = j + 1;
      } else if (pas.Common.Tok[i + 1].Kind !== 170) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
        if (IdentIndex > 0) {
          if (!(pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(1,3,4,5,99,100,57))) {
            pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected)}
           else {
            if (pas.Common.Ident[IdentIndex - 1].Kind === 1) if (!((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0))) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp);
            if (pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(4,5,99,100)) {
              Name = $mod.GetLocalName(IdentIndex,"");
              if (pas.Common.Ident[IdentIndex - 1].isOverload) Name = Name + "." + $mod.GetOverloadName(IdentIndex);
              $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
              pas.Optimize.asm65("\tmva <" + Name + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tmva >" + Name + " :STACKORIGIN+STACKWIDTH,x","");
              if (pas.Common.pass === pas.Common.TPass.CALL_DETERMINATION) $mod.AddCallGraphChild(pas.Common.BlockStack[pas.Common.BlockStackTop],pas.Common.Ident[IdentIndex - 1].ProcAsBlock);
            } else if ((pas.Common.Tok[i + 2].Kind === 58) && (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && ((pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) || ((pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0)))) {
              i += 1;
              i = $mod.CompileArrayIndex(i,IdentIndex);
              if (pas.Common.Ident[IdentIndex - 1].DataType === 146) {
                NumAllocElements = 0;
              } else NumAllocElements = pas.Parser.Elements(IdentIndex);
              svar = $mod.GetLocalName(IdentIndex,"");
              if (pas.System.Pos(".",svar) > 0) {
                lab = $mod.ExtractName(IdentIndex,svar);
                rec = pas.Common.Ident[pas.Parser.GetIdentIndex(lab) - 1].AllocElementType === 139;
              };
              AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
              if (rec) {
                pas.Optimize.asm65("\tlda " + lab,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda " + lab + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tadc #$00","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              } else if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || ((NumAllocElements * pas.Common.DataSize[AllocElementType.get() - 128]) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              } else {
                pas.Optimize.asm65("\tlda <" + $mod.GetLocalName(IdentIndex,"adr."),"");
                pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda >" + $mod.GetLocalName(IdentIndex,"adr."),"");
                pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              };
              pas.Common.CheckTok(i + 1,59);
            } else if ((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(138,148,139,140)) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) || (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || (VarPass && (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers))) {
              dereference = pas.Common.Tok[i + 2].Kind === 56;
              if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].IdType === 160)) {
                $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,5,pas.Common.DataSize[8],IdentIndex,0);
              } else if (dereference) {
                svar = $mod.GetLocalName(IdentIndex,"");
                if (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) if ((pas.Common.Ident[IdentIndex - 1].AllocElementType === 139) && (pas.Common.Tok[i + 3].Kind === 51)) {
                  pas.Common.CheckTok(i + 4,170);
                  IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 4].Name);
                  if (IdentTemp < 0) pas.Messages.Error$1(i + 4,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.Tok[i + 4].Name,""]),pas.Messages.IMessage)));
                  AllocElementType.set(IdentTemp >>> 16);
                  IdentTemp = pas.Parser.GetIdentIndex(svar + "." + pas.Common.Tok[i + 4].Name);
                  if (IdentTemp === 0) pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.UnknownIdentifier);
                  $mod.Push(pas.Common.Ident[IdentTemp - 1].Value,1,pas.Common.DataSize[8],IdentTemp,0);
                  i += 3;
                } else {
                  AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                  if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) {
                    if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) {
                      if (pas.Common.Ident[IdentIndex - 1].NumAllocElements_ === 0) {}
                      else pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.IllegalQualifier);
                    } else pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.IllegalQualifier);
                  };
                  $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[8],IdentIndex,0);
                  i += 1;
                };
              } else if (address || VarPass) {
                if ((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(139,140,138,148)) || (VarPass && (pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.diffSet(pas.Common.AllTypes,rtl.createSet(147,139,140))) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) && (VarPass || (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING))) || (pas.Common.Ident[IdentIndex - 1].isAbsolute && ((pas.Common.Ident[IdentIndex - 1].Value & 0xff) === 0) && ((Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 16777216) & 0x7f & 255) in rtl.createSet(null,1,127))) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements_ === 0)) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].IdType === 160)) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && !(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(0,139,140,147)) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING))) {
                  $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[8],IdentIndex,0)}
                 else $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,0,pas.Common.DataSize[8],IdentIndex,0);
                AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
              } else {
                $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[8],IdentIndex,0);
                AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
              };
            } else {
              if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Tok[i + 2].Kind === 56)) {
                AllocElementType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                i += 1;
                $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[8],IdentIndex,0);
              } else {
                $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,0,pas.Common.DataSize[8],IdentIndex,0);
              };
            };
            ValType.set(136);
            Result = i + 1;
          };
        } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.NumActualParameters = function (i, IdentIndex, NumActualParams) {
    var Result = rtl.arraySetLength(null,pas.Common.TParam,8);
    var ActualParamType = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    var oldPass = 0;
    var oldCodeSize = 0;
    var IdentTemp = 0;
    oldPass = pas.Common.pass;
    oldCodeSize = pas.Common.CodeSize;
    pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
    NumActualParams.set(0);
    ActualParamType = 0;
    Result[0].i_ = i + 1;
    if ((pas.Common.Tok[i + 1].Kind === 54) && (pas.Common.Tok[i + 2].Kind !== 55)) {
      do {
        NumActualParams.set(NumActualParams.get() + 1);
        if (NumActualParams.get() > 8) pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.TooManyParameters,IdentIndex);
        Result[NumActualParams.get() - 1].i = i;
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        AllocElementType = 0;
        NumAllocElements = 0;
        if ((ActualParamType in rtl.createSet(136,137)) && (pas.Common.Tok[i].Kind === 170)) {
          IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name);
          if ((pas.Common.Tok[i - 1].Kind === 57) && !(pas.Common.Ident[IdentTemp - 1].DataType in rtl.createSet(139,140))) {}
          else {
            AllocElementType = pas.Common.Ident[IdentTemp - 1].AllocElementType;
            NumAllocElements = pas.Common.Ident[IdentTemp - 1].NumAllocElements;
          };
          if (pas.Common.Ident[IdentTemp - 1].Kind in rtl.createSet(4,5)) {
            Result[NumActualParams.get() - 1].Name = pas.Common.Ident[IdentTemp - 1].Name;
            AllocElementType = pas.Common.Ident[IdentTemp - 1].Kind;
          };
        } else {
          if (pas.Common.Tok[i].Kind === 170) {
            IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name);
            AllocElementType = pas.Common.Ident[IdentTemp - 1].AllocElementType;
            NumAllocElements = pas.Common.Ident[IdentTemp - 1].NumAllocElements;
          } else AllocElementType = 0;
        };
        Result[NumActualParams.get() - 1].DataType = ActualParamType;
        Result[NumActualParams.get() - 1].AllocElementType = AllocElementType;
        Result[NumActualParams.get() - 1].NumAllocElements = NumAllocElements;
      } while (!(pas.Common.Tok[i + 1].Kind !== 52));
      pas.Common.CheckTok(i + 1,55);
      Result[0].i_ = i;
    };
    pas.Common.pass = oldPass;
    pas.Common.CodeSize = oldCodeSize;
    return Result;
  };
  this.CompileActualParameters = function (i, IdentIndex, ProcVarIndex) {
    var NumActualParams = 0;
    var IdentTemp = 0;
    var ParamIndex = 0;
    var j = 0;
    var old_i = 0;
    var old_func = 0;
    var ActualParamType = 0;
    var AllocElementType = 0;
    var svar = "";
    var lab = "";
    var yes = false;
    var Param = rtl.arraySetLength(null,pas.Common.TParam,8);
    var $ir = rtl.createIntfRefs();
    try {
      svar = "";
      lab = "";
      old_i = i.get();
      if (pas.Common.Ident[IdentIndex - 1].ProcAsBlock === pas.Common.BlockStack[pas.Common.BlockStackTop]) pas.Common.Ident[IdentIndex - 1].isRecursion = true;
      yes = pas.Common.Ident[IdentIndex - 1].isRecursion || pas.Common.Ident[IdentIndex - 1].isStdCall;
      for (var $l = pas.Common.Ident[IdentIndex - 1].NumParams; $l >= 1; $l--) {
        ParamIndex = $l;
        if (!((pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || ((pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType in pas.Common.Pointers) && ((pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].NumAllocElements & 0xFFFF) in rtl.createSet(0,1))) || ((pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].AllocElementType in rtl.createSet(139,140))) || (pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType in rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes)))) {
          yes = true;
          break;
        };
      };
      if (ProcVarIndex > 0) {
        svar = $mod.GetLocalName(ProcVarIndex,"");
        if (pas.Common.Tok[i.get() + 1].Kind === 58) {
          i.set($mod.CompileArrayIndex(i.get(),ProcVarIndex));
          pas.Common.CheckTok(i.get() + 1,59);
          i.set(i.get() + 1);
          if (((pas.Common.Ident[ProcVarIndex - 1].NumAllocElements * 2) > 256) || (pas.Common.Ident[ProcVarIndex - 1].NumAllocElements in rtl.createSet(0,1))) {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :TMP+1","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :TMP+2","");
            pas.Optimize.asm65("\tdex","");
          } else {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tadd #$00","");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tadc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda adr." + svar + ",y","");
            pas.Optimize.asm65("\tsta :TMP+1","");
            pas.Optimize.asm65("\tlda adr." + svar + "+1,y","");
            pas.Optimize.asm65("\tsta :TMP+2","");
            pas.Optimize.asm65("\tdex","");
          };
          pas.Optimize.asm65("\tlda #$4C","");
          pas.Optimize.asm65("\tsta :TMP","");
        } else {
          if (pas.Common.Ident[ProcVarIndex - 1].isAbsolute && (pas.Common.Ident[ProcVarIndex - 1].NumAllocElements === 0)) {}
          else {
            if (pas.Common.Ident[ProcVarIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
              if (pas.System.Pos(".",svar) > 0) {
                lab = $mod.ExtractName(ProcVarIndex,svar);
                pas.Optimize.asm65("\tmwy " + lab + " :bp2","");
                pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","");
              } else {
                pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                pas.Optimize.asm65("\tldy #$00","");
              };
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :TMP+1","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :TMP+2","");
            } else {
              if (pas.Common.Ident[ProcVarIndex - 1].NumAllocElements === 0) {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tsta :TMP+1","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tsta :TMP+2","");
              } else if (((pas.Common.Ident[ProcVarIndex - 1].NumAllocElements * 2) > 256) || (pas.Common.Ident[ProcVarIndex - 1].NumAllocElements in rtl.createSet(1))) {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :TMP+1","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :TMP+2","");
                pas.Optimize.asm65("\tdex","");
              } else {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tadd #$00","");
                pas.Optimize.asm65("\ttay","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tadc #$00","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda adr." + svar + ",y","");
                pas.Optimize.asm65("\tsta :TMP+1","");
                pas.Optimize.asm65("\tlda adr." + svar + "+1,y","");
                pas.Optimize.asm65("\tsta :TMP+2","");
                pas.Optimize.asm65("\tdex","");
              };
            };
            pas.Optimize.asm65("\tlda #$4C","");
            pas.Optimize.asm65("\tsta :TMP","");
          };
        };
      };
      Param = $mod.NumActualParameters(i.get(),IdentIndex,{get: function () {
          return NumActualParams;
        }, set: function (v) {
          NumActualParams = v;
        }});
      if (NumActualParams !== pas.Common.Ident[IdentIndex - 1].NumParams) if (ProcVarIndex > 0) {
        pas.Messages.Error$1(i.get(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.Ident[ProcVarIndex - 1].Name,""]),pas.Messages.IMessage)))}
       else pas.Messages.Error$1(i.get(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.Ident[IdentIndex - 1].Name,""]),pas.Messages.IMessage)));
      ParamIndex = NumActualParams;
      AllocElementType = 0;
      IdentTemp = 0;
      if (pas.Common.Tok[i.get() + 1].Kind === 54) {
        if (pas.Common.Tok[i.get() + 2].Kind === 55) {
          i.set(i.get() + 1)}
         else while (NumActualParams > 0) {
          i.set(Param[NumActualParams - 1].i);
          if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            i.set($mod.CompileAddress(i.get() + 1,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                ActualParamType = v;
              }},{get: function () {
                return AllocElementType;
              }, set: function (v) {
                AllocElementType = v;
              }},true));
            if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType !== 0) && (ActualParamType === 136) && (AllocElementType in rtl.createSet(136,137,145))) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            };
            if (pas.Common.Tok[i.get()].Kind === 170) {
              IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name)}
             else IdentTemp = 0;
            if (IdentTemp > 0) {
              if (pas.Common.Ident[IdentTemp - 1].Kind === 5) pas.Messages.Error$2(i.get(),pas.Messages.TErrorCode.CantAdrConstantExp);
              if (pas.Common.Ident[IdentTemp - 1].DataType in pas.Common.Pointers) if (!(pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.createSet(138,148))) {
                if (pas.Common.Ident[IdentTemp - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.createSet(139,140)) {
                  pas.Messages.Error$1(i.get(),$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IncompatibleTypes,'Incompatible types: got "{0}" expected "^{1}".',pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name,pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements - 1].Field[0].Name]),pas.Messages.IMessage)))}
                 else pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,pas.Common.Ident[IdentTemp - 1].DataType);
              };
              if (pas.Common.Ident[IdentTemp - 1].DataType in rtl.createSet(139,140)) if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements !== pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements)) {
                if (pas.Common.Ident[IdentTemp - 1].PassMethod !== pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].PassMethod) {
                  pas.Messages.Error$2(i.get(),pas.Messages.TErrorCode.CantAdrConstantExp)}
                 else pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.IncompatibleTypeOf,IdentTemp);
              };
              if (pas.Common.Ident[IdentTemp - 1].AllocElementType === 0) {
                pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,pas.Common.Ident[IdentTemp - 1].DataType);
                if (pas.Common.Ident[IdentTemp - 1].AllocElementType === 0) if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType !== 0) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType !== pas.Common.Ident[IdentTemp - 1].DataType)) pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.Ident[IdentTemp - 1].DataType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,false);
              } else if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in pas.Common.Pointers) {
                if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements === 0) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements === 0)) {}
                else if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType !== pas.Common.Ident[IdentTemp - 1].AllocElementType) {
                  if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType === 0) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.createSet(136,145))) {
                    if (pas.Common.Ident[IdentTemp - 1].AllocElementType in rtl.createSet(139,140)) {}
                    else pas.Messages.ErrorIdentifierIncompatibleTypesArray(i.get(),IdentTemp,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType);
                  } else pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.Ident[IdentTemp - 1].AllocElementType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType,false);
                };
              } else pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,pas.Common.Ident[IdentTemp - 1].AllocElementType);
            } else if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType !== 0) if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType !== AllocElementType) {
              if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType !== 0) {
                if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType !== AllocElementType) pas.Messages.ErrorIncompatibleTypes(i.get(),AllocElementType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,false);
              } else pas.Messages.ErrorIncompatibleTypes(i.get(),AllocElementType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,false);
            };
            if (IdentTemp === 0) if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType === 139) && (ActualParamType === 136) && (AllocElementType === 139)) {}
            else if ((ActualParamType === 136) && (AllocElementType !== 0)) {
              pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,AllocElementType)}
             else pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,ActualParamType);
          } else {
            i.set($mod.CompileExpression(i.get() + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                ActualParamType = v;
              }},pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType));
            if ((pas.Common.Tok[i.get()].Kind === 170) && (ActualParamType in rtl.createSet(139,140)) && !(pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in pas.Common.Pointers)) if (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name) - 1].isNestedFunction) {
              if (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name) - 1].NestedFunctionNumAllocElements !== pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.IncompatibleTypeOf,pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name));
            } else if (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name) - 1].NumAllocElements !== pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.IncompatibleTypeOf,pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name));
            if (((ActualParamType in rtl.createSet(139,140)) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in pas.Common.Pointers)) || ((ActualParamType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.createSet(139,140)))) {
              if ((ActualParamType === 136) && (pas.Common.Tok[i.get()].Kind === 170)) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name);
                if (pas.Common.Tok[i.get() - 1].Kind === 57) {
                  AllocElementType = 0}
                 else AllocElementType = pas.Common.Ident[IdentTemp - 1].AllocElementType;
                if (AllocElementType === 0) pas.Messages.ErrorIncompatibleTypes(i.get(),ActualParamType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,false);
              } else pas.Messages.ErrorIncompatibleTypes(i.get(),ActualParamType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,false);
            } else {
              if ((ActualParamType === 136) && (pas.Common.Tok[i.get()].Kind === 170)) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name);
                if (pas.Common.Tok[i.get() - 1].Kind === 57) {
                  AllocElementType = 0}
                 else AllocElementType = pas.Common.Ident[IdentTemp - 1].AllocElementType;
                if (pas.Common.Ident[IdentTemp - 1].DataType in rtl.createSet(139,140)) {
                  pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,ActualParamType)}
                 else if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType !== AllocElementType) {
                  if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType === 0) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements > 0)) {
                    pas.Messages.ErrorIdentifierIncompatibleTypesArray(i.get(),IdentTemp,136)}
                   else if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType !== 147) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements > 0)) pas.Messages.ErrorIncompatibleTypes(i.get(),AllocElementType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType,false);
                };
              } else if ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.createSet(136,137)) && (pas.Common.Tok[i.get()].Kind === 170)) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[i.get()].Name);
                if ((pas.Common.Ident[IdentTemp - 1].DataType === 137) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements !== 0) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements === 0)) if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType === 0) {
                  pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.Ident[IdentTemp - 1].DataType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,false)}
                 else if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType !== 128) pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.Ident[IdentTemp - 1].DataType,pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType,true);
                pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,pas.Common.Ident[IdentTemp - 1].DataType);
              } else {
                if ((ActualParamType === 136) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType === 137)) pas.Messages.ErrorIncompatibleTypes(i.get(),ActualParamType,137,true);
                if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType === 137) {
                  if ((ActualParamType === 134) && (pas.Common.Tok[i.get()].Kind === 173)) {
                    ActualParamType = 137;
                    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
                      pas.Common.DefineStaticString(i.get(),String.fromCharCode(pas.Common.Tok[i.get()].Value));
                      pas.Common.Tok[i.get()].Kind = 174;
                      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tlda <CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Tok[i.get()].StrAddress - 256,4),"");
                      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tlda >CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Tok[i.get()].StrAddress - 256,4),"");
                      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                    };
                  };
                };
                if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType === 145) {
                  if (ActualParamType === 137) {
                    pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tadd #$01","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                    pas.Optimize.asm65("\tadc #$00","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  };
                  if ((ActualParamType === 134) && (pas.Common.Tok[i.get()].Kind === 173)) {
                    ActualParamType = 145;
                    if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
                      pas.Common.DefineStaticString(i.get(),String.fromCharCode(pas.Common.Tok[i.get()].Value));
                      pas.Common.Tok[i.get()].Kind = 174;
                      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tlda <CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.Tok[i.get()].StrAddress - 256) + 1,4),"");
                      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tlda >CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.Tok[i.get()].StrAddress - 256) + 1,4),"");
                      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                    };
                  };
                };
                pas.Common.GetCommonType(i.get(),pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,ActualParamType);
              };
            };
            $mod.ExpandParam(pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType,ActualParamType);
          };
          if ((pas.Common.Ident[IdentIndex - 1].isRecursion === false) && (pas.Common.Ident[IdentIndex - 1].isStdCall === false) && (ParamIndex > 1) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers)) && ((pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements & 0xFFFF) > 1)) if (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].DataType in rtl.createSet(139,140)) {
            if (pas.Common.Ident[IdentIndex - 1].isOverload) {
              svar = $mod.GetLocalName(IdentIndex,"") + "." + $mod.GetOverloadName(IdentIndex)}
             else svar = $mod.GetLocalName(IdentIndex,"");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            j = pas.Parser.RecordSize(pas.Parser.GetIdentIndex(pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements - 1].Field[0].Name),"");
            if (j === 256) {
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tmva:rne (:bp2),y " + svar + ".adr." + pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].Name + ",y+","");
            } else if (j <= 128) {
              pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(j - 1,2),"");
              pas.Optimize.asm65("\tmva:rpl (:bp2),y " + svar + ".adr." + pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].Name + ",y-","");
            } else pas.Optimize.asm65('\t@move ":bp2" #' + svar + ".adr." + pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].Name + " #" + pas.Common.IntToStr(j),"");
          } else if (!(pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType in rtl.createSet(139,140))) {
            if (pas.Common.Ident[IdentIndex - 1].isOverload) {
              svar = $mod.GetLocalName(IdentIndex,"") + "." + $mod.GetOverloadName(IdentIndex)}
             else svar = $mod.GetLocalName(IdentIndex,"");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            if (rtl.lw(pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements >>> 16) !== 0) {
              j = (pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements & 0xFFFF) * rtl.lw(pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements >>> 16)}
             else j = pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].NumAllocElements;
            j = j * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].AllocElementType - 128];
            if (j === 256) {
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tmva:rne (:bp2),y " + svar + ".adr." + pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].Name + ",y+","");
            } else if (j <= 128) {
              pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(j - 1,2),"");
              pas.Optimize.asm65("\tmva:rpl (:bp2),y " + svar + ".adr." + pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].Name + ",y-","");
            } else pas.Optimize.asm65('\t@move ":bp2" #' + svar + ".adr." + pas.Common.Ident[IdentIndex - 1].Param[NumActualParams - 1].Name + " #" + pas.Common.IntToStr(j),"");
          };
          NumActualParams -= 1;
        };
        i.set(Param[0].i_);
        pas.Common.CheckTok(i.get() + 1,55);
        i.set(i.get() + 1);
      };
      NumActualParams = ParamIndex;
      if (pas.Common.pass === pas.Common.TPass.CALL_DETERMINATION) if (pas.Common.Ident[IdentIndex - 1].IsUnresolvedForward) {
        pas.Common.Ident[IdentIndex - 1].updateResolvedForward = true}
       else $mod.AddCallGraphChild(pas.Common.BlockStack[pas.Common.BlockStackTop],pas.Common.Ident[IdentIndex - 1].ProcAsBlock);
      if (pas.Common.Ident[IdentIndex - 1].isOverload) {
        svar = $mod.GetLocalName(IdentIndex,"") + "." + $mod.GetOverloadName(IdentIndex)}
       else svar = $mod.GetLocalName(IdentIndex,"");
      if (pas.Common.RCLIBRARY && pas.Common.Ident[IdentIndex - 1].isExternal && (pas.Common.Ident[IdentIndex - 1].Libraries > 0) && (pas.Common.Ident[IdentIndex - 1].isStdCall === false)) {
        pas.Optimize.asm65("#lib:" + svar,"");
      };
      if ((yes === false) && (pas.Common.Ident[IdentIndex - 1].NumParams > 0)) {
        for (var $l1 = 1, $end = NumActualParams; $l1 <= $end; $l1++) {
          ParamIndex = $l1;
          if (pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name,"");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name + "+1","");
            $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          } else if ((NumActualParams === 1) && (pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType - 128] === 1)) {
            if (pas.Common.Ident[IdentIndex - 1].ObjectIndex > 0) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name,"");
              $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @PARAM?","");
              $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            };
          } else {
            var $tmp = pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType;
            if (($tmp === 128) || ($tmp === 134) || ($tmp === 135) || ($tmp === 131)) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name,"");
              $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            } else if (($tmp === 129) || ($tmp === 132) || ($tmp === 141) || ($tmp === 144) || ($tmp === 136) || ($tmp === 137) || ($tmp === 145)) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name,"");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name + "+1","");
              $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            } else if (($tmp === 130) || ($tmp === 133) || ($tmp === 142) || ($tmp === 143)) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name,"");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name + "+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name + "+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].Name + "+3","");
              $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            } else {
              pas.Messages.Error$1(i.get(),$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.Unassigned,"Unassigned: {0}",pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].Param[ParamIndex - 1].DataType),""]),pas.Messages.IMessage)));
            };
          };
        };
        old_func = pas.Common.run_func;
        pas.Common.run_func = 0;
        if (pas.Common.Ident[IdentIndex - 1].isStdCall === false) if (pas.Common.Ident[IdentIndex - 1].Kind === 5) {
          $mod.StartOptimization(i.get())}
         else $mod.StopOptimization();
        pas.Common.run_func = old_func;
      };
      $mod.Gen();
      if (pas.Common.Ident[IdentIndex - 1].ObjectIndex > 0) {
        if (pas.Common.Tok[old_i].Kind !== 170) {
          pas.Messages.Error$2(old_i,pas.Messages.TErrorCode.IdentifierExpected)}
         else IdentTemp = pas.Parser.GetIdentIndex(pas.System.Copy(pas.Common.Tok[old_i].Name,1,pas.System.Pos(".",pas.Common.Tok[old_i].Name) - 1));
        pas.Optimize.asm65("\tlda " + $mod.GetLocalName(IdentTemp,""),"");
        pas.Optimize.asm65("\tldy " + $mod.GetLocalName(IdentTemp,"") + "+1","");
      };
      if (pas.Common.Ident[IdentIndex - 1].isInline) {
        if ((pas.Common.Ident[IdentIndex - 1].Block > 1) && (pas.Common.Ident[IdentIndex - 1].Block !== pas.Common.BlockStack[pas.Common.BlockStackTop])) for (var $l2 = pas.Common.NumIdent; $l2 >= 1; $l2--) {
          IdentTemp = $l2;
          if ((pas.Common.Ident[IdentTemp - 1].Kind in rtl.createSet(4,5)) && (pas.Common.Ident[IdentTemp - 1].ProcAsBlock === pas.Common.Ident[IdentIndex - 1].Block)) {
            svar = pas.Common.Ident[IdentTemp - 1].Name + "." + svar;
            break;
          };
        };
        if ((pas.Common.BlockStack[pas.Common.BlockStackTop] !== 1) && (pas.Common.Ident[IdentIndex - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) {
          pas.Optimize.asm65("\t.LOCAL " + svar,"")}
         else if ((pas.Common.Ident[IdentIndex - 1].UnitIndex > 1) && (pas.Common.Ident[IdentIndex - 1].UnitIndex !== pas.Common.UnitNameIndex) && pas.Common.Ident[IdentIndex - 1].Section) {
          pas.Optimize.asm65("\t.LOCAL +MAIN." + svar,"")}
         else if (pas.Common.Ident[IdentIndex - 1].UnitIndex > 1) {
          pas.Optimize.asm65("\t.LOCAL +MAIN." + pas.Common.UnitName[pas.Common.Ident[IdentIndex - 1].UnitIndex - 1].Name + "." + svar,"")}
         else pas.Optimize.asm65("\t.LOCAL +MAIN." + svar,"");
        pas.Optimize.asm65("\t" + "m@INLINE","");
        pas.Optimize.asm65("\t.ENDL","");
        pas.Optimize.ResetOpty();
      } else {
        if (ProcVarIndex > 0) {
          if (pas.Common.Ident[ProcVarIndex - 1].isAbsolute && (pas.Common.Ident[ProcVarIndex - 1].NumAllocElements === 0)) {
            pas.Optimize.asm65("\tjsr *+6","");
            pas.Optimize.asm65("\tjmp *+6","");
            pas.Optimize.asm65("\tjmp (" + $mod.GetLocalName(ProcVarIndex,"") + ")","");
          } else pas.Optimize.asm65("\tjsr :TMP","");
        } else if (pas.Common.RCLIBRARY && pas.Common.Ident[IdentIndex - 1].isExternal && (pas.Common.Ident[IdentIndex - 1].Libraries > 0) && pas.Common.Ident[IdentIndex - 1].isStdCall) {
          pas.Optimize.asm65("\tldy <" + svar + ".@INITLIBRARY","");
          pas.Optimize.asm65("\tsty @xmsProc.ini","");
          pas.Optimize.asm65("\tldy >" + svar + ".@INITLIBRARY","");
          pas.Optimize.asm65("\tsty @xmsProc.ini+1","");
          pas.Optimize.asm65("\tldy <" + svar,"");
          pas.Optimize.asm65("\tsty @xmsProc.prc","");
          pas.Optimize.asm65("\tldy >" + svar,"");
          pas.Optimize.asm65("\tsty @xmsProc.prc+1","");
          pas.Optimize.asm65("\tldy #=" + svar,"");
          pas.Optimize.asm65("\tjsr @xmsProc","");
        } else pas.Optimize.asm65("\tjsr " + svar,"");
      };
      if ((pas.Common.Ident[IdentIndex - 1].Kind === 5) && (pas.Common.Ident[IdentIndex - 1].isStdCall === false) && (pas.Common.Ident[IdentIndex - 1].isRecursion === false)) {
        pas.Optimize.asm65("\tinx","");
        var $tmp1 = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128];
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tmva " + svar + ".RESULT :STACKORIGIN,x","");
        } else if ($tmp1 === 2) {
          pas.Optimize.asm65("\tmva " + svar + ".RESULT :STACKORIGIN,x","");
          pas.Optimize.asm65("\tmva " + svar + ".RESULT+1 :STACKORIGIN+STACKWIDTH,x","");
        } else if ($tmp1 === 4) {
          pas.Optimize.asm65("\tmva " + svar + ".RESULT :STACKORIGIN,x","");
          pas.Optimize.asm65("\tmva " + svar + ".RESULT+1 :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tmva " + svar + ".RESULT+2 :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tmva " + svar + ".RESULT+3 :STACKORIGIN+STACKWIDTH*3,x","");
        };
      };
      if (pas.Common.RCLIBRARY && pas.Common.Ident[IdentIndex - 1].isExternal && (pas.Common.Ident[IdentIndex - 1].Libraries > 0) && (pas.Common.Ident[IdentIndex - 1].isStdCall === false)) {
        pas.Optimize.asm65("\tpla","");
        pas.Optimize.asm65("\tsta portb","");
      };
    } finally {
      $ir.free();
    };
  };
  this.CompileFactor = function (i, isZero, ValType, VarType) {
    var Result = 0;
    var IdentTemp = 0;
    var IdentIndex = 0;
    var oldCodeSize = 0;
    var j = 0;
    var ActualParamType = 0;
    var AllocElementType = 0;
    var IndirectionLevel = 0;
    var Kind = 0;
    var oldPass = 0;
    var yes = false;
    var Value = 0;
    var ConstVal = 0;
    var svar = "";
    var lab = "";
    var Param = rtl.arraySetLength(null,pas.Common.TParam,8);
    var $ir = rtl.createIntfRefs();
    try {
      isZero.set(false);
      Result = i;
      ValType.set(0);
      ConstVal = 0;
      IdentIndex = 0;
      var $tmp = pas.Common.Tok[i].Kind;
      if ($tmp === 85) {
        pas.Common.CheckTok(i + 1,54);
        if (pas.Common.Tok[i + 2].Kind in pas.Common.AllTypes) {
          ValType.set(pas.Common.Tok[i + 2].Kind);
          j = i + 2;
        } else {
          oldPass = pas.Common.pass;
          oldCodeSize = pas.Common.CodeSize;
          pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
          j = $mod.CompileExpression(i + 2,ValType,133);
          pas.Common.pass = oldPass;
          pas.Common.CodeSize = oldCodeSize;
        };
        if (ValType.get() in pas.Common.Pointers) {
          IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
          if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) {
            Value = pas.Common.Ident[IdentIndex - 1].NumAllocElements_ - 1}
           else if (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) {
            Value = pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1}
           else Value = pas.Common.HighBound(j,pas.Common.Ident[IdentIndex - 1].AllocElementType);
        } else Value = pas.Common.HighBound(j,ValType.get());
        ValType.set(pas.Common.GetValueType(Value));
        if (pas.Common.Ident[IdentIndex - 1].DataType === 137) {
          $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
          pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentIndex,""),"");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          ValType.set(128);
        } else $mod.Push(Value,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        pas.Common.CheckTok(j + 1,55);
        Result = j + 1;
      } else if ($tmp === 86) {
        pas.Common.CheckTok(i + 1,54);
        oldPass = pas.Common.pass;
        oldCodeSize = pas.Common.CodeSize;
        pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
        i = $mod.CompileExpression(i + 2,ValType,133);
        pas.Common.pass = oldPass;
        pas.Common.CodeSize = oldCodeSize;
        if (ValType.get() in pas.Common.Pointers) {
          Value = 0;
          if (ValType.get() === 137) Value = 1;
        } else Value = pas.Common.LowBound(i,ValType.get());
        ValType.set(pas.Common.GetValueType(Value));
        $mod.Push(Value,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        pas.Common.CheckTok(i + 1,55);
        Result = i + 1;
      } else if ($tmp === 83) {
        Value = 0;
        pas.Common.CheckTok(i + 1,54);
        if (pas.Common.Tok[i + 2].Kind in rtl.unionSet(rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes),rtl.createSet(136))) {
          Value = pas.Common.DataSize[pas.Common.Tok[i + 2].Kind - 128];
          ValType.set(128);
          j = i + 2;
        } else {
          if (pas.Common.Tok[i + 2].Kind !== 170) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
          oldPass = pas.Common.pass;
          oldCodeSize = pas.Common.CodeSize;
          pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
          j = $mod.CompileExpression(i + 2,ValType,133);
          pas.Common.pass = oldPass;
          pas.Common.CodeSize = oldCodeSize;
          Value = pas.Parser.GetSizeOf(i,ValType.get());
          ValType.set(pas.Common.GetValueType(Value));
        };
        $mod.Push(Value,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        pas.Common.CheckTok(j + 1,55);
        Result = j + 1;
      } else if ($tmp === 84) {
        pas.Common.CheckTok(i + 1,54);
        Value = 0;
        if (pas.Common.Tok[i + 2].Kind === 173) {
          $mod.Push(1,0,1,0,0);
          ValType.set(128);
          i += 2;
        } else if (pas.Common.Tok[i + 2].Kind === 174) {
          $mod.Push(pas.Common.Tok[i + 2].StrLength,0,1,0,0);
          ValType.set(128);
          i += 2;
        } else if (pas.Common.Tok[i + 2].Kind === 170) {
          IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (pas.Common.Ident[IdentIndex - 1].Kind in rtl.createSet(3,1)) {
            if (pas.Common.Ident[IdentIndex - 1].DataType === 134) {
              $mod.Push(1,0,1,0,0);
              ValType.set(128);
            } else if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) {
              i = $mod.CompileArrayIndex(i + 2,IdentIndex);
              ValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
              pas.Common.CheckTok(i + 2,51);
              pas.Common.CheckTok(i + 3,170);
              IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
              if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.Tok[i + 3].Name,""]),pas.Messages.IMessage)));
              if ((IdentTemp >>> 16) === 134) {
                $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                $mod.Push(1,0,1,0,0);
              } else {
                if ((IdentTemp >>> 16) !== 137) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.TypeMismatch);
                $mod.Push(0,0,1,0,0);
                $mod.Push(1,11,1,IdentIndex,IdentTemp & 0xffff);
              };
              ValType.set(128);
              i += 1;
            } else if ((pas.Common.Ident[IdentIndex - 1].DataType === 137) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0))) {
              if ((pas.Common.Ident[IdentIndex - 1].DataType === 137) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 134) || ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 137))) {
                if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 137) {
                  i = $mod.CompileArrayIndex(i + 2,IdentIndex);
                  $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
                  svar = $mod.GetLocalName(IdentIndex,"");
                  if (((pas.Common.Ident[IdentIndex - 1].NumAllocElements * 2) > 256) || (pas.Common.Ident[IdentIndex - 1].NumAllocElements in rtl.createSet(0,1)) || (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING)) {
                    pas.Optimize.asm65("\tlda " + svar,"");
                    pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                    pas.Optimize.asm65("\tsta :bp2","");
                    pas.Optimize.asm65("\tlda " + svar + "+1","");
                    pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                    pas.Optimize.asm65("\tsta :bp2+1","");
                    pas.Optimize.asm65("\tldy #$01","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :bp+1","");
                    pas.Optimize.asm65("\tdey","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\ttay","");
                  } else {
                    svar = $mod.GetLocalName(IdentIndex,"adr.");
                    pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
                    pas.Optimize.asm65("\tlda " + svar + "+1,y","");
                    pas.Optimize.asm65("\tsta :bp+1","");
                    pas.Optimize.asm65("\tlda " + svar + ",y","");
                    pas.Optimize.asm65("\ttay","");
                  };
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                  pas.Optimize.asm65("\tlda (:bp),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Common.CheckTok(i + 1,59);
                  pas.Common.CheckTok(i + 2,55);
                  ValType.set(128);
                  Result = i + 2;
                  return Result;
                } else if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) {
                  $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
                  svar = $mod.GetLocalName(IdentIndex,"");
                  if ($mod.TestName(IdentIndex,svar)) {
                    lab = $mod.ExtractName(IdentIndex,svar);
                    if (pas.Common.Ident[pas.Parser.GetIdentIndex(lab) - 1].AllocElementType === 139) {
                      pas.Optimize.asm65("\tlda " + lab,"");
                      pas.Optimize.asm65("\tldy " + lab + "+1","");
                      pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
                      pas.Optimize.asm65("\tscc","");
                      pas.Optimize.asm65("\tiny","");
                    } else {
                      pas.Optimize.asm65("\tlda " + svar,"");
                      pas.Optimize.asm65("\tldy " + svar + "+1","");
                    };
                  } else {
                    pas.Optimize.asm65("\tlda " + svar,"");
                    pas.Optimize.asm65("\tldy " + svar + "+1","");
                  };
                  pas.Optimize.asm65("\tsty :bp+1","");
                  pas.Optimize.asm65("\ttay","");
                  pas.Optimize.asm65("\tlda (:bp),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                } else {
                  $mod.a65(pas.Common.TCode65.addBX,0,1,4,0);
                  pas.Optimize.asm65("\tlda " + $mod.GetLocalName(IdentIndex,"adr."),"");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                };
                ValType.set(128);
              } else {
                if (pas.Common.Tok[i + 3].Kind === 58) {
                  pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.TypeMismatch)}
                 else {
                  Value = pas.Common.Ident[IdentIndex - 1].NumAllocElements;
                  ValType.set(pas.Common.GetValueType(Value));
                  $mod.Push(Value,0,pas.Common.DataSize[ValType.get() - 128],0,0);
                };
              };
            } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.TypeMismatch);
          } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
          i += 2;
        } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
        pas.Common.CheckTok(i + 1,55);
        Result = i + 1;
      } else if ($tmp === 49) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.GetCommonConstType(i,133,ActualParamType,true);
        if (pas.Common.DataSize[ActualParamType - 128] > 2) pas.Messages.WarningLoHi(i);
        pas.Common.CheckTok(i + 1,55);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; Lo(X)","");
        var $tmp1 = ActualParamType;
        if (($tmp1 === 131) || ($tmp1 === 128)) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tand #$0F","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        };
        if (ActualParamType in rtl.createSet(133,130)) {
          ValType.set(129)}
         else ValType.set(128);
        Result = i + 1;
      } else if ($tmp === 50) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.GetCommonConstType(i,133,ActualParamType,true);
        if (pas.Common.DataSize[ActualParamType - 128] > 2) pas.Messages.WarningLoHi(i);
        pas.Common.CheckTok(i + 1,55);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; Hi(X)","");
        var $tmp2 = ActualParamType;
        if (($tmp2 === 131) || ($tmp2 === 128)) {
          pas.Optimize.asm65("\tjsr @hiBYTE","")}
         else if (($tmp2 === 132) || ($tmp2 === 129)) {
          pas.Optimize.asm65("\tjsr @hiWORD","")}
         else if (($tmp2 === 133) || ($tmp2 === 130)) pas.Optimize.asm65("\tjsr @hiCARD","");
        if (ActualParamType in rtl.createSet(133,130)) {
          ValType.set(129)}
         else ValType.set(128);
        Result = i + 1;
      } else if ($tmp === 36) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},128);
        pas.Common.GetCommonConstType(i,133,ActualParamType,true);
        pas.Common.CheckTok(i + 1,55);
        ValType.set(134);
        Result = i + 1;
      } else if ($tmp === 87) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        if (!(ActualParamType in pas.Common.RealTypes)) pas.Messages.ErrorIncompatibleTypes(i + 2,ActualParamType,142,false);
        pas.Common.CheckTok(i + 1,55);
        var $tmp3 = ActualParamType;
        if ($tmp3 === 141) {
          pas.Optimize.asm65("\tjsr @INT_SHORT","")}
         else if ($tmp3 === 142) {
          pas.Optimize.asm65("\tjsr @INT","")}
         else if ($tmp3 === 144) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_INT.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_INT.A+1","");
          pas.Optimize.asm65("\tjsr @F16_INT","");
          pas.Optimize.asm65("\tjsr @F16_I2F","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        } else if ($tmp3 === 143) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :FPMAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FPMAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FPMAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FPMAN3","");
          pas.Optimize.asm65("\tjsr @F2I","");
          pas.Optimize.asm65("\tjsr @I2F","");
          pas.Optimize.asm65("\tlda :FPMAN0","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :FPMAN1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :FPMAN2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :FPMAN3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        };
        ValType.set(ActualParamType);
        Result = i + 1;
      } else if ($tmp === 88) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        if (!(ActualParamType in pas.Common.RealTypes)) pas.Messages.ErrorIncompatibleTypes(i + 2,ActualParamType,142,false);
        pas.Common.CheckTok(i + 1,55);
        var $tmp4 = ActualParamType;
        if ($tmp4 === 141) {
          pas.Optimize.asm65("\tjsr @SHORTREAL_FRAC","")}
         else if ($tmp4 === 142) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @REAL_FRAC.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @REAL_FRAC.A+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @REAL_FRAC.A+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @REAL_FRAC.A+3","");
          pas.Optimize.asm65("\tjsr @REAL_FRAC","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :eax+2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :eax+3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        } else if ($tmp4 === 144) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_FRAC.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_FRAC.A+1","");
          pas.Optimize.asm65("\tjsr @F16_FRAC","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        } else if ($tmp4 === 143) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :FPMAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FPMAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FPMAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FPMAN3","");
          pas.Optimize.asm65("\tjsr @FFRAC","");
          pas.Optimize.asm65("\tlda :FPMAN0","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :FPMAN1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :FPMAN2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :FPMAN3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        };
        ValType.set(ActualParamType);
        Result = i + 1;
      } else if ($tmp === 89) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.CheckTok(i + 1,55);
        if (ActualParamType in pas.Common.IntegerTypes) {
          ValType.set(ActualParamType)}
         else if (ActualParamType in pas.Common.RealTypes) {
          ValType.set(133);
          var $tmp5 = ActualParamType;
          if ($tmp5 === 141) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_TRUNC.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_TRUNC.A+1","");
            pas.Optimize.asm65("\tjsr @SHORTREAL_TRUNC","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            ValType.set(131);
          } else if ($tmp5 === 142) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @REAL_TRUNC.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_TRUNC.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_TRUNC.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_TRUNC.A+3","");
            pas.Optimize.asm65("\tjsr @REAL_TRUNC","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp5 === 144) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_INT.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_INT.A+1","");
            pas.Optimize.asm65("\tjsr @F16_INT","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp5 === 143) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :FPMAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FPMAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FPMAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FPMAN3","");
            pas.Optimize.asm65("\tjsr @F2I","");
            pas.Optimize.asm65("\tlda :FPMAN0","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :FPMAN1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :FPMAN2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :FPMAN3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
        } else pas.Common.GetCommonConstType(i,142,ActualParamType,true);
        Result = i + 1;
      } else if ($tmp === 90) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.CheckTok(i + 1,55);
        if (ActualParamType in pas.Common.IntegerTypes) {
          ValType.set(ActualParamType)}
         else if (ActualParamType in pas.Common.RealTypes) {
          ValType.set(133);
          var $tmp6 = ActualParamType;
          if ($tmp6 === 141) {
            pas.Optimize.asm65("\tjsr @SHORTREAL_ROUND","");
            ValType.set(131);
          } else if ($tmp6 === 142) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @REAL_ROUND.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_ROUND.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_ROUND.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_ROUND.A+3","");
            pas.Optimize.asm65("\tjsr @REAL_ROUND","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp6 === 144) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_ROUND.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_ROUND.A+1","");
            pas.Optimize.asm65("\tjsr @F16_ROUND","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp6 === 143) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :FP2MAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FP2MAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FP2MAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FP2MAN3","");
            pas.Optimize.asm65("\tjsr @FROUND","");
            pas.Optimize.asm65("\tlda :FPMAN0","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :FPMAN1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :FPMAN2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :FPMAN3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
        } else pas.Common.GetCommonConstType(i,142,ActualParamType,true);
        Result = i + 1;
      } else if ($tmp === 91) {
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.GetCommonConstType(i,130,ActualParamType,true);
        pas.Common.CheckTok(i + 1,55);
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tand #$01","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        ValType.set(135);
        Result = i + 1;
      } else if ($tmp === 35) {
        pas.Common.CheckTok(i + 1,54);
        j = i + 2;
        i = $mod.CompileExpression(i + 2,ValType,128);
        if (!(ValType.get() in rtl.unionSet(pas.Common.OrdinalTypes,rtl.createSet(146)))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
        pas.Common.CheckTok(i + 1,55);
        if (ValType.get() in rtl.createSet(134,135,146)) ValType.set(128);
        Result = i + 1;
      } else if (($tmp === 111) || ($tmp === 110)) {
        Kind = pas.Common.Tok[i].Kind;
        pas.Common.CheckTok(i + 1,54);
        i = $mod.CompileExpression(i + 2,ValType,133);
        if (!(ValType.get() in pas.Common.OrdinalTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
        pas.Common.CheckTok(i + 1,55);
        $mod.Push(1,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        if (Kind === 111) {
          $mod.GenerateBinaryOperation(62,ValType.get())}
         else $mod.GenerateBinaryOperation(61,ValType.get());
        Result = i + 1;
      } else if ($tmp === 114) {
        pas.System.Writeln("IN");
        Result = i;
      } else if ($tmp === 170) {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name);
        if (IdentIndex > 0) {
          if ((pas.Common.Ident[IdentIndex - 1].Kind === 2) && (pas.Common.Tok[i + 1].Kind === 54)) {
            j = $mod.CompileExpression(i + 2,ValType,133);
            if (!(ValType.get() in pas.Common.AllTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.TypeMismatch);
            if ((ValType.get() === 136) && !(pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(136,139,140))) {
              ValType.set(pas.Common.Ident[IdentIndex - 1].DataType);
              if (pas.Common.Tok[i + 4].Kind === 56) return j + 2;
            };
            if (ValType.get() in pas.Common.IntegerTypes) {
              var $tmp7 = pas.Common.Ident[IdentIndex - 1].DataType;
              if ($tmp7 === 146) {
                ValType.set(146);
              } else if ($tmp7 === 141) {
                $mod.ExpandParam(132,ValType.get());
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                ValType.set(141);
              } else if ($tmp7 === 142) {
                $mod.ExpandParam(133,ValType.get());
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                ValType.set(142);
              } else if ($tmp7 === 144) {
                $mod.ExpandParam(133,ValType.get());
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @F16_I2F.SV","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
                pas.Optimize.asm65("\tjsr @F16_I2F","");
                pas.Optimize.asm65("\tlda :eax","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda :eax+1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                ValType.set(144);
              } else if ($tmp7 === 143) {
                $mod.ExpandParam(133,ValType.get());
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :FPMAN0","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :FPMAN1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta :FPMAN2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tsta :FPMAN3","");
                pas.Optimize.asm65("\tjsr @I2F","");
                pas.Optimize.asm65("\tlda :FPMAN0","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda :FPMAN1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda :FPMAN2","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tlda :FPMAN3","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                ValType.set(143);
              };
            };
            pas.Common.CheckTok(j + 1,55);
            if ((ValType.get() === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 147)) {
              IdentTemp = pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].NumAllocElements_,4));
              if (pas.Common.Ident[IdentTemp - 1].isNestedFunction === false) pas.Messages.Error$1(j,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.VariableConstantOrFunctionExpectedButProcedureFound,"Variable, constant or function name expected but procedure {0} found.",pas.Common.Ident[IdentIndex - 1].Name,""]),pas.Messages.IMessage)));
              if (pas.Common.Tok[j].Kind !== 170) pas.Messages.Error$2(j,pas.Messages.TErrorCode.VariableExpected);
              svar = $mod.GetLocalName(pas.Parser.GetIdentIndex(pas.Common.Tok[j].Name),"");
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tsta :TMP+1","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tsta :TMP+2","");
              pas.Optimize.asm65("\tlda #$4C","");
              pas.Optimize.asm65("\tsta :TMP","");
              pas.Optimize.asm65("\tjsr :TMP","");
              ValType.set(pas.Common.Ident[IdentTemp - 1].DataType);
            } else if (((ValType.get() === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.unionSet(rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes),rtl.createSet(139,140)))) || ((ValType.get() === 136) && (pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(139,140)))) {
              yes = false;
              if ((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(139,140)) && (pas.Common.Tok[j].Kind === 56)) yes = true;
              if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Tok[j + 2].Kind === 56)) yes = true;
              if ((pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) || (pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(139,140))) {
                if (pas.Common.Tok[j + 2].Kind === 56) j += 1;
                if (pas.Common.Tok[j + 2].Kind !== 51) {
                  yes = false}
                 else if (pas.Common.Tok[j + 2].Kind === 51) {
                  pas.Common.CheckTok(j + 3,170);
                  IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[j + 3].Name);
                  if (IdentTemp < 0) pas.Messages.Error$1(j + 3,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.Tok[j + 3].Name,""]),pas.Messages.IMessage)));
                  ValType.set(IdentTemp >>> 16);
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :bp2","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :bp2+1","");
                  pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2),"");
                  j += 2;
                };
              } else if (pas.Common.Tok[j + 2].Kind === 56) if (ValType.get() === 136) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                ValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                j += 1;
              } else pas.Messages.Error$2(j + 2,pas.Messages.TErrorCode.IllegalQualifier);
              if (yes) {
                var $tmp8 = pas.Common.DataSize[ValType.get() - 128];
                if ($tmp8 === 1) {
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                } else if ($tmp8 === 2) {
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                } else if ($tmp8 === 4) {
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                };
              };
            };
            $mod.ExpandParam(pas.Common.Ident[IdentIndex - 1].DataType,ValType.get());
            Result = j + 1;
          } else if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 147)) {
            IdentTemp = pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].NumAllocElements_,4));
            if (pas.Common.Tok[i + 1].Kind === 58) {
              i = $mod.CompileArrayIndex(i,IdentIndex);
              pas.Common.CheckTok(i + 1,59);
              i += 1;
            };
            if (pas.Common.Tok[i + 1].Kind === 54) {
              $mod.CompileActualParameters({get: function () {
                  return i;
                }, set: function (v) {
                  i = v;
                }},IdentTemp,IdentIndex)}
             else {
              if (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) {
                $mod.Push(0,4,pas.Common.DataSize[8],IdentIndex,0)}
               else $mod.Push(0,1,pas.Common.DataSize[8],IdentIndex,0);
            };
            ValType.set(136);
            Result = i;
          } else if (pas.Common.Ident[IdentIndex - 1].Kind === 4) {
            pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.VariableConstantOrFunctionExpectedButProcedureFound,"Variable, constant or function name expected but procedure {0} found.",pas.Common.Ident[IdentIndex - 1].Name,""]),pas.Messages.IMessage)))}
           else if (pas.Common.Ident[IdentIndex - 1].Kind === 5) {
            Param = $mod.NumActualParameters(i,IdentIndex,{get: function () {
                return j;
              }, set: function (v) {
                j = v;
              }});
            IdentTemp = $mod.GetIdentProc(pas.Common.Ident[IdentIndex - 1].Name,IdentIndex,pas.Common.TParamList$clone(Param),j);
            if (IdentTemp === 0) if (pas.Common.Ident[IdentIndex - 1].isOverload) {
              if (pas.Common.Ident[IdentIndex - 1].NumParams !== j) pas.Messages.Error$1(i,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.Ident[IdentIndex - 1].Name,""]),pas.Messages.IMessage)));
              pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.CantDetermine,IdentIndex);
            } else pas.Messages.Error$1(i,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.Ident[IdentIndex - 1].Name,""]),pas.Messages.IMessage)));
            IdentIndex = IdentTemp;
            if (pas.Common.Ident[IdentIndex - 1].isStdCall === false) {
              $mod.StartOptimization(i)}
             else if (pas.Common.optimize.use === false) $mod.StartOptimization(i);
            pas.Common.run_func += 1;
            $mod.CompileActualParameters({get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }},IdentIndex,0);
            ValType.set(pas.Common.Ident[IdentIndex - 1].DataType);
            pas.Common.run_func -= 1;
            Result = i;
          } else {
            if (pas.Common.Tok[i + 1].Kind === 56) {
              if ((pas.Common.Ident[IdentIndex - 1].Kind !== 3) || !(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
               else {
                if ((pas.Common.Ident[IdentIndex - 1].DataType === 137) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) {
                  ValType.set(137)}
                 else ValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                if ((ValType.get() === 0) && (pas.Common.Ident[IdentIndex - 1].DataType === 136)) {
                  ValType.set(136);
                  $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0);
                } else if (ValType.get() in rtl.createSet(139,140)) {
                  if (pas.Common.Tok[i + 2].Kind === 51) {
                    pas.Common.CheckTok(i + 3,170);
                    IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
                    if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.Tok[i + 3].Name,""]),pas.Messages.IMessage)));
                    ValType.set(IdentTemp >>> 16);
                    i += 2;
                    if ((pas.Common.Tok[i + 1].Kind === 170) && (pas.Common.Tok[i + 2].Kind === 58)) {
                      i += 1;
                      ValType.set(pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i].Name) - 1].AllocElementType);
                      i = $mod.CompileArrayIndex(i,pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i].Name));
                      $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,10,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff);
                    } else if (ValType.get() === 137) {
                      $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,5,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff)}
                     else $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,2,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff);
                  } else $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0);
                } else if (pas.Common.Ident[IdentIndex - 1].DataType === 137) {
                  $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,1,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0)}
                 else $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,2,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0);
                Result = i + 1;
              }}
             else if (pas.Common.Tok[i + 1].Kind === 58) {
              if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
               else {
                i = $mod.CompileArrayIndex(i,IdentIndex);
                ValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                if (pas.Common.Tok[i + 2].Kind === 56) {
                  $mod.Push(0,10,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0);
                  i += 1;
                } else if ((pas.Common.Tok[i + 2].Kind === 51) && (ValType.get() in rtl.createSet(139,140))) {
                  pas.Common.CheckTok(i + 1,59);
                  pas.Common.CheckTok(i + 3,170);
                  IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
                  if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.Tok[i + 3].Name,""]),pas.Messages.IMessage)));
                  ValType.set(IdentTemp >>> 16);
                  i += 2;
                  if ((pas.Common.Tok[i + 1].Kind === 170) && (pas.Common.Tok[i + 2].Kind === 58)) {
                    i += 1;
                    ValType.set(pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i].Name) - 1].AllocElementType);
                    IndirectionLevel = 10;
                    if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) {
                      IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i].Name);
                      if (IdentTemp < 0) pas.Messages.Error$1(i,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.Tok[i].Name,""]),pas.Messages.IMessage)));
                      ValType.set(pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i].Name) - 1].AllocElementType);
                      IndirectionLevel = 11;
                    };
                    i = $mod.CompileArrayIndex(i,pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i].Name));
                    $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,IndirectionLevel,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff);
                  } else if (ValType.get() === 137) {
                    $mod.Push(0,12,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff)}
                   else $mod.Push(0,6,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff);
                } else if ((pas.Common.Tok[i + 2].Kind === 58) && (ValType.get() === 137)) {
                  pas.Messages.Error$1(i,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnderConstruction,"Under construction","",""]),pas.Messages.IMessage)));
                } else {
                  IdentTemp = 0;
                  IndirectionLevel = 4;
                  if (pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) > 0) {
                    IdentTemp = pas.Parser.GetIdentIndex(pas.System.Copy(pas.Common.Ident[IdentIndex - 1].Name,1,pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) - 1));
                    if ((pas.Common.Ident[IdentTemp - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType in rtl.createSet(139,140))) {
                      svar = pas.System.Copy(pas.Common.Ident[IdentIndex - 1].Name,pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) + 1,pas.Common.Ident[IdentIndex - 1].Name.length);
                      IdentIndex = IdentTemp;
                      IdentTemp = pas.Parser.RecordSize(IdentIndex,svar);
                      if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",svar,""]),pas.Messages.IMessage)));
                      IndirectionLevel = 10;
                    };
                  };
                  if (ValType.get() in rtl.createSet(139,140)) ValType.set(136);
                  $mod.Push(pas.Common.Ident[IdentIndex - 1].Value,IndirectionLevel,pas.Common.DataSize[ValType.get() - 128],IdentIndex,IdentTemp & 0xffff);
                  pas.Common.CheckTok(i + 1,59);
                };
                Result = i + 1;
              }}
             else {
              j = i;
              pas.Common.isError = false;
              pas.Common.isConst = true;
              if (pas.Common.Ident[IdentIndex - 1].isVolatile) {
                pas.Optimize.asm65("?volatile:","");
                pas.Optimize.ResetOpty();
              };
              i = pas.Parser.CompileConstTerm(i,{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  ConstVal = v;
                }},ValType);
              if (pas.Common.isError) {
                i = j;
                if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) {
                  ValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                  if (ValType.get() === 134) {
                    var $tmp9 = pas.Common.Ident[IdentIndex - 1].DataType;
                    if ($tmp9 === 136) {
                      ValType.set(145)}
                     else if ($tmp9 === 137) ValType.set(137);
                  };
                  if (ValType.get() === 0) ValType.set(pas.Common.Ident[IdentIndex - 1].DataType);
                } else ValType.set(pas.Common.Ident[IdentIndex - 1].DataType);
                if ((ValType.get() === 146) && (pas.Common.Ident[IdentIndex - 1].DataType === 146)) ValType.set(pas.Common.Ident[IdentIndex - 1].AllocElementType);
                if ((pas.Common.Ident[IdentIndex - 1].Kind === 1) && (ValType.get() in pas.Common.Pointers)) {
                  ConstVal = pas.Common.Ident[IdentIndex - 1].Value - 256}
                 else ConstVal = pas.Common.Ident[IdentIndex - 1].Value;
                if ((ValType.get() in pas.Common.IntegerTypes) && (VarType in rtl.createSet(143,144))) ConstVal = pas.Numbers.FromInt64(ConstVal);
                if (VarType === 144) {
                  ConstVal = pas.Numbers.CastToHalfSingle(ConstVal);
                };
                if (VarType === 143) {
                  ConstVal = pas.Numbers.CastToSingle(ConstVal);
                };
                if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].IdType === 160)) {
                  $mod.Push(ConstVal,5,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0)}
                 else if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) {
                  $mod.Push(ConstVal,2,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0)}
                 else $mod.Push(ConstVal,(pas.Common.Ident[IdentIndex - 1].Kind === 3) + 0,pas.Common.DataSize[ValType.get() - 128],IdentIndex,0);
                if (pas.Common.BlockStackTop === 1) if (!(pas.Common.Ident[IdentIndex - 1].isInit || pas.Common.Ident[IdentIndex - 1].isInitialized || pas.Common.Ident[IdentIndex - 1].LoopVariable)) pas.Messages.WarningVariableNotInitialized(i,IdentIndex);
              } else {
                if ((ValType.get() in rtl.createSet(143,144)) || (VarType in rtl.createSet(143,144))) {
                  if (ValType.get() in pas.Common.IntegerTypes) ConstVal = pas.Numbers.FromInt64(ConstVal);
                  if ((VarType === 144) || (ValType.get() === 144)) {
                    ConstVal = pas.Numbers.CastToHalfSingle(ConstVal);
                    ValType.set(144);
                  } else {
                    ConstVal = pas.Numbers.CastToSingle(ConstVal);
                    ValType.set(143);
                  };
                };
                $mod.Push(ConstVal,0,pas.Common.DataSize[ValType.get() - 128],0,0);
              };
              pas.Common.isConst = false;
              pas.Common.isError = false;
              Result = i;
            };
          }}
         else pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
      } else if ($tmp === 57) {
        Result = $mod.CompileAddress(i - 1,ValType,{get: function () {
            return AllocElementType;
          }, set: function (v) {
            AllocElementType = v;
          }},false)}
       else if ($tmp === 171) {
        ConstVal = pas.Common.Tok[i].Value;
        ValType.set(pas.Common.GetValueType(ConstVal));
        if (VarType in pas.Common.RealTypes) {
          ConstVal = pas.Numbers.FromInt64(ConstVal);
          if (VarType === 144) {
            ConstVal = pas.Numbers.CastToHalfSingle(ConstVal)}
           else if (VarType === 143) ConstVal = pas.Numbers.CastToSingle(ConstVal);
          ValType.set(VarType);
        };
        $mod.Push(ConstVal,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        isZero.set(ConstVal === 0);
        Result = i;
      } else if ($tmp === 172) {
        ConstVal = pas.Numbers.FromSingle(pas.Common.Tok[i].FracValue);
        ValType.set(142);
        if (VarType in pas.Common.RealTypes) {
          var $tmp10 = VarType;
          if ($tmp10 === 143) {
            ConstVal = pas.Numbers.CastToSingle(ConstVal)}
           else if ($tmp10 === 144) {
            ConstVal = pas.Numbers.CastToHalfSingle(ConstVal)}
           else {
            ConstVal = pas.Numbers.CastToReal(ConstVal);
          };
          ValType.set(VarType);
        };
        $mod.Push(ConstVal,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        isZero.set(ConstVal === 0);
        Result = i;
      } else if ($tmp === 174) {
        $mod.Push((pas.Common.Tok[i].StrAddress - 256) + pas.Common.CODEORIGIN_BASE,0,pas.Common.DataSize[9],0,0);
        ValType.set(137);
        Result = i;
      } else if ($tmp === 173) {
        $mod.Push(pas.Common.Tok[i].Value,0,pas.Common.DataSize[6],0,0);
        ValType.set(134);
        Result = i;
      } else if ($tmp === 54) {
        j = $mod.CompileExpression(i + 1,ValType,VarType);
        pas.Common.CheckTok(j + 1,55);
        Result = j + 1;
      } else if ($tmp === 72) {
        Result = $mod.CompileFactor(i + 1,isZero,ValType,133);
        pas.Common.CheckOperator(i,72,ValType.get(),0);
        $mod.GenerateUnaryOperation(72,ValType.get());
      } else if ($tmp === 141) {
        if (pas.Common.Tok[i + 1].Kind !== 54) pas.Messages.Error$1(i,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierNotAllowed,"Type identifier not allowed here","",""]),pas.Messages.IMessage)));
        j = $mod.CompileExpression(i + 2,ValType,133);
        if (pas.Common.Tok[j + 1].Kind === 56) {
          if (ValType.get() === 136) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            j += 1;
          } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
        } else {
          if (ValType.get() in rtl.unionSet(pas.Common.IntegerTypes,pas.Common.RealTypes)) {
            $mod.ExpandParam(132,ValType.get());
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          } else pas.Messages.Error$1(i + 2,$ir.ref(13,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "{0}" to "{1}".',pas.Common.InfoAboutToken(ValType.get()),pas.Common.InfoAboutToken(141)]),pas.Messages.IMessage)));
        };
        pas.Common.CheckTok(j + 1,55);
        ValType.set(141);
        Result = j + 1;
      } else if ($tmp === 142) {
        if (pas.Common.Tok[i + 1].Kind !== 54) pas.Messages.Error$1(i,$ir.ref(14,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierNotAllowed,"Type identifier not allowed here.","",""]),pas.Messages.IMessage)));
        j = $mod.CompileExpression(i + 2,ValType,133);
        if (pas.Common.Tok[j + 1].Kind === 56) {
          if (ValType.get() === 136) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            j += 1;
          } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
        } else {
          if (ValType.get() in rtl.unionSet(pas.Common.IntegerTypes,pas.Common.RealTypes)) {
            $mod.ExpandParam(133,ValType.get());
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          } else pas.Messages.Error$1(i + 2,$ir.ref(15,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "{0}" to "{1}".',pas.Common.InfoAboutToken(ValType.get()),pas.Common.InfoAboutToken(142)]),pas.Messages.IMessage)));
        };
        pas.Common.CheckTok(j + 1,55);
        ValType.set(142);
        Result = j + 1;
      } else if ($tmp === 144) {
        if (pas.Common.Tok[i + 1].Kind !== 54) pas.Messages.Error$1(i,$ir.ref(16,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierNotAllowed,"Type identifier not allowed here","",""]),pas.Messages.IMessage)));
        j = $mod.CompileExpression(i + 2,ValType,133);
        if (pas.Common.Tok[j + 1].Kind === 56) {
          if (ValType.get() === 136) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            j += 1;
          } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
        } else {
          if (ValType.get() in rtl.createSet(141,142)) pas.Messages.Error$1(i + 2,$ir.ref(17,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "{0}" to "{1}".',pas.Common.InfoAboutToken(ValType.get()),pas.Common.InfoAboutToken(144)]),pas.Messages.IMessage)));
          if (ValType.get() in rtl.unionSet(pas.Common.IntegerTypes,pas.Common.RealTypes)) {
            $mod.ExpandParam(133,ValType.get());
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_I2F.SV","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
            pas.Optimize.asm65("\tjsr @F16_I2F","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          } else pas.Messages.Error(i + 2,'Illegal type conversion: "' + pas.Common.InfoAboutToken(ValType.get()) + '" to "' + pas.Common.InfoAboutToken(144) + '"');
        };
        pas.Common.CheckTok(j + 1,55);
        ValType.set(144);
        Result = j + 1;
      } else if ($tmp === 143) {
        if (pas.Common.Tok[i + 1].Kind !== 54) pas.Messages.Error(i,"type identifier not allowed here");
        j = i + 2;
        if ($mod.SafeCompileConstExpression({get: function () {
            return j;
          }, set: function (v) {
            j = v;
          }},{get: function () {
            return ConstVal;
          }, set: function (v) {
            ConstVal = v;
          }},ValType,143,false,true)) {
          if (!(ValType.get() in pas.Common.RealTypes)) ConstVal = pas.Numbers.FromInt64(ConstVal);
          ConstVal = pas.Numbers.CastToSingle(ConstVal);
          ValType.set(143);
          $mod.Push(ConstVal,0,pas.Common.DataSize[ValType.get() - 128],0,0);
        } else {
          j = $mod.CompileExpression(i + 2,ValType,133);
          if (pas.Common.Tok[j + 1].Kind === 56) {
            if (ValType.get() === 136) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
              j += 1;
            } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
          } else {
            if (ValType.get() in rtl.createSet(141,142)) pas.Messages.Error(i + 2,'Illegal type conversion: "' + pas.Common.InfoAboutToken(ValType.get()) + '" to "' + pas.Common.InfoAboutToken(143) + '"');
            if (ValType.get() in rtl.unionSet(pas.Common.IntegerTypes,pas.Common.RealTypes)) {
              $mod.ExpandParam(133,ValType.get());
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :FPMAN0","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :FPMAN1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta :FPMAN2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta :FPMAN3","");
              pas.Optimize.asm65("\tjsr @I2F","");
              pas.Optimize.asm65("\tlda :FPMAN0","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :FPMAN1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :FPMAN2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :FPMAN3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            } else pas.Messages.Error(i + 2,'Illegal type conversion: "' + pas.Common.InfoAboutToken(ValType.get()) + '" to "' + pas.Common.InfoAboutToken(143) + '"');
          };
        };
        pas.Common.CheckTok(j + 1,55);
        ValType.set(143);
        Result = j + 1;
      } else if (($tmp === 133) || ($tmp === 130) || ($tmp === 132) || ($tmp === 129) || ($tmp === 134) || ($tmp === 145) || ($tmp === 131) || ($tmp === 128) || ($tmp === 135) || ($tmp === 136) || ($tmp === 137)) {
        if (pas.Common.Tok[i + 1].Kind !== 54) pas.Messages.Error(i,"type identifier not allowed here");
        j = $mod.CompileExpression(i + 2,ValType,pas.Common.Tok[i].Kind);
        if ((ValType.get() in pas.Common.Pointers) && (pas.Common.Tok[i + 2].Kind === 170) && (pas.Common.Tok[i + 3].Kind !== 58)) {
          IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
          if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 139)) if (((pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements in rtl.createSet(0,1))) || (pas.Common.Ident[IdentIndex - 1].DataType === 137)) {}
          else pas.Messages.ErrorIdentifierIllegalTypeConversion(i + 2,IdentIndex,pas.Common.Tok[i].Kind);
        };
        if (pas.Common.Tok[j + 1].Kind === 56) if (ValType.get() === 136) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :bp2+1","");
          pas.Optimize.asm65("\tldy #$00","");
          var $tmp11 = pas.Common.DataSize[pas.Common.Tok[i].Kind - 128];
          if ($tmp11 === 1) {
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          } else if ($tmp11 === 2) {
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          } else if ($tmp11 === 4) {
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
          j += 1;
        } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
        if (!(ValType.get() in pas.Common.AllTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.TypeMismatch);
        $mod.ExpandParam(pas.Common.Tok[i].Kind,ValType.get());
        pas.Common.CheckTok(j + 1,55);
        ValType.set(pas.Common.Tok[i].Kind);
        if (pas.Common.Tok[j + 2].Kind === 56) if (ValType.get() === 145) {
          ValType.set(134);
          j += 1;
        } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
        Result = j + 1;
      } else {
        pas.Messages.Error$2(i,pas.Messages.TErrorCode.IdNumExpExpected);
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.ResizeType = function (ValType) {
    if (ValType.get() in rtl.createSet(128,129,131,132)) ValType.set(ValType.get() + 1);
  };
  this.RealTypeConversion = function (ValType, RightValType, Kind) {
    if (((ValType.get() === 143) || (Kind === 143)) && (RightValType.get() in pas.Common.IntegerTypes)) {
      $mod.ExpandParam(133,RightValType.get());
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta :FPMAN0","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta :FPMAN1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta :FPMAN2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta :FPMAN3","");
      pas.Optimize.asm65("\tjsr @I2F","");
      pas.Optimize.asm65("\tlda :FPMAN0","");
      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      pas.Optimize.asm65("\tlda :FPMAN1","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tlda :FPMAN2","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tlda :FPMAN3","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
      if ((ValType.get() !== 143) && (Kind === 143)) {
        RightValType.set(Kind)}
       else RightValType.set(ValType.get());
    };
    if ((ValType.get() in pas.Common.IntegerTypes) && ((RightValType.get() === 143) || (Kind === 143))) {
      $mod.ExpandParam_m1(133,ValType.get());
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tsta :FPMAN0","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta :FPMAN1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta :FPMAN2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta :FPMAN3","");
      pas.Optimize.asm65("\tjsr @I2F","");
      pas.Optimize.asm65("\tlda :FPMAN0","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tlda :FPMAN1","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tlda :FPMAN2","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tlda :FPMAN3","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
      if ((RightValType.get() !== 143) && (Kind === 143)) {
        ValType.set(Kind)}
       else ValType.set(RightValType.get());
    };
    if (((ValType.get() === 144) || (Kind === 144)) && (RightValType.get() in pas.Common.IntegerTypes)) {
      $mod.ExpandParam(133,RightValType.get());
      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
      pas.Optimize.asm65("\tjsr @F16_I2F","");
      pas.Optimize.asm65("\tlda :eax","");
      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      pas.Optimize.asm65("\tlda :eax+1","");
      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
      if ((ValType.get() !== 144) && (Kind === 144)) {
        RightValType.set(Kind)}
       else RightValType.set(ValType.get());
    };
    if ((ValType.get() in pas.Common.IntegerTypes) && ((RightValType.get() === 144) || (Kind === 144))) {
      $mod.ExpandParam_m1(133,ValType.get());
      pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
      pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
      pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
      pas.Optimize.asm65("\tjsr @F16_I2F","");
      pas.Optimize.asm65("\tlda :eax","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
      pas.Optimize.asm65("\tlda :eax+1","");
      pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
      if ((RightValType.get() !== 144) && (Kind === 144)) {
        ValType.set(Kind)}
       else ValType.set(RightValType.get());
    };
    if (((ValType.get() in rtl.createSet(142,141)) || (Kind in rtl.createSet(142,141))) && (RightValType.get() in pas.Common.IntegerTypes)) {
      $mod.ExpandParam(133,RightValType.get());
      pas.Optimize.asm65("\tjsr @expandToREAL","");
      if (!(ValType.get() in rtl.createSet(142,141)) && (Kind in rtl.createSet(142,141))) {
        RightValType.set(Kind)}
       else RightValType.set(ValType.get());
    };
    if ((ValType.get() in pas.Common.IntegerTypes) && ((RightValType.get() in rtl.createSet(142,141)) || (Kind in rtl.createSet(142,141)))) {
      $mod.ExpandParam_m1(133,ValType.get());
      pas.Optimize.asm65("\tjsr @expandToREAL1","");
      if (!(RightValType.get() in rtl.createSet(142,141)) && (Kind in rtl.createSet(142,141))) {
        ValType.set(Kind)}
       else ValType.set(RightValType.get());
    };
  };
  this.CompileTerm = function (i, ValType, VarType) {
    var Result = 0;
    var j = 0;
    var k = 0;
    var oldCodeSize = 0;
    var RightValType = 0;
    var CastRealType = 0;
    var oldPass = 0;
    var isZero = false;
    oldPass = pas.Common.pass;
    oldCodeSize = pas.Common.CodeSize;
    pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
    j = $mod.CompileFactor(i,{get: function () {
        return isZero;
      }, set: function (v) {
        isZero = v;
      }},ValType,VarType);
    pas.Common.pass = oldPass;
    pas.Common.CodeSize = oldCodeSize;
    if (pas.Common.Tok[j + 1].Kind in rtl.createSet(66,65,67,68,71)) {
      j = $mod.CompileFactor(i,{get: function () {
          return isZero;
        }, set: function (v) {
          isZero = v;
        }},ValType,133)}
     else {
      if (ValType.get() in pas.Common.RealTypes) VarType = ValType.get();
      j = $mod.CompileFactor(i,{get: function () {
          return isZero;
        }, set: function (v) {
          isZero = v;
        }},ValType,VarType);
    };
    while (pas.Common.Tok[j + 1].Kind in rtl.createSet(63,64,66,65,67,68,71)) {
      if (ValType.get() in pas.Common.RealTypes) VarType = ValType.get();
      if (pas.Common.Tok[j + 1].Kind in rtl.createSet(63,64)) {
        k = $mod.CompileFactor(j + 2,{get: function () {
            return isZero;
          }, set: function (v) {
            isZero = v;
          }},{get: function () {
            return RightValType;
          }, set: function (v) {
            RightValType = v;
          }},VarType)}
       else k = $mod.CompileFactor(j + 2,{get: function () {
          return isZero;
        }, set: function (v) {
          isZero = v;
        }},{get: function () {
          return RightValType;
        }, set: function (v) {
          RightValType = v;
        }},133);
      if ((pas.Common.Tok[j + 1].Kind in rtl.createSet(66,65)) && isZero) pas.Messages.Error(j + 1,"Division by zero");
      if (((ValType.get() in rtl.createSet(144,143)) && (RightValType in rtl.createSet(141,142))) || ((ValType.get() in rtl.createSet(141,142)) && (RightValType in rtl.createSet(144,143)))) pas.Messages.Error(j + 2,'Illegal type conversion: "' + pas.Common.InfoAboutToken(ValType.get()) + '" to "' + pas.Common.InfoAboutToken(RightValType) + '"');
      if (VarType in pas.Common.RealTypes) {
        if ((ValType.get() === VarType) && (RightValType in pas.Common.RealTypes)) RightValType = VarType;
        if ((ValType.get() in pas.Common.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
      };
      if (VarType in pas.Common.RealTypes) {
        CastRealType = VarType}
       else CastRealType = 142;
      $mod.RealTypeConversion(ValType,{get: function () {
          return RightValType;
        }, set: function (v) {
          RightValType = v;
        }},((pas.Common.Tok[j + 1].Kind === 64) + 0) * CastRealType);
      ValType.set(pas.Common.GetCommonType(j + 1,ValType.get(),RightValType));
      pas.Common.CheckOperator(i,pas.Common.Tok[j + 1].Kind,ValType.get(),RightValType);
      if (!(pas.Common.Tok[j + 1].Kind in rtl.createSet(67,68))) $mod.ExpandExpression(ValType,RightValType,0,false);
      if (pas.Common.Tok[j + 1].Kind === 63) if ((ValType.get() in pas.Common.IntegerTypes) && (VarType in pas.Common.IntegerTypes)) if (pas.Common.DataSize[ValType.get() - 128] > pas.Common.DataSize[VarType - 128]) ValType.set(VarType);
      $mod.GenerateBinaryOperation(pas.Common.Tok[j + 1].Kind,ValType.get());
      var $tmp = pas.Common.Tok[j + 1].Kind;
      if ($tmp === 63) {
        $mod.ResizeType(ValType);
        $mod.ExpandExpression({get: function () {
            return VarType;
          }, set: function (v) {
            VarType = v;
          }},0,0,false);
      } else if ($tmp === 68) {
        if ((ValType.get() in pas.Common.SignedOrdinalTypes) && (pas.Common.DataSize[ValType.get() - 128] > 1)) {
          $mod.ResizeType(ValType);
          $mod.ResizeType(ValType);
        }}
       else if ($tmp === 67) {
        $mod.ResizeType(ValType);
        $mod.ResizeType(ValType);
      };
      j = k;
    };
    Result = j;
    return Result;
  };
  this.CompileSimpleExpression = function (i, ValType, VarType) {
    var Result = 0;
    var j = 0;
    var k = 0;
    var ConstVal = 0;
    var RightValType = 0;
    if (pas.Common.Tok[i].Kind in rtl.createSet(61,62)) {
      j = i + 1}
     else j = i;
    if ($mod.SafeCompileConstExpression({get: function () {
        return j;
      }, set: function (v) {
        j = v;
      }},{get: function () {
        return ConstVal;
      }, set: function (v) {
        ConstVal = v;
      }},ValType,VarType,false,true)) {
      if ((ValType.get() in pas.Common.IntegerTypes) && (VarType in pas.Common.RealTypes)) {
        ConstVal = pas.Numbers.FromInt64(ConstVal);
        ValType.set(VarType);
      };
      if (VarType in pas.Common.RealTypes) ValType.set(VarType);
      if (pas.Common.Tok[i].Kind === 62) ConstVal = pas.Numbers.Negate(ValType,ConstVal);
      if (ValType.get() === 143) {
        ConstVal = pas.Numbers.CastToSingle(ConstVal);
      };
      if (ValType.get() === 144) {
        ConstVal = pas.Numbers.CastToHalfSingle(ConstVal);
      };
      $mod.Push(ConstVal,0,pas.Common.DataSize[ValType.get() - 128],0,0);
    } else {
      j = $mod.CompileTerm(j,ValType,VarType);
      if (pas.Common.Tok[i].Kind === 62) {
        $mod.GenerateUnaryOperation(62,ValType.get());
        if (ValType.get() in pas.Common.UnsignedOrdinalTypes) if (ValType.get() === 128) {
          ValType.set(132)}
         else ValType.set(133);
      };
    };
    while (pas.Common.Tok[j + 1].Kind in rtl.createSet(61,62,69,70)) {
      if (ValType.get() in pas.Common.RealTypes) VarType = ValType.get();
      k = $mod.CompileTerm(j + 2,{get: function () {
          return RightValType;
        }, set: function (v) {
          RightValType = v;
        }},VarType);
      if (((ValType.get() in rtl.createSet(144,143)) && (RightValType in rtl.createSet(141,142))) || ((ValType.get() in rtl.createSet(141,142)) && (RightValType in rtl.createSet(144,143)))) pas.Messages.Error(j + 2,'Illegal type conversion: "' + pas.Common.InfoAboutToken(ValType.get()) + '" to "' + pas.Common.InfoAboutToken(RightValType) + '"');
      if (VarType in pas.Common.RealTypes) {
        if ((ValType.get() === VarType) && (RightValType in pas.Common.RealTypes)) RightValType = VarType;
        if ((ValType.get() in pas.Common.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
      };
      $mod.RealTypeConversion(ValType,{get: function () {
          return RightValType;
        }, set: function (v) {
          RightValType = v;
        }},0);
      if ((ValType.get() === 136) && (RightValType in pas.Common.IntegerTypes)) {
        $mod.ExpandParam(129,RightValType);
        RightValType = 136;
      };
      if ((RightValType === 136) && (ValType.get() in pas.Common.IntegerTypes)) {
        $mod.ExpandParam_m1(129,ValType.get());
        ValType.set(136);
      };
      ValType.set(pas.Common.GetCommonType(j + 1,ValType.get(),RightValType));
      pas.Common.CheckOperator(i,pas.Common.Tok[j + 1].Kind,ValType.get(),RightValType);
      if (pas.Common.Tok[j + 1].Kind in rtl.createSet(61,62)) {
        if ((pas.Common.Tok[j + 1].Kind === 62) && (RightValType in pas.Common.UnsignedOrdinalTypes) && (VarType in rtl.unionSet(pas.Common.SignedOrdinalTypes,rtl.createSet(135,142,144,143)))) {
          if ((ValType.get() === VarType) && (RightValType === VarType)) {}
          else $mod.ExpandExpression(ValType,RightValType,VarType,true);
        } else $mod.ExpandExpression(ValType,RightValType,VarType,false);
      } else $mod.ExpandExpression(ValType,RightValType,0,false);
      if ((ValType.get() in pas.Common.IntegerTypes) && (VarType in pas.Common.IntegerTypes)) if (pas.Common.DataSize[ValType.get() - 128] > pas.Common.DataSize[VarType - 128]) ValType.set(VarType);
      $mod.GenerateBinaryOperation(pas.Common.Tok[j + 1].Kind,ValType.get());
      j = k;
    };
    Result = j;
    return Result;
  };
  this.CompileExpression = function (i, ValType, VarType) {
    var Result = 0;
    var j = 0;
    var k = 0;
    var RightValType = 0;
    var ConstValType = 0;
    var isZero = 0;
    var sLeft = false;
    var sRight = false;
    var cRight = false;
    var yes = false;
    var ConstVal = 0;
    var ConstValRight = 0;
    ConstVal = 0;
    isZero = 133;
    cRight = false;
    if ($mod.SafeCompileConstExpression({get: function () {
        return i;
      }, set: function (v) {
        i = v;
      }},{get: function () {
        return ConstVal;
      }, set: function (v) {
        ConstVal = v;
      }},ValType,VarType,false,true)) {
      if ((ValType.get() in pas.Common.IntegerTypes) && (VarType in pas.Common.RealTypes)) {
        ConstVal = pas.Numbers.FromInt64(ConstVal);
        ValType.set(VarType);
      };
      if (VarType in pas.Common.RealTypes) ValType.set(VarType);
      if (ValType.get() === 144) {
        ConstVal = pas.Numbers.CastToHalfSingle(ConstVal);
        ValType.set(144);
      };
      if (ValType.get() === 143) {
        ConstVal = pas.Numbers.CastToSingle(ConstVal);
        ValType.set(143);
      };
      $mod.Push(ConstVal,0,pas.Common.DataSize[ValType.get() - 128],0,0);
      Result = i;
      return Result;
    };
    ConstValRight = 0;
    sLeft = false;
    sRight = false;
    i = $mod.CompileSimpleExpression(i,ValType,VarType);
    if ((pas.Common.Tok[i].Kind === 174) || (ValType.get() === 137)) {
      sLeft = true}
     else if ((ValType.get() in pas.Common.Pointers) && (pas.Common.Tok[i].Kind === 170)) if ((pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name) - 1].AllocElementType === 134) && (pas.Parser.Elements(pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name)) > 0)) sLeft = true;
    if (pas.Common.Tok[i + 1].Kind === 114) pas.System.Writeln("IN");
    if (pas.Common.Tok[i + 1].Kind in rtl.createSet(43,44,45,46,47,48)) {
      if (ValType.get() in pas.Common.RealTypes) VarType = ValType.get();
      j = $mod.CompileSimpleExpression(i + 2,{get: function () {
          return RightValType;
        }, set: function (v) {
          RightValType = v;
        }},VarType);
      k = i + 2;
      if ($mod.SafeCompileConstExpression({get: function () {
          return k;
        }, set: function (v) {
          k = v;
        }},{get: function () {
          return ConstVal;
        }, set: function (v) {
          ConstVal = v;
        }},{get: function () {
          return ConstValType;
        }, set: function (v) {
          ConstValType = v;
        }},VarType,false,true)) if ((ConstValType in pas.Common.IntegerTypes) && (VarType in rtl.unionSet(pas.Common.IntegerTypes,rtl.createSet(135)))) {
        if (ConstVal === 0) {
          isZero = 128;
          if ((ValType.get() in pas.Common.SignedOrdinalTypes) && (pas.Common.Tok[i + 1].Kind in rtl.createSet(43,44))) {
            var $tmp = ValType.get();
            if ($tmp === 131) {
              ValType.set(128)}
             else if ($tmp === 132) {
              ValType.set(129)}
             else if ($tmp === 133) ValType.set(130);
          };
        };
        if (ConstValType in pas.Common.SignedOrdinalTypes) if (ConstVal < 0) isZero = 131;
        cRight = true;
        ConstValRight = ConstVal;
        RightValType = ConstValType;
      };
      if ((pas.Common.Tok[i + 2].Kind === 174) || (RightValType === 137)) {
        sRight = true}
       else if ((RightValType in pas.Common.Pointers) && (pas.Common.Tok[i + 2].Kind === 170)) if ((pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name) - 1].AllocElementType === 134) && (pas.Parser.Elements(pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name)) > 0)) sRight = true;
      if (VarType in pas.Common.RealTypes) {
        if ((ValType.get() === VarType) && (RightValType in pas.Common.RealTypes)) RightValType = VarType;
        if ((ValType.get() in pas.Common.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
      };
      $mod.RealTypeConversion(ValType,{get: function () {
          return RightValType;
        }, set: function (v) {
          RightValType = v;
        }},0);
      if (cRight && (pas.Common.Tok[i + 1].Kind in rtl.createSet(45,47)) && (ValType.get() in pas.Common.IntegerTypes)) {
        yes = false;
        if (pas.Common.Tok[i + 1].Kind === 45) {
          var $tmp1 = ValType.get();
          if (($tmp1 === 128) || ($tmp1 === 129) || ($tmp1 === 130)) {
            yes = isZero === 128}
           else if ($tmp1 === 131) {
            yes = ConstVal === -128}
           else if ($tmp1 === 132) {
            yes = ConstVal === -32768}
           else if ($tmp1 === 133) yes = ConstVal === -2147483648;
        } else {
          var $tmp2 = ValType.get();
          if ($tmp2 === 128) {
            yes = ConstVal === 255}
           else if ($tmp2 === 129) {
            yes = ConstVal === 65535}
           else if ($tmp2 === 130) {
            yes = ConstVal === 4294967295}
           else if ($tmp2 === 131) {
            yes = ConstVal === 127}
           else if ($tmp2 === 132) {
            yes = ConstVal === 32767}
           else if ($tmp2 === 133) yes = ConstVal === 2147483647;
        };
        if (yes) {
          pas.Messages.WarningAlwaysFalse(i + 2);
          pas.Messages.WarningUnreachableCode(i + 2);
        };
      };
      if ((isZero === 128) && (ValType.get() in pas.Common.UnsignedOrdinalTypes)) {
        var $tmp3 = pas.Common.Tok[i + 1].Kind;
        if ($tmp3 === 48) pas.Messages.WarningAlwaysTrue(i + 2);
      };
      if ((isZero === 131) && (ValType.get() in pas.Common.UnsignedOrdinalTypes)) {
        var $tmp4 = pas.Common.Tok[i + 1].Kind;
        if (($tmp4 === 43) || ($tmp4 === 45) || ($tmp4 === 46)) {
          pas.Messages.WarningAlwaysFalse(i + 2);
          pas.Messages.WarningUnreachableCode(i + 2);
        } else if (($tmp4 === 47) || ($tmp4 === 48)) pas.Messages.WarningAlwaysTrue(i + 2);
      };
      if (sLeft || sRight) {}
      else pas.Common.GetCommonType(j,ValType.get(),RightValType);
      if (VarType in pas.Common.RealTypes) {
        if ((ValType.get() === VarType) && (RightValType in pas.Common.RealTypes)) RightValType = VarType;
        if ((ValType.get() in pas.Common.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
      };
      if (((ValType.get() in pas.Common.SignedOrdinalTypes) && (RightValType in pas.Common.UnsignedOrdinalTypes)) || ((ValType.get() in pas.Common.UnsignedOrdinalTypes) && (RightValType in pas.Common.SignedOrdinalTypes))) if (pas.Common.DataSize[ValType.get() - 128] === pas.Common.DataSize[RightValType - 128]) {
        var $tmp5 = pas.Common.DataSize[ValType.get() - 128];
        if ($tmp5 === 1) {
          if (cRight && (ConstValRight >= -128) && (ConstValRight <= 127)) {
            RightValType = ValType.get()}
           else {
            $mod.ExpandParam_m1(132,ValType.get());
            $mod.ExpandParam(132,RightValType);
            ValType.set(132);
            RightValType = 132;
          };
        } else if ($tmp5 === 2) {
          if (cRight && (ConstValRight >= -32768) && (ConstValRight <= 32767)) {
            RightValType = ValType.get()}
           else {
            $mod.ExpandParam_m1(133,ValType.get());
            $mod.ExpandParam(133,RightValType);
            ValType.set(133);
            RightValType = 133;
          };
        };
      };
      $mod.ExpandExpression(ValType,RightValType,0,false);
      if (sLeft || sRight) {
        if (sLeft && sRight) {
          $mod.GenerateRelationString(pas.Common.Tok[i + 1].Kind,137,137)}
         else if (ValType.get() === 134) {
          $mod.GenerateRelationString(pas.Common.Tok[i + 1].Kind,134,137)}
         else if (RightValType === 134) {
          $mod.GenerateRelationString(pas.Common.Tok[i + 1].Kind,137,134)}
         else pas.Common.GetCommonType(j,ValType.get(),RightValType);
      } else $mod.GenerateRelation(pas.Common.Tok[i + 1].Kind,ValType.get());
      i = j;
      ValType.set(135);
    };
    Result = i;
    return Result;
  };
  this.SaveBreakAddress = function () {
    pas.Common.BreakPosStackTop += 1;
    pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr = pas.Common.CodeSize;
    pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].brk = false;
    pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt = false;
  };
  this.RestoreBreakAddress = function () {
    if (pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].brk) pas.Optimize.asm65("b_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
    pas.Common.BreakPosStackTop -= 1;
    pas.Optimize.ResetOpty();
  };
  this.CompileBlockRead = function (i, IdentIndex, IdentBlock) {
    var Result = 0;
    var NumActualParams = 0;
    var idx = 0;
    var ActualParamType = 0;
    var AllocElementType = 0;
    NumActualParams = 0;
    AllocElementType = 0;
    do {
      NumActualParams += 1;
      $mod.StartOptimization(i.get());
      if (NumActualParams > 3) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.WrongNumberOfParameters,IdentBlock);
      if (pas.Common.fBlockRead_ParamType[NumActualParams - 1] in rtl.unionSet(pas.Common.Pointers,rtl.createSet(0))) {
        if (pas.Common.Tok[i.get() + 2].Kind !== 170) {
          pas.Messages.Error$2(i.get() + 2,pas.Messages.TErrorCode.VariableExpected)}
         else {
          idx = pas.Parser.GetIdentIndex(pas.Common.Tok[i.get() + 2].Name);
          if (pas.Common.Ident[idx - 1].Kind === 1) {
            if (!(pas.Common.Ident[idx - 1].DataType in pas.Common.Pointers) || (pas.Parser.Elements(idx) === 0)) pas.Messages.Error$2(i.get() + 2,pas.Messages.TErrorCode.VariableExpected);
          } else if (pas.Common.Ident[idx - 1].Kind !== 3) pas.Messages.Error$2(i.get() + 2,pas.Messages.TErrorCode.VariableExpected);
        };
        i.set($mod.CompileAddress(i.get() + 1,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},{get: function () {
            return AllocElementType;
          }, set: function (v) {
            AllocElementType = v;
          }},pas.Common.fBlockRead_ParamType[NumActualParams - 1] in pas.Common.Pointers));
      } else i.set($mod.CompileExpression(i.get() + 2,{get: function () {
          return ActualParamType;
        }, set: function (v) {
          ActualParamType = v;
        }},133));
      pas.Common.GetCommonType(i.get(),pas.Common.fBlockRead_ParamType[NumActualParams - 1],ActualParamType);
      $mod.ExpandParam(pas.Common.fBlockRead_ParamType[NumActualParams - 1],ActualParamType);
      var $tmp = NumActualParams;
      if ($tmp === 1) {
        $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.buffer")}
       else if ($tmp === 2) {
        $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.nrecord")}
       else if ($tmp === 3) $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.numread");
    } while (!(pas.Common.Tok[i.get() + 1].Kind !== 52));
    if (NumActualParams < 2) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.WrongNumberOfParameters,IdentBlock);
    pas.Common.CheckTok(i.get() + 1,55);
    i.set(i.get() + 1);
    Result = NumActualParams;
    return Result;
  };
  this.UpdateCaseLabels = function (j, tb, lab) {
    var i = 0;
    for (var $l = 0, $end = rtl.length(tb.get()) - 1 - 1; $l <= $end; $l++) {
      i = $l;
      if (((lab.left >= tb.get()[i].left) && (lab.left <= tb.get()[i].right)) || ((lab.right >= tb.get()[i].left) && (lab.right <= tb.get()[i].right)) || ((tb.get()[i].left >= lab.left) && (tb.get()[i].right <= lab.right))) pas.Messages.Error(j,"Duplicate case label");
    };
    i = rtl.length(tb.get()) - 1;
    tb.get()[i].$assign(lab);
    tb.set(rtl.arraySetLength(tb.get(),pas.Common.TCaseLabel,i + 2));
  };
  this.CheckAssignment = function (i, IdentIndex) {
    if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.CONSTPASSING) pas.Messages.Error(i,"Can't assign values to const variable");
    if (pas.Common.Ident[IdentIndex - 1].LoopVariable) pas.Messages.Error(i,"Illegal assignment to for-loop variable '" + pas.Common.Ident[IdentIndex - 1].Name + "'");
  };
  this.CompileStatement = function (i, isAsm) {
    var Result = 0;
    var j = 0;
    var k = 0;
    var IdentIndex = 0;
    var IdentTemp = 0;
    var NumActualParams = 0;
    var NumCharacters = 0;
    var IfLocalCnt = 0;
    var CaseLocalCnt = 0;
    var NumCaseStatements = 0;
    var vlen = 0;
    var oldPass = 0;
    var oldCodeSize = 0;
    var Param = rtl.arraySetLength(null,pas.Common.TParam,8);
    var ExpressionType = 0;
    var IndirectionLevel = 0;
    var ActualParamType = 0;
    var ConstValType = 0;
    var VarType = 0;
    var SelectorType = 0;
    var Value = 0;
    var ConstVal = 0;
    var ConstVal2 = 0;
    var Down = false;
    var ExitLoop = false;
    var yes = false;
    var DEREFERENCE = false;
    var ADDRESS = false;
    var CaseLabelArray = [];
    var CaseLabel = pas.Common.TCaseLabel.$new();
    var forLoop = pas.Common.TForLoop.$new();
    var Name = "";
    var EnumName = "";
    var svar = "";
    var par1 = "";
    var par2 = "";
    var forBPL = 0;
    Result = i;
    Param = rtl.arraySetLength(null,pas.Common.TParam,8);
    IdentIndex = 0;
    ExpressionType = 0;
    par1 = "";
    par2 = "";
    $mod.StopOptimization();
    var $tmp = pas.Common.Tok[i].Kind;
    if (($tmp === 133) || ($tmp === 130) || ($tmp === 132) || ($tmp === 129) || ($tmp === 134) || ($tmp === 131) || ($tmp === 128) || ($tmp === 135) || ($tmp === 136) || ($tmp === 137) || ($tmp === 141) || ($tmp === 142) || ($tmp === 143) || ($tmp === 144)) {
      if (pas.Common.Tok[i + 1].Kind !== 54) pas.Messages.Error(i,"type identifier not allowed here");
      $mod.StartOptimization(i + 1);
      if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.VariableExpected)}
       else IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
      VarType = pas.Common.Ident[IdentIndex - 1].DataType;
      if (VarType !== pas.Common.Tok[i].Kind) pas.Messages.Error(i,"Argument cannot be assigned to");
      pas.Common.CheckTok(i + 3,55);
      if (pas.Common.Tok[i + 4].Kind !== 25) pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.IllegalExpression);
      i = $mod.CompileExpression(i + 5,{get: function () {
          return ExpressionType;
        }, set: function (v) {
          ExpressionType = v;
        }},VarType);
      $mod.GenerateAssignment(1,pas.Common.DataSize[VarType - 128],IdentIndex,"","");
      Result = i;
    } else if ($tmp === 170) {
      IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name);
      if ((IdentIndex > 0) && (pas.Common.Ident[IdentIndex - 1].Kind === 5) && (pas.Common.BlockStackTop > 1) && (pas.Common.Tok[i + 1].Kind !== 54)) for (var $l = pas.Common.NumIdent; $l >= 1; $l--) {
        j = $l;
        if ((pas.Common.Ident[j - 1].ProcAsBlock === pas.Common.NumBlocks) && (pas.Common.Ident[j - 1].Kind === 5)) {
          if ((pas.Common.Ident[j - 1].Name === pas.Common.Ident[IdentIndex - 1].Name) && (pas.Common.Ident[j - 1].UnitIndex === pas.Common.Ident[IdentIndex - 1].UnitIndex)) IdentIndex = $mod.GetIdentResult(pas.Common.NumBlocks);
          break;
        };
      };
      if (IdentIndex > 0) {
        var $tmp1 = pas.Common.Ident[IdentIndex - 1].Kind;
        if ($tmp1 === 6) {
          pas.Common.CheckTok(i + 1,60);
          if (pas.Common.Ident[IdentIndex - 1].isInit) pas.Messages.Error(i,"Label already defined");
          pas.Common.Ident[IdentIndex - 1].isInit = true;
          pas.Optimize.asm65(pas.Common.Ident[IdentIndex - 1].Name,"");
          Result = i;
        } else if (($tmp1 === 3) || ($tmp1 === 2)) {
          VarType = 0;
          $mod.StartOptimization(i + 1);
          if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 147) && !(pas.Common.Tok[i + 1].Kind in rtl.createSet(25,58))) {
            IdentTemp = pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].NumAllocElements_,4));
            $mod.CompileActualParameters({get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }},IdentTemp,IdentIndex);
            Result = i;
            return Result;
          };
          if (pas.Common.Ident[IdentIndex - 1].IdType === 160) {
            IdentTemp = pas.Parser.GetIdentIndex($mod.ExtractName(IdentIndex,pas.Common.Ident[IdentIndex - 1].Name));
            if ((pas.Common.Ident[IdentTemp - 1].NumAllocElements_ > 0) && (pas.Common.Ident[IdentTemp - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType in rtl.createSet(139,140))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalQualifier);
          };
          IndirectionLevel = 2;
          if (pas.Common.Tok[i + 1].Kind === 54) {
            if (!(pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(136,139,140))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression);
            if (pas.Common.Ident[IdentIndex - 1].DataType === 136) {
              VarType = pas.Common.Ident[IdentIndex - 1].AllocElementType}
             else VarType = pas.Common.Ident[IdentIndex - 1].DataType;
            i = $mod.CompileExpression(i + 2,{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},136);
            pas.Common.CheckTok(i + 1,55);
            if ((VarType in rtl.createSet(139,140)) && (pas.Common.Tok[i + 2].Kind === 51)) {
              IndirectionLevel = 9;
              pas.Common.CheckTok(i + 3,170);
              IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
              if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.Tok[i + 3].Name + "'");
              VarType = IdentTemp >>> 16;
              par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
              i += 2;
            } else if (pas.Common.Tok[i + 2].Kind === 56) {
              IndirectionLevel = 9;
              i += 1;
              if ((VarType in rtl.createSet(139,140)) && (pas.Common.Tok[i + 2].Kind === 51)) {
                pas.Common.CheckTok(i + 3,170);
                IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
                if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.Tok[i + 3].Name + "'");
                VarType = IdentTemp >>> 16;
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                i += 2;
              };
            } else {
              if ((VarType in rtl.createSet(139,140)) && (pas.Common.Tok[i + 2].Kind === 51)) {
                IndirectionLevel = 9;
                pas.Common.CheckTok(i + 3,170);
                IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
                if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.Tok[i + 3].Name + "'");
                VarType = IdentTemp >>> 16;
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                i += 2;
              };
            };
            i += 1;
          } else if (pas.Common.Tok[i + 1].Kind === 56) {
            if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) pas.Messages.ErrorForIdentifier(i + 1,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
            if ((pas.Common.Ident[IdentIndex - 1].DataType === 137) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) {
              VarType = 137}
             else VarType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
            IndirectionLevel = 2;
            if (pas.Common.Tok[i + 2].Kind === 58) {
              i += 1;
              if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) pas.Messages.ErrorForIdentifier(i + 1,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
              IndirectionLevel = 4;
              i = $mod.CompileArrayIndex(i,IdentIndex);
              pas.Common.CheckTok(i + 1,59);
            } else if ((VarType in rtl.createSet(139,140)) && (pas.Common.Tok[i + 2].Kind === 51)) {
              pas.Common.CheckTok(i + 3,170);
              IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
              if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.Tok[i + 3].Name + "'");
              if (pas.Common.Tok[i + 4].Kind === 58) {
                if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
                VarType = pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name) - 1].AllocElementType;
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                IndirectionLevel = 10;
                i = $mod.CompileArrayIndex(i + 3,pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name));
                pas.Common.CheckTok(i + 1,59);
              } else {
                VarType = IdentTemp >>> 16;
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                if (pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name) > 0) IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name);
                i += 2;
              };
            };
            i = i + 1;
          } else if (pas.Common.Tok[i + 1].Kind === 58) {
            if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) pas.Messages.ErrorForIdentifier(i + 1,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
            IndirectionLevel = 4;
            j = i;
            i = $mod.CompileArrayIndex(i,IdentIndex);
            VarType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
            if (pas.Common.Tok[i + 2].Kind === 56) {
              i += 1;
              $mod.Push(0,4,pas.Common.DataSize[VarType - 128],IdentIndex,0);
            };
            if (pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) > 0) {
              IdentTemp = pas.Parser.GetIdentIndex(pas.System.Copy(pas.Common.Ident[IdentIndex - 1].Name,1,pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) - 1));
              if ((pas.Common.Ident[IdentTemp - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType in rtl.createSet(139,140))) {
                IndirectionLevel = 10;
                par2 = pas.System.Copy(pas.Common.Ident[IdentIndex - 1].Name,pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) + 1,pas.Common.Ident[IdentIndex - 1].Name.length);
                IdentIndex = IdentTemp;
                IdentTemp = pas.Parser.RecordSize(IdentIndex,par2);
                if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + par2 + "'");
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
              };
            };
            if ((VarType in rtl.createSet(139,140)) && (pas.Common.Tok[i + 2].Kind === 51)) {
              IndirectionLevel = 6;
              pas.Common.CheckTok(i + 3,170);
              IdentTemp = pas.Parser.RecordSize(IdentIndex,pas.Common.Tok[i + 3].Name);
              if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.Tok[i + 3].Name + "'");
              if (pas.Common.Tok[i + 4].Kind === 58) {
                if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
                VarType = pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name) - 1].AllocElementType;
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                IndirectionLevel = 11;
                i = $mod.CompileArrayIndex(i + 3,pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name));
                pas.Common.CheckTok(i + 1,59);
              } else {
                VarType = IdentTemp >>> 16;
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                if (pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name) > 0) IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Ident[IdentIndex - 1].Name + "." + pas.Common.Tok[i + 3].Name);
                if (VarType === 137) IndirectionLevel = 12;
                i += 2;
              };
            } else if (VarType in rtl.createSet(139,140,147)) VarType = 136;
            i += 1;
          } else {
            if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
              IndirectionLevel = 2;
              if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 0) {
                VarType = pas.Common.Ident[IdentIndex - 1].DataType}
               else VarType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
            } else {
              IndirectionLevel = 1;
              VarType = pas.Common.Ident[IdentIndex - 1].DataType;
            };
          };
          if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 147) && (pas.Common.Tok[i + 1].Kind !== 25)) {
            IdentTemp = pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].NumAllocElements_,4));
            $mod.CompileActualParameters({get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }},IdentTemp,IdentIndex);
            if (pas.Common.Ident[IdentTemp - 1].Kind === 5) $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            Result = i;
            return Result;
          } else pas.Common.CheckTok(i + 1,25);
          if ((pas.Common.Ident[IdentIndex - 1].DataType === 145) && (IndirectionLevel === 1) && (pas.Common.Tok[i + 2].Kind in rtl.createSet(174,173,170))) {
            var $tmp2 = pas.Common.Tok[i + 2].Kind;
            if ($tmp2 === 173) {
              pas.Common.Ident[IdentIndex - 1].isInit = true;
              $mod.StopOptimization();
              var $tmp3 = IndirectionLevel;
              if ($tmp3 === 1) {
                pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 2].Value,2),"");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\ttya","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
              };
              Result = i + 2;
            } else if ($tmp2 === 174) {
              pas.Common.Ident[IdentIndex - 1].isInit = true;
              $mod.StopOptimization();
              pas.Optimize.ResetOpty();
              svar = $mod.GetLocalName(IdentIndex,"");
              if (pas.Common.Ident[IdentIndex - 1].NumAllocElements in rtl.createSet(0,1)) {
                NumCharacters = pas.Common.Tok[i + 2].StrLength}
               else NumCharacters = Math.min(pas.Common.Tok[i + 2].StrLength,pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1);
              var $tmp4 = IndirectionLevel;
              if ($tmp4 === 1) {
                if (pas.Common.Tok[i + 2].StrLength === 0) {
                  pas.Optimize.asm65("\tldy " + svar + "+1","");
                  pas.Optimize.asm65("\tsty :bp+1","");
                  pas.Optimize.asm65("\tldy " + svar,"");
                  pas.Optimize.asm65("\tlda #$00","");
                  pas.Optimize.asm65("\tsta (:bp),y","");
                } else {
                  pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                  if (pas.Common.Ident[IdentIndex - 1].DataType === 136) {
                    k = (pas.Common.Tok[i + 2].StrAddress - 256) + 1}
                   else k = pas.Common.Tok[i + 2].StrAddress - 256;
                  pas.Optimize.asm65("\tlda <CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4),"");
                  pas.Optimize.asm65("\tsta @move.src","");
                  pas.Optimize.asm65("\tlda >CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4),"");
                  pas.Optimize.asm65("\tsta @move.src+1","");
                  pas.Optimize.asm65("\t@moveSTRING_P " + svar,"");
                };
              };
              Result = i + 2;
            } else if ($tmp2 === 170) {
              pas.Common.Ident[IdentIndex - 1].isInit = true;
              Result = $mod.CompileExpression(i + 2,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  ExpressionType = v;
                }},VarType);
              if (ExpressionType === 134) {
                var $tmp5 = IndirectionLevel;
                if ($tmp5 === 1) {
                  pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta (:bp2),y","");
                  pas.Optimize.asm65("\ttya","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tsta (:bp2),y","");
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                } else {
                  $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,"","");
                };
              } else if (ExpressionType in pas.Common.Pointers) {
                pas.Common.Ident[IdentIndex - 1].isInit = true;
                svar = $mod.GetLocalName(IdentIndex,"");
                var $tmp6 = IndirectionLevel;
                if (($tmp6 === 1) || ($tmp6 === 2)) {
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta @move.src","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta @move.src+1","");
                  if ((ExpressionType === 145) && (pas.Common.Ident[IdentIndex - 1].DataType === 137)) {
                    pas.Optimize.asm65("\t@movePCHAR " + svar + " #" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1),"")}
                   else if (pas.Common.Ident[IdentIndex - 1].DataType === 136) {
                    pas.Optimize.asm65("\t@moveSTRING_P " + svar,"")}
                   else pas.Optimize.asm65("\t@moveSTRING " + svar + " #" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1),"");
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                  $mod.StopOptimization();
                  pas.Optimize.ResetOpty();
                } else {
                  $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,"","");
                };
              } else pas.Messages.ErrorIncompatibleTypes(i,ExpressionType,VarType,false);
            };
          } else if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 134) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && ((IndirectionLevel in rtl.createSet(1,2)) || ((IndirectionLevel === 3) && (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING))) && (pas.Common.Tok[i + 2].Kind in rtl.createSet(174,173,170))) {
            var $tmp7 = pas.Common.Tok[i + 2].Kind;
            if ($tmp7 === 173) {
              pas.Common.Ident[IdentIndex - 1].isInit = true;
              $mod.StopOptimization();
              var $tmp8 = IndirectionLevel;
              if ($tmp8 === 2) {
                pas.Optimize.asm65("\tmwy " + pas.Common.Ident[IdentIndex - 1].Name + " :bp2","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tmva #$01 (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 2].Value,2) + " (:bp2),y","");
              } else if ($tmp8 === 3) {
                pas.Optimize.asm65("\tmwy " + pas.Common.Ident[IdentIndex - 1].Name + " :bp2","");
                pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
                pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 2].Value,2) + " (:bp2),y","");
                $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
              } else if ($tmp8 === 1) {
                pas.Optimize.asm65("\tmva #$01 " + $mod.GetLocalName(IdentIndex,"adr."),"");
                pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 2].Value,2) + " " + $mod.GetLocalName(IdentIndex,"adr.") + "+1","");
              };
              Result = i + 2;
            } else if ($tmp7 === 174) {
              pas.Common.Ident[IdentIndex - 1].isInit = true;
              $mod.StopOptimization();
              pas.Optimize.ResetOpty();
              if (pas.Common.Ident[IdentIndex - 1].NumAllocElements in rtl.createSet(0,1)) {
                NumCharacters = pas.Common.Tok[i + 2].StrLength}
               else NumCharacters = Math.min(pas.Common.Tok[i + 2].StrLength,pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1);
              var $tmp9 = IndirectionLevel;
              if ($tmp9 === 2) {
                if (pas.Common.Tok[i + 2].StrLength === 0) {
                  pas.Optimize.asm65("\tmwy " + pas.Common.Ident[IdentIndex - 1].Name + " :bp2","");
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tmva #$00 (:bp2),y","");
                } else if (pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) > 0) {
                  pas.Optimize.asm65("\tmwa #CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 2].StrAddress - 256,4) + " @move.src","");
                  pas.Optimize.asm65("\tadw " + pas.System.Copy(pas.Common.Ident[IdentIndex - 1].Name,1,pas.System.Pos(".",pas.Common.Ident[IdentIndex - 1].Name) - 1) + " #" + pas.Common.Ident[IdentIndex - 1].Name + "-DATAORIGIN @move.dst","");
                  pas.Optimize.asm65("\tmwa #" + pas.Common.IntToStr(NumCharacters + 1) + " @move.cnt","");
                  pas.Optimize.asm65("\tjsr @move","");
                } else pas.Optimize.asm65("\t@move #CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 2].StrAddress - 256,4) + " " + pas.Common.Ident[IdentIndex - 1].Name + " #" + pas.Common.IntToStr(NumCharacters + 1),"")}
               else if ($tmp9 === 3) {
                pas.Common.GetCommonType(i + 1,134,136)}
               else if ($tmp9 === 1) {
                if (pas.Common.Tok[i + 2].StrLength === 0) {
                  pas.Optimize.asm65("\tmva #$00 " + $mod.GetLocalName(IdentIndex,"adr."),"")}
                 else {
                  if (pas.Common.Ident[IdentIndex - 1].DataType === 136) {
                    k = (pas.Common.Tok[i + 2].StrAddress - 256) + 1}
                   else k = pas.Common.Tok[i + 2].StrAddress - 256;
                  vlen = NumCharacters + 1;
                  if (vlen <= 256) {
                    pas.Optimize.asm65("\tldy #256-" + pas.Common.IntToStr(vlen),"");
                    pas.Optimize.asm65("\tmva:rne CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4) + "+" + pas.Common.IntToStr(vlen) + "-256,y " + $mod.GetLocalName(IdentIndex,"adr.") + "+" + pas.Common.IntToStr(vlen) + "-256,y+","");
                  } else pas.Optimize.asm65("\t@move #CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4) + " #" + $mod.GetLocalName(IdentIndex,"adr.") + " #" + pas.Common.IntToStr(vlen),"");
                };
                if ((pas.Common.Tok[i + 2].StrLength + 1) > pas.Common.Ident[IdentIndex - 1].NumAllocElements) {
                  pas.Messages.WarningShortStringLength(i + 2);
                  pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(NumCharacters,2) + " " + $mod.GetLocalName(IdentIndex,"adr."),"");
                };
              };
              Result = i + 2;
            } else if ($tmp7 === 170) {
              pas.Common.Ident[IdentIndex - 1].isInit = true;
              Result = $mod.CompileExpression(i + 2,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  ExpressionType = v;
                }},VarType);
              svar = $mod.GetLocalName(IdentIndex,"");
              if (ExpressionType === 134) {
                var $tmp10 = IndirectionLevel;
                if ($tmp10 === 1) {
                  pas.Optimize.asm65("\tmva :STACKORIGIN,x " + $mod.GetLocalName(IdentIndex,"adr.") + "+1","");
                  pas.Optimize.asm65("\tmva #$01 " + $mod.GetLocalName(IdentIndex,"adr."),"");
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                } else if ($tmp10 === 2) {
                  pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tmva #$01 (:bp2),y","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tmva :STACKORIGIN,x (:bp2),y","");
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                } else if ($tmp10 === 3) {
                  pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                  pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta (:bp2),y","");
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                } else {
                  $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,"","");
                };
              } else if (ExpressionType in pas.Common.Pointers) {
                var $tmp11 = IndirectionLevel;
                if (($tmp11 === 1) || ($tmp11 === 2)) {
                  if (pas.Common.Tok[i + 3].Kind === 56) {
                    pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name),"") + " :bp2","");
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta @move.src","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta @move.src+1","");
                    i += 1;
                  } else {
                    pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tsta @move.src","");
                    pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                    pas.Optimize.asm65("\tsta @move.src+1","");
                  };
                  if ((ExpressionType === 145) && (pas.Common.Ident[IdentIndex - 1].DataType === 137)) {
                    pas.Optimize.asm65("\t@movePCHAR " + svar + " #" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1),"")}
                   else if (pas.Common.Ident[IdentIndex - 1].DataType === 136) {
                    pas.Optimize.asm65("\t@moveSTRING_P " + svar,"")}
                   else pas.Optimize.asm65("\t@moveSTRING " + svar + " #" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1),"");
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                  $mod.StopOptimization();
                  pas.Optimize.ResetOpty();
                } else {
                  $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,"","");
                };
              } else pas.Messages.ErrorIncompatibleTypes(i,ExpressionType,VarType,false);
            };
          } else {
            if (VarType === 0) pas.Messages.Error(i,"Assignments to formal parameters and open arrays are not possible");
            Result = $mod.CompileExpression(i + 2,{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},VarType);
            k = i + 2;
            $mod.RealTypeConversion({get: function () {
                return VarType;
              }, set: function (v) {
                VarType = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},0);
            if ((VarType in rtl.createSet(141,142)) && (ExpressionType in rtl.createSet(141,142))) ExpressionType = VarType;
            if ((VarType === 136) && (ExpressionType === 137)) {
              if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 134) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tadd #$01","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tadc #$00","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              } else if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 0) {
                pas.Messages.ErrorIncompatibleTypes(i + 1,137,136,false)}
               else pas.Common.GetCommonType(i + 1,pas.Common.Ident[IdentIndex - 1].AllocElementType,137);
            };
            if ((pas.Common.Tok[i].Kind === 56) && (VarType === 136) && (ExpressionType === 139)) {
              ExpressionType = 139;
              VarType = 139;
            };
            if (VarType !== ExpressionType) if ((ExpressionType === 136) && (pas.Common.Tok[k].Kind === 170)) if ((pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name) - 1].DataType === 136) && (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name) - 1].AllocElementType === 147)) {
              IdentTemp = pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name) - 1].NumAllocElements_,4));
              if (pas.Common.Ident[IdentTemp - 1].Kind === 5) ExpressionType = pas.Common.Ident[IdentTemp - 1].DataType;
            };
            $mod.CheckAssignment(i + 1,IdentIndex);
            if (IndirectionLevel in rtl.createSet(3,4)) {
              if ((ExpressionType === 134) && (pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 137)) {
                IndirectionLevel = 8}
               else if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) {
                if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (ExpressionType in rtl.createSet(139,140))) {}
                else pas.Common.GetCommonType(i + 1,pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType);
              } else pas.Common.GetCommonType(i + 1,pas.Common.Ident[IdentIndex - 1].AllocElementType,ExpressionType);
            } else if (pas.Common.Ident[IdentIndex - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers)) {
              if ((ExpressionType in rtl.diffSet(pas.Common.Pointers,rtl.createSet(137))) && (pas.Common.Tok[k].Kind === 170)) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name);
                if ((IdentTemp > 0) && (pas.Common.Ident[IdentTemp - 1].Kind === 5)) IdentTemp = $mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock);
                if (pas.Common.Ident[IdentTemp - 1].AllocElementType === 139) {}
                else if ((pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentTemp - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentTemp - 1].AllocElementType !== pas.Common.Ident[IdentIndex - 1].AllocElementType) && (pas.Common.Tok[k + 1].Kind !== 58)) {
                  if ((pas.Common.Ident[IdentTemp - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) {
                    pas.Messages.ErrorIdentifierIncompatibleTypesArrayIdentifier(k,IdentTemp,IdentIndex)}
                   else {
                    if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0) && (pas.Common.Ident[IdentTemp - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType !== 0) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements === 0)) {
                      pas.Messages.Error(k,'Incompatible types: got "^' + pas.Common.InfoAboutToken(pas.Common.Ident[IdentTemp - 1].AllocElementType) + '" expected "^' + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].AllocElementType) + '"')}
                     else pas.Messages.ErrorIdentifierIncompatibleTypesArray(k,IdentTemp,ExpressionType);
                  };
                };
              } else if (ExpressionType in rtl.createSet(139,140)) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name);
                var $tmp12 = IndirectionLevel;
                if ($tmp12 === 1) {
                  if ((pas.Common.Ident[IdentIndex - 1].AllocElementType !== pas.Common.Ident[IdentTemp - 1].AllocElementType) && !(pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(139,140))) pas.Messages.Error(k,'Incompatible types: got "' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "^' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"')}
                 else if ($tmp12 === 2) {
                  if ((pas.Common.Ident[IdentIndex - 1].AllocElementType !== pas.Common.Ident[IdentTemp - 1].AllocElementType) && !(pas.Common.Ident[IdentTemp - 1].DataType in rtl.createSet(139,140))) pas.Messages.Error(k,'Incompatible types: got "' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "^' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"')}
                 else {
                  pas.Common.GetCommonType(i + 1,VarType,ExpressionType);
                };
              } else {
                if (((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) || ((VarType === 137) && (ExpressionType === 145))) {}
                else if (VarType in rtl.createSet(139,140)) {
                  pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.InfoAboutToken(ExpressionType) + '" expected "' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"')}
                 else pas.Common.GetCommonType(i + 1,VarType,ExpressionType);
              };
            } else if (VarType === 146) {
              if (pas.Common.Tok[k].Kind === 170) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name)}
               else IdentTemp = 0;
              if ((IdentTemp > 0) && (pas.Common.Ident[IdentTemp - 1].Kind === 5)) IdentTemp = $mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock);
              if ((IdentTemp > 0) && (pas.Common.Ident[IdentTemp - 1].Kind === 2) && (pas.Common.Ident[IdentTemp - 1].DataType === 146)) {
                if (pas.Common.Ident[IdentIndex - 1].NumAllocElements !== pas.Common.Ident[IdentTemp - 1].NumAllocElements) pas.Messages.ErrorIncompatibleEnumIdentifiers(i,IdentTemp,IdentIndex);
              } else if ((IdentTemp > 0) && (pas.Common.Ident[IdentTemp - 1].Kind === 146)) {
                if (pas.Common.Ident[IdentTemp - 1].NumAllocElements !== pas.Common.Ident[IdentIndex - 1].NumAllocElements) pas.Messages.ErrorIncompatibleEnumIdentifiers(i,IdentTemp,IdentIndex);
              } else if ((IdentTemp > 0) && (pas.Common.Ident[IdentTemp - 1].DataType === 146)) {
                if (pas.Common.Ident[IdentTemp - 1].NumAllocElements !== pas.Common.Ident[IdentIndex - 1].NumAllocElements) pas.Messages.ErrorIncompatibleEnumIdentifiers(i,IdentTemp,IdentIndex);
              } else pas.Messages.ErrorIncompatibleEnumTypeIdentifier(i,ExpressionType,IdentIndex);
            } else {
              if (pas.Common.Tok[k].Kind === 170) {
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name)}
               else IdentTemp = 0;
              if ((IdentTemp > 0) && ((pas.Common.Ident[IdentTemp - 1].Kind === 146) || (pas.Common.Ident[IdentTemp - 1].DataType === 146))) {
                pas.Messages.ErrorIncompatibleEnumIdentifierType(i,IdentTemp,ExpressionType)}
               else pas.Common.GetCommonType(i + 1,pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType);
            };
            $mod.ExpandParam(VarType,ExpressionType);
            pas.Common.Ident[IdentIndex - 1].isInit = true;
            if ((pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (IndirectionLevel !== 9) && (pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0) && (ExpressionType !== 136)) {
              if ((pas.Common.Ident[IdentIndex - 1].AllocElementType in pas.Common.OrdinalTypes) && (ExpressionType in pas.Common.OrdinalTypes)) {}
              else if (pas.Common.Ident[IdentIndex - 1].AllocElementType !== 0) {
                if ((ExpressionType in rtl.createSet(145,137)) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 134)) {}
                else pas.Messages.Error(i + 1,'Incompatible types: got "' + pas.Common.InfoAboutToken(ExpressionType) + '" expected "' + pas.Common.Ident[IdentIndex - 1].Name + '"');
              } else pas.Common.GetCommonType(i + 1,pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType);
            };
            if ((VarType in rtl.createSet(139,140)) || ((VarType === 136) && (ExpressionType in rtl.createSet(139,140)))) {
              ADDRESS = false;
              if (pas.Common.Tok[k].Kind === 57) {
                k += 1;
                ADDRESS = true;
              };
              if (pas.Common.Tok[k].Kind !== 170) pas.Messages.Error$2(k,pas.Messages.TErrorCode.IdentifierExpected);
              IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name);
              if (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.Ident[IdentTemp - 1].PassMethod) {
                var $tmp13 = IndirectionLevel;
                if ($tmp13 === 1) {
                  if ((pas.Common.Tok[k + 1].Kind !== 56) && (pas.Common.Ident[IdentIndex - 1].AllocElementType !== pas.Common.Ident[IdentTemp - 1].AllocElementType) && !(pas.Common.Ident[IdentTemp - 1].DataType in rtl.createSet(139,140))) pas.Messages.Error(k,'Incompatible types: got "^' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"')}
                 else if ($tmp13 === 2) {}
                else {
                  pas.Common.GetCommonType(i + 1,VarType,ExpressionType);
                };
              };
              if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140)) && (pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.Ident[IdentTemp - 1].PassMethod)) {
                if (pas.Common.Ident[IdentTemp - 1].Kind === 5) {
                  yes = pas.Common.Ident[IdentIndex - 1].NumAllocElements !== pas.Common.Ident[$mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock) - 1].NumAllocElements}
                 else yes = pas.Common.Ident[IdentIndex - 1].NumAllocElements !== pas.Common.Ident[IdentTemp - 1].NumAllocElements;
                if (yes && (ADDRESS === false) && (ExpressionType in rtl.createSet(139,140))) if ((pas.Common.Ident[IdentTemp - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType in rtl.createSet(139,140))) {
                  pas.Messages.Error(i,'Incompatible types: got "^' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "^' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"')}
                 else pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "^' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"');
              };
              if ((ExpressionType in rtl.createSet(139,140)) || ((ExpressionType === 136) && (pas.Common.Ident[IdentTemp - 1].AllocElementType in rtl.createSet(139,140)))) {
                svar = pas.Common.Tok[k].Name;
                if ((pas.Common.Ident[IdentTemp - 1].DataType === 139) && (pas.Common.Ident[IdentTemp - 1].AllocElementType !== 139)) {
                  Name = "adr." + svar}
                 else Name = svar;
                if (pas.Common.Ident[IdentTemp - 1].Kind === 5) {
                  svar = $mod.GetLocalName(IdentTemp,"");
                  IdentTemp = $mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock);
                  Name = svar + ".adr.result";
                  svar = svar + ".result";
                };
                DEREFERENCE = false;
                if (pas.Common.Tok[k + 1].Kind === 56) {
                  k += 1;
                  DEREFERENCE = true;
                };
                if (pas.Common.Tok[k + 1].Kind === 51) {
                  pas.Common.CheckTok(k + 2,170);
                  Name = svar + "." + pas.Common.Tok[k + 2].Name;
                  IdentTemp = pas.Parser.GetIdentIndex(Name);
                };
                if (IdentTemp > 0) if (pas.Common.Ident[IdentIndex - 1].NumAllocElements !== pas.Common.Ident[IdentTemp - 1].NumAllocElements) if (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0) {
                  pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "' + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].DataType) + '"')}
                 else pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.TypeArray[pas.Common.Ident[IdentTemp - 1].NumAllocElements - 1].Field[0].Name + '" expected "' + pas.Common.TypeArray[pas.Common.Ident[IdentIndex - 1].NumAllocElements - 1].Field[0].Name + '"');
                $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                $mod.StopOptimization();
                pas.Optimize.ResetOpty();
                if ((pas.Common.Ident[IdentIndex - 1].DataType === 139) && (pas.Common.Ident[IdentTemp - 1].DataType === 139) && (pas.Common.Ident[IdentTemp - 1].AllocElementType === 139)) {
                  if (DEREFERENCE) {
                    pas.Optimize.asm65("\tlda :bp2","");
                    pas.Optimize.asm65("\tadd #" + Name + "-DATAORIGIN","");
                    pas.Optimize.asm65("\tsta :bp2","");
                    pas.Optimize.asm65("\tlda :bp2+1","");
                    pas.Optimize.asm65("\tadc #$00","");
                    pas.Optimize.asm65("\tsta :bp2+1","");
                  } else {
                    pas.Optimize.asm65("\tsta :bp2","");
                    pas.Optimize.asm65("\tsty :bp2+1","");
                  };
                  if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                    pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                    pas.Optimize.asm65("\tmva:rpl (:bp2),y " + $mod.GetLocalName(IdentIndex,"adr.") + ",y-","");
                  } else pas.Optimize.asm65('\t@move ":bp2" ' + $mod.GetLocalName(IdentIndex,"") + " #" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                } else if ((pas.Common.Ident[IdentIndex - 1].DataType === 139) && (pas.Common.Ident[IdentTemp - 1].DataType === 139) && (pas.Parser.RecordSize(IdentIndex,"") <= 8)) {
                  if (pas.Parser.RecordSize(IdentIndex,"") === 1) {
                    pas.Optimize.asm65("\t mva " + Name + " " + $mod.GetLocalName(IdentIndex,"adr."),"")}
                   else pas.Optimize.asm65("\t:" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")) + " mva " + Name + "+# " + $mod.GetLocalName(IdentIndex,"adr.") + "+#","");
                } else if ((pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentTemp - 1].DataType === 136)) {
                  pas.Optimize.asm65("\t@move " + Name + " " + $mod.GetLocalName(IdentIndex,"") + " #" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                } else if ((pas.Common.Ident[IdentIndex - 1].DataType === 139) && (pas.Common.Ident[IdentTemp - 1].DataType === 136)) {
                  if (pas.Common.Ident[IdentTemp - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
                    pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentTemp,"") + " :bp2","");
                    if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                      pas.Optimize.asm65("\tmva:rpl (:bp2),y " + $mod.GetLocalName(IdentIndex,"adr.") + ",y-","");
                    } else pas.Optimize.asm65('\t@move ":bp2" #' + $mod.GetLocalName(IdentIndex,"adr.") + " #" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                  } else if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                    pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentTemp,"") + " :bp2","");
                    pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                    pas.Optimize.asm65("\tmva:rpl (:bp2),y " + $mod.GetLocalName(IdentIndex,"adr.") + ",y-","");
                  } else pas.Optimize.asm65("\t@move " + Name + " #" + $mod.GetLocalName(IdentIndex,"adr.") + " #" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                } else {
                  if ((pas.System.Pos("adr.",Name) > 0) && (pas.Parser.RecordSize(IdentIndex,"") <= 128)) {
                    if (IndirectionLevel === 4) {
                      pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(0),"");
                      pas.Optimize.asm65("\tsta :bp2","");
                      pas.Optimize.asm65("\tlda" + $mod.GetStackVariable(1),"");
                      pas.Optimize.asm65("\tsta :bp2+1","");
                    } else pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
                    pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                    pas.Optimize.asm65("\tmva:rpl " + Name + ",y (:bp2),y-","");
                  } else pas.Optimize.asm65("\t@move #" + Name + " " + $mod.GetLocalName(IdentIndex,"") + " #" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                };
              } else pas.Common.GetCommonType(i + 1,ExpressionType,139);
            } else if ((VarType === 137) && (ExpressionType in pas.Common.Pointers)) {
              if ((pas.Common.Tok[k].Kind !== 57) && (IndirectionLevel in rtl.createSet(3,4)) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 137)) {
                if ((pas.Common.Tok[k].Kind === 170) && (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name) - 1].AllocElementType !== 0)) IndirectionLevel = 7;
                $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,"","");
                $mod.StopOptimization();
                pas.Optimize.ResetOpty();
              } else $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,par1,par2);
            } else if ((VarType in pas.Common.Pointers) && (ExpressionType in pas.Common.Pointers) && (pas.Common.Tok[k].Kind === 170) && !(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.unionSet(pas.Common.Pointers,rtl.createSet(139,140))) && !(pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name) - 1].AllocElementType in rtl.unionSet(pas.Common.Pointers,rtl.createSet(139,140)))) {
              j = pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
              IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[k].Name);
              Name = "adr." + pas.Common.Tok[k].Name;
              svar = pas.Common.Tok[k].Name;
              if (IdentTemp > 0) {
                if (pas.Common.Ident[IdentTemp - 1].Kind === 5) {
                  svar = $mod.GetLocalName(IdentTemp,"");
                  IdentTemp = $mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock);
                  Name = svar + ".adr.result";
                  svar = svar + ".result";
                };
                if ((pas.Common.Ident[IdentIndex - 1].NumAllocElements > 1) && (pas.Common.Ident[IdentTemp - 1].NumAllocElements > 1)) {
                  if (pas.Common.Ident[IdentTemp - 1].AllocElementType !== 139) if (j !== ((pas.Common.Ident[IdentTemp - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentTemp - 1].AllocElementType - 128]) & 0xFFFFFFFF)) pas.Messages.ErrorIdentifierIncompatibleTypesArrayIdentifier(i,IdentTemp,IdentIndex);
                  $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
                  $mod.StopOptimization();
                  pas.Optimize.ResetOpty();
                  if ((j <= 4) && (pas.Common.Ident[IdentTemp - 1].AllocElementType !== 139)) {
                    pas.Optimize.asm65("\t:" + pas.Common.IntToStr(j) + " mva " + Name + "+# " + $mod.GetLocalName(IdentIndex,"adr.") + "+#","")}
                   else pas.Optimize.asm65("\t@move " + svar + " " + $mod.GetLocalName(IdentIndex,"") + " #" + pas.Common.IntToStr(j),"");
                } else $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,par1,par2);
              } else pas.Messages.Error$2(k,pas.Messages.TErrorCode.UnknownIdentifier);
            } else $mod.GenerateAssignment(IndirectionLevel,pas.Common.DataSize[VarType - 128],IdentIndex,par1,par2);
          };
        } else if (($tmp1 === 4) || ($tmp1 === 5) || ($tmp1 === 99) || ($tmp1 === 100)) {
          Param = $mod.NumActualParameters(i,IdentIndex,{get: function () {
              return j;
            }, set: function (v) {
              j = v;
            }});
          IdentTemp = $mod.GetIdentProc(pas.Common.Ident[IdentIndex - 1].Name,IdentIndex,pas.Common.TParamList$clone(Param),j);
          if (IdentTemp === 0) if (pas.Common.Ident[IdentIndex - 1].isOverload) {
            if (pas.Common.Ident[IdentIndex - 1].NumParams !== j) pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.WrongNumberOfParameters,IdentIndex);
            pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.CantDetermine,IdentIndex);
          } else pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.WrongNumberOfParameters,IdentIndex);
          IdentIndex = IdentTemp;
          if (pas.Common.Ident[IdentIndex - 1].isStdCall === false) {
            $mod.StartOptimization(i)}
           else if (pas.Common.optimize.use === false) $mod.StartOptimization(i);
          pas.Common.run_func += 1;
          $mod.CompileActualParameters({get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }},IdentIndex,0);
          pas.Common.run_func -= 1;
          if (pas.Common.Ident[IdentIndex - 1].Kind === 5) {
            $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            $mod.StartOptimization(i);
          };
          Result = i;
        } else {
          pas.Messages.Error(i,"Assignment or procedure call expected but " + pas.Common.Ident[IdentIndex - 1].Name + " found");
        };
      } else pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
    } else if ($tmp === 192) {
      if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.System.Writeln("User defined: " + pas.Common.msgUser[pas.Common.Tok[i].Value]);
      Result = i;
    } else if ($tmp === 193) {
      pas.Messages.WarningUserDefined(i);
      Result = i;
    } else if ($tmp === 194) {
      if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UserDefined);
      Result = i;
    } else if ($tmp === 197) {
      pas.Common.IOCheck = true;
      Result = i;
    } else if ($tmp === 198) {
      pas.Common.IOCheck = false;
      Result = i;
    } else if ($tmp === 185) {
      pas.Common.LoopUnroll = true;
      Result = i;
    } else if ($tmp === 186) {
      pas.Common.LoopUnroll = false;
      Result = i;
    } else if ($tmp === 189) {
      pas.Common.codealign.proc = pas.Common.Tok[i].Value;
      Result = i;
    } else if ($tmp === 190) {
      pas.Common.codealign.loop = pas.Common.Tok[i].Value;
      Result = i;
    } else if ($tmp === 191) {
      pas.Common.codealign.link = pas.Common.Tok[i].Value;
      Result = i;
    } else if ($tmp === 113) {
      pas.Common.CheckTok(i + 1,170);
      IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
      if (IdentIndex > 0) {
        if (pas.Common.Ident[IdentIndex - 1].Kind !== 6) pas.Messages.Error(i + 1,"Identifier isn't a label");
        pas.Optimize.asm65("\tjmp " + pas.Common.Ident[IdentIndex - 1].Name,"");
      } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
      Result = i + 1;
    } else if ($tmp === 13) {
      if (isAsm) pas.Common.CheckTok(i,37);
      j = $mod.CompileStatement(i + 1,false);
      while ((pas.Common.Tok[j + 1].Kind === 53) || ((pas.Common.Tok[j + 1].Kind === 60) && (pas.Common.Tok[j].Kind === 170))) j = $mod.CompileStatement(j + 2,false);
      pas.Common.CheckTok(j + 1,14);
      Result = j + 1;
    } else if ($tmp === 12) {
      CaseLocalCnt = pas.Common.CaseCnt;
      pas.Common.CaseCnt += 1;
      pas.Optimize.ResetOpty();
      EnumName = "";
      $mod.StartOptimization(i);
      j = i + 1;
      i = $mod.CompileExpression(i + 1,{get: function () {
          return SelectorType;
        }, set: function (v) {
          SelectorType = v;
        }},133);
      if ((SelectorType === 146) && (pas.Common.Tok[j].Kind === 170) && (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[j].Name) - 1].Kind === 5)) {
        IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[j].Name);
        SelectorType = pas.Common.Ident[$mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock) - 1].AllocElementType;
        EnumName = pas.Common.TypeArray[pas.Common.Ident[$mod.GetIdentResult(pas.Common.Ident[IdentTemp - 1].ProcAsBlock) - 1].NumAllocElements - 1].Field[0].Name;
      } else if (pas.Common.Tok[i].Kind === 170) EnumName = pas.Common.GetEnumName(pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name));
      if (SelectorType !== 146) if (pas.Common.DataSize[SelectorType - 128] !== 1) pas.Messages.Error(i,"Expected BYTE, SHORTINT, CHAR or BOOLEAN as CASE selector");
      if (!(SelectorType in rtl.unionSet(pas.Common.OrdinalTypes,rtl.createSet(146)))) pas.Messages.Error(i,"Ordinal variable expected as 'CASE' selector");
      pas.Common.CheckTok(i + 1,31);
      $mod.GenerateAssignment(1,pas.Common.DataSize[SelectorType - 128],0,"@CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
      pas.Parser.DefineIdent(i,"@CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),3,SelectorType,0,0,0,170);
      pas.Parser.GetIdentIndex("@CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4));
      yes = true;
      NumCaseStatements = 0;
      i += 2;
      CaseLabelArray = [];
      CaseLabelArray = rtl.arraySetLength(CaseLabelArray,pas.Common.TCaseLabel,1);
      do {
        do {
          i = pas.Parser.CompileConstExpression(i,{get: function () {
              return ConstVal;
            }, set: function (v) {
              ConstVal = v;
            }},{get: function () {
              return ConstValType;
            }, set: function (v) {
              ConstValType = v;
            }},SelectorType,false,true);
          pas.Common.GetCommonType(i,ConstValType,SelectorType);
          if (pas.Common.Tok[i].Kind === 170) if (((EnumName === "") && (pas.Common.GetEnumName(pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name)) !== "")) || ((EnumName !== "") && (pas.Common.GetEnumName(pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name)) !== EnumName))) pas.Messages.Error(i,"Constant and CASE types do not match");
          if (pas.Common.Tok[i + 1].Kind === 42) {
            i = pas.Parser.CompileConstExpression(i + 2,{get: function () {
                return ConstVal2;
              }, set: function (v) {
                ConstVal2 = v;
              }},{get: function () {
                return ConstValType;
              }, set: function (v) {
                ConstValType = v;
              }},SelectorType,false,true);
            pas.Common.GetCommonType(i,ConstValType,SelectorType);
            if (ConstVal > ConstVal2) pas.Messages.Error(i,"Upper bound of case range is less than lower bound");
            $mod.GenerateCaseRangeCheck(ConstVal,ConstVal2,SelectorType,yes,CaseLocalCnt);
            yes = false;
            CaseLabel.left = ConstVal;
            CaseLabel.right = ConstVal2;
          } else {
            $mod.GenerateCaseEqualityCheck(ConstVal,SelectorType,yes,CaseLocalCnt);
            yes = true;
            CaseLabel.left = ConstVal;
            CaseLabel.right = ConstVal;
          };
          $mod.UpdateCaseLabels(i,{get: function () {
              return CaseLabelArray;
            }, set: function (v) {
              CaseLabelArray = v;
            }},pas.Common.TCaseLabel.$clone(CaseLabel));
          i += 1;
          ExitLoop = false;
          if (pas.Common.Tok[i].Kind === 52) {
            i += 1}
           else ExitLoop = true;
        } while (!ExitLoop);
        pas.Common.CheckTok(i,60);
        $mod.GenerateCaseStatementProlog();
        pas.Optimize.ResetOpty();
        pas.Optimize.asm65("@","");
        j = $mod.CompileStatement(i + 1,false);
        i = j + 1;
        $mod.GenerateCaseStatementEpilog(CaseLocalCnt);
        NumCaseStatements += 1;
        ExitLoop = false;
        if (pas.Common.Tok[i].Kind !== 53) {
          if (pas.Common.Tok[i].Kind === 17) {
            j = $mod.CompileStatement(i + 1,false);
            while (pas.Common.Tok[j + 1].Kind === 53) j = $mod.CompileStatement(j + 2,false);
            i = j + 1;
          };
          ExitLoop = true;
        } else {
          i += 1;
          if (pas.Common.Tok[i].Kind === 17) {
            j = $mod.CompileStatement(i + 1,false);
            while (pas.Common.Tok[j + 1].Kind === 53) j = $mod.CompileStatement(j + 2,false);
            i = j + 1;
          };
          if (pas.Common.Tok[i].Kind === 14) ExitLoop = true;
        };
      } while (!ExitLoop);
      pas.Common.CheckTok(i,14);
      $mod.GenerateCaseEpilog(NumCaseStatements,CaseLocalCnt);
      Result = i;
    } else if ($tmp === 15) {
      IfLocalCnt = pas.Common.IfCnt;
      pas.Common.IfCnt += 1;
      $mod.StartOptimization(i + 1);
      j = $mod.CompileExpression(i + 1,{get: function () {
          return ExpressionType;
        }, set: function (v) {
          ExpressionType = v;
        }},133);
      pas.Common.GetCommonType(j,135,ExpressionType);
      pas.Common.CheckTok(j + 1,16);
      $mod.SaveToSystemStack(IfLocalCnt);
      $mod.GenerateIfThenCondition();
      $mod.GenerateIfThenProlog();
      pas.Common.CodeSize += 1;
      j = $mod.CompileStatement(j + 2,false);
      $mod.GenerateIfThenEpilog();
      Result = j;
      if (pas.Common.Tok[j + 1].Kind === 17) {
        $mod.RestoreFromSystemStack(IfLocalCnt);
        $mod.GenerateElseCondition();
        $mod.GenerateIfThenProlog();
        pas.Common.optyBP2 = "";
        j = $mod.CompileStatement(j + 2,false);
        $mod.GenerateIfThenEpilog();
        Result = j;
      } else $mod.RemoveFromSystemStack();
    } else if ($tmp === 18) {
      pas.Common.CodeSize += 1;
      if (pas.Common.codealign.loop > 0) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tjmp @+","");
        pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.loop,4),"");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; --- WhileProlog","");
      pas.Optimize.ResetOpty();
      pas.Common.CodeSize += 1;
      pas.Common.CodePosStackTop += 1;
      pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
      pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop],4),"");
      pas.Common.CodeSize += 1;
      $mod.GenerateRepeatUntilProlog();
      $mod.SaveBreakAddress();
      oldPass = pas.Common.pass;
      oldCodeSize = pas.Common.CodeSize;
      pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
      k = i;
      $mod.StartOptimization(i + 1);
      j = $mod.CompileExpression(i + 1,{get: function () {
          return ExpressionType;
        }, set: function (v) {
          ExpressionType = v;
        }},133);
      pas.Common.GetCommonType(j,135,ExpressionType);
      pas.Common.CheckTok(j + 1,19);
      pas.Common.pass = oldPass;
      pas.Common.CodeSize = oldCodeSize;
      pas.Common.CodePosStackTop += 1;
      pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
      j = $mod.CompileStatement(j + 2,false);
      if (pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
      pas.Common.CodePosStackTop -= 1;
      pas.Common.CodePosStackTop -= 1;
      $mod.GenerateAsmLabels(pas.Common.CodePosStack[pas.Common.CodePosStackTop]);
      $mod.StartOptimization(k + 1);
      $mod.CompileExpression(k + 1,{get: function () {
          return ExpressionType;
        }, set: function (v) {
          ExpressionType = v;
        }},133);
      pas.Optimize.asm65("; --- WhileDoCondition","");
      $mod.Gen();
      $mod.Gen();
      $mod.Gen();
      $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      pas.Optimize.asm65("\tlda :STACKORIGIN+1,x","");
      pas.Optimize.asm65("\tjne l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop + 1],4),"");
      pas.Common.CodePosStackTop -= 1;
      pas.Optimize.asm65("; --- WhileDoEpilog","");
      $mod.RestoreBreakAddress();
      Result = j;
    } else if ($tmp === 20) {
      pas.Common.CodeSize += 1;
      if (pas.Common.codealign.loop > 0) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tjmp @+","");
        pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.loop,4),"");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; --- RepeatUntilProlog","");
      pas.Optimize.ResetOpty();
      $mod.GenerateRepeatUntilProlog();
      $mod.SaveBreakAddress();
      j = $mod.CompileStatement(i + 1,false);
      while (pas.Common.Tok[j + 1].Kind === 53) j = $mod.CompileStatement(j + 2,false);
      pas.Common.CheckTok(j + 1,21);
      $mod.StartOptimization(j + 2);
      j = $mod.CompileExpression(j + 2,{get: function () {
          return ExpressionType;
        }, set: function (v) {
          ExpressionType = v;
        }},133);
      pas.Common.GetCommonType(j,135,ExpressionType);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; --- RepeatUntilCondition","");
      $mod.GenerateRepeatUntilCondition();
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; --- RepeatUntilEpilog","");
      if (pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
      $mod.GenerateRepeatUntilEpilog();
      $mod.RestoreBreakAddress();
      Result = j;
    } else if ($tmp === 22) {
      if (pas.Common.Tok[i + 1].Kind !== 170) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
        pas.Common.CodeSize += 1;
        if (IdentIndex > 0) {
          if (!((pas.Common.Ident[IdentIndex - 1].Kind === 3) && (pas.Common.Ident[IdentIndex - 1].DataType in rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.Pointers)))) {
            pas.Messages.Error(i + 1,"Ordinal variable expected as 'FOR' loop counter")}
           else if (pas.Common.Ident[IdentIndex - 1].isInitialized || (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VALPASSING)) {
            pas.Messages.Error(i + 1,"Simple local variable expected as FOR loop counter")}
           else {
            pas.Common.Ident[IdentIndex - 1].LoopVariable = true;
            if (pas.Common.codealign.loop > 0) {
              pas.Optimize.asm65("","");
              pas.Optimize.asm65("\tjmp @+","");
              pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.loop,4),"");
              pas.Optimize.asm65("@","");
              pas.Optimize.asm65("","");
            };
            if (pas.Common.Tok[i + 2].Kind === 114) {
              j = i + 3;
              if (pas.Common.Tok[j].Kind === 174) {
                $mod.StartOptimization(j);
                k = pas.Common.Tok[j].StrLength;
                if (k !== 0) {
                  pas.Optimize.asm65("\tlda #-" + pas.Common.IntToStr(k),"");
                  pas.Optimize.asm65("\tsta l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "+1","");
                };
                $mod.GenerateRepeatUntilProlog();
                $mod.SaveBreakAddress();
                pas.Optimize.asm65("; --- ForToDoCondition","");
                $mod.StartOptimization(j);
                pas.Optimize.ResetOpty();
                if (k !== 0) {
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tlda $" + pas.SysUtils.IntToHex((pas.Common.Tok[j].StrAddress - 256) + pas.Common.CODEORIGIN_BASE + 1,4) + "+" + pas.Common.IntToStr(k) + "-256,y","");
                  pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,""),"");
                } else pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop] + 3,4),"");
                pas.Common.CheckTok(j + 1,19);
                pas.Common.CodePosStackTop += 1;
                pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
                j = $mod.CompileStatement(j + 2,false);
                pas.Optimize.asm65("","");
                pas.Optimize.asm65("; --- ForToDoEpilog","");
                if (pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
                if (k !== 0) {
                  pas.Optimize.asm65("\tinc l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop - 1],4) + "+1","");
                  pas.Optimize.asm65("\tseq","");
                };
                $mod.GenerateWhileDoEpilog();
                $mod.RestoreBreakAddress();
                Result = j;
              } else {
                if (pas.Common.Tok[j].Kind !== 170) pas.Messages.Error$2(j,pas.Messages.TErrorCode.IdentifierExpected);
                IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[j].Name);
                ActualParamType = pas.Common.Ident[IdentTemp - 1].DataType;
                VarType = pas.Common.Ident[IdentTemp - 1].AllocElementType;
                k = pas.Parser.Elements(IdentTemp);
                if ((k * pas.Common.DataSize[VarType - 128]) > 256) pas.Messages.Error(j,"only arrays with a maximum of 256 bytes");
                if ((ActualParamType !== 137) && !(pas.Common.Ident[IdentTemp - 1].IdType in rtl.createSet(30,32,174))) pas.Messages.Error(j,"for-in statement cannot operate on collection type '" + pas.Common.InfoAboutToken(ActualParamType) + "'");
                if ((VarType in rtl.createSet(139)) && (pas.Common.Ident[IdentIndex - 1].DataType === 136)) {}
                else pas.Common.GetCommonType(i,pas.Common.Ident[IdentIndex - 1].DataType,VarType);
                $mod.StartOptimization(j);
                if (ActualParamType === 137) {
                  pas.Optimize.asm65("\tlda #$00","")}
                 else pas.Optimize.asm65("\tlda #-" + pas.Common.IntToStr(k),"");
                pas.Optimize.asm65("\tsta l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "+1","");
                $mod.GenerateRepeatUntilProlog();
                $mod.SaveBreakAddress();
                pas.Optimize.asm65("; --- ForToDoCondition","");
                $mod.StartOptimization(j);
                pas.Optimize.ResetOpty();
                if (ActualParamType === 137) {
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tcpy adr." + $mod.GetLocalName(IdentTemp,""),"");
                  pas.Optimize.asm65("\tjeq l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop] + 3,4),"");
                  pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+1,y","");
                  pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,""),"");
                } else {
                  var $tmp14 = pas.Common.DataSize[VarType - 128];
                  if ($tmp14 === 1) {
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,""),"");
                  } else if ($tmp14 === 2) {
                    pas.Optimize.asm65("\tlda #$00","");
                    pas.Optimize.asm65("\tasl @","");
                    pas.Optimize.asm65("\ttay","");
                    k = k * 2;
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,""),"");
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256+1,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,"") + "+1","");
                  } else if ($tmp14 === 4) {
                    pas.Optimize.asm65("\tlda #$00","");
                    pas.Optimize.asm65("\tasl @","");
                    pas.Optimize.asm65("\tasl @","");
                    pas.Optimize.asm65("\ttay","");
                    k = k * 4;
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,""),"");
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256+1,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,"") + "+1","");
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256+2,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,"") + "+2","");
                    pas.Optimize.asm65("\tlda adr." + $mod.GetLocalName(IdentTemp,"") + "+" + pas.Common.IntToStr(k) + "-256+3,y","");
                    pas.Optimize.asm65("\tsta " + $mod.GetLocalName(IdentIndex,"") + "+3","");
                  };
                };
                pas.Common.CheckTok(j + 1,19);
                pas.Common.CodePosStackTop += 1;
                pas.Common.CodePosStack[pas.Common.CodePosStackTop] = pas.Common.CodeSize;
                j = $mod.CompileStatement(j + 2,false);
                pas.Optimize.asm65("","");
                pas.Optimize.asm65("; --- ForToDoEpilog","");
                if (pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
                pas.Optimize.asm65("\tinc l_" + pas.SysUtils.IntToHex(pas.Common.CodePosStack[pas.Common.CodePosStackTop - 1],4) + "+1","");
                pas.Optimize.asm65("\tseq","");
                $mod.GenerateWhileDoEpilog();
                $mod.RestoreBreakAddress();
                Result = j;
              };
            } else {
              pas.Common.CheckTok(i + 2,25);
              j = i + 3;
              $mod.StartOptimization(j);
              forLoop.begin_const = false;
              forLoop.end_const = false;
              forBPL = 0;
              if ($mod.SafeCompileConstExpression({get: function () {
                  return j;
                }, set: function (v) {
                  j = v;
                }},{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  ConstVal = v;
                }},{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  ExpressionType = v;
                }},pas.Common.Ident[IdentIndex - 1].DataType,true,true)) {
                $mod.Push(ConstVal,0,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,0);
                forLoop.begin_value = ConstVal;
                forLoop.begin_const = true;
                forBPL = (ConstVal < 128) + 0;
              } else {
                j = $mod.CompileExpression(j,{get: function () {
                    return ExpressionType;
                  }, set: function (v) {
                    ExpressionType = v;
                  }},pas.Common.Ident[IdentIndex - 1].DataType);
                $mod.ExpandParam(pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType);
              };
              if (!(ExpressionType in pas.Common.OrdinalTypes)) pas.Messages.Error$2(j,pas.Messages.TErrorCode.OrdinalExpectedFOR);
              ActualParamType = ExpressionType;
              $mod.GenerateAssignment(1,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],IdentIndex,"","");
              if (!(pas.Common.Tok[j + 1].Kind in rtl.createSet(23,24))) {
                pas.Messages.Error(j + 1,"'TO' or 'DOWNTO' expected but " + pas.Common.GetSpelling(j + 1) + " found")}
               else {
                Down = pas.Common.Tok[j + 1].Kind === 24;
                j += 2;
                $mod.StartOptimization(j);
                IdentTemp = -1;
                if ($mod.SafeCompileConstExpression({get: function () {
                    return j;
                  }, set: function (v) {
                    j = v;
                  }},{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    ConstVal = v;
                  }},{get: function () {
                    return ExpressionType;
                  }, set: function (v) {
                    ExpressionType = v;
                  }},pas.Common.Ident[IdentIndex - 1].DataType,true,true)) {
                  $mod.Push(ConstVal,0,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,0);
                  pas.Parser.DefineIdent(j,"@FORTMP_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),1,pas.Common.Ident[IdentIndex - 1].DataType,pas.Common.Ident[IdentIndex - 1].NumAllocElements,pas.Common.Ident[IdentIndex - 1].AllocElementType,ConstVal,pas.Common.Tok[j].Kind);
                  forLoop.end_value = ConstVal;
                  forLoop.end_const = true;
                  if (ConstVal > 0) forBPL = forBPL | 2;
                } else {
                  if (((pas.Common.Tok[j].Kind === 170) && (pas.Common.Tok[j + 1].Kind === 19)) || ((pas.Common.Tok[j].Kind === 54) && (pas.Common.Tok[j + 1].Kind === 170) && (pas.Common.Tok[j + 2].Kind === 55) && (pas.Common.Tok[j + 3].Kind === 19))) {
                    if (pas.Common.Tok[j].Kind === 170) {
                      IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[j].Name)}
                     else IdentTemp = pas.Parser.GetIdentIndex(pas.Common.Tok[j + 1].Name);
                    j = $mod.CompileExpression(j,{get: function () {
                        return ExpressionType;
                      }, set: function (v) {
                        ExpressionType = v;
                      }},pas.Common.Ident[IdentIndex - 1].DataType);
                    $mod.ExpandParam(pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType);
                  } else {
                    j = $mod.CompileExpression(j,{get: function () {
                        return ExpressionType;
                      }, set: function (v) {
                        ExpressionType = v;
                      }},pas.Common.Ident[IdentIndex - 1].DataType);
                    $mod.ExpandParam(pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType);
                    pas.Parser.DefineIdent(j,"@FORTMP_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),3,pas.Common.Ident[IdentIndex - 1].DataType,pas.Common.Ident[IdentIndex - 1].NumAllocElements,pas.Common.Ident[IdentIndex - 1].AllocElementType,1,170);
                  };
                };
                if (!(ExpressionType in pas.Common.OrdinalTypes)) pas.Messages.Error$2(j,pas.Messages.TErrorCode.OrdinalExpectedFOR);
                if (((ActualParamType in pas.Common.UnsignedOrdinalTypes) && (ExpressionType in pas.Common.UnsignedOrdinalTypes)) || ((ActualParamType in pas.Common.SignedOrdinalTypes) && (ExpressionType in pas.Common.SignedOrdinalTypes))) {
                  if (pas.Common.DataSize[ExpressionType - 128] > pas.Common.DataSize[ActualParamType - 128]) ActualParamType = ExpressionType;
                  if (pas.Common.DataSize[ActualParamType - 128] > pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128]) ActualParamType = pas.Common.Ident[IdentIndex - 1].DataType;
                } else ActualParamType = pas.Common.Ident[IdentIndex - 1].DataType;
                if (IdentTemp < 0) IdentTemp = pas.Parser.GetIdentIndex("@FORTMP_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4));
                $mod.GenerateAssignment(1,pas.Common.DataSize[ActualParamType - 128],IdentTemp,"","");
                pas.Optimize.asm65("","");
                if (pas.Common.LoopUnroll && forLoop.begin_const && forLoop.end_const) {}
                else $mod.GenerateRepeatUntilProlog();
                $mod.SaveBreakAddress();
                pas.Optimize.asm65("; --- ForToDoCondition","");
                if ((ActualParamType === ExpressionType) && (pas.Common.DataSize[pas.Common.Ident[IdentTemp - 1].DataType - 128] > pas.Common.DataSize[ActualParamType - 128])) pas.Messages.Note(j,"FOR loop counter variable type is of larger size than required");
                $mod.StartOptimization(j);
                pas.Optimize.ResetOpty();
                yes = true;
                if (pas.Common.LoopUnroll && forLoop.begin_const && forLoop.end_const) {
                  pas.Common.CheckTok(j + 1,19);
                  ConstVal = forLoop.begin_value;
                  if (((Down === false) && (forLoop.end_value >= forLoop.begin_value)) || (Down && (forLoop.end_value <= forLoop.begin_value))) {
                    while (ConstVal !== forLoop.end_value) {
                      pas.Optimize.ResetOpty();
                      $mod.CompileStatement(j + 2,false);
                      if (yes) {
                        if (Down) {
                          pas.Optimize.asm65("---unroll---","")}
                         else pas.Optimize.asm65("+++unroll+++","");
                        yes = false;
                      } else pas.Optimize.asm65("===unroll===","");
                      if (Down) {
                        ConstVal -= 1}
                       else ConstVal += 1;
                      var $tmp15 = pas.Common.DataSize[ActualParamType - 128];
                      if ($tmp15 === 1) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(ConstVal & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,""),"");
                      } else if ($tmp15 === 2) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(ConstVal & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,""),"");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 256) & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+1","");
                      } else if ($tmp15 === 4) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(ConstVal & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,""),"");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 256) & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+1","");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 65536) & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+2","");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 16777216) & 255,2),"");
                        pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+3","");
                      };
                    };
                    pas.Optimize.ResetOpty();
                    j = $mod.CompileStatement(j + 2,false);
                    pas.Optimize.asm65("===unroll===","");
                    pas.Common.optyY = "";
                    var $tmp16 = pas.Common.DataSize[ActualParamType - 128];
                    if ($tmp16 === 1) {
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(ConstVal & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,""),"");
                    } else if ($tmp16 === 2) {
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(ConstVal & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,""),"");
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 256) & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+1","");
                    } else if ($tmp16 === 4) {
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(ConstVal & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,""),"");
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 256) & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+1","");
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 65536) & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+2","");
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(Math.floor(ConstVal / 16777216) & 255,2),"");
                      pas.Optimize.asm65("\tsty " + $mod.GetLocalName(IdentIndex,"") + "+3","");
                    };
                  } else pas.Messages.Error(j,"for loop with invalid range");
                } else {
                  $mod.Push(pas.Common.Ident[IdentTemp - 1].Value,1,pas.Common.DataSize[ActualParamType - 128],IdentTemp,0);
                  $mod.GenerateForToDoCondition(ActualParamType,Down,IdentIndex);
                  pas.Common.CheckTok(j + 1,19);
                  $mod.GenerateForToDoProlog();
                  j = $mod.CompileStatement(j + 2,false);
                };
                pas.Optimize.asm65("","");
                pas.Optimize.asm65("; --- ForToDoEpilog","");
                if (pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
                if (pas.Common.LoopUnroll && forLoop.begin_const && forLoop.end_const) {}
                else $mod.GenerateForToDoEpilog(ActualParamType,Down,IdentIndex,true,forBPL);
                $mod.RestoreBreakAddress();
                Result = j;
              };
            };
            pas.Common.Ident[IdentIndex - 1].LoopVariable = false;
          }}
         else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
      };
    } else if ($tmp === 73) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(138,148)) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(138,148)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        pas.Common.CheckTok(i + 3,52);
        $mod.StartOptimization(i + 4);
        if (pas.Common.Tok[i + 4].Kind === 174) pas.Messages.Note(i + 4,"Only uppercase letters preceded by the drive symbol, like 'D:FILENAME.EXT' or 'S:'");
        i = $mod.CompileExpression(i + 4,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.GetCommonType(i,136,ActualParamType);
        $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.pfname");
        $mod.StartOptimization(i);
        $mod.Push(0,0,pas.Common.DataSize[0],0,0);
        $mod.GenerateAssignment(2,1,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.status");
        if ((pas.Common.Ident[IdentIndex - 1].DataType === 148) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 148)) {
          pas.Optimize.asm65("\tldy #s@file.buffer","");
          pas.Optimize.asm65("\tlda <@buf","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda >@buf","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
        Result = i + 1;
      }}
     else if ($tmp === 74) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(138,148)) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(138,148)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        $mod.StartOptimization(i + 3);
        if (pas.Common.Tok[i + 3].Kind !== 52) {
          if ((pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]) === 0) {
            $mod.Push(128,0,2,0,0)}
           else $mod.Push((pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]) & 0xFFFFFFFF,0,2,0,0);
          i += 3;
        } else {
          if ((pas.Common.Ident[IdentIndex - 1].DataType === 148) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 148)) pas.Messages.Error(i,'Call by var for arg no. 1 has to match exactly: Got "' + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].DataType) + '" expected "File"');
          i = $mod.CompileExpression(i + 4,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,129,ActualParamType);
          $mod.ExpandParam(129,ActualParamType);
          i += 1;
        };
        pas.Common.CheckTok(i,55);
        $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.record");
        $mod.GenerateFileOpen(IdentIndex,pas.Common.TIOCode.FileMode);
        Result = i;
      }}
     else if ($tmp === 75) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(138,148)) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(138,148)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        $mod.StartOptimization(i + 3);
        if (pas.Common.Tok[i + 3].Kind !== 52) {
          if ((pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]) === 0) {
            $mod.Push(128,0,2,0,0)}
           else $mod.Push((pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128]) & 0xFFFFFFFF,0,2,0,0);
          i += 3;
        } else {
          if ((pas.Common.Ident[IdentIndex - 1].DataType === 148) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 148)) pas.Messages.Error(i,'Call by var for arg no. 1 has to match exactly: Got "' + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].DataType) + '" expected "File"');
          i = $mod.CompileExpression(i + 4,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,129,ActualParamType);
          $mod.ExpandParam(129,ActualParamType);
          i += 1;
        };
        pas.Common.CheckTok(i,55);
        $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.record");
        $mod.GenerateFileOpen(IdentIndex,pas.Common.TIOCode.OpenWrite);
        Result = i;
      }}
     else if ($tmp === 76) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(148)) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(148)))) pas.Messages.Error(i,'Call by var for arg no. 1 has to match exactly: Got "' + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].DataType) + '" expected "Text"');
        if (pas.Common.Tok[i + 3].Kind === 52) pas.Messages.Error(i,"Wrong number of parameters specified for call to Append");
        $mod.StartOptimization(i + 3);
        pas.Common.CheckTok(i + 3,55);
        $mod.Push(1,0,2,0,0);
        $mod.GenerateAssignment(2,2,0,pas.Common.Ident[IdentIndex - 1].Name,"s@file.record");
        $mod.GenerateFileOpen(IdentIndex,pas.Common.TIOCode.Append);
        Result = i + 3;
      }}
     else if ($tmp === 80) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (pas.Common.Ident[IdentIndex - 1].DataType !== 136) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        pas.Common.CheckTok(i + 3,52);
        pas.Common.CheckTok(i + 4,174);
        svar = "";
        for (var $l1 = 1, $end = pas.Common.Tok[i + 4].StrLength; $l1 <= $end; $l1++) {
          k = $l1;
          svar = svar + String.fromCharCode(pas.Common.StaticStringData[(pas.Common.Tok[i + 4].StrAddress - 256) + k]);
        };
        pas.Common.CheckTok(i + 5,55);
        pas.Optimize.asm65("\tlda <MAIN.@RESOURCE." + svar,"");
        pas.Optimize.asm65("\tsta " + pas.Common.Tok[i + 2].Name,"");
        pas.Optimize.asm65("\tlda >MAIN.@RESOURCE." + svar,"");
        pas.Optimize.asm65("\tsta " + pas.Common.Tok[i + 2].Name + "+1","");
        i += 5;
        Result = i;
      }}
     else if ($tmp === 81) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.IntegerTypes)) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        pas.Common.CheckTok(i + 3,52);
        pas.Common.CheckTok(i + 4,174);
        svar = "";
        for (var $l2 = 1, $end1 = pas.Common.Tok[i + 4].StrLength; $l2 <= $end1; $l2++) {
          k = $l2;
          svar = svar + String.fromCharCode(pas.Common.StaticStringData[(pas.Common.Tok[i + 4].StrAddress - 256) + k]);
        };
        pas.Common.CheckTok(i + 5,55);
        pas.Optimize.asm65("\tlda <MAIN.@RESOURCE." + svar + ".end-MAIN.@RESOURCE." + svar,"");
        pas.Optimize.asm65("\tsta " + pas.Common.Tok[i + 2].Name,"");
        pas.Optimize.asm65("\tlda >MAIN.@RESOURCE." + svar + ".end-MAIN.@RESOURCE." + svar,"");
        pas.Optimize.asm65("\tsta " + pas.Common.Tok[i + 2].Name + "+1","");
        i += 5;
        Result = i;
      }}
     else if ($tmp === 77) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType === 138) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 138))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        pas.Common.CheckTok(i + 3,52);
        i += 2;
        NumActualParams = $mod.CompileBlockRead({get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }},IdentIndex,pas.Parser.GetIdentIndex("BLOCKREAD"));
        $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.Read,NumActualParams);
        Result = i;
      }}
     else if ($tmp === 78) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType === 138) || (pas.Common.Ident[IdentIndex - 1].AllocElementType === 138))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        pas.Common.CheckTok(i + 3,52);
        i += 2;
        NumActualParams = $mod.CompileBlockRead({get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }},IdentIndex,pas.Parser.GetIdentIndex("BLOCKWRITE"));
        $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.Write,NumActualParams);
        Result = i;
      }}
     else if ($tmp === 79) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
       else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!((pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(138,148)) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(138,148)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
        pas.Common.CheckTok(i + 3,55);
        $mod.GenerateFileOpen(IdentIndex,pas.Common.TIOCode.Close);
        Result = i + 3;
      }}
     else if ($tmp === 27) {
      if (pas.Common.Tok[i + 1].Kind !== 54) {
        if (pas.Common.Tok[i + 1].Kind === 53) {
          $mod.GenerateRead();
          Result = i;
        } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected);
      } else if (pas.Common.Tok[i + 2].Kind !== 170) {
        pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
       else {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
        if ((IdentIndex > 0) && (pas.Common.Ident[IdentIndex - 1].DataType === 148)) {
          pas.Optimize.asm65("\tlda #eol","");
          pas.Optimize.asm65("\tsta @buf","");
          $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.ReadRecord,0);
          i += 3;
          pas.Common.CheckTok(i,52);
          pas.Common.CheckTok(i + 1,170);
          if (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name) - 1].DataType !== 137) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected);
          IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
          pas.Optimize.asm65("\t@moveRECORD " + $mod.GetLocalName(IdentIndex,""),"");
          pas.Common.CheckTok(i + 2,55);
          Result = i + 2;
        } else if (IdentIndex > 0) {
          if (pas.Common.Ident[IdentIndex - 1].Kind !== 3) {
            pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
           else {
            $mod.GenerateRead();
            pas.Optimize.ResetOpty();
            if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && (pas.Common.Ident[IdentIndex - 1].AllocElementType === 134)) {
              pas.Optimize.asm65("\t@move #@buf #" + $mod.GetLocalName(IdentIndex,"adr.") + " #" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements),"");
            } else if (pas.Common.Ident[IdentIndex - 1].DataType === 134) {
              pas.Optimize.asm65("\tmva @buf+1 " + pas.Common.Ident[IdentIndex - 1].Name,"")}
             else if (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.IntegerTypes) {
              pas.Optimize.asm65("\t@StrToInt #@buf","");
              var $tmp17 = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128];
              if ($tmp17 === 1) {
                pas.Optimize.asm65("\tmva :edx " + pas.Common.Ident[IdentIndex - 1].Name,"")}
               else if ($tmp17 === 2) {
                pas.Optimize.asm65("\tmva :edx " + pas.Common.Ident[IdentIndex - 1].Name,"");
                pas.Optimize.asm65("\tmva :edx+1 " + pas.Common.Ident[IdentIndex - 1].Name + "+1","");
              } else if ($tmp17 === 4) {
                pas.Optimize.asm65("\tmva :edx " + pas.Common.Ident[IdentIndex - 1].Name,"");
                pas.Optimize.asm65("\tmva :edx+1 " + pas.Common.Ident[IdentIndex - 1].Name + "+1","");
                pas.Optimize.asm65("\tmva :edx+2 " + pas.Common.Ident[IdentIndex - 1].Name + "+2","");
                pas.Optimize.asm65("\tmva :edx+3 " + pas.Common.Ident[IdentIndex - 1].Name + "+3","");
              };
            } else pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
            pas.Common.CheckTok(i + 3,55);
            Result = i + 3;
          }}
         else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
      }}
     else if (($tmp === 26) || ($tmp === 82)) {
      $mod.StartOptimization(i);
      yes = pas.Common.Tok[i].Kind === 82;
      if ((pas.Common.Tok[i + 1].Kind === 54) && (pas.Common.Tok[i + 2].Kind === 55)) i += 2;
      if (pas.Common.Tok[i + 1].Kind === 53) {}
      else {
        pas.Common.CheckTok(i + 1,54);
        i += 1;
        if ((pas.Common.Tok[i + 1].Kind === 170) && (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name) - 1].DataType === 148)) {
          IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
          i += 1;
          pas.Common.CheckTok(i + 1,52);
          i += 1;
          var $tmp18 = pas.Common.Tok[i + 1].Kind;
          if ($tmp18 === 170) {
            if (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name) - 1].DataType !== 137) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected);
            pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name),"") + " :bp2","");
            pas.Optimize.asm65("\tldy #$01","");
            pas.Optimize.asm65("\tmva:rne (:bp2),y @buf-1,y+","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            if (yes) {
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda #eol","");
              pas.Optimize.asm65("\tsta @buf,y","");
              pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
              pas.Optimize.asm65("\tldy #s@file.nrecord","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda #$01","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.WriteRecord,0);
            } else {
              pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
              pas.Optimize.asm65("\tldy #s@file.nrecord","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.Write,0);
            };
            i += 2;
          } else if ($tmp18 === 174) {
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tmva:rne CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.Tok[i + 1].StrAddress - 256) + 1,4) + ",y @buf,y+","");
            if (yes) {
              pas.Optimize.asm65("\tlda #eol","");
              pas.Optimize.asm65("\tldy CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 1].StrAddress - 256,4),"");
              pas.Optimize.asm65("\tsta @buf,y","");
              pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
              pas.Optimize.asm65("\tldy #s@file.nrecord","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda #$01","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.WriteRecord,0);
            } else {
              pas.Optimize.asm65("\tlda CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Tok[i + 1].StrAddress - 256,4),"");
              pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
              pas.Optimize.asm65("\tldy #s@file.nrecord","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.Write,0);
            };
            i += 2;
          } else if ($tmp18 === 171) {
            pas.Optimize.asm65("\ttxa:pha","");
            $mod.Push(pas.Common.Tok[i + 1].Value,0,pas.Common.DataSize[2],0,0);
            pas.Optimize.asm65("\t@ValueToRec #@printINT","");
            pas.Optimize.asm65("\tpla:tax","");
            if (yes) {
              pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
              pas.Optimize.asm65("\tldy #s@file.nrecord","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda #$01","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.WriteRecord,0);
            } else {
              pas.Optimize.asm65("\ttya","");
              pas.Optimize.asm65("\tmwy " + $mod.GetLocalName(IdentIndex,"") + " :bp2","");
              pas.Optimize.asm65("\tldy #s@file.nrecord","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              $mod.GenerateFileRead(IdentIndex,pas.Common.TIOCode.Write,0);
            };
            i += 2;
          };
          yes = false;
        } else do {
          var $tmp19 = pas.Common.Tok[i + 1].Kind;
          if ($tmp19 === 173) {
            i += 1;
            do {
              pas.Optimize.asm65("\t@print #$" + pas.SysUtils.IntToHex(pas.Common.Tok[i].Value,2),"");
              i += 1;
            } while (!(pas.Common.Tok[i].Kind !== 173));
          } else if ($tmp19 === 174) {
            do {
              $mod.GenerateWriteString(pas.Common.Tok[i + 1].StrAddress,1,133);
              i += 2;
            } while (!(pas.Common.Tok[i + 1].Kind !== 174))}
           else {
            j = i + 1;
            i = $mod.CompileExpression(j,{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},133);
            if ((ExpressionType === 134) && (pas.Common.Tok[i].Kind === 56) && (pas.Common.Tok[i - 1].Kind !== 170)) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            };
            if (ExpressionType in pas.Common.IntegerTypes) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,0,ExpressionType)}
             else if (ExpressionType === 135) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,7,133)}
             else if (ExpressionType === 134) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,6,133)}
             else if (ExpressionType === 142) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,8,133)}
             else if (ExpressionType === 141) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,9,133)}
             else if (ExpressionType === 144) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,10,133)}
             else if (ExpressionType === 143) {
              $mod.GenerateWriteString(pas.Common.Tok[i].Value,11,133)}
             else if (ExpressionType in pas.Common.Pointers) {
              if (pas.Common.Tok[j].Kind === 57) {
                IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[j + 1].Name)}
               else if (pas.Common.Tok[j].Kind === 170) {
                IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[j].Name)}
               else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
              if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 147) {
                IdentTemp = pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].NumAllocElements_,4));
                if (pas.Common.Ident[IdentTemp - 1].Kind === 5) {
                  ExpressionType = pas.Common.Ident[IdentTemp - 1].DataType}
                 else ExpressionType = 0;
                if (ExpressionType === 137) {
                  $mod.GenerateWriteString(pas.Common.Ident[IdentIndex - 1].Value,2,136)}
                 else if (ExpressionType in pas.Common.IntegerTypes) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,0,ExpressionType)}
                 else if (ExpressionType === 135) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,7,133)}
                 else if (ExpressionType === 134) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,6,133)}
                 else if (ExpressionType === 142) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,8,133)}
                 else if (ExpressionType === 141) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,9,133)}
                 else if (ExpressionType === 144) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,10,133)}
                 else if (ExpressionType === 143) {
                  $mod.GenerateWriteString(pas.Common.Tok[i].Value,11,133)}
                 else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
              } else if ((ExpressionType === 137) || (pas.Common.Ident[IdentIndex - 1].Kind === 5) || ((ExpressionType === 136) && (pas.Common.Ident[IdentIndex - 1].DataType === 137))) {
                $mod.GenerateWriteString(pas.Common.Ident[IdentIndex - 1].Value,2,pas.Common.Ident[IdentIndex - 1].DataType)}
               else if ((ExpressionType === 145) || (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(134,136))) {
                $mod.GenerateWriteString(pas.Common.Ident[IdentIndex - 1].Value,12,pas.Common.Ident[IdentIndex - 1].DataType)}
               else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
            } else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
            i += 1;
          };
          j = 0;
          ActualParamType = ExpressionType;
          if (pas.Common.Tok[i].Kind === 60) do {
            i = $mod.CompileExpression(i + 1,{get: function () {
                return ExpressionType;
              }, set: function (v) {
                ExpressionType = v;
              }},133);
            $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
            i += 1;
            j += 1;
            if (j > (2 - ((ActualParamType in pas.Common.OrdinalTypes) + 0))) pas.Messages.Error(i + 1,"Illegal use of ':'");
          } while (!(pas.Common.Tok[i].Kind !== 60));
        } while (!(pas.Common.Tok[i].Kind !== 52));
        pas.Common.CheckTok(i,55);
      };
      if (yes) $mod.a65(pas.Common.TCode65.putEOL,0,1,4,0);
      $mod.StopOptimization();
      Result = i;
    } else if ($tmp === 37) {
      pas.Optimize.ResetOpty();
      $mod.StopOptimization();
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; -------------------  ASM Block " + pas.SysUtils.Format("%.8d",pas.System.VarRecs(0,pas.Common.AsmBlockIndex)) + "  -------------------","");
      pas.Optimize.asm65("","");
      if (pas.Common.isInterrupt && ((pas.System.Pos(" :bp",pas.Common.AsmBlock[pas.Common.AsmBlockIndex]) > 0) || (pas.System.Pos(" :STACK",pas.Common.AsmBlock[pas.Common.AsmBlockIndex]) > 0))) {
        if (pas.System.Pos(" :bp",pas.Common.AsmBlock[pas.Common.AsmBlockIndex]) > 0) pas.Messages.Error(i,"Illegal instruction in INTERRUPT block ':BP'");
        if (pas.System.Pos(" :STACK",pas.Common.AsmBlock[pas.Common.AsmBlockIndex]) > 0) pas.Messages.Error(i,"Illegal instruction in INTERRUPT block ':STACKORIGIN'");
      };
      pas.Optimize.asm65("#asm:" + pas.Common.IntToStr(pas.Common.AsmBlockIndex),"");
      pas.Common.AsmBlockIndex += 1;
      if (isAsm && (pas.Common.Tok[i].Value === 0)) {
        pas.Common.CheckTok(i + 1,53);
        i += 1;
        pas.Common.CheckTok(i + 1,14);
        i += 1;
      };
      Result = i;
    } else if (($tmp === 33) || ($tmp === 34)) {
      Value = 0;
      ExpressionType = 0;
      NumActualParams = 0;
      Down = pas.Common.Tok[i].Kind === 34;
      pas.Common.CheckTok(i + 1,54);
      i += 2;
      if (pas.Common.Tok[i].Kind === 170) {
        IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name);
        $mod.CheckAssignment(i,IdentIndex);
        if (IdentIndex === 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
        if (pas.Common.Ident[IdentIndex - 1].Kind === 3) {
          ExpressionType = pas.Common.Ident[IdentIndex - 1].DataType;
          if (ExpressionType === 134) ExpressionType = 128;
          if (pas.Common.Ident[IdentIndex - 1].DataType === 142) {
            pas.Messages.Error(i,"Left side cannot be assigned to")}
           else {
            Value = pas.Common.Ident[IdentIndex - 1].Value;
            if (ExpressionType in pas.Common.Pointers) {
              ExpressionType = 129;
              if (pas.System.Pos("mw? " + pas.Common.Tok[i].Name,pas.Common.optyBP2) > 0) pas.Common.optyBP2 = "";
            };
          };
        } else pas.Messages.Error(i,"Left side cannot be assigned to");
      } else pas.Messages.Error$2(i,pas.Messages.TErrorCode.IdentifierExpected);
      $mod.StartOptimization(i);
      IndirectionLevel = 1;
      if (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) {
        ExpressionType = 129}
       else ExpressionType = pas.Common.Ident[IdentIndex - 1].DataType;
      if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 142) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
      if (!(pas.Common.Ident[IdentIndex - 1].IdType in rtl.createSet(145)) && (pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) && !(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) {
        if (pas.Common.Tok[i + 1].Kind === 58) {
          ExpressionType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
          IndirectionLevel = 3;
          i = $mod.CompileArrayIndex(i,IdentIndex);
          pas.Common.CheckTok(i + 1,59);
          i += 1;
        } else if (pas.Common.Tok[i + 1].Kind === 56) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IllegalQualifier)}
         else pas.Messages.ErrorIncompatibleTypes(i + 1,pas.Common.Ident[IdentIndex - 1].DataType,ExpressionType,false);
      } else if (pas.Common.Tok[i + 1].Kind === 58) {
        ExpressionType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
        IndirectionLevel = 3;
        i = $mod.CompileArrayIndex(i,IdentIndex);
        pas.Common.CheckTok(i + 1,59);
        i += 1;
      } else if (pas.Common.Tok[i + 1].Kind === 56) if (pas.Common.Ident[IdentIndex - 1].AllocElementType === 0) {
        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp)}
       else {
        ExpressionType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
        IndirectionLevel = 2;
        i += 1;
      };
      if (pas.Common.Tok[i + 1].Kind === 52) {
        j = i + 2;
        yes = false;
        if ($mod.SafeCompileConstExpression({get: function () {
            return j;
          }, set: function (v) {
            j = v;
          }},{get: function () {
            return ConstVal;
          }, set: function (v) {
            ConstVal = v;
          }},{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},pas.Common.Ident[IdentIndex - 1].DataType,true,true)) {
          yes = true}
         else j = $mod.CompileExpression(j,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        i = j;
        pas.Common.GetCommonType(i,ExpressionType,ActualParamType);
        NumActualParams += 1;
        if (pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) {
          if (yes === false) $mod.ExpandParam(ExpressionType,ActualParamType);
          if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) {
            if (yes) {
              $mod.Push(ConstVal * pas.Parser.RecordSize(IdentIndex,""),0,2,0,0)}
             else pas.Messages.Error(i,"-- under construction --");
          } else if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in pas.Common.OrdinalTypes) && (IndirectionLevel !== 2)) {
            if (yes) {
              if (IndirectionLevel === 3) {
                $mod.Push(ConstVal,0,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,0)}
               else $mod.Push(ConstVal * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128],0,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,0);
            } else $mod.GenerateIndexShift(pas.Common.Ident[IdentIndex - 1].AllocElementType,0);
          } else if (yes) $mod.Push(ConstVal,0,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,0);
        } else {
          if (yes) $mod.Push(ConstVal,0,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,0);
          ExpressionType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
          if (ExpressionType === 0) ExpressionType = pas.Common.Ident[IdentIndex - 1].DataType;
          $mod.ExpandParam(ExpressionType,ActualParamType);
        };
      } else if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.unionSet(rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.Pointers),rtl.createSet(139,140))))) if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) || (IndirectionLevel === 2) || ((pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0) && (IndirectionLevel === 3))) {
        ExpressionType = pas.Common.Ident[IdentIndex - 1].AllocElementType;
        if (ExpressionType === 0) ExpressionType = pas.Common.Ident[IdentIndex - 1].DataType;
        if (ExpressionType in rtl.createSet(139,140)) {
          $mod.Push(pas.Parser.RecordSize(IdentIndex,""),0,2,0,0)}
         else $mod.Push(1,0,pas.Common.DataSize[ExpressionType - 128],0,0);
        NumActualParams += 1;
      } else if (!(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(128,131))) {
        $mod.Push(pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128],0,1,0,0);
        $mod.ExpandParam(ExpressionType,128);
        NumActualParams += 1;
      };
      if ((pas.Common.Ident[IdentIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) && (IndirectionLevel !== 3)) IndirectionLevel = 2;
      if (ExpressionType === 0) pas.Messages.Error(i,"Assignments to formal parameters and open arrays are not possible");
      if (NumActualParams === 0) {
        pas.Optimize.asm65("","");
        if (Down) {
          pas.Optimize.asm65("; Dec(var X) -> " + pas.Common.InfoAboutToken(ExpressionType),"")}
         else pas.Optimize.asm65("; Inc(var X) -> " + pas.Common.InfoAboutToken(ExpressionType),"");
        pas.Optimize.asm65("","");
        $mod.GenerateForToDoEpilog(ExpressionType,Down,IdentIndex,false,0);
      } else $mod.GenerateIncDec(IndirectionLevel,ExpressionType,Down,IdentIndex);
      $mod.StopOptimization();
      i += 1;
      pas.Common.CheckTok(i,55);
      Result = i;
    } else if ($tmp === 41) {
      if (pas.Common.Tok[i + 1].Kind === 54) {
        $mod.StartOptimization(i);
        i = $mod.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            ActualParamType = v;
          }},133);
        pas.Common.CheckTok(i + 1,55);
        i += 1;
        yes = false;
        for (var $l3 = 1, $end2 = pas.Common.NumIdent; $l3 <= $end2; $l3++) {
          j = $l3;
          if ((pas.Common.Ident[j - 1].ProcAsBlock === pas.Common.BlockStack[pas.Common.BlockStackTop]) && (pas.Common.Ident[j - 1].Kind === 5)) {
            IdentIndex = $mod.GetIdentResult(pas.Common.BlockStack[pas.Common.BlockStackTop]);
            yes = true;
            break;
          };
        };
        if (!yes) pas.Messages.Error(i,"Procedures cannot return a value");
        if ((ActualParamType === 137) && (pas.Common.Ident[IdentIndex - 1].DataType === 136) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements === 0)) {
          pas.Messages.ErrorIncompatibleTypes(i,ActualParamType,145,false)}
         else pas.Common.GetCommonConstType(i,pas.Common.Ident[IdentIndex - 1].DataType,ActualParamType,true);
        $mod.GenerateAssignment(1,pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128],0,"RESULT","");
      };
      pas.Optimize.asm65("\tjmp @exit","");
      pas.Optimize.ResetOpty();
      Result = i;
    } else if ($tmp === 39) {
      if (pas.Common.BreakPosStackTop === 0) pas.Messages.Error(i,"BREAK not allowed");
      pas.Optimize.asm65("\tjmp b_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
      pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].brk = true;
      pas.Optimize.ResetOpty();
      Result = i;
    } else if ($tmp === 40) {
      if (pas.Common.BreakPosStackTop === 0) pas.Messages.Error(i,"CONTINUE not allowed");
      pas.Optimize.asm65("\tjmp c_" + pas.SysUtils.IntToHex(pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].ptr,4),"");
      pas.Common.BreakPosStack[pas.Common.BreakPosStackTop].cnt = true;
      Result = i;
    } else if ($tmp === 28) {
      if (pas.Common.Tok[i + 1].Kind === 54) {
        i = pas.Parser.CompileConstExpression(i + 2,{get: function () {
            return Value;
          }, set: function (v) {
            Value = v;
          }},{get: function () {
            return ExpressionType;
          }, set: function (v) {
            ExpressionType = v;
          }},133,false,true);
        pas.Common.GetCommonConstType(i,128,ExpressionType,true);
        pas.Common.CheckTok(i + 1,55);
        i += 1;
        $mod.GenerateProgramEpilog(Value);
      } else $mod.GenerateProgramEpilog(0);
      Result = i;
    } else if ($tmp === 10) {
      pas.Common.CheckTok(i + 1,54);
      i = pas.Parser.CompileConstExpression(i + 2,{get: function () {
          return ConstVal;
        }, set: function (v) {
          ConstVal = v;
        }},{get: function () {
          return ActualParamType;
        }, set: function (v) {
          ActualParamType = v;
        }},133,false,true);
      pas.Common.GetCommonType(i,133,ActualParamType);
      pas.Common.CheckTok(i + 1,52);
      if (!((ConstVal & 255) in rtl.createSet(null,0,4))) pas.Messages.Error(i,"Interrupt Number in [0..4]");
      pas.Common.CheckTok(i + 2,170);
      IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 2].Name);
      if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
      if (!(pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers)) pas.Messages.ErrorIncompatibleTypes(i + 2,pas.Common.Ident[IdentIndex - 1].DataType,136,false);
      svar = $mod.GetLocalName(IdentIndex,"");
      i += 2;
      var $tmp20 = ConstVal;
      if ($tmp20 === pas.Common.TInterruptCode.DLI) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tlda VDSLST","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda VDSLST+1","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp20 === pas.Common.TInterruptCode.VBLI) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tlda VVBLKI","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda VVBLKI+1","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp20 === pas.Common.TInterruptCode.VBLD) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tlda VVBLKD","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda VVBLKD+1","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp20 === pas.Common.TInterruptCode.TIM1) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tlda VTIMR1","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda VTIMR1+1","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp20 === pas.Common.TInterruptCode.TIM2) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tlda VTIMR2","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda VTIMR2+1","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      } else if ($tmp20 === pas.Common.TInterruptCode.TIM4) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tlda VTIMR4","");
        pas.Optimize.asm65("\tsta " + svar,"");
        pas.Optimize.asm65("\tlda VTIMR4+1","");
        pas.Optimize.asm65("\tsta " + svar + "+1","");
      };
      pas.Common.CheckTok(i + 1,55);
      Result = i + 1;
    } else if ($tmp === 11) {
      pas.Common.CheckTok(i + 1,54);
      i = pas.Parser.CompileConstExpression(i + 2,{get: function () {
          return ConstVal;
        }, set: function (v) {
          ConstVal = v;
        }},{get: function () {
          return ActualParamType;
        }, set: function (v) {
          ActualParamType = v;
        }},133,false,true);
      pas.Common.GetCommonType(i,133,ActualParamType);
      pas.Common.CheckTok(i + 1,52);
      $mod.StartOptimization(i + 1);
      if (!((ConstVal & 255) in rtl.createSet(null,0,4))) pas.Messages.Error(i,"Interrupt Number in [0..4]");
      i = $mod.CompileExpression(i + 2,{get: function () {
          return ActualParamType;
        }, set: function (v) {
          ActualParamType = v;
        }},133);
      pas.Common.GetCommonType(i,136,ActualParamType);
      var $tmp21 = ConstVal;
      if ($tmp21 === pas.Common.TInterruptCode.DLI) {
        pas.Optimize.asm65("\tmva :STACKORIGIN,x VDSLST","");
        pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VDSLST+1","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      } else if ($tmp21 === pas.Common.TInterruptCode.VBLI) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tldy #5","");
        pas.Optimize.asm65("\tsta wsync","");
        pas.Optimize.asm65("\tdey","");
        pas.Optimize.asm65("\trne","");
        pas.Optimize.asm65("\tsta VVBLKI","");
        pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsty VVBLKI+1","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      } else if ($tmp21 === pas.Common.TInterruptCode.VBLD) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tldy #5","");
        pas.Optimize.asm65("\tsta wsync","");
        pas.Optimize.asm65("\tdey","");
        pas.Optimize.asm65("\trne","");
        pas.Optimize.asm65("\tsta VVBLKD","");
        pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsty VVBLKD+1","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
      } else if ($tmp21 === pas.Common.TInterruptCode.TIM1) {
        pas.Optimize.asm65("\tsei","");
        pas.Optimize.asm65("\tmva :STACKORIGIN,x VTIMR1","");
        pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VTIMR1+1","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        if (pas.Common.Tok[i + 1].Kind === 52) {
          i = $mod.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,128,ActualParamType);
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tldy #$03","");
          pas.Optimize.asm65("\tsta AUDCTL","");
          pas.Optimize.asm65("\tsta AUDC1","");
          pas.Optimize.asm65("\tsty SKCTL","");
          pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDCTL","");
          $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          pas.Common.CheckTok(i + 1,52);
          i = $mod.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,128,ActualParamType);
          pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDF1","");
          $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          pas.Optimize.asm65("\tlda irqens","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("\tsta irqens","");
          pas.Optimize.asm65("\tsta irqen","");
          pas.Optimize.asm65("\tsta stimer","");
        } else {
          pas.Optimize.asm65("\tlda irqens","");
          pas.Optimize.asm65("\tand #$fe","");
          pas.Optimize.asm65("\tsta irqens","");
          pas.Optimize.asm65("\tsta irqen","");
        };
        pas.Optimize.asm65("\tcli","");
      } else if ($tmp21 === pas.Common.TInterruptCode.TIM2) {
        pas.Optimize.asm65("\tsei","");
        pas.Optimize.asm65("\tmva :STACKORIGIN,x VTIMR2","");
        pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VTIMR2+1","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        if (pas.Common.Tok[i + 1].Kind === 52) {
          i = $mod.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,128,ActualParamType);
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tldy #$03","");
          pas.Optimize.asm65("\tsta AUDCTL","");
          pas.Optimize.asm65("\tsta AUDC2","");
          pas.Optimize.asm65("\tsty SKCTL","");
          pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDCTL","");
          $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          pas.Common.CheckTok(i + 1,52);
          i = $mod.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,128,ActualParamType);
          pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDF2","");
          $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          pas.Optimize.asm65("\tlda irqens","");
          pas.Optimize.asm65("\tora #$02","");
          pas.Optimize.asm65("\tsta irqens","");
          pas.Optimize.asm65("\tsta irqen","");
          pas.Optimize.asm65("\tsta stimer","");
        } else {
          pas.Optimize.asm65("\tlda irqens","");
          pas.Optimize.asm65("\tand #$fd","");
          pas.Optimize.asm65("\tsta irqens","");
          pas.Optimize.asm65("\tsta irqen","");
        };
        pas.Optimize.asm65("\tcli","");
      } else if ($tmp21 === pas.Common.TInterruptCode.TIM4) {
        pas.Optimize.asm65("\tsei","");
        pas.Optimize.asm65("\tmva :STACKORIGIN,x VTIMR4","");
        pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VTIMR4+1","");
        $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
        if (pas.Common.Tok[i + 1].Kind === 52) {
          i = $mod.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,128,ActualParamType);
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tldy #$03","");
          pas.Optimize.asm65("\tsta AUDCTL","");
          pas.Optimize.asm65("\tsta AUDC4","");
          pas.Optimize.asm65("\tsty SKCTL","");
          pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDCTL","");
          $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          pas.Common.CheckTok(i + 1,52);
          i = $mod.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              ActualParamType = v;
            }},133);
          pas.Common.GetCommonType(i,128,ActualParamType);
          pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDF4","");
          $mod.a65(pas.Common.TCode65.subBX,0,1,4,0);
          pas.Optimize.asm65("\tlda irqens","");
          pas.Optimize.asm65("\tora #$04","");
          pas.Optimize.asm65("\tsta irqens","");
          pas.Optimize.asm65("\tsta irqen","");
          pas.Optimize.asm65("\tsta stimer","");
        } else {
          pas.Optimize.asm65("\tlda irqens","");
          pas.Optimize.asm65("\tand #$fb","");
          pas.Optimize.asm65("\tsta irqens","");
          pas.Optimize.asm65("\tsta irqen","");
        };
        pas.Optimize.asm65("\tcli","");
      };
      $mod.StopOptimization();
      pas.Common.CheckTok(i + 1,55);
      Result = i + 1;
    } else {
      Result = i - 1;
    };
    return Result;
  };
  var reg = [":EDX",":ECX",":EAX"];
  this.GenerateProcFuncAsmLabels = function (BlockIdentIndex, VarSize) {
    var IdentIndex = 0;
    var size = 0;
    var emptyLine = false;
    var yes = false;
    var fnam = "";
    var txt = "";
    var svar = "";
    var varbegin = "";
    var HeaFile = null;
    function Value(dorig, brackets) {
      var Result = "";
      var v = 0;
      v = pas.Common.Ident[IdentIndex - 1].Value;
      var $tmp = pas.Common.Ident[IdentIndex - 1].DataType;
      if (($tmp === 141) || ($tmp === 142)) {
        v = pas.Numbers.CastToReal(v)}
       else if ($tmp === 143) {
        v = pas.Numbers.CastToSingle(v)}
       else if ($tmp === 144) {
        v = pas.Numbers.CastToHalfSingle(v)}
       else {
        v = pas.Common.Ident[IdentIndex - 1].Value;
      };
      if (dorig) {
        if (brackets) {
          Result = "\t= [DATAORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value - 32768,4) + "]"}
         else Result = "\t= DATAORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value - 32768,4);
      } else if (pas.Common.Ident[IdentIndex - 1].isAbsolute && (pas.Common.Ident[IdentIndex - 1].Kind === 3) && ((pas.Common.Ident[IdentIndex - 1].Value & 0xff) === 0) && ((Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 16777216) & 0x7f & 255) in rtl.createSet(null,1,127))) {
        var $tmp1 = Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 16777216) & 0x7f & 255;
        if (($tmp1 >= 1) && ($tmp1 <= 3)) {
          Result = "\t= " + reg[(Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 16777216) & 0x7f) - 1]}
         else if (($tmp1 >= 4) && ($tmp1 <= 19)) {
          Result = "\t= :STACKORIGIN-" + pas.Common.IntToStr((Math.floor(pas.Common.Ident[IdentIndex - 1].Value / 16777216) & 0x7f & 255) - 3)}
         else {
          Result = "\t= 'out of resource'";
        };
        size = 0;
      } else if (pas.Common.Ident[IdentIndex - 1].isExternal) {
        Result = "\t= " + pas.Common.Ident[IdentIndex - 1].Alias;
      } else if (pas.Common.Ident[IdentIndex - 1].isAbsolute) {
        if (pas.Common.Ident[IdentIndex - 1].Value < 0) {
          Result = "\t= DATAORIGIN+$" + pas.SysUtils.IntToHex(Math.abs(pas.Common.Ident[IdentIndex - 1].Value),4)}
         else if (Math.abs(pas.Common.Ident[IdentIndex - 1].Value) < 256) {
          Result = "\t= $" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value & 255,2)}
         else Result = "\t= $" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value,4);
      } else if (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0) {
        Result = "\t= CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentIndex - 1].Value - pas.Common.CODEORIGIN_BASE - 256,4)}
       else if (Math.abs(v) < 256) {
        Result = "\t= $" + pas.SysUtils.IntToHex(v & 255,2)}
       else Result = "\t= $" + pas.SysUtils.IntToHex(v,4);
      return Result;
    };
    function mads_data_size() {
      var Result = "";
      Result = "";
      if (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(null,128,149)) {
        var $tmp = pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
        if ($tmp === 2) {
          Result = " .word"}
         else if ($tmp === 4) Result = " .dword";
      } else Result = " ; type unknown";
      return Result;
    };
    function SetBank() {
      var Result = false;
      var i = 0;
      var IdentTemp = 0;
      var hnam = "";
      var rnam = "";
      Result = false;
      hnam = pas.Utilities.AnsiUpperCase(pas.SysUtils.ExtractFileName(fnam));
      hnam = pas.SysUtils.ChangeFileExt(hnam,"");
      for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
        i = $l;
        rnam = pas.Utilities.AnsiUpperCase(pas.SysUtils.ExtractFileName(pas.Common.resArray[i].resFile));
        rnam = pas.SysUtils.ChangeFileExt(rnam,"");
        if (hnam === rnam) {
          IdentTemp = pas.Parser.GetIdentIndex(pas.Common.resArray[i].resName);
          if (IdentTemp > 0) {
            pas.Optimize.asm65("","");
            pas.Optimize.asm65("\tlmb #$" + pas.SysUtils.IntToHex(pas.Common.Ident[IdentTemp - 1].Value + 1,2),"");
            pas.Optimize.asm65("","");
            Result = true;
            return true;
          };
        };
      };
      return Result;
    };
    try {
      if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
        $mod.StopOptimization();
        emptyLine = true;
        size = 0;
        varbegin = "";
        for (var $l = 1, $end = pas.Common.NumIdent; $l <= $end; $l++) {
          IdentIndex = $l;
          if ((pas.Common.Ident[IdentIndex - 1].Block === pas.Common.Ident[BlockIdentIndex - 1].ProcAsBlock) && (pas.Common.Ident[IdentIndex - 1].UnitIndex === pas.Common.UnitNameIndex)) {
            if (emptyLine) {
              $mod.asm65separator(true);
              pas.Optimize.asm65("","");
              emptyLine = false;
            };
            if (pas.Common.Ident[IdentIndex - 1].isExternal && (pas.Common.Ident[IdentIndex - 1].Libraries > 0)) {
              fnam = pas.Common.LinkObj[pas.Common.Tok[pas.Common.Ident[IdentIndex - 1].Libraries].Value];
              if (pas.Common.RCLIBRARY) if (SetBank() === false) pas.Messages.Error(pas.Common.Ident[IdentIndex - 1].Libraries,"Error: Bank identifier missing.");
              if (pas.SysUtils.ExtractFileExt(fnam) === "") fnam = pas.SysUtils.ChangeFileExt(fnam,".hea");
              fnam = pas.Common.FindFile(fnam,"header");
              if (pas.Common.Ident[IdentIndex - 1].isOverload) {
                svar = pas.Common.Ident[IdentIndex - 1].Alias + "." + $mod.GetOverloadName(IdentIndex)}
               else svar = pas.Common.Ident[IdentIndex - 1].Alias;
              yes = true;
              HeaFile = rtl.setIntfL(HeaFile,pas.FileIO.TFileSystem.CreateTextFile(),true);
              HeaFile.Assign(fnam);
              HeaFile.Reset();
              txt = "";
              while (!HeaFile.EOF()) {
                HeaFile.ReadLn({get: function () {
                    return txt;
                  }, set: function (v) {
                    txt = v;
                  }});
                txt = pas.Utilities.AnsiUpperCase(txt);
                if ((txt.length > 255) || (pas.System.Pos("\x00",txt) > 0)) {
                  HeaFile.Close();
                  pas.Messages.Error(pas.Common.Ident[IdentIndex - 1].Libraries,"Error: MADS header file '" + fnam + "' has invalid format.");
                };
                if ((pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                    return txt;
                  }, set: function (v) {
                    txt = v;
                  }},".@EXIT") < 0) && (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                    return txt;
                  }, set: function (v) {
                    txt = v;
                  }},".@VARDATA") < 0)) if ((pas.System.Pos("MAIN." + svar + " ",txt) === 1) || (pas.System.Pos("MAIN." + svar + "\t",txt) === 1) || (pas.System.Pos("MAIN." + svar + ".",txt) === 1)) {
                  yes = false;
                  pas.Optimize.asm65(pas.Common.Ident[IdentIndex - 1].Name + pas.System.Copy(txt,6 + pas.Common.Ident[IdentIndex - 1].Alias.length,txt.length),"");
                };
              };
              if (yes) pas.Messages.ErrorForIdentifier(pas.Common.Ident[IdentIndex - 1].Libraries,pas.Messages.TErrorCode.UnknownIdentifier,IdentIndex);
              HeaFile.Close();
              if (pas.Common.RCLIBRARY) {
                pas.Optimize.asm65("","");
                pas.Optimize.asm65("\trmb","");
                pas.Optimize.asm65("","");
              };
            } else {
              var $tmp = pas.Common.Ident[IdentIndex - 1].Kind;
              if ($tmp === 3) {
                if (pas.Common.Ident[IdentIndex - 1].isAbsolute) {
                  if ((pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers)) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) {
                    pas.Optimize.asm65("adr." + pas.Common.Ident[IdentIndex - 1].Name + Value(false,false),"");
                    pas.Optimize.asm65(".var " + pas.Common.Ident[IdentIndex - 1].Name + "\t= adr." + pas.Common.Ident[IdentIndex - 1].Name + " .word","");
                    if (size === 0) varbegin = pas.Common.Ident[IdentIndex - 1].Name;
                    size += pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
                  } else if (pas.Common.Ident[IdentIndex - 1].DataType === 138) {
                    pas.Optimize.asm65(".var " + pas.Common.Ident[IdentIndex - 1].Name + Value(false,false) + " .word","")}
                   else if (pas.System.Pos("@FORTMP_",pas.Common.Ident[IdentIndex - 1].Name) === 0) pas.Optimize.asm65(pas.Common.Ident[IdentIndex - 1].Name + Value(false,false),"");
                } else if ((pas.Common.Ident[IdentIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (pas.Common.Ident[IdentIndex - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers)) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) {
                  if (((pas.Common.Ident[IdentIndex - 1].IdType !== 30) && (pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) || (pas.Common.Ident[IdentIndex - 1].IdType === 160)) {
                    pas.Optimize.asm65(pas.Common.Ident[IdentIndex - 1].Name + Value(true,false),"")}
                   else {
                    if (pas.Common.Ident[IdentIndex - 1].DataType in rtl.createSet(139,140)) {
                      pas.Optimize.asm65("adr." + pas.Common.Ident[IdentIndex - 1].Name + Value(true,false) + "\t; [" + pas.Common.IntToStr(pas.Parser.RecordSize(IdentIndex,"")) + "] " + pas.Common.InfoAboutToken(pas.Common.Ident[IdentIndex - 1].DataType),"")}
                     else if (pas.Parser.Elements(IdentIndex) > 0) {
                      if ((pas.Common.Ident[IdentIndex - 1].NumAllocElements_ > 0) && !(pas.Common.Ident[IdentIndex - 1].AllocElementType in rtl.createSet(139,140))) {
                        pas.Optimize.asm65("adr." + pas.Common.Ident[IdentIndex - 1].Name + Value(true,true) + " .array [" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements) + "] [" + pas.Common.IntToStr(pas.Common.Ident[IdentIndex - 1].NumAllocElements_) + "]" + mads_data_size(),"")}
                       else pas.Optimize.asm65("adr." + pas.Common.Ident[IdentIndex - 1].Name + Value(true,true) + " .array [" + pas.Common.IntToStr(pas.Parser.Elements(IdentIndex)) + "]" + mads_data_size(),"");
                    } else pas.Optimize.asm65("adr." + pas.Common.Ident[IdentIndex - 1].Name + Value(true,false),"");
                    pas.Optimize.asm65(".var " + pas.Common.Ident[IdentIndex - 1].Name + "\t= adr." + pas.Common.Ident[IdentIndex - 1].Name + " .word","");
                  };
                  if (size === 0) varbegin = pas.Common.Ident[IdentIndex - 1].Name;
                  size += pas.Common.Ident[IdentIndex - 1].NumAllocElements * pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].AllocElementType - 128];
                } else if (pas.Common.Ident[IdentIndex - 1].DataType === 138) {
                  pas.Optimize.asm65(".var " + pas.Common.Ident[IdentIndex - 1].Name + Value(true,false) + " .word","")}
                 else {
                  pas.Optimize.asm65(pas.Common.Ident[IdentIndex - 1].Name + Value(true,false),"");
                  if (size === 0) varbegin = pas.Common.Ident[IdentIndex - 1].Name;
                  if (pas.Common.Ident[IdentIndex - 1].IdType !== 160) if ((pas.Common.Ident[IdentIndex - 1].Name === "RESULT") && (pas.Common.Ident[BlockIdentIndex - 1].Kind === 5)) {}
                  else size += pas.Common.DataSize[pas.Common.Ident[IdentIndex - 1].DataType - 128];
                }}
               else if ($tmp === 1) if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) {
                pas.Optimize.asm65("adr." + pas.Common.Ident[IdentIndex - 1].Name + Value(false,false),"");
                pas.Optimize.asm65(".var " + pas.Common.Ident[IdentIndex - 1].Name + "\t= adr." + pas.Common.Ident[IdentIndex - 1].Name + " .word","");
              } else if (pas.System.Pos("@FORTMP_",pas.Common.Ident[IdentIndex - 1].Name) === 0) pas.Optimize.asm65(pas.Common.Ident[IdentIndex - 1].Name + Value(false,false),"");
            };
          };
        };
        if (pas.Common.BlockStack[pas.Common.BlockStackTop] !== 1) {
          pas.Optimize.asm65("","");
          if (pas.Common.LIBRARY_USE) pas.Optimize.asm65("@InitLibrary\t= :START","");
          if (VarSize && (size > 0)) {
            pas.Optimize.asm65("@VarData\t= " + varbegin,"");
            pas.Optimize.asm65("@VarDataSize\t= " + pas.Common.IntToStr(size),"");
            pas.Optimize.asm65("","");
          };
        };
      };
    } finally {
      rtl._Release(HeaFile);
    };
  };
  this.SaveToStaticDataSegment = function (ConstDataSize, ConstVal, ConstValType) {
    if ((ConstDataSize < 0) || (ConstDataSize > 0xFFFF)) {
      pas.System.Writeln("SaveToStaticDataSegment: " + pas.Common.IntToStr(ConstDataSize));
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    var $tmp = ConstValType;
    if (($tmp === 131) || ($tmp === 128) || ($tmp === 134) || ($tmp === 135)) {
      pas.Common.StaticStringData[ConstDataSize] = ConstVal & 255}
     else if (($tmp === 132) || ($tmp === 129) || ($tmp === 141) || ($tmp === 136) || ($tmp === 137) || ($tmp === 145)) {
      pas.Common.StaticStringData[ConstDataSize] = ConstVal & 255;
      pas.Common.StaticStringData[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
    } else if ($tmp === 160) {
      pas.Common.StaticStringData[ConstDataSize] = (ConstVal & 255) | 0x8000;
      pas.Common.StaticStringData[ConstDataSize + 1] = (Math.floor(ConstVal / 256) & 255) | 0x4000;
    } else if ($tmp === 161) {
      pas.Common.StaticStringData[ConstDataSize] = (ConstVal & 255) | 0x2000;
      pas.Common.StaticStringData[ConstDataSize + 1] = (Math.floor(ConstVal / 256) & 255) | 0x1000;
    } else if (($tmp === 133) || ($tmp === 130) || ($tmp === 142)) {
      pas.Common.StaticStringData[ConstDataSize] = ConstVal & 255;
      pas.Common.StaticStringData[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
      pas.Common.StaticStringData[ConstDataSize + 2] = Math.floor(ConstVal / 65536) & 255;
      pas.Common.StaticStringData[ConstDataSize + 3] = Math.floor(ConstVal / 16777216) & 255;
    } else if ($tmp === 143) {
      ConstVal = pas.Numbers.CastToSingle(ConstVal);
      pas.Common.StaticStringData[ConstDataSize] = ConstVal & 255;
      pas.Common.StaticStringData[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
      pas.Common.StaticStringData[ConstDataSize + 2] = Math.floor(ConstVal / 65536) & 255;
      pas.Common.StaticStringData[ConstDataSize + 3] = Math.floor(ConstVal / 16777216) & 255;
    } else if ($tmp === 144) {
      ConstVal = pas.Numbers.CastToHalfSingle(ConstVal);
      pas.Common.StaticStringData[ConstDataSize] = ConstVal & 255;
      pas.Common.StaticStringData[ConstDataSize + 1] = Math.floor(ConstVal / 256) & 255;
    };
  };
  this.ReadDataArray = function (i, ConstDataSize, ConstValType, NumAllocElements, StaticData, Add) {
    var Result = 0;
    var ActualParamType = 0;
    var ch = 0;
    var NumActualParams = 0;
    var NumActualParams_ = 0;
    var NumAllocElements_ = 0;
    var ConstVal = 0;
    function SaveDataSegment(DataType) {
      if (StaticData) {
        $mod.SaveToStaticDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType)}
       else pas.Parser.SaveToDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType);
      if (DataType === 160) {
        ConstDataSize += pas.Common.DataSize[8]}
       else ConstDataSize += pas.Common.DataSize[DataType - 128];
    };
    function SaveData(compile) {
      if (compile) i = pas.Parser.CompileConstExpression(i + 1,{get: function () {
          return ConstVal;
        }, set: function (v) {
          ConstVal = v;
        }},{get: function () {
          return ActualParamType;
        }, set: function (v) {
          ActualParamType = v;
        }},ConstValType,false,true);
      if ((ConstValType === 137) && (ActualParamType === 134)) {
        if (StaticData) pas.Messages.Error(i,"Memory overlap due conversion CHAR to STRING, use VAR instead CONST");
        ch = pas.Common.Tok[i].Value;
        pas.Common.DefineStaticString(i,String.fromCharCode(ch));
        ConstVal = (pas.Common.Tok[i].StrAddress - 256) + pas.Common.CODEORIGIN_BASE;
        pas.Common.Tok[i].Value = ch;
        ActualParamType = 137;
      };
      if ((ConstValType in rtl.unionSet(pas.Common.StringTypes,rtl.createSet(134,137))) && (ActualParamType in rtl.unionSet(pas.Common.IntegerTypes,pas.Common.RealTypes))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression);
      if ((ConstValType in rtl.unionSet(pas.Common.StringTypes,rtl.createSet(137))) && (ActualParamType === 134)) pas.Messages.ErrorIncompatibleTypes(i,ActualParamType,ConstValType,false);
      if ((ConstValType in rtl.createSet(143,144)) && (ActualParamType === 142)) ActualParamType = ConstValType;
      if ((ConstValType in pas.Common.RealTypes) && (ActualParamType in pas.Common.IntegerTypes)) {
        ConstVal = pas.Numbers.FromInt64(ConstVal);
        ActualParamType = ConstValType;
      };
      if ((ConstValType === 141) && (ActualParamType === 142)) ActualParamType = 141;
      if (ActualParamType === 160) {
        SaveDataSegment(160)}
       else {
        if (ConstValType in pas.Common.IntegerTypes) {
          if (pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,ActualParamType in rtl.unionSet(pas.Common.RealTypes,pas.Common.Pointers))) pas.Messages.WarningForRangeCheckError(i,0,ConstVal,ConstValType);
        } else pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,true);
        SaveDataSegment(ConstValType);
      };
    };
    function DoEvaluate(evaluationContext) {
      var Result = 0;
      var s = "";
      var par1 = 0;
      var par2 = 0;
      var p1 = 0;
      var p2 = 0;
      var k = 0;
      function GetParameter() {
        var Result = 0;
        var tmp = "";
        var err = 0;
        var constantValue = 0;
        Result = 0;
        tmp = pas.StringUtilities.GetNumber(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (tmp !== "") {
          pas.System.val$6(tmp,{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},{get: function () {
              return err;
            }, set: function (v) {
              err = v;
            }});
          if (err > 0) pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
          if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
          return Result;
        };
        tmp = evaluationContext.GetConstantName(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (tmp !== "") {
          constantValue = 0;
          if (evaluationContext.GetConstantValue(tmp,{get: function () {
              return constantValue;
            }, set: function (v) {
              constantValue = v;
            }})) {
            Result = constantValue}
           else pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
          if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
          return Result;
        };
        pas.Messages.Error(i,"Identifier or number expected but '" + s.charAt(k - 1) + "' found");
        return Result;
      };
      function doEvaluations(_0, _1) {
        var p = 0;
        var _s = "";
        var fl = 0.0;
        _s = s;
        if (_0 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
            return _s;
          }, set: function (v) {
            _s = v;
          }},":1") >= 0) {
          p = pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":1");
          pas.System.Delete({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1,2);
          pas.System.Insert(pas.Common.IntToStr(_0),{get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1);
        };
        if (_1 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
            return _s;
          }, set: function (v) {
            _s = v;
          }},":2") >= 0) {
          p = pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":2");
          pas.System.Delete({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1,2);
          pas.System.Insert(pas.Common.IntToStr(_1),{get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1);
        };
        try {
          fl = pas.MathEvaluate.Evaluate(_s,evaluationContext);
        } catch ($e) {
          if (pas.MathEvaluate.EEValuationException.isPrototypeOf($e)) {
            var e = $e;
            pas.Messages.Error(i,"Evaluation error at position " + pas.Common.IntToStr(e._index) + " of expression '" + e._expression + "'. " + e.fMessage);
          } else throw $e
        };
        ConstVal = pas.Numbers.Assign(ConstValType,fl);
        SaveData(false);
      };
      Result = 0;
      par1 = -1;
      par2 = -1;
      s = pas.Common.LinkObj[pas.Common.Tok[i + 1].Value];
      if (s !== "") {
        k = 1;
        pas.StringUtilities.SkipWhitespaces(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (s.charAt(k - 1) !== '"') {
          par1 = GetParameter();
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              k = v;
            }});
          if (s.charAt(k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + s.charAt(k - 1) + "' found");
          k += 1;
        };
        pas.StringUtilities.SkipWhitespaces(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (s.charAt(k - 1) !== '"') {
          par2 = GetParameter();
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              k = v;
            }});
          if (s.charAt(k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + s.charAt(k - 1) + "' found");
          k += 1;
        };
        pas.StringUtilities.SkipWhitespaces(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (s.charAt(k - 1) !== '"') pas.Messages.Error(i,'Syntax error, \'"\' expected but \'' + s.charAt(k - 1) + "' found");
        s = pas.StringUtilities.GetStringUpperCase(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        ActualParamType = ConstValType;
        if (par1 > 0) if (par2 > 0) {
          for (var $l = 0, $end = par2 - 1; $l <= $end; $l++) {
            p2 = $l;
            for (var $l1 = 0, $end1 = par1 - 1; $l1 <= $end1; $l1++) {
              p1 = $l1;
              doEvaluations(p1,p2);
            };
          };
          Result = par1 * par2;
        } else {
          for (var $l2 = 0, $end2 = par1 - 1; $l2 <= $end2; $l2++) {
            p1 = $l2;
            doEvaluations(p1,-1);
          };
          Result = par1;
        };
      };
      i += 1;
      return Result;
    };
    pas.Common.CheckTok(i,54);
    NumActualParams = 0;
    NumActualParams_ = 0;
    NumAllocElements_ = rtl.lw(NumAllocElements >>> 16);
    NumAllocElements = NumAllocElements & 0xffff;
    do {
      NumActualParams += 1;
      if (NumAllocElements_ > 0) {
        NumActualParams_ = 0;
        pas.Common.CheckTok(i + 1,54);
        i += 1;
        do {
          NumActualParams_ += 1;
          if (NumActualParams_ > NumAllocElements_) break;
          SaveData(true);
          i += 1;
        } while (!(pas.Common.Tok[i].Kind !== 52));
        pas.Common.CheckTok(i,55);
      } else if (pas.Common.Tok[i + 1].Kind === 184) {
        NumActualParams = DoEvaluate($mod.evaluationContext)}
       else SaveData(true);
      i += 1;
    } while (!(pas.Common.Tok[i].Kind !== 52));
    pas.Common.CheckTok(i,55);
    if (NumActualParams > NumAllocElements) pas.Messages.Error(i,"Number of elements (" + pas.Common.IntToStr(NumActualParams) + ") differs from declaration (" + pas.Common.IntToStr(NumAllocElements) + ")");
    if (NumActualParams < NumAllocElements) pas.Messages.Error(i,"Expected another " + pas.Common.IntToStr(NumAllocElements - NumActualParams) + " array elements");
    if (NumActualParams_ < NumAllocElements_) pas.Messages.Error(i,"Expected another " + pas.Common.IntToStr(NumAllocElements_ - NumActualParams_) + " array elements");
    Result = i;
    return Result;
  };
  this.ReadDataOpenArray = function (i, ConstDataSize, ConstValType, NumAllocElements, StaticData, Add) {
    var Result = 0;
    var ActualParamType = 0;
    var ch = 0;
    var NumActualParams = 0;
    var ConstVal = 0;
    function SaveDataSegment(DataType) {
      if (StaticData) {
        $mod.SaveToStaticDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType)}
       else pas.Parser.SaveToDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType);
      if (DataType === 160) {
        ConstDataSize += pas.Common.DataSize[8]}
       else ConstDataSize += pas.Common.DataSize[DataType - 128];
    };
    function SaveData(compile) {
      if (compile) i = pas.Parser.CompileConstExpression(i + 1,{get: function () {
          return ConstVal;
        }, set: function (v) {
          ConstVal = v;
        }},{get: function () {
          return ActualParamType;
        }, set: function (v) {
          ActualParamType = v;
        }},ConstValType,false,true);
      if ((ConstValType === 137) && (ActualParamType === 134)) {
        if (StaticData) pas.Messages.Error(i,"Memory overlap due conversion CHAR to STRING, use VAR instead CONST");
        ch = pas.Common.Tok[i].Value;
        pas.Common.DefineStaticString(i,String.fromCharCode(ch));
        ConstVal = (pas.Common.Tok[i].StrAddress - 256) + pas.Common.CODEORIGIN_BASE;
        pas.Common.Tok[i].Value = ch;
        ActualParamType = 137;
      };
      if ((ConstValType in rtl.unionSet(pas.Common.StringTypes,rtl.createSet(134,137))) && (ActualParamType in rtl.unionSet(pas.Common.IntegerTypes,pas.Common.RealTypes))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression);
      if ((ConstValType in rtl.unionSet(pas.Common.StringTypes,rtl.createSet(137))) && (ActualParamType === 134)) pas.Messages.ErrorIncompatibleTypes(i,ActualParamType,ConstValType,false);
      if ((ConstValType in rtl.createSet(143,144)) && (ActualParamType === 142)) ActualParamType = ConstValType;
      if ((ConstValType in pas.Common.RealTypes) && (ActualParamType in pas.Common.IntegerTypes)) {
        ConstVal = pas.Numbers.FromInt64(ConstVal);
        ActualParamType = ConstValType;
      };
      if ((ConstValType === 141) && (ActualParamType === 142)) ActualParamType = 141;
      if (ActualParamType === 160) {
        SaveDataSegment(160)}
       else {
        if (ConstValType in pas.Common.IntegerTypes) {
          if (pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,ActualParamType in rtl.unionSet(pas.Common.RealTypes,pas.Common.Pointers))) pas.Messages.WarningForRangeCheckError(i,0,ConstVal,ConstValType);
        } else pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,true);
        SaveDataSegment(ConstValType);
      };
      NumActualParams += 1;
    };
    function DoEvaluate(evaluationContext) {
      var Result = 0;
      var s = "";
      var par1 = 0;
      var par2 = 0;
      var p1 = 0;
      var p2 = 0;
      var k = 0;
      function GetParameter() {
        var Result = 0;
        var tmp = "";
        var err = 0;
        var constantValue = 0;
        Result = 0;
        tmp = pas.StringUtilities.GetNumber(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (tmp !== "") {
          pas.System.val$6(tmp,{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},{get: function () {
              return err;
            }, set: function (v) {
              err = v;
            }});
          if (err > 0) pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
          if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
          return Result;
        };
        tmp = evaluationContext.GetConstantName(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (tmp !== "") {
          constantValue = 0;
          if (evaluationContext.GetConstantValue(tmp,{get: function () {
              return constantValue;
            }, set: function (v) {
              constantValue = v;
            }})) {
            Result = constantValue}
           else pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
          if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
          return Result;
        };
        pas.Messages.Error(i,"Identifier or number expected but '" + s.charAt(k - 1) + "' found");
        return Result;
      };
      function doEvaluations(_0, _1) {
        var p = 0;
        var _s = "";
        var fl = 0.0;
        _s = s;
        if (_0 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
            return _s;
          }, set: function (v) {
            _s = v;
          }},":1") >= 0) {
          p = pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":1");
          pas.System.Delete({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1,2);
          pas.System.Insert(pas.Common.IntToStr(_0),{get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1);
        };
        if (_1 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
            return _s;
          }, set: function (v) {
            _s = v;
          }},":2") >= 0) {
          p = pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":2");
          pas.System.Delete({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1,2);
          pas.System.Insert(pas.Common.IntToStr(_1),{get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},p + 1);
        };
        try {
          fl = pas.MathEvaluate.Evaluate(_s,evaluationContext);
        } catch ($e) {
          if (pas.MathEvaluate.EEValuationException.isPrototypeOf($e)) {
            var e = $e;
            pas.Messages.Error(i,"Evaluation error at position " + pas.Common.IntToStr(e._index) + " of expression '" + e._expression + "'. " + e.fMessage);
          } else throw $e
        };
        ConstVal = pas.Numbers.Assign(ConstValType,fl);
        SaveData(false);
      };
      Result = 0;
      par1 = -1;
      par2 = -1;
      s = pas.Common.LinkObj[pas.Common.Tok[i + 1].Value];
      if (s !== "") {
        k = 1;
        pas.StringUtilities.SkipWhitespaces(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (s.charAt(k - 1) !== '"') {
          par1 = GetParameter();
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              k = v;
            }});
          if (s.charAt(k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + s.charAt(k - 1) + "' found");
          k += 1;
        };
        pas.StringUtilities.SkipWhitespaces(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (s.charAt(k - 1) !== '"') {
          par2 = GetParameter();
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              k = v;
            }});
          if (s.charAt(k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + s.charAt(k - 1) + "' found");
          k += 1;
        };
        pas.StringUtilities.SkipWhitespaces(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        if (s.charAt(k - 1) !== '"') pas.Messages.Error(i,'Syntax error, \'"\' expected but \'' + s.charAt(k - 1) + "' found");
        s = pas.StringUtilities.GetStringUpperCase(s,{get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }});
        ActualParamType = ConstValType;
        if (par1 > 0) if (par2 > 0) {
          for (var $l = 0, $end = par2 - 1; $l <= $end; $l++) {
            p2 = $l;
            for (var $l1 = 0, $end1 = par1 - 1; $l1 <= $end1; $l1++) {
              p1 = $l1;
              doEvaluations(p1,p2);
            };
          };
          Result = par1 * par2;
        } else {
          for (var $l2 = 0, $end2 = par1 - 1; $l2 <= $end2; $l2++) {
            p1 = $l2;
            doEvaluations(p1,-1);
          };
          Result = par1;
        };
      };
      i += 1;
      return Result;
    };
    pas.Common.CheckTok(i,58);
    NumActualParams = 0;
    NumAllocElements.set(0);
    if (pas.Common.Tok[i + 1].Kind === 59) {
      i += 1}
     else do {
      if (pas.Common.Tok[i + 1].Kind === 184) {
        DoEvaluate($mod.evaluationContext)}
       else SaveData(true);
      i += 1;
    } while (!(pas.Common.Tok[i].Kind !== 52));
    pas.Common.CheckTok(i,59);
    NumAllocElements.set(NumActualParams);
    Result = i;
    return Result;
  };
  this.GenerateLocal = function (BlockIdentIndex, IsFunction) {
    var info = "";
    if (IsFunction) {
      info = "; FUNCTION"}
     else info = "; PROCEDURE";
    if (pas.Common.Ident[BlockIdentIndex - 1].isAsm) info = info + " | ASSEMBLER";
    if (pas.Common.Ident[BlockIdentIndex - 1].isOverload) info = info + " | OVERLOAD";
    if (pas.Common.Ident[BlockIdentIndex - 1].isRegister) info = info + " | REGISTER";
    if (pas.Common.Ident[BlockIdentIndex - 1].isInterrupt) info = info + " | INTERRUPT";
    if (pas.Common.Ident[BlockIdentIndex - 1].isKeep) info = info + " | KEEP";
    if (pas.Common.Ident[BlockIdentIndex - 1].isPascal) info = info + " | PASCAL";
    if (pas.Common.Ident[BlockIdentIndex - 1].isInline) info = info + " | INLINE";
    pas.Optimize.asm65("","");
    if (pas.Common.codealign.proc > 0) {
      pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.proc,4),"");
      pas.Optimize.asm65("","");
    };
    pas.Optimize.asm65(".local\t" + pas.Common.Ident[BlockIdentIndex - 1].Name,info);
    if (pas.Common.Ident[BlockIdentIndex - 1].isOverload) pas.Optimize.asm65(".local\t" + $mod.GetOverloadName(BlockIdentIndex),"");
    if (pas.Common.Ident[BlockIdentIndex - 1].isInline) pas.Optimize.asm65("\r\n\t.MACRO m@INLINE","");
  };
  this.FormalParameterList = function (i, NumParams, Param, Status, IsNestedFunction, NestedFunctionResultType, NestedFunctionNumAllocElements, NestedFunctionAllocElementType) {
    var ListPassMethod = 0;
    var NumVarOfSameType = 0;
    var VarTYpe = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    var VarOfSameTypeIndex = 0;
    var VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
    VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
    NumParams.set(0);
    if ((pas.Common.Tok[i.get() + 3].Kind === 55) && (pas.Common.Tok[i.get() + 2].Kind === 54)) {
      i.set(i.get() + 4)}
     else if (pas.Common.Tok[i.get() + 2].Kind === 54) {
      i.set(i.get() + 2);
      do {
        NumVarOfSameType = 0;
        ListPassMethod = pas.Common.TParameterPassingMethod.VALPASSING;
        if (pas.Common.Tok[i.get() + 1].Kind === 1) {
          ListPassMethod = pas.Common.TParameterPassingMethod.CONSTPASSING;
          i.set(i.get() + 1);
        } else if (pas.Common.Tok[i.get() + 1].Kind === 3) {
          ListPassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
          i.set(i.get() + 1);
        };
        do {
          if (pas.Common.Tok[i.get() + 1].Kind !== 170) {
            pas.Messages.Error(i.get() + 1,"Formal parameter name expected but " + pas.Common.GetSpelling(i.get() + 1) + " found")}
           else {
            NumVarOfSameType += 1;
            VarOfSameType[NumVarOfSameType - 1].Name = pas.Common.Tok[i.get() + 1].Name;
          };
          i.set(i.get() + 2);
        } while (!(pas.Common.Tok[i.get()].Kind !== 52));
        VarTYpe = 0;
        NumAllocElements = 0;
        AllocElementType = 0;
        if ((ListPassMethod in rtl.createSet(pas.Common.TParameterPassingMethod.CONSTPASSING,pas.Common.TParameterPassingMethod.VARPASSING)) && (pas.Common.Tok[i.get()].Kind !== 60)) {
          ListPassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
          i.set(i.get() - 1);
        } else {
          pas.Common.CheckTok(i.get(),60);
          if (pas.Common.Tok[i.get() + 1].Kind === 56) pas.Messages.Error(i.get() + 1,"Type identifier expected");
          i.set(pas.Parser.CompileType(i.get() + 1,{get: function () {
              return VarTYpe;
            }, set: function (v) {
              VarTYpe = v;
            }},{get: function () {
              return NumAllocElements;
            }, set: function (v) {
              NumAllocElements = v;
            }},{get: function () {
              return AllocElementType;
            }, set: function (v) {
              AllocElementType = v;
            }}));
          if ((VarTYpe === 138) && (ListPassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) pas.Messages.Error(i.get(),"File types must be var parameters");
        };
        for (var $l = 1, $end = NumVarOfSameType; $l <= $end; $l++) {
          VarOfSameTypeIndex = $l;
          NumParams.set(NumParams.get() + 1);
          if (NumParams.get() > 8) {
            pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.TooManyParameters,pas.Common.NumIdent)}
           else {
            Param.get()[NumParams.get() - 1].DataType = VarTYpe;
            Param.get()[NumParams.get() - 1].Name = VarOfSameType[VarOfSameTypeIndex - 1].Name;
            Param.get()[NumParams.get() - 1].NumAllocElements = NumAllocElements;
            Param.get()[NumParams.get() - 1].AllocElementType = AllocElementType;
            Param.get()[NumParams.get() - 1].PassMethod = ListPassMethod;
          };
        };
        i.set(i.get() + 1);
      } while (!(pas.Common.Tok[i.get()].Kind !== 53));
      pas.Common.CheckTok(i.get(),55);
      i.set(i.get() + 1);
    } else i.set(i.get() + 2);
    Status.set(0);
    if (IsNestedFunction) {
      pas.Common.CheckTok(i.get(),60);
      if (pas.Common.Tok[i.get() + 1].Kind === 30) pas.Messages.Error(i.get() + 1,"Type identifier expected");
      i.set(pas.Parser.CompileType(i.get() + 1,{get: function () {
          return VarTYpe;
        }, set: function (v) {
          VarTYpe = v;
        }},{get: function () {
          return NumAllocElements;
        }, set: function (v) {
          NumAllocElements = v;
        }},{get: function () {
          return AllocElementType;
        }, set: function (v) {
          AllocElementType = v;
        }}));
      NestedFunctionResultType.set(VarTYpe);
      NestedFunctionNumAllocElements.set(NumAllocElements);
      NestedFunctionAllocElementType.set(AllocElementType);
      i.set(i.get() + 1);
    };
    pas.Common.CheckTok(i.get(),53);
    while (pas.Common.Tok[i.get() + 1].Kind in rtl.createSet(101,102,103,104,105,106,107,108,109)) {
      var $tmp = pas.Common.Tok[i.get() + 1].Kind;
      if ($tmp === 101) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mOverload,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 102) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mAssembler,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 104) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mRegister,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 107) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mStdCall,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 108) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mInline,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 105) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mInterrupt,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 106) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mPascal,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      } else if ($tmp === 109) {
        pas.Common.SetModifierBit(pas.Common.TModifierCode.mKeep,Status);
        i.set(i.get() + 1);
        pas.Common.CheckTok(i.get() + 1,53);
      };
      i.set(i.get() + 1);
    };
  };
  this.CheckForwardResolutions = function (typ) {
    var TypeIndex = 0;
    var IdentIndex = 0;
    var Name = "";
    for (var $l = 1, $end = pas.Common.NumIdent; $l <= $end; $l++) {
      TypeIndex = $l;
      if ((pas.Common.Ident[TypeIndex - 1].AllocElementType === 149) && (pas.Common.Ident[TypeIndex - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) {
        Name = pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[pas.Common.Ident[TypeIndex - 1].NumAllocElements].Name) - 1].Name;
        if (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[pas.Common.Ident[TypeIndex - 1].NumAllocElements].Name) - 1].Kind === 2) for (var $l1 = 1, $end1 = pas.Common.NumIdent; $l1 <= $end1; $l1++) {
          IdentIndex = $l1;
          if ((pas.Common.Ident[IdentIndex - 1].Name === Name) && (pas.Common.Ident[IdentIndex - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) {
            pas.Common.Ident[TypeIndex - 1].NumAllocElements = pas.Common.Ident[IdentIndex - 1].NumAllocElements;
            pas.Common.Ident[TypeIndex - 1].NumAllocElements_ = pas.Common.Ident[IdentIndex - 1].NumAllocElements_;
            pas.Common.Ident[TypeIndex - 1].AllocElementType = pas.Common.Ident[IdentIndex - 1].DataType;
            break;
          };
        };
      };
    };
    for (var $l2 = 1, $end2 = pas.Common.NumIdent; $l2 <= $end2; $l2++) {
      TypeIndex = $l2;
      if ((pas.Common.Ident[TypeIndex - 1].AllocElementType === 149) && (pas.Common.Ident[TypeIndex - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) if (typ) {
        pas.Messages.Error(TypeIndex,"Unresolved forward reference to type " + pas.Common.Ident[TypeIndex - 1].Name)}
       else pas.Messages.Error(TypeIndex,'Identifier not found "' + pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[pas.Common.Ident[TypeIndex - 1].NumAllocElements].Name) - 1].Name + '"');
    };
  };
  this.CompileRecordDeclaration = function (VarOfSameType, tmpVarDataSize, ConstVal, VarOfSameTypeIndex, VarType, AllocElementType, NumAllocElements, isAbsolute) {
    var tmpVarDataSize_ = 0;
    var ParamIndex = 0;
    if ((VarType in pas.Common.Pointers) && (AllocElementType === 139)) {
      tmpVarDataSize_ = pas.Common.VarDataSize;
      if (rtl.lw(NumAllocElements >>> 16) > 0) {
        pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements & 0xFFFF;
        pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements_ = rtl.lw(NumAllocElements >>> 16);
        pas.Common.VarDataSize = tmpVarDataSize.get() + (rtl.lw(NumAllocElements >>> 16) * pas.Common.DataSize[8]);
        tmpVarDataSize.set(pas.Common.VarDataSize);
        NumAllocElements = NumAllocElements & 0xFFFF;
      } else if (pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute === false) tmpVarDataSize.set(tmpVarDataSize.get() + pas.Common.DataSize[8]);
      for (var $l = 1, $end = pas.Common.TypeArray[NumAllocElements - 1].NumFields; $l <= $end; $l++) {
        ParamIndex = $l;
        if ((pas.Common.TypeArray[NumAllocElements - 1].Block === 1) || (pas.Common.TypeArray[NumAllocElements - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) {
          pas.Parser.DefineIdent(pas.Common.i,VarOfSameType.get()[VarOfSameTypeIndex - 1].Name + "." + pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].Name,3,pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].DataType,pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].NumAllocElements,pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].AllocElementType,0,160);
          pas.Common.Ident[pas.Common.NumIdent - 1].Value = pas.Common.Ident[pas.Common.NumIdent - 1].Value - tmpVarDataSize_;
          pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
        };
      };
      pas.Common.VarDataSize = tmpVarDataSize.get();
    } else if (VarType in rtl.createSet(139,140)) for (var $l1 = 1, $end1 = pas.Common.TypeArray[NumAllocElements - 1].NumFields; $l1 <= $end1; $l1++) {
      ParamIndex = $l1;
      if ((pas.Common.TypeArray[NumAllocElements - 1].Block === 1) || (pas.Common.TypeArray[NumAllocElements - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) {
        tmpVarDataSize_ = pas.Common.VarDataSize;
        pas.Parser.DefineIdent(pas.Common.i,VarOfSameType.get()[VarOfSameTypeIndex - 1].Name + "." + pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].Name,3,pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].DataType,pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].NumAllocElements,pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].AllocElementType,(isAbsolute + 0) * ConstVal.get(),170);
        if (isAbsolute) if (!(pas.Common.TypeArray[NumAllocElements - 1].Field[ParamIndex].DataType in rtl.createSet(139,140))) ConstVal.set(ConstVal.get() + (pas.Common.VarDataSize - tmpVarDataSize_));
      };
    };
  };
  this.CompileBlock = function (i, BlockIdentIndex, NumParams, IsFunction, FunctionResultType, FunctionNumAllocElements, FunctionAllocElementType) {
    var Result = 0;
    var VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
    var Param = rtl.arraySetLength(null,pas.Common.TParam,8);
    var j = 0;
    var idx = 0;
    var NumVarOfSameType = 0;
    var VarOfSameTypeIndex = 0;
    var tmpVarDataSize = 0;
    var ParamIndex = 0;
    var ForwardIdentIndex = 0;
    var IdentIndex = 0;
    var external_libr = 0;
    var NumAllocElements = 0;
    var NestedNumAllocElements = 0;
    var NestedFunctionNumAllocElements = 0;
    var ConstVal = 0;
    var ImplementationUse = false;
    var open_array = false;
    var iocheck_old = false;
    var isInterrupt_old = false;
    var yes = false;
    var Assignment = false;
    var IsNestedFunction = false;
    var isAbsolute = false;
    var isExternal = false;
    var isForward = false;
    var isVolatile = false;
    var isStriped = false;
    var isAsm = false;
    var isReg = false;
    var isInt = false;
    var isInl = false;
    var isOvr = false;
    var VarType = 0;
    var VarRegister = 0;
    var NestedFunctionResultType = 0;
    var ConstValType = 0;
    var AllocElementType = 0;
    var ActualParamType = 0;
    var NestedFunctionAllocElementType = 0;
    var NestedDataType = 0;
    var NestedAllocElementType = 0;
    var IdType = 0;
    var varPassMethod = 0;
    var Tmp = 0;
    var TmpResult = 0;
    var external_name = "";
    var UnitList = [];
    pas.Optimize.ResetOpty();
    VarOfSameType = rtl.arraySetLength(null,pas.Common.TParam,256);
    j = 0;
    ConstVal = 0;
    VarRegister = 0;
    external_libr = 0;
    external_name = "";
    NestedDataType = 0;
    NestedAllocElementType = 0;
    NestedNumAllocElements = 0;
    ParamIndex = 0;
    varPassMethod = pas.Common.TParameterPassingMethod.UNDEFINED;
    ImplementationUse = false;
    Param = pas.Common.Ident[BlockIdentIndex - 1].Param;
    isAsm = pas.Common.Ident[BlockIdentIndex - 1].isAsm;
    isReg = pas.Common.Ident[BlockIdentIndex - 1].isRegister;
    isInt = pas.Common.Ident[BlockIdentIndex - 1].isInterrupt;
    isInl = pas.Common.Ident[BlockIdentIndex - 1].isInline;
    isOvr = pas.Common.Ident[BlockIdentIndex - 1].isOverload;
    pas.Common.isInterrupt = isInt;
    pas.Common.NumBlocks += 1;
    pas.Common.BlockStackTop += 1;
    pas.Common.BlockStack[pas.Common.BlockStackTop] = pas.Common.NumBlocks;
    pas.Common.Ident[BlockIdentIndex - 1].ProcAsBlock = pas.Common.NumBlocks;
    $mod.GenerateLocal(BlockIdentIndex,IsFunction);
    if ((pas.Common.BlockStack[pas.Common.BlockStackTop] !== 1) && pas.Common.Ident[BlockIdentIndex - 1].isRecursion) {
      if (pas.Common.Ident[BlockIdentIndex - 1].isRegister) pas.Messages.Error(i,'Calling convention directive "REGISTER" not applicable with recursion');
      if (!isInl) {
        pas.Optimize.asm65("\t.ifdef @VarData","");
        if (pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex > 0) {
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tsty :bp2+1","");
        };
        pas.Optimize.asm65("@new\tlda <@VarData","");
        pas.Optimize.asm65("\tsta :ztmp","");
        pas.Optimize.asm65("\tlda >@VarData","");
        pas.Optimize.asm65("\tldy #@VarDataSize-1","");
        pas.Optimize.asm65("\tjsr @AllocMem","");
        if (pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex > 0) {
          pas.Optimize.asm65("\tlda :bp2","");
          pas.Optimize.asm65("\tldy :bp2+1","");
        };
        pas.Optimize.asm65("\teif","");
      };
    };
    if (pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex > 0) {
      pas.Optimize.asm65("\tsta " + pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[0].Name,"");
      pas.Optimize.asm65("\tsty " + pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[0].Name + "+1","");
      pas.Parser.DefineIdent(i,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[0].Name,3,129,0,0,0,170);
      pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
      pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = 129;
      NumAllocElements = 0;
      for (var $l = 1, $end = pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].NumFields; $l <= $end; $l++) {
        ParamIndex = $l;
        if (pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].Kind === 0) {
          if (NumAllocElements > 0) if (NumAllocElements > 255) {
            pas.Optimize.asm65("\tadd <" + pas.Common.IntToStr(NumAllocElements),"");
            pas.Optimize.asm65("\tpha","");
            pas.Optimize.asm65("\ttya","");
            pas.Optimize.asm65("\tadc >" + pas.Common.IntToStr(NumAllocElements),"");
            pas.Optimize.asm65("\ttay","");
            pas.Optimize.asm65("\tpla","");
          } else {
            pas.Optimize.asm65("\tadd #" + pas.Common.IntToStr(NumAllocElements),"");
            pas.Optimize.asm65("\tscc","");
            pas.Optimize.asm65("\tiny","");
          };
          pas.Optimize.asm65("\tsta " + pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].Name,"");
          pas.Optimize.asm65("\tsty " + pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].Name + "+1","");
          if (ParamIndex !== pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].NumFields) {
            if ((pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType === 136) && (pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements > 0)) {
              NumAllocElements = pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements & 0xffff;
              if (rtl.lw(pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements >>> 16) > 0) NumAllocElements = NumAllocElements * rtl.lw(pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements >>> 16);
              NumAllocElements = NumAllocElements * pas.Common.DataSize[pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].AllocElementType - 128];
            } else {
              var $tmp = pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType;
              if ($tmp === 138) {
                NumAllocElements = 12}
               else if ($tmp === 137) {
                NumAllocElements = pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements}
               else if ($tmp === 139) {
                NumAllocElements = pas.Parser.ObjectRecordSize(pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements)}
               else {
                NumAllocElements = pas.Common.DataSize[pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType - 128];
              };
            };
          };
        };
      };
    };
    for (var $l1 = 1, $end1 = NumParams; $l1 <= $end1; $l1++) {
      ParamIndex = $l1;
      if (Param[ParamIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
        if (isReg && (ParamIndex in rtl.createSet(null,1,3))) {
          tmpVarDataSize = pas.Common.VarDataSize;
          pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name,3,Param[ParamIndex - 1].DataType,Param[ParamIndex - 1].NumAllocElements,Param[ParamIndex - 1].AllocElementType,0,170);
          pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].isAbsolute = true;
          pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].Value = rtl.lw(((ParamIndex & 255) << 24) | 0x80000000);
          pas.Common.VarDataSize = tmpVarDataSize;
        } else if (Param[ParamIndex - 1].DataType in pas.Common.Pointers) {
          pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name,3,Param[ParamIndex - 1].DataType,0,Param[ParamIndex - 1].DataType,0,170)}
         else pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name,3,136,0,Param[ParamIndex - 1].DataType,0,170);
        if (Param[ParamIndex - 1].DataType in rtl.createSet(139,140)) {
          tmpVarDataSize = pas.Common.VarDataSize;
          for (var $l2 = 1, $end2 = pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].NumFields; $l2 <= $end2; $l2++) {
            j = $l2;
            pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name + "." + pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].Name,3,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].DataType,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].NumAllocElements,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].AllocElementType,0,160);
            pas.Common.Ident[pas.Common.NumIdent - 1].Value = pas.Common.Ident[pas.Common.NumIdent - 1].Value - tmpVarDataSize;
            pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = Param[ParamIndex - 1].PassMethod;
            if (pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType === 0) pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = pas.Common.Ident[pas.Common.NumIdent - 1].DataType;
          };
          pas.Common.VarDataSize = tmpVarDataSize;
        } else if (Param[ParamIndex - 1].DataType in pas.Common.Pointers) {
          pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].AllocElementType = Param[ParamIndex - 1].AllocElementType}
         else pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].AllocElementType = Param[ParamIndex - 1].DataType;
        pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].NumAllocElements = Param[ParamIndex - 1].NumAllocElements & 0xFFFF;
        pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].NumAllocElements_ = rtl.lw(Param[ParamIndex - 1].NumAllocElements >>> 16);
      } else {
        if (isReg && (ParamIndex in rtl.createSet(null,1,3))) {
          tmpVarDataSize = pas.Common.VarDataSize;
          pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name,3,Param[ParamIndex - 1].DataType,Param[ParamIndex - 1].NumAllocElements,Param[ParamIndex - 1].AllocElementType,0,170);
          pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].isAbsolute = true;
          pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].Value = rtl.lw(((ParamIndex & 255) << 24) | 0x80000000);
          pas.Common.VarDataSize = tmpVarDataSize;
        } else pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name,3,Param[ParamIndex - 1].DataType,Param[ParamIndex - 1].NumAllocElements,Param[ParamIndex - 1].AllocElementType,0,170);
        if ((Param[ParamIndex - 1].DataType === 136) && (Param[ParamIndex - 1].AllocElementType in rtl.createSet(139,140))) {
          tmpVarDataSize = pas.Common.VarDataSize;
          for (var $l3 = 1, $end3 = pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].NumFields; $l3 <= $end3; $l3++) {
            j = $l3;
            pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name + "." + pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].Name,3,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].DataType,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].NumAllocElements,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].AllocElementType,0,160);
            pas.Common.Ident[pas.Common.NumIdent - 1].Value = pas.Common.Ident[pas.Common.NumIdent - 1].Value - tmpVarDataSize;
            pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = Param[ParamIndex - 1].PassMethod;
            if (pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType === 0) pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = pas.Common.Ident[pas.Common.NumIdent - 1].DataType;
          };
          pas.Common.VarDataSize = tmpVarDataSize;
        } else if (Param[ParamIndex - 1].DataType in rtl.createSet(139,140)) for (var $l4 = 1, $end4 = pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].NumFields; $l4 <= $end4; $l4++) {
          j = $l4;
          pas.Parser.DefineIdent(i,Param[ParamIndex - 1].Name + "." + pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].Name,3,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].DataType,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].NumAllocElements,pas.Common.TypeArray[Param[ParamIndex - 1].NumAllocElements - 1].Field[j].AllocElementType,0,170);
          pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = Param[ParamIndex - 1].PassMethod;
        };
      };
      pas.Common.Ident[pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name) - 1].PassMethod = Param[ParamIndex - 1].PassMethod;
    };
    if (IsFunction) {
      tmpVarDataSize = pas.Common.VarDataSize;
      pas.Parser.DefineIdent(i,"RESULT",3,FunctionResultType,FunctionNumAllocElements,FunctionAllocElementType,0,170);
      if (isReg && (FunctionResultType in rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes))) {
        pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute = true;
        pas.Common.Ident[pas.Common.NumIdent - 1].Value = 0x87000000;
        pas.Common.VarDataSize = tmpVarDataSize;
      };
      if (FunctionResultType in rtl.createSet(139,140)) for (var $l5 = 1, $end5 = pas.Common.TypeArray[FunctionNumAllocElements - 1].NumFields; $l5 <= $end5; $l5++) {
        j = $l5;
        pas.Parser.DefineIdent(i,"RESULT." + pas.Common.TypeArray[FunctionNumAllocElements - 1].Field[j].Name,3,pas.Common.TypeArray[FunctionNumAllocElements - 1].Field[j].DataType,pas.Common.TypeArray[FunctionNumAllocElements - 1].Field[j].NumAllocElements,pas.Common.TypeArray[FunctionNumAllocElements - 1].Field[j].AllocElementType,0,170);
      };
    };
    yes = pas.Common.Ident[BlockIdentIndex - 1].isRecursion || pas.Common.Ident[BlockIdentIndex - 1].isStdCall;
    for (var $l6 = NumParams; $l6 >= 1; $l6--) {
      ParamIndex = $l6;
      if (!((Param[ParamIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) || ((Param[ParamIndex - 1].DataType in pas.Common.Pointers) && ((Param[ParamIndex - 1].NumAllocElements & 0xFFFF) in rtl.createSet(0,1))) || ((Param[ParamIndex - 1].DataType in pas.Common.Pointers) && (Param[ParamIndex - 1].AllocElementType in rtl.createSet(139,140))) || (Param[ParamIndex - 1].DataType in rtl.unionSet(pas.Common.OrdinalTypes,pas.Common.RealTypes)))) {
        yes = true;
        break;
      };
    };
    if (pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex === 0) if ((yes === false) && (NumParams === 1) && (pas.Common.DataSize[Param[0].DataType - 128] === 1) && (Param[0].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) pas.Optimize.asm65("\tsta " + Param[0].Name,"");
    if (yes) {
      for (var $l7 = 1, $end6 = NumParams; $l7 <= $end6; $l7++) {
        ParamIndex = $l7;
        if (pas.Common.Ident[BlockIdentIndex - 1].isRecursion || pas.Common.Ident[BlockIdentIndex - 1].isStdCall || (NumParams === 1)) {
          if (Param[ParamIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.GenerateAssignment(1,pas.Common.DataSize[8],0,Param[ParamIndex - 1].Name,"")}
           else $mod.GenerateAssignment(1,pas.Common.DataSize[Param[ParamIndex - 1].DataType - 128],0,Param[ParamIndex - 1].Name,"");
          if ((Param[ParamIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (Param[ParamIndex - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers)) && ((Param[ParamIndex - 1].NumAllocElements & 0xFFFF) > 1)) if (Param[ParamIndex - 1].DataType in rtl.createSet(139,140)) {
            pas.Optimize.asm65(":move","");
            pas.Optimize.asm65(Param[ParamIndex - 1].Name,"");
            pas.Optimize.asm65(pas.Common.IntToStr(pas.Parser.RecordSize(pas.Parser.GetIdentIndex(Param[ParamIndex - 1].Name),"")),"");
          } else if (!(Param[ParamIndex - 1].AllocElementType in rtl.createSet(139,140))) {
            if (rtl.lw(Param[ParamIndex - 1].NumAllocElements >>> 16) !== 0) {
              NumAllocElements = (Param[ParamIndex - 1].NumAllocElements & 0xFFFF) * rtl.lw(Param[ParamIndex - 1].NumAllocElements >>> 16)}
             else NumAllocElements = Param[ParamIndex - 1].NumAllocElements;
            pas.Optimize.asm65(":move","");
            pas.Optimize.asm65(Param[ParamIndex - 1].Name,"");
            pas.Optimize.asm65(pas.Common.IntToStr((NumAllocElements * pas.Common.DataSize[Param[ParamIndex - 1].AllocElementType - 128]) & 0xFFFFFFFF),"");
          };
        } else {
          Assignment = true;
          if ((Param[ParamIndex - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING) && (Param[ParamIndex - 1].DataType in rtl.unionSet(rtl.createSet(139,140),pas.Common.Pointers)) && ((Param[ParamIndex - 1].NumAllocElements & 0xFFFF) > 1)) if (Param[ParamIndex - 1].DataType in rtl.createSet(139,140)) {
            Assignment = false;
            pas.Optimize.asm65("\tdex","");
          } else if (!(Param[ParamIndex - 1].AllocElementType in rtl.createSet(139,140))) {
            Assignment = false;
            pas.Optimize.asm65("\tdex","");
          };
          if (Assignment) if (Param[ParamIndex - 1].PassMethod === pas.Common.TParameterPassingMethod.VARPASSING) {
            $mod.GenerateAssignment(1,pas.Common.DataSize[8],0,Param[ParamIndex - 1].Name,"")}
           else $mod.GenerateAssignment(1,pas.Common.DataSize[Param[ParamIndex - 1].DataType - 128],0,Param[ParamIndex - 1].Name,"");
        };
        if (ParamIndex !== NumParams) pas.Optimize.asm65("\tjmi @main","");
      };
      pas.Optimize.asm65("@main","");
    };
    if (pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex > 0) for (var $l8 = 1, $end7 = pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].NumFields; $l8 <= $end7; $l8++) {
      ParamIndex = $l8;
      tmpVarDataSize = pas.Common.VarDataSize;
      if (pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType === 140) pas.Messages.Error(i,"-- under construction --");
      if (pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType === 139) ConstVal = 0;
      if (pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType in rtl.createSet(136,137)) {
        pas.Parser.DefineIdent(i,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].Name,3,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].AllocElementType,0,170)}
       else pas.Parser.DefineIdent(i,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].Name,3,136,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].NumAllocElements,pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType,0,170);
      pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = pas.Common.TParameterPassingMethod.VARPASSING;
      pas.Common.VarDataSize = tmpVarDataSize + pas.Common.DataSize[8];
      if (pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].Kind === 1) {
        pas.Common.Ident[pas.Common.NumIdent - 1].Value = ConstVal + 32768;
        ConstVal += pas.Common.DataSize[pas.Common.TypeArray[pas.Common.Ident[BlockIdentIndex - 1].ObjectIndex - 1].Field[ParamIndex].DataType - 128];
        pas.Common.VarDataSize = tmpVarDataSize;
      };
    };
    pas.Optimize.asm65("","");
    if (!isAsm) $mod.GenerateDeclarationProlog();
    while (pas.Common.Tok[i].Kind in rtl.createSet(1,2,3,6,4,5,92,29,93,94,99,100,187,195,196,97,98,197,198,185,186,189,190,191,192,193,194)) {
      if (pas.Common.Tok[i].Kind === 187) {
        if (pas.Common.codealign.link > 0) {
          pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.link,4),"");
          pas.Optimize.asm65("","");
        };
        pas.Optimize.asm65("\t.link '" + pas.Common.LinkObj[pas.Common.Tok[i].Value] + "'","");
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 185) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Common.LoopUnroll = true;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 186) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Common.LoopUnroll = false;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 189) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Common.codealign.proc = pas.Common.Tok[i].Value;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 190) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Common.codealign.loop = pas.Common.Tok[i].Value;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 191) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Common.codealign.link = pas.Common.Tok[i].Value;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 192) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.System.Writeln("User defined: " + pas.Common.msgUser[pas.Common.Tok[i].Value]);
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 193) {
        pas.Messages.WarningUserDefined(i);
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 194) {
        if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UserDefined);
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 197) {
        pas.Common.IOCheck = true;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 198) {
        pas.Common.IOCheck = false;
        i += 2;
      };
      if (pas.Common.Tok[i].Kind === 195) {
        $mod.asm65separator(true);
        pas.Parser.DefineIdent(i,pas.Common.UnitName[pas.Common.Tok[i].UnitIndex - 1].Name,7,0,0,0,0,170);
        pas.Common.Ident[pas.Common.NumIdent - 1].UnitIndex = pas.Common.Tok[i].UnitIndex;
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".local\t" + pas.Common.UnitName[pas.Common.Tok[i].UnitIndex - 1].Name,"; UNIT");
        pas.Common.UnitNameIndex = pas.Common.Tok[i].UnitIndex;
        pas.Common.CheckTok(i + 1,7);
        pas.Common.CheckTok(i + 2,170);
        if (pas.Common.Tok[i + 2].Name !== pas.Common.UnitName[pas.Common.Tok[i].UnitIndex - 1].Name) pas.Messages.Error(i + 2,"Illegal unit name: " + pas.Common.Tok[i + 2].Name);
        pas.Common.CheckTok(i + 3,53);
        while (pas.Common.Tok[i + 4].Kind in rtl.createSet(193,194,192)) i += 2;
        pas.Common.CheckTok(i + 4,96);
        pas.Common.INTERFACETOK_USE = true;
        pas.Common.PublicSection = true;
        ImplementationUse = false;
        i += 5;
      };
      if (pas.Common.Tok[i].Kind === 196) {
        if (!ImplementationUse) pas.Common.CheckTok(i,97);
        $mod.GenerateProcFuncAsmLabels(BlockIdentIndex,false);
        VarRegister = 0;
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".endl","; UNIT " + pas.Common.UnitName[pas.Common.Tok[i].UnitIndex - 1].Name);
        j = pas.Common.NumIdent;
        while ((j > 0) && (pas.Common.Ident[j - 1].UnitIndex === pas.Common.UnitNameIndex)) {
          if (pas.Common.Ident[j - 1].Kind in rtl.createSet(4,5,99,100)) if (pas.Common.Ident[j - 1].IsUnresolvedForward && (pas.Common.Ident[j - 1].isExternal === false)) pas.Messages.Error(i,"Unresolved forward declaration of " + pas.Common.Ident[j - 1].Name);
          j -= 1;
        };
        pas.Common.UnitNameIndex = 1;
        pas.Common.PublicSection = true;
        ImplementationUse = false;
        i += 1;
      };
      if (pas.Common.Tok[i].Kind === 97) {
        pas.Common.INTERFACETOK_USE = false;
        pas.Common.PublicSection = false;
        ImplementationUse = true;
        i += 1;
      };
      if (pas.Common.Tok[i].Kind === 94) {
        i += 1;
        do {
          pas.Common.CheckTok(i,170);
          if (pas.Common.pass === pas.Common.TPass.CALL_DETERMINATION) {
            IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i].Name);
            if (IdentIndex === 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
            if (pas.Common.Ident[IdentIndex - 1].isInline) pas.Messages.Error(i,"INLINE is not allowed to exports");
            if (pas.Common.Ident[IdentIndex - 1].isOverload) {
              for (var $l9 = 1, $end8 = pas.Common.NumIdent; $l9 <= $end8; $l9++) {
                idx = $l9;
                if (pas.Common.Ident[idx - 1].Name === pas.Common.Ident[IdentIndex - 1].Name) $mod.AddCallGraphChild(pas.Common.BlockStack[pas.Common.BlockStackTop],pas.Common.Ident[idx - 1].ProcAsBlock);
              };
            } else $mod.AddCallGraphChild(pas.Common.BlockStack[pas.Common.BlockStackTop],pas.Common.Ident[IdentIndex - 1].ProcAsBlock);
          };
          i += 1;
          if (!(pas.Common.Tok[i].Kind in rtl.createSet(52,53))) pas.Common.CheckTok(i,53);
          if (pas.Common.Tok[i].Kind === 52) i += 1;
        } while (!(pas.Common.Tok[i].Kind === 53));
        i += 1;
      };
      if ((pas.Common.Tok[i].Kind === 98) || ((pas.Common.PublicSection === false) && (pas.Common.Tok[i].Kind === 13))) {
        if (!ImplementationUse) pas.Common.CheckTok(i,97);
        $mod.asm65separator(true);
        $mod.asm65separator(false);
        pas.Optimize.asm65("@UnitInit","");
        j = $mod.CompileStatement(i + 1,false);
        while (pas.Common.Tok[j + 1].Kind === 53) j = $mod.CompileStatement(j + 2,false);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\trts","");
        i = j + 1;
      };
      if (pas.Common.Tok[i].Kind === 93) {
        if (pas.Common.LIBRARYTOK_USE) pas.Common.CheckTok(i,13);
        pas.Common.CheckTok(i + 1,170);
        pas.Common.LIBRARY_NAME = pas.Common.Tok[i + 1].Name;
        if ((pas.Common.Tok[i + 2].Kind === 60) && (pas.Common.Tok[i + 3].Kind === 171)) {
          pas.Common.CODEORIGIN_BASE = pas.Common.Tok[i + 3].Value;
          pas.Common.target.codeorigin = pas.Common.CODEORIGIN_BASE;
          i += 2;
        };
        i += 1;
        pas.Common.CheckTok(i + 1,53);
        i += 2;
        pas.Common.LIBRARYTOK_USE = true;
      };
      if (pas.Common.Tok[i].Kind === 92) {
        if (pas.Common.PROGRAMTOK_USE) pas.Common.CheckTok(i,13);
        pas.Common.CheckTok(i + 1,170);
        pas.Common.PROGRAM_NAME = pas.Common.Tok[i + 1].Name;
        i += 1;
        if (pas.Common.Tok[i + 1].Kind === 54) {
          i += 1;
          do {
            i += 1;
            pas.Common.CheckTok(i,170);
            if (pas.Common.Tok[i + 1].Kind === 52) i += 1;
          } while (!(pas.Common.Tok[i + 1].Kind !== 170));
          pas.Common.CheckTok(i + 1,55);
          i += 1;
        };
        if ((pas.Common.Tok[i + 1].Kind === 60) && (pas.Common.Tok[i + 2].Kind === 171)) {
          pas.Common.CODEORIGIN_BASE = pas.Common.Tok[i + 2].Value;
          pas.Common.target.codeorigin = pas.Common.CODEORIGIN_BASE;
          i += 2;
        };
        pas.Common.CheckTok(i + 1,53);
        i += 2;
        pas.Common.PROGRAMTOK_USE = true;
      };
      if (pas.Common.Tok[i].Kind === 29) {
        if (pas.Common.LIBRARYTOK_USE) {
          j = i - 1;
          while (pas.Common.Tok[j].Kind in rtl.createSet(53,170,60,171)) j -= 1;
          if (pas.Common.Tok[j].Kind !== 93) pas.Common.CheckTok(i,13);
        };
        if (pas.Common.PROGRAMTOK_USE) {
          j = i - 1;
          while (pas.Common.Tok[j].Kind in rtl.createSet(53,55,54,170,52,60,171)) j -= 1;
          if (pas.Common.Tok[j].Kind !== 92) pas.Common.CheckTok(i,13);
        };
        if (pas.Common.INTERFACETOK_USE) if (pas.Common.Tok[i - 1].Kind !== 96) pas.Common.CheckTok(i,97);
        if (ImplementationUse) if (pas.Common.Tok[i - 1].Kind !== 97) pas.Common.CheckTok(i,13);
        i += 1;
        idx = i;
        UnitList = [];
        UnitList = rtl.arraySetLength(UnitList,"",1);
        do {
          pas.Common.CheckTok(i,170);
          for (var $l10 = 0, $end9 = rtl.length(UnitList) - 1 - 1; $l10 <= $end9; $l10++) {
            j = $l10;
            if (UnitList[j] === pas.Common.Tok[i].Name) pas.Messages.Error(i,"Duplicate identifier '" + pas.Common.Tok[i].Name + "'");
          };
          j = rtl.length(UnitList) - 1;
          UnitList[j] = pas.Common.Tok[i].Name;
          UnitList = rtl.arraySetLength(UnitList,"",j + 2);
          i += 1;
          if (pas.Common.Tok[i].Kind === 114) {
            pas.Common.CheckTok(i + 1,174);
            i += 2;
          };
          if (!(pas.Common.Tok[i].Kind in rtl.createSet(52,53))) pas.Common.CheckTok(i,53);
          if (pas.Common.Tok[i].Kind === 52) i += 1;
        } while (!(pas.Common.Tok[i].Kind !== 170));
        pas.Common.CheckTok(i,53);
        i = idx;
        UnitList = rtl.arraySetLength(UnitList,"",0);
        do {
          pas.Common.CheckTok(i,170);
          yes = true;
          for (var $l11 = 1, $end10 = pas.Common.UnitName[pas.Common.UnitNameIndex - 1].Units; $l11 <= $end10; $l11++) {
            j = $l11;
            if ((pas.Common.UnitName[pas.Common.UnitNameIndex - 1].Allow[j - 1] === pas.Common.Tok[i].Name) || (pas.Common.Tok[i].Name === "SYSTEM")) yes = false;
          };
          if (yes) {
            pas.Common.UnitName[pas.Common.UnitNameIndex - 1].Units += 1;
            if (pas.Common.UnitName[pas.Common.UnitNameIndex - 1].Units > 256) pas.Messages.Error(i,"Out of resources, MAXALLOWEDUNITS");
            pas.Common.UnitName[pas.Common.UnitNameIndex - 1].Allow[pas.Common.UnitName[pas.Common.UnitNameIndex - 1].Units - 1] = pas.Common.Tok[i].Name;
          };
          i += 1;
          if (pas.Common.Tok[i].Kind === 114) {
            pas.Common.CheckTok(i + 1,174);
            i += 2;
          };
          if (!(pas.Common.Tok[i].Kind in rtl.createSet(52,53))) pas.Common.CheckTok(i,53);
          if (pas.Common.Tok[i].Kind === 52) i += 1;
        } while (!(pas.Common.Tok[i].Kind !== 170));
        pas.Common.CheckTok(i,53);
        i += 1;
      };
      if (pas.Common.Tok[i].Kind === 6) {
        i += 1;
        do {
          pas.Common.CheckTok(i,170);
          pas.Parser.DefineIdent(i,pas.Common.Tok[i].Name,6,0,0,0,0,170);
          i += 1;
          if (pas.Common.Tok[i].Kind === 52) i += 1;
        } while (!(pas.Common.Tok[i].Kind !== 170));
        i = i + 1;
      };
      if (pas.Common.Tok[i].Kind === 1) {
        do {
          if (pas.Common.Tok[i + 1].Kind !== 170) {
            pas.Messages.Error(i + 1,"Constant name expected but " + pas.Common.GetSpelling(i + 1) + " found")}
           else if (pas.Common.Tok[i + 2].Kind === 43) {
            j = pas.Parser.CompileConstExpression(i + 3,{get: function () {
                return ConstVal;
              }, set: function (v) {
                ConstVal = v;
              }},{get: function () {
                return ConstValType;
              }, set: function (v) {
                ConstValType = v;
              }},133,false,false);
            if (pas.Common.Tok[j].Kind in pas.Common.StringTypes) {
              if (pas.Common.Tok[j].StrLength > 255) {
                pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,136,0,134,ConstVal + 256,145)}
               else pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,ConstValType,pas.Common.Tok[j].StrLength,134,ConstVal + 256,pas.Common.Tok[j].Kind);
            } else if (ConstValType in pas.Common.Pointers) {
              pas.Messages.Error$2(j,pas.Messages.TErrorCode.IllegalExpression)}
             else pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,ConstValType,0,0,ConstVal,pas.Common.Tok[j].Kind);
            i = j;
          } else if (pas.Common.Tok[i + 2].Kind === 60) {
            open_array = false;
            if ((pas.Common.Tok[i + 3].Kind === 30) && (pas.Common.Tok[i + 4].Kind === 31)) {
              j = pas.Parser.CompileType(i + 5,{get: function () {
                  return VarType;
                }, set: function (v) {
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  AllocElementType = v;
                }});
              if (VarType in rtl.createSet(139,140)) {
                pas.Messages.Error(i,"Only Array of ^" + pas.Common.InfoAboutToken(VarType) + " supported")}
               else if (VarType === 146) pas.Messages.Error(i,pas.Common.InfoAboutToken(VarType) + " arrays are not supported");
              if (VarType === 136) {
                if (AllocElementType === 0) {
                  NumAllocElements = 1;
                  AllocElementType = VarType;
                };
              } else {
                NumAllocElements = 1;
                AllocElementType = VarType;
                VarType = 136;
              };
              if (!(AllocElementType in rtl.createSet(139,140))) open_array = true;
            } else {
              j = pas.Parser.CompileType(i + 3,{get: function () {
                  return VarType;
                }, set: function (v) {
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  AllocElementType = v;
                }});
              if (pas.Common.Tok[i + 3].Kind === 30) j = pas.Parser.CompileType(j + 3,{get: function () {
                  return NestedDataType;
                }, set: function (v) {
                  NestedDataType = v;
                }},{get: function () {
                  return NestedNumAllocElements;
                }, set: function (v) {
                  NestedNumAllocElements = v;
                }},{get: function () {
                  return NestedAllocElementType;
                }, set: function (v) {
                  NestedAllocElementType = v;
                }});
            };
            if ((VarType in pas.Common.Pointers) && (NumAllocElements === 0)) if (AllocElementType !== 134) pas.Messages.Error$2(j,pas.Messages.TErrorCode.IllegalExpression);
            pas.Common.CheckTok(j + 1,43);
            if (pas.Common.Tok[i + 3].Kind in pas.Common.StringTypes) {
              j = pas.Parser.CompileConstExpression(j + 2,{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  ConstVal = v;
                }},{get: function () {
                  return ConstValType;
                }, set: function (v) {
                  ConstValType = v;
                }},133,false,true);
              if (pas.Common.Tok[i + 3].Kind === 145) {
                pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,136,0,134,ConstVal + 256 + 1,145)}
               else pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,ConstValType,pas.Common.Tok[j].StrLength,134,ConstVal + 256,pas.Common.Tok[j].Kind);
            } else if (NumAllocElements > 0) {
              pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,VarType,NumAllocElements,AllocElementType,pas.Common.NumStaticStrChars + 256 + pas.Common.CODEORIGIN_BASE,170);
              if ((pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements in rtl.createSet(0,1)) && (open_array === false)) {
                pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression)}
               else if (open_array) {
                if ((pas.Common.Tok[j + 2].Kind === 174) && (AllocElementType === 134)) {
                  pas.Common.Ident[pas.Common.NumIdent - 1].Value = pas.Common.Tok[j + 2].StrAddress + pas.Common.CODEORIGIN_BASE;
                  if (VarType !== 137) pas.Common.Ident[pas.Common.NumIdent - 1].Value += 1;
                  pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = pas.Common.Tok[j + 2].StrLength;
                  j = j + 2;
                  NumAllocElements = 0;
                } else {
                  j = $mod.ReadDataOpenArray(j + 2,pas.Common.NumStaticStrChars,AllocElementType,{get: function () {
                      return NumAllocElements;
                    }, set: function (v) {
                      NumAllocElements = v;
                    }},true,pas.Common.Tok[j].Kind === 145);
                  pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements;
                };
              } else {
                if ((pas.Common.Tok[j + 2].Kind === 174) && (AllocElementType === 134)) {
                  if (pas.Common.Tok[j + 2].StrLength > NumAllocElements) pas.Messages.Error(j + 2,"String length is larger than array of char length");
                  pas.Common.Ident[pas.Common.NumIdent - 1].Value = pas.Common.Tok[j + 2].StrAddress + pas.Common.CODEORIGIN_BASE;
                  if (VarType !== 137) pas.Common.Ident[pas.Common.NumIdent - 1].Value += 1;
                  pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = pas.Common.Tok[j + 2].StrLength;
                  j = j + 2;
                  NumAllocElements = 0;
                } else j = $mod.ReadDataArray(j + 2,pas.Common.NumStaticStrChars,AllocElementType,NumAllocElements,true,pas.Common.Tok[j].Kind === 145);
              };
              if (rtl.lw(NumAllocElements >>> 16) > 0) {
                pas.Common.NumStaticStrChars += (NumAllocElements & 0xffff) * rtl.lw(NumAllocElements >>> 16) * pas.Common.DataSize[AllocElementType - 128]}
               else pas.Common.NumStaticStrChars += NumAllocElements * pas.Common.DataSize[AllocElementType - 128];
            } else {
              j = pas.Parser.CompileConstExpression(j + 2,{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  ConstVal = v;
                }},{get: function () {
                  return ConstValType;
                }, set: function (v) {
                  ConstValType = v;
                }},VarType,false,true);
              if ((VarType in rtl.createSet(143,144)) && (ConstValType in rtl.createSet(141,142))) ConstValType = VarType;
              if ((VarType === 141) && (ConstValType === 142)) ConstValType = 141;
              if ((VarType in pas.Common.RealTypes) && (ConstValType in pas.Common.IntegerTypes)) {
                ConstVal = pas.Numbers.FromInt64(ConstVal);
                ConstValType = VarType;
              };
              pas.Common.GetCommonType(i + 1,VarType,ConstValType);
              pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,1,VarType,0,0,ConstVal,pas.Common.Tok[j].Kind);
            };
            i = j;
          } else pas.Common.CheckTok(i + 2,43);
          pas.Common.CheckTok(i + 1,53);
          i += 1;
        } while (!(pas.Common.Tok[i + 1].Kind !== 170));
        i += 1;
      };
      if (pas.Common.Tok[i].Kind === 2) {
        do {
          if (pas.Common.Tok[i + 1].Kind !== 170) {
            pas.Messages.Error(i + 1,"Type name expected but " + pas.Common.GetSpelling(i + 1) + " found")}
           else {
            pas.Common.CheckTok(i + 2,43);
            if ((pas.Common.Tok[i + 3].Kind === 30) && (pas.Common.Tok[i + 4].Kind !== 58)) {
              j = pas.Parser.CompileType(i + 5,{get: function () {
                  return VarType;
                }, set: function (v) {
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  AllocElementType = v;
                }});
              pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,2,VarType,NumAllocElements,AllocElementType,0,pas.Common.Tok[i + 3].Kind);
              pas.Common.Ident[pas.Common.NumIdent - 1].Pass = pas.Common.TPass.CALL_DETERMINATION;
            } else {
              j = pas.Parser.CompileType(i + 3,{get: function () {
                  return VarType;
                }, set: function (v) {
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  AllocElementType = v;
                }});
              if (pas.Common.Tok[i + 3].Kind === 30) j = pas.Parser.CompileType(j + 3,{get: function () {
                  return NestedDataType;
                }, set: function (v) {
                  NestedDataType = v;
                }},{get: function () {
                  return NestedNumAllocElements;
                }, set: function (v) {
                  NestedNumAllocElements = v;
                }},{get: function () {
                  return NestedAllocElementType;
                }, set: function (v) {
                  NestedAllocElementType = v;
                }});
              pas.Parser.DefineIdent(i + 1,pas.Common.Tok[i + 1].Name,2,VarType,NumAllocElements,AllocElementType,0,pas.Common.Tok[i + 3].Kind);
              pas.Common.Ident[pas.Common.NumIdent - 1].Pass = pas.Common.TPass.CALL_DETERMINATION;
            };
          };
          pas.Common.CheckTok(j + 1,53);
          i = j + 1;
        } while (!(pas.Common.Tok[i + 1].Kind !== 170));
        $mod.CheckForwardResolutions(true);
        i = i + 1;
      };
      if (pas.Common.Tok[i].Kind === 3) {
        isVolatile = false;
        isStriped = false;
        NestedDataType = 0;
        NestedAllocElementType = 0;
        NestedNumAllocElements = 0;
        if ((pas.Common.Tok[i + 1].Kind === 58) && (pas.Common.Tok[i + 2].Kind in rtl.createSet(115,116))) {
          pas.Common.CheckTok(i + 3,59);
          if (pas.Common.Tok[i + 2].Kind === 115) {
            isVolatile = true}
           else isStriped = true;
          i += 3;
        };
        do {
          NumVarOfSameType = 0;
          do {
            if (pas.Common.Tok[i + 1].Kind !== 170) {
              pas.Messages.Error(i + 1,"Variable name expected but " + pas.Common.GetSpelling(i + 1) + " found")}
             else {
              NumVarOfSameType += 1;
              if (NumVarOfSameType > 256) pas.Messages.Error(i,"Too many formal parameters");
              VarOfSameType[NumVarOfSameType - 1].Name = pas.Common.Tok[i + 1].Name;
            };
            i = i + 2;
          } while (!(pas.Common.Tok[i].Kind !== 52));
          pas.Common.CheckTok(i,60);
          if (pas.Common.Tok[i + 1].Kind === 112) {
            if (pas.Common.Tok[i + 2].Kind in rtl.createSet(30,139)) {
              i += 1;
            } else pas.Common.CheckTok(i + 2,139);
          };
          IdType = pas.Common.Tok[i + 1].Kind;
          idx = i + 1;
          open_array = false;
          isAbsolute = false;
          isExternal = false;
          if ((IdType === 30) && (pas.Common.Tok[i + 2].Kind === 31)) {
            i = pas.Parser.CompileType(i + 3,{get: function () {
                return VarType;
              }, set: function (v) {
                VarType = v;
              }},{get: function () {
                return NumAllocElements;
              }, set: function (v) {
                NumAllocElements = v;
              }},{get: function () {
                return AllocElementType;
              }, set: function (v) {
                AllocElementType = v;
              }});
            if (VarType in rtl.createSet(139,140)) {
              pas.Messages.Error(i,"Only Array of ^" + pas.Common.InfoAboutToken(VarType) + " supported")}
             else if (VarType === 146) pas.Messages.Error(i,pas.Common.InfoAboutToken(VarType) + " arrays are not supported");
            if (VarType === 136) {
              if (AllocElementType === 0) {
                NumAllocElements = 1;
                AllocElementType = VarType;
              };
            } else {
              NumAllocElements = 1;
              AllocElementType = VarType;
              VarType = 136;
            };
            ConstVal = 1;
            if (!(AllocElementType in rtl.createSet(139,140))) open_array = true;
          } else {
            i = pas.Parser.CompileType(i + 1,{get: function () {
                return VarType;
              }, set: function (v) {
                VarType = v;
              }},{get: function () {
                return NumAllocElements;
              }, set: function (v) {
                NumAllocElements = v;
              }},{get: function () {
                return AllocElementType;
              }, set: function (v) {
                AllocElementType = v;
              }});
            if (IdType === 30) i = pas.Parser.CompileType(i + 3,{get: function () {
                return NestedDataType;
              }, set: function (v) {
                NestedDataType = v;
              }},{get: function () {
                return NestedNumAllocElements;
              }, set: function (v) {
                NestedNumAllocElements = v;
              }},{get: function () {
                return NestedAllocElementType;
              }, set: function (v) {
                NestedAllocElementType = v;
              }});
            if ((NumAllocElements === 1) || (NumAllocElements === 0x10001)) ConstVal = 1;
          };
          if (pas.Common.Tok[i + 1].Kind === 104) {
            if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"REGISTER can only be associated to one variable");
            isAbsolute = true;
            VarRegister += pas.Common.DataSize[VarType - 128];
            ConstVal = ((VarRegister + 3) << 24) + 1;
            i += 1;
          } else if (pas.Common.Tok[i + 1].Kind === 95) {
            if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"Only one variable can be initialized");
            isAbsolute = true;
            isExternal = true;
            i += 1;
            external_libr = 0;
            if (pas.Common.Tok[i + 1].Kind === 170) {
              external_name = pas.Common.Tok[i + 1].Name;
              if (pas.Common.Tok[i + 2].Kind === 174) {
                external_libr = i + 2;
                i += 1;
              };
              i += 1;
            } else if (pas.Common.Tok[i + 1].Kind === 174) {
              external_name = VarOfSameType[0].Name;
              external_libr = i + 1;
              i += 1;
            };
            ConstVal = 1;
          } else if (pas.Common.Tok[i + 1].Kind === 38) {
            isAbsolute = true;
            if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"ABSOLUTE can only be associated to one variable");
            if ((VarType in rtl.createSet(139,140)) && (NumAllocElements === 0)) pas.Messages.Error(i + 1,"not possible in this case");
            i += 1;
            varPassMethod = pas.Common.TParameterPassingMethod.UNDEFINED;
            if ((pas.Common.Tok[i + 1].Kind === 170) && (pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name) - 1].Kind === 3)) {
              ConstVal = pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name) - 1].Value - 32768;
              varPassMethod = pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name) - 1].PassMethod;
              if ((ConstVal < 0) || (ConstVal > 0xFFFFFF)) pas.Messages.Error(i,"Range check error while evaluating constants (" + pas.Common.IntToStr(ConstVal) + " must be between 0 and " + pas.Common.IntToStr(0xFFFFFF) + ")");
              ConstVal = -ConstVal;
              i += 1;
            } else {
              i = pas.Parser.CompileConstExpression(i + 1,{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  ConstVal = v;
                }},{get: function () {
                  return ActualParamType;
                }, set: function (v) {
                  ActualParamType = v;
                }},133,false,true);
              if (VarType in pas.Common.Pointers) {
                pas.Common.GetCommonConstType(i,129,ActualParamType,true)}
               else pas.Common.GetCommonConstType(i,130,ActualParamType,true);
              if ((ConstVal < 0) || (ConstVal > 0xFFFFFF)) pas.Messages.Error(i,"Range check error while evaluating constants (" + pas.Common.IntToStr(ConstVal) + " must be between 0 and " + pas.Common.IntToStr(0xFFFFFF) + ")");
            };
            ConstVal += 1;
          };
          if (IdType === 170) IdType = pas.Common.Ident[pas.Parser.GetIdentIndex(pas.Common.Tok[idx].Name) - 1].IdType;
          tmpVarDataSize = pas.Common.VarDataSize;
          for (var $l12 = 1, $end11 = NumVarOfSameType; $l12 <= $end11; $l12++) {
            VarOfSameTypeIndex = $l12;
            if (VarType === 154) {
              VarType = 136;
              NestedNumAllocElements = NumAllocElements;
              IdType = 154;
              NumAllocElements = 1;
            };
            if (VarType === 146) {
              pas.Parser.DefineIdent(i,VarOfSameType[VarOfSameTypeIndex - 1].Name,3,AllocElementType,0,0,0,IdType);
              pas.Common.Ident[pas.Common.NumIdent - 1].DataType = 146;
              pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType = AllocElementType;
              pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements;
            } else {
              pas.Parser.DefineIdent(i,VarOfSameType[VarOfSameTypeIndex - 1].Name,3,VarType,NumAllocElements,AllocElementType,(isAbsolute + 0) * ConstVal,IdType);
              pas.Common.Ident[pas.Common.NumIdent - 1].NestedDataType = NestedDataType;
              pas.Common.Ident[pas.Common.NumIdent - 1].NestedAllocElementType = NestedAllocElementType;
              pas.Common.Ident[pas.Common.NumIdent - 1].NestedNumAllocElements = NestedNumAllocElements;
              pas.Common.Ident[pas.Common.NumIdent - 1].isVolatile = isVolatile;
              if (varPassMethod !== pas.Common.TParameterPassingMethod.UNDEFINED) pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod = varPassMethod;
              if (isStriped && (pas.Common.Ident[pas.Common.NumIdent - 1].PassMethod !== pas.Common.TParameterPassingMethod.VARPASSING)) {
                if (rtl.lw(NumAllocElements >>> 16) > 0) {
                  yes = ((NumAllocElements & 0xFFFF) * rtl.lw(NumAllocElements >>> 16)) <= 256}
                 else yes = NumAllocElements <= 256;
                if (yes) {
                  pas.Common.Ident[pas.Common.NumIdent - 1].isStriped = true}
                 else pas.Messages.WarningStripedAllowed(i);
              };
              varPassMethod = pas.Common.TParameterPassingMethod.UNDEFINED;
              if ((VarType === 136) && (AllocElementType === 137) && (NestedNumAllocElements > 0) && (NumAllocElements > 1)) {
                if (pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute) pas.Messages.Error(i,"ABSOLUTE modifier is not available for this type of array");
                idx = pas.Common.Ident[pas.Common.NumIdent - 1].Value - 32768;
                if (rtl.lw(NumAllocElements >>> 16) > 0) {
                  for (var $l13 = 0, $end12 = ((NumAllocElements & 0xFFFF) * rtl.lw(NumAllocElements >>> 16)) - 1; $l13 <= $end12; $l13++) {
                    j = $l13;
                    pas.Parser.SaveToDataSegment(idx,pas.Common.VarDataSize,160);
                    idx += 2;
                    pas.Common.VarDataSize += NestedNumAllocElements;
                  };
                } else {
                  for (var $l14 = 0, $end13 = NumAllocElements - 1; $l14 <= $end13; $l14++) {
                    j = $l14;
                    pas.Parser.SaveToDataSegment(idx,pas.Common.VarDataSize,160);
                    idx += 2;
                    pas.Common.VarDataSize += NestedNumAllocElements;
                  };
                };
              };
            };
            $mod.CompileRecordDeclaration({get: function () {
                return VarOfSameType;
              }, set: function (v) {
                VarOfSameType = v;
              }},{get: function () {
                return tmpVarDataSize;
              }, set: function (v) {
                tmpVarDataSize = v;
              }},{get: function () {
                return ConstVal;
              }, set: function (v) {
                ConstVal = v;
              }},VarOfSameTypeIndex,VarType,AllocElementType,NumAllocElements,isAbsolute);
          };
          if (isExternal) {
            pas.Common.Ident[pas.Common.NumIdent - 1].isExternal = true;
            pas.Common.Ident[pas.Common.NumIdent - 1].Alias = external_name;
            pas.Common.Ident[pas.Common.NumIdent - 1].Libraries = external_libr;
          };
          if (isAbsolute && (open_array === false)) {
            pas.Common.VarDataSize = tmpVarDataSize}
           else if (pas.Common.Tok[i + 1].Kind === 43) {
            if (pas.Common.Ident[pas.Common.NumIdent - 1].isStriped) pas.Messages.Error(i + 1,"Initialization for striped array not allowed");
            if (VarType in rtl.createSet(139,140)) pas.Messages.Error(i + 1,"Initialization for " + pas.Common.InfoAboutToken(VarType) + " not allowed");
            if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"Only one variable can be initialized");
            i += 1;
            if ((VarType === 136) && (AllocElementType in rtl.createSet(139,140))) {}
            else idx = pas.Common.Ident[pas.Common.NumIdent - 1].Value - 32768;
            if (!(VarType in pas.Common.Pointers)) {
              pas.Common.Ident[pas.Common.NumIdent - 1].isInitialized = true;
              i = pas.Parser.CompileConstExpression(i + 1,{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  ConstVal = v;
                }},{get: function () {
                  return ActualParamType;
                }, set: function (v) {
                  ActualParamType = v;
                }},133,false,true);
              if ((VarType in pas.Common.RealTypes) && (ActualParamType === 142)) ActualParamType = VarType;
              pas.Common.GetCommonConstType(i,VarType,ActualParamType,true);
              pas.Parser.SaveToDataSegment(idx,ConstVal,VarType);
            } else {
              pas.Common.Ident[pas.Common.NumIdent - 1].isInit = true;
              i += 1;
              if (pas.Common.Tok[i].Kind === 57) {
                if (pas.Common.Tok[i + 1].Kind !== 170) {
                  pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
                 else {
                  IdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
                  if (IdentIndex > 0) {
                    if (pas.Common.Ident[IdentIndex - 1].Kind === 1) {
                      if (!((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0))) {
                        pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp)}
                       else pas.Parser.SaveToDataSegment(idx,pas.Common.Ident[IdentIndex - 1].Value - 256 - pas.Common.CODEORIGIN_BASE,161);
                    } else pas.Parser.SaveToDataSegment(idx,pas.Common.Ident[IdentIndex - 1].Value - 32768,160);
                    VarType = 136;
                  } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
                };
                i += 1;
              } else if (pas.Common.Tok[i].Kind === 173) {
                pas.Parser.SaveToDataSegment(idx,1,128);
                pas.Parser.SaveToDataSegment(idx + 1,pas.Common.Tok[i].Value,128);
                VarType = 136;
              } else if ((pas.Common.Tok[i].Kind === 174) && (open_array === false) && (VarType === 136) && (AllocElementType === 134)) {
                pas.Parser.SaveToDataSegment(idx,(pas.Common.Tok[i].StrAddress - 256) + 1,161)}
               else if ((pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements in rtl.createSet(0,1)) && (open_array === false)) {
                pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression)}
               else if (open_array) {
                if ((pas.Common.Tok[i].Kind === 174) && (AllocElementType === 134)) {
                  pas.Common.Ident[pas.Common.NumIdent - 1].Value = (pas.Common.Tok[i].StrAddress - 256) + pas.Common.CODEORIGIN_BASE;
                  if (VarType !== 137) pas.Common.Ident[pas.Common.NumIdent - 1].Value += 1;
                  pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = pas.Common.Tok[i].StrLength;
                  pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute = true;
                  NumAllocElements = 0;
                } else {
                  i = $mod.ReadDataOpenArray(i,idx,pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType,{get: function () {
                      return NumAllocElements;
                    }, set: function (v) {
                      NumAllocElements = v;
                    }},false,pas.Common.Tok[i - 2].Kind === 145);
                  pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = NumAllocElements;
                };
                pas.Common.VarDataSize += NumAllocElements * pas.Common.DataSize[pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType - 128];
              } else {
                if ((pas.Common.Tok[i].Kind === 174) && (AllocElementType === 134)) {
                  if (pas.Common.Tok[i].StrLength > NumAllocElements) pas.Messages.Error(i,"string length is larger than array of char length");
                  pas.Common.Ident[pas.Common.NumIdent - 1].Value = (pas.Common.Tok[i].StrAddress - 256) + pas.Common.CODEORIGIN_BASE;
                  if (VarType !== 137) pas.Common.Ident[pas.Common.NumIdent - 1].Value += 1;
                  pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements = pas.Common.Tok[i].StrLength;
                  pas.Common.Ident[pas.Common.NumIdent - 1].isAbsolute = true;
                } else i = $mod.ReadDataArray(i,idx,pas.Common.Ident[pas.Common.NumIdent - 1].AllocElementType,rtl.lw(pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements | rtl.lw(pas.Common.Ident[pas.Common.NumIdent - 1].NumAllocElements_ << 16)),false,pas.Common.Tok[i - 2].Kind === 145);
              };
            };
          };
          pas.Common.CheckTok(i + 1,53);
          isVolatile = false;
          isStriped = false;
          if ((pas.Common.Tok[i + 2].Kind === 58) && (pas.Common.Tok[i + 3].Kind in rtl.createSet(115,116))) {
            pas.Common.CheckTok(i + 4,59);
            if (pas.Common.Tok[i + 3].Kind === 115) {
              isVolatile = true}
             else isStriped = true;
            i += 3;
          };
          i = i + 1;
        } while (!(pas.Common.Tok[i + 1].Kind !== 170));
        $mod.CheckForwardResolutions(false);
        i = i + 1;
      };
      if (pas.Common.Tok[i].Kind in rtl.createSet(4,5,99,100)) if (pas.Common.Tok[i + 1].Kind !== 170) {
        pas.Messages.Error(i + 1,"Procedure name expected but " + pas.Common.GetSpelling(i + 1) + " found")}
       else {
        IsNestedFunction = pas.Common.Tok[i].Kind === 5;
        if (pas.Common.INTERFACETOK_USE) {
          ForwardIdentIndex = 0}
         else ForwardIdentIndex = pas.Parser.GetIdentIndex(pas.Common.Tok[i + 1].Name);
        if ((ForwardIdentIndex !== 0) && pas.Common.Ident[ForwardIdentIndex - 1].isOverload) {
          j = i;
          $mod.FormalParameterList({get: function () {
              return j;
            }, set: function (v) {
              j = v;
            }},{get: function () {
              return ParamIndex;
            }, set: function (v) {
              ParamIndex = v;
            }},{get: function () {
              return Param;
            }, set: function (v) {
              Param = v;
            }},{get: function () {
              return TmpResult;
            }, set: function (v) {
              TmpResult = v;
            }},IsNestedFunction,{get: function () {
              return NestedFunctionResultType;
            }, set: function (v) {
              NestedFunctionResultType = v;
            }},{get: function () {
              return NestedFunctionNumAllocElements;
            }, set: function (v) {
              NestedFunctionNumAllocElements = v;
            }},{get: function () {
              return NestedFunctionAllocElementType;
            }, set: function (v) {
              NestedFunctionAllocElementType = v;
            }});
          ForwardIdentIndex = $mod.GetIdentProc(pas.Common.Ident[ForwardIdentIndex - 1].Name,ForwardIdentIndex,pas.Common.TParamList$clone(Param),ParamIndex);
        };
        if (ForwardIdentIndex !== 0) if (pas.Common.Ident[ForwardIdentIndex - 1].IsUnresolvedForward && (pas.Common.Ident[ForwardIdentIndex - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) if (pas.Common.Tok[i].Kind !== pas.Common.Ident[ForwardIdentIndex - 1].Kind) pas.Messages.Error(i,"Unresolved forward declaration of " + pas.Common.Ident[ForwardIdentIndex - 1].Name);
        if (ForwardIdentIndex !== 0) if (!pas.Common.Ident[ForwardIdentIndex - 1].IsUnresolvedForward || (pas.Common.Ident[ForwardIdentIndex - 1].Block !== pas.Common.BlockStack[pas.Common.BlockStackTop]) || ((pas.Common.Tok[i].Kind === 4) && (pas.Common.Ident[ForwardIdentIndex - 1].Kind !== 4)) || ((pas.Common.Tok[i].Kind === 5) && (pas.Common.Ident[ForwardIdentIndex - 1].Kind !== 5))) ForwardIdentIndex = 0;
        if ((pas.Common.Tok[i].Kind in rtl.createSet(99,100)) && (ForwardIdentIndex === 0)) pas.Messages.Error(i,"constructors, destructors operators must be methods");
        i = pas.Parser.DefineFunction(i,ForwardIdentIndex,{get: function () {
            return isForward;
          }, set: function (v) {
            isForward = v;
          }},{get: function () {
            return isInt;
          }, set: function (v) {
            isInt = v;
          }},{get: function () {
            return isInl;
          }, set: function (v) {
            isInl = v;
          }},{get: function () {
            return isOvr;
          }, set: function (v) {
            isOvr = v;
          }},{get: function () {
            return IsNestedFunction;
          }, set: function (v) {
            IsNestedFunction = v;
          }},{get: function () {
            return NestedFunctionResultType;
          }, set: function (v) {
            NestedFunctionResultType = v;
          }},{get: function () {
            return NestedFunctionNumAllocElements;
          }, set: function (v) {
            NestedFunctionNumAllocElements = v;
          }},{get: function () {
            return NestedFunctionAllocElementType;
          }, set: function (v) {
            NestedFunctionAllocElementType = v;
          }});
        if (((ForwardIdentIndex === 0) && isForward) || pas.Common.INTERFACETOK_USE) {
          pas.Common.Ident[pas.Common.NumIdent - 1].IsUnresolvedForward = true;
        } else {
          if (ForwardIdentIndex === 0) {
            $mod.TestIdentProc(i,pas.Common.Ident[pas.Common.NumIdent - 1].Name);
            if ((pas.Common.pass === pas.Common.TPass.CODE_GENERATION) && !pas.Common.Ident[pas.Common.NumIdent - 1].IsNotDead) {
              pas.Common.OutputDisabled = true;
            };
            iocheck_old = pas.Common.IOCheck;
            isInterrupt_old = pas.Common.isInterrupt;
            j = $mod.CompileBlock(i + 1,pas.Common.NumIdent,pas.Common.Ident[pas.Common.NumIdent - 1].NumParams,IsNestedFunction,NestedFunctionResultType,NestedFunctionNumAllocElements,NestedFunctionAllocElementType);
            pas.Common.IOCheck = iocheck_old;
            pas.Common.isInterrupt = isInterrupt_old;
            i = j + 1;
            $mod.GenerateReturn(IsNestedFunction,isInt,isInl,isOvr);
            if (pas.Common.OutputDisabled) pas.Common.OutputDisabled = false;
          } else {
            if ((pas.Common.pass === pas.Common.TPass.CODE_GENERATION) && !pas.Common.Ident[ForwardIdentIndex - 1].IsNotDead) {
              pas.Common.OutputDisabled = true;
            };
            pas.Common.Ident[ForwardIdentIndex - 1].Value = pas.Common.CodeSize;
            $mod.FormalParameterList({get: function () {
                return i;
              }, set: function (v) {
                i = v;
              }},{get: function () {
                return ParamIndex;
              }, set: function (v) {
                ParamIndex = v;
              }},{get: function () {
                return Param;
              }, set: function (v) {
                Param = v;
              }},{get: function () {
                return TmpResult;
              }, set: function (v) {
                TmpResult = v;
              }},IsNestedFunction,{get: function () {
                return NestedFunctionResultType;
              }, set: function (v) {
                NestedFunctionResultType = v;
              }},{get: function () {
                return NestedFunctionNumAllocElements;
              }, set: function (v) {
                NestedFunctionNumAllocElements = v;
              }},{get: function () {
                return NestedFunctionAllocElementType;
              }, set: function (v) {
                NestedFunctionAllocElementType = v;
              }});
            i -= 2;
            if (ParamIndex > 0) {
              if (pas.Common.Ident[ForwardIdentIndex - 1].NumParams !== ParamIndex) pas.Messages.Error(i,"Wrong number of parameters specified for call to " + "'" + pas.Common.Ident[ForwardIdentIndex - 1].Name + "'");
              for (var $l15 = 1, $end14 = pas.Common.Ident[ForwardIdentIndex - 1].NumParams; $l15 <= $end14; $l15++) {
                ParamIndex = $l15;
                if ((pas.Common.Ident[ForwardIdentIndex - 1].Param[ParamIndex - 1].Name !== Param[ParamIndex - 1].Name) || (pas.Common.Ident[ForwardIdentIndex - 1].Param[ParamIndex - 1].DataType !== Param[ParamIndex - 1].DataType)) pas.Messages.Error(i,"Function header '" + pas.Common.Ident[ForwardIdentIndex - 1].Name + "' doesn't match forward : " + pas.Common.Ident[ForwardIdentIndex - 1].Param[ParamIndex - 1].Name + " <> " + Param[ParamIndex - 1].Name);
              };
              for (var $l16 = 1, $end15 = pas.Common.Ident[ForwardIdentIndex - 1].NumParams; $l16 <= $end15; $l16++) {
                ParamIndex = $l16;
                if (pas.Common.Ident[ForwardIdentIndex - 1].Param[ParamIndex - 1].PassMethod !== Param[ParamIndex - 1].PassMethod) pas.Messages.Error(i,"Function header doesn't match the previous declaration '" + pas.Common.Ident[ForwardIdentIndex - 1].Name + "'");
              };
            };
            Tmp = 0;
            if (pas.Common.Ident[ForwardIdentIndex - 1].isKeep) pas.Common.SetModifierBit(pas.Common.TModifierCode.mKeep,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isOverload) pas.Common.SetModifierBit(pas.Common.TModifierCode.mOverload,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isAsm) pas.Common.SetModifierBit(pas.Common.TModifierCode.mAssembler,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isRegister) pas.Common.SetModifierBit(pas.Common.TModifierCode.mRegister,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isInterrupt) pas.Common.SetModifierBit(pas.Common.TModifierCode.mInterrupt,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isPascal) pas.Common.SetModifierBit(pas.Common.TModifierCode.mPascal,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isStdCall) pas.Common.SetModifierBit(pas.Common.TModifierCode.mStdCall,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (pas.Common.Ident[ForwardIdentIndex - 1].isInline) pas.Common.SetModifierBit(pas.Common.TModifierCode.mInline,{get: function () {
                return Tmp;
              }, set: function (v) {
                Tmp = v;
              }});
            if (Tmp !== TmpResult) pas.Messages.Error(i,"Function header doesn't match the previous declaration '" + pas.Common.Ident[ForwardIdentIndex - 1].Name + "'. Different modifiers.");
            if (IsNestedFunction) if ((pas.Common.Ident[ForwardIdentIndex - 1].DataType !== NestedFunctionResultType) || (pas.Common.Ident[ForwardIdentIndex - 1].NestedFunctionNumAllocElements !== NestedFunctionNumAllocElements) || (pas.Common.Ident[ForwardIdentIndex - 1].NestedFunctionAllocElementType !== NestedFunctionAllocElementType)) pas.Messages.Error(i,"Function header doesn't match the previous declaration '" + pas.Common.Ident[ForwardIdentIndex - 1].Name + "'");
            pas.Common.CheckTok(i + 2,53);
            iocheck_old = pas.Common.IOCheck;
            isInterrupt_old = pas.Common.isInterrupt;
            j = $mod.CompileBlock(i + 3,ForwardIdentIndex,pas.Common.Ident[ForwardIdentIndex - 1].NumParams,IsNestedFunction,pas.Common.Ident[ForwardIdentIndex - 1].DataType,pas.Common.Ident[ForwardIdentIndex - 1].NestedFunctionNumAllocElements,pas.Common.Ident[ForwardIdentIndex - 1].NestedFunctionAllocElementType);
            pas.Common.IOCheck = iocheck_old;
            pas.Common.isInterrupt = isInterrupt_old;
            i = j + 1;
            $mod.GenerateReturn(IsNestedFunction,isInt,pas.Common.Ident[ForwardIdentIndex - 1].isInline,pas.Common.Ident[ForwardIdentIndex - 1].isOverload);
            if (pas.Common.OutputDisabled) pas.Common.OutputDisabled = false;
            pas.Common.Ident[ForwardIdentIndex - 1].IsUnresolvedForward = false;
          };
        };
        pas.Common.CheckTok(i,53);
        i += 1;
      };
    };
    pas.Common.OutputDisabled = (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) && (pas.Common.BlockStack[pas.Common.BlockStackTop] !== 1) && !pas.Common.Ident[BlockIdentIndex - 1].IsNotDead;
    if (!isAsm) {
      $mod.GenerateDeclarationEpilog();
      if (!(pas.Common.Tok[i - 1].Kind in rtl.createSet(189,190,191))) if (pas.Common.LIBRARYTOK_USE && (pas.Common.Tok[i].Kind !== 13)) {
        i += 1}
       else pas.Common.CheckTok(i,13);
    };
    Result = $mod.CompileStatement(i,isAsm);
    j = pas.Common.NumIdent;
    while ((j > 0) && (pas.Common.Ident[j - 1].Block === pas.Common.BlockStack[pas.Common.BlockStackTop])) {
      if (pas.Common.Ident[j - 1].Kind in rtl.createSet(4,5,99,100)) if (pas.Common.Ident[j - 1].IsUnresolvedForward && (pas.Common.Ident[j - 1].isExternal === false)) pas.Messages.Error(i,"Unresolved forward declaration of " + pas.Common.Ident[j - 1].Name);
      j -= 1;
    };
    if (IsFunction) {
      pas.Optimize.asm65("@exit","");
      if (pas.Common.Ident[BlockIdentIndex - 1].isStdCall || pas.Common.Ident[BlockIdentIndex - 1].isRecursion) {
        $mod.Push(pas.Common.Ident[pas.Parser.GetIdentIndex("RESULT") - 1].Value,1,pas.Common.DataSize[FunctionResultType - 128],pas.Parser.GetIdentIndex("RESULT"),0);
        pas.Optimize.asm65("","");
        if (!isInl) {
          pas.Optimize.asm65("\t.ifdef @new","");
          pas.Optimize.asm65("\tlda <@VarData","");
          pas.Optimize.asm65("\tsta :ztmp","");
          pas.Optimize.asm65("\tlda >@VarData","");
          pas.Optimize.asm65("\tldy #@VarDataSize-1","");
          pas.Optimize.asm65("\tjmp @FreeMem","");
          pas.Optimize.asm65("\teif","");
        };
      };
    };
    if (pas.Common.Ident[BlockIdentIndex - 1].Kind in rtl.createSet(4,5,99,100)) {
      if (pas.Common.Ident[BlockIdentIndex - 1].isInline) pas.Optimize.asm65("\t.ENDM","");
      $mod.GenerateProcFuncAsmLabels(BlockIdentIndex,true);
    };
    pas.Common.BlockStackTop -= 1;
    if (pas.Common.pass === pas.Common.TPass.CALL_DETERMINATION) if (pas.Common.Ident[BlockIdentIndex - 1].isKeep || pas.Common.Ident[BlockIdentIndex - 1].isInterrupt || pas.Common.Ident[BlockIdentIndex - 1].updateResolvedForward) $mod.AddCallGraphChild(pas.Common.BlockStack[pas.Common.BlockStackTop],pas.Common.Ident[BlockIdentIndex - 1].ProcAsBlock);
    return Result;
  };
  this.CompileProgram = function () {
    var i = 0;
    var j = 0;
    var DataSegmentSize = 0;
    var IdentIndex = 0;
    var tmp = "";
    var a = "";
    var yes = false;
    var res = pas.Common.TResource.$new();
    pas.Optimize.ResetOpty();
    pas.Common.optimize.use = false;
    tmp = "";
    pas.Common.IOCheck = true;
    DataSegmentSize = 0;
    pas.Common.AsmBlockIndex = 0;
    pas.Parser.DefineIdent(1,"MAIN",4,0,0,0,0,170);
    $mod.GenerateProgramProlog();
    j = $mod.CompileBlock(1,pas.Common.NumIdent,0,false,0,0,0);
    if (pas.Common.Tok[j].Kind === 14) {
      pas.Common.CheckTok(j + 1,51)}
     else if (pas.Common.Tok[pas.Common.NumTok].Kind === 199) pas.Messages.Error(pas.Common.NumTok,"Unexpected end of file");
    j = pas.Common.NumIdent;
    while ((j > 0) && (pas.Common.Ident[j - 1].UnitIndex === 1)) {
      if (pas.Common.Ident[j - 1].Kind in rtl.createSet(4,5,99,100)) if (pas.Common.Ident[j - 1].IsUnresolvedForward && (pas.Common.Ident[j - 1].isExternal === false)) pas.Messages.Error(j,"Unresolved forward declaration of " + pas.Common.Ident[j - 1].Name);
      j -= 1;
    };
    $mod.StopOptimization();
    pas.Optimize.asm65("@exit","");
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("@halt\tldx #$00","");
    pas.Optimize.asm65("\ttxs","");
    if (pas.Common.LIBRARY_USE) pas.Optimize.asm65("@regX\tldx #$00","");
    if (pas.Common.target.id === pas.Common.TComputer.A8) {
      if (pas.Common.LIBRARY_USE === false) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.ROMOFF","");
        pas.Optimize.asm65("\tinc portb","");
        pas.Optimize.asm65("\t.fi","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\tldy #$01","");
    };
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\trts","");
    $mod.asm65separator(true);
    pas.Optimize.asm65("","");
    pas.Optimize.asm65(".local\t@DEFINES","");
    for (j = 1; j <= 256; j++) if ((pas.Common.Defines[j - 1].Name !== "") && (pas.Common.Defines[j - 1].Macro === "")) pas.Optimize.asm65(pas.Common.Defines[j - 1].Name,"");
    pas.Optimize.asm65(".endl","");
    pas.Optimize.asm65("\r\n.local\t@RESOURCE","");
    for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
      i = $l;
      pas.Common.resArray[i].resStream = false;
      yes = false;
      for (var $l1 = 1, $end1 = pas.Common.NumIdent; $l1 <= $end1; $l1++) {
        IdentIndex = $l1;
        if ((pas.Common.resArray[i].resName === pas.Common.Ident[IdentIndex - 1].Name) && (pas.Common.Ident[IdentIndex - 1].Block === 1)) {
          if ((pas.Common.Ident[IdentIndex - 1].DataType in pas.Common.Pointers) && (pas.Common.Ident[IdentIndex - 1].NumAllocElements > 0)) {
            tmp = $mod.GetLocalName(IdentIndex,"adr.")}
           else tmp = $mod.GetLocalName(IdentIndex,"");
          if (pas.Common.resArray[i].resType === "LIBRARY") pas.Common.RCLIBRARY = true;
          pas.Common.resArray[i].resFullName = tmp;
          pas.Common.Ident[IdentIndex - 1].Pass = pas.Common.pass;
          yes = true;
          break;
        };
      };
      if (!yes) if (pas.Utilities.AnsiUpperCase(pas.Common.resArray[i].resType) === "SAPR") {
        pas.Optimize.asm65(pas.Common.resArray[i].resName,"");
        pas.Optimize.asm65("\tdta a(" + pas.Common.resArray[i].resName + ".end-" + pas.Common.resArray[i].resName + "-2)","");
        pas.Optimize.asm65("\tins '" + pas.Common.resArray[i].resFile + "'","");
        pas.Optimize.asm65(pas.Common.resArray[i].resName + ".end","");
        pas.Common.resArray[i].resStream = true;
      } else if (pas.Utilities.AnsiUpperCase(pas.Common.resArray[i].resType) === "PP") {
        pas.Optimize.asm65(pas.Common.resArray[i].resName + '\tm@pp "\'' + pas.Common.resArray[i].resFile + '\'"',"");
        pas.Optimize.asm65(pas.Common.resArray[i].resName + ".end","");
        pas.Common.resArray[i].resStream = true;
      } else if (pas.Utilities.AnsiUpperCase(pas.Common.resArray[i].resType) === "DOSFILE") {}
      else if (pas.Utilities.AnsiUpperCase(pas.Common.resArray[i].resType) === "RCDATA") {
        pas.Optimize.asm65(pas.Common.resArray[i].resName + "\tins '" + pas.Common.resArray[i].resFile + "'","");
        pas.Optimize.asm65(pas.Common.resArray[i].resName + ".end","");
        pas.Common.resArray[i].resStream = true;
      } else pas.Messages.Error(pas.Common.NumTok,"Resource identifier not found: Type = " + pas.Common.resArray[i].resType + ", Name = " + pas.Common.resArray[i].resName);
    };
    pas.Optimize.asm65(".endl","");
    pas.Optimize.asm65("","");
    pas.Optimize.asm65(".endl","; MAIN");
    $mod.asm65separator(true);
    $mod.asm65separator(false);
    pas.Optimize.asm65("","");
    pas.Optimize.asm65(".macro\tUNITINITIALIZATION","");
    for (var $l2 = pas.Common.NumUnits; $l2 >= 2; $l2--) {
      j = $l2;
      if (pas.Common.UnitName[j - 1].Name !== "") {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\t.ifdef MAIN." + pas.Common.UnitName[j - 1].Name + ".@UnitInit","");
        pas.Optimize.asm65("\tjsr MAIN." + pas.Common.UnitName[j - 1].Name + ".@UnitInit","");
        pas.Optimize.asm65("\t.fi","");
      };
    };
    pas.Optimize.asm65(".endm","");
    $mod.asm65separator(true);
    for (var $l3 = pas.Common.NumUnits; $l3 >= 2; $l3--) {
      j = $l3;
      if (pas.Common.UnitName[j - 1].Name !== "") {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tift .SIZEOF(MAIN." + pas.Common.UnitName[j - 1].Name + ") > 0","");
        pas.Optimize.asm65("\t.print '" + pas.Common.UnitName[j - 1].Name + ": " + "',MAIN." + pas.Common.UnitName[j - 1].Name + "," + "'..'" + "," + "MAIN." + pas.Common.UnitName[j - 1].Name + "+.SIZEOF(MAIN." + pas.Common.UnitName[j - 1].Name + ")-1","");
        pas.Optimize.asm65("\teif","");
      };
    };
    pas.Optimize.asm65("","");
    pas.Optimize.asm65(".nowarn\t.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1","");
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\tift .SIZEOF(MAIN.@RESOURCE)>0","");
    pas.Optimize.asm65(".nowarn\t.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1","");
    pas.Optimize.asm65("\teif","");
    pas.Optimize.asm65("","");
    for (var $l4 = 0, $end2 = rtl.length(pas.Common.resArray) - 1 - 1; $l4 <= $end2; $l4++) {
      i = $l4;
      if (pas.Common.resArray[i].resStream) pas.Optimize.asm65("\t.print '$R " + pas.Common.resArray[i].resName + "'," + "' '" + "," + '"\'' + pas.Common.resArray[i].resFile + '\'"' + "," + "' '" + ",MAIN.@RESOURCE." + pas.Common.resArray[i].resName + "," + "'..'" + ",MAIN.@RESOURCE." + pas.Common.resArray[i].resName + ".end-1","");
    };
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("@end","");
    pas.Optimize.asm65("","");
    pas.Optimize.asm65(".nowarn\t.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1","");
    $mod.asm65separator(true);
    pas.Optimize.asm65("","");
    if (pas.Common.DATA_BASE > 0) {
      pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.DATA_BASE,4),"")}
     else {
      pas.Optimize.asm65("\t?adr = *","");
      pas.Optimize.asm65("\tift (?adr < ?old_adr) && (?old_adr - ?adr < $120)","");
      pas.Optimize.asm65("\t?adr = ?old_adr","");
      pas.Optimize.asm65("\teif","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\torg ?adr","");
      pas.Optimize.asm65("\t?old_adr = *","");
    };
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("DATAORIGIN","");
    if (pas.Common.DataSegmentUse) {
      if (pas.Common.pass === pas.Common.TPass.CODE_GENERATION) {
        DataSegmentSize = pas.Common.VarDataSize;
        if (pas.Common.LIBRARYTOK_USE === false) for (var $l5 = pas.Common.VarDataSize - 1; $l5 >= 0; $l5--) {
          j = $l5;
          if (pas.Common.DataSegment[j] !== 0) {
            DataSegmentSize = j + 1;
            break;
          };
        };
        tmp = "";
        for (var $l6 = 0, $end3 = DataSegmentSize - 1; $l6 <= $end3; $l6++) {
          j = $l6;
          if ((j % 24) === 0) {
            if (tmp !== "") pas.Optimize.asm65(tmp,"");
            tmp = ".by";
          };
          if ((j % 8) === 0) tmp = tmp + " ";
          if ((pas.Common.DataSegment[j] & 0xc000) === 0x8000) {
            tmp = tmp + " <[DATAORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.DataSegment[j] & 255) | ((pas.Common.DataSegment[j + 1] & 255) << 8),4) + "]"}
           else if ((pas.Common.DataSegment[j] & 0xc000) === 0x4000) {
            tmp = tmp + " >[DATAORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.DataSegment[j - 1] & 255) | ((pas.Common.DataSegment[j] & 255) << 8),4) + "]"}
           else if ((pas.Common.DataSegment[j] & 0x3000) === 0x2000) {
            tmp = tmp + " <[CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.DataSegment[j] & 255) | ((pas.Common.DataSegment[j + 1] & 255) << 8),4) + "]"}
           else if ((pas.Common.DataSegment[j] & 0x3000) === 0x1000) {
            tmp = tmp + " >[CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.DataSegment[j - 1] & 255) | ((pas.Common.DataSegment[j] & 255) << 8),4) + "]"}
           else tmp = tmp + " $" + pas.SysUtils.IntToHex(pas.Common.DataSegment[j],2);
        };
        if (tmp !== "") pas.Optimize.asm65(tmp,"");
      };
    };
    if (pas.Common.LIBRARYTOK_USE) {
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("PROGRAMSTACK","");
    } else {
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("VARINITSIZE\t= *-DATAORIGIN","");
      pas.Optimize.asm65("VARDATASIZE\t= " + pas.Common.IntToStr(pas.Common.VarDataSize),"");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("PROGRAMSTACK\t= DATAORIGIN+VARDATASIZE","");
    };
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\t.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK","");
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\tert DATAORIGIN<@end,'DATA memory overlap'","");
    if (pas.Common.FastMul > 0) {
      $mod.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\ticl 'common\\fmul.asm'","; fast multiplication");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\t.print 'FMUL_INIT: ',fmulinit,'..',*-1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.FastMul,2) + "00","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\t.print 'FMUL_DATA: ',*,'..',*+$07FF","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("square1_lo\t.ds $200","");
      pas.Optimize.asm65("square1_hi\t.ds $200","");
      pas.Optimize.asm65("square2_lo\t.ds $200","");
      pas.Optimize.asm65("square2_hi\t.ds $200","");
    };
    if (pas.Common.target.id === pas.Common.TComputer.A8) {
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\trun START","");
    };
    $mod.asm65separator(true);
    pas.Optimize.asm65("","");
    pas.Optimize.asm65(".macro\tSTATICDATA","");
    tmp = "";
    for (var $l7 = 0, $end4 = pas.Common.NumStaticStrChars - 1; $l7 <= $end4; $l7++) {
      i = $l7;
      if ((i % 24) === 0) {
        if (i > 0) pas.Optimize.asm65(tmp,"");
        tmp = ".by ";
      } else if ((i > 0) && ((i % 8) === 0)) tmp = tmp + " ";
      if ((pas.Common.StaticStringData[i] & 0xc000) === 0x8000) {
        tmp = tmp + " <[DATAORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.StaticStringData[i] & 255) | ((pas.Common.StaticStringData[i + 1] & 255) << 8),4) + "]"}
       else if ((pas.Common.StaticStringData[i] & 0xc000) === 0x4000) {
        tmp = tmp + " >[DATAORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.StaticStringData[i - 1] & 255) | ((pas.Common.StaticStringData[i] & 255) << 8),4) + "]"}
       else if ((pas.Common.StaticStringData[i] & 0x3000) === 0x2000) {
        tmp = tmp + " <[CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.StaticStringData[i] & 255) | ((pas.Common.StaticStringData[i + 1] & 255) << 8),4) + "]"}
       else if ((pas.Common.StaticStringData[i] & 0x3000) === 0x1000) {
        tmp = tmp + " >[CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.StaticStringData[i - 1] & 255) | ((pas.Common.StaticStringData[i] & 255) << 8),4) + "]"}
       else tmp = tmp + " $" + pas.SysUtils.IntToHex(pas.Common.StaticStringData[i],2);
    };
    if (tmp !== "") pas.Optimize.asm65(tmp,"");
    pas.Optimize.asm65(".endm","");
    if (((rtl.length(pas.Common.resArray) - 1) > 0) && (pas.Common.target.id !== pas.Common.TComputer.A8)) {
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".local\tRESOURCE","");
      pas.Optimize.asm65("\ticl '" + pas.Utilities.AnsiLowerCase(pas.Common.target.name) + "\\resource.asm'","");
      pas.Optimize.asm65("","");
      for (var $l8 = 0, $end5 = rtl.length(pas.Common.resArray) - 1 - 1; $l8 <= $end5; $l8++) {
        i = $l8;
        if (pas.Common.resArray[i].resStream === false) {
          j = pas.Common.NumIdent;
          while ((j > 0) && (pas.Common.Ident[j - 1].UnitIndex === 1)) {
            if (pas.Common.Ident[j - 1].Name === pas.Common.resArray[i].resName) {
              pas.Common.resArray[i].resValue = pas.Common.Ident[j - 1].Value;
              break;
            };
            j -= 1;
          };
        };
      };
      for (var $l9 = 0, $end6 = rtl.length(pas.Common.resArray) - 1 - 1; $l9 <= $end6; $l9++) {
        i = $l9;
        for (var $l10 = 0, $end7 = rtl.length(pas.Common.resArray) - 1 - 1; $l10 <= $end7; $l10++) {
          j = $l10;
          if (pas.Common.resArray[i].resValue < pas.Common.resArray[j].resValue) {
            res.$assign(pas.Common.resArray[j]);
            pas.Common.resArray[j].$assign(pas.Common.resArray[i]);
            pas.Common.resArray[i].$assign(res);
          };
        };
      };
      for (var $l11 = 0, $end8 = rtl.length(pas.Common.resArray) - 1 - 1; $l11 <= $end8; $l11++) {
        i = $l11;
        if (pas.Common.resArray[i].resStream === false) {
          a = "\t" + pas.Common.resArray[i].resType + " '" + pas.Common.resArray[i].resFile + "'" + " ";
          a = a + pas.Common.resArray[i].resFullName;
          for (j = 1; j <= 8; j++) a = a + " " + pas.Common.resArray[i].resPar[j - 1];
          pas.Optimize.asm65(a,"");
        };
      };
      pas.Optimize.asm65(".endl","");
    };
    pas.Optimize.asm65("","");
    pas.Optimize.asm65("\tend","");
    pas.Optimize.FlushTempBuf();
  };
  this.Syntax = function (ExitCode) {
    pas.System.Writeln("");
    pas.System.Writeln("Syntax: mp <inputfile>.pas [options]");
    pas.System.Writeln("");
    pas.System.Writeln("-ipath:<folder>    Add the folder <folder> to the unit include path");
    pas.System.Writeln("-define:<symbol>   Define the symbol <symbol>");
    pas.System.Writeln("-cpu:<cpu>         Specify the CPU mode: 6502 (default), 65c02, 65816");
    pas.System.Writeln("-target:<platform> Specify the target platform: a8 (default), c4p, c64, neo, raw, x16");
    pas.System.Writeln("-code:<address>    Specify the memory start address for the code");
    pas.System.Writeln("-data:<address>    Specify the memory start address for variables and arrays");
    pas.System.Writeln("-stack:<address>   Specify the memory start address for the software stack (64 bytes required)");
    pas.System.Writeln("-zpage:<address>   Specify the memory start address of variables in the zero page (26 bytes required)");
    pas.System.Writeln("-o:<outputfile>    Specify the output file path (default <inputfile>.a65)");
    pas.System.Writeln("-diag              Activate diagnostics mode");
    pas.Utilities.RaiseHaltException(ExitCode);
  };
  this.ParameterError = function (index, message) {
    var i = 0;
    pas.System.Write("Options: ");
    for (var $l = 1, $end = pas.Utilities.TEnvironment.GetParameterCount(); $l <= $end; $l++) {
      i = $l;
      if (i < index) {
        pas.Console.TextColor(10);
      } else if (i === index) {
        pas.Console.TextColor(12);
      } else {
        pas.Console.NormVideo();
      };
      pas.System.Write(pas.Utilities.TEnvironment.GetParameterString(i));
      pas.System.Write(" ");
    };
    pas.System.Writeln();
    pas.Console.TextColor(12);
    pas.System.Writeln("ERROR: Check option number " + pas.Common.IntToStr(index) + ". " + message);
    pas.Console.NormVideo();
    $mod.Syntax(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
  };
  this.ParameterValueError = function (index, parameterValue, message) {
    $mod.ParameterError(index,"Invalid parameter value '" + parameterValue + "'. " + message);
  };
  this.ParseHexParameter = function (index, parameterValue) {
    var Result = 0;
    var err = 0;
    pas.System.val$6("$" + parameterValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return err;
      }, set: function (v) {
        err = v;
      }});
    if (err !== 0) $mod.ParameterValueError(index,parameterValue,"Value is no hexadeciment number.");
    if ((Result < 0) || (Result > 0x10000)) $mod.ParameterValueError(index,parameterValue,"Value must be between $0000-$FFFF.");
    return Result;
  };
  this.ParseParam = function () {
    var i = 0;
    var parameter = "";
    var parameterUpperCase = "";
    var parameterValue = "";
    var s = "";
    var t = "";
    var c = "";
    t = "A8";
    c = "";
    i = 1;
    while (i <= pas.Utilities.TEnvironment.GetParameterCount()) {
      parameter = pas.Utilities.TEnvironment.GetParameterString(i);
      parameterUpperCase = pas.Utilities.AnsiUpperCase(parameter);
      if (parameter.charAt(0) === "-") {
        if (parameterUpperCase === "-O") {
          i += 1;
          pas.Common.outputFile = parameter;
          if (pas.Common.outputFile === "") $mod.ParameterError(i,"Output file path is empty");
        } else if (pas.System.Pos("-O:",parameterUpperCase) === 1) {
          pas.Common.outputFile = pas.System.Copy(parameter,4,255);
          if (pas.Common.outputFile === "") $mod.ParameterError(i,"Output file path is empty");
        } else if (parameterUpperCase === "-DIAG") {
          pas.Common.DiagMode = true}
         else if ((parameterUpperCase === "-IPATH") || (parameterUpperCase === "-I")) {
          i += 1;
          pas.Common.AddPath(pas.Utilities.TEnvironment.GetParameterString(i));
        } else if (pas.System.Pos("-IPATH:",parameterUpperCase) === 1) {
          s = pas.System.Copy(parameter,8,255);
          pas.Common.AddPath(s);
        } else if (parameterUpperCase === "-CPU") {
          i += 1;
          c = pas.Utilities.TEnvironment.GetParameterStringUpperCase(i);
        } else if (pas.System.Pos("-CPU:",parameterUpperCase) === 1) {
          c = pas.System.Copy(parameter,6,255);
        } else if ((parameterUpperCase === "-DEFINE") || (parameterUpperCase === "-DEF")) {
          i += 1;
          pas.Common.AddDefine(pas.Utilities.TEnvironment.GetParameterStringUpperCase(i));
          pas.Common.AddDefines = pas.Common.NumDefines;
        } else if (pas.System.Pos("-DEFINE:",parameterUpperCase) === 1) {
          s = pas.System.Copy(parameter,9,255);
          pas.Common.AddDefine(pas.Utilities.AnsiUpperCase(s));
          pas.Common.AddDefines = pas.Common.NumDefines;
        } else if ((parameterUpperCase === "-CODE") || (parameterUpperCase === "-C")) {
          i += 1;
          parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
          pas.Common.CODEORIGIN_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if (pas.System.Pos("-CODE:",parameterUpperCase) === 1) {
          parameterValue = pas.System.Copy(parameter,7,255);
          pas.Common.CODEORIGIN_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if ((parameterUpperCase === "-DATA") || (parameterUpperCase === "-D")) {
          i += 1;
          parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
          pas.Common.DATA_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if (pas.System.Pos("-DATA:",parameterUpperCase) === 1) {
          parameterValue = pas.System.Copy(parameter,7,255);
          pas.Common.DATA_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if ((parameterUpperCase === "-STACK") || (parameterUpperCase === "-S")) {
          i += 1;
          parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
          pas.Common.STACK_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if (pas.System.Pos("-STACK:",parameterUpperCase) === 1) {
          parameterValue = pas.System.Copy(parameter,8,255);
          pas.Common.STACK_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if ((parameterUpperCase === "-ZPAGE") || (parameterUpperCase === "-Z")) {
          i += 1;
          parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
          pas.Common.ZPAGE_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if (pas.System.Pos("-ZPAGE:",parameterUpperCase) === 1) {
          parameterValue = pas.System.Copy(parameter,8,255);
          pas.Common.ZPAGE_BASE = $mod.ParseHexParameter(i,parameterValue);
        } else if ((parameterUpperCase === "-TARGET") || (parameterUpperCase === "-T")) {
          i += 1;
          t = pas.Utilities.TEnvironment.GetParameterStringUpperCase(i);
        } else if (pas.System.Pos("-TARGET:",parameterUpperCase) === 1) {
          t = pas.Utilities.AnsiUpperCase(pas.System.Copy(parameter,9,255));
        } else $mod.ParameterError(i,"Unkown option '" + parameter + "'.");
      } else {
        pas.Common.UnitName[0].Name = pas.Utilities.TEnvironment.GetParameterString(i);
        pas.Common.UnitName[0].Path = pas.Common.UnitName[0].Name;
        if (!pas.FileIO.TFileSystem.FileExists_(pas.Common.UnitName[0].Name)) {
          pas.System.Writeln("Error: Can't open file '" + pas.Common.UnitName[0].Name + "'.");
          pas.Common.FreeTokens();
          pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
        };
      };
      i += 1;
    };
    if (t === "A8") {
      pas.Common.target.id = pas.Common.TComputer.A8}
     else if (t === "C64") {
      pas.Common.target.id = pas.Common.TComputer.C64}
     else if (t === "C4P") {
      pas.Common.target.id = pas.Common.TComputer.C4P}
     else if (t === "RAW") {
      pas.Common.target.id = pas.Common.TComputer.RAW}
     else if (t === "NEO") {
      pas.Common.target.id = pas.Common.TComputer.NEO}
     else if (t === "X16") {
      pas.Common.target.id = pas.Common.TComputer.X16}
     else $mod.Syntax(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
    var $tmp = pas.Common.target.id;
    if ($tmp === pas.Common.TComputer.A8) {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_6502;
      pas.Common.target.name = "ATARI";
      pas.Common.target.buf = 0x400;
      pas.Common.target.zpage = 0x80;
      pas.Common.target.eol = 0x9B;
      pas.Common.target.codeorigin = 0x2000;
    } else if ($tmp === pas.Common.TComputer.C64) {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_6502;
      pas.Common.target.name = "C64";
      pas.Common.target.buf = 0x800;
      pas.Common.target.zpage = 0x2;
      pas.Common.target.eol = 0xD;
      pas.Common.target.codeorigin = 0x900;
      pas.Common.target.header[0] = "opt h-f+";
      pas.Common.target.header[1] = "org $801";
      pas.Common.target.header[2] = "org [a($801)],$801";
      pas.Common.target.header[3] = "basic_start(START)";
      pas.Common.target.header[4] = "";
      pas.Common.target.header[5] = "org $900";
      pas.Common.target.header[6] = "";
      pas.Common.target.header[7] = "END";
    } else if ($tmp === pas.Common.TComputer.C4P) {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_6502;
      pas.Common.target.name = "C4P";
      pas.Common.target.buf = 0x800;
      pas.Common.target.zpage = 0x2;
      pas.Common.target.eol = 0xD;
      pas.Common.target.codeorigin = 0x100E;
      pas.Common.target.header[0] = "opt h-f+";
      pas.Common.target.header[1] = "org $1001";
      pas.Common.target.header[2] = "org [a($1001)],$1001";
      pas.Common.target.header[3] = "basic_start(START)";
      pas.Common.target.header[4] = "";
      pas.Common.target.header[5] = "org $100E";
      pas.Common.target.header[6] = "";
      pas.Common.target.header[7] = "END";
    } else if ($tmp === pas.Common.TComputer.RAW) {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_6502;
      pas.Common.target.name = "RAW";
      pas.Common.target.buf = 0x200;
      pas.Common.target.zpage = 0x0;
      pas.Common.target.eol = 0xD;
      pas.Common.target.codeorigin = 0x1000;
      pas.Common.target.header[0] = "END";
    } else if ($tmp === pas.Common.TComputer.NEO) {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_65C02;
      pas.Common.target.name = "NEO";
      pas.Common.target.buf = 0x200;
      pas.Common.target.zpage = 0x0;
      pas.Common.target.eol = 0xD;
      pas.Common.target.codeorigin = 0x800;
      pas.Common.target.header[0] = "END";
    } else if ($tmp === pas.Common.TComputer.X16) {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_65C02;
      pas.Common.target.name = "X16";
      pas.Common.target.buf = 0x400;
      pas.Common.target.zpage = 0x22;
      pas.Common.target.eol = 0xD;
      pas.Common.target.codeorigin = 0x900;
      pas.Common.target.header[0] = "opt h-f+c+";
      pas.Common.target.header[1] = "org $801";
      pas.Common.target.header[2] = "org [a($801)],$801";
      pas.Common.target.header[3] = "basic_start(START)";
      pas.Common.target.header[4] = "";
      pas.Common.target.header[5] = "org $900";
      pas.Common.target.header[6] = "";
      pas.Common.target.header[7] = "END";
    };
    if (pas.Common.CODEORIGIN_BASE < 0) {
      pas.Common.CODEORIGIN_BASE = pas.Common.target.codeorigin}
     else pas.Common.target.codeorigin = pas.Common.CODEORIGIN_BASE;
    if (pas.Common.ZPAGE_BASE < 0) {
      pas.Common.ZPAGE_BASE = pas.Common.target.zpage}
     else pas.Common.target.zpage = pas.Common.ZPAGE_BASE;
    if (c !== "") if (pas.Utilities.AnsiUpperCase(c) === "6502") {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_6502}
     else if (pas.Utilities.AnsiUpperCase(c) === "65C02") {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_65C02}
     else if (pas.Utilities.AnsiUpperCase(c) === "65816") {
      pas.Common.target.cpu = pas.Common.TCPU.CPU_65816}
     else $mod.Syntax(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
    var $tmp1 = pas.Common.target.cpu;
    if ($tmp1 === pas.Common.TCPU.CPU_6502) {
      pas.Common.AddDefine("CPU_6502")}
     else if ($tmp1 === pas.Common.TCPU.CPU_65C02) {
      pas.Common.AddDefine("CPU_65C02")}
     else if ($tmp1 === pas.Common.TCPU.CPU_65816) pas.Common.AddDefine("CPU_65816");
    pas.Common.AddDefines = pas.Common.NumDefines;
  };
  var PI_VALUE = 3;
  var NAN_VALUE = 0x11111111;
  var INFINITY_VALUE = 0x22222222;
  var NEGINFINITY_VALUE = 0x33333333;
  this.Main = function () {
    var fileMap = null;
    var fileMapEntry = null;
    var seconds = 0.0;
    fileMap = pas.FileIO.TFileMap.$create("Create$1");
    fileMapEntry = fileMap.AddEntry("Input.pas",pas.FileIO.TFileMapEntry.TFileType.TextFile);
    fileMapEntry.content = "Program program; end.";
    fileMapEntry = fileMap.AddEntry("lib",pas.FileIO.TFileMapEntry.TFileType.Folder);
    fileMapEntry.content = "SubFolder1;SubFolder2";
    fileMapEntry = fileMap.AddEntry("Input.bin",pas.FileIO.TFileMapEntry.TFileType.BinaryFile);
    fileMapEntry.content = "01010110101";
    pas.FileIO.TFileSystem.Init(fileMap);
    pas.System.Writeln($mod.CompilerTitle());
    pas.Common.Tok = rtl.arraySetLength(pas.Common.Tok,pas.Common.TToken,1);
    pas.Common.IFTmpPosStack = rtl.arraySetLength(pas.Common.IFTmpPosStack,0,1);
    pas.Common.Tok[pas.Common.NumTok].Line = 0;
    pas.Common.UnitName[0].Name = "";
    pas.Common.unitPathList = pas.FileIO.TPathList.$create("Create$1");
    pas.Common.MainPath = pas.SysUtils.ExtractFilePath(pas.System.ParamStr(0));
    pas.Common.MainPath = pas.SysUtils.IncludeTrailingPathDelimiter(pas.Common.MainPath);
    pas.Common.unitPathList.AddFolder(pas.Common.MainPath + "lib");
    if (pas.Utilities.TEnvironment.GetParameterCount() === 0) $mod.Syntax(3);
    pas.Common.NumUnits = 1;
    $mod.ParseParam();
    pas.Common.Defines[0].Name = pas.Utilities.AnsiUpperCase(pas.Common.target.name);
    if (pas.Common.UnitName[0].Name === "") $mod.Syntax(3);
    if (pas.System.Pos(pas.Common.MainPath,pas.SysUtils.ExtractFilePath(pas.Common.UnitName[0].Name)) > 0) {
      pas.Common.FilePath = pas.SysUtils.ExtractFilePath(pas.Common.UnitName[0].Name)}
     else pas.Common.FilePath = pas.Common.MainPath + pas.SysUtils.ExtractFilePath(pas.Common.UnitName[0].Name);
    pas.Utilities.DefaultFormatSettings.DecimalSeparator = ".";
    rtl.setIntfP(pas.Common,"OutFile",pas.FileIO.TFileSystem.CreateTextFile(),true);
    if (pas.SysUtils.ExtractFileName(pas.Common.outputFile) !== "") {
      pas.Common.OutFile.Assign(pas.Common.outputFile)}
     else pas.Common.OutFile.Assign(pas.SysUtils.ChangeFileExt(pas.Common.UnitName[0].Name,".a65"));
    pas.Common.OutFile.Rewrite();
    pas.Console.TextColor(15);
    pas.System.Writeln("Compiling " + pas.Common.UnitName[0].Name);
    pas.Common.start_time = pas.Utilities.GetTickCount64();
    pas.Scanner.TokenizeProgram(true);
    if (pas.Common.NumTok === 0) pas.Messages.Error(1,"");
    pas.Common.NumUnits += 1;
    pas.Common.UnitName[pas.Common.NumUnits - 1].Name = "SYSTEM";
    pas.Common.UnitName[pas.Common.NumUnits - 1].Path = pas.Common.FindFile("system.pas","unit");
    pas.Scanner.TokenizeProgram(false);
    pas.Common.NumStaticStrCharsTmp = pas.Common.NumStaticStrChars;
    pas.Parser.DefineIdent(1,"BLOCKREAD",5,133,0,0,0x0,170);
    pas.Parser.DefineIdent(1,"BLOCKWRITE",5,133,0,0,0x0,170);
    pas.Parser.DefineIdent(1,"GETRESOURCEHANDLE",5,133,0,0,0x0,170);
    pas.Parser.DefineIdent(1,"NIL",1,136,0,0,256,170);
    pas.Parser.DefineIdent(1,"EOL",1,134,0,0,pas.Common.target.eol,170);
    pas.Parser.DefineIdent(1,"__BUFFER",1,129,0,0,pas.Common.target.buf,170);
    pas.Parser.DefineIdent(1,"TRUE",1,135,0,0,0x1,170);
    pas.Parser.DefineIdent(1,"FALSE",1,135,0,0,0x0,170);
    pas.Parser.DefineIdent(1,"MAXINT",1,133,0,0,2147483647,170);
    pas.Parser.DefineIdent(1,"MAXSMALLINT",1,133,0,0,32767,170);
    pas.Parser.DefineIdent(1,"PI",1,142,0,0,PI_VALUE,170);
    pas.Parser.DefineIdent(1,"NAN",1,143,0,0,NAN_VALUE,170);
    pas.Parser.DefineIdent(1,"INFINITY",1,143,0,0,INFINITY_VALUE,170);
    pas.Parser.DefineIdent(1,"NEGINFINITY",1,143,0,0,NEGINFINITY_VALUE,170);
    pas.Common.NumPredefIdent = pas.Common.NumIdent;
    pas.Common.pass = pas.Common.TPass.CALL_DETERMINATION;
    $mod.CompileProgram();
    pas.Optimize.OptimizeProgram(pas.Parser.GetIdentIndex("MAIN"));
    pas.Common.NumIdent = pas.Common.NumPredefIdent;
    pas.Common.ClearWordMemory(pas.Common.DataSegment.slice(0));
    pas.Common.NumBlocks = 0;
    pas.Common.BlockStackTop = 0;
    pas.Common.CodeSize = 0;
    pas.Common.CodePosStackTop = 0;
    pas.Common.VarDataSize = 0;
    pas.Common.CaseCnt = 0;
    pas.Common.IfCnt = 0;
    pas.Common.ShrShlCnt = 0;
    pas.Common.NumTypes = 0;
    pas.Common.run_func = 0;
    pas.Common.NumProc = 0;
    pas.Common.NumStaticStrChars = pas.Common.NumStaticStrCharsTmp;
    pas.Optimize.ResetOpty();
    pas.Common.optyFOR0 = "";
    pas.Common.optyFOR1 = "";
    pas.Common.optyFOR2 = "";
    pas.Common.optyFOR3 = "";
    pas.Common.LIBRARY_USE = pas.Common.LIBRARYTOK_USE;
    pas.Common.LIBRARYTOK_USE = false;
    pas.Common.PROGRAMTOK_USE = false;
    pas.Common.INTERFACETOK_USE = false;
    pas.Common.PublicSection = true;
    for (pas.Common.i = 1; pas.Common.i <= 4096; pas.Common.i++) pas.Common.UnitName[pas.Common.i - 1].Units = 0;
    pas.Common.iOut = 0;
    pas.Common.outTmp = "";
    pas.Common.OptimizeBuf = rtl.arraySetLength(pas.Common.OptimizeBuf,"",1);
    pas.Common.pass = pas.Common.TPass.CODE_GENERATION;
    $mod.CompileProgram();
    pas.Common.OutFile.Flush();
    pas.Common.OutFile.Close();
    if (pas.Common.DiagMode) pas.Diagnostic.Diagnostics();
    pas.Messages.WritelnMsg();
    pas.Console.TextColor(15);
    seconds = ((pas.Utilities.GetTickCount64() - pas.Common.start_time) + 500) / 1000;
    pas.System.Writeln(pas.Common.IntToStr(pas.Common.Tok[pas.Common.NumTok].Line) + " lines compiled, " + pas.SysUtils.FloatToStr(seconds) + " sec, " + pas.Common.IntToStr(pas.Common.NumTok) + " tokens        , " + pas.Common.IntToStr(pas.Common.NumIdent) + " idents, " + pas.Common.IntToStr(pas.Common.NumBlocks) + " blocks, " + pas.Common.IntToStr(pas.Common.NumTypes) + " types");
    pas.Common.FreeTokens();
    pas.Console.TextColor(7);
    if ((rtl.length(pas.Common.msgWarning) - 1) > 0) pas.System.Writeln(pas.Common.IntToStr(rtl.length(pas.Common.msgWarning) - 1) + " warning(s) issued");
    if ((rtl.length(pas.Common.msgNote) - 1) > 0) pas.System.Writeln(pas.Common.IntToStr(rtl.length(pas.Common.msgNote) - 1) + " note(s) issued");
    pas.Console.NormVideo();
  };
  this.exitCode = 0;
  $mod.$main = function () {
    $mod.exitCode = 0;
    try {
      $mod.Main();
    } catch ($e) {
      if (pas.Utilities.THaltException.isPrototypeOf($e)) {
        var e = $e;
        $mod.exitCode = e.GetExitCode();
      } else throw $e
    };
    if ($mod.exitCode !== 0) {
      pas.System.Writeln("Program ended with exit code " + pas.Common.IntToStr($mod.exitCode));
    };
  };
});
