var pas = { $libimports: {}};

var rtl = {

  version: 30200,

  quiet: false,
  debug_load_units: false,
  debug_rtti: false,

  $res : {},

  debug: function(){
    if (rtl.quiet || !console || !console.log) return;
    console.log(arguments);
  },

  error: function(s){
    rtl.debug('Error: ',s);
    throw s;
  },

  warn: function(s){
    rtl.debug('Warn: ',s);
  },

  checkVersion: function(v){
    if (rtl.version != v) throw "expected rtl version "+v+", but found "+rtl.version;
  },

  hiInt: Math.pow(2,53),

  hasString: function(s){
    return rtl.isString(s) && (s.length>0);
  },

  isArray: function(a) {
    return Array.isArray(a);
  },

  isFunction: function(f){
    return typeof(f)==="function";
  },

  isModule: function(m){
    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);
  },

  isImplementation: function(m){
    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);
  },

  isNumber: function(n){
    return typeof(n)==="number";
  },

  isObject: function(o){
    var s=typeof(o);
    return (typeof(o)==="object") && (o!=null);
  },

  isString: function(s){
    return typeof(s)==="string";
  },

  getNumber: function(n){
    return typeof(n)==="number"?n:NaN;
  },

  getChar: function(c){
    return ((typeof(c)==="string") && (c.length===1)) ? c : "";
  },

  getObject: function(o){
    return ((typeof(o)==="object") || (typeof(o)==='function')) ? o : null;
  },

  isTRecord: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$new') && (typeof(type.$new)==='function'));
  },

  isPasClass: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));
  },

  isPasClassInstance: function(type){
    return (rtl.isObject(type) && rtl.isPasClass(type.$class));
  },

  hexStr: function(n,digits){
    return ("000000000000000"+n.toString(16).toUpperCase()).slice(-digits);
  },

  m_loading: 0,
  m_loading_intf: 1,
  m_intf_loaded: 2,
  m_loading_impl: 3, // loading all used unit
  m_initializing: 4, // running initialization
  m_initialized: 5,

  module: function(module_name, intfuseslist, intfcode, impluseslist){
    if (rtl.debug_load_units) rtl.debug('rtl.module name="'+module_name+'" intfuses='+intfuseslist+' impluses='+impluseslist);
    if (!rtl.hasString(module_name)) rtl.error('invalid module name "'+module_name+'"');
    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of "'+module_name+'"');
    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of "'+module_name+'"');
    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of "'+module_name+'"');

    if (pas[module_name])
      rtl.error('module "'+module_name+'" is already registered');

    var r = Object.create(rtl.tSectionRTTI);
    var module = r.$module = pas[module_name] = {
      $name: module_name,
      $intfuseslist: intfuseslist,
      $impluseslist: impluseslist,
      $state: rtl.m_loading,
      $intfcode: intfcode,
      $implcode: null,
      $impl: null,
      $rtti: r
    };
    if (impluseslist) module.$impl = {
          $module: module,
          $rtti: r
        };
  },

  exitcode: 0,

  run: function(module_name){
    try {
      if (!rtl.hasString(module_name)) module_name='program';
      if (rtl.debug_load_units) rtl.debug('rtl.run module="'+module_name+'"');
      rtl.initRTTI();
      var module = pas[module_name];
      if (!module) rtl.error('rtl.run module "'+module_name+'" missing');
      rtl.loadintf(module);
      rtl.loadimpl(module);
      if ((module_name=='program') || (module_name=='library')){
        if (rtl.debug_load_units) rtl.debug('running $main');
        var r = pas[module_name].$main();
        if (rtl.isNumber(r)) rtl.exitcode = r;
      }
    } catch(re) {
      if (!rtl.showUncaughtExceptions) {
        throw re
      } else {  
        if (!rtl.handleUncaughtException(re)) {
          rtl.showException(re);
          rtl.exitcode = 216;
        }  
      }
    } 
    return rtl.exitcode;
  },
  
  showException : function (re) {
    var errStack="";
    if (rtl.isObject(re) && re.hasOwnProperty('FJSError') && rtl.isObject(re.FJSError) && !(re.FJSError.stack==undefined)) // rtl Exception
      errStack=re.FJSError.stack
    else if (rtl.isObject(re) && re.hasOwnProperty('stack') && !(re.stack==undefined)) // native JS Error
      errStack=re.stack
    else
      errStack=re; // unknown object
    var errMsg = rtl.hasString(re.$classname) ? re.$classname : '';
    errMsg += ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : '');
    errMsg += ((errMsg) ? "\n" : '') + errStack;
    errMsg = "Uncaught Exception:\n" + errMsg;
    console.log(errMsg);
    alert(errMsg);
  },

  handleUncaughtException: function (e) {
    if (rtl.onUncaughtException) {
      try {
        rtl.onUncaughtException(e);
        return true;
      } catch (ee) {
        return false; 
      }
    } else {
      return false;
    }
  },

  loadintf: function(module){
    if (module.$state>rtl.m_loading_intf) return; // already finished
    if (rtl.debug_load_units) rtl.debug('loadintf: "'+module.$name+'"');
    if (module.$state===rtl.m_loading_intf)
      rtl.error('unit cycle detected "'+module.$name+'"');
    module.$state=rtl.m_loading_intf;
    // load interfaces of interface useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);
    // run interface
    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of "'+module.$name+'"');
    module.$intfcode(module.$intfuseslist);
    // success
    module.$state=rtl.m_intf_loaded;
    // Note: units only used in implementations are not yet loaded (not even their interfaces)
  },

  loaduseslist: function(module,useslist,f){
    if (useslist==undefined) return;
    var len = useslist.length;
    for (var i = 0; i<len; i++) {
      var unitname=useslist[i];
      if (rtl.debug_load_units) rtl.debug('loaduseslist of "'+module.$name+'" uses="'+unitname+'"');
      if (pas[unitname]==undefined)
        rtl.error('module "'+module.$name+'" misses "'+unitname+'"');
      f(pas[unitname]);
    }
  },

  loadimpl: function(module){
    if (module.$state>=rtl.m_loading_impl) return; // already processing
    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of "'+module.$name+'"');
    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of "'+module.$name+'"');
    module.$state=rtl.m_loading_impl;
    // load interfaces of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);
    // load implementation of interfaces useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);
    // load implementation of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);
    // Note: At this point all interfaces used by this unit are loaded. If
    //   there are implementation uses cycles some used units might not yet be
    //   initialized. This is by design.
    // run implementation
    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of "'+module.$name+'"');
    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);
    // run initialization
    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of "'+module.$name+'"');
    module.$state=rtl.m_initializing;
    if (rtl.isFunction(module.$init)) module.$init();
    // unit initialized
    module.$state=rtl.m_initialized;
  },

  createCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      if (!scope.hasOwnProperty('$events')) scope.$events = {};
      cb = scope.$events[fn];
      if (cb) return cb;
      scope.$events[fn] = cb = function(){
        return scope[fn].apply(scope,arguments);
      };
    } else {
      cb = function(){
        return fn.apply(scope,arguments);
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  createSafeCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      if (!scope[fn]) return null;
      if (!scope.hasOwnProperty('$events')) scope.$events = {};
      cb = scope.$events[fn];
      if (cb) return cb;
      scope.$events[fn] = cb = function(){
        try{
          return scope[fn].apply(scope,arguments);
        } catch (err) {
          if (!rtl.handleUncaughtException(err)) throw err;
        }
      };
    } else if(!fn) {
      return null;
    } else {
      cb = function(){
        try{
          return fn.apply(scope,arguments);
        } catch (err) {
          if (!rtl.handleUncaughtException(err)) throw err;
        }
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  eqCallback: function(a,b){
    // can be a function or a function wrapper
    if (a===b){
      return true;
    } else {
      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn===b.fn);
    }
  },

  initStruct: function(c,parent,name){
    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;
    c.$parent = parent;
    if (rtl.isModule(parent)){
      c.$module = parent;
      c.$name = name;
    } else {
      c.$module = parent.$module;
      c.$name = parent.$name+'.'+name;
    };
    return parent;
  },

  initClass: function(c,parent,name,initfn,rttiname){
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = rttiname?rttiname:name;
    parent = rtl.initStruct(c,parent,name);
    c.$fullname = parent.$name+'.'+name;
    // rtti
    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);
    var t = c.$module.$rtti.$Class(c.$classname,{ "class": c });
    c.$rtti = t;
    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  createClass: function(parent,name,ancestor,initfn,rttiname){
    // create a normal class,
    // ancestor must be null or a normal class,
    // the root ancestor can be an external class
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // Note:
      // if root is an "object" then c.$ancestor === Object.getPrototypeOf(c)
      // if root is a "function" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root
    } else {
      c = { $ancestor: null };
      c.$create = function(fn,args){
        if (args == undefined) args = [];
        var o = Object.create(this);
        o.$init();
        try{
          if (typeof(fn)==="string"){
            o[fn].apply(o,args);
          } else {
            fn.apply(o,args);
          };
          o.AfterConstruction();
        } catch($e){
          // do not call BeforeDestruction
          if (o.Destroy) o.Destroy();
          o.$final();
          throw $e;
        }
        return o;
      };
      c.$destroy = function(fnname){
        this.BeforeDestruction();
        if (this[fnname]) this[fnname]();
        this.$final();
      };
    };
    rtl.initClass(c,parent,name,initfn,rttiname);
  },

  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn,rttiname){
    // Create a class using an external ancestor.
    // If newinstancefnname is given, use that function to create the new object.
    // If exist call BeforeDestruction and AfterConstruction.
    var isFunc = rtl.isFunction(ancestor);
    var c = null;
    if (isFunc){
      // create pascal class descendent from JS function
      c = Object.create(ancestor.prototype);
      c.$ancestorfunc = ancestor;
      c.$ancestor = null; // no pascal ancestor
    } else if (ancestor.$func){
      // create pascal class descendent from a pascal class descendent of a JS function
      isFunc = true;
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
    } else {
      c = Object.create(ancestor);
      c.$ancestor = null; // no pascal ancestor
    }
    c.$create = function(fn,args){
      if (args == undefined) args = [];
      var o = null;
      if (newinstancefnname.length>0){
        o = this[newinstancefnname](fn,args);
      } else if(isFunc) {
        o = new this.$func(args);
      } else {
        o = Object.create(c);
      }
      if (o.$init) o.$init();
      try{
        if (typeof(fn)==="string"){
          this[fn].apply(o,args);
        } else {
          fn.apply(o,args);
        };
        if (o.AfterConstruction) o.AfterConstruction();
      } catch($e){
        // do not call BeforeDestruction
        if (o.Destroy) o.Destroy();
        if (o.$final) o.$final();
        throw $e;
      }
      return o;
    };
    c.$destroy = function(fnname){
      if (this.BeforeDestruction) this.BeforeDestruction();
      if (this[fnname]) this[fnname]();
      if (this.$final) this.$final();
    };
    rtl.initClass(c,parent,name,initfn,rttiname);
    if (isFunc){
      function f(){}
      f.prototype = c;
      c.$func = f;
    }
  },

  createHelper: function(parent,name,ancestor,initfn,rttiname){
    // create a helper,
    // ancestor must be null or a helper,
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // c.$ancestor === Object.getPrototypeOf(c)
    } else {
      c = { $ancestor: null };
    };
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = rttiname?rttiname:name;
    parent = rtl.initStruct(c,parent,name);
    c.$fullname = parent.$name+'.'+name;
    // rtti
    var t = c.$module.$rtti.$Helper(c.$classname,{ "helper": c });
    c.$rtti = t;
    if (rtl.isObject(ancestor)) t.ancestor = ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  tObjectDestroy: "Destroy",

  free: function(obj,name){
    if (obj[name]==null) return null;
    obj[name].$destroy(rtl.tObjectDestroy);
    obj[name]=null;
  },

  freeLoc: function(obj){
    if (obj==null) return null;
    obj.$destroy(rtl.tObjectDestroy);
    return null;
  },

  hideProp: function(o,p,v){
    Object.defineProperty(o,p, {
      enumerable: false,
      configurable: true,
      writable: true
    });
    if(arguments.length>2){ o[p]=v; }
  },

  recNewT: function(parent,name,initfn,full){
    // create new record type
    var t = {};
    if (parent) parent[name] = t;
    var h = rtl.hideProp;
    if (full){
      rtl.initStruct(t,parent,name);
      t.$record = t;
      h(t,'$record');
      h(t,'$name');
      h(t,'$parent');
      h(t,'$module');
      h(t,'$initSpec');
    }
    initfn.call(t);
    if (!t.$new){
      t.$new = function(){ return Object.create(t); };
    }
    t.$clone = function(r){ return t.$new().$assign(r); };
    h(t,'$new');
    h(t,'$clone');
    h(t,'$eq');
    h(t,'$assign');
    return t;
  },

  is: function(instance,type){
    return type.isPrototypeOf(instance) || (instance===type);
  },

  isExt: function(instance,type,mode){
    // mode===1 means instance must be a Pascal class instance
    // mode===2 means instance must be a Pascal class
    // Notes:
    // isPrototypeOf and instanceof return false on equal
    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())
    //   so if isPrototypeOf is false test with instanceof
    // instanceof needs a function on right side
    if (instance == null) return false; // Note: ==null checks for undefined too
    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;
    if (instance === type){
      if (mode===1) return false;
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if (type.isPrototypeOf && type.isPrototypeOf(instance)){
      if (mode===1) return rtl.isPasClassInstance(instance);
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if ((typeof type == 'function') && (instance instanceof type)) return true;
    return false;
  },

  Exception: null,
  EInvalidCast: null,
  EAbstractError: null,
  ERangeError: null,
  EIntOverflow: null,
  EPropWriteOnly: null,

  raiseE: function(typename){
    var t = rtl[typename];
    if (t==null){
      var mod = pas.SysUtils;
      if (!mod) mod = pas.sysutils;
      if (!mod) mod = pas["System.SysUtils"];
      if (mod){
        t = mod[typename];
        if (!t) t = mod[typename.toLowerCase()];
        if (!t) t = mod['Exception'];
        if (!t) t = mod['exception'];
      }
      if (t) rtl[typename]=t;
    }
    if (t) {
      
      if (t.Create){
        var e = t.$create("Create");
      } else if (t.create) {
        var e = t.$create("create");
      }
      if (e) {
        e.FJSError = new Error;
        throw e ;
      }
    }
    if (typename === "EInvalidCast") throw new Error("invalid type cast");
    if (typename === "EAbstractError") throw new Error("Abstract method called");
    if (typename === "ERangeError") throw new Error("range error");
    throw typename;
  },

  as: function(instance,type){
    if((instance === null) || rtl.is(instance,type)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  asExt: function(instance,type,mode){
    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  createInterface: function(module, name, guid, fnnames, ancestor, initfn, rttiname){
    //console.log('createInterface name="'+name+'" guid="'+guid+'" names='+fnnames);
    var i = ancestor?Object.create(ancestor):{};
    module[name] = i;
    i.$module = module;
    i.$name = rttiname?rttiname:name;
    i.$fullname = module.$name+'.'+i.$name;
    i.$guid = guid;
    i.$guidr = null;
    i.$names = fnnames?fnnames:[];
    if (rtl.isFunction(initfn)){
      // rtti
      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);
      var t = i.$module.$rtti.$Interface(i.$name,{ "interface": i, module: module });
      i.$rtti = t;
      if (ancestor) t.ancestor = ancestor.$rtti;
      if (!t.ancestor) t.ancestor = null;
      initfn.call(i);
    }
    return i;
  },

  strToGUIDR: function(s,g){
    var p = 0;
    function n(l){
      var h = s.substr(p,l);
      p+=l;
      return parseInt(h,16);
    }
    p+=1; // skip {
    g.D1 = n(8);
    p+=1; // skip -
    g.D2 = n(4);
    p+=1; // skip -
    g.D3 = n(4);
    p+=1; // skip -
    if (!g.D4) g.D4=[];
    g.D4[0] = n(2);
    g.D4[1] = n(2);
    p+=1; // skip -
    for(var i=2; i<8; i++) g.D4[i] = n(2);
    return g;
  },

  guidrToStr: function(g){
    if (g.$intf) return g.$intf.$guid;
    var h = rtl.hexStr;
    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';
    for (var i=2; i<8; i++) s+=h(g.D4[i],2);
    s+='}';
    return s;
  },

  createTGUID: function(guid){
    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;
    var g = rtl.strToGUIDR(guid,TGuid.$new());
    return g;
  },

  getIntfGUIDR: function(intfTypeOrVar){
    if (!intfTypeOrVar) return null;
    if (!intfTypeOrVar.$guidr){
      var g = rtl.createTGUID(intfTypeOrVar.$guid);
      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);
      g.$intf = intfTypeOrVar;
      intfTypeOrVar.$guidr = g;
    }
    return intfTypeOrVar.$guidr;
  },

  addIntf: function (aclass, intf, map){
    function jmp(fn){
      if (typeof(fn)==="function"){
        return function(){ return fn.apply(this.$o,arguments); };
      } else {
        return function(){ rtl.raiseE('EAbstractError'); };
      }
    }
    if(!map) map = {};
    var t = intf;
    var item = Object.create(t);
    if (!aclass.hasOwnProperty('$intfmaps')) aclass.$intfmaps = {};
    aclass.$intfmaps[intf.$guid] = item;
    do{
      var names = t.$names;
      if (!names) break;
      for (var i=0; i<names.length; i++){
        var intfname = names[i];
        var fnname = map[intfname];
        if (!fnname) fnname = intfname;
        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname="'+intfname+'" fnname="'+fnname+'" old='+typeof(item[intfname]));
        item[intfname] = jmp(aclass[fnname]);
      }
      t = Object.getPrototypeOf(t);
    }while(t!=null);
  },

  getIntfG: function (obj, guid, query){
    if (!obj) return null;
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);
    // search
    var maps = obj.$intfmaps;
    if (!maps) return null;
    var item = maps[guid];
    if (!item) return null;
    // check delegation
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));
    if (typeof item === 'function') return item.call(obj); // delegate. Note: COM contains _AddRef
    // check cache
    var intf = null;
    if (obj.$interfaces){
      intf = obj.$interfaces[guid];
      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));
    }
    if (!intf){ // intf can be undefined!
      intf = Object.create(item);
      intf.$o = obj;
      if (!obj.$interfaces) obj.$interfaces = {};
      obj.$interfaces[guid] = intf;
    }
    if (typeof(query)==='object'){
      // called by queryIntfT
      var o = null;
      if (intf.QueryInterface(rtl.getIntfGUIDR(query),
          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){
        return o;
      } else {
        return null;
      }
    } else if(query===2){
      // called by TObject.GetInterfaceByStr
      if (intf.$kind === 'com') intf._AddRef();
    }
    return intf;
  },

  getIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid);
  },

  queryIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid,intftype);
  },

  queryIntfIsT: function(obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (!i) return false;
    if (i.$kind === 'com') i._Release();
    return true;
  },

  asIntfT: function (obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (i!==null) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsIntfT: function(intf,intftype){
    return (intf!==null) && rtl.queryIntfIsT(intf.$o,intftype);
  },

  intfAsIntfT: function (intf,intftype){
    if (!intf) return null;
    var i = rtl.getIntfG(intf.$o,intftype.$guid);
    if (i) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsClass: function(intf,classtype){
    return (intf!=null) && (rtl.is(intf.$o,classtype));
  },

  intfAsClass: function(intf,classtype){
    if (intf==null) return null;
    return rtl.as(intf.$o,classtype);
  },

  intfToClass: function(intf,classtype){
    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;
    return null;
  },

  // interface reference counting
  intfRefs: { // base object for temporary interface variables
    ref: function(id,intf){
      // called for temporary interface references needing delayed release
      var old = this[id];
      //console.log('rtl.intfRefs.ref: id='+id+' old="'+(old?old.$name:'null')+'" intf="'+(intf?intf.$name:'null')+' $o='+(intf?intf.$o:'null'));
      if (old){
        // called again, e.g. in a loop
        delete this[id];
        old._Release(); // may fail
      }
      if(intf) {
        this[id]=intf;
      }
      return intf;
    },
    free: function(){
      //console.log('rtl.intfRefs.free...');
      for (var id in this){
        if (this.hasOwnProperty(id)){
          var intf = this[id];
          if (intf){
            //console.log('rtl.intfRefs.free: id='+id+' '+intf.$name+' $o='+intf.$o.$classname);
            intf._Release();
          }
        }
      }
    }
  },

  createIntfRefs: function(){
    //console.log('rtl.createIntfRefs');
    return Object.create(rtl.intfRefs);
  },

  setIntfP: function(path,name,value,skipAddRef){
    var old = path[name];
    //console.log('rtl.setIntfP path='+path+' name='+name+' old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old === value) return;
    if (old !== null){
      path[name]=null;
      old._Release();
    }
    if (value !== null){
      if (!skipAddRef) value._AddRef();
      path[name]=value;
    }
  },

  setIntfL: function(old,value,skipAddRef){
    //console.log('rtl.setIntfL old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old !== value){
      if (value!==null){
        if (!skipAddRef) value._AddRef();
      }
      if (old!==null){
        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception
      }
    } else if (skipAddRef){
      if (old!==null){
        old._Release();  // value has an AddRef
      }
    }
    return value;
  },

  _AddRef: function(intf){
    //if (intf) console.log('rtl._AddRef intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._AddRef();
    return intf;
  },

  _Release: function(intf){
    //if (intf) console.log('rtl._Release intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._Release();
    return intf;
  },

  trunc: function(a){
    return a<0 ? Math.ceil(a) : Math.floor(a);
  },

  checkMethodCall: function(obj,type){
    if (rtl.isObject(obj) && rtl.is(obj,type)) return;
    rtl.raiseE("EInvalidCast");
  },

  oc: function(i){
    // overflow check integer
    if ((Math.floor(i)===i) && (i>=-0x1fffffffffffff) && (i<=0x1fffffffffffff)) return i;
    rtl.raiseE('EIntOverflow');
  },

  rc: function(i,minval,maxval){
    // range check integer
    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;
    rtl.raiseE('ERangeError');
  },

  rcc: function(c,minval,maxval){
    // range check char
    if ((typeof(c)==='string') && (c.length===1)){
      var i = c.charCodeAt(0);
      if ((i>=minval) && (i<=maxval)) return c;
    }
    rtl.raiseE('ERangeError');
  },

  rcSetCharAt: function(s,index,c){
    // range check setCharAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return rtl.setCharAt(s,index,c);
  },

  rcCharAt: function(s,index){
    // range check charAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return s.charAt(index);
  },

  rcArrR: function(arr,index){
    // range check read array
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      if (arguments.length>2){
        // arr,index1,index2,...
        arr=arr[index];
        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);
        return arr;
      }
      return arr[index];
    }
    rtl.raiseE('ERangeError');
  },

  rcArrW: function(arr,index,value){
    // range check write array
    // arr,index1,index2,...,value
    for (var i=3; i<arguments.length; i++){
      arr=rtl.rcArrR(arr,index);
      index=arguments[i-1];
      value=arguments[i];
    }
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      return arr[index]=value;
    }
    rtl.raiseE('ERangeError');
  },

  length: function(arr){
    return (arr == null) ? 0 : arr.length;
  },

  arrayRef: function(a){
    if (a!=null) rtl.hideProp(a,'$pas2jsrefcnt',2);
    return a;
  },

  arrayManaged: function(refCnt,mode,a){
    // mode: 0: don't touch elements, 1: null elements, 2: _AddRef elements
    if(!a) a = [];
    a.$pas2jsrefcnt = refCnt?refCnt:0;
    a._AddRef = function(){
      this.$pas2jsrefcnt++;
    };
    a._Release = function(){
      this.$pas2jsrefcnt--;
      if (this.$pas2jsrefcnt==0){
        for (var i=0; i<this.length; i++){
          rtl.setIntfP(this,i,null);
        }
      }
    };
    if (mode>0){
      for (var i=0; i<a.length; i++){
        if (mode === 2){
          rtl._AddRef(a[i]);
        } else {
          a[i]=null;
        }
      }
    }
    return a;
  },

  arraySetLength: function(arr,defaultvalue,newlength){
    var stack = [];
    var s = 9999;
    for (var i=2; i<arguments.length; i++){
      var j = arguments[i];
      if (j==='s'){ s = i-2; }
      else {
        stack.push({ dim:j+0, a:null, i:0, src:null });
      }
    }
    var dimmax = stack.length-1;
    var depth = 0;
    var newlen = 0;
    var item = null;
    var a = null;
    var src = arr;
    var srclen = 0, oldlen = 0;
    var type = 0;
    var managed = false;
    if (rtl.isArray(defaultvalue)){
      // array of dyn array
      type = 1;
    } else if (rtl.isObject(defaultvalue)) {
      if (rtl.isTRecord(defaultvalue)){
        // array of record
        type = 2;
      } else {
        // array of set
        type = 3;
      }
    } else if (defaultvalue == 'R'){
      // array of COM interface
      type = 4;
      managed = true;
    }

    do{
      if (depth>0){
        item = stack[depth-1];
        src = (item.src && item.src.length>item.i) ? item.src[item.i] : null;
      }
      if (!src){
        // init array
        managed ? a=rtl.arrayManaged(1) : a=[];
        srclen = 0;
        oldlen = 0;
      } else if (src.$pas2jsrefcnt>1 || depth>=s){
        // clone
        if (managed){
          a = rtl.arrayManaged(1);
          src.$pas2jsrefcnt--;
        } else {
          a = [];
        }
        srclen = src.length;
        oldlen = srclen;
      } else {
        // keep old
        a = src;
        srclen = 0;
        oldlen = a.length;
      }
      newlen = stack[depth].dim;
      if (managed){
        if (a.length>=newlen){
          // shrink -> release elements
          for (var i=a.length-1; i>=newlen; i--){
            rtl.setIntfP(a,i,null);
          }
          a.length = newlen;
        } else {
          // enlarge -> null elements
          var l = a.length;
          a.length = newlen;
          for (var i=l; i<newlen; i++){
            a[i]=null;
          }
          oldlen = newlen;
        }
      } else {
        a.length = newlen;
      }
      if (depth>0){
        item.a[item.i]=a;
        item.i++;
        if ((newlen===0) && (item.i<item.a.length)) continue;
      }
      if (newlen>0){
        if (depth<dimmax){
          item = stack[depth];
          item.a = a;
          item.i = 0;
          item.src = src;
          depth++;
          continue;
        } else {
          if (srclen>newlen) srclen=newlen;
          if (type == 0){
            // array of simple value
            for (var i=0; i<srclen; i++) a[i]=src[i];
            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue;
          } else if (type == 1){
            // array of dyn array
            for (var i=0; i<srclen; i++) a[i]=src[i];
            for (var i=oldlen; i<newlen; i++) a[i]=[];
          } else if (type == 2) {
            // array of record
            for (var i=0; i<srclen; i++) a[i]=defaultvalue.$clone(src[i]);
            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue.$new();
          } else if (type == 3) {
            // array of set
            for (var i=0; i<srclen; i++) a[i]=rtl.refSet(src[i]);
            for (var i=oldlen; i<newlen; i++) a[i]={};
          } else if (type == 4){
            // array of interface
            for (var i=0; i<srclen; i++) rtl.setIntfP(a,i,src[i]);
            for (var i=oldlen; i<newlen; i++) a[i]=null;
          }
        }
      }
      // backtrack
      while ((depth>0) && (stack[depth-1].i>=stack[depth-1].dim)){
        depth--;
      };
      if (depth===0){
        return dimmax===0 ? a : stack[0].a;
      }
    }while (true);
  },

  arrayEq: function(a,b){
    if (a===null) return b===null;
    if (b===null) return false;
    if (a.length!==b.length) return false;
    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;
    return true;
  },

  arrayClone: function(type,src,srcpos,endpos,dst,dstpos){
    // type: 0 for references or simple values
    // src must not be null
    // dst at dstpos must not contain managed old values
    // This function does not range check.
    if(type === 'refSet') {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set
    } else if (type === 'slice'){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos].slice(0); // clone static array of simple types
    } else if (typeof(type)==='function'){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = type(src[srcpos]); // clone function
    } else if (rtl.isTRecord(type)){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = type.$clone(src[srcpos]); // clone record
    } else if (type === 'R'){
      // clone managed instance
      for (; srcpos<endpos; srcpos++){
        dst[dstpos++]=rtl._AddRef(src[srcpos]);
      }
    } else {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos]; // reference
    };
  },

  arrayConcat: function(type){
    // type: see rtl.arrayClone
    // returns refCnt=1
    var a = [];
    var l = 0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src !== null) l+=src.length;
    };
    a.length = l;
    if (type === 'R'){
      rtl.arrayManaged(1,1,a);
    }
    l=0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      rtl.arrayClone(type,src,0,src.length,a,l);
      l+=src.length;
    };
    return a;
  },

  arrayConcatN: function(){
    var a = null;
    for (var i=0; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      if (a===null){
        a=rtl.arrayRef(src); // Note: concat(arr) does not clone
      } else if (a.$pas2jsrefcnt>1){
        a=a.concat(src); // clone a and append src
      } else {
        for (var i=0; i<src.length; i++){
          a.push(src[i]);
        }
      }
    };
    return a;
  },

  arrayPush: function(type,a){
    if(a===null){
      a=(type==='R') ? rtl.arrayManaged(1) : [];
    } else if (a.$pas2jsrefcnt>1){
      a=rtl.arrayCopy(type,a,0,a.length);
    }
    rtl.arrayClone(type,arguments,2,arguments.length,a,a.length);
    return a;
  },

  arrayPushN: function(a){
    if(a===null){
      a=[];
    } else if (a.$pas2jsrefcnt>1){
      a=a.concat();
    }
    for (var i=1; i<arguments.length; i++){
      a.push(arguments[i]);
    }
    return a;
  },

  arrayCopy: function(type, srcarray, index, count){
    // type: see rtl.arrayClone
    // if count is missing, use srcarray.length
    if (srcarray === null) return (type === 'R') ? null : [];
    if (count === undefined) count=srcarray.length;
    if (index < 0){
      count+=index;
      index = 0;
    }
    var end = index+count;
    if (end>srcarray.length) end = srcarray.length;
    if (index>=end) return (type === 'R') ? null : [];
    if (type===0){
      return srcarray.slice(index,end);
    } else {
      var a = [];
      a.length = end-index;
      if (type === 'R'){
        rtl.arrayManaged(1,1,a);
      }
      rtl.arrayClone(type,srcarray,index,end,a,0);
      return a;
    }
  },

  arrayInsert: function(item, a, index, type){
    var m = (type === 'R');
    if (m) rtl._AddRef(item);
    if (a){
      if (a.$pas2jsrefcnt>1){
        if (m){
          // clone
          a.$pas2jsrefcnt--;
          a=rtl.arrayManaged(1,2,a.concat());
        } else {
          a=a.concat();
        }
      }
      a.splice(index,0,item);
      return a;
    } else {
      a = [item];
      if (m) a=rtl.arrayManaged(1,0,a);
      return a;
    }
  },

  arrayDeleteR: function(a, index, count){
    if (a===null || index<0 || index>=a.length || count<=0) return a;
    if (index+count>a.length) count=a.length-index;
    if (a.$pas2jsrefcnt>1){
      // clone
      a.$pas2jsrefcnt--;
      a=rtl.arrayManaged(1,2,a.concat());
    }
    for (var i=0; i<count; i++) rtl.setIntfP(a,index+i,null);
    a.splice(index,count);
    return a;
  },

  setCharAt: function(s,index,c){
    return s.substr(0,index)+c+s.substr(index+1);
  },

  getResStr: function(mod,name){
    var rs = mod.$resourcestrings[name];
    return rs.current?rs.current:rs.org;
  },

  createSet: function(){
    var s = {};
    for (var i=0; i<arguments.length; i++){
      if (arguments[i]!=null){
        s[arguments[i]]=true;
      } else {
        var first=arguments[i+=1];
        var last=arguments[i+=1];
        for(var j=first; j<=last; j++) s[j]=true;
      }
    }
    return s;
  },

  cloneSet: function(s){
    var r = {};
    for (var key in s) r[key]=true;
    return r;
  },

  refSet: function(s){
    rtl.hideProp(s,'$shared',true);
    return s;
  },

  includeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    s[enumvalue] = true;
    return s;
  },

  excludeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    delete s[enumvalue];
    return s;
  },

  diffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    return r;
  },

  unionSet: function(s,t){
    var r = {};
    for (var key in s) r[key]=true;
    for (var key in t) r[key]=true;
    return r;
  },

  intersectSet: function(s,t){
    var r = {};
    for (var key in s) if (t[key]) r[key]=true;
    return r;
  },

  symDiffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    for (var key in t) if (!s[key]) r[key]=true;
    return r;
  },

  eqSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  neSet: function(s,t){
    return !rtl.eqSet(s,t);
  },

  leSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    return true;
  },

  geSet: function(s,t){
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  strSetLength: function(s,newlen){
    var oldlen = s.length;
    if (oldlen > newlen){
      return s.substring(0,newlen);
    } else if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return s+' '.repeat(newlen-oldlen);
    } else {
       while (oldlen<newlen){
         s+=' ';
         oldlen++;
       };
       return s;
    }
  },

  spaceLeft: function(s,width){
    var l=s.length;
    if (l>=width) return s;
    if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return ' '.repeat(width-l) + s;
    } else {
      while (l<width){
        s=' '+s;
        l++;
      };
      return s;
    };
  },

  floatToStr: function(d,w,p){
    // input 1-3 arguments: double, width, precision
    if (arguments.length>2){
      return rtl.spaceLeft(d.toFixed(p),w);
    } else {
	  // exponent width
	  var pad = "";
	  var ad = Math.abs(d);
	  if (((ad>1) && (ad<1.0e+10)) ||  ((ad>1.e-10) && (ad<1))) {
		pad='00';
	  } else if ((ad>1) && (ad<1.0e+100) || (ad<1.e-10)) {
		pad='0';
      }  	
	  if (arguments.length<2) {
	    w=24;		
      } else if (w<9) {
		w=9;
      }		  
      var p = w-8;
      var s=(d>0 ? " " : "" ) + d.toExponential(p);
      s=s.replace(/e(.)/,'E$1'+pad);
      return rtl.spaceLeft(s,w);
    }
  },

  valEnum: function(s, enumType, setCodeFn){
    s = s.toLowerCase();
    for (var key in enumType){
      if((typeof(key)==='string') && (key.toLowerCase()===s)){
        setCodeFn(0);
        return enumType[key];
      }
    }
    setCodeFn(1);
    return 0;
  },

  lw: function(l){
    // fix longword bitwise operation
    return l<0?l+0x100000000:l;
  },

  and: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) & (b / hi);
    var l = (a & low) & (b & low);
    return h*hi + l;
  },

  or: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) | (b / hi);
    var l = (a & low) | (b & low);
    return h*hi + l;
  },

  xor: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) ^ (b / hi);
    var l = (a & low) ^ (b & low);
    return h*hi + l;
  },

  shr: function(a,b){
    if (a<0) a += rtl.hiInt;
    if (a<0x80000000) return a >> b;
    if (b<=0) return a;
    if (b>54) return 0;
    return Math.floor(a / Math.pow(2,b));
  },

  shl: function(a,b){
    if (a<0) a += rtl.hiInt;
    if (b<=0) return a;
    if (b>54) return 0;
    var r = a * Math.pow(2,b);
    if (r <= rtl.hiInt) return r;
    return r % rtl.hiInt;
  },

  initRTTI: function(){
    if (rtl.debug_rtti) rtl.debug('initRTTI');

    // base types
    rtl.tTypeInfo = { name: "tTypeInfo", kind: 0, $module: null, attr: null };
    function newBaseTI(name,kind,ancestor){
      if (!ancestor) ancestor = rtl.tTypeInfo;
      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI "'+name+'" '+kind+' ("'+ancestor.name+'")');
      var t = Object.create(ancestor);
      t.name = name;
      t.kind = kind;
      rtl[name] = t;
      return t;
    };
    function newBaseInt(name,minvalue,maxvalue,ordtype){
      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);
      t.minvalue = minvalue;
      t.maxvalue = maxvalue;
      t.ordtype = ordtype;
      return t;
    };
    newBaseTI("tTypeInfoInteger",1 /* tkInteger */);
    newBaseInt("shortint",-0x80,0x7f,0);
    newBaseInt("byte",0,0xff,1);
    newBaseInt("smallint",-0x8000,0x7fff,2);
    newBaseInt("word",0,0xffff,3);
    newBaseInt("longint",-0x80000000,0x7fffffff,4);
    newBaseInt("longword",0,0xffffffff,5);
    newBaseInt("nativeint",-0x10000000000000,0xfffffffffffff,6);
    newBaseInt("nativeuint",0,0xfffffffffffff,7);
    newBaseInt("char",0,65535,3 /* word */).kind=2 /* tkChar */;
    newBaseTI("string",3 /* tkString */);
    newBaseTI("tTypeInfoEnum",4 /* tkEnumeration */,rtl.tTypeInfoInteger);
    newBaseTI("tTypeInfoSet",5 /* tkSet */);
    newBaseTI("double",6 /* tkDouble */);
    newBaseTI("boolean",7 /* tkBool */);
    newBaseTI("tTypeInfoProcVar",8 /* tkProcVar */);
    newBaseTI("tTypeInfoMethodVar",9 /* tkMethod */,rtl.tTypeInfoProcVar);
    newBaseTI("tTypeInfoArray",10 /* tkArray */);
    newBaseTI("tTypeInfoDynArray",11 /* tkDynArray */);
    newBaseTI("tTypeInfoPointer",15 /* tkPointer */);
    var t = newBaseTI("pointer",15 /* tkPointer */,rtl.tTypeInfoPointer);
    t.reftype = null;
    newBaseTI("jsvalue",16 /* tkJSValue */);
    newBaseTI("tTypeInfoRefToProcVar",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);

    // member kinds
    rtl.tTypeMember = { attr: null };
    function newMember(name,kind){
      var m = Object.create(rtl.tTypeMember);
      m.name = name;
      m.kind = kind;
      rtl[name] = m;
    };
    newMember("tTypeMemberField",1); // tmkField
    newMember("tTypeMemberMethod",2); // tmkMethod
    newMember("tTypeMemberProperty",3); // tmkProperty

    // base object for storing members: a simple object
    rtl.tTypeMembers = {};

    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface
    var tis = newBaseTI("tTypeInfoStruct",0);
    tis.$addMember = function(name,ancestor,vis,options){
      if (rtl.debug_rtti){
        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member "'+name+'", this="'+this.name+'"';
        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor "'+ancestor+':'+ancestor.name+'", "'+this.name+'.'+name+'"';
        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options "'+options+'", "'+this.name+'.'+name+'"';
      };
      var t = Object.create(ancestor);
      t.name = name;
      this.members[name] = t;
      this.names.push(name);
      t.visibility = vis;
      if (rtl.isObject(options)){
        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];
      };
      return t;
    };
    tis.addField = function(name,type,vis,options){
      var t = this.$addMember(name,rtl.tTypeMemberField,vis?vis:2,options);
      if (rtl.debug_rtti){
        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type "'+type+'", "'+this.name+'.'+name+'"';
      };
      t.typeinfo = type;
      this.fields.push(name);
      return t;
    };
    tis.addFields = function(){
      var i=0;
      while(i<arguments.length){
        var name = arguments[i++];
        var type = arguments[i++];
        if ((i<arguments.length) && (typeof(arguments[i])==='object')){
          this.addField(name,type,arguments[i++]);
        } else {
          this.addField(name,type);
        };
      };
    };
    tis.addMethod = function(name,methodkind,params,vis,result,flags,options){
      // optional: vis, result, flags, options
      var t = this.$addMember(name,rtl.tTypeMemberMethod,vis?vis:2,options);
      t.methodkind = methodkind;
      t.procsig = rtl.newTIProcSig(params,result,flags);
      this.methods.push(name);
      return t;
    };
    tis.addProperty = function(name,flags,result,getter,setter,vis,options){
      var t = this.$addMember(name,rtl.tTypeMemberProperty,vis?vis:4,options);
      t.flags = flags;
      t.typeinfo = result;
      t.getter = getter;
      t.setter = setter;
      // Note: in options: params, stored, defaultvalue
      t.params = rtl.isArray(t.params) ? rtl.newTIParams(t.params) : null;
      this.properties.push(name);
      if (!rtl.isString(t.stored)) t.stored = "";
      return t;
    };
    tis.getField = function(index){
      return this.members[this.fields[index]];
    };
    tis.getMethod = function(index){
      return this.members[this.methods[index]];
    };
    tis.getProperty = function(index){
      return this.members[this.properties[index]];
    };

    newBaseTI("tTypeInfoRecord",12 /* tkRecord */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClass",13 /* tkClass */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClassRef",14 /* tkClassRef */);
    newBaseTI("tTypeInfoInterface",18 /* tkInterface */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoHelper",19 /* tkHelper */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoExtClass",20 /* tkExtClass */,rtl.tTypeInfoClass);
  },

  tSectionRTTI: {
    $module: null,
    $inherited: function(name,ancestor,o){
      if (rtl.debug_rtti){
        rtl.debug('tSectionRTTI.newTI "'+(this.$module?this.$module.$name:"(no module)")
          +'"."'+name+'" ('+ancestor.name+') '+(o?'init':'forward'));
      };
      var t = this[name];
      if (t){
        if (!t.$forward) throw 'duplicate type "'+name+'"';
        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch "'+name+'" ancestor="'+ancestor.name+'" t.name="'+t.name+'"';
      } else {
        t = Object.create(ancestor);
        t.name = name;
        t.$module = this.$module;
        this[name] = t;
      }
      if (o){
        delete t.$forward;
        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];
      } else {
        t.$forward = true;
      }
      return t;
    },
    $Scope: function(name,ancestor,o){
      var t=this.$inherited(name,ancestor,o);
      t.members = {};
      t.names = [];
      t.fields = [];
      t.methods = [];
      t.properties = [];
      return t;
    },
    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },
    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },
    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },
    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },
    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },
    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },
    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },
    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },
    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },
    $Record: function(name,o,typ){ if(typ) o.$record = typ; return this.$Scope(name,rtl.tTypeInfoRecord,o); },
    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },
    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },
    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },
    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); },
    $Helper: function(name,o){ return this.$Scope(name,rtl.tTypeInfoHelper,o); },
    $ExtClass: function(name,o){ return this.$Scope(name,rtl.tTypeInfoExtClass,o); }
  },

  newTIParam: function(param){
    // param is an array, 0=name, 1=type, 2=optional flags
    var t = {
      name: param[0],
      typeinfo: param[1],
      flags: (rtl.isNumber(param[2]) ? param[2] : 0)
    };
    return t;
  },

  newTIParams: function(list){
    // list: optional array of [paramname,typeinfo,optional flags]
    var params = [];
    if (rtl.isArray(list)){
      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));
    };
    return params;
  },

  newTIProcSig: function(params,result,flags){
    var s = {
      params: rtl.newTIParams(params),
      resulttype: result?result:null,
      flags: flags?flags:0
    };
    return s;
  },

  addResource: function(aRes){
    rtl.$res[aRes.name]=aRes;
  },

  getResource: function(aName){
    var res = rtl.$res[aName];
    if (res !== undefined) {
      return res;
    } else {
      return null;
    }
  },

  getResourceList: function(){
    return Object.keys(rtl.$res);
  }
}

rtl.module("System",[],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.LineEnding = "\n";
  this.PathDelim = "/";
  this.AllowDirectorySeparators = rtl.createSet(47);
  this.AllowDriveSeparators = rtl.createSet(58);
  this.ExtensionSeparator = ".";
  this.MaxSmallint = 32767;
  this.MaxLongint = 0x7fffffff;
  this.Maxint = 2147483647;
  rtl.recNewT(this,"TGuid",function () {
    this.D1 = 0;
    this.D2 = 0;
    this.D3 = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.D4 = rtl.arraySetLength(null,0,8);
      return r;
    };
    this.$eq = function (b) {
      return (this.D1 === b.D1) && (this.D2 === b.D2) && (this.D3 === b.D3) && rtl.arrayEq(this.D4,b.D4);
    };
    this.$assign = function (s) {
      this.D1 = s.D1;
      this.D2 = s.D2;
      this.D3 = s.D3;
      this.D4 = s.D4.slice(0);
      return this;
    };
  });
  rtl.createClass(this,"TObject",null,function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
    this.Create = function () {
      return this;
    };
    this.Destroy = function () {
    };
    this.Free = function () {
      this.$destroy("Destroy");
    };
    this.AfterConstruction = function () {
    };
    this.BeforeDestruction = function () {
    };
    this.GetInterface = function (iid, obj) {
      var Result = false;
      var i = iid.$intf;
      if (i){
        // iid is the private TGuid of an interface
        i = rtl.getIntfG(this,i.$guid,2);
        if (i){
          obj.set(i);
          return true;
        }
      };
      Result = this.GetInterfaceByStr(rtl.guidrToStr(iid),obj);
      return Result;
    };
    this.GetInterfaceByStr = function (iidstr, obj) {
      var Result = false;
      Result = false;
      if (!$mod.IObjectInstance["$str"]) $mod.IObjectInstance["$str"] = rtl.guidrToStr($mod.IObjectInstance);
      if (iidstr == $mod.IObjectInstance["$str"]) {
        obj.set(this);
        return true;
      };
      var i = rtl.getIntfG(this,iidstr,2);
      obj.set(i);
      Result=(i!==null);
      return Result;
    };
  });
  this.S_OK = 0;
  this.E_NOINTERFACE = -2147467262;
  rtl.createInterface(this,"IUnknown","{00000000-0000-0000-C000-000000000046}",["QueryInterface","_AddRef","_Release"],null,function () {
    this.$kind = "com";
  });
  rtl.createClass(this,"TInterfacedObject",this.TObject,function () {
    this.$init = function () {
      $mod.TObject.$init.call(this);
      this.fRefCount = 0;
    };
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      if (this.GetInterface(iid,obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    this._AddRef = function () {
      var Result = 0;
      this.fRefCount += 1;
      Result = this.fRefCount;
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      this.fRefCount -= 1;
      Result = this.fRefCount;
      if (this.fRefCount === 0) this.$destroy("Destroy");
      return Result;
    };
    this.BeforeDestruction = function () {
      if (this.fRefCount !== 0) rtl.raiseE('EHeapMemoryError');
    };
    rtl.addIntf(this,$mod.IUnknown);
  });
  this.IObjectInstance = this.TGuid.$clone({D1: 0xD91C9AF4, D2: 0x3C93, D3: 0x420F, D4: [0xA3,0x03,0xBF,0x5B,0xA8,0x2B,0xFD,0x23]});
  this.vtInteger = 0;
  this.vtExtended = 3;
  this.vtWideChar = 9;
  this.vtCurrency = 12;
  this.vtUnicodeString = 18;
  this.vtNativeInt = 19;
  rtl.recNewT(this,"TVarRec",function () {
    this.VType = 0;
    this.VJSValue = undefined;
    this.$eq = function (b) {
      return (this.VType === b.VType) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue);
    };
    this.$assign = function (s) {
      this.VType = s.VType;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      return this;
    };
  });
  this.VarRecs = function () {
    var Result = [];
    var i = 0;
    var v = null;
    Result = [];
    while (i < arguments.length) {
      v = $mod.TVarRec.$new();
      v.VType = rtl.trunc(arguments[i]);
      i += 1;
      v.VJSValue = arguments[i];
      i += 1;
      Result.push($mod.TVarRec.$clone(v));
    };
    return Result;
  };
  this.FirstDotAtFileNameStartIsExtension = false;
  this.OnParamStr = null;
  this.ParamStr = function (Index) {
    var Result = "";
    if ($mod.OnParamStr != null) {
      Result = $mod.OnParamStr(Index)}
     else if (Index === 0) {
      Result = "js"}
     else Result = "";
    return Result;
  };
  this.Frac = function (A) {
    return A % 1;
  };
  this.Odd = function (A) {
    return A&1 != 0;
  };
  this.Sqr$1 = function (A) {
    return A*A;
  };
  this.Trunc = function (A) {
    if (!Math.trunc) {
      Math.trunc = function(v) {
        v = +v;
        if (!isFinite(v)) return v;
        return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
      };
    }
    $mod.Trunc = Math.trunc;
    return Math.trunc(A);
  };
  this.Int = function (A) {
    var Result = 0.0;
    Result = $mod.Trunc(A);
    return Result;
  };
  this.Copy = function (S, Index, Size) {
    if (Index<1) Index = 1;
    return (Size>0) ? S.substring(Index-1,Index+Size-1) : "";
  };
  this.Copy$1 = function (S, Index) {
    if (Index<1) Index = 1;
    return S.substr(Index-1);
  };
  this.Delete = function (S, Index, Size) {
    var h = "";
    if ((Index < 1) || (Index > S.get().length) || (Size <= 0)) return;
    h = S.get();
    S.set($mod.Copy(h,1,Index - 1) + $mod.Copy$1(h,Index + Size));
  };
  this.Pos = function (Search, InString) {
    return InString.indexOf(Search)+1;
  };
  this.Insert = function (Insertion, Target, Index) {
    var t = "";
    if (Insertion === "") return;
    t = Target.get();
    if (Index < 1) {
      Target.set(Insertion + t)}
     else if (Index > t.length) {
      Target.set(t + Insertion)}
     else Target.set($mod.Copy(t,1,Index - 1) + Insertion + $mod.Copy(t,Index,t.length));
  };
  this.upcase = function (c) {
    return c.toUpperCase();
  };
  this.val = function (S, NI, Code) {
    NI.set($impl.valint(S,-9007199254740991,9007199254740991,Code));
  };
  this.val$6 = function (S, I, Code) {
    I.set($impl.valint(S,-2147483648,2147483647,Code));
  };
  this.val$8 = function (S, d, Code) {
    var x = 0.0;
    if (S === "") {
      Code.set(1);
      return;
    };
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else {
      Code.set(0);
      d.set(x);
    };
  };
  this.StringOfChar = function (c, l) {
    var Result = "";
    var i = 0;
    if ((l>0) && c.repeat) return c.repeat(l);
    Result = "";
    for (var $l = 1, $end = l; $l <= $end; $l++) {
      i = $l;
      Result = Result + c;
    };
    return Result;
  };
  this.Write = function () {
    var i = 0;
    for (var $l = 0, $end = arguments.length - 1; $l <= $end; $l++) {
      i = $l;
      if ($impl.WriteCallBack != null) {
        $impl.WriteCallBack(arguments[i],false)}
       else $impl.WriteBuf = $impl.WriteBuf + ("" + arguments[i]);
    };
  };
  this.Writeln = function () {
    var i = 0;
    var l = 0;
    var s = "";
    l = arguments.length - 1;
    if ($impl.WriteCallBack != null) {
      for (var $l = 0, $end = l; $l <= $end; $l++) {
        i = $l;
        $impl.WriteCallBack(arguments[i],i === l);
      };
    } else {
      s = $impl.WriteBuf;
      for (var $l1 = 0, $end1 = l; $l1 <= $end1; $l1++) {
        i = $l1;
        s = s + ("" + arguments[i]);
      };
      console.log(s);
      $impl.WriteBuf = "";
    };
  };
  this.SetWriteCallBack = function (H) {
    var Result = null;
    Result = $impl.WriteCallBack;
    $impl.WriteCallBack = H;
    return Result;
  };
  $mod.$implcode = function () {
    $impl.WriteBuf = "";
    $impl.WriteCallBack = null;
    $impl.valint = function (S, MinVal, MaxVal, Code) {
      var Result = 0;
      var x = 0.0;
      if (S === "") {
        Code.set(1);
        return Result;
      };
      x = Number(S);
      if (isNaN(x)) {
        var $tmp = $mod.Copy(S,1,1);
        if ($tmp === "$") {
          x = Number("0x" + $mod.Copy$1(S,2))}
         else if ($tmp === "&") {
          x = Number("0o" + $mod.Copy$1(S,2))}
         else if ($tmp === "%") {
          x = Number("0b" + $mod.Copy$1(S,2))}
         else {
          Code.set(1);
          return Result;
        };
      };
      if (isNaN(x) || (x !== $mod.Int(x))) {
        Code.set(1)}
       else if ((x < MinVal) || (x > MaxVal)) {
        Code.set(2)}
       else {
        Result = $mod.Trunc(x);
        Code.set(0);
      };
      return Result;
    };
  };
  $mod.$init = function () {
    rtl.exitcode = 0;
  };
},[]);
rtl.module("RTLConsts",["System"],function () {
  "use strict";
  var $mod = this;
  $mod.$resourcestrings = {SArgumentMissing: {org: 'Missing argument in format "%s"'}, SInvalidFormat: {org: 'Invalid format specifier : "%s"'}, SInvalidArgIndex: {org: 'Invalid argument index in format: "%s"'}, SListCapacityError: {org: "List capacity (%s) exceeded."}, SListIndexError: {org: "List index (%s) out of bounds"}, SDuplicateString: {org: "String list does not allow duplicates"}, SErrFindNeedsSortedList: {org: "Cannot use find on unsorted list"}, SErrInvalidFloat: {org: 'Invalid floating-point value: "%s"'}};
});
rtl.module("Math",["System"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("Types",["System"],function () {
  "use strict";
  var $mod = this;
  this.TDuplicates = {"0": "dupIgnore", dupIgnore: 0, "1": "dupAccept", dupAccept: 1, "2": "dupError", dupError: 2};
},["Math"]);
rtl.module("JS",["System","Types"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("SysUtils",["System","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FreeAndNil = function (Obj) {
    var o = null;
    o = Obj.get();
    if (o === null) return;
    Obj.set(null);
    o.$destroy("Destroy");
  };
  rtl.recNewT(this,"TFormatSettings",function () {
    this.CurrencyDecimals = 0;
    this.CurrencyFormat = 0;
    this.CurrencyString = "";
    this.DateSeparator = "\x00";
    this.DecimalSeparator = "";
    this.LongDateFormat = "";
    this.LongTimeFormat = "";
    this.NegCurrFormat = 0;
    this.ShortDateFormat = "";
    this.ShortTimeFormat = "";
    this.ThousandSeparator = "";
    this.TimeAMString = "";
    this.TimePMString = "";
    this.TimeSeparator = "\x00";
    this.TwoDigitYearCenturyWindow = 0;
    this.InitLocaleHandler = null;
    this.$new = function () {
      var r = Object.create(this);
      r.DateTimeToStrFormat = rtl.arraySetLength(null,"",2);
      r.LongDayNames = rtl.arraySetLength(null,"",7);
      r.LongMonthNames = rtl.arraySetLength(null,"",12);
      r.ShortDayNames = rtl.arraySetLength(null,"",7);
      r.ShortMonthNames = rtl.arraySetLength(null,"",12);
      return r;
    };
    this.$eq = function (b) {
      return (this.CurrencyDecimals === b.CurrencyDecimals) && (this.CurrencyFormat === b.CurrencyFormat) && (this.CurrencyString === b.CurrencyString) && (this.DateSeparator === b.DateSeparator) && rtl.arrayEq(this.DateTimeToStrFormat,b.DateTimeToStrFormat) && (this.DecimalSeparator === b.DecimalSeparator) && (this.LongDateFormat === b.LongDateFormat) && rtl.arrayEq(this.LongDayNames,b.LongDayNames) && rtl.arrayEq(this.LongMonthNames,b.LongMonthNames) && (this.LongTimeFormat === b.LongTimeFormat) && (this.NegCurrFormat === b.NegCurrFormat) && (this.ShortDateFormat === b.ShortDateFormat) && rtl.arrayEq(this.ShortDayNames,b.ShortDayNames) && rtl.arrayEq(this.ShortMonthNames,b.ShortMonthNames) && (this.ShortTimeFormat === b.ShortTimeFormat) && (this.ThousandSeparator === b.ThousandSeparator) && (this.TimeAMString === b.TimeAMString) && (this.TimePMString === b.TimePMString) && (this.TimeSeparator === b.TimeSeparator) && (this.TwoDigitYearCenturyWindow === b.TwoDigitYearCenturyWindow);
    };
    this.$assign = function (s) {
      this.CurrencyDecimals = s.CurrencyDecimals;
      this.CurrencyFormat = s.CurrencyFormat;
      this.CurrencyString = s.CurrencyString;
      this.DateSeparator = s.DateSeparator;
      this.DateTimeToStrFormat = s.DateTimeToStrFormat.slice(0);
      this.DecimalSeparator = s.DecimalSeparator;
      this.LongDateFormat = s.LongDateFormat;
      this.LongDayNames = s.LongDayNames.slice(0);
      this.LongMonthNames = s.LongMonthNames.slice(0);
      this.LongTimeFormat = s.LongTimeFormat;
      this.NegCurrFormat = s.NegCurrFormat;
      this.ShortDateFormat = s.ShortDateFormat;
      this.ShortDayNames = s.ShortDayNames.slice(0);
      this.ShortMonthNames = s.ShortMonthNames.slice(0);
      this.ShortTimeFormat = s.ShortTimeFormat;
      this.ThousandSeparator = s.ThousandSeparator;
      this.TimeAMString = s.TimeAMString;
      this.TimePMString = s.TimePMString;
      this.TimeSeparator = s.TimeSeparator;
      this.TwoDigitYearCenturyWindow = s.TwoDigitYearCenturyWindow;
      return this;
    };
    this.GetJSLocale = function () {
      return Intl.DateTimeFormat().resolvedOptions().locale;
    };
    this.Create = function () {
      var Result = $mod.TFormatSettings.$new();
      Result.$assign($mod.TFormatSettings.Create$1($mod.TFormatSettings.GetJSLocale()));
      return Result;
    };
    this.Create$1 = function (ALocale) {
      var Result = $mod.TFormatSettings.$new();
      Result.LongDayNames = $impl.DefaultLongDayNames.slice(0);
      Result.ShortDayNames = $impl.DefaultShortDayNames.slice(0);
      Result.ShortMonthNames = $impl.DefaultShortMonthNames.slice(0);
      Result.LongMonthNames = $impl.DefaultLongMonthNames.slice(0);
      Result.DateTimeToStrFormat[0] = "c";
      Result.DateTimeToStrFormat[1] = "f";
      Result.DateSeparator = "-";
      Result.TimeSeparator = ":";
      Result.ShortDateFormat = "yyyy-mm-dd";
      Result.LongDateFormat = "ddd, yyyy-mm-dd";
      Result.ShortTimeFormat = "hh:nn";
      Result.LongTimeFormat = "hh:nn:ss";
      Result.DecimalSeparator = ".";
      Result.ThousandSeparator = ",";
      Result.TimeAMString = "AM";
      Result.TimePMString = "PM";
      Result.TwoDigitYearCenturyWindow = 50;
      Result.CurrencyFormat = 0;
      Result.NegCurrFormat = 0;
      Result.CurrencyDecimals = 2;
      Result.CurrencyString = "$";
      if ($mod.TFormatSettings.InitLocaleHandler != null) $mod.TFormatSettings.InitLocaleHandler($mod.UpperCase(ALocale),$mod.TFormatSettings.$clone(Result));
      return Result;
    };
  },true);
  rtl.createClass(this,"Exception",pas.System.TObject,function () {
    this.LogMessageOnCreate = false;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fMessage = "";
      this.FJSError = null;
    };
    this.$final = function () {
      this.FJSError = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (Msg) {
      this.fMessage = Msg;
      this.FJSError = new Error();
      if (this.LogMessageOnCreate) pas.System.Writeln("Created exception ",this.$classname," with message: ",Msg);
      return this;
    };
    this.CreateFmt = function (Msg, Args) {
      this.Create$1($mod.Format(Msg,Args));
      return this;
    };
  });
  rtl.createClass(this,"EExternal",this.Exception,function () {
  });
  rtl.createClass(this,"EInvalidCast",this.Exception,function () {
  });
  rtl.createClass(this,"EConvertError",this.Exception,function () {
  });
  rtl.createClass(this,"EIntError",this.EExternal,function () {
  });
  rtl.createClass(this,"EDivByZero",this.EIntError,function () {
  });
  rtl.createClass(this,"ERangeError",this.EIntError,function () {
  });
  rtl.createClass(this,"EInOutError",this.Exception,function () {
  });
  rtl.createClass(this,"EAbstractError",this.Exception,function () {
  });
  this.TrimLeft = function (S) {
    return S.replace(/^[\s\uFEFF\xA0\x00-\x1f]+/,'');
  };
  this.TrimRight = function (S) {
    return S.replace(/[\s\uFEFF\xA0\x00-\x1f]+$/,'');
  };
  this.UpperCase = function (s) {
    return s.toUpperCase();
  };
  this.LowerCase = function (s) {
    return s.toLowerCase();
  };
  this.CompareStr = function (s1, s2) {
    var l1 = s1.length;
    var l2 = s2.length;
    if (l1<=l2){
      var s = s2.substr(0,l1);
      if (s1<s){ return -1;
      } else if (s1>s){ return 1;
      } else { return l1<l2 ? -1 : 0; };
    } else {
      var s = s1.substr(0,l2);
      if (s<s2){ return -1;
      } else { return 1; };
    };
  };
  this.CompareText = function (s1, s2) {
    var l1 = s1.toLowerCase();
    var l2 = s2.toLowerCase();
    if (l1>l2){ return 1;
    } else if (l1<l2){ return -1;
    } else { return 0; };
  };
  this.Format = function (Fmt, Args) {
    var Result = "";
    Result = $mod.Format$1(Fmt,Args,$mod.FormatSettings);
    return Result;
  };
  this.Format$1 = function (Fmt, Args, aSettings) {
    var Result = "";
    var ChPos = 0;
    var OldPos = 0;
    var ArgPos = 0;
    var DoArg = 0;
    var Len = 0;
    var Hs = "";
    var ToAdd = "";
    var Index = 0;
    var Width = 0;
    var Prec = 0;
    var Left = false;
    var Fchar = "\x00";
    var vq = 0;
    function ReadFormat() {
      var Result = "\x00";
      var Value = 0;
      function ReadInteger() {
        var Code = 0;
        var ArgN = 0;
        if (Value !== -1) return;
        OldPos = ChPos;
        while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) <= "9") && (Fmt.charAt(ChPos - 1) >= "0")) ChPos += 1;
        if (ChPos > Len) $impl.DoFormatError(1,Fmt);
        if (Fmt.charAt(ChPos - 1) === "*") {
          if (Index === 255) {
            ArgN = ArgPos}
           else {
            ArgN = Index;
            Index += 1;
          };
          if ((ChPos > OldPos) || (ArgN > (rtl.length(Args) - 1))) $impl.DoFormatError(1,Fmt);
          ArgPos = ArgN + 1;
          var $tmp = Args[ArgN].VType;
          if ($tmp === 0) {
            Value = Args[ArgN].VJSValue}
           else if ($tmp === 19) {
            Value = Args[ArgN].VJSValue}
           else {
            $impl.DoFormatError(1,Fmt);
          };
          ChPos += 1;
        } else {
          if (OldPos < ChPos) {
            pas.System.val(pas.System.Copy(Fmt,OldPos,ChPos - OldPos),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code > 0) $impl.DoFormatError(1,Fmt);
          } else Value = -1;
        };
      };
      function ReadIndex() {
        if (Fmt.charAt(ChPos - 1) !== ":") {
          ReadInteger()}
         else Value = 0;
        if (Fmt.charAt(ChPos - 1) === ":") {
          if (Value === -1) $impl.DoFormatError(2,Fmt);
          Index = Value;
          Value = -1;
          ChPos += 1;
        };
      };
      function ReadLeft() {
        if (Fmt.charAt(ChPos - 1) === "-") {
          Left = true;
          ChPos += 1;
        } else Left = false;
      };
      function ReadWidth() {
        ReadInteger();
        if (Value !== -1) {
          Width = Value;
          Value = -1;
        };
      };
      function ReadPrec() {
        if (Fmt.charAt(ChPos - 1) === ".") {
          ChPos += 1;
          ReadInteger();
          if (Value === -1) Value = 0;
          Prec = Value;
        };
      };
      Index = 255;
      Width = -1;
      Prec = -1;
      Value = -1;
      ChPos += 1;
      if (Fmt.charAt(ChPos - 1) === "%") {
        Result = "%";
        return Result;
      };
      ReadIndex();
      ReadLeft();
      ReadWidth();
      ReadPrec();
      Result = pas.System.upcase(Fmt.charAt(ChPos - 1));
      return Result;
    };
    function Checkarg(AT, err) {
      var Result = false;
      Result = false;
      if (Index === 255) {
        DoArg = ArgPos}
       else DoArg = Index;
      ArgPos = DoArg + 1;
      if ((DoArg > (rtl.length(Args) - 1)) || (Args[DoArg].VType !== AT)) {
        if (err) $impl.DoFormatError(3,Fmt);
        ArgPos -= 1;
        return Result;
      };
      Result = true;
      return Result;
    };
    Result = "";
    Len = Fmt.length;
    ChPos = 1;
    OldPos = 1;
    ArgPos = 0;
    while (ChPos <= Len) {
      while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) !== "%")) ChPos += 1;
      if (ChPos > OldPos) Result = Result + pas.System.Copy(Fmt,OldPos,ChPos - OldPos);
      if (ChPos < Len) {
        Fchar = ReadFormat();
        var $tmp = Fchar;
        if ($tmp === "D") {
          if (Checkarg(0,false)) {
            ToAdd = $mod.IntToStr(Args[DoArg].VJSValue)}
           else if (Checkarg(19,true)) ToAdd = $mod.IntToStr(Args[DoArg].VJSValue);
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          if (ToAdd.charAt(0) !== "-") {
            ToAdd = pas.System.StringOfChar("0",Index) + ToAdd}
           else pas.System.Insert(pas.System.StringOfChar("0",Index + 1),{get: function () {
              return ToAdd;
            }, set: function (v) {
              ToAdd = v;
            }},2);
        } else if ($tmp === "U") {
          if (Checkarg(0,false)) {
            ToAdd = $mod.IntToStr(Args[DoArg].VJSValue >>> 0)}
           else if (Checkarg(19,true)) ToAdd = $mod.IntToStr(Args[DoArg].VJSValue);
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          ToAdd = pas.System.StringOfChar("0",Index) + ToAdd;
        } else if ($tmp === "E") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffExponent,3,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffExponent,3,Prec,aSettings);
        } else if ($tmp === "F") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffFixed,9999,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffFixed,9999,Prec,aSettings);
        } else if ($tmp === "G") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffGeneral,Prec,3,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffGeneral,Prec,3,aSettings);
        } else if ($tmp === "N") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffNumber,9999,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffNumber,9999,Prec,aSettings);
        } else if ($tmp === "M") {
          if (Checkarg(12,false)) {
            ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue / 10000,$mod.TFloatFormat.ffCurrency,9999,Prec,aSettings)}
           else if (Checkarg(3,true)) ToAdd = $mod.FloatToStrF$1(Args[DoArg].VJSValue,$mod.TFloatFormat.ffCurrency,9999,Prec,aSettings);
        } else if ($tmp === "S") {
          if (Checkarg(18,false)) {
            Hs = Args[DoArg].VJSValue}
           else if (Checkarg(9,true)) Hs = Args[DoArg].VJSValue;
          Index = Hs.length;
          if ((Prec !== -1) && (Index > Prec)) Index = Prec;
          ToAdd = pas.System.Copy(Hs,1,Index);
        } else if ($tmp === "P") {
          if (Checkarg(0,false)) {
            ToAdd = $mod.IntToHex(Args[DoArg].VJSValue,8)}
           else if (Checkarg(0,true)) ToAdd = $mod.IntToHex(Args[DoArg].VJSValue,16);
        } else if ($tmp === "X") {
          if (Checkarg(0,false)) {
            vq = Args[DoArg].VJSValue;
            Index = 16;
          } else if (Checkarg(19,true)) {
            vq = Args[DoArg].VJSValue;
            Index = 31;
          };
          if (Prec > Index) {
            ToAdd = $mod.IntToHex(vq,Index)}
           else {
            Index = 1;
            while ((rtl.shl(1,Index * 4) <= vq) && (Index < 16)) Index += 1;
            if (Index > Prec) Prec = Index;
            ToAdd = $mod.IntToHex(vq,Prec);
          };
        } else if ($tmp === "%") ToAdd = "%";
        if (Width !== -1) if (ToAdd.length < Width) if (!Left) {
          ToAdd = pas.System.StringOfChar(" ",Width - ToAdd.length) + ToAdd}
         else ToAdd = ToAdd + pas.System.StringOfChar(" ",Width - ToAdd.length);
        Result = Result + ToAdd;
      };
      ChPos += 1;
      OldPos = ChPos;
    };
    return Result;
  };
  var Alpha = rtl.createSet(null,65,90,null,97,122,95);
  var AlphaNum = rtl.unionSet(Alpha,rtl.createSet(null,48,57));
  var Dot = ".";
  this.IsValidIdent = function (Ident, AllowDots, StrictDots) {
    var Result = false;
    var First = false;
    var I = 0;
    var Len = 0;
    Len = Ident.length;
    if (Len < 1) return false;
    First = true;
    Result = false;
    I = 1;
    while (I <= Len) {
      if (First) {
        if (!(Ident.charCodeAt(I - 1) in Alpha)) return Result;
        First = false;
      } else if (AllowDots && (Ident.charAt(I - 1) === Dot)) {
        if (StrictDots) {
          if (I >= Len) return Result;
          First = true;
        };
      } else if (!(Ident.charCodeAt(I - 1) in AlphaNum)) return Result;
      I = I + 1;
    };
    Result = true;
    return Result;
  };
  this.TStringReplaceFlag = {"0": "rfReplaceAll", rfReplaceAll: 0, "1": "rfIgnoreCase", rfIgnoreCase: 1};
  this.StringReplace = function (aOriginal, aSearch, aReplace, Flags) {
    var Result = "";
    var REFlags = "";
    var REString = "";
    REFlags = "";
    if ($mod.TStringReplaceFlag.rfReplaceAll in Flags) REFlags = "g";
    if ($mod.TStringReplaceFlag.rfIgnoreCase in Flags) REFlags = REFlags + "i";
    REString = aSearch.replace(new RegExp($impl.RESpecials,"g"),"\\$1");
    Result = aOriginal.replace(new RegExp(REString,REFlags),aReplace);
    return Result;
  };
  this.IntToStr = function (Value) {
    var Result = "";
    Result = "" + Value;
    return Result;
  };
  this.IntToHex = function (Value, Digits) {
    var Result = "";
    Result = "";
    if (Value < 0) if (Value<0) Value = 0xFFFFFFFF + Value + 1;
    Result=Value.toString(16);
    Result = $mod.UpperCase(Result);
    while (Result.length < Digits) Result = "0" + Result;
    return Result;
  };
  this.TFloatFormat = {"0": "ffFixed", ffFixed: 0, "1": "ffGeneral", ffGeneral: 1, "2": "ffExponent", ffExponent: 2, "3": "ffNumber", ffNumber: 3, "4": "ffCurrency", ffCurrency: 4};
  this.FloatToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStr$1(Value,$mod.FormatSettings);
    return Result;
  };
  this.FloatToStr$1 = function (Value, aSettings) {
    var Result = "";
    Result = $mod.FloatToStrF$1(Value,$mod.TFloatFormat.ffGeneral,15,0,aSettings);
    return Result;
  };
  this.FloatToStrF$1 = function (Value, format, Precision, Digits, aSettings) {
    var Result = "";
    var TS = "";
    var DS = "";
    DS = aSettings.DecimalSeparator;
    TS = aSettings.ThousandSeparator;
    var $tmp = format;
    if ($tmp === $mod.TFloatFormat.ffGeneral) {
      Result = $impl.FormatGeneralFloat(Value,Precision,DS)}
     else if ($tmp === $mod.TFloatFormat.ffExponent) {
      Result = $impl.FormatExponentFloat(Value,Precision,Digits,DS)}
     else if ($tmp === $mod.TFloatFormat.ffFixed) {
      Result = $impl.FormatFixedFloat(Value,Digits,DS)}
     else if ($tmp === $mod.TFloatFormat.ffNumber) {
      Result = $impl.FormatNumberFloat(Value,Digits,DS,TS)}
     else if ($tmp === $mod.TFloatFormat.ffCurrency) Result = $impl.FormatNumberCurrency(Value * 10000,Digits,aSettings);
    if ((format !== $mod.TFloatFormat.ffCurrency) && (Result.length > 1) && (Result.charAt(0) === "-")) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS,TS);
    return Result;
  };
  var TDecimalPart = {"0": "dpDigit", dpDigit: 0, "1": "dpSignificand", dpSignificand: 1, "2": "dpExp", dpExp: 2};
  this.TryStrToFloat$3 = function (S, res, aSettings) {
    var Result = false;
    var J = undefined;
    var I = 0;
    var aStart = 0;
    var Len = 0;
    var N = "";
    var p = 0;
    Result = false;
    N = S;
    if (aSettings.ThousandSeparator !== "") N = $mod.StringReplace(N,aSettings.ThousandSeparator,"",rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll));
    if (aSettings.DecimalSeparator !== ".") N = $mod.StringReplace(N,aSettings.DecimalSeparator,".",{});
    p = TDecimalPart.dpDigit;
    I = 1;
    aStart = 1;
    Len = N.length;
    while (I <= Len) {
      var $tmp = N.charAt(I - 1);
      if (($tmp === "+") || ($tmp === "-")) {
        var $tmp1 = p;
        if ($tmp1 === TDecimalPart.dpSignificand) {
          return Result}
         else if ($tmp1 === TDecimalPart.dpDigit) {
          if (I > aStart) return Result}
         else if ($tmp1 === TDecimalPart.dpExp) if (I > (aStart + 1)) return Result;
      } else if (($tmp >= "0") && ($tmp <= "9")) {}
      else if ($tmp === ".") {
        if (p !== TDecimalPart.dpDigit) return Result;
        p = TDecimalPart.dpSignificand;
        aStart = I;
      } else if (($tmp === "E") || ($tmp === "e")) {
        if (p === TDecimalPart.dpExp) {
          return Result}
         else {
          p = TDecimalPart.dpExp;
          aStart = I;
        };
      } else {
        return Result;
      };
      I += 1;
    };
    J = parseFloat(N);
    Result = !isNaN(J);
    if (Result) res.set(rtl.getNumber(J));
    return Result;
  };
  this.StrToFloat = function (S) {
    var Result = 0.0;
    Result = $mod.StrToFloat$1(S,$mod.FormatSettings);
    return Result;
  };
  this.StrToFloat$1 = function (S, aSettings) {
    var Result = 0.0;
    if (!$mod.TryStrToFloat$3(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},aSettings)) throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SErrInvalidFloat"),pas.System.VarRecs(18,S)]);
    return Result;
  };
  this.TrueBoolStrs = [];
  this.FalseBoolStrs = [];
  this.BoolToStr = function (B, UseBoolStrs) {
    var Result = "";
    if (UseBoolStrs) {
      $impl.CheckBoolStrs();
      if (B) {
        Result = $mod.TrueBoolStrs[0]}
       else Result = $mod.FalseBoolStrs[0];
    } else if (B) {
      Result = "-1"}
     else Result = "0";
    return Result;
  };
  rtl.recNewT(this,"TTimeStamp",function () {
    this.Time = 0;
    this.Date = 0;
    this.$eq = function (b) {
      return (this.Time === b.Time) && (this.Date === b.Date);
    };
    this.$assign = function (s) {
      this.Time = s.Time;
      this.Date = s.Date;
      return this;
    };
  });
  this.TimeSeparator = "\x00";
  this.DateSeparator = "\x00";
  this.ShortDateFormat = "";
  this.LongDateFormat = "";
  this.ShortTimeFormat = "";
  this.LongTimeFormat = "";
  this.DecimalSeparator = "";
  this.ThousandSeparator = "";
  this.TimeAMString = "";
  this.TimePMString = "";
  this.HoursPerDay = 24;
  this.MinsPerHour = 60;
  this.SecsPerMin = 60;
  this.MSecsPerSec = 1000;
  this.MinsPerDay = 24 * 60;
  this.SecsPerDay = 1440 * 60;
  this.MSecsPerDay = 86400 * 1000;
  this.MaxDateTime = 2958465.99999999;
  this.DateDelta = 693594;
  this.MonthDays$a$clone = function (a) {
    var b = [];
    b.length = 2;
    for (var c = 0; c < 2; c++) b[c] = a[c].slice(0);
    return b;
  };
  this.MonthDays = [[31,28,31,30,31,30,31,31,30,31,30,31],[31,29,31,30,31,30,31,31,30,31,30,31]];
  this.ShortMonthNames = rtl.arraySetLength(null,"",12);
  this.LongMonthNames = rtl.arraySetLength(null,"",12);
  this.ShortDayNames = rtl.arraySetLength(null,"",7);
  this.LongDayNames = rtl.arraySetLength(null,"",7);
  this.FormatSettings = this.TFormatSettings.$new();
  this.JSDateToDateTime = function (aDate, asUTC) {
    var Result = 0.0;
    if (asUTC) {
      Result = $mod.EncodeDate(aDate.getUTCFullYear(),aDate.getUTCMonth() + 1,aDate.getUTCDate()) + $mod.EncodeTime(aDate.getUTCHours(),aDate.getUTCMinutes(),aDate.getUTCSeconds(),aDate.getUTCMilliseconds())}
     else Result = $mod.EncodeDate(aDate.getFullYear(),aDate.getMonth() + 1,aDate.getDate()) + $mod.EncodeTime(aDate.getHours(),aDate.getMinutes(),aDate.getSeconds(),aDate.getMilliseconds());
    return Result;
  };
  this.DateTimeToTimeStamp = function (DateTime) {
    var Result = $mod.TTimeStamp.$new();
    var D = 0.0;
    D = DateTime * 86400000;
    if (D < 0) {
      D = D - 0.5}
     else D = D + 0.5;
    Result.Time = pas.System.Trunc(Math.abs(pas.System.Trunc(D)) % 86400000);
    Result.Date = 693594 + rtl.trunc(pas.System.Trunc(D) / 86400000);
    return Result;
  };
  this.TryEncodeDate = function (Year, Month, Day, date) {
    var Result = false;
    var c = 0;
    var ya = 0;
    Result = (Year > 0) && (Year < 10000) && (Month >= 1) && (Month <= 12) && (Day > 0) && (Day <= $mod.MonthDays[+$mod.IsLeapYear(Year)][Month - 1]);
    if (Result) {
      if (Month > 2) {
        Month -= 3}
       else {
        Month += 9;
        Year -= 1;
      };
      c = rtl.trunc(Year / 100);
      ya = Year - (100 * c);
      date.set(((146097 * c) >>> 2) + ((1461 * ya) >>> 2) + rtl.trunc(((153 * Month) + 2) / 5) + Day);
      date.set(date.get() - 693900);
    };
    return Result;
  };
  this.TryEncodeTime = function (Hour, Min, Sec, MSec, Time) {
    var Result = false;
    Result = (Hour < 24) && (Min < 60) && (Sec < 60) && (MSec < 1000);
    if (Result) Time.set(((Hour * 3600000) + (Min * 60000) + (Sec * 1000) + MSec) / 86400000);
    return Result;
  };
  this.EncodeDate = function (Year, Month, Day) {
    var Result = 0.0;
    if (!$mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s-%s-%s is not a valid date specification",pas.System.VarRecs(18,$mod.IntToStr(Year),18,$mod.IntToStr(Month),18,$mod.IntToStr(Day))]);
    return Result;
  };
  this.EncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s:%s:%s.%s is not a valid time specification",pas.System.VarRecs(18,$mod.IntToStr(Hour),18,$mod.IntToStr(Minute),18,$mod.IntToStr(Second),18,$mod.IntToStr(MilliSecond))]);
    return Result;
  };
  this.DecodeDate = function (date, Year, Month, Day) {
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var j = 0;
    if (date <= -693594) {
      Year.set(0);
      Month.set(0);
      Day.set(0);
    } else {
      if (date > 0) {
        date = date + (1 / (86400000 * 2))}
       else date = date - (1 / (86400000 * 2));
      if (date > $mod.MaxDateTime) date = $mod.MaxDateTime;
      j = rtl.shl(pas.System.Trunc(date) + 693900,2) - 1;
      ly = rtl.trunc(j / 146097);
      j = j - (146097 * ly);
      ld = rtl.lw(j >>> 2);
      j = rtl.trunc((rtl.lw(ld << 2) + 3) / 1461);
      ld = rtl.lw(((rtl.lw(ld << 2) + 7) - (1461 * j)) >>> 2);
      lm = rtl.trunc(((5 * ld) - 3) / 153);
      ld = rtl.trunc((((5 * ld) + 2) - (153 * lm)) / 5);
      ly = (100 * ly) + j;
      if (lm < 10) {
        lm += 3}
       else {
        lm -= 9;
        ly += 1;
      };
      Year.set(ly);
      Month.set(lm);
      Day.set(ld);
    };
  };
  this.DecodeTime = function (Time, Hour, Minute, Second, MilliSecond) {
    var l = 0;
    l = $mod.DateTimeToTimeStamp(Time).Time;
    Hour.set(rtl.trunc(l / 3600000));
    l = l % 3600000;
    Minute.set(rtl.trunc(l / 60000));
    l = l % 60000;
    Second.set(rtl.trunc(l / 1000));
    l = l % 1000;
    MilliSecond.set(l);
  };
  this.DecodeDateFully = function (DateTime, Year, Month, Day, DOW) {
    var Result = false;
    $mod.DecodeDate(DateTime,Year,Month,Day);
    DOW.set($mod.DayOfWeek(DateTime));
    Result = $mod.IsLeapYear(Year.get());
    return Result;
  };
  this.Now = function () {
    var Result = 0.0;
    Result = $mod.JSDateToDateTime(new Date(),false);
    return Result;
  };
  this.DayOfWeek = function (DateTime) {
    var Result = 0;
    Result = 1 + ((pas.System.Trunc(DateTime) - 1) % 7);
    if (Result <= 0) Result += 7;
    return Result;
  };
  this.IsLeapYear = function (Year) {
    var Result = false;
    Result = ((Year % 4) === 0) && (((Year % 100) !== 0) || ((Year % 400) === 0));
    return Result;
  };
  this.DateToStr = function (date) {
    var Result = "";
    Result = $mod.DateToStr$1(date,$mod.FormatSettings);
    return Result;
  };
  this.DateToStr$1 = function (date, aSettings) {
    var Result = "";
    Result = $mod.FormatDateTime$1("ddddd",date,aSettings);
    return Result;
  };
  this.TimeToStr = function (Time) {
    var Result = "";
    Result = $mod.TimeToStr$1(Time,$mod.FormatSettings);
    return Result;
  };
  this.TimeToStr$1 = function (Time, aSettings) {
    var Result = "";
    Result = $mod.FormatDateTime$1("tt",Time,aSettings);
    return Result;
  };
  this.FormatDateTime$1 = function (aFormatStr, DateTime, aSettings) {
    var Result = "";
    function StoreString(AStr) {
      Result = Result + AStr;
    };
    function StoreInt(Value, Digits) {
      var S = "";
      S = $mod.IntToStr(Value);
      while (S.length < Digits) S = "0" + S;
      StoreString(S);
    };
    var Year = 0;
    var Month = 0;
    var Day = 0;
    var DayOfWeek = 0;
    var Hour = 0;
    var Minute = 0;
    var Second = 0;
    var MilliSecond = 0;
    function StoreFormat(FormatStr, Nesting, TimeFlag) {
      function StoreStr(APos, Len) {
        Result = Result + pas.System.Copy(aFormatStr,APos,Len);
      };
      var Token = "\x00";
      var lastformattoken = "\x00";
      var prevlasttoken = "\x00";
      var Count = 0;
      var Clock12 = false;
      var tmp = 0;
      var isInterval = false;
      var P = 0;
      var FormatCurrent = 0;
      var FormatEnd = 0;
      if (Nesting > 1) return;
      FormatCurrent = 1;
      FormatEnd = FormatStr.length;
      Clock12 = false;
      isInterval = false;
      P = 1;
      while (P <= FormatEnd) {
        Token = FormatStr.charAt(P - 1);
        var $tmp = Token;
        if (($tmp === "'") || ($tmp === '"')) {
          P += 1;
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
        } else if (($tmp === "A") || ($tmp === "a")) {
          if (($mod.CompareText(pas.System.Copy(FormatStr,P,3),"A/P") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,4),"AMPM") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,5),"AM/PM") === 0)) {
            Clock12 = true;
            break;
          };
        };
        P += 1;
      };
      Token = "ÿ";
      lastformattoken = " ";
      prevlasttoken = "H";
      while (FormatCurrent <= FormatEnd) {
        Token = $mod.UpperCase(FormatStr.charAt(FormatCurrent - 1)).charAt(0);
        Count = 1;
        P = FormatCurrent + 1;
        var $tmp1 = Token;
        if (($tmp1 === "'") || ($tmp1 === '"')) {
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
          P += 1;
          Count = P - FormatCurrent;
          StoreStr(FormatCurrent + 1,Count - 2);
        } else if ($tmp1 === "A") {
          if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,4),"AMPM") === 0) {
            Count = 4;
            if (Hour < 12) {
              StoreString(aSettings.TimeAMString)}
             else StoreString(aSettings.TimePMString);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,5),"AM/PM") === 0) {
            Count = 5;
            if (Hour < 12) {
              StoreStr(FormatCurrent,2)}
             else StoreStr(FormatCurrent + 3,2);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,3),"A/P") === 0) {
            Count = 3;
            if (Hour < 12) {
              StoreStr(FormatCurrent,1)}
             else StoreStr(FormatCurrent + 2,1);
          } else throw $mod.EConvertError.$create("Create$1",["Illegal character in format string"]);
        } else if ($tmp1 === "/") {
          StoreString(aSettings.DateSeparator);
        } else if ($tmp1 === ":") {
          StoreString(aSettings.TimeSeparator)}
         else if (($tmp1 === " ") || ($tmp1 === "C") || ($tmp1 === "D") || ($tmp1 === "H") || ($tmp1 === "M") || ($tmp1 === "N") || ($tmp1 === "S") || ($tmp1 === "T") || ($tmp1 === "Y") || ($tmp1 === "Z") || ($tmp1 === "F")) {
          while ((P <= FormatEnd) && ($mod.UpperCase(FormatStr.charAt(P - 1)) === Token)) P += 1;
          Count = P - FormatCurrent;
          var $tmp2 = Token;
          if ($tmp2 === " ") {
            StoreStr(FormatCurrent,Count)}
           else if ($tmp2 === "Y") {
            if (Count > 2) {
              StoreInt(Year,4)}
             else StoreInt(Year % 100,2);
          } else if ($tmp2 === "M") {
            if (isInterval && ((prevlasttoken === "H") || TimeFlag)) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if ((lastformattoken === "H") || TimeFlag) {
              if (Count === 1) {
                StoreInt(Minute,0)}
               else StoreInt(Minute,2);
            } else {
              var $tmp3 = Count;
              if ($tmp3 === 1) {
                StoreInt(Month,0)}
               else if ($tmp3 === 2) {
                StoreInt(Month,2)}
               else if ($tmp3 === 3) {
                StoreString(aSettings.ShortMonthNames[Month - 1])}
               else {
                StoreString(aSettings.LongMonthNames[Month - 1]);
              };
            };
          } else if ($tmp2 === "D") {
            var $tmp4 = Count;
            if ($tmp4 === 1) {
              StoreInt(Day,0)}
             else if ($tmp4 === 2) {
              StoreInt(Day,2)}
             else if ($tmp4 === 3) {
              StoreString(aSettings.ShortDayNames[DayOfWeek - 1])}
             else if ($tmp4 === 4) {
              StoreString(aSettings.LongDayNames[DayOfWeek - 1])}
             else if ($tmp4 === 5) {
              StoreFormat(aSettings.ShortDateFormat,Nesting + 1,false)}
             else {
              StoreFormat(aSettings.LongDateFormat,Nesting + 1,false);
            };
          } else if ($tmp2 === "H") {
            if (isInterval) {
              StoreInt(Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24),0)}
             else if (Clock12) {
              tmp = Hour % 12;
              if (tmp === 0) tmp = 12;
              if (Count === 1) {
                StoreInt(tmp,0)}
               else StoreInt(tmp,2);
            } else {
              if (Count === 1) {
                StoreInt(Hour,0)}
               else StoreInt(Hour,2);
            }}
           else if ($tmp2 === "N") {
            if (isInterval) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Minute,0)}
             else StoreInt(Minute,2)}
           else if ($tmp2 === "S") {
            if (isInterval) {
              StoreInt(Second + ((Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Second,0)}
             else StoreInt(Second,2)}
           else if ($tmp2 === "Z") {
            if (Count === 1) {
              StoreInt(MilliSecond,0)}
             else StoreInt(MilliSecond,3)}
           else if ($tmp2 === "T") {
            if (Count === 1) {
              StoreFormat(aSettings.ShortTimeFormat,Nesting + 1,true)}
             else StoreFormat(aSettings.LongTimeFormat,Nesting + 1,true)}
           else if ($tmp2 === "C") {
            StoreFormat(aSettings.ShortDateFormat,Nesting + 1,false);
            if ((Hour !== 0) || (Minute !== 0) || (Second !== 0)) {
              StoreString(" ");
              StoreFormat(aSettings.LongTimeFormat,Nesting + 1,true);
            };
          } else if ($tmp2 === "F") {
            StoreFormat(aSettings.ShortDateFormat,Nesting + 1,false);
            StoreString(" ");
            StoreFormat(aSettings.LongTimeFormat,Nesting + 1,true);
          };
          prevlasttoken = lastformattoken;
          lastformattoken = Token;
        } else {
          StoreString(Token);
        };
        FormatCurrent += Count;
      };
    };
    $mod.DecodeDateFully(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},{get: function () {
        return DayOfWeek;
      }, set: function (v) {
        DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{get: function () {
        return Hour;
      }, set: function (v) {
        Hour = v;
      }},{get: function () {
        return Minute;
      }, set: function (v) {
        Minute = v;
      }},{get: function () {
        return Second;
      }, set: function (v) {
        Second = v;
      }},{get: function () {
        return MilliSecond;
      }, set: function (v) {
        MilliSecond = v;
      }});
    if (aFormatStr !== "") {
      StoreFormat(aFormatStr,0,false)}
     else StoreFormat("C",0,false);
    return Result;
  };
  this.CurrencyFormat = 0;
  this.NegCurrFormat = 0;
  this.CurrencyDecimals = 0;
  this.CurrencyString = "";
  this.ChangeFileExt = function (FileName, Extension) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !(FileName.charCodeAt(i - 1) in EndSep)) i -= 1;
    if ((i === 0) || (FileName.charAt(i - 1) !== pas.System.ExtensionSeparator)) {
      i = FileName.length + 1}
     else {
      SOF = (i === 1) || (FileName.charCodeAt(i - 1 - 1) in pas.System.AllowDirectorySeparators);
      if (SOF && !pas.System.FirstDotAtFileNameStartIsExtension) i = FileName.length + 1;
    };
    Result = pas.System.Copy(FileName,1,i - 1) + Extension;
    return Result;
  };
  this.ExtractFileName = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,i + 1,2147483647);
    return Result;
  };
  this.ExtractFileExt = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    Result = "";
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if ((i > 0) && (FileName.charAt(i - 1) === pas.System.ExtensionSeparator)) {
      SOF = (i === 1) || (FileName.charCodeAt(i - 1 - 1) in pas.System.AllowDirectorySeparators);
      if (!SOF || pas.System.FirstDotAtFileNameStartIsExtension) Result = pas.System.Copy(FileName,i,2147483647);
    } else Result = "";
    return Result;
  };
  this.ExtractFileDir = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if ((i > 1) && $impl.CharInSet$1(FileName.charAt(i - 1),pas.System.AllowDirectorySeparators) && !$impl.CharInSet$1(FileName.charAt(i - 1 - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,1,i);
    return Result;
  };
  this.IncludeTrailingPathDelimiter = function (Path) {
    var Result = "";
    var l = 0;
    Result = Path;
    l = Result.length;
    if ((l === 0) || !$impl.CharInSet$1(Result.charAt(l - 1),pas.System.AllowDirectorySeparators)) Result = Result + pas.System.PathDelim;
    return Result;
  };
  rtl.createHelper(this,"TStringHelper",null,function () {
    this.GetLength = function () {
      var Result = 0;
      Result = this.get().length;
      return Result;
    };
    this.IndexOf = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.IndexOf$4.call(this,AValue,0,$mod.TStringHelper.GetLength.call(this));
      return Result;
    };
    this.IndexOf$1 = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.IndexOf$5.call(this,AValue,0,$mod.TStringHelper.GetLength.call(this));
      return Result;
    };
    this.IndexOf$4 = function (AValue, StartIndex, ACount) {
      var Result = 0;
      var S = "";
      S = pas.System.Copy(this.get(),StartIndex + 1,ACount);
      Result = pas.System.Pos(AValue,S) - 1;
      if (Result !== -1) Result = Result + StartIndex;
      return Result;
    };
    this.IndexOf$5 = function (AValue, StartIndex, ACount) {
      var Result = 0;
      var S = "";
      S = pas.System.Copy(this.get(),StartIndex + 1,ACount);
      Result = pas.System.Pos(AValue,S) - 1;
      if (Result !== -1) Result = Result + StartIndex;
      return Result;
    };
    this.LastIndexOf = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.LastIndexOf$4.call(this,AValue,$mod.TStringHelper.GetLength.call(this) - 1,$mod.TStringHelper.GetLength.call(this));
      return Result;
    };
    this.LastIndexOf$4 = function (AValue, AStartIndex, ACount) {
      var Result = 0;
      var Min = 0;
      Result = AStartIndex + 1;
      Min = (Result - ACount) + 1;
      if (Min < 1) Min = 1;
      while ((Result >= Min) && (this.get().charAt(Result - 1) !== AValue)) Result -= 1;
      if (Result < Min) {
        Result = -1}
       else Result = Result - 1;
      return Result;
    };
  });
  $mod.$implcode = function () {
    $impl.DefaultShortMonthNames = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    $impl.DefaultLongMonthNames = ["January","February","March","April","May","June","July","August","September","October","November","December"];
    $impl.DefaultShortDayNames = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
    $impl.DefaultLongDayNames = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
    $impl.CharInSet$1 = function (Ch, CSet) {
      var Result = false;
      Result = Ch.charCodeAt() in CSet;
      return Result;
    };
    $impl.CheckBoolStrs = function () {
      if (rtl.length($mod.TrueBoolStrs) === 0) {
        $mod.TrueBoolStrs = rtl.arraySetLength($mod.TrueBoolStrs,"",1);
        $mod.TrueBoolStrs[0] = "True";
      };
      if (rtl.length($mod.FalseBoolStrs) === 0) {
        $mod.FalseBoolStrs = rtl.arraySetLength($mod.FalseBoolStrs,"",1);
        $mod.FalseBoolStrs[0] = "False";
      };
    };
    $impl.feInvalidFormat = 1;
    $impl.feMissingArgument = 2;
    $impl.feInvalidArgIndex = 3;
    $impl.DoFormatError = function (ErrCode, fmt) {
      var $tmp = ErrCode;
      if ($tmp === 1) {
        throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SInvalidFormat"),pas.System.VarRecs(18,fmt)])}
       else if ($tmp === 2) {
        throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SArgumentMissing"),pas.System.VarRecs(18,fmt)])}
       else if ($tmp === 3) throw $mod.EConvertError.$create("CreateFmt",[rtl.getResStr(pas.RTLConsts,"SInvalidArgIndex"),pas.System.VarRecs(18,fmt)]);
    };
    $impl.maxdigits = 15;
    $impl.ReplaceDecimalSep = function (S, DS) {
      var Result = "";
      var P = 0;
      P = pas.System.Pos(".",S);
      if (P > 0) {
        Result = pas.System.Copy(S,1,P - 1) + DS + pas.System.Copy(S,P + 1,S.length - P)}
       else Result = S;
      return Result;
    };
    $impl.FormatGeneralFloat = function (Value, Precision, DS) {
      var Result = "";
      var P = 0;
      var PE = 0;
      var Q = 0;
      var Exponent = 0;
      if ((Precision === -1) || (Precision > 15)) Precision = 15;
      Result = rtl.floatToStr(Value,Precision + 7);
      Result = $mod.TrimLeft(Result);
      P = pas.System.Pos(".",Result);
      if (P === 0) return Result;
      PE = pas.System.Pos("E",Result);
      if (PE === 0) {
        Result = $impl.ReplaceDecimalSep(Result,DS);
        return Result;
      };
      Q = PE + 2;
      Exponent = 0;
      while (Q <= Result.length) {
        Exponent = ((Exponent * 10) + Result.charCodeAt(Q - 1)) - 48;
        Q += 1;
      };
      if (Result.charAt((PE + 1) - 1) === "-") Exponent = -Exponent;
      if (((P + Exponent) < PE) && (Exponent > -6)) {
        Result = rtl.strSetLength(Result,PE - 1);
        if (Exponent >= 0) {
          for (var $l = 0, $end = Exponent - 1; $l <= $end; $l++) {
            Q = $l;
            Result = rtl.setCharAt(Result,P - 1,Result.charAt((P + 1) - 1));
            P += 1;
          };
          Result = rtl.setCharAt(Result,P - 1,".");
          P = 1;
          if (Result.charAt(P - 1) === "-") P += 1;
          while ((Result.charAt(P - 1) === "0") && (P < Result.length) && (pas.System.Copy(Result,P + 1,DS.length) !== DS)) pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P,1);
        } else {
          pas.System.Insert(pas.System.Copy("00000",1,-Exponent),{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P - 1);
          Result = rtl.setCharAt(Result,P - Exponent - 1,Result.charAt(P - Exponent - 1 - 1));
          Result = rtl.setCharAt(Result,P - 1,".");
          if (Exponent !== -1) Result = rtl.setCharAt(Result,P - Exponent - 1 - 1,"0");
        };
        Q = Result.length;
        while ((Q > 0) && (Result.charAt(Q - 1) === "0")) Q -= 1;
        if (Result.charAt(Q - 1) === ".") Q -= 1;
        if ((Q === 0) || ((Q === 1) && (Result.charAt(0) === "-"))) {
          Result = "0"}
         else Result = rtl.strSetLength(Result,Q);
      } else {
        while (Result.charAt(PE - 1 - 1) === "0") {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},PE - 1,1);
          PE -= 1;
        };
        if (Result.charAt(PE - 1 - 1) === DS) {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},PE - 1,1);
          PE -= 1;
        };
        if (Result.charAt((PE + 1) - 1) === "+") {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},PE + 1,1)}
         else PE += 1;
        while (Result.charAt((PE + 1) - 1) === "0") pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE + 1,1);
      };
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    $impl.FormatExponentFloat = function (Value, Precision, Digits, DS) {
      var Result = "";
      var P = 0;
      DS = $mod.FormatSettings.DecimalSeparator;
      if ((Precision === -1) || (Precision > 15)) Precision = 15;
      Result = rtl.floatToStr(Value,Precision + 7);
      while (Result.charAt(0) === " ") pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      P = pas.System.Pos("E",Result);
      if (P === 0) {
        Result = $impl.ReplaceDecimalSep(Result,DS);
        return Result;
      };
      P += 2;
      if (Digits > 4) Digits = 4;
      Digits = (Result.length - P - Digits) + 1;
      if (Digits < 0) {
        pas.System.Insert(pas.System.Copy("0000",1,-Digits),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P)}
       else while ((Digits > 0) && (Result.charAt(P - 1) === "0")) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P,1);
        if (P > Result.length) {
          pas.System.Delete({get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P - 2,2);
          break;
        };
        Digits -= 1;
      };
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    $impl.FormatFixedFloat = function (Value, Digits, DS) {
      var Result = "";
      if (Digits === -1) {
        Digits = 2}
       else if (Digits > 18) Digits = 18;
      Result = rtl.floatToStr(Value,0,Digits);
      if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    $impl.FormatNumberFloat = function (Value, Digits, DS, TS) {
      var Result = "";
      var P = 0;
      if (Digits === -1) {
        Digits = 2}
       else if (Digits > 15) Digits = 15;
      Result = rtl.floatToStr(Value,0,Digits);
      if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      P = pas.System.Pos(".",Result);
      if (P <= 0) P = Result.length + 1;
      Result = $impl.ReplaceDecimalSep(Result,DS);
      P -= 3;
      if ((TS !== "") && (TS !== "\x00")) while (P > 1) {
        if (Result.charAt(P - 1 - 1) !== "-") pas.System.Insert(TS,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P);
        P -= 3;
      };
      return Result;
    };
    $impl.RemoveLeadingNegativeSign = function (AValue, DS, aThousandSeparator) {
      var Result = false;
      var i = 0;
      var TS = "";
      var StartPos = 0;
      Result = false;
      StartPos = 2;
      TS = aThousandSeparator;
      for (var $l = StartPos, $end = AValue.get().length; $l <= $end; $l++) {
        i = $l;
        Result = (AValue.get().charCodeAt(i - 1) in rtl.createSet(48,DS.charCodeAt(),69,43)) || (AValue.get().charAt(i - 1) === TS);
        if (!Result) break;
      };
      if (Result && (AValue.get().charAt(0) === "-")) pas.System.Delete(AValue,1,1);
      return Result;
    };
    $impl.FormatNumberCurrency = function (Value, Digits, aSettings) {
      var Result = "";
      var Negative = false;
      var P = 0;
      var CS = "";
      var DS = "";
      var TS = "";
      DS = aSettings.DecimalSeparator;
      TS = aSettings.ThousandSeparator;
      CS = aSettings.CurrencyString;
      if (Digits === -1) {
        Digits = aSettings.CurrencyDecimals}
       else if (Digits > 18) Digits = 18;
      Result = rtl.floatToStr(Value / 10000,0,Digits);
      Negative = Result.charAt(0) === "-";
      if (Negative) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      P = pas.System.Pos(".",Result);
      if (TS !== "") {
        if (P !== 0) {
          Result = $impl.ReplaceDecimalSep(Result,DS)}
         else P = Result.length + 1;
        P -= 3;
        while (P > 1) {
          pas.System.Insert(TS,{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }},P);
          P -= 3;
        };
      };
      if (Negative) $impl.RemoveLeadingNegativeSign({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},DS,TS);
      if (!Negative) {
        var $tmp = aSettings.CurrencyFormat;
        if ($tmp === 0) {
          Result = CS + Result}
         else if ($tmp === 1) {
          Result = Result + CS}
         else if ($tmp === 2) {
          Result = CS + " " + Result}
         else if ($tmp === 3) Result = Result + " " + CS;
      } else {
        var $tmp1 = aSettings.NegCurrFormat;
        if ($tmp1 === 0) {
          Result = "(" + CS + Result + ")"}
         else if ($tmp1 === 1) {
          Result = "-" + CS + Result}
         else if ($tmp1 === 2) {
          Result = CS + "-" + Result}
         else if ($tmp1 === 3) {
          Result = CS + Result + "-"}
         else if ($tmp1 === 4) {
          Result = "(" + Result + CS + ")"}
         else if ($tmp1 === 5) {
          Result = "-" + Result + CS}
         else if ($tmp1 === 6) {
          Result = Result + "-" + CS}
         else if ($tmp1 === 7) {
          Result = Result + CS + "-"}
         else if ($tmp1 === 8) {
          Result = "-" + Result + " " + CS}
         else if ($tmp1 === 9) {
          Result = "-" + CS + " " + Result}
         else if ($tmp1 === 10) {
          Result = Result + " " + CS + "-"}
         else if ($tmp1 === 11) {
          Result = CS + " " + Result + "-"}
         else if ($tmp1 === 12) {
          Result = CS + " " + "-" + Result}
         else if ($tmp1 === 13) {
          Result = Result + "-" + " " + CS}
         else if ($tmp1 === 14) {
          Result = "(" + CS + " " + Result + ")"}
         else if ($tmp1 === 15) Result = "(" + Result + " " + CS + ")";
      };
      return Result;
    };
    $impl.RESpecials = "([\\$\\+\\[\\]\\(\\)\\\\\\.\\*\\^\\?\\|])";
    $impl.InitGlobalFormatSettings = function () {
      $mod.FormatSettings.$assign($mod.TFormatSettings.Create());
      $mod.TimeSeparator = $mod.FormatSettings.TimeSeparator;
      $mod.DateSeparator = $mod.FormatSettings.DateSeparator;
      $mod.ShortDateFormat = $mod.FormatSettings.ShortDateFormat;
      $mod.LongDateFormat = $mod.FormatSettings.LongDateFormat;
      $mod.ShortTimeFormat = $mod.FormatSettings.ShortTimeFormat;
      $mod.LongTimeFormat = $mod.FormatSettings.LongTimeFormat;
      $mod.DecimalSeparator = $mod.FormatSettings.DecimalSeparator;
      $mod.ThousandSeparator = $mod.FormatSettings.ThousandSeparator;
      $mod.TimeAMString = $mod.FormatSettings.TimeAMString;
      $mod.TimePMString = $mod.FormatSettings.TimePMString;
      $mod.CurrencyFormat = $mod.FormatSettings.CurrencyFormat;
      $mod.NegCurrFormat = $mod.FormatSettings.NegCurrFormat;
      $mod.CurrencyDecimals = $mod.FormatSettings.CurrencyDecimals;
      $mod.CurrencyString = $mod.FormatSettings.CurrencyString;
    };
    $impl.DoClassRef = function (C) {
      if (C === null) ;
    };
  };
  $mod.$init = function () {
    (function () {
      $impl.InitGlobalFormatSettings();
    })();
    $impl.DoClassRef($mod.EInvalidCast);
    $impl.DoClassRef($mod.EAbstractError);
    $impl.DoClassRef($mod.ERangeError);
    $mod.ShortMonthNames = $impl.DefaultShortMonthNames.slice(0);
    $mod.LongMonthNames = $impl.DefaultLongMonthNames.slice(0);
    $mod.ShortDayNames = $impl.DefaultShortDayNames.slice(0);
    $mod.LongDayNames = $impl.DefaultLongDayNames.slice(0);
  };
},[]);
rtl.module("weborworker",["System","JS","Types"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("Web",["System","Types","JS","weborworker"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("Classes",["System","RTLConsts","Types","SysUtils","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass(this,"EListError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass(this,"EStringListError",this.EListError,function () {
  });
  rtl.createClass(this,"TPersistent",pas.System.TObject,function () {
  });
  rtl.createClass(this,"TStrings",this.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FAlwaysQuote = false;
      this.FUpdateCount = 0;
    };
    this.Error = function (Msg, Data) {
      throw $mod.EStringListError.$create("CreateFmt",[Msg,pas.System.VarRecs(18,pas.SysUtils.IntToStr(Data))]);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.GetCount();
      return Result;
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FAlwaysQuote = false;
      return this;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.IndexOf = function (S) {
      var Result = 0;
      Result = 0;
      while ((Result < this.GetCount()) && (this.DoCompareText(this.Get(Result),S) !== 0)) Result = Result + 1;
      if (Result === this.GetCount()) Result = -1;
      return Result;
    };
  });
  rtl.recNewT(this,"TStringItem",function () {
    this.FString = "";
    this.FObject = null;
    this.$eq = function (b) {
      return (this.FString === b.FString) && (this.FObject === b.FObject);
    };
    this.$assign = function (s) {
      this.FString = s.FString;
      this.FObject = s.FObject;
      return this;
    };
  });
  this.TStringsSortStyle = {"0": "sslNone", sslNone: 0, "1": "sslUser", sslUser: 1, "2": "sslAuto", sslAuto: 2};
  rtl.createClass(this,"TStringList",this.TStrings,function () {
    this.$init = function () {
      $mod.TStrings.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FOnChange = null;
      this.FOnChanging = null;
      this.FDuplicates = 0;
      this.FCaseSensitive = false;
      this.FOwnsObjects = false;
      this.FSortStyle = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      this.FOnChange = undefined;
      this.FOnChanging = undefined;
      $mod.TStrings.$final.call(this);
    };
    this.GetSorted = function () {
      var Result = false;
      Result = this.FSortStyle in rtl.createSet($mod.TStringsSortStyle.sslUser,$mod.TStringsSortStyle.sslAuto);
      return Result;
    };
    this.Grow = function () {
      var NC = 0;
      NC = this.GetCapacity();
      if (NC >= 256) {
        NC = NC + rtl.trunc(NC / 4)}
       else if (NC === 0) {
        NC = 4}
       else NC = NC * 4;
      this.SetCapacity(NC);
    };
    this.InternalClear = function (FromIndex, ClearOnly) {
      var I = 0;
      if (FromIndex < this.FCount) {
        if (this.FOwnsObjects) {
          for (var $l = FromIndex, $end = this.FCount - 1; $l <= $end; $l++) {
            I = $l;
            this.FList[I].FString = "";
            pas.SysUtils.FreeAndNil({p: this.FList[I], get: function () {
                return this.p.FObject;
              }, set: function (v) {
                this.p.FObject = v;
              }});
          };
        } else {
          for (var $l1 = FromIndex, $end1 = this.FCount - 1; $l1 <= $end1; $l1++) {
            I = $l1;
            this.FList[I].FString = "";
          };
        };
        this.FCount = FromIndex;
      };
      if (!ClearOnly) this.SetCapacity(0);
    };
    this.CheckIndex = function (AIndex) {
      if ((AIndex < 0) || (AIndex >= this.FCount)) this.Error(rtl.getResStr(pas.RTLConsts,"SListIndexError"),AIndex);
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) {
        if (this.FOnChange != null) this.FOnChange(this);
      };
    };
    this.Changing = function () {
      if (this.FUpdateCount === 0) if (this.FOnChanging != null) this.FOnChanging(this);
    };
    this.Get = function (Index) {
      var Result = "";
      this.CheckIndex(Index);
      Result = this.FList[Index].FString;
      return Result;
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = rtl.length(this.FList);
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FCount;
      return Result;
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < 0) this.Error(rtl.getResStr(pas.RTLConsts,"SListCapacityError"),NewCapacity);
      if (NewCapacity !== this.GetCapacity()) this.FList = rtl.arraySetLength(this.FList,$mod.TStringItem,NewCapacity);
    };
    this.InsertItem = function (Index, S) {
      this.InsertItem$1(Index,S,null);
    };
    this.InsertItem$1 = function (Index, S, O) {
      var It = $mod.TStringItem.$new();
      this.Changing();
      if (this.FCount === this.GetCapacity()) this.Grow();
      It.FString = S;
      It.FObject = O;
      this.FList.splice(Index,0,It);
      this.FCount += 1;
      this.Changed();
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      if (this.FCaseSensitive) {
        Result = pas.SysUtils.CompareStr(s1,s2)}
       else Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.Destroy = function () {
      this.InternalClear(0,false);
      $mod.TStrings.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      if (!(this.FSortStyle === $mod.TStringsSortStyle.sslAuto)) {
        Result = this.FCount}
       else if (this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) {
        var $tmp = this.FDuplicates;
        if ($tmp === pas.Types.TDuplicates.dupIgnore) {
          return Result}
         else if ($tmp === pas.Types.TDuplicates.dupError) this.Error(rtl.getResStr(pas.RTLConsts,"SDuplicateString"),0);
      };
      this.InsertItem(Result,S);
      return Result;
    };
    this.Find = function (S, Index) {
      var Result = false;
      var L = 0;
      var R = 0;
      var I = 0;
      var CompareRes = 0;
      Result = false;
      Index.set(-1);
      if (!this.GetSorted()) throw $mod.EListError.$create("Create$1",[rtl.getResStr(pas.RTLConsts,"SErrFindNeedsSortedList")]);
      L = 0;
      R = this.GetCount() - 1;
      while (L <= R) {
        I = L + rtl.trunc((R - L) / 2);
        CompareRes = this.DoCompareText(S,this.FList[I].FString);
        if (CompareRes > 0) {
          L = I + 1}
         else {
          R = I - 1;
          if (CompareRes === 0) {
            Result = true;
            if (this.FDuplicates !== pas.Types.TDuplicates.dupAccept) L = I;
          };
        };
      };
      Index.set(L);
      return Result;
    };
    this.IndexOf = function (S) {
      var Result = 0;
      if (!this.GetSorted()) {
        Result = $mod.TStrings.IndexOf.call(this,S)}
       else if (!this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) Result = -1;
      return Result;
    };
  });
  rtl.createClass(this,"TLoadHelper",pas.System.TObject,function () {
  });
  this.SetLoadHelperClass = function (aClass) {
    var Result = null;
    Result = $impl.GlobalLoadHelper;
    $impl.GlobalLoadHelper = aClass;
    return Result;
  };
  $mod.$implcode = function () {
    $impl.GlobalLoadHelper = null;
    $impl.ClassList = null;
  };
  $mod.$init = function () {
    $impl.ClassList = new Object();
  };
},[]);
rtl.module("Rtl.BrowserLoadHelper",["System","Classes","SysUtils","JS","Web"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass(this,"TBrowserLoadHelper",pas.Classes.TLoadHelper,function () {
  });
  $mod.$init = function () {
    pas.Classes.SetLoadHelperClass($mod.TBrowserLoadHelper);
  };
});
rtl.module("browserconsole",["System","JS","Web","Rtl.BrowserLoadHelper","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.BrowserLineBreak = "\n";
  this.DefaultMaxConsoleLines = 25;
  this.DefaultConsoleStyle = ".pasconsole { " + this.BrowserLineBreak + "font-family: courier;" + this.BrowserLineBreak + "font-size: 14px;" + this.BrowserLineBreak + "background: #FFFFFF;" + this.BrowserLineBreak + "color: #000000;" + this.BrowserLineBreak + "display: block;" + this.BrowserLineBreak + "}";
  this.ConsoleElementID = "";
  this.ConsoleStyle = "";
  this.MaxConsoleLines = 0;
  this.ConsoleLinesToBrowserLog = false;
  this.ResetConsole = function () {
    if ($impl.LinesParent === null) return;
    while ($impl.LinesParent.firstElementChild !== null) $impl.LinesParent.removeChild($impl.LinesParent.firstElementChild);
    $impl.AppendLine();
  };
  this.InitConsole = function () {
    if ($impl.ConsoleElement === null) return;
    if ($impl.ConsoleElement.nodeName.toLowerCase() !== "body") {
      while ($impl.ConsoleElement.firstElementChild !== null) $impl.ConsoleElement.removeChild($impl.ConsoleElement.firstElementChild);
    };
    $impl.StyleElement = document.createElement("style");
    $impl.StyleElement.innerText = $mod.ConsoleStyle;
    $impl.ConsoleElement.appendChild($impl.StyleElement);
    $impl.LinesParent = document.createElement("div");
    $impl.ConsoleElement.appendChild($impl.LinesParent);
  };
  this.HookConsole = function () {
    $impl.ConsoleElement = null;
    if ($mod.ConsoleElementID !== "") $impl.ConsoleElement = document.getElementById($mod.ConsoleElementID);
    if ($impl.ConsoleElement === null) $impl.ConsoleElement = document.body;
    if ($impl.ConsoleElement === null) return;
    $mod.InitConsole();
    $mod.ResetConsole();
    pas.System.SetWriteCallBack($impl.WriteConsole);
  };
  $mod.$implcode = function () {
    $impl.LastLine = null;
    $impl.StyleElement = null;
    $impl.LinesParent = null;
    $impl.ConsoleElement = null;
    $impl.AppendLine = function () {
      var CurrentCount = 0;
      var S = null;
      CurrentCount = 0;
      S = $impl.LinesParent.firstChild;
      while (S != null) {
        CurrentCount += 1;
        S = S.nextSibling;
      };
      while (CurrentCount > $mod.MaxConsoleLines) {
        CurrentCount -= 1;
        $impl.LinesParent.removeChild($impl.LinesParent.firstChild);
      };
      $impl.LastLine = document.createElement("div");
      $impl.LastLine.className = "pasconsole";
      $impl.LinesParent.appendChild($impl.LastLine);
    };
    $impl.EscapeString = function (S) {
      var Result = "";
      var CL = "";
      CL = pas.SysUtils.StringReplace(S,"<","&lt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,">","&gt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL," ","&nbsp;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,"\r\n","<br>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,"\n","<br>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      CL = pas.SysUtils.StringReplace(CL,"\r","<br>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      Result = CL;
      return Result;
    };
    $impl.WriteConsole = function (S, NewLine) {
      var CL = "";
      CL = $impl.LastLine.innerHTML;
      CL = CL + $impl.EscapeString("" + S);
      $impl.LastLine.innerHTML = CL;
      if (NewLine) {
        if ($mod.ConsoleLinesToBrowserLog) window.console.log($impl.LastLine.innerText);
        $impl.AppendLine();
      };
    };
  };
  $mod.$init = function () {
    $mod.ConsoleLinesToBrowserLog = true;
    $mod.ConsoleElementID = "pasjsconsole";
    $mod.ConsoleStyle = $mod.DefaultConsoleStyle;
    $mod.MaxConsoleLines = 25;
    $mod.HookConsole();
  };
},[]);
rtl.module("CommonTypes",["System"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("Tokens",["System"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TTokenKind = {"0": "UNTYPETOK", UNTYPETOK: 0, "1": "CONSTTOK", CONSTTOK: 1, "2": "TYPETOK", TYPETOK: 2, "3": "VARTOK", VARTOK: 3, "4": "PROCEDURETOK", PROCEDURETOK: 4, "5": "FUNCTIONTOK", FUNCTIONTOK: 5, "6": "LABELTOK", LABELTOK: 6, "7": "UNITTOK", UNITTOK: 7, "8": "RESERVED_8", RESERVED_8: 8, "9": "RESERVED_9", RESERVED_9: 9, "10": "GETINTVECTOK", GETINTVECTOK: 10, "11": "SETINTVECTOK", SETINTVECTOK: 11, "12": "CASETOK", CASETOK: 12, "13": "BEGINTOK", BEGINTOK: 13, "14": "ENDTOK", ENDTOK: 14, "15": "IFTOK", IFTOK: 15, "16": "THENTOK", THENTOK: 16, "17": "ELSETOK", ELSETOK: 17, "18": "WHILETOK", WHILETOK: 18, "19": "DOTOK", DOTOK: 19, "20": "REPEATTOK", REPEATTOK: 20, "21": "UNTILTOK", UNTILTOK: 21, "22": "FORTOK", FORTOK: 22, "23": "TOTOK", TOTOK: 23, "24": "DOWNTOTOK", DOWNTOTOK: 24, "25": "ASSIGNTOK", ASSIGNTOK: 25, "26": "WRITETOK", WRITETOK: 26, "27": "READLNTOK", READLNTOK: 27, "28": "HALTTOK", HALTTOK: 28, "29": "USESTOK", USESTOK: 29, "30": "ARRAYTOK", ARRAYTOK: 30, "31": "OFTOK", OFTOK: 31, "32": "STRINGTOK", STRINGTOK: 32, "33": "INCTOK", INCTOK: 33, "34": "DECTOK", DECTOK: 34, "35": "ORDTOK", ORDTOK: 35, "36": "CHRTOK", CHRTOK: 36, "37": "ASMTOK", ASMTOK: 37, "38": "ABSOLUTETOK", ABSOLUTETOK: 38, "39": "BREAKTOK", BREAKTOK: 39, "40": "CONTINUETOK", CONTINUETOK: 40, "41": "EXITTOK", EXITTOK: 41, "42": "RANGETOK", RANGETOK: 42, "43": "EQTOK", EQTOK: 43, "44": "NETOK", NETOK: 44, "45": "LTTOK", LTTOK: 45, "46": "LETOK", LETOK: 46, "47": "GTTOK", GTTOK: 47, "48": "GETOK", GETOK: 48, "49": "LOTOK", LOTOK: 49, "50": "HITOK", HITOK: 50, "51": "DOTTOK", DOTTOK: 51, "52": "COMMATOK", COMMATOK: 52, "53": "SEMICOLONTOK", SEMICOLONTOK: 53, "54": "OPARTOK", OPARTOK: 54, "55": "CPARTOK", CPARTOK: 55, "56": "DEREFERENCETOK", DEREFERENCETOK: 56, "57": "ADDRESSTOK", ADDRESSTOK: 57, "58": "OBRACKETTOK", OBRACKETTOK: 58, "59": "CBRACKETTOK", CBRACKETTOK: 59, "60": "COLONTOK", COLONTOK: 60, "61": "PLUSTOK", PLUSTOK: 61, "62": "MINUSTOK", MINUSTOK: 62, "63": "MULTOK", MULTOK: 63, "64": "DIVTOK", DIVTOK: 64, "65": "IDIVTOK", IDIVTOK: 65, "66": "MODTOK", MODTOK: 66, "67": "SHLTOK", SHLTOK: 67, "68": "SHRTOK", SHRTOK: 68, "69": "ORTOK", ORTOK: 69, "70": "XORTOK", XORTOK: 70, "71": "ANDTOK", ANDTOK: 71, "72": "NOTTOK", NOTTOK: 72, "73": "ASSIGNFILETOK", ASSIGNFILETOK: 73, "74": "RESETTOK", RESETTOK: 74, "75": "REWRITETOK", REWRITETOK: 75, "76": "APPENDTOK", APPENDTOK: 76, "77": "BLOCKREADTOK", BLOCKREADTOK: 77, "78": "BLOCKWRITETOK", BLOCKWRITETOK: 78, "79": "CLOSEFILETOK", CLOSEFILETOK: 79, "80": "GETRESOURCEHANDLETOK", GETRESOURCEHANDLETOK: 80, "81": "SIZEOFRESOURCETOK", SIZEOFRESOURCETOK: 81, "82": "WRITELNTOK", WRITELNTOK: 82, "83": "SIZEOFTOK", SIZEOFTOK: 83, "84": "LENGTHTOK", LENGTHTOK: 84, "85": "HIGHTOK", HIGHTOK: 85, "86": "LOWTOK", LOWTOK: 86, "87": "INTTOK", INTTOK: 87, "88": "FRACTOK", FRACTOK: 88, "89": "TRUNCTOK", TRUNCTOK: 89, "90": "ROUNDTOK", ROUNDTOK: 90, "91": "ODDTOK", ODDTOK: 91, "92": "PROGRAMTOK", PROGRAMTOK: 92, "93": "LIBRARYTOK", LIBRARYTOK: 93, "94": "EXPORTSTOK", EXPORTSTOK: 94, "95": "EXTERNALTOK", EXTERNALTOK: 95, "96": "INTERFACETOK", INTERFACETOK: 96, "97": "IMPLEMENTATIONTOK", IMPLEMENTATIONTOK: 97, "98": "INITIALIZATIONTOK", INITIALIZATIONTOK: 98, "99": "CONSTRUCTORTOK", CONSTRUCTORTOK: 99, "100": "DESTRUCTORTOK", DESTRUCTORTOK: 100, "101": "OVERLOADTOK", OVERLOADTOK: 101, "102": "ASSEMBLERTOK", ASSEMBLERTOK: 102, "103": "FORWARDTOK", FORWARDTOK: 103, "104": "REGISTERTOK", REGISTERTOK: 104, "105": "INTERRUPTTOK", INTERRUPTTOK: 105, "106": "PASCALTOK", PASCALTOK: 106, "107": "STDCALLTOK", STDCALLTOK: 107, "108": "INLINETOK", INLINETOK: 108, "109": "KEEPTOK", KEEPTOK: 109, "110": "SUCCTOK", SUCCTOK: 110, "111": "PREDTOK", PREDTOK: 111, "112": "PACKEDTOK", PACKEDTOK: 112, "113": "GOTOTOK", GOTOTOK: 113, "114": "INTOK", INTOK: 114, "115": "VOLATILETOK", VOLATILETOK: 115, "116": "STRIPEDTOK", STRIPEDTOK: 116, "117": "WITHTOK", WITHTOK: 117, "118": "RESERVED_118", RESERVED_118: 118, "119": "RESERVED_119", RESERVED_119: 119, "120": "RESERVED_120", RESERVED_120: 120, "121": "RESERVED_121", RESERVED_121: 121, "122": "RESERVED_122", RESERVED_122: 122, "123": "RESERVED_123", RESERVED_123: 123, "124": "RESERVED_124", RESERVED_124: 124, "125": "RESERVED_125", RESERVED_125: 125, "126": "RESERVED_126", RESERVED_126: 126, "127": "SETTOK", SETTOK: 127, "128": "BYTETOK", BYTETOK: 128, "129": "WORDTOK", WORDTOK: 129, "130": "CARDINALTOK", CARDINALTOK: 130, "131": "SHORTINTTOK", SHORTINTTOK: 131, "132": "SMALLINTTOK", SMALLINTTOK: 132, "133": "INTEGERTOK", INTEGERTOK: 133, "134": "CHARTOK", CHARTOK: 134, "135": "BOOLEANTOK", BOOLEANTOK: 135, "136": "POINTERTOK", POINTERTOK: 136, "137": "STRINGPOINTERTOK", STRINGPOINTERTOK: 137, "138": "FILETOK", FILETOK: 138, "139": "RECORDTOK", RECORDTOK: 139, "140": "OBJECTTOK", OBJECTTOK: 140, "141": "SHORTREALTOK", SHORTREALTOK: 141, "142": "REALTOK", REALTOK: 142, "143": "SINGLETOK", SINGLETOK: 143, "144": "HALFSINGLETOK", HALFSINGLETOK: 144, "145": "PCHARTOK", PCHARTOK: 145, "146": "ENUMTOK", ENUMTOK: 146, "147": "PROCVARTOK", PROCVARTOK: 147, "148": "TEXTFILETOK", TEXTFILETOK: 148, "149": "FORWARDTYPE", FORWARDTYPE: 149, "150": "SHORTSTRINGTOK", SHORTSTRINGTOK: 150, "151": "FLOATTOK", FLOATTOK: 151, "152": "FLOAT16TOK", FLOAT16TOK: 152, "153": "TEXTTOK", TEXTTOK: 153, "154": "DEREFERENCEARRAYTOK", DEREFERENCEARRAYTOK: 154, "155": "RESERVED_155", RESERVED_155: 155, "156": "RESERVED_156", RESERVED_156: 156, "157": "RESERVED_157", RESERVED_157: 157, "158": "RESERVED_158", RESERVED_158: 158, "159": "RESERVED_159", RESERVED_159: 159, "160": "DATAORIGINOFFSET", DATAORIGINOFFSET: 160, "161": "CODEORIGINOFFSET", CODEORIGINOFFSET: 161, "162": "IDENTTOK", IDENTTOK: 162, "163": "INTNUMBERTOK", INTNUMBERTOK: 163, "164": "FRACNUMBERTOK", FRACNUMBERTOK: 164, "165": "CHARLITERALTOK", CHARLITERALTOK: 165, "166": "STRINGLITERALTOK", STRINGLITERALTOK: 166, "167": "RESERVED_175", RESERVED_175: 167, "168": "RESERVED_176", RESERVED_176: 168, "169": "RESERVED_177", RESERVED_177: 169, "170": "RESERVED_178", RESERVED_178: 170, "171": "RESERVED_179", RESERVED_179: 171, "172": "RESERVED_180", RESERVED_180: 172, "173": "RESERVED_181", RESERVED_181: 173, "174": "RESERVED_182", RESERVED_182: 174, "175": "RESERVED_183", RESERVED_183: 175, "176": "EVALTOK", EVALTOK: 176, "177": "LOOPUNROLLTOK", LOOPUNROLLTOK: 177, "178": "NOLOOPUNROLLTOK", NOLOOPUNROLLTOK: 178, "179": "LINKTOK", LINKTOK: 179, "180": "MACRORELEASE", MACRORELEASE: 180, "181": "PROCALIGNTOK", PROCALIGNTOK: 181, "182": "LOOPALIGNTOK", LOOPALIGNTOK: 182, "183": "LINKALIGNTOK", LINKALIGNTOK: 183, "184": "INFOTOK", INFOTOK: 184, "185": "WARNINGTOK", WARNINGTOK: 185, "186": "ERRORTOK", ERRORTOK: 186, "187": "UNITBEGINTOK", UNITBEGINTOK: 187, "188": "UNITENDTOK", UNITENDTOK: 188, "189": "IOCHECKON", IOCHECKON: 189, "190": "IOCHECKOFF", IOCHECKOFF: 190, "191": "EOFTOK", EOFTOK: 191};
  this.GetTokenKindName = function (tokenKind) {
    var Result = "";
    Result = $mod.TTokenKind[tokenKind];
    return Result;
  };
  this.GetTokenSpelling = function (tokenKind) {
    var Result = "";
    Result = $impl.TokenSpellings[tokenKind].spelling;
    return Result;
  };
  this.GetHumanReadbleTokenSpelling = function (tokenKind) {
    var Result = "";
    if (tokenKind === $mod.TTokenKind.UNTYPETOK) {
      Result = "untyped token"}
     else if ((tokenKind > $mod.TTokenKind.UNTYPETOK) && (tokenKind < $mod.TTokenKind.IDENTTOK)) {
      Result = $mod.GetTokenSpelling(tokenKind)}
     else if (tokenKind === $mod.TTokenKind.IDENTTOK) {
      Result = "identifier"}
     else if ((tokenKind === $mod.TTokenKind.INTNUMBERTOK) || (tokenKind === $mod.TTokenKind.FRACNUMBERTOK)) {
      Result = "number"}
     else if ((tokenKind === $mod.TTokenKind.CHARLITERALTOK) || (tokenKind === $mod.TTokenKind.STRINGLITERALTOK)) {
      Result = "literal"}
     else if (tokenKind === $mod.TTokenKind.UNITENDTOK) {
      Result = "END"}
     else if (tokenKind === $mod.TTokenKind.EOFTOK) {
      Result = "end of file"}
     else Result = "unknown token";
    return Result;
  };
  this.InfoAboutToken = function (t) {
    var Result = "";
    var $tmp = t;
    if ($tmp === $mod.TTokenKind.EQTOK) {
      Result = "="}
     else if ($tmp === $mod.TTokenKind.NETOK) {
      Result = "<>"}
     else if ($tmp === $mod.TTokenKind.LTTOK) {
      Result = "<"}
     else if ($tmp === $mod.TTokenKind.LETOK) {
      Result = "<="}
     else if ($tmp === $mod.TTokenKind.GTTOK) {
      Result = ">"}
     else if ($tmp === $mod.TTokenKind.GETOK) {
      Result = ">="}
     else if ($tmp === $mod.TTokenKind.INTOK) {
      Result = "IN"}
     else if ($tmp === $mod.TTokenKind.DOTTOK) {
      Result = "."}
     else if ($tmp === $mod.TTokenKind.COMMATOK) {
      Result = ","}
     else if ($tmp === $mod.TTokenKind.SEMICOLONTOK) {
      Result = ";"}
     else if ($tmp === $mod.TTokenKind.OPARTOK) {
      Result = "("}
     else if ($tmp === $mod.TTokenKind.CPARTOK) {
      Result = ")"}
     else if ($tmp === $mod.TTokenKind.DEREFERENCETOK) {
      Result = "^"}
     else if ($tmp === $mod.TTokenKind.ADDRESSTOK) {
      Result = "@"}
     else if ($tmp === $mod.TTokenKind.OBRACKETTOK) {
      Result = "["}
     else if ($tmp === $mod.TTokenKind.CBRACKETTOK) {
      Result = "]"}
     else if ($tmp === $mod.TTokenKind.COLONTOK) {
      Result = ":"}
     else if ($tmp === $mod.TTokenKind.PLUSTOK) {
      Result = "+"}
     else if ($tmp === $mod.TTokenKind.MINUSTOK) {
      Result = "-"}
     else if ($tmp === $mod.TTokenKind.MULTOK) {
      Result = "*"}
     else if ($tmp === $mod.TTokenKind.DIVTOK) {
      Result = "/"}
     else if ($tmp === $mod.TTokenKind.IDIVTOK) {
      Result = "DIV"}
     else if ($tmp === $mod.TTokenKind.MODTOK) {
      Result = "MOD"}
     else if ($tmp === $mod.TTokenKind.SHLTOK) {
      Result = "SHL"}
     else if ($tmp === $mod.TTokenKind.SHRTOK) {
      Result = "SHR"}
     else if ($tmp === $mod.TTokenKind.ORTOK) {
      Result = "OR"}
     else if ($tmp === $mod.TTokenKind.XORTOK) {
      Result = "XOR"}
     else if ($tmp === $mod.TTokenKind.ANDTOK) {
      Result = "AND"}
     else if ($tmp === $mod.TTokenKind.NOTTOK) {
      Result = "NOT"}
     else if ($tmp === $mod.TTokenKind.CONSTTOK) {
      Result = "CONST"}
     else if ($tmp === $mod.TTokenKind.TYPETOK) {
      Result = "TYPE"}
     else if ($tmp === $mod.TTokenKind.VARTOK) {
      Result = "VARIABLE"}
     else if ($tmp === $mod.TTokenKind.PROCEDURETOK) {
      Result = "PROCEDURE"}
     else if ($tmp === $mod.TTokenKind.FUNCTIONTOK) {
      Result = "FUNCTION"}
     else if ($tmp === $mod.TTokenKind.CONSTRUCTORTOK) {
      Result = "CONSTRUCTOR"}
     else if ($tmp === $mod.TTokenKind.DESTRUCTORTOK) {
      Result = "DESTRUCTOR"}
     else if ($tmp === $mod.TTokenKind.LABELTOK) {
      Result = "LABEL"}
     else if ($tmp === $mod.TTokenKind.UNITTOK) {
      Result = "UNIT"}
     else if ($tmp === $mod.TTokenKind.ENUMTOK) {
      Result = "ENUM"}
     else if ($tmp === $mod.TTokenKind.RECORDTOK) {
      Result = "RECORD"}
     else if ($tmp === $mod.TTokenKind.OBJECTTOK) {
      Result = "OBJECT"}
     else if ($tmp === $mod.TTokenKind.BYTETOK) {
      Result = "BYTE"}
     else if ($tmp === $mod.TTokenKind.SHORTINTTOK) {
      Result = "SHORTINT"}
     else if ($tmp === $mod.TTokenKind.CHARTOK) {
      Result = "CHAR"}
     else if ($tmp === $mod.TTokenKind.BOOLEANTOK) {
      Result = "BOOLEAN"}
     else if ($tmp === $mod.TTokenKind.WORDTOK) {
      Result = "WORD"}
     else if ($tmp === $mod.TTokenKind.SMALLINTTOK) {
      Result = "SMALLINT"}
     else if ($tmp === $mod.TTokenKind.CARDINALTOK) {
      Result = "CARDINAL"}
     else if ($tmp === $mod.TTokenKind.INTEGERTOK) {
      Result = "INTEGER"}
     else if (($tmp === $mod.TTokenKind.POINTERTOK) || ($tmp === $mod.TTokenKind.DATAORIGINOFFSET) || ($tmp === $mod.TTokenKind.CODEORIGINOFFSET)) {
      Result = "POINTER"}
     else if ($tmp === $mod.TTokenKind.PROCVARTOK) {
      Result = "<Procedure Variable>"}
     else if ($tmp === $mod.TTokenKind.STRINGPOINTERTOK) {
      Result = "STRING"}
     else if ($tmp === $mod.TTokenKind.STRINGLITERALTOK) {
      Result = "literal"}
     else if ($tmp === $mod.TTokenKind.SHORTREALTOK) {
      Result = "SHORTREAL"}
     else if ($tmp === $mod.TTokenKind.REALTOK) {
      Result = "REAL"}
     else if ($tmp === $mod.TTokenKind.SINGLETOK) {
      Result = "SINGLE"}
     else if ($tmp === $mod.TTokenKind.HALFSINGLETOK) {
      Result = "FLOAT16"}
     else if ($tmp === $mod.TTokenKind.SETTOK) {
      Result = "SET"}
     else if ($tmp === $mod.TTokenKind.FILETOK) {
      Result = "FILE"}
     else if ($tmp === $mod.TTokenKind.TEXTFILETOK) {
      Result = "TEXTFILE"}
     else if ($tmp === $mod.TTokenKind.PCHARTOK) {
      Result = "PCHAR"}
     else if ($tmp === $mod.TTokenKind.REGISTERTOK) {
      Result = "REGISTER"}
     else if ($tmp === $mod.TTokenKind.PASCALTOK) {
      Result = "PASCAL"}
     else if ($tmp === $mod.TTokenKind.STDCALLTOK) {
      Result = "STDCALL"}
     else if ($tmp === $mod.TTokenKind.INLINETOK) {
      Result = "INLINE"}
     else if ($tmp === $mod.TTokenKind.ASMTOK) {
      Result = "ASM"}
     else if ($tmp === $mod.TTokenKind.INTERRUPTTOK) {
      Result = "INTERRUPT"}
     else {
      Result = "UNTYPED";
    };
    return Result;
  };
  this.GetStandardToken = function (S) {
    var Result = 0;
    var i = 0;
    Result = $mod.TTokenKind.UNTYPETOK;
    if ((S === "LONGWORD") || (S === "DWORD") || (S === "UINT32")) {
      S = "CARDINAL"}
     else if (S === "UINT16") {
      S = "WORD"}
     else if (S === "LONGINT") S = "INTEGER";
    for (i = 0; i <= 191; i++) if (S === $impl.TokenSpellings[i].spelling) {
      Result = $impl.TokenSpellings[i].tokenKind;
      break;
    };
    return Result;
  };
  $mod.$implcode = function () {
    rtl.recNewT($impl,"TTokenSpelling",function () {
      this.tokenKind = 0;
      this.spelling = "";
      this.$eq = function (b) {
        return (this.tokenKind === b.tokenKind) && (this.spelling === b.spelling);
      };
      this.$assign = function (s) {
        this.tokenKind = s.tokenKind;
        this.spelling = s.spelling;
        return this;
      };
    });
    $impl.TokenSpellings$a$clone = function (a) {
      var b = [];
      b.length = 192;
      for (var c = 0; c < 192; c++) b[c] = $impl.TTokenSpelling.$clone(a[c]);
      return b;
    };
    $impl.TokenSpellings = rtl.arraySetLength(null,$impl.TTokenSpelling,192);
    $impl.AddTokenSpelling = function (t, s) {
      var tokenSpelling = $impl.TTokenSpelling.$new();
      tokenSpelling.tokenKind = t;
      tokenSpelling.spelling = s;
      $impl.TokenSpellings[tokenSpelling.tokenKind].$assign(tokenSpelling);
    };
    $impl.InitializeTokenSpellings = function () {
      $impl.AddTokenSpelling($mod.TTokenKind.CONSTTOK,"CONST");
      $impl.AddTokenSpelling($mod.TTokenKind.TYPETOK,"TYPE");
      $impl.AddTokenSpelling($mod.TTokenKind.VARTOK,"VAR");
      $impl.AddTokenSpelling($mod.TTokenKind.PROCEDURETOK,"PROCEDURE");
      $impl.AddTokenSpelling($mod.TTokenKind.FUNCTIONTOK,"FUNCTION");
      $impl.AddTokenSpelling($mod.TTokenKind.OBJECTTOK,"OBJECT");
      $impl.AddTokenSpelling($mod.TTokenKind.PROGRAMTOK,"PROGRAM");
      $impl.AddTokenSpelling($mod.TTokenKind.LIBRARYTOK,"LIBRARY");
      $impl.AddTokenSpelling($mod.TTokenKind.EXPORTSTOK,"EXPORTS");
      $impl.AddTokenSpelling($mod.TTokenKind.EXTERNALTOK,"EXTERNAL");
      $impl.AddTokenSpelling($mod.TTokenKind.UNITTOK,"UNIT");
      $impl.AddTokenSpelling($mod.TTokenKind.INTERFACETOK,"INTERFACE");
      $impl.AddTokenSpelling($mod.TTokenKind.IMPLEMENTATIONTOK,"IMPLEMENTATION");
      $impl.AddTokenSpelling($mod.TTokenKind.INITIALIZATIONTOK,"INITIALIZATION");
      $impl.AddTokenSpelling($mod.TTokenKind.CONSTRUCTORTOK,"CONSTRUCTOR");
      $impl.AddTokenSpelling($mod.TTokenKind.DESTRUCTORTOK,"DESTRUCTOR");
      $impl.AddTokenSpelling($mod.TTokenKind.OVERLOADTOK,"OVERLOAD");
      $impl.AddTokenSpelling($mod.TTokenKind.ASSEMBLERTOK,"ASSEMBLER");
      $impl.AddTokenSpelling($mod.TTokenKind.FORWARDTOK,"FORWARD");
      $impl.AddTokenSpelling($mod.TTokenKind.REGISTERTOK,"REGISTER");
      $impl.AddTokenSpelling($mod.TTokenKind.INTERRUPTTOK,"INTERRUPT");
      $impl.AddTokenSpelling($mod.TTokenKind.PASCALTOK,"PASCAL");
      $impl.AddTokenSpelling($mod.TTokenKind.STDCALLTOK,"STDCALL");
      $impl.AddTokenSpelling($mod.TTokenKind.INLINETOK,"INLINE");
      $impl.AddTokenSpelling($mod.TTokenKind.KEEPTOK,"KEEP");
      $impl.AddTokenSpelling($mod.TTokenKind.ASSIGNFILETOK,"ASSIGN");
      $impl.AddTokenSpelling($mod.TTokenKind.RESETTOK,"RESET");
      $impl.AddTokenSpelling($mod.TTokenKind.REWRITETOK,"REWRITE");
      $impl.AddTokenSpelling($mod.TTokenKind.APPENDTOK,"APPEND");
      $impl.AddTokenSpelling($mod.TTokenKind.BLOCKREADTOK,"BLOCKREAD");
      $impl.AddTokenSpelling($mod.TTokenKind.BLOCKWRITETOK,"BLOCKWRITE");
      $impl.AddTokenSpelling($mod.TTokenKind.CLOSEFILETOK,"CLOSE");
      $impl.AddTokenSpelling($mod.TTokenKind.GETRESOURCEHANDLETOK,"GETRESOURCEHANDLE");
      $impl.AddTokenSpelling($mod.TTokenKind.SIZEOFRESOURCETOK,"SIZEOFRESOURCE");
      $impl.AddTokenSpelling($mod.TTokenKind.FILETOK,"FILE");
      $impl.AddTokenSpelling($mod.TTokenKind.TEXTFILETOK,"TEXTFILE");
      $impl.AddTokenSpelling($mod.TTokenKind.SETTOK,"SET");
      $impl.AddTokenSpelling($mod.TTokenKind.PACKEDTOK,"PACKED");
      $impl.AddTokenSpelling($mod.TTokenKind.VOLATILETOK,"VOLATILE");
      $impl.AddTokenSpelling($mod.TTokenKind.STRIPEDTOK,"STRIPED");
      $impl.AddTokenSpelling($mod.TTokenKind.WITHTOK,"WITH");
      $impl.AddTokenSpelling($mod.TTokenKind.LABELTOK,"LABEL");
      $impl.AddTokenSpelling($mod.TTokenKind.GOTOTOK,"GOTO");
      $impl.AddTokenSpelling($mod.TTokenKind.INTOK,"IN");
      $impl.AddTokenSpelling($mod.TTokenKind.RECORDTOK,"RECORD");
      $impl.AddTokenSpelling($mod.TTokenKind.CASETOK,"CASE");
      $impl.AddTokenSpelling($mod.TTokenKind.BEGINTOK,"BEGIN");
      $impl.AddTokenSpelling($mod.TTokenKind.ENDTOK,"END");
      $impl.AddTokenSpelling($mod.TTokenKind.IFTOK,"IF");
      $impl.AddTokenSpelling($mod.TTokenKind.THENTOK,"THEN");
      $impl.AddTokenSpelling($mod.TTokenKind.ELSETOK,"ELSE");
      $impl.AddTokenSpelling($mod.TTokenKind.WHILETOK,"WHILE");
      $impl.AddTokenSpelling($mod.TTokenKind.DOTOK,"DO");
      $impl.AddTokenSpelling($mod.TTokenKind.REPEATTOK,"REPEAT");
      $impl.AddTokenSpelling($mod.TTokenKind.UNTILTOK,"UNTIL");
      $impl.AddTokenSpelling($mod.TTokenKind.FORTOK,"FOR");
      $impl.AddTokenSpelling($mod.TTokenKind.TOTOK,"TO");
      $impl.AddTokenSpelling($mod.TTokenKind.DOWNTOTOK,"DOWNTO");
      $impl.AddTokenSpelling($mod.TTokenKind.ASSIGNTOK,":=");
      $impl.AddTokenSpelling($mod.TTokenKind.WRITETOK,"WRITE");
      $impl.AddTokenSpelling($mod.TTokenKind.WRITELNTOK,"WRITELN");
      $impl.AddTokenSpelling($mod.TTokenKind.SIZEOFTOK,"SIZEOF");
      $impl.AddTokenSpelling($mod.TTokenKind.LENGTHTOK,"LENGTH");
      $impl.AddTokenSpelling($mod.TTokenKind.HIGHTOK,"HIGH");
      $impl.AddTokenSpelling($mod.TTokenKind.LOWTOK,"LOW");
      $impl.AddTokenSpelling($mod.TTokenKind.INTTOK,"INT");
      $impl.AddTokenSpelling($mod.TTokenKind.FRACTOK,"FRAC");
      $impl.AddTokenSpelling($mod.TTokenKind.TRUNCTOK,"TRUNC");
      $impl.AddTokenSpelling($mod.TTokenKind.ROUNDTOK,"ROUND");
      $impl.AddTokenSpelling($mod.TTokenKind.ODDTOK,"ODD");
      $impl.AddTokenSpelling($mod.TTokenKind.READLNTOK,"READLN");
      $impl.AddTokenSpelling($mod.TTokenKind.HALTTOK,"HALT");
      $impl.AddTokenSpelling($mod.TTokenKind.BREAKTOK,"BREAK");
      $impl.AddTokenSpelling($mod.TTokenKind.CONTINUETOK,"CONTINUE");
      $impl.AddTokenSpelling($mod.TTokenKind.EXITTOK,"EXIT");
      $impl.AddTokenSpelling($mod.TTokenKind.SUCCTOK,"SUCC");
      $impl.AddTokenSpelling($mod.TTokenKind.PREDTOK,"PRED");
      $impl.AddTokenSpelling($mod.TTokenKind.INCTOK,"INC");
      $impl.AddTokenSpelling($mod.TTokenKind.DECTOK,"DEC");
      $impl.AddTokenSpelling($mod.TTokenKind.ORDTOK,"ORD");
      $impl.AddTokenSpelling($mod.TTokenKind.CHRTOK,"CHR");
      $impl.AddTokenSpelling($mod.TTokenKind.ASMTOK,"ASM");
      $impl.AddTokenSpelling($mod.TTokenKind.ABSOLUTETOK,"ABSOLUTE");
      $impl.AddTokenSpelling($mod.TTokenKind.USESTOK,"USES");
      $impl.AddTokenSpelling($mod.TTokenKind.LOTOK,"LO");
      $impl.AddTokenSpelling($mod.TTokenKind.HITOK,"HI");
      $impl.AddTokenSpelling($mod.TTokenKind.GETINTVECTOK,"GETINTVEC");
      $impl.AddTokenSpelling($mod.TTokenKind.SETINTVECTOK,"SETINTVEC");
      $impl.AddTokenSpelling($mod.TTokenKind.ARRAYTOK,"ARRAY");
      $impl.AddTokenSpelling($mod.TTokenKind.OFTOK,"OF");
      $impl.AddTokenSpelling($mod.TTokenKind.STRINGTOK,"STRING");
      $impl.AddTokenSpelling($mod.TTokenKind.RANGETOK,"..");
      $impl.AddTokenSpelling($mod.TTokenKind.EQTOK,"=");
      $impl.AddTokenSpelling($mod.TTokenKind.NETOK,"<>");
      $impl.AddTokenSpelling($mod.TTokenKind.LTTOK,"<");
      $impl.AddTokenSpelling($mod.TTokenKind.LETOK,"<=");
      $impl.AddTokenSpelling($mod.TTokenKind.GTTOK,">");
      $impl.AddTokenSpelling($mod.TTokenKind.GETOK,">=");
      $impl.AddTokenSpelling($mod.TTokenKind.DOTTOK,".");
      $impl.AddTokenSpelling($mod.TTokenKind.COMMATOK,",");
      $impl.AddTokenSpelling($mod.TTokenKind.SEMICOLONTOK,";");
      $impl.AddTokenSpelling($mod.TTokenKind.OPARTOK,"(");
      $impl.AddTokenSpelling($mod.TTokenKind.CPARTOK,")");
      $impl.AddTokenSpelling($mod.TTokenKind.DEREFERENCETOK,"^");
      $impl.AddTokenSpelling($mod.TTokenKind.ADDRESSTOK,"@");
      $impl.AddTokenSpelling($mod.TTokenKind.OBRACKETTOK,"[");
      $impl.AddTokenSpelling($mod.TTokenKind.CBRACKETTOK,"]");
      $impl.AddTokenSpelling($mod.TTokenKind.COLONTOK,":");
      $impl.AddTokenSpelling($mod.TTokenKind.PLUSTOK,"+");
      $impl.AddTokenSpelling($mod.TTokenKind.MINUSTOK,"-");
      $impl.AddTokenSpelling($mod.TTokenKind.MULTOK,"*");
      $impl.AddTokenSpelling($mod.TTokenKind.DIVTOK,"/");
      $impl.AddTokenSpelling($mod.TTokenKind.IDIVTOK,"DIV");
      $impl.AddTokenSpelling($mod.TTokenKind.MODTOK,"MOD");
      $impl.AddTokenSpelling($mod.TTokenKind.SHLTOK,"SHL");
      $impl.AddTokenSpelling($mod.TTokenKind.SHRTOK,"SHR");
      $impl.AddTokenSpelling($mod.TTokenKind.ORTOK,"OR");
      $impl.AddTokenSpelling($mod.TTokenKind.XORTOK,"XOR");
      $impl.AddTokenSpelling($mod.TTokenKind.ANDTOK,"AND");
      $impl.AddTokenSpelling($mod.TTokenKind.NOTTOK,"NOT");
      $impl.AddTokenSpelling($mod.TTokenKind.INTEGERTOK,"INTEGER");
      $impl.AddTokenSpelling($mod.TTokenKind.CARDINALTOK,"CARDINAL");
      $impl.AddTokenSpelling($mod.TTokenKind.SMALLINTTOK,"SMALLINT");
      $impl.AddTokenSpelling($mod.TTokenKind.SHORTINTTOK,"SHORTINT");
      $impl.AddTokenSpelling($mod.TTokenKind.WORDTOK,"WORD");
      $impl.AddTokenSpelling($mod.TTokenKind.BYTETOK,"BYTE");
      $impl.AddTokenSpelling($mod.TTokenKind.CHARTOK,"CHAR");
      $impl.AddTokenSpelling($mod.TTokenKind.BOOLEANTOK,"BOOLEAN");
      $impl.AddTokenSpelling($mod.TTokenKind.POINTERTOK,"POINTER");
      $impl.AddTokenSpelling($mod.TTokenKind.SHORTREALTOK,"SHORTREAL");
      $impl.AddTokenSpelling($mod.TTokenKind.REALTOK,"REAL");
      $impl.AddTokenSpelling($mod.TTokenKind.SINGLETOK,"SINGLE");
      $impl.AddTokenSpelling($mod.TTokenKind.HALFSINGLETOK,"FLOAT16");
      $impl.AddTokenSpelling($mod.TTokenKind.PCHARTOK,"PCHAR");
      $impl.AddTokenSpelling($mod.TTokenKind.SHORTSTRINGTOK,"SHORTSTRING");
      $impl.AddTokenSpelling($mod.TTokenKind.FLOATTOK,"FLOAT");
      $impl.AddTokenSpelling($mod.TTokenKind.TEXTTOK,"TEXT");
    };
    $impl.AssertTokenOrd = function (tokenKind, Value) {
    };
    $impl.AssertTokensOrd = function () {
      var tokenKind = 0;
      for (tokenKind = 0; tokenKind <= 191; tokenKind++) ;
      $impl.AssertTokenOrd($mod.TTokenKind.UNTYPETOK,0);
      $impl.AssertTokenOrd($mod.TTokenKind.CONSTTOK,1);
      $impl.AssertTokenOrd($mod.TTokenKind.TYPETOK,2);
      $impl.AssertTokenOrd($mod.TTokenKind.VARTOK,3);
      $impl.AssertTokenOrd($mod.TTokenKind.PROCEDURETOK,4);
      $impl.AssertTokenOrd($mod.TTokenKind.FUNCTIONTOK,5);
      $impl.AssertTokenOrd($mod.TTokenKind.LABELTOK,6);
      $impl.AssertTokenOrd($mod.TTokenKind.UNITTOK,7);
    };
  };
  $mod.$init = function () {
    $impl.InitializeTokenSpellings();
    $impl.AssertTokensOrd();
  };
},["SysUtils"]);
rtl.module("Datatypes",["System","CommonTypes","Tokens"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.UnsignedOrdinalTypes = rtl.createSet(pas.Tokens.TTokenKind.BYTETOK,pas.Tokens.TTokenKind.WORDTOK,pas.Tokens.TTokenKind.CARDINALTOK);
  this.SignedOrdinalTypes = rtl.createSet(pas.Tokens.TTokenKind.SHORTINTTOK,pas.Tokens.TTokenKind.SMALLINTTOK,pas.Tokens.TTokenKind.INTEGERTOK);
  this.RealTypes = rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK);
  this.IntegerTypes = rtl.unionSet(this.UnsignedOrdinalTypes,this.SignedOrdinalTypes);
  this.OrdinalTypes = rtl.unionSet(this.IntegerTypes,rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BOOLEANTOK,pas.Tokens.TTokenKind.ENUMTOK));
  this.Pointers = rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.PROCVARTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.PCHARTOK);
  this.AllTypes = rtl.unionSet(rtl.unionSet(this.OrdinalTypes,this.RealTypes),this.Pointers);
  this.StringTypes = rtl.createSet(pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.STRINGLITERALTOK,pas.Tokens.TTokenKind.PCHARTOK);
  this.GetDataSize = function (dataType) {
    var Result = 0;
    var index = 0;
    index = dataType;
    if (dataType === pas.Tokens.TTokenKind.UNTYPETOK) {
      Result = 0;
    } else if ((index >= 128) && (index <= 149)) {
      Result = $impl._DataSize[index - 128];
    } else {
      Result = 0;
    };
    return Result;
  };
  this.GetValueType = function (Value) {
    var Result = 0;
    if (Value < 0) {
      if (Value >= -128) {
        Result = pas.Tokens.TTokenKind.SHORTINTTOK}
       else if (Value >= -32768) {
        Result = pas.Tokens.TTokenKind.SMALLINTTOK}
       else Result = pas.Tokens.TTokenKind.INTEGERTOK;
    } else {
      var $tmp = Value;
      if (($tmp >= 0) && ($tmp <= 255)) {
        Result = pas.Tokens.TTokenKind.BYTETOK}
       else if (($tmp >= 256) && ($tmp <= 0xFFFF)) {
        Result = pas.Tokens.TTokenKind.WORDTOK}
       else {
        Result = pas.Tokens.TTokenKind.CARDINALTOK;
      };
    };
    return Result;
  };
  $mod.$implcode = function () {
    $impl._DataSize = [1,2,4,1,2,4,1,1,2,2,2,2,2,2,4,4,2,2,4,2,2,2];
  };
},[]);
rtl.module("FileIO",["System","SysUtils","CommonTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass(this,"TPathList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.paths = [];
    };
    this.$final = function () {
      this.paths = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.paths = [];
      this.paths = rtl.arraySetLength(this.paths,"",0);
      return this;
    };
    this.AddFolder = function (folderPath) {
      var i = 0;
      var size = 0;
      folderPath = pas.SysUtils.IncludeTrailingPathDelimiter(folderPath);
      folderPath = $mod.TFileSystem.NormalizePath(folderPath);
      for (var $l = 0, $end = rtl.length(this.paths) - 1; $l <= $end; $l++) {
        i = $l;
        if (rtl.rcArrR(this.paths,i) === folderPath) return;
      };
      size = rtl.rc(this.GetSize(),-2147483648,2147483647);
      size += 1;
      this.paths = rtl.arraySetLength(this.paths,"",size);
      rtl.rcArrW(this.paths,size - 1,pas.SysUtils.IncludeTrailingPathDelimiter(folderPath));
    };
    this.FindFile = function (filePath) {
      var Result = "";
      var i = 0;
      Result = $mod.TFileSystem.NormalizePath(filePath);
      if ($mod.TFileSystem.FileExists_(Result)) return Result;
      for (var $l = 0, $end = rtl.length(this.paths) - 1; $l <= $end; $l++) {
        i = $l;
        Result = $mod.TFileSystem.NormalizePath(rtl.rcArrR(this.paths,i) + filePath);
        if ($mod.TFileSystem.FileExists_(Result)) return Result;
      };
      Result = "";
      return Result;
    };
    this.GetSize = function () {
      var Result = 0;
      Result = rtl.rc((rtl.length(this.paths) - 1) + 1,-2147483648,2147483647);
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      var i = 0;
      Result = "";
      for (var $l = 0, $end = rtl.length(this.paths) - 1; $l <= $end; $l++) {
        i = $l;
        if (Result === "") {
          Result = rtl.rcArrR(this.paths,i)}
         else Result = Result + ";" + rtl.rcArrR(this.paths,i);
      };
      return Result;
    };
  });
  rtl.createInterface(this,"IFile","{35D2A2EC-DF37-3B53-8769-9E0263FA3066}",["GetAbsoluteFilePath","Assign","Close","Erase","EOF","Reset","Rewrite"],pas.System.IUnknown);
  rtl.createInterface(this,"IBinaryFile","{75A4C54E-8222-325E-8FA9-89EB09209EF5}",["BlockRead","FilePos","Read","Reset$1","Seek2"],this.IFile);
  rtl.createInterface(this,"ITextFile","{F6338405-DD2C-300D-BC52-0D29041A2986}",["Flush","ReadLn","Write","Write$1","Write$2","WriteLn","WriteLn$1","WriteLn$2"],this.IFile);
  rtl.createClass(this,"TFileMapEntry",pas.System.TObject,function () {
    this.TFileType = {"0": "TextFile", TextFile: 0, "1": "BinaryFile", BinaryFile: 1, "2": "Folder", Folder: 2};
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.filePath = "";
      this.fileType = 0;
      this.content = "";
    };
  });
  rtl.createClass(this,"TFileMap",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.entries = [];
    };
    this.$final = function () {
      this.entries = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.entries = rtl.arraySetLength(this.entries,null,0);
      return this;
    };
    this.AddEntry = function (filePath, fileType) {
      rtl.rc(fileType,0,2);
      var Result = null;
      var entry = null;
      entry = this.GetEntry(filePath);
      if (!(entry === null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Entry with file path '" + filePath + "' is already in the file map."]);
      entry = $mod.TFileMapEntry.$create("Create");
      entry.filePath = filePath;
      entry.fileType = rtl.rc(fileType,0,2);
      this.entries = rtl.arraySetLength(this.entries,null,rtl.length(this.entries) + 1);
      rtl.rcArrW(this.entries,rtl.length(this.entries) - 1,entry);
      Result = entry;
      return Result;
    };
    this.GetEntry = function (filePath) {
      var Result = null;
      var i = 0;
      Result = null;
      if (rtl.length(this.entries) > 0) {
        for (var $l = 0, $end = rtl.length(this.entries) - 1; $l <= $end; $l++) {
          i = $l;
          if (rtl.rcArrR(this.entries,i).filePath === filePath) {
            Result = rtl.rcArrR(this.entries,i);
            return Result;
          };
        };
      };
      return Result;
    };
    this.RemoveEntry = function (filePath) {
      var i = 0;
      for (var $l = 0, $end = rtl.length(this.entries) - 1; $l <= $end; $l++) {
        i = $l;
        if (rtl.rcArrR(this.entries,i).filePath === filePath) {
          this.entries.splice(i,1);
          return;
        };
      };
    };
  });
  rtl.createClass(this,"TFileSystem",pas.System.TObject,function () {
    this.PathDelim = "/";
    this.CreateBinaryFile = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,rtl.queryIntfT($impl.TBinaryFile.$create("Create$2"),$mod.IBinaryFile),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.CreateTextFile = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,rtl.queryIntfT($impl.TTextFile.$create("Create$2"),$mod.ITextFile),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.FileExists_ = function (filePath) {
      var Result = false;
      Result = $impl.fileMap.GetEntry(filePath) !== null;
      return Result;
    };
    this.FolderExists = function (folderPath) {
      var Result = false;
      Result = $impl.fileMap.GetEntry(folderPath) !== null;
      return Result;
    };
    this.NormalizePath = function (filePath) {
      var Result = "";
      Result = filePath;
      if (pas.System.Pos("\\",filePath) > 0) {
        Result = pas.SysUtils.StringReplace(filePath,"\\","/",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      };
      return Result;
    };
    this.GetAbsolutePath = function (filePath) {
      var Result = "";
      Result = filePath;
      return Result;
    };
    this.GetFileMap = function () {
      var Result = null;
      Result = $impl.fileMap;
      return Result;
    };
  });
  $mod.$implcode = function () {
    $impl.fileMap = null;
    rtl.createClass($impl,"TFile",pas.System.TInterfacedObject,function () {
      this.TFileMode = {"0": "Read", Read: 0, "1": "Write", Write: 1};
      this.$init = function () {
        pas.System.TInterfacedObject.$init.call(this);
        this.filePath = "";
      };
      this.Create$1 = function () {
        this.filePath = "";
        return this;
      };
      this.GetAbsoluteFilePath = function () {
        var Result = "";
        Result = $mod.TFileSystem.GetAbsolutePath(this.filePath);
        return Result;
      };
      rtl.addIntf(this,$mod.IFile);
      rtl.addIntf(this,pas.System.IUnknown);
    });
    rtl.createClass($impl,"TTextFile",$impl.TFile,function () {
      this.$init = function () {
        $impl.TFile.$init.call(this);
        this.fileMapEntry = null;
        this.fileMode = 0;
        this.filePosition = 0;
      };
      this.$final = function () {
        this.fileMapEntry = undefined;
        $impl.TFile.$final.call(this);
      };
      this.Create$2 = function () {
        $impl.TFile.Create$1.call(this);
        this.Close();
        return this;
      };
      this.Assign = function (filePath) {
        this.filePath = filePath;
      };
      this.Close = function () {
        this.fileMapEntry = null;
        this.fileMode = rtl.rc($impl.TFile.TFileMode.Read,0,1);
        this.filePosition = rtl.rc(-1,-2147483648,2147483647);
      };
      this.Erase = function () {
        $impl.fileMap.RemoveEntry(this.filePath);
      };
      this.EOF = function () {
        var Result = false;
        Result = pas.SysUtils.TStringHelper.GetLength.call({p: this.fileMapEntry, get: function () {
            return this.p.content;
          }, set: function (v) {
            this.p.content = v;
          }}) === this.filePosition;
        return Result;
      };
      this.Flush = function () {
      };
      this.ReadLn = function (s) {
        if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Not Implemented yet"]);
      };
      this.Reset = function () {
        this.fileMapEntry = $impl.fileMap.GetEntry(this.filePath);
        this.fileMode = rtl.rc($impl.TFile.TFileMode.Read,0,1);
        this.filePosition = 0;
      };
      this.Rewrite = function () {
        this.fileMapEntry = $impl.fileMap.GetEntry(this.filePath);
        if (this.fileMapEntry === null) {
          this.fileMapEntry = $impl.fileMap.AddEntry(this.filePath,$mod.TFileMapEntry.TFileType.TextFile);
        };
        this.fileMode = rtl.rc($impl.TFile.TFileMode.Write,0,1);
        this.filePosition = 0;
      };
      this.Write = function (s) {
        var Result = null;
        var $ok = false;
        try {
          if (!(this.fileMapEntry !== null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["File '" + this.filePath + "' has no file map entry assigned."]);
          if (!(this.fileMode === $impl.TFile.TFileMode.Write)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["File '" + this.filePath + "' is not opened for writing."]);
          this.fileMapEntry.content = this.fileMapEntry.content + s;
          this.filePosition = rtl.rc(this.filePosition + s.length,-2147483648,2147483647);
          Result = rtl.setIntfL(Result,rtl.queryIntfT(this,$mod.ITextFile),true);
          $ok = true;
        } finally {
          if (!$ok) rtl._Release(Result);
        };
        return Result;
      };
      this.Write$1 = function (s, w) {
        rtl.rc(w,-2147483648,2147483647);
        var Result = null;
        var sFormatted = "";
        var $ir = rtl.createIntfRefs();
        var $ok = false;
        try {
          sFormatted = s;
          $ir.ref(1,this.Write(sFormatted));
          Result = rtl.setIntfL(Result,rtl.queryIntfT(this,$mod.ITextFile),true);
          $ok = true;
        } finally {
          $ir.free();
          if (!$ok) rtl._Release(Result);
        };
        return Result;
      };
      this.Write$2 = function (i, w) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(w,-2147483648,2147483647);
        var Result = null;
        var sFormatted = "";
        var $ir = rtl.createIntfRefs();
        var $ok = false;
        try {
          sFormatted = pas.SysUtils.IntToStr(i);
          $ir.ref(1,this.Write$1(sFormatted,w));
          Result = rtl.setIntfL(Result,rtl.queryIntfT(this,$mod.ITextFile),true);
          $ok = true;
        } finally {
          $ir.free();
          if (!$ok) rtl._Release(Result);
        };
        return Result;
      };
      this.WriteLn = function () {
        var $ir = rtl.createIntfRefs();
        try {
          $ir.ref(1,this.Write(pas.System.LineEnding));
        } finally {
          $ir.free();
        };
      };
      this.WriteLn$1 = function (s) {
        var $ir = rtl.createIntfRefs();
        try {
          $ir.ref(1,this.Write(s));
          this.WriteLn();
        } finally {
          $ir.free();
        };
      };
      this.WriteLn$2 = function (s1, s2) {
        var $ir = rtl.createIntfRefs();
        try {
          $ir.ref(1,this.Write(s1));
          $ir.ref(2,this.Write(s2));
          this.WriteLn();
        } finally {
          $ir.free();
        };
      };
      rtl.addIntf(this,$mod.ITextFile);
      rtl.addIntf(this,$mod.IFile);
      rtl.addIntf(this,pas.System.IUnknown);
    });
    rtl.createClass($impl,"TBinaryFile",$impl.TFile,function () {
      this.$init = function () {
        $impl.TFile.$init.call(this);
        this.fileMapEntry = null;
        this.fileMode = 0;
        this.filePosition = 0;
      };
      this.$final = function () {
        this.fileMapEntry = undefined;
        $impl.TFile.$final.call(this);
      };
      this.Create$2 = function () {
        $impl.TFile.Create$1.call(this);
        this.Close();
        return this;
      };
      this.Assign = function (filePath) {
        this.filePath = filePath;
        this.Close();
      };
      this.BlockRead = function (Buf, Count, Result) {
        rtl.rc(Count,-2147483648,2147483647);
        rtl.rc(Result.get(),-2147483648,2147483647);
        if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Not implemented yet"]);
      };
      this.Close = function () {
        this.fileMapEntry = null;
        this.fileMode = rtl.rc($impl.TFile.TFileMode.Read,0,1);
        this.filePosition = rtl.rc(-1,-2147483648,2147483647);
      };
      this.Erase = function () {
        if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Not implemented yet."]);
      };
      this.EOF = function () {
        var Result = false;
        Result = pas.SysUtils.TStringHelper.GetLength.call({p: this.fileMapEntry, get: function () {
            return this.p.content;
          }, set: function (v) {
            this.p.content = v;
          }}) === this.FilePos();
        return Result;
      };
      this.FilePos = function () {
        var Result = 0;
        Result = rtl.rc(this.filePosition,-2147483648,2147483647);
        return Result;
      };
      this.Read = function (c) {
        rtl.rcc(c.get(),0,65535);
        if (!(this.fileMapEntry !== null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["File '" + this.filePath + "' has no file map entry assigned."]);
        if (!(this.fileMode === $impl.TFile.TFileMode.Read)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["File '" + this.filePath + "' is not opened for reading."]);
        if (this.EOF()) throw pas.SysUtils.EInOutError.$create("Create$1",["End of file '" + this.filePath + "' reached. Cannot read position " + pas.SysUtils.IntToStr(this.filePosition) + "."]);
        c.set(rtl.rcCharAt(this.fileMapEntry.content,(this.filePosition + 1) - 1));
        this.filePosition += 1;
      };
      this.Reset = function () {
        this.Reset$2(128);
      };
      this.Reset$2 = function (l) {
        rtl.rc(l,-2147483648,2147483647);
        if (l !== 1) throw pas.SysUtils.EInOutError.$create("Create$1",["Unsupported record size " + pas.SysUtils.IntToStr(l) + " specified. Only record size 1 is supported."]);
        this.fileMapEntry = $impl.fileMap.GetEntry(this.filePath);
        this.fileMode = rtl.rc($impl.TFile.TFileMode.Read,0,1);
        this.filePosition = 0;
      };
      this.Rewrite = function () {
        this.fileMapEntry = $impl.fileMap.GetEntry(this.filePath);
        if (this.fileMapEntry === null) {
          this.fileMapEntry = $impl.fileMap.AddEntry(this.filePath,$mod.TFileMapEntry.TFileType.BinaryFile);
        };
        this.fileMode = rtl.rc($impl.TFile.TFileMode.Write,0,1);
        this.filePosition = 0;
      };
      this.Seek2 = function (Pos) {
        rtl.rc(Pos,-2147483648,2147483647);
        this.filePosition = rtl.rc(Pos,-2147483648,2147483647);
      };
      rtl.addIntf(this,$mod.IBinaryFile,{Reset$1: "Reset$2"});
      rtl.addIntf(this,$mod.IFile);
      rtl.addIntf(this,pas.System.IUnknown);
    });
    $impl.InitializeFileMap = function () {
      var fileMapEntry = null;
      $impl.fileMap = $mod.TFileMap.$create("Create$1");
      fileMapEntry = $impl.fileMap.AddEntry("Input.pas",$mod.TFileMapEntry.TFileType.TextFile);
      fileMapEntry.content = "Program TestProgram; begin end.";
      fileMapEntry = $impl.fileMap.AddEntry("lib" + $mod.TFileSystem.PathDelim + "system.pas",$mod.TFileMapEntry.TFileType.TextFile);
      fileMapEntry.content = "unit System;" + pas.System.LineEnding + "interface" + pas.System.LineEnding + "const M_PI_2\t= pi*2;" + pas.System.LineEnding + "implementation" + pas.System.LineEnding + "initialization" + pas.System.LineEnding + "end.";
      fileMapEntry = $impl.fileMap.AddEntry("lib",$mod.TFileMapEntry.TFileType.Folder);
      fileMapEntry.content = "SubFolder1;SubFolder2";
      fileMapEntry = $impl.fileMap.AddEntry("Input.bin",$mod.TFileMapEntry.TFileType.BinaryFile);
      fileMapEntry.content = "01010110101";
    };
  };
  $mod.$init = function () {
    $impl.InitializeFileMap();
  };
},[]);
rtl.module("Utilities",["System","SysUtils"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass(this,"TEnvironment",pas.System.TObject,function () {
    this.GetParameterCount = function () {
      var Result = 0;
      Result = 4;
      return Result;
    };
    this.GetParameterString = function (i) {
      rtl.rc(i,-2147483648,2147483647);
      var Result = "";
      var $tmp = i;
      if ($tmp === 1) {
        Result = "Input.pas"}
       else if ($tmp === 2) {
        Result = "-ipath:lib"}
       else if ($tmp === 3) {
        Result = "-o:Output.a65"}
       else if ($tmp === 4) Result = "-diag";
      return Result;
    };
    this.GetParameterStringUpperCase = function (i) {
      rtl.rc(i,-2147483648,2147483647);
      var Result = "";
      Result = $mod.AnsiUpperCase(this.GetParameterString(i));
      return Result;
    };
  });
  rtl.createClass(this,"THaltException",pas.SysUtils.Exception,function () {
    this.COMPILING_ABORTED = 2;
    this.COMPILING_NOT_STARTED = 3;
    this.$init = function () {
      pas.SysUtils.Exception.$init.call(this);
      this.exitCode = 0;
    };
    this.Create$2 = function (exitCode) {
      rtl.rc(exitCode,-2147483648,2147483647);
      this.exitCode = rtl.rc(exitCode,-2147483648,2147483647);
      return this;
    };
    this.GetExitCode = function () {
      var Result = 0;
      Result = rtl.rc(this.exitCode,-2147483648,2147483647);
      return Result;
    };
  });
  this.RaiseHaltException = function (errnum) {
    rtl.rc(errnum,-2147483648,2147483647);
    throw $mod.THaltException.$create("Create$2",[errnum]);
  };
  this.AnsiLowerCase = function (s) {
    var Result = "";
    Result = pas.SysUtils.LowerCase(s);
    return Result;
  };
  this.AnsiUpperCase = function (s) {
    var Result = "";
    Result = pas.SysUtils.UpperCase(s);
    return Result;
  };
  this.CompareWord = function (buf1, buf2, len) {
    rtl.rc(len,-9007199254740991,9007199254740991);
    var Result = 0;
    if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Not implemented yet"]);
    return Result;
  };
  this.GetTickCount64 = function () {
    var Result = 0;
    return Result;
  };
});
rtl.module("CompilerTypes",["System","SysUtils","CommonTypes","Datatypes","FileIO","Tokens","Utilities"],function () {
  "use strict";
  var $mod = this;
  this.TPass = {"0": "NONE", NONE: 0, "1": "CALL_DETERMINATION", CALL_DETERMINATION: 1, "2": "CODE_GENERATION", CODE_GENERATION: 2};
  this.TParameterPassingMethod = {"0": "UNDEFINED", UNDEFINED: 0, "1": "VALPASSING", VALPASSING: 1, "2": "CONSTPASSING", CONSTPASSING: 2, "3": "VARPASSING", VARPASSING: 3};
  this.CONSTANT = pas.Tokens.TTokenKind.CONSTTOK;
  this.USERTYPE = pas.Tokens.TTokenKind.TYPETOK;
  this.VARIABLE = pas.Tokens.TTokenKind.VARTOK;
  this.LABELTYPE = pas.Tokens.TTokenKind.LABELTOK;
  this.UNITTYPE = pas.Tokens.TTokenKind.UNITTOK;
  this.ENUMTYPE = pas.Tokens.TTokenKind.ENUMTOK;
  this.MAXFIELDS = 256;
  this.MAXTYPES = 1024;
  this.MAXPOSSTACK = 512;
  this.MAXIDENTS = 16384;
  this.MAXBLOCKS = 16384;
  this.MAXPARAMS = 8;
  this.MAXVARS = 256;
  this.MAXALLOWEDUNITS = 256;
  this.MAXDEFINES = 256;
  this.CODEORIGIN = 0x100;
  this.DATAORIGIN = 0x8000;
  this.ASVALUE = 0;
  this.ASPOINTER = 1;
  this.ASPOINTERTOPOINTER = 2;
  this.ASPOINTERTOARRAYORIGIN = 3;
  this.ASPOINTERTOARRAYORIGIN2 = 4;
  this.ASPOINTERTORECORD = 5;
  this.ASPOINTERTOARRAYRECORD = 6;
  this.ASSTRINGPOINTERTOARRAYORIGIN = 7;
  this.ASSTRINGPOINTER1TOARRAYORIGIN = 8;
  this.ASPOINTERTODEREFERENCE = 9;
  this.ASPOINTERTORECORDARRAYORIGIN = 10;
  this.ASARRAYORIGINOFPOINTERTORECORDARRAYORIGIN = 11;
  this.ASPOINTERTOARRAYRECORDTOSTRING = 12;
  this.ASCHAR = 6;
  this.ASBOOLEAN_ = 7;
  this.ASREAL = 8;
  this.ASSHORTREAL = 9;
  this.ASHALFSINGLE = 10;
  this.ASSINGLE = 11;
  this.ASPCHAR = 12;
  this.fBlockRead_ParamType = [pas.Tokens.TTokenKind.UNTYPETOK,pas.Tokens.TTokenKind.WORDTOK,pas.Tokens.TTokenKind.POINTERTOK];
  this.TModifierCode = {"0": "mInline", mInline: 0, "1": "mStdCall", mStdCall: 1, "2": "mPascal", mPascal: 2, "3": "mForward", mForward: 3, "4": "mAssembler", mAssembler: 4, "5": "mRegister", mRegister: 5, "6": "mInterrupt", mInterrupt: 6, "7": "mOverload", mOverload: 7, "8": "mKeep", mKeep: 8};
  this.TInterruptCode = {"0": "DLI", DLI: 0, "1": "VBLD", VBLD: 1, "2": "VBLI", VBLI: 2, "3": "TIM1", TIM1: 3, "4": "TIM2", TIM2: 4, "5": "TIM4", TIM4: 5};
  this.TIOCode = {"0": "OpenRead", OpenRead: 0, "1": "ReadRecord", ReadRecord: 1, "2": "Read", Read: 2, "3": "OpenWrite", OpenWrite: 3, "4": "Append", Append: 4, "5": "WriteRecord", WriteRecord: 5, "6": "Write", Write: 6, "7": "OpenReadWrite", OpenReadWrite: 7, "8": "FileMode", FileMode: 8, "9": "Close", Close: 9};
  this.TCode65 = {"0": "putCHAR", putCHAR: 0, "1": "putEOL", putEOL: 1, "2": "addBX", addBX: 2, "3": "subBX", subBX: 3, "4": "movaBX_Value", movaBX_Value: 4, "5": "imulECX", imulECX: 5, "6": "addAL_CL", addAL_CL: 6, "7": "addAX_CX", addAX_CX: 7, "8": "addEAX_ECX", addEAX_ECX: 8, "9": "shlAL_CL", shlAL_CL: 9, "10": "shlAX_CL", shlAX_CL: 10, "11": "shlEAX_CL", shlEAX_CL: 11, "12": "subAL_CL", subAL_CL: 12, "13": "subAX_CX", subAX_CX: 13, "14": "subEAX_ECX", subEAX_ECX: 14, "15": "shrAL_CL", shrAL_CL: 15, "16": "shrAX_CL", shrAX_CL: 16, "17": "shrEAX_CL", shrEAX_CL: 17};
  rtl.recNewT(this,"TDefine",function () {
    this.Name = "";
    this.Macro = "";
    this.Line = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Param = rtl.arraySetLength(null,"",8);
      return r;
    };
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.Macro === b.Macro) && (this.Line === b.Line) && rtl.arrayEq(this.Param,b.Param);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.Macro = s.Macro;
      this.Line = s.Line;
      this.Param = s.Param.slice(0);
      return this;
    };
  });
  rtl.recNewT(this,"TParam",function () {
    this.Name = "";
    this.DataType = 0;
    this.NumAllocElements = 0;
    this.AllocElementType = 0;
    this.PassMethod = 0;
    this.i = 0;
    this.i_ = 0;
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.DataType === b.DataType) && (this.NumAllocElements === b.NumAllocElements) && (this.AllocElementType === b.AllocElementType) && (this.PassMethod === b.PassMethod) && (this.i === b.i) && (this.i_ === b.i_);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.DataType = s.DataType;
      this.NumAllocElements = s.NumAllocElements;
      this.AllocElementType = s.AllocElementType;
      this.PassMethod = s.PassMethod;
      this.i = s.i;
      this.i_ = s.i_;
      return this;
    };
  });
  this.TParamList$clone = function (a) {
    var b = [];
    b.length = 8;
    for (var c = 0; c < 8; c++) b[c] = $mod.TParam.$clone(a[c]);
    return b;
  };
  this.TVariableList$clone = function (a) {
    var b = [];
    b.length = 256;
    for (var c = 0; c < 256; c++) b[c] = $mod.TParam.$clone(a[c]);
    return b;
  };
  rtl.recNewT(this,"TField",function () {
    this.Name = "";
    this.Value = 0;
    this.DataType = 0;
    this.NumAllocElements = 0;
    this.AllocElementType = 0;
    this.ObjectVariable = false;
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.Value === b.Value) && (this.DataType === b.DataType) && (this.NumAllocElements === b.NumAllocElements) && (this.AllocElementType === b.AllocElementType) && (this.ObjectVariable === b.ObjectVariable);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.Value = s.Value;
      this.DataType = s.DataType;
      this.NumAllocElements = s.NumAllocElements;
      this.AllocElementType = s.AllocElementType;
      this.ObjectVariable = s.ObjectVariable;
      return this;
    };
  });
  rtl.recNewT(this,"TType",function () {
    this.Block = 0;
    this.NumFields = 0;
    this.Size = 0;
    this.Field$a$clone = function (a) {
      var b = [];
      b.length = 1025;
      for (var c = 0; c < 1025; c++) b[c] = $mod.TField.$clone(a[c]);
      return b;
    };
    this.$new = function () {
      var r = Object.create(this);
      r.Field = rtl.arraySetLength(null,$mod.TField,1025);
      return r;
    };
    this.$eq = function (b) {
      return (this.Block === b.Block) && (this.NumFields === b.NumFields) && (this.Size === b.Size) && rtl.arrayEq(this.Field,b.Field);
    };
    this.$assign = function (s) {
      this.Block = s.Block;
      this.NumFields = s.NumFields;
      this.Size = s.Size;
      this.Field = this.Field$a$clone(s.Field);
      return this;
    };
  });
  this.TSourceFileType = {"0": "PROGRAM_FILE", PROGRAM_FILE: 0, "1": "UNIT_FILE", UNIT_FILE: 1, "2": "INCLUDE_FILE", INCLUDE_FILE: 2};
  rtl.createClass(this,"TSourceFile",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.UnitIndex = 0;
      this.SourceFileType = 0;
      this.Name = "";
      this.Path = "";
      this.Units = 0;
      this.AllowedUnitNames = rtl.arraySetLength(null,"",256);
    };
    this.$final = function () {
      this.AllowedUnitNames = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.IsRelevant = function () {
      var Result = false;
      Result = (this.Name !== "") && (this.SourceFileType in rtl.createSet($mod.TSourceFileType.PROGRAM_FILE,$mod.TSourceFileType.UNIT_FILE));
      return Result;
    };
  });
  rtl.recNewT(this,"TSourceLocation",function () {
    this.SourceFile = null;
    this.Line = 0;
    this.Column = 0;
    this.$eq = function (b) {
      return (this.SourceFile === b.SourceFile) && (this.Line === b.Line) && (this.Column === b.Column);
    };
    this.$assign = function (s) {
      this.SourceFile = s.SourceFile;
      this.Line = s.Line;
      this.Column = s.Column;
      return this;
    };
  });
  rtl.createClass(this,"TSourceFileList",pas.System.TObject,function () {
    this.MAXUNITS = 4096;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Count = 0;
      this.SourceFileArray = rtl.arraySetLength(null,null,4096);
    };
    this.$final = function () {
      this.SourceFileArray = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      var i = 0;
      for (i = 1; i <= 4096; i++) {
        rtl.rcArrW(this.SourceFileArray,i - 1,$mod.TSourceFile.$create("Create"));
      };
      return this;
    };
    this.Size = function () {
      var Result = 0;
      Result = rtl.rc(this.Count,-2147483648,2147483647);
      return Result;
    };
    this.AddUnit = function (SourceFileType, Name, Path) {
      rtl.rc(SourceFileType,0,2);
      var Result = null;
      if (!(pas.SysUtils.IsValidIdent(Path,false,false) === false)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Name '" + Name + "' is not a valid identifier."]);
      if (!(Path.length >= 0)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Path not specified."]);
      Result = $mod.TSourceFile.$create("Create");
      this.Count += 1;
      Result.UnitIndex = rtl.rc(this.Count,-32768,32767);
      Result.SourceFileType = rtl.rc(SourceFileType,0,2);
      Result.Name = Name;
      Result.Path = Path;
      rtl.rcArrW(this.SourceFileArray,Result.UnitIndex - 1,Result);
      return Result;
    };
    this.GetSourceFile = function (SourceFileIndex) {
      rtl.rc(SourceFileIndex,-32768,32767);
      var Result = null;
      if (!(SourceFileIndex >= 1)) throw pas.SysUtils.EAssertionFailed.$create("Create");
      Result = rtl.rcArrR(this.SourceFileArray,SourceFileIndex - 1);
      return Result;
    };
    this.ClearAllowedUnitNames = function () {
      var i = 0;
      for (i = 1; i <= 4096; i++) rtl.rcArrR(this.SourceFileArray,i - 1).Units = 0;
    };
  });
  rtl.createClass(this,"TToken",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.TokenIndex = 0;
      this.SourceLocation = $mod.TSourceLocation.$new();
      this.Kind = 0;
      this.Name = "";
      this.Value = 0;
      this.FracValue = 0.0;
      this.StrAddress = 0;
      this.StrLength = 0;
    };
    this.$final = function () {
      this.SourceLocation = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetSourceFileName = function () {
      var Result = "";
      Result = this.SourceLocation.SourceFile.Name;
      return Result;
    };
    this.GetSourceFileLineString = function () {
      var Result = "";
      Result = this.SourceLocation.SourceFile.Path + " ( line " + pas.SysUtils.IntToStr(this.SourceLocation.Line) + ")";
      return Result;
    };
    this.GetSpelling = function () {
      var Result = "";
      Result = pas.Tokens.GetHumanReadbleTokenSpelling(this.Kind);
      return Result;
    };
  });
  rtl.createClass(this,"TTokenList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.tokenArray = [];
    };
    this.$final = function () {
      this.tokenArray = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.tokenArray = [];
      this.Clear();
      return this;
    };
    this.Free$1 = function () {
      this.Clear();
    };
    this.Size = function () {
      var Result = 0;
      Result = rtl.rc(rtl.length(this.tokenArray) - 1,-2147483648,2147483647);
      return Result;
    };
    this.Clear = function () {
      var i = 0;
      if (rtl.length(this.tokenArray) > 0) {
        for (var $l = 0, $end = rtl.length(this.tokenArray) - 1; $l <= $end; $l++) {
          i = $l;
          rtl.rcArrW(this.tokenArray,i,rtl.freeLoc(rtl.rcArrR(this.tokenArray,i)));
        };
      };
      this.tokenArray = rtl.arraySetLength(this.tokenArray,null,1);
      this.tokenArray[0] = $mod.TToken.$create("Create");
    };
    this.AddToken = function (Kind, SourceFile, Line, Column, Value) {
      rtl.rc(Kind,0,191);
      rtl.rc(Line,-2147483648,2147483647);
      rtl.rc(Column,-2147483648,2147483647);
      rtl.rc(Value,-2147483648,2147483647);
      var Result = null;
      var i = 0;
      if (!(SourceFile !== null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["No source code file specified"]);
      Result = $mod.TToken.$create("Create");
      i = rtl.rc(this.Size() + 1,-2147483648,2147483647);
      Result.TokenIndex = rtl.rc(i,-2147483648,2147483647);
      Result.SourceLocation.SourceFile = SourceFile;
      Result.Kind = rtl.rc(Kind,0,191);
      Result.Value = rtl.rc(Value,-2147483648,2147483647);
      if (i === 1) {
        Column = 1}
       else {
        if (rtl.rcArrR(this.tokenArray,i - 1).SourceLocation.Line !== Line) {}
        else Column = rtl.rc(Column + rtl.rcArrR(this.tokenArray,i - 1).SourceLocation.Column,-2147483648,2147483647);
      };
      Result.SourceLocation.Line = rtl.rc(Line,-2147483648,2147483647);
      Result.SourceLocation.Column = rtl.rc(Column,-2147483648,2147483647);
      this.tokenArray = rtl.arraySetLength(this.tokenArray,null,i + 1);
      rtl.rcArrW(this.tokenArray,i,Result);
      return Result;
    };
    this.RemoveToken = function () {
      var i = 0;
      i = rtl.rc(this.Size(),-2147483648,2147483647);
      rtl.rcArrW(this.tokenArray,i,rtl.freeLoc(rtl.rcArrR(this.tokenArray,i)));
      rtl.rcArrW(this.tokenArray,i,null);
      this.tokenArray = rtl.arraySetLength(this.tokenArray,null,i);
    };
    this.GetTokenAtIndex = function (tokenIndex) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      var Result = null;
      if (tokenIndex < 0) {
        pas.System.Writeln("ERROR: Array index ",tokenIndex," is smaller than the lower bound ",0);
        pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
      };
      if (tokenIndex > (rtl.length(this.tokenArray) - 1)) {
        pas.System.Writeln("ERROR: Array index ",tokenIndex," is greater than the upper bound ",rtl.length(this.tokenArray) - 1);
        pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
      };
      Result = rtl.rcArrR(this.tokenArray,tokenIndex);
      return Result;
    };
    this.GetTokenSpellingAtIndex = function (tokenIndex) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      var Result = "";
      var kind = 0;
      Result = "";
      if (tokenIndex > this.Size()) {
        Result = "no token"}
       else {
        kind = rtl.rc(rtl.rcArrR(this.tokenArray,tokenIndex).Kind,0,191);
        pas.Tokens.GetHumanReadbleTokenSpelling(kind);
      };
      return Result;
    };
  });
  rtl.createClass(this,"TIdentifier",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.Name = "";
      this.Value = 0;
      this.Block = 0;
      this.SourceFile = null;
      this.Alias = "";
      this.Libraries = 0;
      this.DataType = 0;
      this.IdType = 0;
      this.PassMethod = 0;
      this.Pass = 0;
      this.NestedNumAllocElements = 0;
      this.NestedAllocElementType = 0;
      this.NestedDataType = 0;
      this.NestedFunctionNumAllocElements = 0;
      this.NestedFunctionAllocElementType = 0;
      this.isNestedFunction = false;
      this.LoopVariable = false;
      this.isAbsolute = false;
      this.isInit = false;
      this.isInitialized = false;
      this.Section = false;
      this.Kind = 0;
      this.NumParams = 0;
      this.Param = rtl.arraySetLength(null,$mod.TParam,8);
      this.ProcAsBlock = 0;
      this.ObjectIndex = 0;
      this.IsUnresolvedForward = false;
      this.updateResolvedForward = false;
      this.isOverload = false;
      this.isRegister = false;
      this.isInterrupt = false;
      this.isRecursion = false;
      this.isStdCall = false;
      this.isPascal = false;
      this.isInline = false;
      this.isAsm = false;
      this.isExternal = false;
      this.isKeep = false;
      this.isVolatile = false;
      this.isStriped = false;
      this.IsNotDead = false;
      this.NumAllocElements = 0;
      this.NumAllocElements_ = 0;
      this.AllocElementType = 0;
      this.ObjectVariable = false;
    };
    this.$final = function () {
      this.SourceFile = undefined;
      this.Param = undefined;
      pas.System.TObject.$final.call(this);
    };
  });
  rtl.createClass(this,"TIdentifierList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.identifierArray = [];
    };
    this.$final = function () {
      this.identifierArray = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.identifierArray = [];
      this.Clear();
      return this;
    };
    this.Free$1 = function () {
      this.Clear();
    };
    this.Size = function () {
      var Result = 0;
      Result = rtl.rc(rtl.length(this.identifierArray) - 1,-2147483648,2147483647);
      return Result;
    };
    this.Clear = function () {
      var i = 0;
      if (rtl.length(this.identifierArray) > 0) {
        for (var $l = 0, $end = rtl.length(this.identifierArray) - 1; $l <= $end; $l++) {
          i = $l;
          rtl.rcArrW(this.identifierArray,i,rtl.freeLoc(rtl.rcArrR(this.identifierArray,i)));
        };
      };
      this.identifierArray = rtl.arraySetLength(this.identifierArray,null,1);
      this.identifierArray[0] = $mod.TIdentifier.$create("Create");
    };
    this.AddIdentifier = function () {
      var Result = null;
      var i = 0;
      Result = $mod.TIdentifier.$create("Create");
      i = rtl.rc(this.Size() + 1,-2147483648,2147483647);
      this.identifierArray = rtl.arraySetLength(this.identifierArray,null,i + 1);
      rtl.rcArrW(this.identifierArray,i,Result);
      return Result;
    };
    this.GetIdentifierAtIndex = function (identifierIndex) {
      rtl.rc(identifierIndex,-2147483648,2147483647);
      var Result = null;
      if (identifierIndex < 0) {
        pas.System.Writeln("ERROR: Array index ",identifierIndex," is smaller than the lower bound ",0);
        pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
      };
      if (identifierIndex > (rtl.length(this.identifierArray) - 1)) {
        pas.System.Writeln("ERROR: Array index ",identifierIndex," is greater than the upper bound ",rtl.length(this.identifierArray) - 1);
        pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
      };
      Result = rtl.rcArrR(this.identifierArray,identifierIndex);
      return Result;
    };
  });
  rtl.recNewT(this,"TCallGraphNode",function () {
    this.NumChildren = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.ChildBlock = rtl.arraySetLength(null,0,16384);
      return r;
    };
    this.$eq = function (b) {
      return rtl.arrayEq(this.ChildBlock,b.ChildBlock) && (this.NumChildren === b.NumChildren);
    };
    this.$assign = function (s) {
      this.ChildBlock = s.ChildBlock.slice(0);
      this.NumChildren = s.NumChildren;
      return this;
    };
  });
  rtl.recNewT(this,"TResource",function () {
    this.resStream = false;
    this.resName = "";
    this.resType = "";
    this.resFile = "";
    this.resValue = 0;
    this.resFullName = "";
    this.$new = function () {
      var r = Object.create(this);
      r.resPar = rtl.arraySetLength(null,"",8);
      return r;
    };
    this.$eq = function (b) {
      return (this.resStream === b.resStream) && (this.resName === b.resName) && (this.resType === b.resType) && (this.resFile === b.resFile) && (this.resValue === b.resValue) && (this.resFullName === b.resFullName) && rtl.arrayEq(this.resPar,b.resPar);
    };
    this.$assign = function (s) {
      this.resStream = s.resStream;
      this.resName = s.resName;
      this.resType = s.resType;
      this.resFile = s.resFile;
      this.resValue = s.resValue;
      this.resFullName = s.resFullName;
      this.resPar = s.resPar.slice(0);
      return this;
    };
  });
  rtl.recNewT(this,"TCaseLabel",function () {
    this.left = 0;
    this.right = 0;
    this.$eq = function (b) {
      return (this.left === b.left) && (this.right === b.right);
    };
    this.$assign = function (s) {
      this.left = s.left;
      this.right = s.right;
      return this;
    };
  });
  rtl.recNewT(this,"TPosStack",function () {
    this.ptr = 0;
    this.brk = false;
    this.cnt = false;
    this.$eq = function (b) {
      return (this.ptr === b.ptr) && (this.brk === b.brk) && (this.cnt === b.cnt);
    };
    this.$assign = function (s) {
      this.ptr = s.ptr;
      this.brk = s.brk;
      this.cnt = s.cnt;
      return this;
    };
  });
  rtl.recNewT(this,"TForLoop",function () {
    this.begin_value = 0;
    this.end_value = 0;
    this.begin_const = false;
    this.end_const = false;
    this.$eq = function (b) {
      return (this.begin_value === b.begin_value) && (this.end_value === b.end_value) && (this.begin_const === b.begin_const) && (this.end_const === b.end_const);
    };
    this.$assign = function (s) {
      this.begin_value = s.begin_value;
      this.end_value = s.end_value;
      this.begin_const = s.begin_const;
      this.end_const = s.end_const;
      return this;
    };
  });
  this.SetModifierBit = function (modifierCode, bits) {
    rtl.rc(modifierCode,0,8);
    rtl.rc(bits.get(),0,65535);
    bits.set(bits.get() | (1 << modifierCode));
  };
  this.GetIOBits = function (ioCode) {
    rtl.rc(ioCode,0,9);
    var Result = 0;
    Result = 0x0;
    var $tmp = ioCode;
    if ($tmp === $mod.TIOCode.OpenRead) {
      Result = 0x4}
     else if ($tmp === $mod.TIOCode.ReadRecord) {
      Result = 0x5}
     else if ($tmp === $mod.TIOCode.Read) {
      Result = 0x7}
     else if ($tmp === $mod.TIOCode.OpenWrite) {
      Result = 0x8}
     else if ($tmp === $mod.TIOCode.Append) {
      Result = 0x9}
     else if ($tmp === $mod.TIOCode.WriteRecord) {
      Result = 0x9}
     else if ($tmp === $mod.TIOCode.Write) {
      Result = 0xb}
     else if ($tmp === $mod.TIOCode.OpenReadWrite) {
      Result = 0xc}
     else if ($tmp === $mod.TIOCode.FileMode) {
      Result = 0xf0}
     else if ($tmp === $mod.TIOCode.Close) {
      Result = 0xff}
     else {
      if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid ioCode."]);
    };
    return Result;
  };
});
rtl.module("Memory",["System"],function () {
  "use strict";
  var $mod = this;
  this.MIN_MEMORY_ADDRESS = 0x0;
  this.MAX_MEMORY_ADDRESS = 0xFFFF;
  this.ClearWordMemory = function (anArray) {
    var i = 0;
    for (i = 0; i <= 65535; i++) {
      anArray.get()[i] = 0;
    };
  };
});
rtl.module("StringUtilities",["System","CommonTypes","SysUtils"],function () {
  "use strict";
  var $mod = this;
  this.TAB = "\t";
  this.CR = "\r";
  this.LF = "\n";
  this.AllowDirectorySeparators = rtl.createSet(47,92);
  this.AllowWhiteSpaces = rtl.createSet(32,this.TAB.charCodeAt(),this.CR.charCodeAt(),this.LF.charCodeAt());
  this.AllowQuotes = rtl.createSet(39,34);
  this.AllowLabelFirstChars = rtl.createSet(null,65,90,95);
  this.AllowLabelChars = rtl.createSet(null,65,90,null,48,57,95,46);
  this.AllowDigitFirstChars = rtl.createSet(null,48,57,37,36);
  this.AllowDigitChars = rtl.createSet(null,48,57,null,65,70);
  this.IntToStr = function (a) {
    var Result = "";
    Result = "" + a;
    return Result;
  };
  this.StrToInt = function (a) {
    var Result = 0;
    var value = 0;
    var i = 0;
    pas.System.val$6(a,{get: function () {
        return value;
      }, set: function (v) {
        value = v;
      }},{get: function () {
        return i;
      }, set: function (v) {
        i = v;
      }});
    Result = value;
    return Result;
  };
  this.SkipWhitespaces = function (a, i) {
    if (a !== "") while ((i.get() <= a.length) && (a.charCodeAt(i.get() - 1) in $mod.AllowWhiteSpaces)) i.set(i.get() + 1);
  };
  this.GetNumber = function (a, i) {
    var Result = "";
    Result = "";
    if (a !== "") {
      $mod.SkipWhitespaces(a,i);
      if (i.get() <= a.length) {
        if (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in $mod.AllowDigitFirstChars) {
          Result = pas.System.upcase(a.charAt(i.get() - 1));
          i.set(i.get() + 1);
          while ((i.get() <= a.length) && (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in $mod.AllowDigitChars)) {
            Result = Result + pas.System.upcase(a.charAt(i.get() - 1));
            i.set(i.get() + 1);
          };
        };
      };
    };
    return Result;
  };
  this.GetConstantUpperCase = function (a, i) {
    var Result = "";
    Result = "";
    if (a !== "") {
      $mod.SkipWhitespaces(a,i);
      if (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.unionSet($mod.AllowLabelFirstChars,rtl.createSet(46))) while (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in $mod.AllowLabelChars) {
        Result = Result + pas.System.upcase(a.charAt(i.get() - 1));
        i.set(i.get() + 1);
      };
    };
    return Result;
  };
  this.GetLabel = function (a, upperCase, i) {
    var Result = "";
    Result = "";
    if (a !== "") {
      $mod.SkipWhitespaces(a,i);
      if ((i.get() <= a.length) && (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.unionSet($mod.AllowLabelFirstChars,rtl.createSet(46)))) while ((i.get() <= a.length) && (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.unionSet($mod.AllowLabelChars,$mod.AllowDirectorySeparators))) {
        if (upperCase) {
          Result = Result + pas.System.upcase(a.charAt(i.get() - 1))}
         else Result = Result + a.charAt(i.get() - 1);
        i.set(i.get() + 1);
      };
    };
    return Result;
  };
  this.GetLabelUpperCase = function (a, i) {
    var Result = "";
    Result = $mod.GetLabel(a,true,i);
    return Result;
  };
  this.GetString = function (a, upperCase, i) {
    var Result = "";
    var znak = "\x00";
    var gchr = "\x00";
    Result = "";
    $mod.SkipWhitespaces(a,i);
    if (i.get() <= a.length) {
      if (a.charAt(i.get() - 1) === "%") {
        while ((i.get() <= a.length) && (pas.System.upcase(a.charAt(i.get() - 1)).charCodeAt() in rtl.createSet(null,65,90,37))) {
          Result = Result + pas.System.upcase(a.charAt(i.get() - 1));
          i.set(i.get() + 1);
        };
      } else if (!(a.charCodeAt(i.get() - 1) in $mod.AllowQuotes)) {
        Result = $mod.GetLabel(a,upperCase,i);
      } else {
        gchr = a.charAt(i.get() - 1);
        while (i.get() <= a.length) {
          i.set(i.get() + 1);
          znak = a.charAt(i.get() - 1);
          if (znak === gchr) {
            i.set(i.get() + 1);
            break;
          };
          Result = Result + znak;
        };
      };
    };
    return Result;
  };
  this.GetStringUpperCase = function (a, i) {
    var Result = "";
    Result = $mod.GetString(a,true,i);
    return Result;
  };
  this.GetFilePath = function (a, i) {
    var Result = "";
    Result = $mod.GetString(a,false,i);
    return Result;
  };
  this.SplitStr = function (a, separatorCharacter) {
    var Result = [];
    var znak = "\x00";
    var i = 0;
    var len = 0;
    var txt = "";
    var s = "";
    function GetParenthesizedString(a, i) {
      var Result = "";
      var nawias = 0;
      var len = 0;
      var znak = "\x00";
      var lewa = "\x00";
      var prawa = "\x00";
      var petla = false;
      var txt = "";
      Result = "";
      if (!(a.charCodeAt(i.get() - 1) in rtl.createSet(40))) return Result;
      lewa = a.charAt(i.get() - 1);
      if (lewa === "(") {
        prawa = ")"}
       else prawa = String.fromCharCode(lewa.charCodeAt() + 2);
      nawias = 0;
      petla = true;
      len = a.length;
      while (petla && (i.get() <= len)) {
        znak = a.charAt(i.get() - 1);
        if (znak === lewa) {
          nawias += 1}
         else if (znak === prawa) nawias -= 1;
        petla = !(nawias === 0);
        if (znak.charCodeAt() in $mod.AllowQuotes) {
          txt = $mod.GetStringUpperCase(a,i);
          Result = Result + znak + txt + znak;
          if (txt === znak) Result = Result + znak;
        } else {
          Result = Result + znak;
          i.set(i.get() + 1);
        };
      };
      return Result;
    };
    function AddString() {
      var i = 0;
      i = rtl.length(Result) - 1;
      Result[i] = s;
      Result = rtl.arraySetLength(Result,"",i + 2);
      s = "";
    };
    Result = rtl.arraySetLength(Result,"",1);
    i = 1;
    len = a.length;
    s = "";
    while (i <= len) if (a.charAt(i - 1) === separatorCharacter) {
      AddString();
      i += 1;
    } else {
      var $tmp = pas.System.upcase(a.charAt(i - 1));
      if ($tmp === "(") {
        s = s + GetParenthesizedString(a,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }})}
       else if (($tmp === "'") || ($tmp === '"')) {
        znak = a.charAt(i - 1);
        txt = $mod.GetStringUpperCase(a,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }});
        s = s + znak + txt + znak;
        if (znak === txt) s = s + znak;
      } else {
        s = s + a.charAt(i - 1);
        i += 1;
      };
    };
    if (s !== "") AddString();
    return Result;
  };
});
rtl.module("Targets",["System"],function () {
  "use strict";
  var $mod = this;
  this.TTargetID = {"0": "NONE", NONE: 0, "1": "A8", A8: 1, "2": "C4P", C4P: 2, "3": "C64", C64: 3, "4": "NEO", NEO: 4, "5": "RAW", RAW: 5, "6": "X16", X16: 6};
  this.TCPU = {"0": "NONE", NONE: 0, "1": "CPU_6502", CPU_6502: 1, "2": "CPU_65C02", CPU_65C02: 2, "3": "CPU_65816", CPU_65816: 3};
  rtl.recNewT(this,"TTarget",function () {
    this.Name = "";
    this.id = 0;
    this.cpu = 0;
    this.eol = 0;
    this.zpage = 0;
    this.buf = 0;
    this.codeorigin = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.header = rtl.arraySetLength(null,"",16);
      return r;
    };
    this.$eq = function (b) {
      return (this.Name === b.Name) && (this.id === b.id) && (this.cpu === b.cpu) && (this.eol === b.eol) && (this.zpage === b.zpage) && (this.buf === b.buf) && (this.codeorigin === b.codeorigin) && rtl.arrayEq(this.header,b.header);
    };
    this.$assign = function (s) {
      this.Name = s.Name;
      this.id = s.id;
      this.cpu = s.cpu;
      this.eol = s.eol;
      this.zpage = s.zpage;
      this.buf = s.buf;
      this.codeorigin = s.codeorigin;
      this.header = s.header.slice(0);
      return this;
    };
  });
  this.Init = function (id, target) {
    target.id = id;
    var $tmp = target.id;
    if ($tmp === $mod.TTargetID.A8) {
      target.cpu = $mod.TCPU.CPU_6502;
      target.Name = "ATARI";
      target.buf = 0x400;
      target.zpage = 0x80;
      target.eol = 0x9B;
      target.codeorigin = 0x2000;
    } else if ($tmp === $mod.TTargetID.C64) {
      target.cpu = $mod.TCPU.CPU_6502;
      target.Name = "C64";
      target.buf = 0x800;
      target.zpage = 0x2;
      target.eol = 0xD;
      target.codeorigin = 0x900;
      target.header[0] = "opt h-f+";
      target.header[1] = "org $801";
      target.header[2] = "org [a($801)],$801";
      target.header[3] = "basic_start(START)";
      target.header[4] = "";
      target.header[5] = "org $900";
      target.header[6] = "";
      target.header[7] = "END";
    } else if ($tmp === $mod.TTargetID.C4P) {
      target.cpu = $mod.TCPU.CPU_6502;
      target.Name = "C4P";
      target.buf = 0x800;
      target.zpage = 0x2;
      target.eol = 0xD;
      target.codeorigin = 0x100E;
      target.header[0] = "opt h-f+";
      target.header[1] = "org $1001";
      target.header[2] = "org [a($1001)],$1001";
      target.header[3] = "basic_start(START)";
      target.header[4] = "";
      target.header[5] = "org $100E";
      target.header[6] = "";
      target.header[7] = "END";
    } else if ($tmp === $mod.TTargetID.NEO) {
      target.cpu = $mod.TCPU.CPU_65C02;
      target.Name = "NEO";
      target.buf = 0x200;
      target.zpage = 0x0;
      target.eol = 0xD;
      target.codeorigin = 0x800;
      target.header[0] = "END";
    } else if ($tmp === $mod.TTargetID.RAW) {
      target.cpu = $mod.TCPU.CPU_6502;
      target.Name = "RAW";
      target.buf = 0x200;
      target.zpage = 0x0;
      target.eol = 0xD;
      target.codeorigin = 0x1000;
      target.header[0] = "END";
    } else if ($tmp === $mod.TTargetID.X16) {
      target.cpu = $mod.TCPU.CPU_65C02;
      target.Name = "X16";
      target.buf = 0x400;
      target.zpage = 0x22;
      target.eol = 0xD;
      target.codeorigin = 0x900;
      target.header[0] = "opt h-f+c+";
      target.header[1] = "org $801";
      target.header[2] = "org [a($801)],$801";
      target.header[3] = "basic_start(START)";
      target.header[4] = "";
      target.header[5] = "org $900";
      target.header[6] = "";
      target.header[7] = "END";
    };
  };
});
rtl.module("Console",["System"],function () {
  "use strict";
  var $mod = this;
  this.LightGray = 7;
  this.LightGreen = 10;
  this.LightCyan = 11;
  this.LightRed = 12;
  this.White = 15;
  this.TextColor = function (Color) {
    rtl.rc(Color,0,255);
  };
  this.NormVideo = function () {
  };
});
rtl.module("Messages",["System","Common","CompilerTypes","Datatypes","CommonTypes","Tokens"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TErrorCode = {"0": "UnknownIdentifier", UnknownIdentifier: 0, "1": "OParExpected", OParExpected: 1, "2": "IdentifierExpected", IdentifierExpected: 2, "3": "IncompatibleTypeOf", IncompatibleTypeOf: 3, "4": "UserDefined", UserDefined: 4, "5": "IdNumExpExpected", IdNumExpExpected: 5, "6": "IncompatibleTypes", IncompatibleTypes: 6, "7": "IncompatibleEnum", IncompatibleEnum: 7, "8": "OrdinalExpectedFOR", OrdinalExpectedFOR: 8, "9": "CantAdrConstantExp", CantAdrConstantExp: 9, "10": "VariableExpected", VariableExpected: 10, "11": "WrongNumberOfParameters", WrongNumberOfParameters: 11, "12": "OrdinalExpExpected", OrdinalExpExpected: 12, "13": "RangeCheckError", RangeCheckError: 13, "14": "VariableNotInit", VariableNotInit: 14, "15": "ShortStringLength", ShortStringLength: 15, "16": "StringTruncated", StringTruncated: 16, "17": "TypeMismatch", TypeMismatch: 17, "18": "CantReadWrite", CantReadWrite: 18, "19": "SubrangeBounds", SubrangeBounds: 19, "20": "TooManyParameters", TooManyParameters: 20, "21": "CantDetermine", CantDetermine: 21, "22": "UpperBoundOfRange", UpperBoundOfRange: 22, "23": "HighLimit", HighLimit: 23, "24": "IllegalTypeConversion", IllegalTypeConversion: 24, "25": "IncompatibleTypesArray", IncompatibleTypesArray: 25, "26": "IllegalExpression", IllegalExpression: 26, "27": "AlwaysTrue", AlwaysTrue: 27, "28": "AlwaysFalse", AlwaysFalse: 28, "29": "UnreachableCode", UnreachableCode: 29, "30": "IllegalQualifier", IllegalQualifier: 30, "31": "LoHi", LoHi: 31, "32": "StripedAllowed", StripedAllowed: 32, "33": "FileNotFound", FileNotFound: 33, "34": "WrongParameterList", WrongParameterList: 34, "35": "OperatorNotOverloaded", OperatorNotOverloaded: 35, "36": "OperationNotSupportedForTypes", OperationNotSupportedForTypes: 36, "37": "NotAllDeclarationsOverloaded", NotAllDeclarationsOverloaded: 37, "38": "SyntaxError", SyntaxError: 38, "39": "CantAsignValuesToAnAddress", CantAsignValuesToAnAddress: 39, "40": "UndefinedResourceType", UndefinedResourceType: 40, "41": "ResourceFileNotFound", ResourceFileNotFound: 41, "42": "DuplicateResource", DuplicateResource: 42, "43": "OutOfResources", OutOfResources: 43, "44": "WrongSwitchToggle", WrongSwitchToggle: 44, "45": "IllegalOptimizationSpecified", IllegalOptimizationSpecified: 45, "46": "IllegalAlignmentDirective", IllegalAlignmentDirective: 46, "47": "FilePathNotSpecified", FilePathNotSpecified: 47, "48": "ElseWithoutIf", ElseWithoutIf: 48, "49": "EndifWithoutIf", EndifWithoutIf: 49, "50": "TooManyFormalParameters", TooManyFormalParameters: 50, "51": "DuplicateIdentifier", DuplicateIdentifier: 51, "52": "IllegalCompilerDirective", IllegalCompilerDirective: 52, "53": "UnexpectedCharacter", UnexpectedCharacter: 53, "54": "ConstantStringTooLong", ConstantStringTooLong: 54, "55": "ParameterMissing", ParameterMissing: 55, "56": "UnitExpected", UnitExpected: 56, "57": "StringExceedsLine", StringExceedsLine: 57, "58": "ConstantExpressionExpected", ConstantExpressionExpected: 58, "59": "RecursionInMacro", RecursionInMacro: 59, "60": "InvalidVariableAddress", InvalidVariableAddress: 60, "61": "ConstantExpected", ConstantExpected: 61, "62": "CantTakeAddressOfIdentifier", CantTakeAddressOfIdentifier: 62, "63": "DivisionByZero", DivisionByZero: 63, "64": "IdentifierAlreadyDefined", IdentifierAlreadyDefined: 64, "65": "FormalParameterNameExpected", FormalParameterNameExpected: 65, "66": "TypeIdentifierExpected", TypeIdentifierExpected: 66, "67": "FileParameterMustBeVAR", FileParameterMustBeVAR: 67, "68": "ReservedWordUserAsIdentifier", ReservedWordUserAsIdentifier: 68, "69": "FunctionDirectiveForwardNotAllowedInInterfaceSection", FunctionDirectiveForwardNotAllowedInInterfaceSection: 69, "70": "ProcedureDirectiveForwardNotAllowedInInterfaceSection", ProcedureDirectiveForwardNotAllowedInInterfaceSection: 70, "71": "CannotCombineRegisterWithPascal", CannotCombineRegisterWithPascal: 71, "72": "CannotCombineInlineWithPascal", CannotCombineInlineWithPascal: 72, "73": "CannotCombineInlineWithInterrupt", CannotCombineInlineWithInterrupt: 73, "74": "CannotCombineInlineWithExternal", CannotCombineInlineWithExternal: 74, "75": "IllegalTypeDeclarationOfSetElements", IllegalTypeDeclarationOfSetElements: 75, "76": "FieldAfterMethodOrProperty", FieldAfterMethodOrProperty: 76, "77": "RecordSizeExceedsLimit", RecordSizeExceedsLimit: 77, "78": "StringLengthNotInRange", StringLengthNotInRange: 78, "79": "InvalidTypeDefinition", InvalidTypeDefinition: 79, "80": "ArrayLowerBoundNotInteger", ArrayLowerBoundNotInteger: 80, "81": "ArrayLowerBoundNotZero", ArrayLowerBoundNotZero: 81, "82": "ArrayUpperBoundNotInteger", ArrayUpperBoundNotInteger: 82, "83": "InvalidArrayOfPointers", InvalidArrayOfPointers: 83, "84": "ArraySizeExceedsRAMSize", ArraySizeExceedsRAMSize: 84, "85": "MultiDimensionalArrayOfTypeNotSupported", MultiDimensionalArrayOfTypeNotSupported: 85, "86": "ArrayOfTypeNotSupported", ArrayOfTypeNotSupported: 86, "87": "OnlyArrayOfTypeSupported", OnlyArrayOfTypeSupported: 87, "88": "IdentifierIdentsNoMember", IdentifierIdentsNoMember: 88, "89": "Unassigned", Unassigned: 89, "90": "VariableConstantOrFunctionExpectedButProcedureFound", VariableConstantOrFunctionExpectedButProcedureFound: 90, "91": "UnderConstruction", UnderConstruction: 91, "92": "TypeIdentifierNotAllowed", TypeIdentifierNotAllowed: 92};
  rtl.createInterface(this,"IMessage","{A7A4AA47-E977-3368-BE13-7A2D5708E8E1}",["GetErrorCode","GetText"],pas.System.IUnknown);
  rtl.createClass(this,"TMessage",pas.System.TInterfacedObject,function () {
    this.$init = function () {
      pas.System.TInterfacedObject.$init.call(this);
      this.ErrorCode = 0;
      this.Text = "";
    };
    this.Create$1 = function (errorCode, Text, variable0, variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8, variable9) {
      rtl.rc(errorCode,0,92);
      var l = 0;
      var i = 0;
      var c = "\x00";
      this.ErrorCode = rtl.rc(errorCode,0,92);
      this.Text = "";
      l = rtl.rc(Text.length,-2147483648,2147483647);
      i = 1;
      do {
        c = rtl.rcc(rtl.rcCharAt(Text,i - 1),0,65535);
        if (c === "{") {
          if (!(i <= (l - 2))) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid string pattern, pattern '" + Text + "' is too short."]);
          i += 1;
          c = rtl.rcc(rtl.rcCharAt(Text,i - 1),0,65535);
          if (!(c.charCodeAt() in rtl.createSet(null,48,57))) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid string pattern, placeholder '" + c + "' at index " + pas.SysUtils.IntToStr(i + 1) + " of '" + Text + "' must be must a digit 0..9."]);
          i += 1;
          if (!(rtl.rcCharAt(Text,i - 1) === "}")) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid string pattern, missing } at index " + pas.SysUtils.IntToStr(i) + " of '" + Text + "'"]);
          var $tmp = c;
          if ($tmp === "0") {
            this.Text = this.Text + variable0}
           else if ($tmp === "1") {
            this.Text = this.Text + variable1}
           else if ($tmp === "2") {
            this.Text = this.Text + variable2}
           else if ($tmp === "3") {
            this.Text = this.Text + variable3}
           else if ($tmp === "4") {
            this.Text = this.Text + variable4}
           else if ($tmp === "5") {
            this.Text = this.Text + variable5}
           else if ($tmp === "6") {
            this.Text = this.Text + variable6}
           else if ($tmp === "7") {
            this.Text = this.Text + variable7}
           else if ($tmp === "8") {
            this.Text = this.Text + variable8}
           else if ($tmp === "9") {
            this.Text = this.Text + variable9}
           else {
            if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Internal program error."]);
          };
        } else {
          this.Text = this.Text + c;
        };
        i += 1;
      } while (!(i > l));
      return this;
    };
    this.GetErrorCode = function () {
      var Result = 0;
      Result = rtl.rc(this.ErrorCode,0,92);
      return Result;
    };
    this.GetText = function () {
      var Result = "";
      Result = this.Text;
      return Result;
    };
    rtl.addIntf(this,$mod.IMessage);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.Initialize = function () {
    pas.Common.msgLists.msgUser = pas.Classes.TStringList.$create("Create$1");
    pas.Common.msgLists.msgWarning = pas.Classes.TStringList.$create("Create$1");
    pas.Common.msgLists.msgNote = pas.Classes.TStringList.$create("Create$1");
  };
  this.Error = function (tokenIndex, msg) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var effectiveTokenIndex = 0;
    var token = null;
    var previousToken = null;
    if (!pas.Common.isConst) {
      if (tokenIndex <= pas.Common.NumTok()) {
        effectiveTokenIndex = rtl.rc(tokenIndex,-2147483648,2147483647)}
       else effectiveTokenIndex = rtl.rc(pas.Common.NumTok(),-2147483648,2147483647);
      pas.Console.TextColor(12);
      if (tokenIndex > 0) {
        token = pas.Common.TokenAt(effectiveTokenIndex);
        if (effectiveTokenIndex > 1) {
          previousToken = pas.Common.TokenAt(effectiveTokenIndex - 1);
          pas.System.Writeln(pas.SysUtils.Format("%s (line %d, column %d): Error: %s",pas.System.VarRecs(18,token.SourceLocation.SourceFile.Path,0,token.SourceLocation.Line,0,previousToken.SourceLocation.Column + 1,18,msg)));
        } else {
          pas.System.Writeln(pas.SysUtils.Format("%s (line %d): Error: %s",pas.System.VarRecs(18,token.SourceLocation.SourceFile.Path,0,token.SourceLocation.Line,18,msg)));
        };
      } else {
        pas.System.Writeln("Error: " + msg);
      };
      pas.Console.NormVideo();
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    pas.Common.isError = true;
  };
  this.Error$1 = function (tokenIndex, msg) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var enumValue = 0;
    var enumName = "";
    enumValue = rtl.rc(msg.GetErrorCode(),-2147483648,2147483647);
    enumName = $mod.TErrorCode[msg.GetErrorCode()];
    $mod.Error(tokenIndex,"E" + pas.SysUtils.IntToStr(enumValue) + " - " + enumName + ": " + msg.GetText());
  };
  this.Error$2 = function (tokenIndex, errorCode) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(errorCode,0,92);
    $mod.ErrorForIdentifier(tokenIndex,errorCode,0);
  };
  this.ErrorForIdentifier = function (tokenIndex, errorCode, identIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(errorCode,0,92);
    rtl.rc(identIndex,-2147483648,2147483647);
    var msg = "";
    if (!pas.Common.isConst) {
      msg = $impl.GetErrorMessage(tokenIndex,errorCode,identIndex);
      $mod.Error(tokenIndex,msg);
    };
    pas.Common.isError = true;
  };
  this.ErrorIncompatibleTypes = function (tokenIndex, srcType, dstType, dstPointer) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(srcType,0,191);
    rtl.rc(dstType,0,191);
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "';
      msg = msg + pas.Tokens.InfoAboutToken(srcType) + '" expected "';
      if (dstPointer) msg = msg + "^";
      msg = msg + pas.Tokens.InfoAboutToken(dstType) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleTypes,msg,"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIncompatibleEnumIdentifiers = function (tokenIndex, srcEnumIdent, destEnumIdent) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(srcEnumIdent,-2147483648,2147483647);
    rtl.rc(destEnumIdent,-2147483648,2147483647);
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "' + pas.Common.GetEnumName(srcEnumIdent) + '" expected "' + pas.Common.GetEnumName(destEnumIdent) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleEnum,msg,"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIncompatibleEnumTypeIdentifier = function (tokenIndex, srcType, dstEnumIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(srcType,0,191);
    rtl.rc(dstEnumIndex,-2147483648,2147483647);
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "' + pas.Tokens.InfoAboutToken(srcType) + '" expected "' + pas.Common.GetEnumName(dstEnumIndex) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleEnum,msg,"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIncompatibleEnumIdentifierType = function (tokenIndex, srcEnumIndex, dstType) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(srcEnumIndex,-2147483648,2147483647);
    rtl.rc(dstType,0,191);
    var msg = "";
    var $ir = rtl.createIntfRefs();
    try {
      msg = 'Incompatible types: got "' + pas.Common.GetEnumName(srcEnumIndex) + '" expected "' + pas.Tokens.InfoAboutToken(dstType) + '"';
      $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.IncompatibleEnum,msg,"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.ErrorIdentifierIllegalTypeConversion = function (tokenIndex, identIndex, tokenKind) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(identIndex,-2147483648,2147483647);
    rtl.rc(tokenKind,0,191);
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray(tokenIndex,$mod.TErrorCode.IllegalTypeConversion,identIndex,tokenKind,0);
  };
  this.ErrorIdentifierIncompatibleTypesArray = function (tokenIndex, identIndex, tokenKind) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(identIndex,-2147483648,2147483647);
    rtl.rc(tokenKind,0,191);
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray(tokenIndex,$mod.TErrorCode.IncompatibleTypesArray,identIndex,tokenKind,0);
  };
  this.ErrorIdentifierIncompatibleTypesArrayIdentifier = function (tokenIndex, identIndex, arrayIdentIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(identIndex,-2147483648,2147483647);
    rtl.rc(arrayIdentIndex,-2147483648,2147483647);
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray(tokenIndex,$mod.TErrorCode.IncompatibleTypesArray,identIndex,pas.Tokens.TTokenKind.UNTYPETOK,arrayIdentIndex);
  };
  this.ErrorRangeCheckError = function (tokenIndex, Value, dstType) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(Value,-2147483648,2147483647);
    rtl.rc(dstType,0,191);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.RangeCheckError,$impl.GetRangeCheckText(tokenIndex,Value,dstType),"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.Warning = function (tokenIndex, msg) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var a = "";
    if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
      a = pas.Common.TokenAt(tokenIndex).SourceLocation.SourceFile.Path + " (" + pas.SysUtils.IntToStr(pas.Common.TokenAt(tokenIndex).SourceLocation.Line) + ")" + " Warning: " + msg.GetText();
      if (pas.Common.msgLists.msgWarning.IndexOf(a) < 0) pas.Common.msgLists.msgWarning.Add(a);
    };
  };
  this.WarningAlwaysTrue = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.AlwaysTrue,"Comparison might be always true due to range of constant and expression","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningAlwaysFalse = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.AlwaysFalse,"Comparison might be always false due to range of constant and expression","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningUnreachableCode = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.UnreachableCode,"Unreachable code","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningLoHi = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.LoHi,"lo/hi(dword/qword) returns the upper/lower word/dword","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningShortStringLength = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.ShortStringLength,"String literal has more characters than short string length","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningStripedAllowed = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.StripedAllowed,"Striped array is only allowed for maximum size of [0..255]","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningUserDefined = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.UserDefined,"User defined: " + pas.Common.msgLists.msgUser.Get(pas.Common.TokenAt(tokenIndex).Value),"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningVariableNotInitialized = function (tokenIndex, identIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(identIndex,-2147483648,2147483647);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.VariableNotInit,"Variable '" + pas.Common.IdentifierAt(identIndex).Name + "' does not seem to be initialized","","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.WarningForRangeCheckError = function (tokenIndex, Value, dstType) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(Value,-2147483648,2147483647);
    rtl.rc(dstType,0,191);
    var $ir = rtl.createIntfRefs();
    try {
      $mod.Warning(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[$mod.TErrorCode.RangeCheckError,$impl.GetRangeCheckText(tokenIndex,Value,dstType),"","","","","","","","","",""]),$mod.IMessage)));
    } finally {
      $ir.free();
    };
  };
  this.Note = function (tokenIndex, msg) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var a = "";
    if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
      a = pas.Common.TokenAt(tokenIndex).GetSourceFileLineString() + " Note: " + msg;
      pas.Common.msgLists.msgNote.Add(a);
    };
  };
  this.NoteForIdentifierNotUsed = function (tokenIndex, identIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(identIndex,-2147483648,2147483647);
    var a = "";
    if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) if (pas.System.Pos(".",pas.Common.IdentifierAt(identIndex).Name) === 0) {
      a = pas.Common.TokenAt(tokenIndex).GetSourceFileLineString() + " Note: Local ";
      if (pas.Common.IdentifierAt(identIndex).Kind !== pas.Tokens.TTokenKind.UNITTOK) {
        var $tmp = pas.Common.IdentifierAt(identIndex).Kind;
        if ($tmp === pas.Tokens.TTokenKind.CONSTTOK) {
          a = a + "const"}
         else if ($tmp === pas.Tokens.TTokenKind.TYPETOK) {
          a = a + "type"}
         else if ($tmp === pas.Tokens.TTokenKind.LABELTOK) {
          a = a + "label"}
         else if ($tmp === pas.Tokens.TTokenKind.VARTOK) {
          if (pas.Common.IdentifierAt(identIndex).isAbsolute) {
            a = a + "absolutevar"}
           else a = a + "variable"}
         else if ($tmp === pas.Tokens.TTokenKind.PROCEDURETOK) {
          a = a + "proc"}
         else if ($tmp === pas.Tokens.TTokenKind.FUNCTIONTOK) a = a + "func";
        a = a + " '" + pas.Common.IdentifierAt(identIndex).Name + "'" + " not used";
        if (pas.System.Pos("@FN",pas.Common.IdentifierAt(identIndex).Name) === 1) {}
        else pas.Common.msgLists.msgNote.Add(a);
      };
    };
  };
  this.WritelnMsg = function () {
    var i = 0;
    pas.Console.TextColor(10);
    for (var $l = 0, $end = pas.Common.msgLists.msgWarning.GetCount() - 1; $l <= $end; $l++) {
      i = $l;
      pas.System.Writeln(pas.Common.msgLists.msgWarning.Get(i));
    };
    pas.Console.TextColor(11);
    for (var $l1 = 0, $end1 = pas.Common.msgLists.msgNote.GetCount() - 1; $l1 <= $end1; $l1++) {
      i = $l1;
      pas.System.Writeln(pas.Common.msgLists.msgNote.Get(i));
    };
    pas.Console.NormVideo();
  };
  $mod.$implcode = function () {
    $impl.GetExpectedButTokenFound = function (tokenIndex) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      var Result = "";
      Result = " expected but '" + pas.Common.TokenList.GetTokenSpellingAtIndex(tokenIndex) + "' found";
      return Result;
    };
    $impl.GetRangeCheckText = function (tokenIndex, Value, dstType) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      rtl.rc(Value,-2147483648,2147483647);
      rtl.rc(dstType,0,191);
      var Result = "";
      var msg = "";
      msg = "Range check error while evaluating constants. " + pas.SysUtils.IntToStr(Value) + " must be between " + pas.SysUtils.IntToStr(pas.Common.LowBound(tokenIndex,dstType)) + " and " + pas.SysUtils.IntToStr(pas.Common.HighBound(tokenIndex,dstType)) + ")";
      Result = msg;
      return Result;
    };
    $impl.GetUserDefinedText = function (tokenIndex) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      var Result = "";
      Result = "User defined: " + pas.Common.msgLists.msgUser.Get(pas.Common.TokenAt(tokenIndex).Value);
      return Result;
    };
    $impl.GetErrorMessage = function (tokenIndex, errorCode, identIndex) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      rtl.rc(errorCode,0,92);
      rtl.rc(identIndex,-2147483648,2147483647);
      var Result = "";
      Result = "";
      var $tmp = errorCode;
      if ($tmp === $mod.TErrorCode.UserDefined) {
        Result = $impl.GetUserDefinedText(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.UnknownIdentifier) {
        if (identIndex > 0) {
          Result = "Identifier not found '" + pas.Common.IdentifierAt(identIndex).Alias + "'"}
         else Result = "Identifier not found '" + pas.Common.TokenAt(tokenIndex).Name + "'";
      } else if ($tmp === $mod.TErrorCode.IncompatibleTypeOf) {
        Result = "Incompatible type of " + pas.Common.IdentifierAt(identIndex).Name;
      } else if ($tmp === $mod.TErrorCode.WrongNumberOfParameters) {
        Result = 'Wrong number of parameters specified for call to "' + pas.Common.IdentifierAt(identIndex).Name + '"';
      } else if ($tmp === $mod.TErrorCode.CantAdrConstantExp) {
        Result = "Can't take the address of constant expressions";
      } else if ($tmp === $mod.TErrorCode.OParExpected) {
        Result = "'('" + $impl.GetExpectedButTokenFound(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.IllegalExpression) {
        Result = "Illegal expression";
      } else if ($tmp === $mod.TErrorCode.VariableExpected) {
        Result = "Variable identifier expected";
      } else if ($tmp === $mod.TErrorCode.OrdinalExpExpected) {
        Result = "Ordinal expression expected";
      } else if ($tmp === $mod.TErrorCode.OrdinalExpectedFOR) {
        Result = "Ordinal expression expected as 'FOR' loop counter value";
      } else if ($tmp === $mod.TErrorCode.IdentifierExpected) {
        Result = "Identifier" + $impl.GetExpectedButTokenFound(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.IdNumExpExpected) {
        Result = "Identifier, number or expression" + $impl.GetExpectedButTokenFound(tokenIndex);
      } else if ($tmp === $mod.TErrorCode.StringTruncated) {
        Result = "String constant truncated to fit STRING[" + pas.SysUtils.IntToStr(pas.Common.IdentifierAt(identIndex).NumAllocElements - 1) + "]";
      } else if ($tmp === $mod.TErrorCode.CantReadWrite) {
        Result = "Can't read or write variables of this type";
      } else if ($tmp === $mod.TErrorCode.TypeMismatch) {
        Result = "Type mismatch";
      } else if ($tmp === $mod.TErrorCode.IllegalQualifier) {
        Result = "Illegal qualifier";
      } else if ($tmp === $mod.TErrorCode.SubrangeBounds) {
        Result = "Constant expression violates subrange bounds";
      } else if ($tmp === $mod.TErrorCode.TooManyParameters) {
        Result = "Too many formal parameters in " + pas.Common.IdentifierAt(identIndex).Name;
      } else if ($tmp === $mod.TErrorCode.CantDetermine) {
        Result = "Can't determine which overloaded function '" + pas.Common.IdentifierAt(identIndex).Name + "' to call";
      } else if ($tmp === $mod.TErrorCode.UpperBoundOfRange) {
        Result = "Upper bound of range is less than lower bound";
      } else if ($tmp === $mod.TErrorCode.HighLimit) {
        Result = "High range limit > " + pas.SysUtils.IntToStr(65535);
      };
      return Result;
    };
    $impl.ErrorIdentifierIllegalTypeConversionOrIncompatibleTypesArray = function (tokenIndex, errorCode, identIndex, tokenKind, arrayIdentIndex) {
      rtl.rc(tokenIndex,-2147483648,2147483647);
      rtl.rc(errorCode,0,92);
      rtl.rc(identIndex,-2147483648,2147483647);
      rtl.rc(tokenKind,0,191);
      rtl.rc(arrayIdentIndex,-2147483648,2147483647);
      var identifier = null;
      var arrayIdentifier = null;
      var msg = "";
      var $ir = rtl.createIntfRefs();
      try {
        if (!((errorCode === $mod.TErrorCode.IllegalTypeConversion) || (errorCode === $mod.TErrorCode.IncompatibleTypesArray))) throw pas.SysUtils.EAssertionFailed.$create("Create");
        identifier = pas.Common.IdentifierAt(identIndex);
        if (errorCode === $mod.TErrorCode.IllegalTypeConversion) {
          msg = 'Illegal type conversion: "Array[0..'}
         else {
          msg = "Incompatible types: got ";
          if (identifier.NumAllocElements > 0) msg = msg + '"Array[0..';
        };
        if (identifier.NumAllocElements_ > 0) {
          msg = msg + pas.SysUtils.IntToStr(identifier.NumAllocElements - 1) + "] Of Array[0.." + pas.SysUtils.IntToStr(identifier.NumAllocElements_ - 1) + "] Of " + pas.Tokens.InfoAboutToken(identifier.AllocElementType) + '" '}
         else if (identifier.NumAllocElements === 0) {
          if (identifier.AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) {
            msg = msg + '"^' + pas.Tokens.InfoAboutToken(identifier.AllocElementType) + '" '}
           else msg = msg + '"' + pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.POINTERTOK) + '" ';
        } else {
          msg = msg + pas.SysUtils.IntToStr(identifier.NumAllocElements - 1) + "] Of " + pas.Tokens.InfoAboutToken(identifier.AllocElementType) + '" ';
        };
        if (errorCode === $mod.TErrorCode.IllegalTypeConversion) {
          msg = msg + 'to "' + pas.Tokens.InfoAboutToken(tokenKind) + '"'}
         else if (arrayIdentIndex > 0) {
          arrayIdentifier = pas.Common.IdentifierAt(arrayIdentIndex);
          msg = msg + "expected ";
          if (pas.Common.IdentifierAt(arrayIdentIndex).NumAllocElements_ > 0) {
            msg = msg + '"Array[0..' + pas.SysUtils.IntToStr(arrayIdentifier.NumAllocElements - 1) + "] Of Array[0.." + pas.SysUtils.IntToStr(arrayIdentifier.NumAllocElements_ - 1) + "] Of " + pas.Tokens.InfoAboutToken(identifier.AllocElementType) + '"'}
           else if (arrayIdentifier.AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
            msg = msg + '"^' + pas.Common.GetTypeAtIndex(arrayIdentifier.NumAllocElements).Field[0].Name + '"'}
           else {
            if (arrayIdentifier.DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
              msg = msg + '"' + pas.Common.GetTypeAtIndex(arrayIdentifier.NumAllocElements).Field[0].Name + '"'}
             else msg = msg + '"Array[0..' + pas.SysUtils.IntToStr(arrayIdentifier.NumAllocElements - 1) + "] Of " + pas.Tokens.InfoAboutToken(arrayIdentifier.AllocElementType) + '"';
          };
        } else {
          msg = msg + 'expected "' + pas.Tokens.InfoAboutToken(tokenKind) + '"';
        };
        $mod.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT($mod.TMessage.$create("Create$1",[errorCode,msg,"","","","","","","","","",""]),$mod.IMessage)));
      } finally {
        $ir.free();
      };
    };
  };
},["Classes","SysUtils","Console","Utilities"]);
rtl.module("Common",["System","Classes","SysUtils","CommonTypes","CompilerTypes","Datatypes","FileIO","Memory","StringUtilities","Targets","Tokens"],function () {
  "use strict";
  var $mod = this;
  this.title = "1.7.5-Test";
  this.target = pas.Targets.TTarget.$new();
  this.CODEORIGIN_BASE = -1;
  this.DATA_BASE = -1;
  this.ZPAGE_BASE = -1;
  this.STACK_BASE = -1;
  this.OutFile = null;
  this.PROGRAM_NAME = "Program";
  this.LIBRARY_NAME = "";
  this.AsmBlockIndex = 0;
  this.AsmBlock = rtl.arraySetLength(null,"",4096);
  this._DataSegment = rtl.arraySetLength(null,0,65536);
  this._VarDataSize = 0;
  this.StaticStringData = rtl.arraySetLength(null,0,65536);
  this.AddDefines = 1;
  this.NumDefines = 1;
  this.Defines$a$clone = function (a) {
    var b = [];
    b.length = 256;
    for (var c = 0; c < 256; c++) b[c] = pas.CompilerTypes.TDefine.$clone(a[c]);
    return b;
  };
  this.Defines = rtl.arraySetLength(null,pas.CompilerTypes.TDefine,256);
  this.NumTypes = 0;
  this._TypeArray$a$clone = function (a) {
    var b = [];
    b.length = 1024;
    for (var c = 0; c < 1024; c++) b[c] = pas.CompilerTypes.TType.$clone(a[c]);
    return b;
  };
  this._TypeArray = rtl.arraySetLength(null,pas.CompilerTypes.TType,1024);
  this.TokenList = null;
  this.NumIdent_ = 0;
  this.IdentifierList = null;
  this.SourceFileList = null;
  this.IFTmpPosStack = [];
  this.BreakPosStackTop = 0;
  this.BreakPosStack$a$clone = function (a) {
    var b = [];
    b.length = 513;
    for (var c = 0; c < 513; c++) b[c] = pas.CompilerTypes.TPosStack.$clone(a[c]);
    return b;
  };
  this.BreakPosStack = rtl.arraySetLength(null,pas.CompilerTypes.TPosStack,513);
  this.CodePosStackTop = 0;
  this.CodePosStack = rtl.arraySetLength(null,0,513);
  this.BlockStackTop = 0;
  this.BlockStack = rtl.arraySetLength(null,0,16384);
  this.CallGraph$a$clone = function (a) {
    var b = [];
    b.length = 16384;
    for (var c = 0; c < 16384; c++) b[c] = pas.CompilerTypes.TCallGraphNode.$clone(a[c]);
    return b;
  };
  this.CallGraph = rtl.arraySetLength(null,pas.CompilerTypes.TCallGraphNode,16384);
  this.OldConstValType = 0;
  this.NumPredefIdent = 0;
  this.NumStaticStrChars = 0;
  this.NumBlocks = 0;
  this.run_func = 0;
  this.NumProc = 0;
  this.CodeSize = 0;
  this.NumStaticStrCharsTmp = 0;
  this.IfCnt = 0;
  this.CaseCnt = 0;
  this.IfdefLevel = 0;
  this.ShrShlCnt = 0;
  this.pass = 0;
  this.ActiveSourceFile = null;
  this.FastMul = 0;
  this.resArray = [];
  this.optyA = "";
  this.optyY = "";
  this.optyBP2 = "";
  this.optyFOR0 = "";
  this.optyFOR1 = "";
  this.optyFOR2 = "";
  this.optyFOR3 = "";
  rtl.recNewT(this,"msgLists$a",function () {
    this.msgWarning = null;
    this.msgNote = null;
    this.msgUser = null;
    this.$eq = function (b) {
      return (this.msgWarning === b.msgWarning) && (this.msgNote === b.msgNote) && (this.msgUser === b.msgUser);
    };
    this.$assign = function (s) {
      this.msgWarning = s.msgWarning;
      this.msgNote = s.msgNote;
      this.msgUser = s.msgUser;
      return this;
    };
  });
  this.msgLists = this.msgLists$a.$new();
  this.LinkObj = [];
  this.unitPathList = null;
  this.WithName = [];
  this.iOut = 0;
  this.outTmp = "";
  this.OptimizeBuf = [];
  rtl.recNewT(this,"optimize$a",function () {
    this.use = false;
    this.SourceFile = null;
    this.line = 0;
    this.oldLine = 0;
    this.$eq = function (b) {
      return (this.use === b.use) && (this.SourceFile === b.SourceFile) && (this.line === b.line) && (this.oldLine === b.oldLine);
    };
    this.$assign = function (s) {
      this.use = s.use;
      this.SourceFile = s.SourceFile;
      this.line = s.line;
      this.oldLine = s.oldLine;
      return this;
    };
  });
  this.optimize = this.optimize$a.$new();
  rtl.recNewT(this,"codealign$a",function () {
    this.proc = 0;
    this.loop = 0;
    this.link = 0;
    this.$eq = function (b) {
      return (this.proc === b.proc) && (this.loop === b.loop) && (this.link === b.link);
    };
    this.$assign = function (s) {
      this.proc = s.proc;
      this.loop = s.loop;
      this.link = s.link;
      return this;
    };
  });
  this.codealign = this.codealign$a.$new();
  this.PROGRAMTOK_USE = false;
  this.INTERFACETOK_USE = false;
  this.LIBRARYTOK_USE = false;
  this.LIBRARY_USE = false;
  this.RCLIBRARY = false;
  this.OutputDisabled = false;
  this.isConst = false;
  this.isError = false;
  this.isInterrupt = false;
  this.IOCheck = false;
  this.Macros = false;
  this.DataSegmentUse = false;
  this.LoopUnroll = false;
  this.PublicSection = false;
  this.NumTok = function () {
    var Result = 0;
    Result = 0;
    if ($mod.TokenList !== null) {
      Result = rtl.rc($mod.TokenList.Size(),-2147483648,2147483647);
    };
    return Result;
  };
  this.TokenAt = function (tokenIndex) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var Result = null;
    if (!($mod.TokenList !== null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["TokenList not yet created."]);
    Result = $mod.TokenList.GetTokenAtIndex(tokenIndex);
    return Result;
  };
  this.NumIdent = function () {
    var Result = 0;
    Result = rtl.rc($mod.NumIdent_,-2147483648,2147483647);
    return Result;
  };
  this.IdentifierAt = function (identifierIndex) {
    rtl.rc(identifierIndex,-2147483648,2147483647);
    var Result = null;
    if (!($mod.IdentifierList !== null)) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["IdentifierList not yet created."]);
    Result = $mod.IdentifierList.GetIdentifierAtIndex(identifierIndex);
    return Result;
  };
  this.AddDefine = function (defineName) {
    if ($mod.SearchDefine(defineName) === 0) {
      $mod.NumDefines += 1;
      rtl.rcArrR($mod.Defines,$mod.NumDefines - 1).Name = defineName;
      rtl.rcArrR($mod.Defines,$mod.NumDefines - 1).Macro = "";
      rtl.rcArrR($mod.Defines,$mod.NumDefines - 1).Line = 0;
    };
  };
  this.SearchDefine = function (defineName) {
    var Result = 0;
    var i = 0;
    for (var $l = 1, $end = $mod.NumDefines; $l <= $end; $l++) {
      i = $l;
      if (rtl.rcArrR($mod.Defines,i - 1).Name === defineName) {
        return i;
      };
    };
    Result = 0;
    return Result;
  };
  this.AddPath = function (folderPath) {
    $mod.unitPathList.AddFolder(folderPath);
  };
  this.CheckArrayIndex = function (i, IdentIndex, ArrayIndex, ArrayIndexType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(IdentIndex,-2147483648,2147483647);
    rtl.rc(ArrayIndex,-2147483648,2147483647);
    rtl.rc(ArrayIndexType,0,191);
    if (($mod.IdentifierAt(IdentIndex).NumAllocElements > 0) && ($mod.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.RECORDTOK)) if ((ArrayIndex < 0) || (ArrayIndex > (($mod.IdentifierAt(IdentIndex).NumAllocElements - 1) + (($mod.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) + 0)))) if ($mod.IdentifierAt(IdentIndex).NumAllocElements !== 1) pas.Messages.WarningForRangeCheckError(i,ArrayIndex,ArrayIndexType);
  };
  this.CheckArrayIndex_ = function (i, IdentIndex, ArrayIndex, ArrayIndexType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(IdentIndex,-2147483648,2147483647);
    rtl.rc(ArrayIndex,-2147483648,2147483647);
    rtl.rc(ArrayIndexType,0,191);
    if ($mod.IdentifierAt(IdentIndex).NumAllocElements_ > 0) if ((ArrayIndex < 0) || (ArrayIndex > (($mod.IdentifierAt(IdentIndex).NumAllocElements_ - 1) + (($mod.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) + 0)))) if ($mod.IdentifierAt(IdentIndex).NumAllocElements_ !== 1) pas.Messages.WarningForRangeCheckError(i,ArrayIndex,ArrayIndexType);
  };
  this.CheckOperator = function (ErrTokenIndex, op, DataType, RightType) {
    rtl.rc(ErrTokenIndex,-2147483648,2147483647);
    rtl.rc(op,0,191);
    rtl.rc(DataType,0,191);
    rtl.rc(RightType,0,191);
    var $ir = rtl.createIntfRefs();
    try {
      if (((DataType in pas.Datatypes.RealTypes) && !(op in rtl.createSet(pas.Tokens.TTokenKind.MULTOK,pas.Tokens.TTokenKind.DIVTOK,pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK,pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK,pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.LTTOK))) || ((DataType in pas.Datatypes.IntegerTypes) && !(op in rtl.createSet(pas.Tokens.TTokenKind.MULTOK,pas.Tokens.TTokenKind.IDIVTOK,pas.Tokens.TTokenKind.MODTOK,pas.Tokens.TTokenKind.SHLTOK,pas.Tokens.TTokenKind.SHRTOK,pas.Tokens.TTokenKind.ANDTOK,pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK,pas.Tokens.TTokenKind.ORTOK,pas.Tokens.TTokenKind.XORTOK,pas.Tokens.TTokenKind.NOTTOK,pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK,pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.LTTOK,pas.Tokens.TTokenKind.INTOK))) || ((DataType === pas.Tokens.TTokenKind.CHARTOK) && !(op in rtl.createSet(pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK,pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.LTTOK,pas.Tokens.TTokenKind.INTOK))) || ((DataType === pas.Tokens.TTokenKind.BOOLEANTOK) && !(op in rtl.createSet(pas.Tokens.TTokenKind.ANDTOK,pas.Tokens.TTokenKind.ORTOK,pas.Tokens.TTokenKind.XORTOK,pas.Tokens.TTokenKind.NOTTOK,pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK,pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.LTTOK))) || ((DataType in pas.Datatypes.Pointers) && !(op in rtl.createSet(pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK,pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.LTTOK,pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK)))) {
        if (DataType === RightType) {
          pas.Messages.Error$1(ErrTokenIndex,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OperatorNotOverloaded,"Operator is not overloaded: " + '"' + pas.Tokens.InfoAboutToken(DataType) + '" ' + pas.Tokens.InfoAboutToken(op) + ' "' + pas.Tokens.InfoAboutToken(RightType) + '"',"","","","","","","","","",""]),pas.Messages.IMessage)))}
         else pas.Messages.Error$1(ErrTokenIndex,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OperationNotSupportedForTypes,'Operation "' + pas.Tokens.InfoAboutToken(op) + '" not supported for types "' + pas.Tokens.InfoAboutToken(DataType) + '" and "' + pas.Tokens.InfoAboutToken(RightType) + '"',"","","","","","","","","",""]),pas.Messages.IMessage)));
      };
    } finally {
      $ir.free();
    };
  };
  this.CheckTok = function (i, ExpectedTokenCode) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(ExpectedTokenCode,0,191);
    var Token = null;
    var found = "";
    var expected = "";
    var $ir = rtl.createIntfRefs();
    try {
      Token = $mod.TokenAt(i);
      if (Token.Kind !== ExpectedTokenCode) {
        found = Token.GetSpelling();
        expected = pas.Tokens.GetHumanReadbleTokenSpelling(ExpectedTokenCode);
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error, " + "'" + expected + "'" + " expected but '" + found + "' found.","","","","","","","","","",""]),pas.Messages.IMessage)));
      };
    } finally {
      $ir.free();
    };
  };
  this.DefineStaticString = function (StrTokenIndex, StrValue) {
    rtl.rc(StrTokenIndex,-2147483648,2147483647);
    var i = 0;
    var len = 0;
    var Data = rtl.arraySetLength(null,0,65536);
    len = rtl.rc(StrValue.length,-2147483648,2147483647);
    if (len > 255) {
      Data[0] = 255}
     else Data[0] = rtl.rc(len,0,65535);
    if (($mod.NumStaticStrChars + len) > 0xFFFF) {
      pas.System.Writeln("DefineStaticString: " + pas.StringUtilities.IntToStr(len));
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    for (var $l = 1, $end = len; $l <= $end; $l++) {
      i = $l;
      rtl.rcArrW(Data,i,StrValue.charCodeAt(i - 1));
    };
    for (var $l1 = 0, $end1 = $mod.NumStaticStrChars - len - 1; $l1 <= $end1; $l1++) {
      i = $l1;
      if (pas.Utilities.CompareWord(Data[0],rtl.rcArrR($mod.StaticStringData,i),len + 1) === 0) {
        $mod.TokenAt(StrTokenIndex).StrLength = rtl.rc(len,0,65535);
        $mod.TokenAt(StrTokenIndex).StrAddress = rtl.rc(256 + i,0,65535);
        return;
      };
    };
    $mod.TokenAt(StrTokenIndex).StrLength = rtl.rc(len,0,65535);
    $mod.TokenAt(StrTokenIndex).StrAddress = rtl.rc(256 + $mod.NumStaticStrChars,0,65535);
    rtl.rcArrW($mod.StaticStringData,$mod.NumStaticStrChars,Data[0]);
    $mod.NumStaticStrChars += 1;
    for (var $l2 = 1, $end2 = len; $l2 <= $end2; $l2++) {
      i = $l2;
      rtl.rcArrW($mod.StaticStringData,$mod.NumStaticStrChars,StrValue.charCodeAt(i - 1));
      $mod.NumStaticStrChars += 1;
    };
  };
  this.DefineFilename = function (tokenIndex, StrValue) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    var i = 0;
    for (var $l = 0, $end = rtl.length($mod.LinkObj) - 1 - 1; $l <= $end; $l++) {
      i = $l;
      if (rtl.rcArrR($mod.LinkObj,i) === StrValue) {
        $mod.TokenAt(tokenIndex).Value = rtl.rc(i,-2147483648,2147483647);
        return;
      };
    };
    i = rtl.rc(rtl.length($mod.LinkObj) - 1,-2147483648,2147483647);
    rtl.rcArrW($mod.LinkObj,i,StrValue);
    $mod.LinkObj = rtl.arraySetLength($mod.LinkObj,"",i + 2);
    $mod.TokenAt(tokenIndex).Value = rtl.rc(i,-2147483648,2147483647);
  };
  this.FindFile = function (FileName, ftyp) {
    var Result = "";
    var unitPathText = "";
    var msg = null;
    try {
      Result = $mod.unitPathList.FindFile(FileName);
      if (Result === "") {
        if ($mod.unitPathList.GetSize() === 0) {
          unitPathText = "an empty unit path. Specify the folders for the unit path via the '-ipath:<folder>' command line parameter";
        } else {
          unitPathText = "unit path '" + $mod.unitPathList.ToString() + "'";
        };
        if (ftyp === "unit") {
          msg = rtl.setIntfL(msg,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileNotFound,"Cannot find {0} '{1}' used by program '{2}' in {3}.",ftyp,pas.SysUtils.ChangeFileExt(FileName,""),$mod.PROGRAM_NAME,unitPathText,"","","","","",""]),pas.Messages.IMessage),true);
        } else {
          msg = rtl.setIntfL(msg,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileNotFound,"Cannnot find {0} '{1}' used by program '{2}' in {3}.",ftyp,FileName,$mod.PROGRAM_NAME,unitPathText,"","","","","",""]),pas.Messages.IMessage),true);
        };
        pas.Messages.Error$1($mod.NumTok(),msg);
      };
    } finally {
      rtl._Release(msg);
    };
    return Result;
  };
  this.GetCommonConstType = function (ErrTokenIndex, DstType, SrcType, err) {
    rtl.rc(ErrTokenIndex,-2147483648,2147483647);
    rtl.rc(DstType,0,191);
    rtl.rc(SrcType,0,191);
    var Result = false;
    Result = false;
    if ((pas.Datatypes.GetDataSize(DstType) < pas.Datatypes.GetDataSize(SrcType)) || ((DstType === pas.Tokens.TTokenKind.REALTOK) && (SrcType !== pas.Tokens.TTokenKind.REALTOK)) || ((DstType !== pas.Tokens.TTokenKind.REALTOK) && (SrcType === pas.Tokens.TTokenKind.REALTOK)) || ((DstType === pas.Tokens.TTokenKind.SINGLETOK) && (SrcType !== pas.Tokens.TTokenKind.SINGLETOK)) || ((DstType !== pas.Tokens.TTokenKind.SINGLETOK) && (SrcType === pas.Tokens.TTokenKind.SINGLETOK)) || ((DstType === pas.Tokens.TTokenKind.HALFSINGLETOK) && (SrcType !== pas.Tokens.TTokenKind.HALFSINGLETOK)) || ((DstType !== pas.Tokens.TTokenKind.HALFSINGLETOK) && (SrcType === pas.Tokens.TTokenKind.HALFSINGLETOK)) || ((DstType === pas.Tokens.TTokenKind.SHORTREALTOK) && (SrcType !== pas.Tokens.TTokenKind.SHORTREALTOK)) || ((DstType !== pas.Tokens.TTokenKind.SHORTREALTOK) && (SrcType === pas.Tokens.TTokenKind.SHORTREALTOK)) || ((DstType in pas.Datatypes.IntegerTypes) && (SrcType in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BOOLEANTOK,pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.DATAORIGINOFFSET,pas.Tokens.TTokenKind.CODEORIGINOFFSET,pas.Tokens.TTokenKind.STRINGPOINTERTOK))) || ((SrcType in pas.Datatypes.IntegerTypes) && (DstType in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BOOLEANTOK)))) if (err) {
      pas.Messages.ErrorIncompatibleTypes(ErrTokenIndex,SrcType,DstType,false)}
     else Result = true;
    return Result;
  };
  this.GetCommonType = function (ErrTokenIndex, LeftType, RightType) {
    rtl.rc(ErrTokenIndex,-2147483648,2147483647);
    rtl.rc(LeftType,0,191);
    rtl.rc(RightType,0,191);
    var Result = 0;
    Result = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
    if (LeftType === RightType) {
      Result = rtl.rc(LeftType,0,191)}
     else if ((LeftType in pas.Datatypes.IntegerTypes) && (RightType in pas.Datatypes.IntegerTypes)) Result = rtl.rc(LeftType,0,191);
    if ((LeftType in pas.Datatypes.Pointers) && (RightType in pas.Datatypes.Pointers)) Result = rtl.rc(LeftType,0,191);
    if (LeftType === pas.Tokens.TTokenKind.UNTYPETOK) Result = rtl.rc(RightType,0,191);
    if (Result === pas.Tokens.TTokenKind.UNTYPETOK) pas.Messages.ErrorIncompatibleTypes(ErrTokenIndex,RightType,LeftType,false);
    return Result;
  };
  this.GetEnumName = function (IdentIndex) {
    rtl.rc(IdentIndex,-2147483648,2147483647);
    var Result = "";
    var IdentTemp = 0;
    function Search(Num) {
      rtl.rc(Num,0,4294967295);
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      Result = 0;
      for (var $l = $mod.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = 1, $end = $mod.NumIdent(); $l1 <= $end; $l1++) {
          IdentIndex = $l1;
          if (($mod.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) && ($mod.IdentifierAt(IdentIndex).NumAllocElements === Num) && (rtl.rcArrR($mod.BlockStack,BlockStackIndex) === $mod.IdentifierAt(IdentIndex).Block)) return IdentIndex;
        };
      };
      return Result;
    };
    Result = "";
    if ($mod.IdentifierAt(IdentIndex).NumAllocElements > 0) {
      IdentTemp = rtl.rc(Search($mod.IdentifierAt(IdentIndex).NumAllocElements),-2147483648,2147483647);
      if (IdentTemp > 0) Result = $mod.IdentifierAt(IdentTemp).Name;
    } else if ($mod.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
      IdentTemp = rtl.rc(Search($mod.IdentifierAt(IdentIndex).NumAllocElements),-2147483648,2147483647);
      if (IdentTemp > 0) Result = $mod.IdentifierAt(IdentTemp).Name;
    };
    return Result;
  };
  this.GetVAL = function (a) {
    var Result = 0;
    var err = 0;
    Result = rtl.rc(-1,-2147483648,2147483647);
    if (a !== "") if (rtl.rcCharAt(a,0) === "#") {
      pas.System.val$6(pas.System.Copy(a,2,a.length),{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-2147483648,2147483647);
          Result = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          rtl.rc(v,-2147483648,2147483647);
          err = v;
        }});
      if (err > 0) Result = rtl.rc(-1,-2147483648,2147483647);
    };
    return Result;
  };
  this.LowBound = function (i, DataType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(DataType,0,191);
    var Result = 0;
    var $ir = rtl.createIntfRefs();
    try {
      Result = 0;
      var $tmp = DataType;
      if ($tmp === pas.Tokens.TTokenKind.UNTYPETOK) {
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantReadWrite,"Can't read or write variables of this type","","","","","","","","","",""]),pas.Messages.IMessage)))}
       else if ($tmp === pas.Tokens.TTokenKind.INTEGERTOK) {
        Result = -2147483648}
       else if ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) {
        Result = -32768}
       else if ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) {
        Result = -128}
       else if ($tmp === pas.Tokens.TTokenKind.CHARTOK) {
        Result = 0}
       else if ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK) {
        Result = 0}
       else if ($tmp === pas.Tokens.TTokenKind.BYTETOK) {
        Result = 0}
       else if ($tmp === pas.Tokens.TTokenKind.WORDTOK) {
        Result = 0}
       else if ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) {
        Result = 0}
       else if ($tmp === pas.Tokens.TTokenKind.STRINGTOK) {
        Result = 1}
       else if ($tmp === pas.Tokens.TTokenKind.POINTERTOK) {
        Result = 0}
       else {
        pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeMismatch,"Type mismatch","","","","","","","","","",""]),pas.Messages.IMessage)));
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.HighBound = function (i, DataType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(DataType,0,191);
    var Result = 0;
    var $ir = rtl.createIntfRefs();
    try {
      Result = 0;
      var $tmp = DataType;
      if ($tmp === pas.Tokens.TTokenKind.UNTYPETOK) {
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantReadWrite,"Can't read or write variables of this type","","","","","","","","","",""]),pas.Messages.IMessage)))}
       else if ($tmp === pas.Tokens.TTokenKind.INTEGERTOK) {
        Result = 2147483647}
       else if ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) {
        Result = 32767}
       else if ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) {
        Result = 127}
       else if ($tmp === pas.Tokens.TTokenKind.CHARTOK) {
        Result = 255}
       else if ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK) {
        Result = 1}
       else if ($tmp === pas.Tokens.TTokenKind.BYTETOK) {
        Result = 255}
       else if ($tmp === pas.Tokens.TTokenKind.WORDTOK) {
        Result = 65535}
       else if ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) {
        Result = 2147483647}
       else if ($tmp === pas.Tokens.TTokenKind.STRINGTOK) {
        Result = 255}
       else if ($tmp === pas.Tokens.TTokenKind.POINTERTOK) {
        Result = 65535}
       else {
        pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeMismatch,"Type mismatch","","","","","","","","","",""]),pas.Messages.IMessage)));
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.GetVarDataSize = function () {
    var Result = 0;
    Result = rtl.rc($mod._VarDataSize,-2147483648,2147483647);
    return Result;
  };
  this.SetVarDataSize = function (tokenIndex, size) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(size,-2147483648,2147483647);
    $mod._VarDataSize = rtl.rc(size,-2147483648,2147483647);
  };
  this.IncVarDataSize = function (tokenIndex, size) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(size,-2147483648,2147483647);
    $mod.SetVarDataSize(tokenIndex,$mod._VarDataSize + size);
  };
  this.GetTypeAtIndex = function (typeIndex) {
    rtl.rc(typeIndex,-2147483648,2147483647);
    var Result = pas.CompilerTypes.TType.$new();
    Result.$assign(rtl.rcArrR($mod._TypeArray,typeIndex - 1));
    return Result;
  };
  this.LogTrace = function (message) {
  };
},["Messages","Utilities"]);
rtl.module("Numbers",["System","Datatypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FromInt64 = function (i) {
    rtl.rc(i,-9007199254740991,9007199254740991);
    var Result = 0;
    var fl = 0.0;
    var ftmp = rtl.arraySetLength(null,0,2);
    fl = rtl.rc(i,-2147483648,2147483647);
    ftmp = $impl.ToTFloat(fl);
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        rtl.rc(v,-9007199254740991,9007199254740991);
        Result = v;
      }});
    return Result;
  };
  this.FromSingle = function (s) {
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.ToTFloat(s);
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        rtl.rc(v,-9007199254740991,9007199254740991);
        Result = v;
      }});
    return Result;
  };
  this.CastToReal = function (a) {
    rtl.rc(a,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    Result = rtl.rc(ftmp[0],-9007199254740991,9007199254740991);
    return Result;
  };
  this.CastToSingle = function (a) {
    rtl.rc(a,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    Result = rtl.rc(ftmp[1],-9007199254740991,9007199254740991);
    return Result;
  };
  this.CastToHalfSingle = function (a) {
    rtl.rc(a,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    ftmp = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    Result = rtl.rc($impl.CardToHalf(ftmp),-9007199254740991,9007199254740991);
    return Result;
  };
  this.Assign = function (valType, s) {
    rtl.rc(valType,0,191);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    if (valType in pas.Datatypes.RealTypes) {
      ftmp = $impl.ToTFloat(s);
    } else {
      ftmp[0] = rtl.rc(Math.round(s),-2147483648,2147483647);
      ftmp[1] = 0;
    };
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        rtl.rc(v,-9007199254740991,9007199254740991);
        Result = v;
      }});
    return Result;
  };
  this.Negate = function (valType, a) {
    rtl.rc(valType.get(),0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    if (valType.get() in pas.Datatypes.RealTypes) {
      ftmp = $impl.Zero();
      Result = 0;
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl = -fl;
      ftmp = $impl.ToTFloat(fl);
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          Result = v;
        }});
    } else {
      Result = rtl.rc(-a,-9007199254740991,9007199254740991);
      if (valType.get() in pas.Datatypes.IntegerTypes) valType.set(pas.Datatypes.GetValueType(Result));
    };
    return Result;
  };
  this.Add = function (valType, a, b) {
    rtl.rc(valType,0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    rtl.rc(b,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    if (valType in pas.Datatypes.RealTypes) {
      ftmp = $impl.Zero();
      ftmp_ = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      $impl.MoveTFloat(b,{get: function () {
          return ftmp_;
        }, set: function (v) {
          ftmp_ = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl_ = $impl.ToSingle(ftmp_);
      fl = fl + fl_;
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          Result = v;
        }});
    } else {
      Result = rtl.rc(a + b,-9007199254740991,9007199254740991);
    };
    return Result;
  };
  this.Subtract = function (valType, a, b) {
    rtl.rc(valType,0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    rtl.rc(b,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    if (valType in pas.Datatypes.RealTypes) {
      ftmp = $impl.Zero();
      ftmp_ = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      $impl.MoveTFloat(b,{get: function () {
          return ftmp_;
        }, set: function (v) {
          ftmp_ = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl_ = $impl.ToSingle(ftmp_);
      fl = fl + fl_;
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          Result = v;
        }});
    } else {
      Result = rtl.rc(a - b,-9007199254740991,9007199254740991);
    };
    return Result;
  };
  this.Multiply = function (valType, a, b) {
    rtl.rc(valType,0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    rtl.rc(b,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    if (valType in pas.Datatypes.RealTypes) {
      ftmp = $impl.Zero();
      ftmp_ = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      $impl.MoveTFloat(b,{get: function () {
          return ftmp_;
        }, set: function (v) {
          ftmp_ = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl_ = $impl.ToSingle(ftmp_);
      fl = fl * fl_;
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          Result = v;
        }});
    } else {
      Result = rtl.rc(a * b,-9007199254740991,9007199254740991);
    };
    return Result;
  };
  this.Divide = function (valType, a, b) {
    rtl.rc(valType,0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    rtl.rc(b,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var ftmp_ = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    var fl_ = 0.0;
    ftmp = $impl.Zero();
    ftmp_ = $impl.Zero();
    $impl.MoveTFloat(a,{get: function () {
        return ftmp;
      }, set: function (v) {
        ftmp = v;
      }});
    $impl.MoveTFloat(b,{get: function () {
        return ftmp_;
      }, set: function (v) {
        ftmp_ = v;
      }});
    fl = $impl.ToSingle(ftmp);
    fl_ = $impl.ToSingle(ftmp_);
    if (fl_ === 0) throw pas.SysUtils.EDivByZero.$create("Create$1",["Division by Zero"]);
    fl = fl / fl_;
    ftmp = $impl.ToTFloat(fl);
    Result = 0;
    $impl.MoveTFloat$1(ftmp,{get: function () {
        return Result;
      }, set: function (v) {
        rtl.rc(v,-9007199254740991,9007199254740991);
        Result = v;
      }});
    return Result;
  };
  this.Frac = function (valType, a) {
    rtl.rc(valType,0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    if (!(valType in pas.Datatypes.RealTypes)) throw pas.SysUtils.EAssertionFailed.$create("Create");
    if (valType in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)) {
      ftmp = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl = pas.System.Frac(fl);
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          Result = v;
        }});
    } else {
      if (a < 0) {
        Result = rtl.rc(-(Math.abs(a) & 0xff),-9007199254740991,9007199254740991)}
       else Result = rtl.rc(a & 0xff,-9007199254740991,9007199254740991);
    };
    return Result;
  };
  this.Trunc = function (valType, a) {
    rtl.rc(valType,0,191);
    rtl.rc(a,-9007199254740991,9007199254740991);
    var Result = 0;
    var ftmp = rtl.arraySetLength(null,0,2);
    var fl = 0.0;
    if (!(valType in pas.Datatypes.RealTypes)) throw pas.SysUtils.EAssertionFailed.$create("Create");
    if (valType in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)) {
      ftmp = $impl.Zero();
      $impl.MoveTFloat(a,{get: function () {
          return ftmp;
        }, set: function (v) {
          ftmp = v;
        }});
      fl = $impl.ToSingle(ftmp);
      fl = pas.System.Int(fl);
      ftmp = $impl.ToTFloat(fl);
      Result = 0;
      $impl.MoveTFloat$1(ftmp,{get: function () {
          return Result;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          Result = v;
        }});
    } else {
      if (a < 0) {
        Result = rtl.rc(-(Math.abs(a) & 0xffffffffffffff00),-9007199254740991,9007199254740991)}
       else Result = rtl.rc(a & 0xffffffffffffff00,-9007199254740991,9007199254740991);
    };
    return Result;
  };
  $mod.$implcode = function () {
    $impl.TWOPOWERFRACBITS = 256;
    $impl.Zero = function () {
      var Result = rtl.arraySetLength(null,0,2);
      Result = rtl.arraySetLength(null,0,2);
      return Result;
    };
    $impl.ToTFloat = function (s) {
      var Result = rtl.arraySetLength(null,0,2);
      Result[0] = rtl.rc(Math.round(s * 256),-2147483648,2147483647);
      return Result;
    };
    $impl.ToSingle = function (ftmp) {
      var Result = 0.0;
      Result = 0;
      return Result;
    };
    $impl.MoveTFloat = function (ConstVal, ftmp) {
      rtl.rc(ConstVal,-9007199254740991,9007199254740991);
    };
    $impl.MoveTFloat$1 = function (ftmp, ConstVal) {
      rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
    };
    $impl.CardToHalf32 = function (src) {
      rtl.rc(src,0,4294967295);
      var Result = 0;
      return Result;
    };
    $impl.CardToHalf = function (ftmp) {
      var Result = 0;
      var Value = 0;
      Value = rtl.rc(ftmp[1],0,4294967295);
      Result = rtl.rc($impl.CardToHalf32(Value),0,65535);
      return Result;
    };
  };
},["SysUtils"]);
rtl.module("Parser",["System","Common","CompilerTypes","Datatypes","Numbers","Tokens"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  var FieldInListName$a$clone = function (a) {
    var b = [];
    b.length = 256;
    for (var c = 0; c < 256; c++) b[c] = pas.CompilerTypes.TField.$clone(a[c]);
    return b;
  };
  this.CompileType = function (i, DataType, NumAllocElements, AllocElementType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(DataType.get(),0,191);
    rtl.rc(NumAllocElements.get(),0,4294967295);
    rtl.rc(AllocElementType.get(),0,191);
    var Result = 0;
    var NestedNumAllocElements = 0;
    var NestedFunctionNumAllocElements = 0;
    var LowerBound = 0;
    var UpperBound = 0;
    var ConstVal = 0;
    var IdentIndex = 0;
    var NumFieldsInList = 0;
    var FieldInListIndex = 0;
    var RecType = 0;
    var k = 0;
    var j = 0;
    var NestedDataType = 0;
    var ExpressionType = 0;
    var NestedAllocElementType = 0;
    var NestedFunctionAllocElementType = 0;
    var NestedFunctionResultType = 0;
    var FieldInListName = rtl.arraySetLength(null,pas.CompilerTypes.TField,256);
    var ExitLoop = false;
    var isForward = false;
    var IsNestedFunction = false;
    var isInt = false;
    var isInl = false;
    var isOvr = false;
    var Name = "";
    function BoundaryType() {
      var Result = 0;
      if ((LowerBound < 0) || (UpperBound < 0)) {
        if ((LowerBound >= -128) && (UpperBound <= 127)) {
          Result = rtl.rc(pas.Tokens.TTokenKind.SHORTINTTOK,0,191)}
         else if ((LowerBound >= -32768) && (UpperBound <= 32767)) {
          Result = rtl.rc(pas.Tokens.TTokenKind.SMALLINTTOK,0,191)}
         else Result = rtl.rc(pas.Tokens.TTokenKind.INTEGERTOK,0,191);
      } else {
        if ((LowerBound >= 0) && (UpperBound <= 255)) {
          Result = rtl.rc(pas.Tokens.TTokenKind.BYTETOK,0,191)}
         else if ((LowerBound >= 0) && (UpperBound <= 65535)) {
          Result = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191)}
         else Result = rtl.rc(pas.Tokens.TTokenKind.CARDINALTOK,0,191);
      };
      return Result;
    };
    function DeclareField(Name, FieldType, NumAllocElements, AllocElementType, Data) {
      rtl.rc(FieldType,0,191);
      rtl.rc(NumAllocElements,0,4294967295);
      rtl.rc(AllocElementType,0,191);
      rtl.rc(Data,-9007199254740991,9007199254740991);
      var x = 0;
      var $ir = rtl.createIntfRefs();
      try {
        for (var $l = 1, $end = pas.Common.GetTypeAtIndex(RecType).NumFields; $l <= $end; $l++) {
          x = $l;
          if (rtl.rcArrR(pas.Common.GetTypeAtIndex(RecType).Field,x).Name === Name) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DuplicateIdentifier,"Duplicate identifier '{0}'.",Name,"","","","","","","","",""]),pas.Messages.IMessage)));
        };
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).NumFields += 1;
        x = rtl.rc(pas.Common.GetTypeAtIndex(RecType).NumFields,-2147483648,2147483647);
        if (x >= 256) pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXFIELDS","","","","","","","","","",""]),pas.Messages.IMessage)));
        if (FieldType === pas.Tokens.TTokenKind.DEREFERENCEARRAYTOK) {
          FieldType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
          AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          NumAllocElements = 0;
        };
        rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).Name = Name;
        rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).DataType = rtl.rc(FieldType,0,191);
        rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).Value = rtl.rc(Data,-9007199254740991,9007199254740991);
        rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).AllocElementType = rtl.rc(AllocElementType,0,191);
        rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
        if (FieldType === pas.Tokens.TTokenKind.ENUMTOK) FieldType = rtl.rc(AllocElementType,0,191);
        if (!(FieldType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
          if (FieldType in pas.Datatypes.Pointers) {
            if (AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
              AllocElementType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
              NumAllocElements = rtl.rc(rtl.lw(NumAllocElements >>> 16),0,4294967295);
            };
            if ((FieldType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType === pas.Tokens.TTokenKind.FORWARDTYPE)) {
              rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Size += pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK)}
             else if (rtl.lw(NumAllocElements >>> 16) > 0) {
              rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Size += rtl.lw(NumAllocElements >>> 16) * (NumAllocElements & 0xFFFF) * pas.Datatypes.GetDataSize(AllocElementType)}
             else rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Size += NumAllocElements * pas.Datatypes.GetDataSize(AllocElementType);
          } else rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Size += pas.Datatypes.GetDataSize(FieldType);
        } else rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Size += pas.Datatypes.GetDataSize(FieldType);
        if (pas.System.Pos(".",rtl.rcArrR(pas.Common.GetTypeAtIndex(RecType).Field,x).Name) > 0) {
          rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).ObjectVariable = pas.Common.GetTypeAtIndex(RecType).Field[0].ObjectVariable}
         else rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field,x).ObjectVariable = false;
      } finally {
        $ir.free();
      };
    };
    var $ir = rtl.createIntfRefs();
    try {
      NumAllocElements.set(0);
      if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK)) {
        DataType.set(pas.Tokens.TTokenKind.POINTERTOK);
        AllocElementType.set(pas.Tokens.TTokenKind.PROCVARTOK);
        i = rtl.rc($impl.DeclareFunction(i,{get: function () {
            return NestedNumAllocElements;
          }, set: function (v) {
            rtl.rc(v,0,4294967295);
            NestedNumAllocElements = v;
          }}),-2147483648,2147483647);
        NumAllocElements.set(rtl.lw(NestedNumAllocElements << 16));
        Result = rtl.rc(i - 1,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
        DataType.set(pas.Tokens.TTokenKind.POINTERTOK);
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.STRINGTOK) {
          NumAllocElements.set(0);
          AllocElementType.set(pas.Tokens.TTokenKind.CHARTOK);
          DataType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK);
        } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
          IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-9007199254740991,9007199254740991);
          if (IdentIndex === 0) {
            NumAllocElements.set(i + 1);
            AllocElementType.set(pas.Tokens.TTokenKind.FORWARDTYPE);
          } else if ((IdentIndex > 0) && (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers))) {
            NumAllocElements.set(pas.Common.IdentifierAt(IdentIndex).NumAllocElements);
            if (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) {
              if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                NumAllocElements.set(0);
                AllocElementType.set(pas.Tokens.TTokenKind.CHARTOK);
                DataType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK);
              } else {
                NumAllocElements.set(rtl.lw(pas.Common.IdentifierAt(IdentIndex).NumAllocElements | rtl.lw(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ << 16)));
                AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                DataType.set(pas.Tokens.TTokenKind.DEREFERENCEARRAYTOK);
              };
            } else {
              NumAllocElements.set(rtl.lw(pas.Common.IdentifierAt(IdentIndex).NumAllocElements | rtl.lw(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ << 16)));
              AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
            };
          };
        } else {
          if (!(pas.Common.TokenAt(i + 1).Kind in rtl.unionSet(rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes),rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK)))) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected);
          NumAllocElements.set(0);
          AllocElementType.set(pas.Common.TokenAt(i + 1).Kind);
        };
        Result = rtl.rc(i + 1,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.OPARTOK) {
        Name = pas.Common.TokenAt(i - 2).Name;
        pas.Common.NumTypes += 1;
        RecType = rtl.rc(pas.Common.NumTypes,-2147483648,2147483647);
        if (pas.Common.NumTypes > 1024) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXTYPES","","","","","","","","","",""]),pas.Messages.IMessage)));
        i += 1;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field[0].Name = Name;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).NumFields = 0;
        ConstVal = 0;
        LowerBound = 0;
        UpperBound = 0;
        NumFieldsInList = 0;
        do {
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
          NumFieldsInList += 1;
          rtl.rcArrR(FieldInListName,NumFieldsInList - 1).Name = pas.Common.TokenAt(i).Name;
          i += 1;
          if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.ASSIGNTOK,pas.Tokens.TTokenKind.EQTOK)) {
            i = rtl.rc($mod.CompileConstExpression(i + 1,{get: function () {
                return ConstVal;
              }, set: function (v) {
                rtl.rc(v,-9007199254740991,9007199254740991);
                ConstVal = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ExpressionType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
            i += 1;
          };
          rtl.rcArrR(FieldInListName,NumFieldsInList - 1).Value = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
          if (NumFieldsInList === 1) {
            LowerBound = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
            UpperBound = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
          } else {
            if (ConstVal < LowerBound) LowerBound = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
            if (ConstVal > UpperBound) UpperBound = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
            if (rtl.rcArrR(FieldInListName,NumFieldsInList - 1).Value < rtl.rcArrR(FieldInListName,NumFieldsInList - 1 - 1).Value) pas.Messages.Note(i,"Values in enumeration types have to be ascending");
          };
          ConstVal += 1;
          if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) i += 1;
        } while (!(pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.CPARTOK));
        DataType.set(BoundaryType());
        for (var $l = 1, $end = NumFieldsInList; $l <= $end; $l++) {
          FieldInListIndex = $l;
          $mod.DefineIdent(i,rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Name,pas.Tokens.TTokenKind.ENUMTOK,DataType.get(),0,pas.Tokens.TTokenKind.UNTYPETOK,rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Value,pas.Tokens.TTokenKind.IDENTTOK);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(RecType,0,4294967295);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).Pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
          DeclareField(rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Name,DataType.get(),0,pas.Tokens.TTokenKind.UNTYPETOK,rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Value);
        };
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Block = rtl.rc(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),-2147483648,2147483647);
        AllocElementType.set(DataType.get());
        DataType.set(pas.Tokens.TTokenKind.ENUMTOK);
        NumAllocElements.set(RecType);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.TEXTFILETOK) {
        AllocElementType.set(pas.Tokens.TTokenKind.BYTETOK);
        NumAllocElements.set(1);
        DataType.set(pas.Tokens.TTokenKind.TEXTFILETOK);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.FILETOK) {
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OFTOK) {
          i = rtl.rc($mod.CompileType(i + 2,DataType,NumAllocElements,AllocElementType),-2147483648,2147483647)}
         else {
          AllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
          NumAllocElements.set(128);
        };
        DataType.set(pas.Tokens.TTokenKind.FILETOK);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.SETTOK) {
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OFTOK);
        if (!(pas.Common.TokenAt(i + 2).Kind in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BYTETOK))) pas.Messages.Error$1(i + 2,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeDeclarationOfSetElements,"Illegal type declaration of set elements","","","","","","","","","",""]),pas.Messages.IMessage)));
        DataType.set(pas.Tokens.TTokenKind.POINTERTOK);
        NumAllocElements.set(32);
        AllocElementType.set(pas.Common.TokenAt(i + 2).Kind);
        Result = rtl.rc(i + 2,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.OBJECTTOK) {
        Name = pas.Common.TokenAt(i - 2).Name;
        pas.Common.NumTypes += 1;
        RecType = rtl.rc(pas.Common.NumTypes,-2147483648,2147483647);
        if (pas.Common.NumTypes > 1024) pas.Messages.Error$1(i,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXTYPES","","","","","","","","","",""]),pas.Messages.IMessage)));
        i += 1;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).NumFields = 0;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field[0].Name = Name;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field[0].ObjectVariable = true;
        if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
          while (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
            IsNestedFunction = pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK;
            k = rtl.rc(i,-2147483648,2147483647);
            i = rtl.rc($mod.DefineFunction(i,0,{get: function () {
                return isForward;
              }, set: function (v) {
                isForward = v;
              }},{get: function () {
                return isInt;
              }, set: function (v) {
                isInt = v;
              }},{get: function () {
                return isInl;
              }, set: function (v) {
                isInl = v;
              }},{get: function () {
                return isOvr;
              }, set: function (v) {
                isOvr = v;
              }},{get: function () {
                return IsNestedFunction;
              }, set: function (v) {
                IsNestedFunction = v;
              }},{get: function () {
                return NestedFunctionResultType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                NestedFunctionResultType = v;
              }},{get: function () {
                return NestedFunctionNumAllocElements;
              }, set: function (v) {
                rtl.rc(v,0,4294967295);
                NestedFunctionNumAllocElements = v;
              }},{get: function () {
                return NestedFunctionAllocElementType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                NestedFunctionAllocElementType = v;
              }}),-2147483648,2147483647);
            pas.Common.NumBlocks += 1;
            pas.Common.IdentifierAt(pas.Common.NumIdent()).ProcAsBlock = rtl.rc(pas.Common.NumBlocks,-2147483648,2147483647);
            pas.Common.IdentifierAt(pas.Common.NumIdent()).IsUnresolvedForward = true;
            pas.Common.IdentifierAt(pas.Common.NumIdent()).ObjectIndex = rtl.rc(RecType,-2147483648,2147483647);
            pas.Common.IdentifierAt(pas.Common.NumIdent()).Name = Name + "." + pas.Common.TokenAt(k + 1).Name;
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
            i += 1;
          };
          if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.IDENTTOK)) pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FieldAfterMethodOrProperty,"Fields cannot appear after a method or property definition","","","","","","","","","",""]),pas.Messages.IMessage)));
        } else do {
          NumFieldsInList = 0;
          do {
            if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) pas.Messages.Error$1(i,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FieldAfterMethodOrProperty,"Fields cannot appear after a method or property definition","","","","","","","","","",""]),pas.Messages.IMessage)));
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
            NumFieldsInList += 1;
            rtl.rcArrR(FieldInListName,NumFieldsInList - 1).Name = pas.Common.TokenAt(i).Name;
            i += 1;
            ExitLoop = false;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) {
              i += 1}
             else ExitLoop = true;
          } while (!ExitLoop);
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
          j = rtl.rc(i + 1,-2147483648,2147483647);
          i = rtl.rc($mod.CompileType(i + 1,DataType,NumAllocElements,AllocElementType),-2147483648,2147483647);
          if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.ARRAYTOK) i = rtl.rc($mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedAllocElementType = v;
            }}),-2147483648,2147483647);
          for (var $l1 = 1, $end1 = NumFieldsInList; $l1 <= $end1; $l1++) {
            FieldInListIndex = $l1;
            DeclareField(rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Name,DataType.get(),NumAllocElements.get(),AllocElementType.get(),0);
            if (DataType.get() in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) for (var $l2 = 1, $end2 = pas.Common.GetTypeAtIndex(NumAllocElements.get()).NumFields; $l2 <= $end2; $l2++) {
              k = $l2;
              DeclareField(rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).Name,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).AllocElementType,0);
            };
          };
          ExitLoop = false;
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.SEMICOLONTOK) {
            i += 1;
            ExitLoop = true;
          } else {
            i += 2;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ENDTOK) {
              ExitLoop = true}
             else if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
              while (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
                IsNestedFunction = pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK;
                k = rtl.rc(i,-2147483648,2147483647);
                i = rtl.rc($mod.DefineFunction(i,0,{get: function () {
                    return isForward;
                  }, set: function (v) {
                    isForward = v;
                  }},{get: function () {
                    return isInt;
                  }, set: function (v) {
                    isInt = v;
                  }},{get: function () {
                    return isInl;
                  }, set: function (v) {
                    isInl = v;
                  }},{get: function () {
                    return isOvr;
                  }, set: function (v) {
                    isOvr = v;
                  }},{get: function () {
                    return IsNestedFunction;
                  }, set: function (v) {
                    IsNestedFunction = v;
                  }},{get: function () {
                    return NestedFunctionResultType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    NestedFunctionResultType = v;
                  }},{get: function () {
                    return NestedFunctionNumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NestedFunctionNumAllocElements = v;
                  }},{get: function () {
                    return NestedFunctionAllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    NestedFunctionAllocElementType = v;
                  }}),-2147483648,2147483647);
                pas.Common.NumBlocks += 1;
                pas.Common.IdentifierAt(pas.Common.NumIdent()).ProcAsBlock = rtl.rc(pas.Common.NumBlocks,-2147483648,2147483647);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).IsUnresolvedForward = true;
                pas.Common.IdentifierAt(pas.Common.NumIdent()).ObjectIndex = rtl.rc(RecType,-2147483648,2147483647);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).Name = Name + "." + pas.Common.TokenAt(k + 1).Name;
                pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
                i += 1;
              };
              ExitLoop = true;
            };
          };
        } while (!ExitLoop);
        pas.Common.CheckTok(i,pas.Tokens.TTokenKind.ENDTOK);
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Block = rtl.rc(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),-2147483648,2147483647);
        DataType.set(pas.Tokens.TTokenKind.OBJECTTOK);
        NumAllocElements.set(RecType);
        AllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.RECORDTOK) || ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PACKEDTOK) && (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.RECORDTOK))) {
        Name = pas.Common.TokenAt(i - 2).Name;
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PACKEDTOK) i += 1;
        pas.Common.NumTypes += 1;
        RecType = rtl.rc(pas.Common.NumTypes,-2147483648,2147483647);
        if (pas.Common.NumTypes > 1024) pas.Messages.Error$1(i,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, MAXTYPES","","","","","","","","","",""]),pas.Messages.IMessage)));
        i += 1;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Size = 0;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).NumFields = 0;
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Field[0].Name = Name;
        do {
          NumFieldsInList = 0;
          do {
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
            NumFieldsInList += 1;
            rtl.rcArrR(FieldInListName,NumFieldsInList - 1).Name = pas.Common.TokenAt(i).Name;
            i += 1;
            ExitLoop = false;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) {
              i += 1}
             else ExitLoop = true;
          } while (!ExitLoop);
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
          j = rtl.rc(i + 1,-2147483648,2147483647);
          i = rtl.rc($mod.CompileType(i + 1,DataType,NumAllocElements,AllocElementType),-2147483648,2147483647);
          if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.ARRAYTOK) i = rtl.rc($mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedAllocElementType = v;
            }}),-2147483648,2147483647);
          for (var $l3 = 1, $end3 = NumFieldsInList; $l3 <= $end3; $l3++) {
            FieldInListIndex = $l3;
            DeclareField(rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Name,DataType.get(),NumAllocElements.get(),AllocElementType.get(),0);
            if (DataType.get() === pas.Tokens.TTokenKind.RECORDTOK) for (var $l4 = 1, $end4 = pas.Common.GetTypeAtIndex(NumAllocElements.get()).NumFields; $l4 <= $end4; $l4++) {
              k = $l4;
              DeclareField(rtl.rcArrR(FieldInListName,FieldInListIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).Name,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements.get()).Field,k).AllocElementType,0);
            };
          };
          ExitLoop = false;
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.SEMICOLONTOK) {
            i += 1;
            ExitLoop = true;
          } else {
            i += 2;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ENDTOK) ExitLoop = true;
          };
        } while (!ExitLoop);
        pas.Common.CheckTok(i,pas.Tokens.TTokenKind.ENDTOK);
        rtl.rcArrR(pas.Common._TypeArray,RecType - 1).Block = rtl.rc(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),-2147483648,2147483647);
        DataType.set(pas.Tokens.TTokenKind.RECORDTOK);
        NumAllocElements.set(RecType);
        AllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        if (pas.Common.GetTypeAtIndex(RecType).Size > 256) pas.Messages.Error$1(i,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.RecordSizeExceedsLimit,"Record size {0} exceeds the 256 bytes limit.",pas.SysUtils.IntToStr(pas.Common.GetTypeAtIndex(RecType).Size),"","","","","","","","",""]),pas.Messages.IMessage)));
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PCHARTOK) {
        DataType.set(pas.Tokens.TTokenKind.POINTERTOK);
        AllocElementType.set(pas.Tokens.TTokenKind.CHARTOK);
        NumAllocElements.set(0);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.STRINGTOK) {
        DataType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK);
        AllocElementType.set(pas.Tokens.TTokenKind.CHARTOK);
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OBRACKETTOK) {
          UpperBound = 255;
          Result = rtl.rc(i,-2147483648,2147483647);
        } else {
          i = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
              return UpperBound;
            }, set: function (v) {
              rtl.rc(v,-9007199254740991,9007199254740991);
              UpperBound = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ExpressionType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if ((UpperBound < 1) || (UpperBound > 255)) pas.Messages.Error$1(i,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.StringLengthNotInRange,"String length must be a value from 1 to 255","","","","","","","","","",""]),pas.Messages.IMessage)));
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        };
        NumAllocElements.set(UpperBound + 1);
        if (UpperBound > 255) pas.Messages.Error$2(i,pas.Messages.TErrorCode.SubrangeBounds);
      } else if (pas.Common.TokenAt(i).Kind in pas.Datatypes.AllTypes) {
        DataType.set(pas.Common.TokenAt(i).Kind);
        NumAllocElements.set(0);
        AllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ARRAYTOK) || ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PACKEDTOK) && (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.ARRAYTOK))) {
        DataType.set(pas.Tokens.TTokenKind.POINTERTOK);
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PACKEDTOK) i += 1;
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OBRACKETTOK);
        if (pas.Common.TokenAt(i + 2).Kind in rtl.unionSet(pas.Datatypes.AllTypes,pas.Datatypes.StringTypes)) {
          if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.BYTETOK) {
            LowerBound = 0;
            UpperBound = 255;
            NumAllocElements.set(256);
          } else pas.Messages.Error$1(i,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidTypeDefinition,"Invalid type definition.","","","","","","","","","",""]),pas.Messages.IMessage)));
          i += 2;
        } else {
          i = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
              return LowerBound;
            }, set: function (v) {
              rtl.rc(v,-9007199254740991,9007199254740991);
              LowerBound = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ExpressionType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (!(ExpressionType in pas.Datatypes.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotInteger,"Array lower bound must be an integer value.","","","","","","","","","",""]),pas.Messages.IMessage)));
          if (LowerBound !== 0) pas.Messages.Error$1(i,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotZero,"Array lower bound is not zero.","","","","","","","","","",""]),pas.Messages.IMessage)));
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.RANGETOK);
          i = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
              return UpperBound;
            }, set: function (v) {
              rtl.rc(v,-9007199254740991,9007199254740991);
              UpperBound = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ExpressionType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (!(ExpressionType in pas.Datatypes.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayUpperBoundNotInteger,"Array upper bound must be integer value.","","","","","","","","","",""]),pas.Messages.IMessage)));
          if (UpperBound < 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UpperBoundOfRange);
          if (UpperBound > 65535) pas.Messages.Error$2(i,pas.Messages.TErrorCode.HighLimit);
          NumAllocElements.set((UpperBound - LowerBound) + 1);
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
            i = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
                return LowerBound;
              }, set: function (v) {
                rtl.rc(v,-9007199254740991,9007199254740991);
                LowerBound = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ExpressionType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
            if (!(ExpressionType in pas.Datatypes.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(13,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotInteger,"Array lower bound must be an integer value.","","","","","","","","","",""]),pas.Messages.IMessage)));
            if (LowerBound !== 0) pas.Messages.Error$1(i,$ir.ref(14,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayLowerBoundNotZero,"Array lower bound is not zero.","","","","","","","","","",""]),pas.Messages.IMessage)));
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.RANGETOK);
            i = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
                return UpperBound;
              }, set: function (v) {
                rtl.rc(v,-9007199254740991,9007199254740991);
                UpperBound = v;
              }},{get: function () {
                return ExpressionType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ExpressionType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
            if (!(ExpressionType in pas.Datatypes.IntegerTypes)) pas.Messages.Error$1(i,$ir.ref(15,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayUpperBoundNotInteger,"Array upper bound must be an integer value.","","","","","","","","","",""]),pas.Messages.IMessage)));
            if (UpperBound < 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UpperBoundOfRange);
            if (UpperBound > 65535) pas.Messages.Error$2(i,pas.Messages.TErrorCode.HighLimit);
            NumAllocElements.set(rtl.or(NumAllocElements.get(),rtl.shl((UpperBound - LowerBound) + 1,16)));
          };
        };
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
        pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.OFTOK);
        if (pas.Common.TokenAt(i + 3).Kind in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) pas.Messages.Error$1(i,$ir.ref(16,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidArrayOfPointers,"Only arrays of ^{0} are supported.",pas.Tokens.InfoAboutToken(pas.Common.TokenAt(i + 3).Kind),"","","","","","","","",""]),pas.Messages.IMessage)));
        if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.ARRAYTOK) {
          i = rtl.rc($mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedAllocElementType = v;
            }}),-2147483648,2147483647);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else {
          Result = rtl.rc(i,-2147483648,2147483647);
          i = rtl.rc($mod.CompileType(i + 3,{get: function () {
              return NestedDataType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedDataType = v;
            }},{get: function () {
              return NestedNumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NestedNumAllocElements = v;
            }},{get: function () {
              return NestedAllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedAllocElementType = v;
            }}),-2147483648,2147483647);
        };
        if ((rtl.lw(NumAllocElements.get() >>> 16) * (NumAllocElements.get() & 0xFFFF) * pas.Datatypes.GetDataSize(NestedDataType)) > (40960 - 1)) pas.Messages.Error$1(i,$ir.ref(17,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArraySizeExceedsRAMSize,"Array [0..{0}, 0..{1} size exceeds the available RAM",pas.SysUtils.IntToStr((NumAllocElements.get() & 0xFFFF) - 1),pas.SysUtils.IntToStr(rtl.lw(NumAllocElements.get() >>> 16) - 1),"","","","","","","",""]),pas.Messages.IMessage)));
        if (NestedNumAllocElements > 0) if (NestedDataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK,pas.Tokens.TTokenKind.ENUMTOK)) {
          if (rtl.lw(NumAllocElements.get() >>> 16) > 0) pas.Messages.Error$1(i,$ir.ref(18,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.MultiDimensionalArrayOfTypeNotSupported,"Multidimensional arrays of element type {0} are not supported.",pas.Tokens.InfoAboutToken(NestedDataType),"","","","","","","","",""]),pas.Messages.IMessage)));
          if (NestedDataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
            pas.Messages.Error$1(i,$ir.ref(19,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OnlyArrayOfTypeSupported,"Only Array [0..{0}] of ^{1} supported",pas.SysUtils.IntToStr(NumAllocElements.get() - 1),pas.Tokens.InfoAboutToken(NestedDataType),"","","","","","","",""]),pas.Messages.IMessage)))}
           else pas.Messages.Error$1(i,$ir.ref(20,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ArrayOfTypeNotSupported,"Arrays of type {0} are not supported.",pas.Tokens.InfoAboutToken(NestedDataType),"","","","","","","","",""]),pas.Messages.IMessage)));
          NumAllocElements.set(rtl.lw(NumAllocElements.get() | rtl.lw(NestedNumAllocElements << 16)));
        } else if (!(NestedDataType in rtl.createSet(pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.PCHARTOK)) {
          if ((NestedAllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK,pas.Tokens.TTokenKind.PROCVARTOK)) && (rtl.lw(NumAllocElements.get() >>> 16) > 0)) pas.Messages.Error$1(i,$ir.ref(21,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.MultiDimensionalArrayOfTypeNotSupported,"Multidimensional arrays of element type {0} are not supported.",pas.Tokens.InfoAboutToken(NestedAllocElementType),"","","","","","","","",""]),pas.Messages.IMessage)));
          NestedDataType = rtl.rc(NestedAllocElementType,0,191);
          if (NestedAllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) {
            NumAllocElements.set(rtl.lw(NumAllocElements.get() | NestedNumAllocElements))}
           else if (NestedAllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
            NumAllocElements.set(rtl.lw(NestedNumAllocElements | rtl.lw(NumAllocElements.get() << 16)))}
           else NumAllocElements.set(rtl.lw(NumAllocElements.get() | rtl.lw(NestedNumAllocElements << 16)));
        };
        AllocElementType.set(NestedDataType);
      } else if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt($mod.GetIdentIndex(pas.Common.TokenAt(i).Name)).Kind === pas.Tokens.TTokenKind.TYPETOK)) {
        IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i).Name),-9007199254740991,9007199254740991);
        if (IdentIndex === 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
        if (pas.Common.IdentifierAt(IdentIndex).Kind !== pas.Tokens.TTokenKind.TYPETOK) pas.Messages.Error$1(i,$ir.ref(22,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected but {0} found",pas.Common.TokenAt(i).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
        DataType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
        NumAllocElements.set(rtl.lw(pas.Common.IdentifierAt(IdentIndex).NumAllocElements | rtl.lw(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ << 16)));
        AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else {
        i = rtl.rc($mod.CompileConstExpression(i,{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
        LowerBound = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.RANGETOK);
        i = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
        UpperBound = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
        if (UpperBound < LowerBound) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UpperBoundOfRange);
        DataType.set(BoundaryType());
        NumAllocElements.set(0);
        AllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        Result = rtl.rc(i,-2147483648,2147483647);
      };
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.CompileConstExpression = function (i, ConstVal, ConstValType, VarType, Err, War) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
    rtl.rc(ConstValType.get(),0,191);
    rtl.rc(VarType,0,191);
    var Result = 0;
    var j = 0;
    var RightConstVal = 0;
    var RightConstValType = 0;
    var Yes = false;
    ConstVal.set(0);
    ConstValType.set(pas.Tokens.TTokenKind.UNTYPETOK);
    Result = rtl.rc(i,-2147483648,2147483647);
    i = rtl.rc($impl.CompileSimpleConstExpression(i,ConstVal,ConstValType),-2147483648,2147483647);
    if (pas.Common.isError) return Result;
    if (pas.Common.TokenAt(i + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LTTOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK)) {
      j = rtl.rc($impl.CompileSimpleConstExpression(i + 2,{get: function () {
          return RightConstVal;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          RightConstVal = v;
        }},{get: function () {
          return RightConstValType;
        }, set: function (v) {
          rtl.rc(v,0,191);
          RightConstValType = v;
        }}),-2147483648,2147483647);
      var $tmp = pas.Common.TokenAt(i + 1).Kind;
      if ($tmp === pas.Tokens.TTokenKind.EQTOK) {
        Yes = ConstVal.get() === RightConstVal}
       else if ($tmp === pas.Tokens.TTokenKind.NETOK) {
        Yes = ConstVal.get() !== RightConstVal}
       else if ($tmp === pas.Tokens.TTokenKind.LTTOK) {
        Yes = ConstVal.get() < RightConstVal}
       else if ($tmp === pas.Tokens.TTokenKind.LETOK) {
        Yes = ConstVal.get() <= RightConstVal}
       else if ($tmp === pas.Tokens.TTokenKind.GTTOK) {
        Yes = ConstVal.get() > RightConstVal}
       else if ($tmp === pas.Tokens.TTokenKind.GETOK) {
        Yes = ConstVal.get() >= RightConstVal}
       else {
        Yes = false;
      };
      if (Yes) {
        ConstVal.set(0xff)}
       else ConstVal.set(0);
      ConstValType.set(pas.Tokens.TTokenKind.BOOLEANTOK);
      i = rtl.rc(j,-2147483648,2147483647);
    };
    Result = rtl.rc(i,-2147483648,2147483647);
    if (ConstValType.get() in rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.Pointers)) if (VarType in rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.Pointers)) {
      var $tmp1 = VarType;
      if ($tmp1 === pas.Tokens.TTokenKind.SHORTINTTOK) {
        Yes = (ConstVal.get() < -128) || (ConstVal.get() > 127)}
       else if ($tmp1 === pas.Tokens.TTokenKind.SMALLINTTOK) {
        Yes = (ConstVal.get() < -32768) || (ConstVal.get() > 32767)}
       else if ($tmp1 === pas.Tokens.TTokenKind.INTEGERTOK) {
        Yes = (ConstVal.get() < -2147483648) || (ConstVal.get() > 2147483647)}
       else {
        Yes = (Math.abs(ConstVal.get()) > 0xFFFFFFFF) || (pas.Datatypes.GetDataSize(ConstValType.get()) > pas.Datatypes.GetDataSize(VarType)) || ((ConstValType.get() in pas.Datatypes.SignedOrdinalTypes) && (VarType in pas.Datatypes.UnsignedOrdinalTypes));
      };
      if (Yes) if (Err) {
        pas.Common.isConst = false;
        pas.Common.isError = false;
        pas.Messages.ErrorRangeCheckError(i,ConstVal.get(),VarType);
      } else if (War) if (VarType !== pas.Tokens.TTokenKind.BOOLEANTOK) pas.Messages.WarningForRangeCheckError(i,ConstVal.get(),VarType);
    };
    return Result;
  };
  this.CompileConstTerm = function (i, ConstVal, ConstValType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
    rtl.rc(ConstValType.get(),0,191);
    var Result = 0;
    var j = 0;
    var k = 0;
    var RightConstVal = 0;
    var RightConstValType = 0;
    var $ir = rtl.createIntfRefs();
    try {
      ConstVal.set(0);
      ConstValType.set(pas.Tokens.TTokenKind.UNTILTOK);
      Result = rtl.rc(i,-2147483648,2147483647);
      j = rtl.rc($impl.CompileConstFactor(i,ConstVal,ConstValType),-2147483648,2147483647);
      if (pas.Common.isError) return Result;
      while (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.MULTOK,pas.Tokens.TTokenKind.DIVTOK,pas.Tokens.TTokenKind.MODTOK,pas.Tokens.TTokenKind.IDIVTOK,pas.Tokens.TTokenKind.SHLTOK,pas.Tokens.TTokenKind.SHRTOK,pas.Tokens.TTokenKind.ANDTOK)) {
        k = rtl.rc($impl.CompileConstFactor(j + 2,{get: function () {
            return RightConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            RightConstVal = v;
          }},{get: function () {
            return RightConstValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightConstValType = v;
          }}),-2147483648,2147483647);
        if (pas.Common.isError) break;
        if ((ConstValType.get() in pas.Datatypes.RealTypes) && (RightConstValType in pas.Datatypes.IntegerTypes)) {
          RightConstVal = rtl.rc(pas.Numbers.FromInt64(RightConstVal),-9007199254740991,9007199254740991);
          RightConstValType = rtl.rc(ConstValType.get(),0,191);
        };
        if ((ConstValType.get() in pas.Datatypes.IntegerTypes) && (RightConstValType in pas.Datatypes.RealTypes)) {
          ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          ConstValType.set(RightConstValType);
        };
        if ((pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DIVTOK) && (ConstValType.get() in pas.Datatypes.IntegerTypes)) {
          ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          ConstValType.set(pas.Tokens.TTokenKind.REALTOK);
        };
        if ((pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DIVTOK) && (RightConstValType in pas.Datatypes.IntegerTypes)) {
          RightConstVal = rtl.rc(pas.Numbers.FromInt64(RightConstVal),-9007199254740991,9007199254740991);
          RightConstValType = rtl.rc(pas.Tokens.TTokenKind.REALTOK,0,191);
        };
        if ((ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (RightConstValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) RightConstValType = rtl.rc(ConstValType.get(),0,191);
        if ((RightConstValType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) ConstValType.set(RightConstValType);
        var $tmp = pas.Common.TokenAt(j + 1).Kind;
        if ($tmp === pas.Tokens.TTokenKind.MULTOK) {
          ConstVal.set(pas.Numbers.Multiply(ConstValType.get(),ConstVal.get(),RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.DIVTOK) {
          try {
            ConstVal.set(pas.Numbers.Divide(ConstValType.get(),ConstVal.get(),RightConstVal));
          } catch ($e) {
            if (pas.SysUtils.EDivByZero.isPrototypeOf($e)) {
              pas.Common.isError = false;
              pas.Common.isConst = false;
              pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DivisionByZero,"Division by zero","","","","","","","","","",""]),pas.Messages.IMessage)));
            } else throw $e
          };
        } else if ($tmp === pas.Tokens.TTokenKind.MODTOK) {
          ConstVal.set(ConstVal.get() % RightConstVal)}
         else if ($tmp === pas.Tokens.TTokenKind.IDIVTOK) {
          ConstVal.set(rtl.trunc(ConstVal.get() / RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.SHLTOK) {
          ConstVal.set(rtl.shl(ConstVal.get(),RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.SHRTOK) {
          ConstVal.set(rtl.shr(ConstVal.get(),RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.ANDTOK) ConstVal.set(rtl.and(ConstVal.get(),RightConstVal));
        ConstValType.set(pas.Common.GetCommonType(j + 1,ConstValType.get(),RightConstValType));
        if (!(ConstValType.get() in rtl.unionSet(pas.Datatypes.RealTypes,rtl.createSet(pas.Tokens.TTokenKind.BOOLEANTOK)))) ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
        pas.Common.CheckOperator(i,pas.Common.TokenAt(j + 1).Kind,ConstValType.get(),RightConstValType);
        j = rtl.rc(k,-2147483648,2147483647);
      };
      Result = rtl.rc(j,-2147483648,2147483647);
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.DefineIdent = function (tokenIndex, Name, Kind, DataType, NumAllocElements, AllocElementType, Data, IdType) {
    rtl.rc(tokenIndex,-2147483648,2147483647);
    rtl.rc(Kind,0,191);
    rtl.rc(DataType,0,191);
    rtl.rc(NumAllocElements,0,4294967295);
    rtl.rc(AllocElementType,0,191);
    rtl.rc(Data,-9007199254740991,9007199254740991);
    rtl.rc(IdType,0,191);
    var identIndex = 0;
    var identifier = null;
    var NumAllocElements_ = 0;
    var $ir = rtl.createIntfRefs();
    try {
      pas.Debugger.debugger.DefineIdent(tokenIndex,Name,Kind,DataType,NumAllocElements,AllocElementType,Data,IdType);
      identIndex = rtl.rc($mod.GetIdentIndex(Name),-2147483648,2147483647);
      if ((identIndex > 0) && !(pas.Common.IdentifierAt(identIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) && (pas.Common.IdentifierAt(identIndex).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop)) && (pas.Common.IdentifierAt(identIndex).isOverload === false) && (pas.Common.IdentifierAt(identIndex).SourceFile === pas.Common.ActiveSourceFile)) {
        pas.Messages.Error$1(tokenIndex,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierAlreadyDefined,"Identifier {0} is already defined",Name,"","","","","","","","",""]),pas.Messages.IMessage)))}
       else {
        pas.Common.NumIdent_ += 1;
        identifier = pas.Common.IdentifierList.GetIdentifierAtIndex(pas.Common.NumIdent());
        if (pas.Common.NumIdent() > 16384) {
          pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, IDENT","","","","","","","","","",""]),pas.Messages.IMessage)));
        };
        identifier.Name = Name;
        identifier.Kind = rtl.rc(Kind,0,191);
        identifier.DataType = rtl.rc(DataType,0,191);
        identifier.Block = rtl.rc(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),-2147483648,2147483647);
        identifier.NumParams = 0;
        identifier.isAbsolute = false;
        identifier.PassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VALPASSING,0,3);
        identifier.IsUnresolvedForward = false;
        identifier.Section = pas.Common.PublicSection;
        identifier.SourceFile = pas.Common.ActiveSourceFile;
        identifier.IdType = rtl.rc(IdType,0,191);
        if ((Kind === pas.Tokens.TTokenKind.VARTOK) && (Data !== 0)) {
          identifier.isAbsolute = true;
          identifier.isInit = true;
        };
        NumAllocElements_ = rtl.rc(rtl.lw(NumAllocElements >>> 16),0,4294967295);
        NumAllocElements = rtl.rc(NumAllocElements & 0xFFFF,0,4294967295);
        if (Name !== "RESULT") if ((pas.Common.NumIdent() > (pas.Common.NumPredefIdent + 1)) && (pas.Common.ActiveSourceFile.UnitIndex === 1) && (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION)) if (!((identifier.Pass in rtl.createSet(pas.CompilerTypes.TPass.CALL_DETERMINATION,pas.CompilerTypes.TPass.CODE_GENERATION)) || identifier.IsNotDead)) pas.Messages.NoteForIdentifierNotUsed(tokenIndex,pas.Common.NumIdent());
        var $tmp = Kind;
        if (($tmp === pas.Tokens.TTokenKind.PROCEDURETOK) || ($tmp === pas.Tokens.TTokenKind.FUNCTIONTOK) || ($tmp === pas.Tokens.TTokenKind.UNITTOK) || ($tmp === pas.Tokens.TTokenKind.CONSTRUCTORTOK) || ($tmp === pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
          identifier.Value = rtl.rc(pas.Common.CodeSize,-9007199254740991,9007199254740991);
        } else if ($tmp === pas.Tokens.TTokenKind.VARTOK) {
          if (identifier.isAbsolute) {
            identifier.Value = rtl.rc(Data - 1,-9007199254740991,9007199254740991);
          } else {
            identifier.Value = rtl.rc(32768 + pas.Common._VarDataSize,-9007199254740991,9007199254740991);
          };
          if (!pas.Common.OutputDisabled) {
            pas.Common.IncVarDataSize(tokenIndex,pas.Datatypes.GetDataSize(DataType));
          };
          identifier.NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
          identifier.NumAllocElements_ = rtl.rc(NumAllocElements_,0,4294967295);
          identifier.AllocElementType = rtl.rc(AllocElementType,0,191);
          if (!pas.Common.OutputDisabled) {
            if ((DataType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (NumAllocElements_ === 0)) {
              pas.Common.IncVarDataSize(tokenIndex,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK))}
             else if (DataType in rtl.createSet(pas.Tokens.TTokenKind.ENUMTOK)) {
              pas.Common.IncVarDataSize(tokenIndex,1)}
             else if ((DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (NumAllocElements > 0)) {
              pas.Common.IncVarDataSize(tokenIndex,0)}
             else if ((DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)) && (NumAllocElements > 0)) {
              pas.Common.IncVarDataSize(tokenIndex,12)}
             else {
              if ((identifier.IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (identifier.isAbsolute === false) && ($mod.Elements(pas.Common.NumIdent()) === 1)) {}
              else pas.Common.IncVarDataSize(tokenIndex,rtl.rc($mod.Elements(pas.Common.NumIdent()) * pas.Datatypes.GetDataSize(AllocElementType),-2147483648,2147483647));
            };
            if (NumAllocElements > 0) pas.Common.IncVarDataSize(tokenIndex,-pas.Datatypes.GetDataSize(DataType));
          };
        } else if (($tmp === pas.Tokens.TTokenKind.CONSTTOK) || ($tmp === pas.Tokens.TTokenKind.ENUMTOK)) {
          identifier.Value = rtl.rc(Data,-9007199254740991,9007199254740991);
          if (DataType in rtl.unionSet(pas.Datatypes.Pointers,rtl.createSet(pas.Tokens.TTokenKind.ENUMTOK))) {
            identifier.NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
            identifier.NumAllocElements_ = rtl.rc(NumAllocElements_,0,4294967295);
            identifier.AllocElementType = rtl.rc(AllocElementType,0,191);
          };
          identifier.isInit = true;
        } else if ($tmp === pas.Tokens.TTokenKind.TYPETOK) {
          identifier.NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
          identifier.NumAllocElements_ = rtl.rc(NumAllocElements_,0,4294967295);
          identifier.AllocElementType = rtl.rc(AllocElementType,0,191);
        } else if ($tmp === pas.Tokens.TTokenKind.LABELTOK) {
          identifier.isInit = false;
        };
      };
    } finally {
      $ir.free();
    };
  };
  this.DefineFunction = function (i, ForwardIdentIndex, isForward, isInt, isInl, isOvr, IsNestedFunction, NestedFunctionResultType, NestedFunctionNumAllocElements, NestedFunctionAllocElementType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(ForwardIdentIndex,-2147483648,2147483647);
    rtl.rc(NestedFunctionResultType.get(),0,191);
    rtl.rc(NestedFunctionNumAllocElements.get(),0,4294967295);
    rtl.rc(NestedFunctionAllocElementType.get(),0,191);
    var Result = 0;
    var VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
    var NumVarOfSameType = 0;
    var VarOfSameTypeIndex = 0;
    var x = 0;
    var ListPassMethod = 0;
    var VarType = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    var $ir = rtl.createIntfRefs();
    try {
      VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
      if (ForwardIdentIndex === 0) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) pas.Messages.Error$1(i + 1,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ReservedWordUserAsIdentifier,"Reserved word used as identifier","","","","","","","","","",""]),pas.Messages.IMessage)));
        if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
          $mod.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Common.TokenAt(i).Kind,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
          IsNestedFunction.set(false);
        } else {
          $mod.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
          IsNestedFunction.set(true);
        };
        NumVarOfSameType = 0;
        if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OPARTOK) && (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.CPARTOK)) i += 2;
        if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OPARTOK) {
          i = rtl.rc(i + 2,-2147483648,2147483647);
          do {
            NumVarOfSameType = 0;
            ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VALPASSING,0,3);
            if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
              ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING,0,3);
              i += 1;
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.VARTOK) {
              ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
              i += 1;
            };
            do {
              if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
                pas.Messages.Error$1(i + 1,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FormalParameterNameExpected,"Formal parameter name expected but {0} found.",pas.Common.TokenList.GetTokenSpellingAtIndex(i + 1),"","","","","","","","",""]),pas.Messages.IMessage)))}
               else {
                for (var $l = 1, $end = NumVarOfSameType; $l <= $end; $l++) {
                  x = $l;
                  if (rtl.rcArrR(VarOfSameType,x - 1).Name === pas.Common.TokenAt(i + 1).Name) pas.Messages.Error$1(i + 1,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierAlreadyDefined,"Identifier {0} is already defined.",pas.Common.TokenAt(i + 1).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                };
                NumVarOfSameType += 1;
                rtl.rcArrR(VarOfSameType,NumVarOfSameType - 1).Name = pas.Common.TokenAt(i + 1).Name;
              };
              i = rtl.rc(i + 2,-2147483648,2147483647);
            } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
            VarType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
            NumAllocElements = 0;
            AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
            if ((ListPassMethod in rtl.createSet(pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING,pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) && (pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COLONTOK)) {
              ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
              i -= 1;
            } else {
              pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) pas.Messages.Error$1(i + 1,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","","","","","","","","","",""]),pas.Messages.IMessage)));
              i = rtl.rc($mod.CompileType(i + 1,{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  rtl.rc(v,0,4294967295);
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  AllocElementType = v;
                }}),-2147483648,2147483647);
              if ((VarType === pas.Tokens.TTokenKind.FILETOK) && (ListPassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) pas.Messages.Error$1(i,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileParameterMustBeVAR,"File parameters must be var parameters","","","","","","","","","",""]),pas.Messages.IMessage)));
            };
            for (var $l1 = 1, $end1 = NumVarOfSameType; $l1 <= $end1; $l1++) {
              VarOfSameTypeIndex = $l1;
              pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams += 1;
              if (pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams > 8) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.TooManyParameters,pas.Common.NumIdent())}
               else {
                rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).DataType = rtl.rc(VarType,0,191);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).DataType = rtl.rc(VarType,0,191);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).Name = rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).Name;
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).AllocElementType = rtl.rc(AllocElementType,0,191);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).PassMethod = rtl.rc(ListPassMethod,0,3);
              };
            };
            i = rtl.rc(i + 1,-2147483648,2147483647);
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.SEMICOLONTOK));
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
          i = rtl.rc(i + 1,-2147483648,2147483647);
        } else i = rtl.rc(i + 2,-2147483648,2147483647);
        NestedFunctionResultType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        NestedFunctionNumAllocElements.set(0);
        NestedFunctionAllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        if (IsNestedFunction.get()) {
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.ARRAYTOK) pas.Messages.Error$1(i + 1,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","","","","","","","","","",""]),pas.Messages.IMessage)));
          i = rtl.rc($mod.CompileType(i + 1,{get: function () {
              return VarType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              VarType = v;
            }},{get: function () {
              return NumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NumAllocElements = v;
            }},{get: function () {
              return AllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              AllocElementType = v;
            }}),-2147483648,2147483647);
          NestedFunctionResultType.set(VarType);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).DataType = rtl.rc(NestedFunctionResultType.get(),0,191);
          NestedFunctionNumAllocElements.set(NumAllocElements);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedFunctionNumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
          NestedFunctionAllocElementType.set(AllocElementType);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedFunctionAllocElementType = rtl.rc(AllocElementType,0,191);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isNestedFunction = true;
          i = rtl.rc(i + 1,-2147483648,2147483647);
        };
        pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
      };
      isForward.set(false);
      isInt.set(false);
      isInl.set(false);
      isOvr.set(false);
      while (pas.Common.TokenAt(i + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.OVERLOADTOK,pas.Tokens.TTokenKind.ASSEMBLERTOK,pas.Tokens.TTokenKind.FORWARDTOK,pas.Tokens.TTokenKind.REGISTERTOK,pas.Tokens.TTokenKind.INTERRUPTTOK,pas.Tokens.TTokenKind.PASCALTOK,pas.Tokens.TTokenKind.STDCALLTOK,pas.Tokens.TTokenKind.INLINETOK,pas.Tokens.TTokenKind.EXTERNALTOK,pas.Tokens.TTokenKind.KEEPTOK)) {
        var $tmp = pas.Common.TokenAt(i + 1).Kind;
        if ($tmp === pas.Tokens.TTokenKind.OVERLOADTOK) {
          isOvr.set(true);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isOverload = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.ASSEMBLERTOK) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isAsm = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.FORWARDTOK) {
          if (pas.Common.INTERFACETOK_USE) if (IsNestedFunction.get()) {
            pas.Messages.Error$1(i,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FunctionDirectiveForwardNotAllowedInInterfaceSection,"Function directive 'FORWARD' not allowed in interface section","","","","","","","","","",""]),pas.Messages.IMessage)))}
           else pas.Messages.Error$1(i,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ProcedureDirectiveForwardNotAllowedInInterfaceSection,"Procedure directive 'FORWARD' not allowed in interface section","","","","","","","","","",""]),pas.Messages.IMessage)));
          isForward.set(true);
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.REGISTERTOK) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isRegister = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.STDCALLTOK) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isStdCall = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.INLINETOK) {
          isInl.set(true);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isInline = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.INTERRUPTTOK) {
          isInt.set(true);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isInterrupt = true;
          pas.Common.IdentifierAt(pas.Common.NumIdent()).IsNotDead = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.PASCALTOK) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isRecursion = true;
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isPascal = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.EXTERNALTOK) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isExternal = true;
          isForward.set(true);
          i += 1;
          pas.Common.IdentifierAt(pas.Common.NumIdent()).Alias = "";
          pas.Common.IdentifierAt(pas.Common.NumIdent()).Libraries = 0;
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
            pas.Common.IdentifierAt(pas.Common.NumIdent()).Alias = pas.Common.TokenAt(i + 1).Name;
            if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
              pas.Common.IdentifierAt(pas.Common.NumIdent()).Libraries = rtl.rc(i + 2,-2147483648,2147483647);
              i += 1;
            };
            i += 1;
          } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
            pas.Common.IdentifierAt(pas.Common.NumIdent()).Alias = pas.Common.IdentifierAt(pas.Common.NumIdent()).Name;
            pas.Common.IdentifierAt(pas.Common.NumIdent()).Libraries = rtl.rc(i + 1,-2147483648,2147483647);
            i += 1;
          };
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.KEEPTOK) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isKeep = true;
          pas.Common.IdentifierAt(pas.Common.NumIdent()).IsNotDead = true;
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        };
        i += 1;
      };
      if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isRegister && (pas.Common.IdentifierAt(pas.Common.NumIdent()).isPascal || pas.Common.IdentifierAt(pas.Common.NumIdent()).isRecursion)) pas.Messages.Error$1(i,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineRegisterWithPascal,'Calling convention directive "REGISTER" not applicable with "PASCAL"',"","","","","","","","","",""]),pas.Messages.IMessage)));
      if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isInline && (pas.Common.IdentifierAt(pas.Common.NumIdent()).isPascal || pas.Common.IdentifierAt(pas.Common.NumIdent()).isRecursion)) pas.Messages.Error$1(i,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineInlineWithPascal,'Calling convention directive "INLINE" not applicable with "PASCAL"',"","","","","","","","","",""]),pas.Messages.IMessage)));
      if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isInline && pas.Common.IdentifierAt(pas.Common.NumIdent()).isInterrupt) pas.Messages.Error$1(i,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineInlineWithInterrupt,'Procedure directive "INLINE" cannot be used with "INTERRUPT"',"","","","","","","","","",""]),pas.Messages.IMessage)));
      if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isInline && pas.Common.IdentifierAt(pas.Common.NumIdent()).isExternal) pas.Messages.Error$1(i,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CannotCombineInlineWithExternal,'Procedure directive "INLINE" cannot be used with "EXTERNAL"',"","","","","","","","","",""]),pas.Messages.IMessage)));
      Result = rtl.rc(i,-2147483648,2147483647);
    } finally {
      $ir.free();
    };
    return Result;
  };
  this.Elements = function (IdentIndex) {
    rtl.rc(IdentIndex,-2147483648,2147483647);
    var Result = 0;
    if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
      Result = 0}
     else if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
      Result = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,0,4294967295)}
     else if ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ === 0) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.PROCVARTOK))) {
      Result = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements,0,4294967295)}
     else Result = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,0,4294967295);
    return Result;
  };
  this.GetIdentIndex = function (S) {
    var Result = 0;
    var TempIndex = 0;
    function UnitAllowedAccess(IdentIndex, SourceFile) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var Result = false;
      var i = 0;
      Result = false;
      if (pas.Common.IdentifierAt(IdentIndex).Section) for (var $l = 256; $l >= 1; $l--) {
        i = $l;
        if (rtl.rcArrR(SourceFile.AllowedUnitNames,i - 1) === pas.Common.IdentifierAt(IdentIndex).SourceFile.Name) return true;
      };
      return Result;
    };
    function Search(X, SourceFile) {
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      Result = 0;
      for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = 1, $end = pas.Common.NumIdent(); $l1 <= $end; $l1++) {
          IdentIndex = $l1;
          if ((X === pas.Common.IdentifierAt(IdentIndex).Name) && (rtl.rcArrR(pas.Common.BlockStack,BlockStackIndex) === pas.Common.IdentifierAt(IdentIndex).Block)) if ((pas.Common.IdentifierAt(IdentIndex).SourceFile === SourceFile) || (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex === 1) || (pas.Common.IdentifierAt(IdentIndex).SourceFile.Name === "SYSTEM") || UnitAllowedAccess(IdentIndex,SourceFile)) {
            Result = rtl.rc(IdentIndex,-2147483648,2147483647);
            pas.Common.IdentifierAt(IdentIndex).Pass = rtl.rc(pas.Common.pass,0,2);
            if (pas.System.Pos(".",X) > 0) $mod.GetIdentIndex(pas.System.Copy(X,1,pas.System.Pos(".",X) - 1));
            if ((pas.Common.IdentifierAt(IdentIndex).SourceFile === SourceFile) || (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex === 1)) return Result;
          };
        };
      };
      return Result;
    };
    function SearchCurrenTSourceFile(X, SourceFile) {
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      Result = 0;
      for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = 1, $end = pas.Common.NumIdent(); $l1 <= $end; $l1++) {
          IdentIndex = $l1;
          if ((X === pas.Common.IdentifierAt(IdentIndex).Name) && (rtl.rcArrR(pas.Common.BlockStack,BlockStackIndex) === pas.Common.IdentifierAt(IdentIndex).Block)) if ((pas.Common.IdentifierAt(IdentIndex).SourceFile === SourceFile) || UnitAllowedAccess(IdentIndex,SourceFile)) {
            Result = rtl.rc(IdentIndex,-2147483648,2147483647);
            pas.Common.IdentifierAt(IdentIndex).Pass = rtl.rc(pas.Common.pass,0,2);
            if (pas.System.Pos(".",X) > 0) $mod.GetIdentIndex(pas.System.Copy(X,1,pas.System.Pos(".",X) - 1));
            if (pas.Common.IdentifierAt(IdentIndex).SourceFile === SourceFile) return Result;
          };
        };
      };
      return Result;
    };
    if (S === "") return -1;
    if ((rtl.length(pas.Common.WithName) - 1) > 0) for (var $l = 0, $end = rtl.length(pas.Common.WithName) - 1; $l <= $end; $l++) {
      TempIndex = $l;
      Result = rtl.rc(Search(rtl.rcArrR(pas.Common.WithName,TempIndex) + "." + S,pas.Common.ActiveSourceFile),-2147483648,2147483647);
      if (Result > 0) return Result;
    };
    Result = rtl.rc(Search(S,pas.Common.ActiveSourceFile),-2147483648,2147483647);
    if ((Result === 0) && (pas.System.Pos(".",S) > 0)) {
      TempIndex = rtl.rc(Search(pas.System.Copy(S,1,pas.System.Pos(".",S) - 1),pas.Common.ActiveSourceFile),-2147483648,2147483647);
      if (TempIndex > 0) if ((pas.Common.IdentifierAt(TempIndex).Kind === pas.Tokens.TTokenKind.UNITTOK) || (pas.Common.IdentifierAt(TempIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK)) {
        Result = rtl.rc(SearchCurrenTSourceFile(pas.System.Copy(S,pas.System.Pos(".",S) + 1,S.length),pas.Common.IdentifierAt(TempIndex).SourceFile),-2147483648,2147483647)}
       else if (pas.Common.IdentifierAt(TempIndex).DataType === pas.Tokens.TTokenKind.OBJECTTOK) Result = rtl.rc(SearchCurrenTSourceFile(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(TempIndex).NumAllocElements).Field[0].Name + pas.System.Copy(S,pas.System.Pos(".",S),S.length),pas.Common.IdentifierAt(TempIndex).SourceFile),-2147483648,2147483647);
    };
    return Result;
  };
  this.GetSizeOf = function (i, ValType) {
    rtl.rc(i,-2147483648,2147483647);
    rtl.rc(ValType,0,191);
    var Result = 0;
    var IdentIndex = 0;
    IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
    var $tmp = ValType;
    if ($tmp === pas.Tokens.TTokenKind.ENUMTOK) {
      Result = rtl.rc(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),-9007199254740991,9007199254740991)}
     else if ($tmp === pas.Tokens.TTokenKind.RECORDTOK) {
      if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.CPARTOK)) {
        Result = rtl.rc(pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),-9007199254740991,9007199254740991)}
       else Result = rtl.rc($mod.RecordSize(IdentIndex,""),-9007199254740991,9007199254740991)}
     else if (($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
      if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
        if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ > 0) {
          if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
            Result = rtl.rc(pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),-9007199254740991,9007199254740991)}
           else Result = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ * 2,-9007199254740991,9007199254740991);
        } else if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
          Result = rtl.rc($mod.RecordSize(IdentIndex,""),-9007199254740991,9007199254740991)}
         else Result = rtl.rc(pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),-9007199254740991,9007199254740991);
      } else if ($mod.Elements(IdentIndex) > 0) {
        Result = rtl.rc(rtl.rc($mod.Elements(IdentIndex) * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),-2147483648,2147483647),-9007199254740991,9007199254740991)}
       else Result = rtl.rc(pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),-9007199254740991,9007199254740991);
    } else {
      if (ValType === pas.Tokens.TTokenKind.UNTYPETOK) {
        Result = 0}
       else Result = rtl.rc(pas.Datatypes.GetDataSize(ValType),-9007199254740991,9007199254740991);
    };
    return Result;
  };
  this.ObjectRecordSize = function (i) {
    rtl.rc(i,0,4294967295);
    var Result = 0;
    var j = 0;
    var FieldType = 0;
    Result = 0;
    if (i > 0) {
      for (var $l = 1, $end = pas.Common.GetTypeAtIndex(i).NumFields; $l <= $end; $l++) {
        j = $l;
        FieldType = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(i).Field,j).DataType,0,191);
        if (FieldType !== pas.Tokens.TTokenKind.RECORDTOK) Result += pas.Datatypes.GetDataSize(FieldType);
      };
    };
    return Result;
  };
  this.RecordSize = function (IdentIndex, field) {
    rtl.rc(IdentIndex,-2147483648,2147483647);
    var Result = 0;
    var i = 0;
    var j = 0;
    var Name = "";
    var base = "";
    var FieldType = 0;
    var AllocElementType = 0;
    var NumAllocElements = 0;
    var NumAllocElements_ = 0;
    var yes = false;
    i = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements & 0xFFFF,-2147483648,2147483647);
    Result = 0;
    FieldType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
    yes = false;
    if (i > 0) {
      for (var $l = 1, $end = pas.Common.GetTypeAtIndex(i).NumFields; $l <= $end; $l++) {
        j = $l;
        FieldType = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(i).Field,j).DataType,0,191);
        NumAllocElements = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(i).Field,j).NumAllocElements & 0xFFFF,0,4294967295);
        NumAllocElements_ = rtl.rc(rtl.lw(rtl.rcArrR(pas.Common.GetTypeAtIndex(i).Field,j).NumAllocElements >>> 16),0,4294967295);
        AllocElementType = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(i).Field,j).AllocElementType,0,191);
        if (AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.FORWARDTYPE,pas.Tokens.TTokenKind.PROCVARTOK)) {
          AllocElementType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
          NumAllocElements = 0;
          NumAllocElements_ = 0;
        };
        if (FieldType === pas.Tokens.TTokenKind.ENUMTOK) FieldType = rtl.rc(AllocElementType,0,191);
        if (rtl.rcArrR(pas.Common.GetTypeAtIndex(i).Field,j).Name === field) {
          yes = true;
          break;
        };
        if (FieldType !== pas.Tokens.TTokenKind.RECORDTOK) if ((FieldType in pas.Datatypes.Pointers) && (NumAllocElements > 0)) {
          if (AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
            AllocElementType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
            NumAllocElements = rtl.rc(rtl.lw(rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,i - 1).Field,j).NumAllocElements >>> 16),0,4294967295);
            NumAllocElements_ = 0;
          };
          if (NumAllocElements_ > 0) {
            Result += NumAllocElements * NumAllocElements_ * pas.Datatypes.GetDataSize(AllocElementType)}
           else Result += NumAllocElements * pas.Datatypes.GetDataSize(AllocElementType);
        } else Result += pas.Datatypes.GetDataSize(FieldType);
      };
    } else {
      Name = pas.Common.IdentifierAt(IdentIndex).Name;
      base = pas.System.Copy(Name,1,pas.System.Pos(".",Name) - 1);
      IdentIndex = rtl.rc($mod.GetIdentIndex(base),-2147483648,2147483647);
      for (var $l1 = 1, $end1 = pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).NumFields; $l1 <= $end1; $l1++) {
        i = $l1;
        if (pas.System.Pos(Name,base + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).Name) > 0) if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).DataType !== pas.Tokens.TTokenKind.RECORDTOK) {
          FieldType = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).DataType,0,191);
          NumAllocElements = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).NumAllocElements & 0xffff,0,4294967295);
          NumAllocElements_ = rtl.rc(rtl.lw(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).NumAllocElements >>> 16),0,4294967295);
          AllocElementType = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).AllocElementType,0,191);
          if (FieldType === pas.Tokens.TTokenKind.ENUMTOK) FieldType = rtl.rc(AllocElementType,0,191);
          if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field,i).Name === field) {
            yes = true;
            break;
          };
          if (FieldType !== pas.Tokens.TTokenKind.RECORDTOK) if ((FieldType in pas.Datatypes.Pointers) && (NumAllocElements > 0)) {
            if (AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
              AllocElementType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
              NumAllocElements = rtl.rc(rtl.lw(rtl.rcArrR(rtl.rcArrR(pas.Common._TypeArray,i - 1).Field,j).NumAllocElements >>> 16),0,4294967295);
              NumAllocElements_ = 0;
            };
            if (NumAllocElements_ > 0) {
              Result += NumAllocElements * NumAllocElements_ * pas.Datatypes.GetDataSize(AllocElementType)}
             else Result += NumAllocElements * pas.Datatypes.GetDataSize(AllocElementType);
          } else Result += pas.Datatypes.GetDataSize(FieldType);
        };
      };
    };
    if (field !== "") if (!yes) {
      Result = rtl.rc(-1,-2147483648,2147483647)}
     else Result = rtl.rc(Result + (FieldType << 16),-2147483648,2147483647);
    return Result;
  };
  this.SaveToDataSegment = function (index, Value, valueDataType) {
    rtl.rc(index,-2147483648,2147483647);
    rtl.rc(Value,-9007199254740991,9007199254740991);
    rtl.rc(valueDataType,0,191);
    if ((index < 0) || (index > 0xFFFF)) {
      pas.System.Writeln("SaveToDataSegment: Invalid segment index",index);
      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
    };
    var $tmp = valueDataType;
    if (($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp === pas.Tokens.TTokenKind.BYTETOK) || ($tmp === pas.Tokens.TTokenKind.CHARTOK) || ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK)) {
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255));
    } else if (($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp === pas.Tokens.TTokenKind.WORDTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) || ($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || ($tmp === pas.Tokens.TTokenKind.PCHARTOK)) {
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 1,rtl.rc(Math.floor(Value / 256),0,255));
    } else if ($tmp === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255) | 0x8000);
      rtl.rcArrW(pas.Common._DataSegment,index + 1,rtl.rc(Math.floor(Value / 256),0,255) | 0x4000);
    } else if ($tmp === pas.Tokens.TTokenKind.CODEORIGINOFFSET) {
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255) | 0x2000);
      rtl.rcArrW(pas.Common._DataSegment,index + 1,rtl.rc(Math.floor(Value / 256),0,255) | 0x1000);
    } else if (($tmp === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) || ($tmp === pas.Tokens.TTokenKind.REALTOK)) {
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 1,rtl.rc(Math.floor(Value / 256),0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 2,rtl.rc(Math.floor(Value / 65536),0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 3,rtl.rc(Math.floor(Value / 16777216),0,255));
    } else if ($tmp === pas.Tokens.TTokenKind.SINGLETOK) {
      Value = rtl.rc(pas.Numbers.CastToSingle(Value),-9007199254740991,9007199254740991);
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 1,rtl.rc(Math.floor(Value / 256),0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 2,rtl.rc(Math.floor(Value / 65536),0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 3,rtl.rc(Math.floor(Value / 16777216),0,255));
    } else if ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK) {
      Value = rtl.rc(pas.Numbers.CastToHalfSingle(Value),-9007199254740991,9007199254740991);
      rtl.rcArrW(pas.Common._DataSegment,index,rtl.rc(Value,0,255));
      rtl.rcArrW(pas.Common._DataSegment,index + 1,rtl.rc(Math.floor(Value / 256),0,255));
    };
    pas.Common.DataSegmentUse = true;
  };
  $mod.$implcode = function () {
    $impl.CompileConstFactor = function (i, ConstVal, ConstValType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
      rtl.rc(ConstValType.get(),0,191);
      var Result = 0;
      var IdentIndex = 0;
      var j = 0;
      var Kind = 0;
      var ArrayIndexType = 0;
      var ArrayIndex = 0;
      function GetStaticValue(x) {
        rtl.rc(x,0,255);
        var Result = 0;
        Result = rtl.rc(rtl.rcArrR(pas.Common.StaticStringData,(pas.Common.IdentifierAt(IdentIndex).Value - 256 - pas.Common.CODEORIGIN_BASE) + (ArrayIndex * pas.Datatypes.GetDataSize(ConstValType.get())) + x),-9007199254740991,9007199254740991);
        return Result;
      };
      var $ir = rtl.createIntfRefs();
      try {
        ConstVal.set(0);
        ConstValType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        Result = rtl.rc(i,-2147483648,2147483647);
        j = 0;
        var $tmp = pas.Common.TokenAt(i).Kind;
        if ($tmp === pas.Tokens.TTokenKind.LOWTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          if (pas.Common.TokenAt(i + 2).Kind in pas.Datatypes.AllTypes) {
            ConstValType.set(pas.Common.TokenAt(i + 2).Kind);
            i += 2;
          } else {
            i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
            if (pas.Common.isError) return Result;
          };
          if (ConstValType.get() in pas.Datatypes.Pointers) {
            ConstVal.set(0)}
           else ConstVal.set(pas.Common.LowBound(i,ConstValType.get()));
          ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.HIGHTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          if (pas.Common.TokenAt(i + 2).Kind in pas.Datatypes.AllTypes) {
            ConstValType.set(pas.Common.TokenAt(i + 2).Kind);
            i += 2;
          } else {
            i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
            if (pas.Common.isError) return Result;
          };
          if (ConstValType.get() in pas.Datatypes.Pointers) {
            IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
            if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
              ConstVal.set(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ - 1)}
             else if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) {
              ConstVal.set(pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1)}
             else ConstVal.set(0);
          } else ConstVal.set(pas.Common.HighBound(i,ConstValType.get()));
          ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.LENGTHTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          ConstVal.set(0);
          if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
            IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
            if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
            if (pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.TYPETOK)) {
              if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0))) {
                if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                  pas.Common.isError = true;
                  return Result;
                } else {
                  if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                    ConstVal.set(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_)}
                   else ConstVal.set(pas.Common.IdentifierAt(IdentIndex).NumAllocElements);
                  ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
                };
              } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.TypeMismatch);
            } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
            i += 2;
          } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.SIZEOFTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          if (pas.Common.TokenAt(i + 2).Kind in rtl.unionSet(rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes),rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK))) {
            ConstVal.set(pas.Datatypes.GetDataSize(pas.Common.TokenAt(i + 2).Kind));
            ConstValType.set(pas.Tokens.TTokenKind.BYTETOK);
            j = rtl.rc(i + 2,-2147483648,2147483647);
          } else {
            if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
            j = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
            if (pas.Common.isError) return Result;
            ConstVal.set($mod.GetSizeOf(i,ConstValType.get()));
            ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          };
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.LOTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          pas.Common.OldConstValType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          if (pas.Common.OldConstValType in rtl.createSet(pas.Tokens.TTokenKind.DATAORIGINOFFSET,pas.Tokens.TTokenKind.CODEORIGINOFFSET)) pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidVariableAddress,"Can't take the address of variable","","","","","","","","","",""]),pas.Messages.IMessage)));
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.INTEGERTOK,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp1 = ConstValType.get();
          if (($tmp1 === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp1 === pas.Tokens.TTokenKind.CARDINALTOK)) {
            ConstVal.set(ConstVal.get() & 0xFFFF)}
           else if (($tmp1 === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp1 === pas.Tokens.TTokenKind.WORDTOK)) {
            ConstVal.set(ConstVal.get() & 0xFF)}
           else if (($tmp1 === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp1 === pas.Tokens.TTokenKind.BYTETOK)) ConstVal.set(ConstVal.get() & 0xF);
          ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.HITOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          pas.Common.OldConstValType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          if (pas.Common.OldConstValType in rtl.createSet(pas.Tokens.TTokenKind.DATAORIGINOFFSET,pas.Tokens.TTokenKind.CODEORIGINOFFSET)) pas.Messages.Error$1(i,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.InvalidVariableAddress,"Can't take the address of variable","","","","","","","","","",""]),pas.Messages.IMessage)));
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.INTEGERTOK,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp2 = ConstValType.get();
          if (($tmp2 === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp2 === pas.Tokens.TTokenKind.CARDINALTOK)) {
            ConstVal.set(Math.floor(ConstVal.get() / 65536))}
           else if (($tmp2 === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp2 === pas.Tokens.TTokenKind.WORDTOK)) {
            ConstVal.set(Math.floor(ConstVal.get() / 256))}
           else if (($tmp2 === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp2 === pas.Tokens.TTokenKind.BYTETOK)) ConstVal.set(Math.floor(ConstVal.get() / 16));
          ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if (($tmp === pas.Tokens.TTokenKind.INTTOK) || ($tmp === pas.Tokens.TTokenKind.FRACTOK)) {
          Kind = rtl.rc(pas.Common.TokenAt(i).Kind,0,191);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          if (!(ConstValType.get() in pas.Datatypes.RealTypes)) pas.Messages.ErrorIncompatibleTypes(i,ConstValType.get(),pas.Tokens.TTokenKind.REALTOK,false);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp3 = Kind;
          if ($tmp3 === pas.Tokens.TTokenKind.INTTOK) {
            ConstVal.set(pas.Numbers.Trunc(ConstValType.get(),ConstVal.get()))}
           else if ($tmp3 === pas.Tokens.TTokenKind.FRACTOK) ConstVal.set(pas.Numbers.Frac(ConstValType.get(),ConstVal.get()));
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if (($tmp === pas.Tokens.TTokenKind.ROUNDTOK) || ($tmp === pas.Tokens.TTokenKind.TRUNCTOK)) {
          Kind = rtl.rc(pas.Common.TokenAt(i).Kind,0,191);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.REALTOK,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          ConstVal.set(rtl.rc(ConstVal.get(),-2147483648,2147483647));
          var $tmp4 = Kind;
          if ($tmp4 === pas.Tokens.TTokenKind.ROUNDTOK) {
            if (ConstVal.get() < 0) {
              ConstVal.set(-((Math.abs(ConstVal.get()) >>> 8) + (((Math.abs(ConstVal.get()) & 0xff) > 127) + 0)))}
             else ConstVal.set(Math.floor(ConstVal.get() / 256) + (((Math.abs(ConstVal.get()) & 0xff) > 127) + 0))}
           else if ($tmp4 === pas.Tokens.TTokenKind.TRUNCTOK) if (ConstVal.get() < 0) {
            ConstVal.set(-(Math.abs(ConstVal.get()) >>> 8))}
           else ConstVal.set(Math.floor(ConstVal.get() / 256));
          ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.ODDTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.CARDINALTOK,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          ConstVal.set(pas.System.Odd(ConstVal.get()) + 0);
          ConstValType.set(pas.Tokens.TTokenKind.BOOLEANTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.CHRTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.BYTETOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.INTEGERTOK,ConstValType.get(),true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          ConstValType.set(pas.Tokens.TTokenKind.CHARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.ORDTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          j = rtl.rc(i + 2,-2147483648,2147483647);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.BYTETOK,false,true),-2147483648,2147483647);
          if (!(ConstValType.get() in rtl.unionSet(pas.Datatypes.OrdinalTypes,rtl.createSet(pas.Tokens.TTokenKind.ENUMTOK)))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
          if (pas.Common.isError) return Result;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BOOLEANTOK,pas.Tokens.TTokenKind.ENUMTOK)) ConstValType.set(pas.Tokens.TTokenKind.BYTETOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if (($tmp === pas.Tokens.TTokenKind.PREDTOK) || ($tmp === pas.Tokens.TTokenKind.SUCCTOK)) {
          Kind = rtl.rc(pas.Common.TokenAt(i).Kind,0,191);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (!(ConstValType.get() in pas.Datatypes.OrdinalTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
          if (pas.Common.isError) return Result;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (Kind === pas.Tokens.TTokenKind.PREDTOK) {
            ConstVal.set(ConstVal.get() - 1)}
           else ConstVal.set(ConstVal.get() + 1);
          if (!(ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BOOLEANTOK))) ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.IDENTTOK) {
          IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
          if (IdentIndex > 0) {
            if ((pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.TYPETOK) && (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK)) {
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
              j = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
              if (pas.Common.isError) return Result;
              if (!(ConstValType.get() in pas.Datatypes.AllTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.TypeMismatch);
              if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.RealTypes) && (ConstValType.get() in pas.Datatypes.RealTypes)) {}
              else if (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) {
                pas.Messages.Error$1(j,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(ConstValType.get()) + '" to "' + pas.Common.TokenAt(i).Name + '"',"","","","","","","","","",""]),pas.Messages.IMessage)));
              };
              ConstValType.set(pas.Common.IdentifierAt($mod.GetIdentIndex(pas.Common.TokenAt(i).Name)).DataType);
              if (ConstValType.get() === pas.Tokens.TTokenKind.ENUMTOK) ConstValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
              pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
              i = rtl.rc(j + 1,-2147483648,2147483647);
            } else if (!(pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.TYPETOK,pas.Tokens.TTokenKind.ENUMTOK))) {
              pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantExpected,"Constant expected but {0} found",pas.Common.IdentifierAt(IdentIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
              if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
               else {
                j = rtl.rc($mod.CompileConstExpression(i + 2,{get: function () {
                    return ArrayIndex;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ArrayIndex = v;
                  }},{get: function () {
                    return ArrayIndexType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ArrayIndexType = v;
                  }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                if (pas.Common.isError) return Result;
                if ((ArrayIndex < 0) || (ArrayIndex > ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1) + ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) + 0)))) {
                  pas.Common.isConst = false;
                  pas.Messages.Error$2(i,pas.Messages.TErrorCode.SubrangeBounds);
                };
                pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                if (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                  pas.Common.isError = true;
                  return Result;
                };
                ConstValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                var $tmp5 = pas.Datatypes.GetDataSize(ConstValType.get());
                if ($tmp5 === 1) {
                  ConstVal.set(GetStaticValue(0 + ((pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.PCHARTOK) + 0)))}
                 else if ($tmp5 === 2) {
                  ConstVal.set(GetStaticValue(0) + rtl.shl(GetStaticValue(1),8))}
                 else if ($tmp5 === 4) ConstVal.set(GetStaticValue(0) + rtl.shl(GetStaticValue(1),8) + rtl.shl(GetStaticValue(2),16) + rtl.shl(GetStaticValue(3),24));
                if (ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)) ConstVal.set(rtl.shl(ConstVal.get(),32));
                i = rtl.rc(j + 1,-2147483648,2147483647);
              }}
             else {
              ConstValType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
              if ((ConstValType.get() in pas.Datatypes.Pointers) || (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                ConstVal.set(pas.Common.IdentifierAt(IdentIndex).Value - 256)}
               else ConstVal.set(pas.Common.IdentifierAt(IdentIndex).Value);
              if (ConstValType.get() === pas.Tokens.TTokenKind.ENUMTOK) {
                pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
                j = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                if (pas.Common.isError) return Result;
                pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
                ConstValType.set(pas.Common.TokenAt(i).Kind);
                i = rtl.rc(j + 1,-2147483648,2147483647);
              };
            }}
           else pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.ADDRESSTOK) {
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
            pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
           else {
            IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
            if (IdentIndex > 0) {
              var $tmp6 = pas.Common.IdentifierAt(IdentIndex).Kind;
              if ($tmp6 === pas.Tokens.TTokenKind.CONSTTOK) {
                if (!((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0))) {
                  pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp)}
                 else ConstVal.set(pas.Common.IdentifierAt(IdentIndex).Value - 256)}
               else if ($tmp6 === pas.Tokens.TTokenKind.VARTOK) {
                if (pas.Common.IdentifierAt(IdentIndex).isAbsolute) {
                  if ((((Math.abs(pas.Common.IdentifierAt(IdentIndex).Value) & 0xff) === 0) && (rtl.rc(Math.abs(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 16777216)) & 0x7f,0,255) in rtl.createSet(null,1,127))) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements in rtl.createSet(null,0,1)))) {
                    pas.Common.isError = true;
                    return 0;
                  } else {
                    ConstVal.set(pas.Common.IdentifierAt(IdentIndex).Value);
                    if (ConstVal.get() < 0) {
                      pas.Common.isError = true;
                      return 0;
                    };
                  };
                } else {
                  if (pas.Common.isConst) {
                    pas.Common.isError = true;
                    return Result;
                  };
                  ConstVal.set(pas.Common.IdentifierAt(IdentIndex).Value - 32768);
                  ConstValType.set(pas.Tokens.TTokenKind.DATAORIGINOFFSET);
                  if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK)) {
                    j = rtl.rc($mod.CompileConstExpression(i + 3,{get: function () {
                        return ArrayIndex;
                      }, set: function (v) {
                        rtl.rc(v,-9007199254740991,9007199254740991);
                        ArrayIndex = v;
                      }},{get: function () {
                        return ArrayIndexType;
                      }, set: function (v) {
                        rtl.rc(v,0,191);
                        ArrayIndexType = v;
                      }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                    if (pas.Common.isError) return Result;
                    pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                    if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
                      ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType) * pas.Common.IdentifierAt(IdentIndex).NumAllocElements_));
                      j = rtl.rc($mod.CompileConstExpression(j + 2,{get: function () {
                          return ArrayIndex;
                        }, set: function (v) {
                          rtl.rc(v,-9007199254740991,9007199254740991);
                          ArrayIndex = v;
                        }},{get: function () {
                          return ArrayIndexType;
                        }, set: function (v) {
                          rtl.rc(v,0,191);
                          ArrayIndexType = v;
                        }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                      if (pas.Common.isError) return Result;
                      pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                      ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)));
                    } else ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)));
                    i = rtl.rc(j,-2147483648,2147483647);
                    pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                  };
                  Result = rtl.rc(i + 1,-2147483648,2147483647);
                  return Result;
                }}
               else {
                pas.Messages.Error$1(i + 1,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantTakeAddressOfIdentifier,"Can't take the address of " + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).Kind),"","","","","","","","","",""]),pas.Messages.IMessage)));
              };
              if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK)) {
                j = rtl.rc($mod.CompileConstExpression(i + 3,{get: function () {
                    return ArrayIndex;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ArrayIndex = v;
                  }},{get: function () {
                    return ArrayIndexType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ArrayIndexType = v;
                  }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                if (pas.Common.isError) return Result;
                pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
                  ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType) * pas.Common.IdentifierAt(IdentIndex).NumAllocElements_));
                  j = rtl.rc($mod.CompileConstExpression(j + 2,{get: function () {
                      return ArrayIndex;
                    }, set: function (v) {
                      rtl.rc(v,-9007199254740991,9007199254740991);
                      ArrayIndex = v;
                    }},{get: function () {
                      return ArrayIndexType;
                    }, set: function (v) {
                      rtl.rc(v,0,191);
                      ArrayIndexType = v;
                    }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                  if (pas.Common.isError) return Result;
                  pas.Common.CheckArrayIndex(j,IdentIndex,ArrayIndex,ArrayIndexType);
                  ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)));
                } else ConstVal.set(ConstVal.get() + (ArrayIndex * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)));
                i = rtl.rc(j,-2147483648,2147483647);
                pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
              };
              ConstValType.set(pas.Tokens.TTokenKind.POINTERTOK);
            } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
            Result = rtl.rc(i + 1,-2147483648,2147483647);
          }}
         else if ($tmp === pas.Tokens.TTokenKind.INTNUMBERTOK) {
          ConstVal.set(pas.Common.TokenAt(i).Value);
          ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.FRACNUMBERTOK) {
          ConstVal.set(pas.Numbers.FromSingle(pas.Common.TokenAt(i).FracValue));
          ConstValType.set(pas.Tokens.TTokenKind.REALTOK);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
          ConstVal.set((pas.Common.TokenAt(i).StrAddress - 256) + pas.Common.CODEORIGIN_BASE);
          ConstValType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.CHARLITERALTOK) {
          ConstVal.set(pas.Common.TokenAt(i).Value);
          ConstValType.set(pas.Tokens.TTokenKind.CHARTOK);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.OPARTOK) {
          j = rtl.rc($mod.CompileConstExpression(i + 1,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.NOTTOK) {
          Result = rtl.rc($impl.CompileConstFactor(i + 1,ConstVal,ConstValType),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          if (ConstValType.get() === pas.Tokens.TTokenKind.BOOLEANTOK) {
            ConstVal.set(!(ConstVal.get() !== 0) + 0)}
           else {
            ConstVal.set(~ConstVal.get());
            ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
          };
        } else if (($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) || ($tmp === pas.Tokens.TTokenKind.REALTOK) || ($tmp === pas.Tokens.TTokenKind.SINGLETOK) || ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK)) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          j = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          if (!(ConstValType.get() in pas.Datatypes.RealTypes)) ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          ConstValType.set(pas.Common.TokenAt(i).Kind);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if (($tmp === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) || ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp === pas.Tokens.TTokenKind.WORDTOK) || ($tmp === pas.Tokens.TTokenKind.CHARTOK) || ($tmp === pas.Tokens.TTokenKind.PCHARTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp === pas.Tokens.TTokenKind.BYTETOK) || ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK) || ($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt($mod.GetIdentIndex(pas.Common.TokenAt(i + 2).Name)).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK)) {
            pas.Common.isError = true}
           else j = rtl.rc($mod.CompileConstExpression(i + 2,ConstVal,ConstValType,pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          if (pas.Common.isError) return Result;
          if ((ConstValType.get() in pas.Datatypes.Pointers) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.TokenAt(i + 3).Kind !== pas.Tokens.TTokenKind.OBRACKETTOK)) {
            IdentIndex = rtl.rc($mod.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
            if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.RECORDTOK)) if (((pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements in rtl.createSet(0,1))) || (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {}
            else pas.Messages.ErrorIdentifierIllegalTypeConversion(i + 2,IdentIndex,pas.Common.TokenAt(i).Kind);
          };
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.DATAORIGINOFFSET,pas.Tokens.TTokenKind.CODEORIGINOFFSET)) pas.Common.OldConstValType = rtl.rc(ConstValType.get(),0,191);
          ConstValType.set(pas.Common.TokenAt(i).Kind);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else {
          pas.Messages.Error$2(i,pas.Messages.TErrorCode.IdNumExpExpected);
        };
      } finally {
        $ir.free();
      };
      return Result;
    };
    $impl.CompileSimpleConstExpression = function (i, ConstVal, ConstValType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
      rtl.rc(ConstValType.get(),0,191);
      var Result = 0;
      var j = 0;
      var k = 0;
      var RightConstVal = 0;
      var RightConstValType = 0;
      ConstVal.set(0);
      ConstValType.set(pas.Tokens.TTokenKind.UNTYPETOK);
      Result = rtl.rc(i,-2147483648,2147483647);
      if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK)) {
        j = rtl.rc(i + 1,-2147483648,2147483647)}
       else j = rtl.rc(i,-2147483648,2147483647);
      j = rtl.rc($mod.CompileConstTerm(j,ConstVal,ConstValType),-2147483648,2147483647);
      if (pas.Common.isError) return Result;
      if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.MINUSTOK) {
        ConstVal.set(pas.Numbers.Negate(ConstValType,ConstVal.get()));
      };
      while (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK,pas.Tokens.TTokenKind.ORTOK,pas.Tokens.TTokenKind.XORTOK)) {
        k = rtl.rc($mod.CompileConstTerm(j + 2,{get: function () {
            return RightConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            RightConstVal = v;
          }},{get: function () {
            return RightConstValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightConstValType = v;
          }}),-2147483648,2147483647);
        if (pas.Common.isError) break;
        if ((ConstValType.get() in pas.Datatypes.RealTypes) && (RightConstValType in pas.Datatypes.IntegerTypes)) {
          RightConstVal = rtl.rc(pas.Numbers.FromInt64(RightConstVal),-9007199254740991,9007199254740991);
          RightConstValType = rtl.rc(ConstValType.get(),0,191);
        };
        if ((ConstValType.get() in pas.Datatypes.IntegerTypes) && (RightConstValType in pas.Datatypes.RealTypes)) {
          ConstVal.set(pas.Numbers.FromInt64(ConstVal.get()));
          ConstValType.set(RightConstValType);
        };
        if ((ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (RightConstValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) RightConstValType = rtl.rc(ConstValType.get(),0,191);
        if ((RightConstValType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (ConstValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) ConstValType.set(RightConstValType);
        var $tmp = pas.Common.TokenAt(j + 1).Kind;
        if ($tmp === pas.Tokens.TTokenKind.PLUSTOK) {
          ConstVal.set(pas.Numbers.Add(ConstValType.get(),ConstVal.get(),RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.MINUSTOK) {
          ConstVal.set(pas.Numbers.Subtract(ConstValType.get(),ConstVal.get(),RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.ORTOK) {
          ConstVal.set(rtl.or(ConstVal.get(),RightConstVal))}
         else if ($tmp === pas.Tokens.TTokenKind.XORTOK) ConstVal.set(rtl.xor(ConstVal.get(),RightConstVal));
        ConstValType.set(pas.Common.GetCommonType(j + 1,ConstValType.get(),RightConstValType));
        if (!(ConstValType.get() in rtl.unionSet(pas.Datatypes.RealTypes,rtl.createSet(pas.Tokens.TTokenKind.BOOLEANTOK)))) ConstValType.set(pas.Datatypes.GetValueType(ConstVal.get()));
        pas.Common.CheckOperator(i,pas.Common.TokenAt(j + 1).Kind,ConstValType.get(),RightConstValType);
        j = rtl.rc(k,-2147483648,2147483647);
      };
      Result = rtl.rc(j,-2147483648,2147483647);
      return Result;
    };
    $impl.DeclareFunction = function (i, ProcVarIndex) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ProcVarIndex.get(),0,4294967295);
      var Result = 0;
      var VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
      var ListPassMethod = 0;
      var NumVarOfSameType = 0;
      var VarOfSameTypeIndex = 0;
      var x = 0;
      var VarType = 0;
      var AllocElementType = 0;
      var NumAllocElements = 0;
      var IsNestedFunction = false;
      var $ir = rtl.createIntfRefs();
      try {
        VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
        pas.Common.NumProc += 1;
        if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
          $mod.DefineIdent(i,"@FN" + pas.SysUtils.IntToHex(pas.Common.NumProc,4),pas.Common.TokenAt(i).Kind,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
          IsNestedFunction = false;
        } else {
          $mod.DefineIdent(i,"@FN" + pas.SysUtils.IntToHex(pas.Common.NumProc,4),pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
          IsNestedFunction = true;
        };
        NumVarOfSameType = 0;
        ProcVarIndex.set(pas.Common.NumProc);
        i -= 1;
        if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OPARTOK) && (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.CPARTOK)) i += 2;
        if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OPARTOK) {
          i = rtl.rc(i + 2,-2147483648,2147483647);
          do {
            NumVarOfSameType = 0;
            ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VALPASSING,0,3);
            if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
              ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING,0,3);
              i += 1;
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.VARTOK) {
              ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
              i += 1;
            };
            do {
              if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
                pas.Messages.Error$1(i + 1,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FormalParameterNameExpected,"Formal parameter name expected but {0} found.",pas.Common.TokenList.GetTokenSpellingAtIndex(i + 1),"","","","","","","","",""]),pas.Messages.IMessage)))}
               else {
                for (var $l = 1, $end = NumVarOfSameType; $l <= $end; $l++) {
                  x = $l;
                  if (rtl.rcArrR(VarOfSameType,x - 1).Name === pas.Common.TokenAt(i + 1).Name) pas.Messages.Error$1(i + 1,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierAlreadyDefined,"Identifier {0} is already defined.",pas.Common.TokenAt(i + 1).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                };
                NumVarOfSameType += 1;
                rtl.rcArrR(VarOfSameType,NumVarOfSameType - 1).Name = pas.Common.TokenAt(i + 1).Name;
              };
              i = rtl.rc(i + 2,-2147483648,2147483647);
            } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
            VarType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
            NumAllocElements = 0;
            AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
            if ((ListPassMethod in rtl.createSet(pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING,pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) && (pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COLONTOK)) {
              ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
              i -= 1;
            } else {
              pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) pas.Messages.Error$1(i + 1,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","","","","","","","","","",""]),pas.Messages.IMessage)));
              i = rtl.rc($mod.CompileType(i + 1,{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  rtl.rc(v,0,4294967295);
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  AllocElementType = v;
                }}),-2147483648,2147483647);
              if ((VarType === pas.Tokens.TTokenKind.FILETOK) && (ListPassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FileParameterMustBeVAR,"File parameters must be var parameters","","","","","","","","","",""]),pas.Messages.IMessage)));
            };
            for (var $l1 = 1, $end1 = NumVarOfSameType; $l1 <= $end1; $l1++) {
              VarOfSameTypeIndex = $l1;
              pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams += 1;
              if (pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams > 8) {
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.TooManyParameters,pas.Common.NumIdent())}
               else {
                rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).DataType = rtl.rc(VarType,0,191);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).DataType = rtl.rc(VarType,0,191);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).Name = rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).Name;
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).AllocElementType = rtl.rc(AllocElementType,0,191);
                rtl.rcArrR(pas.Common.IdentifierAt(pas.Common.NumIdent()).Param,pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams - 1).PassMethod = rtl.rc(ListPassMethod,0,3);
              };
            };
            i = rtl.rc(i + 1,-2147483648,2147483647);
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.SEMICOLONTOK));
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
          i = rtl.rc(i + 1,-2147483648,2147483647);
        } else i = rtl.rc(i + 2,-2147483648,2147483647);
        if (IsNestedFunction) {
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.ARRAYTOK) pas.Messages.Error$1(i + 1,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierExpected,"Type identifier expected","","","","","","","","","",""]),pas.Messages.IMessage)));
          i = rtl.rc($mod.CompileType(i + 1,{get: function () {
              return VarType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              VarType = v;
            }},{get: function () {
              return NumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NumAllocElements = v;
            }},{get: function () {
              return AllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              AllocElementType = v;
            }}),-2147483648,2147483647);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).DataType = rtl.rc(VarType,0,191);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedFunctionNumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedFunctionAllocElementType = rtl.rc(AllocElementType,0,191);
          i = rtl.rc(i + 1,-2147483648,2147483647);
        };
        pas.Common.IdentifierAt(pas.Common.NumIdent()).isStdCall = true;
        pas.Common.IdentifierAt(pas.Common.NumIdent()).isNestedFunction = IsNestedFunction;
        Result = rtl.rc(i,-2147483648,2147483647);
      } finally {
        $ir.free();
      };
      return Result;
    };
  };
},["SysUtils","Debugger","Messages","Utilities"]);
rtl.module("Debugger",["System","SysUtils","Common","CompilerTypes","Datatypes","Parser","Tokens"],function () {
  "use strict";
  var $mod = this;
  rtl.createInterface(this,"IDebugger","{8C0D6954-D253-3C3E-9BC6-938892BAB82D}",["CompileStatement","CompileExpression","DefineIdent"],pas.System.IUnknown);
  rtl.createClass(this,"TDebugger",pas.System.TInterfacedObject,function () {
    this.Create$1 = function () {
      return this;
    };
    this.CompileStatement = function (tokenIndex, isAsm) {
      if (this.isActive()) {
        this.LogDebug(pas.SysUtils.Format("CompileStatement (tokenIndex: %s; isAsm: %s) in %s",pas.System.VarRecs(18,this.TokenToStr(tokenIndex),18,pas.SysUtils.BoolToStr(isAsm,true),18,this.TokenLocationToStr(tokenIndex))));
      };
    };
    this.CompileExpression = function (tokenIndex, ValType, VarType) {
      if (this.isActive()) {
        this.LogDebug(pas.SysUtils.Format("CompileExpression(tokenIndex: %s; out ValType: %s; VarType: %s) in %s",pas.System.VarRecs(18,this.TokenToStr(tokenIndex),18,pas.Tokens.GetTokenSpelling(ValType),18,pas.Tokens.GetTokenSpelling(VarType),18,this.TokenLocationToStr(tokenIndex))));
      };
    };
    this.DefineIdent = function (tokenIndex, Name, Kind, DataType, NumAllocElements, AllocElementType, Data, IdType) {
      if (this.isActive()) {
        this.LogDebug(pas.SysUtils.Format("DefineIdent      (tokenIndex: %s; Name: %s; Kind: %s; DataType: %s; NumAllocElements: %d; AllocElementType: %s; Data: %X; IdType: %s) in %s",pas.System.VarRecs(18,this.TokenToStr(tokenIndex),18,Name,18,pas.Tokens.GetTokenSpelling(Kind),18,pas.Tokens.GetTokenSpelling(DataType),19,NumAllocElements,18,pas.Tokens.GetTokenSpelling(AllocElementType),19,Data,18,pas.Tokens.GetTokenSpelling(IdType),18,this.TokenLocationToStr(tokenIndex))));
      };
    };
    this.isActive = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.TokenToStr = function (tokenIndex) {
      var Result = "";
      var token = null;
      var lineString = "";
      var identifierIndex = 0;
      token = pas.Common.TokenAt(tokenIndex);
      lineString = token.GetSpelling() + " " + token.Name;
      identifierIndex = pas.Parser.GetIdentIndex(token.Name);
      if (identifierIndex > 0) lineString = pas.SysUtils.Format("%s: %s (identifierIndex=%d)",pas.System.VarRecs(18,lineString,18,pas.Tokens.GetTokenKindName(pas.Common.IdentifierAt(identifierIndex).DataType),0,identifierIndex));
      Result = pas.SysUtils.Format("%d=%s",pas.System.VarRecs(0,tokenIndex,18,lineString));
      return Result;
    };
    this.TokenLocationToStr = function (tokenIndex) {
      var Result = "";
      var token = null;
      token = pas.Common.TokenAt(tokenIndex);
      Result = pas.SysUtils.Format("%s (line %d, column %d)",pas.System.VarRecs(18,token.SourceLocation.SourceFile.Path,0,token.SourceLocation.Line,0,token.SourceLocation.Column));
      return Result;
    };
    this.LogDebug = function (message) {
      pas.Common.LogTrace("Debug: " + message);
    };
    rtl.addIntf(this,$mod.IDebugger);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.debugger = null;
});
rtl.module("MathEvaluate",["System","SysUtils","CommonTypes","StringUtilities"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass(this,"EEValuationException",pas.SysUtils.Exception,function () {
    this.$init = function () {
      pas.SysUtils.Exception.$init.call(this);
      this._expression = "";
      this._index = 0;
    };
    this.Create$2 = function (msg) {
      pas.SysUtils.Exception.Create$1.call(this,msg);
      this._expression = $impl.s;
      this._index = rtl.rc($impl.cix,-2147483648,2147483647);
      return this;
    };
  });
  rtl.createInterface(this,"IEvaluationContext","{556D1EFF-EEEF-3396-B875-333A2A418742}",["GetConstantName","GetConstantValue"],pas.System.IUnknown);
  this.Evaluate = function (expression, evaluationContext) {
    var Result = 0.0;
    var i = 0;
    if (expression === "") {
      Result = 0}
     else {
      rtl.setIntfP($impl,"evaluationContext",evaluationContext);
      $impl.s = expression;
      for (var $l = 1, $end = $impl.s.length; $l <= $end; $l++) {
        i = $l;
        $impl.s = rtl.rcSetCharAt($impl.s,i - 1,pas.System.upcase(rtl.rcCharAt($impl.s,i - 1)));
      };
      $impl.cix = 1;
      Result = $impl.SimpleExpression();
    };
    return Result;
  };
  $mod.$implcode = function () {
    $impl.evaluationContext = null;
    $impl.s = "";
    $impl.cix = 0;
    $impl.fop = [" ","PI","RND","SQRT","SQR","ARCTAN2","COS","SIN","TAN","EXP","LN","ABS","INT","POWER","ARCTAN"];
    $impl.top = [" ","*","/","DIV","MOD","AND","SHL","SHR"];
    $impl.seop = [" ","+","-","OR","XOR"];
    $impl.RaiseError = function (msg) {
      throw $mod.EEValuationException.$create("Create$2",[msg]);
    };
    $impl.SkipBlanks = function () {
      while (($impl.cix <= $impl.s.length) && (rtl.rcCharAt($impl.s,$impl.cix - 1) === " ")) $impl.cix += 1;
    };
    $impl.Constant = function () {
      var Result = 0.0;
      var n = "";
      var i = 0;
      var v = 0;
      var k = 0;
      var ln = 0;
      var v1 = 0.0;
      var p = 0;
      var pflg = false;
      var constantValue = 0;
      n = "";
      pflg = false;
      $impl.SkipBlanks();
      p = 0;
      if (($impl.cix <= $impl.s.length) && (rtl.rcCharAt($impl.s,$impl.cix - 1) === "%")) {
        $impl.cix += 1;
        while (($impl.cix <= $impl.s.length) && (rtl.rcCharAt($impl.s,$impl.cix - 1).charCodeAt() in rtl.createSet(48,49))) {
          n = n + rtl.rcCharAt($impl.s,$impl.cix - 1);
          $impl.cix += 1;
        };
        if (n.length === 0) $impl.RaiseError("Invalid constant %");
        i = 1;
        while (rtl.rcCharAt(n,i - 1) === "0") i += 1;
        ln = rtl.rc(n.length,-2147483648,2147483647);
        v = 0;
        for (var $l = ln, $end = i; $l >= $end; $l--) {
          k = $l;
          if (rtl.rcCharAt(n,k - 1) === "1") v = rtl.rc(v + (1 << (ln - k)),-2147483648,2147483647);
        };
        v1 = v;
      } else if (($impl.cix <= $impl.s.length) && (rtl.rcCharAt($impl.s,$impl.cix - 1) === "$")) {
        n = "$";
        $impl.cix += 1;
        while (($impl.cix <= $impl.s.length) && (pas.System.upcase(rtl.rcCharAt($impl.s,$impl.cix - 1)).charCodeAt() in rtl.createSet(null,48,57,null,65,70))) {
          n = n + rtl.rcCharAt($impl.s,$impl.cix - 1);
          $impl.cix += 1;
        };
        pas.System.val$6(n,{get: function () {
            return v;
          }, set: function (w) {
            rtl.rc(w,-2147483648,2147483647);
            v = w;
          }},{get: function () {
            return p;
          }, set: function (v) {
            rtl.rc(v,-2147483648,2147483647);
            p = v;
          }});
        v1 = v;
      } else {
        while (($impl.cix <= $impl.s.length) && ((rtl.rcCharAt($impl.s,$impl.cix - 1).charCodeAt() in rtl.createSet(null,48,57)) || ((rtl.rcCharAt($impl.s,$impl.cix - 1) === ".") && !pflg))) {
          if (rtl.rcCharAt($impl.s,$impl.cix - 1) === ".") pflg = true;
          n = n + rtl.rcCharAt($impl.s,$impl.cix - 1);
          $impl.cix += 1;
        };
        pas.System.val$8(n,{get: function () {
            return v1;
          }, set: function (v) {
            v1 = v;
          }},{get: function () {
            return p;
          }, set: function (v) {
            rtl.rc(v,-2147483648,2147483647);
            p = v;
          }});
      };
      if (p !== 0) {
        n = $impl.evaluationContext.GetConstantName($impl.s,{p: $impl, get: function () {
            return this.p.cix;
          }, set: function (v) {
            rtl.rc(v,-2147483648,2147483647);
            this.p.cix = v;
          }});
        if (n !== "") {
          constantValue = 0;
          if ($impl.evaluationContext.GetConstantValue(n,{get: function () {
              return constantValue;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              constantValue = v;
            }})) {
            v1 = constantValue}
           else $impl.RaiseError('Invalid constant "' + n + '"');
        };
      };
      Result = v1;
      return Result;
    };
    $impl.XNot = function (v) {
      var Result = 0.0;
      if (v === 0) {
        Result = 1}
       else Result = 0;
      return Result;
    };
    $impl.Factor = function () {
      var Result = 0.0;
      var v1 = 0.0;
      var v2 = 0.0;
      var ch = "\x00";
      var op = 0;
      var i = 0;
      function RaiseWrongNumberOfParametersError() {
        $impl.RaiseError('Wrong number of parameters specified for call to "' + rtl.rcArrR($impl.fop,op) + '"');
      };
      $impl.SkipBlanks();
      op = 0;
      v1 = 0;
      v2 = 0;
      for (i = 1; i <= 14; i++) if (op === 0) if (pas.System.Copy($impl.s,$impl.cix,rtl.rcArrR($impl.fop,i).length) === rtl.rcArrR($impl.fop,i)) op = rtl.rc(i,0,255);
      if (op > 0) {
        $impl.cix = rtl.rc($impl.cix + rtl.rcArrR($impl.fop,op).length,-2147483648,2147483647);
        $impl.SkipBlanks();
        if ((op in rtl.createSet(1,2)) && (rtl.rcCharAt($impl.s,$impl.cix - 1) === "(")) RaiseWrongNumberOfParametersError();
        if (op > 2) {
          if (rtl.rcCharAt($impl.s,$impl.cix - 1) !== "(") RaiseWrongNumberOfParametersError();
          v1 = $impl.Factor();
          if ((op in rtl.createSet(5,13)) && (rtl.rcCharAt($impl.s,$impl.cix - 1) !== ",")) RaiseWrongNumberOfParametersError();
          if (rtl.rcCharAt($impl.s,$impl.cix - 1) === ",") {
            if (!(op in rtl.createSet(5,13))) RaiseWrongNumberOfParametersError();
            $impl.cix += 1;
            $impl.SkipBlanks();
            v2 = $impl.Factor();
            if (rtl.rcCharAt($impl.s,$impl.cix - 1) !== ")") RaiseWrongNumberOfParametersError();
            $impl.cix += 1;
          };
        };
        var $tmp = op;
        if ($tmp === 1) {
          v1 = Math.PI}
         else if ($tmp === 2) {
          v1 = Math.random()}
         else if ($tmp === 3) {
          v1 = Math.sqrt(v1)}
         else if ($tmp === 4) {
          v1 = pas.System.Sqr$1(v1)}
         else if ($tmp === 5) {
          v1 = Math.atan2(v1,v2)}
         else if ($tmp === 6) {
          v1 = Math.cos(v1)}
         else if ($tmp === 7) {
          v1 = Math.sin(v1)}
         else if ($tmp === 8) {
          v1 = Math.sin(v1) / Math.cos(v1)}
         else if ($tmp === 9) {
          v1 = Math.exp(v1)}
         else if ($tmp === 10) {
          v1 = Math.log(v1)}
         else if ($tmp === 11) {
          v1 = Math.abs(v1)}
         else if ($tmp === 12) {
          v1 = pas.System.Int(v1)}
         else if ($tmp === 13) {
          v1 = Math.pow(v1,v2)}
         else if ($tmp === 14) {
          v1 = Math.atan(v1)}
         else {
          if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid operator code " + pas.StringUtilities.IntToStr(op) + "."]);
        };
      } else if (($impl.cix <= $impl.s.length) && (rtl.rcCharAt($impl.s,$impl.cix - 1) === "(")) {
        $impl.cix += 1;
        v1 = $impl.SimpleExpression();
        $impl.SkipBlanks();
        if ($impl.cix > $impl.s.length) $impl.RaiseError("Parenthesis Mismatch");
        if (rtl.rcCharAt($impl.s,$impl.cix - 1) !== ",") {
          if (rtl.rcCharAt($impl.s,$impl.cix - 1) === ")") {
            $impl.cix += 1}
           else $impl.RaiseError("Parenthesis Mismatch");
        };
      } else if (($impl.cix <= $impl.s.length) && ((rtl.rcCharAt($impl.s,$impl.cix - 1) === "-") || (rtl.rcCharAt($impl.s,$impl.cix - 1) === "+") || (pas.System.Copy($impl.s,$impl.cix,3) === "NOT"))) {
        ch = rtl.rcc(rtl.rcCharAt($impl.s,$impl.cix - 1),0,65535);
        if (ch === "N") {
          $impl.cix = rtl.rc($impl.cix + 3,-2147483648,2147483647)}
         else $impl.cix += 1;
        var $tmp1 = ch;
        if ($tmp1 === "+") {
          v1 = $impl.Factor()}
         else if ($tmp1 === "-") {
          v1 = -$impl.Factor()}
         else if ($tmp1 === "N") {
          v1 = $impl.XNot($impl.Factor())}
         else {
          if (!false) throw pas.SysUtils.EAssertionFailed.$create("Create$1",["Invalid case"]);
        };
      } else v1 = $impl.Constant();
      Result = v1;
      return Result;
    };
    $impl.Term = function () {
      var Result = 0.0;
      var op = 0;
      var i = 0;
      var v1 = 0.0;
      var v2 = 0.0;
      v1 = $impl.Factor();
      do {
        $impl.SkipBlanks();
        op = 0;
        for (i = 1; i <= 7; i++) if (op === 0) if (pas.System.Copy($impl.s,$impl.cix,rtl.rcArrR($impl.top,i).length) === rtl.rcArrR($impl.top,i)) op = rtl.rc(i,0,255);
        if (op > 0) {
          $impl.cix = rtl.rc($impl.cix + rtl.rcArrR($impl.top,op).length,-2147483648,2147483647);
          v2 = $impl.Factor();
          var $tmp = op;
          if ($tmp === 1) {
            v1 = v1 * v2}
           else if ($tmp === 2) {
            v1 = v1 / v2}
           else if ($tmp === 3) {
            v1 = rtl.trunc(Math.round(v1) / Math.round(v2))}
           else if ($tmp === 4) {
            v1 = Math.round(v1) % Math.round(v2)}
           else if ($tmp === 5) {
            v1 = rtl.and(Math.round(v1),Math.round(v2))}
           else if ($tmp === 6) {
            v1 = rtl.shl(Math.round(v1),Math.round(v2))}
           else if ($tmp === 7) v1 = rtl.shr(Math.round(v1),Math.round(v2));
        };
      } while (!(op === 0));
      Result = v1;
      return Result;
    };
    $impl.SimpleExpression = function () {
      var Result = 0.0;
      var op = 0;
      var i = 0;
      var v1 = 0.0;
      var v2 = 0.0;
      $impl.SkipBlanks();
      v1 = $impl.Term();
      do {
        $impl.SkipBlanks();
        op = 0;
        for (i = 1; i <= 4; i++) if (op === 0) if (pas.System.Copy($impl.s,$impl.cix,rtl.rcArrR($impl.seop,i).length) === rtl.rcArrR($impl.seop,i)) op = rtl.rc(i,0,255);
        if (op > 0) {
          $impl.cix = rtl.rc($impl.cix + rtl.rcArrR($impl.seop,op).length,-2147483648,2147483647);
          v2 = $impl.Term();
          var $tmp = op;
          if ($tmp === 1) {
            v1 = v1 + v2}
           else if ($tmp === 2) {
            v1 = v1 - v2}
           else if ($tmp === 3) {
            v1 = rtl.or(Math.round(v1),Math.round(v2))}
           else if ($tmp === 4) v1 = rtl.xor(Math.round(v1),Math.round(v2));
        };
      } while (!(op === 0));
      Result = v1;
      return Result;
    };
  };
},["Math"]);
rtl.module("Optimize",["System","CompilerTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.ResetOpty = function () {
    pas.Common.optyA = "";
    pas.Common.optyY = "";
    pas.Common.optyBP2 = "";
  };
  this.asm65 = function (a, comment) {
    var len = 0;
    var i = 0;
    var optimize_code = false;
    var str = "";
    optimize_code = true;
    if (!pas.Common.OutputDisabled) if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
      if (optimize_code && pas.Common.optimize.use) {
        i = rtl.rc(rtl.length(pas.Common.OptimizeBuf) - 1,-2147483648,2147483647);
        rtl.rcArrW(pas.Common.OptimizeBuf,i,a);
        pas.Common.OptimizeBuf = rtl.arraySetLength(pas.Common.OptimizeBuf,"",i + 2);
      } else {
        if ((rtl.length(pas.Common.OptimizeBuf) - 1) > 0) {
          $impl.OptimizeASM()}
         else {
          str = a;
          if (comment !== "") {
            len = 0;
            for (var $l = 1, $end = a.length; $l <= $end; $l++) {
              i = $l;
              if (rtl.rcCharAt(a,i - 1) === "\t") {
                len += 8 - (len % 8)}
               else if (!(rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) len += 1;
            };
            while (len < 56) {
              str = str + "\t";
              len += 8;
            };
            str = str + comment;
          };
          $mod.WriteOut(str);
        };
      };
    };
  };
  this.OptimizeProgram = function (MainProcedureIndex) {
    rtl.rc(MainProcedureIndex,-2147483648,2147483647);
    var ProcAsBlock = rtl.arraySetLength(null,false,16384);
    function MarkNotDead(IdentIndex) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var ChildIndex = 0;
      var ChildIdentIndex = 0;
      var ProcAsBlockIndex = 0;
      pas.Common.IdentifierAt(IdentIndex).IsNotDead = true;
      ProcAsBlockIndex = rtl.rc(pas.Common.IdentifierAt(IdentIndex).ProcAsBlock,-2147483648,2147483647);
      if ((ProcAsBlockIndex > 0) && (rtl.rcArrR(ProcAsBlock,ProcAsBlockIndex - 1) === false) && (rtl.rcArrR(pas.Common.CallGraph,ProcAsBlockIndex - 1).NumChildren > 0)) {
        rtl.rcArrW(ProcAsBlock,ProcAsBlockIndex - 1,true);
        for (var $l = 1, $end = rtl.rcArrR(pas.Common.CallGraph,ProcAsBlockIndex - 1).NumChildren; $l <= $end; $l++) {
          ChildIndex = $l;
          for (var $l1 = 1, $end1 = pas.Common.NumIdent(); $l1 <= $end1; $l1++) {
            ChildIdentIndex = $l1;
            if ((pas.Common.IdentifierAt(ChildIdentIndex).ProcAsBlock > 0) && (pas.Common.IdentifierAt(ChildIdentIndex).ProcAsBlock === rtl.rcArrR(rtl.rcArrR(pas.Common.CallGraph,ProcAsBlockIndex - 1).ChildBlock,ChildIndex - 1))) MarkNotDead(ChildIdentIndex);
          };
        };
      };
    };
    ProcAsBlock = rtl.arraySetLength(null,false,16384);
    MarkNotDead(MainProcedureIndex);
  };
  this.WriteOut = function (a) {
    var i = 0;
    if ((pas.System.Pos("\tjsr ",a) === 1) || (a === "#asm")) $mod.ResetOpty();
    if (pas.Common.iOut < 511) {
      if ((pas.Common.iOut >= 0) && (rtl.rcArrR($impl.TemporaryBuf,pas.Common.iOut) !== "")) {
        if (rtl.rcArrR($impl.TemporaryBuf,pas.Common.iOut) === "; --- ForToDoCondition") if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
        if (pas.System.Pos("\t#for",rtl.rcArrR($impl.TemporaryBuf,pas.Common.iOut)) > 0) if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
      };
      pas.Common.iOut += 1;
      rtl.rcArrW($impl.TemporaryBuf,pas.Common.iOut,a);
    } else {
      $impl.OptimizeTemporaryBuf();
      if (rtl.rcArrR($impl.TemporaryBuf,pas.Common.iOut) !== "") {
        if (rtl.rcArrR($impl.TemporaryBuf,pas.Common.iOut) === "; --- ForToDoCondition") if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
        if (pas.System.Pos("\t#for",rtl.rcArrR($impl.TemporaryBuf,pas.Common.iOut)) > 0) if ((a === "") || (pas.System.Pos("; optimize ",a) > 0)) return;
      };
      if ($impl.TemporaryBuf[0] !== "~") {
        if (($impl.TemporaryBuf[0] !== "") || (pas.Common.outTmp !== $impl.TemporaryBuf[0])) pas.Common.OutFile.WriteLn$1($impl.TemporaryBuf[0]);
        pas.Common.outTmp = $impl.TemporaryBuf[0];
      };
      for (var $l = 1, $end = pas.Common.iOut; $l <= $end; $l++) {
        i = $l;
        rtl.rcArrW($impl.TemporaryBuf,i - 1,rtl.rcArrR($impl.TemporaryBuf,i));
      };
      rtl.rcArrW($impl.TemporaryBuf,pas.Common.iOut,a);
    };
  };
  this.FlushTempBuf = function () {
    var i = 0;
    for (i = 0; i <= 511; i++) $mod.WriteOut("");
  };
  $mod.$implcode = function () {
    $impl.TemporaryBuf = rtl.arraySetLength(null,"",512);
    var ofs = 80;
    $impl.OptimizeTemporaryBuf = function () {
      var p = 0;
      var k = 0;
      var q = 0;
      var tmp = "";
      var yes = false;
      function MWY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmwy ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function MVA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function MVA_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva #",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function MVA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva :STACK",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function IFTMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda IFTMP_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjmp l_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LAB_L(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("l_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LAB_B(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("b_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LAB_S(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("s_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function INC_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tinc ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function DEC_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tdec ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JSR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjsr ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LDY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tldy ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LDY_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tldy #",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function CMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tcmp ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LDA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LDA_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda #",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function LDA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda :STACK",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function STA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsta ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function STA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsta :STACK",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function STY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsty ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function STY_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsty :STACK",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function ADD(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadd ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function SUB(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsub ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function ADD_SUB(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadd ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tsub ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1);
        return Result;
      };
      function ADC_SBC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadc ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tsbc ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1);
        return Result;
      };
      function SBC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsbc ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function ASL_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tasl @";
        return Result;
      };
      function CMP_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tcmp #$00";
        return Result;
      };
      function LDY_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tldy #1";
        return Result;
      };
      function LAB_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "@";
        return Result;
      };
      function LDA_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tlda #$00";
        return Result;
      };
      function LDY_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tldy #$00";
        return Result;
      };
      function INX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tinx";
        return Result;
      };
      function DEX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tdex";
        return Result;
      };
      function INY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tiny";
        return Result;
      };
      function DEY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tdey";
        return Result;
      };
      function TYA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\ttya";
        return Result;
      };
      function TAY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\ttay";
        return Result;
      };
      function STA_BP2(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsta :bp2";
        return Result;
      };
      function STA_BP2_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsta :bp2+1";
        return Result;
      };
      function STA_BP_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsta :bp+1";
        return Result;
      };
      function STA_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsta (:bp),y";
        return Result;
      };
      function LDA_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tlda :bp2";
        return Result;
      };
      function SNE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsne";
        return Result;
      };
      function SEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tseq";
        return Result;
      };
      function SCC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tscc";
        return Result;
      };
      function SCS(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tscs";
        return Result;
      };
      function SPL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tspl";
        return Result;
      };
      function SMI(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsmi";
        return Result;
      };
      function SVC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsvc";
        return Result;
      };
      function SVS(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR($impl.TemporaryBuf,i) === "\tsvs";
        return Result;
      };
      function JEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjeq ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JNE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjne ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JCC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjcc ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JCS(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjcs ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JMI(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjmi ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JPL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjpl ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JEQ_L(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjeq l_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JNE_L(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjne l_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JCC_L(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjcc l_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function JCS_L(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjcs l_",rtl.rcArrR($impl.TemporaryBuf,i)) === 1;
        return Result;
      };
      function AND_ORA_EOR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tand ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tora ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\teor ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1);
        return Result;
      };
      function IY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos(",y",rtl.rcArrR($impl.TemporaryBuf,i)) > 0;
        return Result;
      };
      function STA_ADR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (IY(i) && (pas.System.Pos("\tsta adr.",rtl.rcArrR($impl.TemporaryBuf,i)) === 1)) || ((pas.System.Pos("\tsta ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) && (pas.System.Pos(".adr.",rtl.rcArrR($impl.TemporaryBuf,i)) > 0));
        return Result;
      };
      function OPTI(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("; optimize ",rtl.rcArrR($impl.TemporaryBuf,i)) > 0;
        return Result;
      };
      function fail(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if ((pas.System.Pos("#asm:",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || LDY(i) || JSR(i) || INY(i) || DEY(i) || TAY(i) || TYA(i) || MWY(i) || MWY(i) || (pas.System.Pos("\t.if",rtl.rcArrR($impl.TemporaryBuf,i)) > 0) || (pas.System.Pos("\t.LOCAL ",rtl.rcArrR($impl.TemporaryBuf,i)) > 0) || (pas.System.Pos("\t@print",rtl.rcArrR($impl.TemporaryBuf,i)) > 0)) {
          Result = true}
         else Result = false;
        return Result;
      };
      function SKIP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = SEQ(i) || SNE(i) || SPL(i) || SMI(i) || SCC(i) || SCS(i) || SVC(i) || SVS(i) || JNE(i) || JEQ(i) || JCC(i) || JCS(i) || JMI(i) || JPL(i) || (pas.System.Pos("\tbne ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tbeq ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tbcc ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tbcs ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tbmi ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1) || (pas.System.Pos("\tbpl ",rtl.rcArrR($impl.TemporaryBuf,i)) === 1);
        return Result;
      };
      function IFDEF_MUL8(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR($impl.TemporaryBuf,i + 1) === "\tfmulu_8") && (rtl.rcArrR($impl.TemporaryBuf,i) === "\t.ifdef fmulinit");
        return Result;
      };
      function IFDEF_MUL16(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR($impl.TemporaryBuf,i + 1) === "\tfmulu_16") && (rtl.rcArrR($impl.TemporaryBuf,i) === "\t.ifdef fmulinit");
        return Result;
      };
      function fortmp(a) {
        var Result = "";
        Result = a;
        if (Result.length > 12) {
          Result = rtl.rcSetCharAt(Result,12,"_")}
         else Result = Result + "_0";
        return Result;
      };
      function GetBYTE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = 0;
        Result = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,i),6,4)),-2147483648,2147483647);
        return Result;
      };
      function GetWORD(i, j) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(j,-2147483648,2147483647);
        var Result = 0;
        Result = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,i),6,4)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,j),6,4)) * 256),-2147483648,2147483647);
        return Result;
      };
      function GetSTRING(j) {
        rtl.rc(j,-2147483648,2147483647);
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        i = 6;
        a = rtl.rcArrR($impl.TemporaryBuf,j);
        if (a !== "") while ((i <= a.length) && !(rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(32,9))) {
          Result = Result + rtl.rcCharAt(a,i - 1);
          i += 1;
        };
        return Result;
      };
      function opt_TEMP_MOVE() {
        if ((pas.System.Pos("\tjsr SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) || ((pas.System.Pos("\t.LOCAL +MAIN.SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) && ($impl.TemporaryBuf[12] === "\tm@INLINE") && ($impl.TemporaryBuf[13] === "\t.ENDL"))) {
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[2]) === 1) && (pas.System.Pos(".SOURCE+1",$impl.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".SOURCE",$impl.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[6]) === 1) && (pas.System.Pos(".DEST+1",$impl.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[4]) === 1) && (pas.System.Pos(".DEST",$impl.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[10]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[10]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[8]) > 0) && LDA_IM(0) && LDA_IM(3) && LDA_IM(5) && LDA_IM(7) && LDA_IM(9)) {
            p = rtl.rc(GetWORD(0,0),-2147483648,2147483647);
            q = rtl.rc(GetWORD(3,5),-2147483648,2147483647);
            k = rtl.rc(GetWORD(7,9),-2147483648,2147483647);
            if ((k > 0) && (k <= 256) && !(((p >= q) && (p < (q + k))) || (((p + k) > q) && ((p + k) <= (q + k))))) {
              if (k <= 16) {
                $impl.TemporaryBuf[10] = "\t:" + pas.StringUtilities.IntToStr(k) + " mva $" + pas.SysUtils.IntToHex(p,4) + "+# $" + pas.SysUtils.IntToHex(q,4) + "+#";
                $impl.TemporaryBuf[11] = "";
              } else if (k <= 128) {
                $impl.TemporaryBuf[10] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
                $impl.TemporaryBuf[11] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              } else {
                $impl.TemporaryBuf[10] = "\tldy #256-" + pas.StringUtilities.IntToStr(k);
                $impl.TemporaryBuf[11] = "\tmva:rne $" + pas.SysUtils.IntToHex(p,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y+";
              };
              $impl.TemporaryBuf[0] = "~";
              $impl.TemporaryBuf[1] = "~";
              $impl.TemporaryBuf[2] = "~";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              if ($impl.TemporaryBuf[12] === "\tm@INLINE") {
                $impl.TemporaryBuf[12] = "~";
                $impl.TemporaryBuf[13] = "~";
              };
            };
          };
        };
        if ((pas.System.Pos("\tjsr SYSTEM.MOVE.",$impl.TemporaryBuf[12]) === 1) || ((pas.System.Pos("\t.LOCAL +MAIN.SYSTEM.MOVE.",$impl.TemporaryBuf[12]) === 1) && ($impl.TemporaryBuf[13] === "\tm@INLINE") && ($impl.TemporaryBuf[14] === "\t.ENDL"))) {
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".SOURCE",$impl.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[9]) > 0) && LDA_IM(0) && LDA_IM(2) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            p = rtl.rc(GetWORD(0,2),-2147483648,2147483647);
            q = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            k = rtl.rc(GetWORD(8,10),-2147483648,2147483647);
            if ((k > 0) && (k <= 256) && !(((p >= q) && (p < (q + k))) || (((p + k) > q) && ((p + k) <= (q + k))))) {
              if (k <= 16) {
                $impl.TemporaryBuf[11] = "\t:" + pas.StringUtilities.IntToStr(k) + " mva $" + pas.SysUtils.IntToHex(p,4) + "+# $" + pas.SysUtils.IntToHex(q,4) + "+#";
                $impl.TemporaryBuf[12] = "";
              } else if (k <= 128) {
                $impl.TemporaryBuf[11] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
                $impl.TemporaryBuf[12] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              } else {
                $impl.TemporaryBuf[11] = "\tldy #256-" + pas.StringUtilities.IntToStr(k);
                $impl.TemporaryBuf[12] = "\tmva:rne $" + pas.SysUtils.IntToHex(p,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y+";
              };
              $impl.TemporaryBuf[0] = "~";
              $impl.TemporaryBuf[1] = "~";
              $impl.TemporaryBuf[2] = "~";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              if ($impl.TemporaryBuf[13] === "\tm@INLINE") {
                $impl.TemporaryBuf[13] = "~";
                $impl.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".SOURCE",$impl.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tlda ",$impl.TemporaryBuf[0]) === 1) && (LDA_IM(0) === false) && (pas.System.Pos("\tlda ",$impl.TemporaryBuf[2]) === 1) && (LDA_IM(2) === false) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            q = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            k = rtl.rc(GetWORD(8,10),-2147483648,2147483647);
            if (k <= 128) {
              $impl.TemporaryBuf[1] = "\tsta :bp2";
              $impl.TemporaryBuf[3] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[5] = "\tmva:rpl (:bp2),y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
              if ($impl.TemporaryBuf[13] === "\tm@INLINE") {
                $impl.TemporaryBuf[13] = "~";
                $impl.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[0]) === 1) && (pas.System.Pos(".SOURCE",$impl.TemporaryBuf[0]) > 0) && ($impl.TemporaryBuf[1] === "\tiny") && ($impl.TemporaryBuf[2] === "\tlda (:bp2),y") && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            q = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            k = rtl.rc(GetWORD(8,10),-2147483648,2147483647);
            if (k <= 128) {
              $impl.TemporaryBuf[0] = "\tsta :TMP";
              $impl.TemporaryBuf[3] = "\tsta :TMP+1";
              $impl.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[5] = "\tmva:rpl (:TMP),y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
              if ($impl.TemporaryBuf[13] === "\tm@INLINE") {
                $impl.TemporaryBuf[13] = "~";
                $impl.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".SOURCE+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".SOURCE",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".DEST+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[0]) === 1) && (pas.System.Pos(".DEST",$impl.TemporaryBuf[0]) > 0) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            p = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            k = rtl.rc(GetWORD(8,10),-2147483648,2147483647);
            if (k <= 128) {
              $impl.TemporaryBuf[0] = "\tsta :bp2";
              $impl.TemporaryBuf[3] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[5] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y (:bp2),y-";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
              if ($impl.TemporaryBuf[13] === "\tm@INLINE") {
                $impl.TemporaryBuf[13] = "~";
                $impl.TemporaryBuf[14] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".DEST+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".DEST",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[11]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[11]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".SOURCE+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.MOVE.",$impl.TemporaryBuf[0]) === 1) && (pas.System.Pos(".SOURCE",$impl.TemporaryBuf[0]) > 0) && LDA_IM(4) && LDA_IM(6) && LDA_IM(8) && LDA_IM(10)) {
            q = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            k = rtl.rc(GetWORD(8,10),-2147483648,2147483647);
            if (k <= 128) {
              $impl.TemporaryBuf[0] = "\tsta :bp2";
              $impl.TemporaryBuf[3] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[5] = "\tmva:rpl (:bp2),y $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
              if ($impl.TemporaryBuf[13] === "\tm@INLINE") {
                $impl.TemporaryBuf[13] = "~";
                $impl.TemporaryBuf[14] = "~";
              };
            };
          };
        };
      };
      function opt_TEMP_FILL() {
        if ((pas.System.Pos("\tjsr SYSTEM.FILL",$impl.TemporaryBuf[10]) === 1) || ((pas.System.Pos("\t.LOCAL +MAIN.SYSTEM.FILL",$impl.TemporaryBuf[10]) === 1) && ($impl.TemporaryBuf[11] === "\tm@INLINE") && ($impl.TemporaryBuf[12] === "\t.ENDL"))) {
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && LDA(8) && LDA_IM(0) && LDA_IM(2) && LDA_IM(4) && LDA_IM(6)) {
            q = rtl.rc(GetWORD(0,2),-2147483648,2147483647);
            k = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            yes = false;
            if ((k === 0x200) || (k === 0x300) || (k === 0x400) || (k === 0x500) || (k === 0x600) || (k === 0x700) || (k === 0x800)) {
              $impl.TemporaryBuf[0] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[1] = "\tm@fill $" + pas.SysUtils.IntToHex(q,4) + " " + pas.StringUtilities.IntToStr(rtl.trunc(k / 0x80));
              $impl.TemporaryBuf[2] = "~";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 8) {
              $impl.TemporaryBuf[0] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[1] = "\t:" + pas.StringUtilities.IntToStr(k) + " sta $" + pas.SysUtils.IntToHex(q,4) + "+#";
              $impl.TemporaryBuf[2] = "~";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $impl.TemporaryBuf[0] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[1] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[2] = "\tsta:rpl $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 256) {
              $impl.TemporaryBuf[0] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[1] = "\tldy #256-" + pas.StringUtilities.IntToStr(k);
              $impl.TemporaryBuf[2] = "\tsta:rne $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y+";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($impl.TemporaryBuf[11] === "\tm@INLINE")) {
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[2]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && LDA_IM(1) && LDA_IM(3) && LDA_IM(5) && ($impl.TemporaryBuf[7] === "\tlda #$00")) {
            q = rtl.rc(GetWORD(1,3),-2147483648,2147483647);
            k = rtl.rc(GetWORD(5,7),-2147483648,2147483647);
            yes = false;
            if ((k === 0x200) || (k === 0x300) || (k === 0x400) || (k === 0x500) || (k === 0x600) || (k === 0x700) || (k === 0x800)) {
              $impl.TemporaryBuf[0] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[1] = "\tm@fill $" + pas.SysUtils.IntToHex(q,4) + " " + pas.StringUtilities.IntToStr(rtl.trunc(k / 0x80));
              $impl.TemporaryBuf[2] = "~";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 8) {
              $impl.TemporaryBuf[1] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[2] = "\t:" + pas.StringUtilities.IntToStr(k) + " sta $" + pas.SysUtils.IntToHex(q,4) + "+#";
              $impl.TemporaryBuf[3] = "~";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $impl.TemporaryBuf[1] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[2] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[3] = "\tsta:rpl $" + pas.SysUtils.IntToHex(q,4) + ",y-";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 256) {
              $impl.TemporaryBuf[1] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[2] = "\tldy #256-" + pas.StringUtilities.IntToStr(k);
              $impl.TemporaryBuf[3] = "\tsta:rne $" + pas.SysUtils.IntToHex(q,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y+";
              $impl.TemporaryBuf[4] = "~";
              $impl.TemporaryBuf[5] = "~";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($impl.TemporaryBuf[11] === "\tm@INLINE")) {
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[2]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && ($impl.TemporaryBuf[7] === "\tlda #$00") && LDA_IM(5) && LDA(1) && (LDA_IM(1) === false) && LDA(3)) {
            k = rtl.rc(GetWORD(5,7),-2147483648,2147483647);
            yes = false;
            if (k === 256) {
              $impl.TemporaryBuf[2] = "\tsta :bp2";
              $impl.TemporaryBuf[4] = "\tsta :bp2+1";
              $impl.TemporaryBuf[5] = "\tldy #$00";
              $impl.TemporaryBuf[6] = "\ttya";
              $impl.TemporaryBuf[7] = "\tsta:rne (:bp2),y+";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $impl.TemporaryBuf[2] = "\tsta :bp2";
              $impl.TemporaryBuf[4] = "\tsta :bp2+1";
              $impl.TemporaryBuf[5] = "\tlda #$00";
              $impl.TemporaryBuf[6] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[7] = "\tsta:rpl (:bp2),y-";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($impl.TemporaryBuf[11] === "\tm@INLINE")) {
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[1]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && LDA_IM(6) && LDA_IM(4) && LDA(8) && LDA(0) && (LDA_IM(0) === false) && LDA(2)) {
            k = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            yes = false;
            if (k === 256) {
              $impl.TemporaryBuf[1] = "\tsta :bp2";
              $impl.TemporaryBuf[3] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[5] = "\tldy #$00";
              $impl.TemporaryBuf[6] = "\tsta:rne (:bp2),y+";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $impl.TemporaryBuf[1] = "\tsta :bp2";
              $impl.TemporaryBuf[3] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[5] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[6] = "\tsta:rpl (:bp2),y-";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($impl.TemporaryBuf[11] === "\tm@INLINE")) {
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[1]) > 0) && LDA_IM(8) && LDA_IM(6) && LDA(0) && LDA(2) && (LDA_IM(2) === false) && LDA(4)) {
            k = rtl.rc(GetWORD(6,8),-2147483648,2147483647);
            yes = false;
            if (k === 256) {
              $impl.TemporaryBuf[3] = "\tsta :bp2";
              $impl.TemporaryBuf[5] = "\tsta :bp2+1";
              $impl.TemporaryBuf[6] = $impl.TemporaryBuf[0];
              $impl.TemporaryBuf[7] = "\tldy #$00";
              $impl.TemporaryBuf[8] = "\tsta:rne (:bp2),y+";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              $impl.TemporaryBuf[0] = "~";
              $impl.TemporaryBuf[1] = "~";
              yes = true;
            } else if (k <= 128) {
              $impl.TemporaryBuf[3] = "\tsta :bp2";
              $impl.TemporaryBuf[5] = "\tsta :bp2+1";
              $impl.TemporaryBuf[6] = $impl.TemporaryBuf[0];
              $impl.TemporaryBuf[7] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[8] = "\tsta:rpl (:bp2),y-";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              $impl.TemporaryBuf[0] = "~";
              $impl.TemporaryBuf[1] = "~";
              yes = true;
            };
            if (yes && ($impl.TemporaryBuf[11] === "\tm@INLINE")) {
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[2]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[2]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && LDA_IM(7) && LDA_IM(5) && LDA(3) && (LDA_IM(3) === false)) {
            k = rtl.rc(GetWORD(5,7),-2147483648,2147483647);
            yes = false;
            if (k === 256) {
              $impl.TemporaryBuf[2] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = "\tsta :bp2";
              $impl.TemporaryBuf[5] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[6] = "\tldy #$00";
              $impl.TemporaryBuf[7] = "\tsta:rne (:bp2),y+";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            } else if (k <= 128) {
              $impl.TemporaryBuf[2] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = "\tsta :bp2";
              $impl.TemporaryBuf[5] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[6] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[7] = "\tsta:rpl (:bp2),y-";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              yes = true;
            };
            if (yes && ($impl.TemporaryBuf[11] === "\tm@INLINE")) {
              $impl.TemporaryBuf[11] = "~";
              $impl.TemporaryBuf[12] = "~";
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[8]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[8]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[6]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[6]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[4]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[4]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[1]) > 0) && LDA(2) && (ADC_SBC(3) || ADD_SUB(3)) && ($impl.TemporaryBuf[7] === "\tlda #$00") && LDA_IM(5)) {
            k = rtl.rc(GetWORD(5,7),-2147483648,2147483647);
            if (k <= 128) {
              $impl.TemporaryBuf[1] = "\tsta :bp2";
              $impl.TemporaryBuf[4] = "\tsta :bp2+1";
              $impl.TemporaryBuf[5] = "\tlda #$00";
              $impl.TemporaryBuf[6] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[7] = "\tsta:rpl (:bp2),y-";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              if ($impl.TemporaryBuf[11] === "\tm@INLINE") {
                $impl.TemporaryBuf[11] = "~";
                $impl.TemporaryBuf[12] = "~";
              };
            };
          };
          if ((pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[7]) === 1) && (pas.System.Pos(".COUNT+1",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[5]) === 1) && (pas.System.Pos(".COUNT",$impl.TemporaryBuf[5]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[9]) === 1) && (pas.System.Pos(".VALUE",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[3]) === 1) && (pas.System.Pos(".A+1",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("\tsta SYSTEM.FILL",$impl.TemporaryBuf[0]) === 1) && (pas.System.Pos(".A",$impl.TemporaryBuf[0]) > 0) && LDA(8) && LDA(1) && (ADC_SBC(2) || ADD_SUB(2)) && LDA_IM(4) && LDA_IM(6)) {
            k = rtl.rc(GetWORD(4,6),-2147483648,2147483647);
            if (k <= 128) {
              $impl.TemporaryBuf[0] = "\tsta :bp2";
              $impl.TemporaryBuf[3] = "\tsta :bp2+1";
              $impl.TemporaryBuf[4] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[5] = "\tldy #$" + pas.SysUtils.IntToHex(k - 1,2);
              $impl.TemporaryBuf[6] = "\tsta:rpl (:bp2),y-";
              $impl.TemporaryBuf[7] = "~";
              $impl.TemporaryBuf[8] = "~";
              $impl.TemporaryBuf[9] = "~";
              $impl.TemporaryBuf[10] = "~";
              if ($impl.TemporaryBuf[11] === "\tm@INLINE") {
                $impl.TemporaryBuf[11] = "~";
                $impl.TemporaryBuf[12] = "~";
              };
            };
          };
        };
      };
      function opt_TEMP_TAIL_IF() {
        var i = 0;
        var p = 0;
        var k = 0;
        var yes = false;
        var lab = "";
        var tmp = "";
        if (((STA(80 + 20) || JSR(80 + 20)) && LAB_L(80 + 21) && IFTMP(80 + 22) && JNE_L(80 + 23)) || ((STA(80 + 19) || JSR(80 + 19)) && LAB_L(80 + 20) && IFTMP(80 + 21) && (rtl.rcArrR($impl.TemporaryBuf,80 + 22) === "\tbeq *+5") && JMP(80 + 23))) {
          lab = pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,80 + 23),6,256);
          yes = false;
          for (p = 104; p <= 511; p++) if (rtl.rcArrR($impl.TemporaryBuf,p) === lab) {
            yes = true;
            break;
          };
          if (yes) {
            while (LAB_L(p - 1)) {
              tmp = rtl.rcArrR($impl.TemporaryBuf,p - 1);
              rtl.rcArrW($impl.TemporaryBuf,p - 1,rtl.rcArrR($impl.TemporaryBuf,p));
              rtl.rcArrW($impl.TemporaryBuf,p,tmp);
              p -= 1;
            };
            if (rtl.rcArrR($impl.TemporaryBuf,80 + 22) === "\tbeq *+5") {
              i = rtl.rc(80 + 19,-2147483648,2147483647)}
             else i = rtl.rc(80 + 20,-2147483648,2147483647);
            if (STA(i) || JSR(i)) {
              for (k = 0; k <= 99; k++) if ((rtl.rcArrR($impl.TemporaryBuf,i - k) === rtl.rcArrR($impl.TemporaryBuf,p - k - 1)) || (LAB_L(i - k) && LAB_L(p - k - 1)) || (OPTI(i - k) && OPTI(p - k - 1))) {
                if (LAB_A(i - k)) if ((rtl.rcArrR($impl.TemporaryBuf,i - k - 1) !== rtl.rcArrR($impl.TemporaryBuf,p - k - 2)) || (rtl.rcArrR($impl.TemporaryBuf,i - k - 2) !== rtl.rcArrR($impl.TemporaryBuf,p - k - 3))) return;
                if (rtl.rcArrR($impl.TemporaryBuf,i - k) === rtl.rcArrR($impl.TemporaryBuf,p - k - 1)) rtl.rcArrW($impl.TemporaryBuf,i - k,"~");
                rtl.rcArrW($impl.TemporaryBuf,p - k,rtl.rcArrR($impl.TemporaryBuf,p - k - 1));
                rtl.rcArrW($impl.TemporaryBuf,p - k - 1,lab);
              } else return;
            };
          };
        };
      };
      function opt_TEMP_TAIL_CASE() {
        var i = 0;
        var p = 0;
        var k = 0;
        var yes = false;
        var lab = "";
        var tmp = "";
        i = 100;
        p = 0;
        if (pas.System.Pos("\tjmp a_",rtl.rcArrR($impl.TemporaryBuf,i)) > 0) {
          if (LAB_S(i + 1)) rtl.rcArrW($impl.TemporaryBuf,i + 1,"~");
          tmp = rtl.rcArrR($impl.TemporaryBuf,i);
          lab = pas.System.Copy(tmp,6,256);
          yes = false;
          for (var $l = i + 1; $l <= 511; $l++) {
            p = $l;
            if ((rtl.rcArrR($impl.TemporaryBuf,p) === tmp) && LAB_S(p + 1)) {
              yes = true;
              break;
            };
          };
          if (yes) if ((rtl.rcArrR($impl.TemporaryBuf,i - 2) === rtl.rcArrR($impl.TemporaryBuf,p - 2)) && (rtl.rcArrR($impl.TemporaryBuf,i - 1) === rtl.rcArrR($impl.TemporaryBuf,p - 1)) && (STA(p - 1) || JSR(p - 1))) {
            lab = rtl.rcArrR($impl.TemporaryBuf,p + 1);
            rtl.rcArrW($impl.TemporaryBuf,i,"\tjmp " + lab);
            rtl.rcArrW($impl.TemporaryBuf,p,lab);
            rtl.rcArrW($impl.TemporaryBuf,p + 1,tmp);
            for (var $l1 = 1, $end = i - 1; $l1 <= $end; $l1++) {
              k = $l1;
              if ((rtl.rcArrR($impl.TemporaryBuf,i - k) === rtl.rcArrR($impl.TemporaryBuf,p - k)) || (LAB_L(i - k) && LAB_L(p - k)) || (OPTI(i - k) && OPTI(p - k))) {
                if (LAB_A(i - k)) if ((rtl.rcArrR($impl.TemporaryBuf,i - k - 1) !== rtl.rcArrR($impl.TemporaryBuf,p - k - 1)) || (rtl.rcArrR($impl.TemporaryBuf,i - k - 2) !== rtl.rcArrR($impl.TemporaryBuf,p - k - 2))) return;
                if (rtl.rcArrR($impl.TemporaryBuf,i - k) === rtl.rcArrR($impl.TemporaryBuf,p - k)) rtl.rcArrW($impl.TemporaryBuf,i - k,"~");
                tmp = rtl.rcArrR($impl.TemporaryBuf,p - k);
                rtl.rcArrW($impl.TemporaryBuf,p - k,rtl.rcArrR($impl.TemporaryBuf,(p - k) + 1));
                rtl.rcArrW($impl.TemporaryBuf,(p - k) + 1,tmp);
              } else return;
            };
          };
        };
      };
      function opt_TEMP() {
        var p = 0;
        if (LDA(10) && CMP(11) && JCC_L(12) && LDA(13) && SUB(14)) {
          $impl.TemporaryBuf[14] = "\tsbc " + pas.System.Copy($impl.TemporaryBuf[14],6,256);
        };
        if (JCC_L(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && SUB(14)) {
          $impl.TemporaryBuf[14] = "\tsbc " + pas.System.Copy($impl.TemporaryBuf[14],6,256);
        };
        if (JCC_L(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && LDA(14) && SUB(15)) {
          $impl.TemporaryBuf[15] = "\tsbc " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
        };
        if (JCC_L(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && LDY(14) && LDA(15) && SUB(16)) {
          $impl.TemporaryBuf[16] = "\tsbc " + pas.System.Copy($impl.TemporaryBuf[16],6,256);
        };
        if (JCS_L(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && ADD(14)) {
          $impl.TemporaryBuf[14] = "\tadc " + pas.System.Copy($impl.TemporaryBuf[14],6,256);
        };
        if (JCS_L(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && LDA(14) && ADD(15)) {
          $impl.TemporaryBuf[15] = "\tadc " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
        };
        if (JCS_L(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && LDY(14) && LDA(15) && ADD(16)) {
          $impl.TemporaryBuf[16] = "\tadc " + pas.System.Copy($impl.TemporaryBuf[16],6,256);
        };
        if (SCC(10) && INC_(11) && ($impl.TemporaryBuf[12] === "") && OPTI(13) && ($impl.TemporaryBuf[14] === "") && ADD(15)) {
          $impl.TemporaryBuf[10] = "\tbcc @+";
          $impl.TemporaryBuf[12] = "\tclc";
          $impl.TemporaryBuf[13] = "@";
          $impl.TemporaryBuf[15] = "\tadc " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
        };
        if (SCS(10) && DEC_(11) && ($impl.TemporaryBuf[12] === "") && OPTI(13) && ($impl.TemporaryBuf[14] === "") && SUB(15)) {
          $impl.TemporaryBuf[10] = "\tbcs @+";
          $impl.TemporaryBuf[12] = "\tsec";
          $impl.TemporaryBuf[13] = "@";
          $impl.TemporaryBuf[15] = "\tsbc " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
        };
        if (LDY(0) && STA(1) && ($impl.TemporaryBuf[2] === "") && OPTI(3) && ($impl.TemporaryBuf[4] === "") && LDA(5)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[5],6,256)) {
          $impl.TemporaryBuf[5] = "\ttya";
        };
        if (LDY(0) && LDA(1) && STA(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && LDA(6)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
          $impl.TemporaryBuf[6] = "\ttya";
        };
        if (LDY(0) && LDA(1) && STA(2) && LDA(3)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[3],6,256)) {
          $impl.TemporaryBuf[3] = "\ttya";
        };
        if (LDA_IM_0(0) && STA_STACK(1) && INY(2) && LDA_STACK(3) && (pas.System.Pos("ora ",$impl.TemporaryBuf[4]) > 0) && STA(5)) if (pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[3],6,256)) {
          $impl.TemporaryBuf[4] = "\tlda " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[3] = "~";
        };
        if ((pas.System.Pos("lsr ",$impl.TemporaryBuf[0]) > 0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4) && (JNE(5) || JEQ(5))) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          $impl.TemporaryBuf[4] = "~";
        };
        if (LDY(0) && STA(1) && INC_(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && LDA(6) && CMP(7) && SKIP(8)) if ((pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[2],6,256)) && (pas.System.Copy($impl.TemporaryBuf[2],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256))) {
          $impl.TemporaryBuf[2] = "\tiny";
          $impl.TemporaryBuf[6] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[6],6,256);
          $impl.TemporaryBuf[7] = "\tcpy " + pas.System.Copy($impl.TemporaryBuf[7],6,256);
          if ((SKIP(9) === false) && (pas.System.Pos(" l_",$impl.TemporaryBuf[8]) > 0)) {
            tmp = pas.System.Copy($impl.TemporaryBuf[8],6,256);
            p = 9;
            while ((rtl.rcArrR($impl.TemporaryBuf,p) !== tmp) && (p < 511)) p += 1;
            if ((rtl.rcArrR($impl.TemporaryBuf,p) === tmp) && MVA(p - 1) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === ("\tmva " + GetSTRING(p - 1) + " " + pas.System.Copy($impl.TemporaryBuf[6],6,256))) && (rtl.rcArrR($impl.TemporaryBuf,p + 1) === "")) {
              rtl.rcArrW($impl.TemporaryBuf,p + 1,$impl.TemporaryBuf[6]);
              $impl.TemporaryBuf[6] = "~";
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tldy " + GetSTRING(p - 1));
            };
          };
        };
        if (($impl.TemporaryBuf[0] === "\tand #$01") && JEQ(1) && LDY(2) && LDA(3) && ($impl.TemporaryBuf[4] === "\tadd #$01")) {
          $impl.TemporaryBuf[3] = "\tadd " + pas.System.Copy($impl.TemporaryBuf[3],6,256);
          $impl.TemporaryBuf[4] = "~";
        };
        if (INC_(0) && SNE(1) && INC_(2) && (JMP(3) || JNE(3)) && LAB_L(4)) if (pas.System.Pos($impl.TemporaryBuf[0],$impl.TemporaryBuf[2]) > 0) {
          $impl.TemporaryBuf[1] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[3],6,256);
        };
        if (LDY(0) && LDA(1) && STA(2)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[1],6,256)) {
          $impl.TemporaryBuf[1] = "\ttya";
        };
        if (($impl.TemporaryBuf[0] !== "\tsta #$00") && STA(0) && LDA(1)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[1],6,256)) {
          if (STA_STACK(0)) {
            $impl.TemporaryBuf[0] = "~";
            $impl.TemporaryBuf[1] = "~";
          } else $impl.TemporaryBuf[1] = "~";
        };
        if (INY(2) && LDA_IM_0(3) && (pas.System.Pos("asl :STACK",$impl.TemporaryBuf[4]) > 0)) {
          $impl.TemporaryBuf[2] = "~";
          if (INY(1)) {
            $impl.TemporaryBuf[1] = "~";
            if (INY(0)) $impl.TemporaryBuf[0] = "~";
          };
        };
        if (STA_STACK(0) && (INY(1) || DEY(1)) && LDA_STACK(2) && (SKIP(3) === false)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[2],6,256)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[2] = "~";
        };
        if (TAY(0) && INY(1) && INY(2)) {
          if (INY(3)) {
            $impl.TemporaryBuf[0] = "\tadd #$03";
            $impl.TemporaryBuf[3] = "~";
          } else $impl.TemporaryBuf[0] = "\tadd #$02";
          $impl.TemporaryBuf[1] = "\ttay";
          $impl.TemporaryBuf[2] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tbcc *+7") && ($impl.TemporaryBuf[1] === "\tbeq *+5") && JMP(2)) {
          $impl.TemporaryBuf[0] = "\tscc";
          $impl.TemporaryBuf[1] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && ($impl.TemporaryBuf[1] === "\tbeq *+5") && JMP(2)) {
          $impl.TemporaryBuf[1] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && ($impl.TemporaryBuf[1] === "\tbmi *+5") && JMP(2)) {
          $impl.TemporaryBuf[1] = "\tjpl " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = "~";
        };
        if (SEQ(0) && JMP(1)) {
          $impl.TemporaryBuf[0] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[1],6,256);
          $impl.TemporaryBuf[1] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\t.ENDL") && ($impl.TemporaryBuf[1] === "\tbmi *+7") && ($impl.TemporaryBuf[2] === "\tbeq *+5") && JMP(3)) {
          $impl.TemporaryBuf[1] = "\tsmi";
          $impl.TemporaryBuf[2] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[3],6,256);
          $impl.TemporaryBuf[3] = "~";
        };
        if (LAB_L(0) && LDA(1) && CMP(2) && ($impl.TemporaryBuf[3] === "\tbeq @+") && JMP(4) && LAB_A(5)) {
          $impl.TemporaryBuf[3] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          $impl.TemporaryBuf[4] = "~";
          $impl.TemporaryBuf[5] = "~";
        };
        if (LAB_L(0) && LDA(1) && CMP(2) && JNE(3) && LAB_A(4)) {
          $impl.TemporaryBuf[4] = "~";
        };
        if (LAB_L(0) && CMP(1) && ($impl.TemporaryBuf[2] === "\tbeq @+") && JMP(3) && LAB_A(4)) {
          $impl.TemporaryBuf[2] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[3],6,256);
          $impl.TemporaryBuf[3] = "~";
          $impl.TemporaryBuf[4] = "~";
        };
        if (LAB_L(0) && CMP(1) && JNE(2) && LAB_A(3)) {
          $impl.TemporaryBuf[3] = "~";
        };
        if ((SKIP(0) === false) && ($impl.TemporaryBuf[1] === "\tbeq @+") && JMP(2) && LAB_A(3)) {
          $impl.TemporaryBuf[1] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = "~";
        };
        if (LAB_L(0) && LDA(1) && (pas.System.Pos("\tclc",$impl.TemporaryBuf[2]) === 1) && (pas.System.Pos("adc ",$impl.TemporaryBuf[3]) > 0) && (pas.System.Pos("adc ",$impl.TemporaryBuf[4]) > 0) && ($impl.TemporaryBuf[5] === "\tbcs @+") && JMP(6) && LAB_A(7)) {
          $impl.TemporaryBuf[5] = "\tjcc " + pas.System.Copy($impl.TemporaryBuf[6],6,256);
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[7] = "~";
        };
        if (LAB_L(0) && (pas.System.Pos("\tclc",$impl.TemporaryBuf[1]) === 1) && (pas.System.Pos("adc ",$impl.TemporaryBuf[2]) > 0) && (pas.System.Pos("adc ",$impl.TemporaryBuf[3]) > 0) && ($impl.TemporaryBuf[4] === "\tbcs @+") && JMP(5) && LAB_A(6)) {
          $impl.TemporaryBuf[4] = "\tjcc " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
        };
        if ((SKIP(0) === false) && ($impl.TemporaryBuf[1] === "\tbcs @+") && JMP(2) && LAB_A(3)) {
          $impl.TemporaryBuf[1] = "\tjcc " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && ($impl.TemporaryBuf[1] === "\tbcc @+") && JMP(2) && LAB_A(3)) {
          $impl.TemporaryBuf[1] = "\tjcs " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = "~";
        };
        if (LDA(0) && SKIP(1) && ($impl.TemporaryBuf[2] === "") && OPTI(3) && ($impl.TemporaryBuf[4] === "") && LDA_IM_0(5) && SUB(6) && STA(7)) if ((pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) && (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[7],6,256)) && (pas.System.Copy($impl.TemporaryBuf[1],6,256) === $impl.TemporaryBuf[8])) {
          $impl.TemporaryBuf[5] = "\teor #$FF";
          $impl.TemporaryBuf[6] = "\tadd #$01";
          if ($impl.TemporaryBuf[12] === $impl.TemporaryBuf[0]) $impl.TemporaryBuf[12] = "~";
        };
        if (LDA(0) && SKIP(1) && ($impl.TemporaryBuf[2] === "") && OPTI(3) && ($impl.TemporaryBuf[4] === "") && ($impl.TemporaryBuf[5] === $impl.TemporaryBuf[0])) {
          $impl.TemporaryBuf[5] = "~";
        };
        if (STY(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4) && ($impl.TemporaryBuf[5] === ("\tsta " + pas.System.Copy($impl.TemporaryBuf[0],6,256)))) {
          $impl.TemporaryBuf[0] = "~";
        };
        if (MVA_IM(0) && MVA_IM(1) && MVA_IM(2)) if ((pas.System.Copy($impl.TemporaryBuf[0],6,4) === pas.System.Copy($impl.TemporaryBuf[1],6,4)) && (pas.System.Copy($impl.TemporaryBuf[1],6,4) === pas.System.Copy($impl.TemporaryBuf[2],6,4))) {
          if (MVA_IM(3)) {
            if (pas.System.Copy($impl.TemporaryBuf[1],6,4) === pas.System.Copy($impl.TemporaryBuf[3],6,4)) $impl.TemporaryBuf[3] = "\tsta" + pas.System.Copy($impl.TemporaryBuf[3],10,256);
          };
          $impl.TemporaryBuf[1] = "\tsta" + pas.System.Copy($impl.TemporaryBuf[1],10,256);
          $impl.TemporaryBuf[2] = "\tsta" + pas.System.Copy($impl.TemporaryBuf[2],10,256);
        };
        if (MVA_IM(0) && MVA_IM(1)) if (pas.System.Copy($impl.TemporaryBuf[0],6,4) === pas.System.Copy($impl.TemporaryBuf[1],6,4)) {
          if (MVA_IM(2)) {
            if (pas.System.Copy($impl.TemporaryBuf[1],6,4) === pas.System.Copy($impl.TemporaryBuf[2],6,4)) $impl.TemporaryBuf[2] = "\tsta" + pas.System.Copy($impl.TemporaryBuf[2],10,256);
          };
          $impl.TemporaryBuf[1] = "\tsta" + pas.System.Copy($impl.TemporaryBuf[1],10,256);
        };
        if (MVA(0) && MVA(1) && ($impl.TemporaryBuf[2] === "") && OPTI(3) && ($impl.TemporaryBuf[4] === "") && LDA(5)) if (pas.System.Pos(pas.System.Copy($impl.TemporaryBuf[5],5,256),$impl.TemporaryBuf[0]) > 6) {
          tmp = $impl.TemporaryBuf[0];
          p = rtl.rc(tmp.length,-2147483648,2147483647);
          while (rtl.rcCharAt(tmp,p - 1) !== " ") p -= 1;
          tmp = pas.System.Copy(tmp,p + 1,256);
          if (pas.System.Copy($impl.TemporaryBuf[5],6,256) === tmp) {
            $impl.TemporaryBuf[5] = "~";
            tmp = $impl.TemporaryBuf[0];
            $impl.TemporaryBuf[0] = $impl.TemporaryBuf[1];
            $impl.TemporaryBuf[1] = tmp;
          };
        };
        if (MVA(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4)) if (pas.System.Pos(pas.System.Copy($impl.TemporaryBuf[4],5,256),$impl.TemporaryBuf[0]) > 6) {
          tmp = $impl.TemporaryBuf[0];
          p = rtl.rc(tmp.length,-2147483648,2147483647);
          while (rtl.rcCharAt(tmp,p - 1) !== " ") p -= 1;
          tmp = pas.System.Copy(tmp,p + 1,256);
          if (pas.System.Copy($impl.TemporaryBuf[4],6,256) === tmp) $impl.TemporaryBuf[4] = "~";
        };
        if (TYA(0) && ($impl.TemporaryBuf[1] === "\tadc #$00") && STA(2) && (STA_STACK(2) === false)) {
          $impl.TemporaryBuf[0] = "\tscc";
          $impl.TemporaryBuf[1] = "\tiny";
          $impl.TemporaryBuf[2] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
        };
        if (STA(0) && SCC(1) && INC_(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && LDA(6)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
          $impl.TemporaryBuf[6] = "~";
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          $impl.TemporaryBuf[4] = "~";
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDY(4)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          if (STY(5)) {
            $impl.TemporaryBuf[4] = "~";
            $impl.TemporaryBuf[5] = "\tsta " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          } else $impl.TemporaryBuf[4] = "\ttay";
        };
        if (INC_(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4) && (JEQ(5) || JNE(5))) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          $impl.TemporaryBuf[4] = "~";
        };
        if (DEC_(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4) && JNE(5)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          $impl.TemporaryBuf[4] = "~";
        };
        if (STA(0) && LDA(1) && STA(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && (pas.System.Pos("mwy ",$impl.TemporaryBuf[6]) > 0) && (pas.System.Pos(" :bp2",$impl.TemporaryBuf[6]) > 0)) if ((pas.System.Pos($impl.TemporaryBuf[0],$impl.TemporaryBuf[2]) > 0) && (("\tmwy " + pas.System.Copy($impl.TemporaryBuf[0],6,256) + " :bp2") === $impl.TemporaryBuf[6])) {
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[4];
          $impl.TemporaryBuf[4] = $impl.TemporaryBuf[3];
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = "\tsta :bp2";
          $impl.TemporaryBuf[4] = "\tsta :bp2+1";
        };
        if (($impl.TemporaryBuf[0] === "\timulCL") && ($impl.TemporaryBuf[1] === "\teif") && ($impl.TemporaryBuf[2] === "\tlda :eax") && STA(3) && ($impl.TemporaryBuf[4] === "\tlda :eax+1") && STA(5) && ($impl.TemporaryBuf[6] === "") && OPTI(7) && ($impl.TemporaryBuf[8] === "")) {
          $impl.TemporaryBuf[4] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[5];
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[3];
          $impl.TemporaryBuf[3] = "~";
          if (LDA(9) && ADD(10) && (pas.System.Copy($impl.TemporaryBuf[5],6,256) === pas.System.Copy($impl.TemporaryBuf[10],6,256))) {
            $impl.TemporaryBuf[10] = "~";
            $impl.TemporaryBuf[9] = "\tadd " + pas.System.Copy($impl.TemporaryBuf[9],6,256);
          };
        };
        if (LAB_L(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && LDA(4) && SKIP(5) && ($impl.TemporaryBuf[6] === "") && OPTI(7) && ($impl.TemporaryBuf[8] === "") && LDA(9) && ADD_SUB(10) && STA(11) && ($impl.TemporaryBuf[12] === $impl.TemporaryBuf[4])) {
          $impl.TemporaryBuf[4] = "\tldy " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          $impl.TemporaryBuf[12] = "\ttya";
        };
        if (LDA(0) && SKIP(1) && ($impl.TemporaryBuf[2] === "") && OPTI(3) && ($impl.TemporaryBuf[4] === "") && LDA(5) && LDY(6)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
          $impl.TemporaryBuf[0] = $impl.TemporaryBuf[6];
          $impl.TemporaryBuf[6] = "~";
        };
        if (LDA(0) && STA_STACK(1) && LDA(2) && ASL_A(3) && (pas.System.Pos("rol :STACK",$impl.TemporaryBuf[4]) > 0) && STA(5) && LDA_STACK(6) && STA(7) && (IY(7) === false) && ($impl.TemporaryBuf[9] !== "; --- WhileProlog")) if ((pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) && (pas.System.Copy($impl.TemporaryBuf[4],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) && (pas.System.Pos($impl.TemporaryBuf[5],$impl.TemporaryBuf[7]) > 0)) {
          $impl.TemporaryBuf[1] = $impl.TemporaryBuf[7];
          $impl.TemporaryBuf[4] = "\trol " + pas.System.Copy($impl.TemporaryBuf[7],6,256);
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[7] = "~";
        };
        if (LDA(0) && ($impl.TemporaryBuf[0] === $impl.TemporaryBuf[4]) && ($impl.TemporaryBuf[1] === "\tsta :ecx") && LDA(2) && ($impl.TemporaryBuf[2] === $impl.TemporaryBuf[6]) && ($impl.TemporaryBuf[3] === "\tsta :ecx+1") && ($impl.TemporaryBuf[5] === "\tsta :eax") && ($impl.TemporaryBuf[7] === "\tsta :eax+1")) {
          $impl.TemporaryBuf[6] = "\tsta :ecx+1";
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[4] = "\tsta :eax";
          $impl.TemporaryBuf[3] = "\tsta :ecx";
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[0];
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[0] = "~";
        };
      };
      function opt_TEMP_CMP() {
        var p = 0;
        if (LDA(0) && CMP(1) && SKIP(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && ($impl.TemporaryBuf[6] === $impl.TemporaryBuf[0]) && (SKIP(7) === false)) {
          $impl.TemporaryBuf[6] = "~";
          p = 7;
          while (CMP(p) && SKIP(p + 1) && (rtl.rcArrR($impl.TemporaryBuf,p + 2) === $impl.TemporaryBuf[0]) && (SKIP(p + 3) === false)) {
            rtl.rcArrW($impl.TemporaryBuf,p + 2,"~");
            p += 3;
          };
        };
        if (LDA(0) && CMP(1) && SKIP(2) && ($impl.TemporaryBuf[3] === $impl.TemporaryBuf[0]) && (SKIP(4) === false)) {
          $impl.TemporaryBuf[3] = "~";
          p = 4;
          while (CMP(p) && SKIP(p + 1) && (rtl.rcArrR($impl.TemporaryBuf,p + 2) === $impl.TemporaryBuf[0]) && (SKIP(p + 3) === false)) {
            rtl.rcArrW($impl.TemporaryBuf,p + 2,"~");
            p += 3;
          };
        };
        if (LDA(0) && ($impl.TemporaryBuf[0] === $impl.TemporaryBuf[3]) && CMP(1) && SKIP(2) && (JEQ(4) || JNE(4))) {
          $impl.TemporaryBuf[3] = "\tcmp #$00";
        };
        if (LDA(0) && CMP(1) && SKIP(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && LDY(6) && LDA(7)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
          if ((IY(0) === false) && (IY(1) === false)) {
            $impl.TemporaryBuf[0] = "\tldy " + pas.System.Copy($impl.TemporaryBuf[0],6,256);
            $impl.TemporaryBuf[1] = "\tcpy " + pas.System.Copy($impl.TemporaryBuf[1],6,256);
            $impl.TemporaryBuf[6] = "~";
          } else $impl.TemporaryBuf[6] = "\ttay";
        };
        if (LDA(0) && CMP(1) && SKIP(2) && LDY(3) && LDA(4)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[3],6,256)) {
          if ((IY(0) === false) && (IY(1) === false)) {
            $impl.TemporaryBuf[0] = "\tldy " + pas.System.Copy($impl.TemporaryBuf[0],6,256);
            $impl.TemporaryBuf[1] = "\tcpy " + pas.System.Copy($impl.TemporaryBuf[1],6,256);
            $impl.TemporaryBuf[3] = "~";
          } else $impl.TemporaryBuf[3] = "\ttay";
        };
        if (STA_STACK(0) && LDY_1(1) && LDA_STACK(2) && (AND_ORA_EOR(3) || CMP(3))) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[2],6,256)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[2] = "~";
        };
        if (LDY_1(0) && LDA(1) && CMP(2) && ($impl.TemporaryBuf[3] === "\tbcs @+") && DEY(4) && LAB_A(5) && TYA(6)) {
          $impl.TemporaryBuf[0] = "";
          $impl.TemporaryBuf[3] = "\tlda #$00";
          $impl.TemporaryBuf[4] = "\trol @";
          $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
        };
      };
      function opt_TEMP_CMP_0() {
        var p = 0;
        if ((CMP_IM_0(2) || LDA(2)) && (IFTMP(2) === false) && JNE_L(3) && (LAB_L(4) === false)) {
          for (p = 4; p <= 511; p++) if (LDA(p)) {
            if (rtl.rcArrR($impl.TemporaryBuf,p) === "\tlda #$00") rtl.rcArrW($impl.TemporaryBuf,p,"~");
            break;
          } else if ((pas.System.Pos("#asm:",rtl.rcArrR($impl.TemporaryBuf,p)) === 1) || LAB_L(p) || JSR(p) || (pas.System.Pos("\t.if",rtl.rcArrR($impl.TemporaryBuf,p)) > 0) || (pas.System.Pos("\t.LOCAL ",rtl.rcArrR($impl.TemporaryBuf,p)) > 0) || (pas.System.Pos("\t@print",rtl.rcArrR($impl.TemporaryBuf,p)) > 0) || (rtl.rcArrR($impl.TemporaryBuf,p) === "\ttya")) break;
        };
        if (STA_STACK(0) && LDY_1(1) && LDA_STACK(2) && CMP_IM_0(3) && (($impl.TemporaryBuf[4] === "\tbeq @+") || ($impl.TemporaryBuf[4] === "\tbne @+")) && DEY(5) && LAB_A(6) && (TYA(7) || STY(7))) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[2],6,256)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[2] = "~";
        };
        if (LDY_1(0) && LDA(1) && (LDA_STACK(1) === false) && CMP_IM_0(2) && (($impl.TemporaryBuf[3] === "\tbeq @+") || ($impl.TemporaryBuf[3] === "\tbne @+")) && DEY(4) && LAB_A(5) && (TYA(6) || STY(6))) {
          $impl.TemporaryBuf[2] = "~";
        };
        if (LDY_1(0) && AND_ORA_EOR(1) && CMP_IM_0(2) && (($impl.TemporaryBuf[3] === "\tbeq @+") || ($impl.TemporaryBuf[3] === "\tbne @+")) && DEY(4) && LAB_A(5) && (TYA(6) || STY(6))) {
          $impl.TemporaryBuf[2] = "~";
        };
        if (LDY_1(2) && LDA(3) && CMP_IM_0(4) && ($impl.TemporaryBuf[5] === "\tbne @+") && LDA(6) && CMP_IM_0(7) && LAB_A(8) && (($impl.TemporaryBuf[9] === "\tbeq @+") || ($impl.TemporaryBuf[9] === "\tbne @+")) && DEY(10) && LAB_A(11) && (TYA(12) || STY(12))) {
          $impl.TemporaryBuf[4] = "\tora " + pas.System.Copy($impl.TemporaryBuf[6],6,256);
          $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[7] = "~";
          $impl.TemporaryBuf[8] = "~";
        };
        if (LDA(2) && STA(3) && CMP_IM_0(4) && (($impl.TemporaryBuf[5] === "\tbeq @+") || ($impl.TemporaryBuf[5] === "\tbne @+")) && JMP(6) && LAB_A(7)) {
          $impl.TemporaryBuf[4] = "~";
        };
        if (LDA_BP2_Y(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && DEY(5) && LDA_BP2_Y(6) && CMP(7) && ($impl.TemporaryBuf[8] === "\tbne @+") && DEY(9) && LDA_BP2_Y(10) && CMP(11) && ($impl.TemporaryBuf[12] === "\tbne @+") && DEY(13) && LDA_BP2_Y(14) && CMP(15) && LAB_A(16) && (JEQ(17) || JNE(17)) && (SKIP(18) === false)) {
          $impl.TemporaryBuf[3] = "~";
        };
        if (LDA_BP2_Y(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && DEY(5) && LDA_BP2_Y(6) && CMP(7) && ($impl.TemporaryBuf[8] === "\tbne @+") && DEY(9) && LDA_BP2_Y(10) && CMP(11) && LAB_A(12) && (JEQ(13) || JNE(13)) && (SKIP(14) === false)) {
          $impl.TemporaryBuf[3] = "~";
        };
        if (LDA_BP2_Y(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && DEY(5) && LDA_BP2_Y(6) && CMP(7) && LAB_A(8) && (JEQ(9) || JNE(9)) && (SKIP(10) === false)) {
          $impl.TemporaryBuf[3] = "~";
        };
        if (LDA(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP(6) && ($impl.TemporaryBuf[7] === "\tbne @+") && LDA(8) && CMP(9) && ($impl.TemporaryBuf[10] === "\tbne @+") && LDA(11) && CMP(12) && LAB_A(13) && (JEQ(14) || JNE(14)) && (SKIP(15) === false)) {
          $impl.TemporaryBuf[3] = "~";
          if (CMP_IM_0(6) && CMP_IM_0(9) && CMP_IM_0(12)) {
            $impl.TemporaryBuf[6] = "~";
            $impl.TemporaryBuf[9] = "~";
            $impl.TemporaryBuf[12] = "~";
            if (JEQ(14)) {
              $impl.TemporaryBuf[13] = $impl.TemporaryBuf[14];
              $impl.TemporaryBuf[14] = "@";
            };
          };
        };
        if (LDA(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP_IM_0(6) && ($impl.TemporaryBuf[7] === "\tbne @+") && LDA(8) && CMP_IM_0(9) && ($impl.TemporaryBuf[10] === "\tbne @+") && LDA(11) && CMP_IM_0(12) && LAB_A(13) && (($impl.TemporaryBuf[14] === "\tbeq @+") || ($impl.TemporaryBuf[14] === "\tbne @+")) && DEY(15) && LAB_A(16) && (TYA(17) || STY(17))) {
          $impl.TemporaryBuf[3] = "~";
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[9] = "~";
          $impl.TemporaryBuf[12] = "~";
        };
        if (LDY_1(0) && LDA(1) && CMP_IM_0(2) && ($impl.TemporaryBuf[3] === "\tbne @+") && LDA(4) && CMP(5) && LAB_A(6) && ($impl.TemporaryBuf[7] === "\tbcs @+") && DEY(8) && LAB_A(9) && (TYA(10) || STY(10))) {
          $impl.TemporaryBuf[2] = "~";
          $impl.TemporaryBuf[6] = "~";
        };
        if (LDA(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP(6) && ($impl.TemporaryBuf[7] === "\tbne @+") && LDA(8) && CMP(9) && LAB_A(10) && (JEQ(11) || JNE(11)) && (SKIP(12) === false)) {
          $impl.TemporaryBuf[3] = "~";
        };
        if (LDA(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbne @+") && LDA(5) && CMP(6) && LAB_A(7) && (JEQ(8) || JNE(8)) && (SKIP(9) === false)) {
          $impl.TemporaryBuf[3] = "~";
        };
        if (LDA(2) && CMP_IM_0(3) && LAB_A(4) && (JEQ(5) || JNE(5)) && (SKIP(6) === false)) {
          $impl.TemporaryBuf[3] = "~";
        };
      };
      function opt_TEMP_WHILE() {
        var p = 0;
        if (($impl.TemporaryBuf[2] === "; --- WhileProlog") && STA(0) && JMP(3) && LAB_L(4)) {
          for (p = 5; p <= 510; p++) if ((rtl.rcArrR($impl.TemporaryBuf,p) === $impl.TemporaryBuf[0]) && LAB_L(p + 1) && (rtl.rcArrR($impl.TemporaryBuf,p + 1) === pas.System.Copy($impl.TemporaryBuf[3],6,256))) {
            rtl.rcArrW($impl.TemporaryBuf,p,rtl.rcArrR($impl.TemporaryBuf,p + 1));
            rtl.rcArrW($impl.TemporaryBuf,p + 1,$impl.TemporaryBuf[0]);
            $impl.TemporaryBuf[0] = "~";
            break;
          };
        };
        if (($impl.TemporaryBuf[2] === "; --- WhileProlog") && STA(0) && JMP(3) && LAB_L(4)) {
          tmp = pas.System.Copy($impl.TemporaryBuf[0],6,256);
          for (p = 5; p <= 505; p++) if ((SKIP(p - 1) === false) && (INC_(p) || DEC_(p)) && (rtl.rcArrR($impl.TemporaryBuf,p + 1) === pas.System.Copy($impl.TemporaryBuf[3],6,256)) && OPTI(p + 3) && (tmp === pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256)) && (rtl.rcArrR($impl.TemporaryBuf,p + 5) === ("\tlda " + tmp)) && (rtl.rcArrR($impl.TemporaryBuf,p + 6) === ("\tjne " + $impl.TemporaryBuf[4]))) {
            rtl.rcArrW($impl.TemporaryBuf,p + 5,"~");
            break;
          };
        };
        if (($impl.TemporaryBuf[3] === "; --- WhileProlog") && LDA_IM(0) && (GetBYTE(0) < 128) && STA(1) && ($impl.TemporaryBuf[2] === "") && JMP(4) && LAB_L(5)) {
          tmp = pas.System.Copy($impl.TemporaryBuf[4],6,256);
          for (p = 7; p <= 505; p++) if (rtl.rcArrR($impl.TemporaryBuf,p) === tmp) {
            if ((SKIP(p - 2) === false) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === ("\tdec " + pas.System.Copy($impl.TemporaryBuf[1],6,256))) && (rtl.rcArrR($impl.TemporaryBuf,p + 1) === "") && OPTI(p + 2) && (rtl.rcArrR($impl.TemporaryBuf,p + 3) === "") && (rtl.rcArrR($impl.TemporaryBuf,p + 4) === ("\tlda " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p - 1),6,256))) && (rtl.rcArrR($impl.TemporaryBuf,p + 5) === "\tcmp #$FF") && JNE(p + 6)) {
              rtl.rcArrW($impl.TemporaryBuf,p + 4,"~");
              rtl.rcArrW($impl.TemporaryBuf,p + 5,"~");
              rtl.rcArrW($impl.TemporaryBuf,p + 6,"\tjpl " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p + 6),6,256));
            };
            break;
          };
        };
        if (($impl.TemporaryBuf[2] === "; --- WhileProlog") && ($impl.TemporaryBuf[1] === "") && JMP(3) && LAB_L(4) && ($impl.TemporaryBuf[5] === "") && OPTI(6) && ($impl.TemporaryBuf[7] === "") && LDY_IM(8)) {
          yes = true;
          tmp = pas.System.Copy($impl.TemporaryBuf[3],6,256);
          for (p = 9; p <= 511; p++) if (rtl.rcArrR($impl.TemporaryBuf,p) === tmp) {
            if (yes) {
              $impl.TemporaryBuf[1] = $impl.TemporaryBuf[8];
              $impl.TemporaryBuf[8] = $impl.TemporaryBuf[7];
              $impl.TemporaryBuf[7] = $impl.TemporaryBuf[6];
              $impl.TemporaryBuf[6] = $impl.TemporaryBuf[5];
              $impl.TemporaryBuf[5] = $impl.TemporaryBuf[4];
              $impl.TemporaryBuf[4] = $impl.TemporaryBuf[3];
              $impl.TemporaryBuf[3] = $impl.TemporaryBuf[2];
              $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
              $impl.TemporaryBuf[1] = "";
            };
            break;
          } else if (fail(p)) yes = false;
        };
        if (($impl.TemporaryBuf[2] === "; --- WhileProlog") && ($impl.TemporaryBuf[1] === "") && JMP(3) && LAB_L(4) && ($impl.TemporaryBuf[5] === "") && OPTI(6) && ($impl.TemporaryBuf[7] === "") && (LDY_IM(8) === false)) {
          yes = true;
          tmp = pas.System.Copy($impl.TemporaryBuf[3],6,256);
          for (p = 8; p <= 506; p++) if ((rtl.rcArrR($impl.TemporaryBuf,p - 1) === ("\tdec " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p + 4),6,256))) && (rtl.rcArrR($impl.TemporaryBuf,p) === tmp) && (rtl.rcArrR($impl.TemporaryBuf,p + 1) === "") && OPTI(p + 2) && (rtl.rcArrR($impl.TemporaryBuf,p + 3) === "") && LDA(p + 4) && (rtl.rcArrR($impl.TemporaryBuf,p + 5) === ("\tjne " + $impl.TemporaryBuf[4]))) {
            if (yes) {
              $impl.TemporaryBuf[1] = rtl.rcArrR($impl.TemporaryBuf,p + 4);
              rtl.rcArrW($impl.TemporaryBuf,p + 4,rtl.rcArrR($impl.TemporaryBuf,p + 5));
              rtl.rcArrW($impl.TemporaryBuf,p + 5,"~");
            };
            break;
          } else if (fail(p)) yes = false;
        };
      };
      function opt_TEMP_FOR() {
        var p = 0;
        if (INC_(1) && SNE(2) && INC_(3) && SEQ(4) && JMP(5) && LAB_L(6)) if (pas.System.Pos($impl.TemporaryBuf[1],$impl.TemporaryBuf[3]) > 0) {
          $impl.TemporaryBuf[2] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          $impl.TemporaryBuf[5] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          $impl.TemporaryBuf[4] = "~";
        };
        if (DEC_(1) && LDA(2) && ($impl.TemporaryBuf[3] === "\tcmp #$FF") && SEQ(4) && JMP(5) && LAB_L(6)) if (pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[2],6,256)) {
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[2] = "\tbeq " + $impl.TemporaryBuf[6];
          $impl.TemporaryBuf[4] = "~";
        };
        if (LDA(1) && ($impl.TemporaryBuf[2] === "\tbne @+") && DEC_(3) && LAB_A(4) && DEC_(5) && LDA(6) && ($impl.TemporaryBuf[7] === "\tcmp #$FF") && SEQ(8) && JMP(9) && LAB_L(10)) if (pas.System.Copy($impl.TemporaryBuf[3],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
          $impl.TemporaryBuf[7] = $impl.TemporaryBuf[5];
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[3];
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[6];
          $impl.TemporaryBuf[4] = "\tbeq " + $impl.TemporaryBuf[10];
          $impl.TemporaryBuf[6] = "@";
          $impl.TemporaryBuf[8] = "~";
        };
        if (LDA(0) && STA(1) && ($impl.TemporaryBuf[2] === "") && LAB_L(3) && ($impl.TemporaryBuf[4] === "; --- ForToDoCondition") && LDY(5) && LDA(6) && STA(7) && ($impl.TemporaryBuf[9] === "; --- ForToDoEpilog") && INC_(10) && SEQ(11) && ($impl.TemporaryBuf[12] === ("\tjmp " + $impl.TemporaryBuf[3])) && LAB_L(13)) if ((pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[5],6,256)) && (pas.System.Copy($impl.TemporaryBuf[5],6,256) === pas.System.Copy($impl.TemporaryBuf[10],6,256))) {
          $impl.TemporaryBuf[0] = "\tldy " + pas.System.Copy($impl.TemporaryBuf[0],6,256);
          $impl.TemporaryBuf[1] = "~";
          if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
            $impl.TemporaryBuf[1] = "\ttya"}
           else $impl.TemporaryBuf[1] = $impl.TemporaryBuf[6];
          $impl.TemporaryBuf[10] = "\tiny";
          $impl.TemporaryBuf[11] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[12],6,256);
          $impl.TemporaryBuf[12] = $impl.TemporaryBuf[13];
          if (LAB_B(14)) {
            $impl.TemporaryBuf[13] = $impl.TemporaryBuf[14];
            $impl.TemporaryBuf[14] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          } else $impl.TemporaryBuf[13] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          if (pas.System.Copy($impl.TemporaryBuf[5],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
            $impl.TemporaryBuf[5] = "\ttya";
            $impl.TemporaryBuf[1] = "~";
          } else $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition") && LDY(4) && LDA(5) && ADD_SUB(6) && STA(7) && (SCC(8) || SCS(8)) && (INC_(9) || DEC_(9)) && ($impl.TemporaryBuf[11] === "; --- ForToDoEpilog") && INC_(12) && SEQ(13) && ($impl.TemporaryBuf[14] === ("\tjmp " + $impl.TemporaryBuf[2])) && LAB_L(15)) if ((pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) && (pas.System.Copy($impl.TemporaryBuf[4],6,256) === pas.System.Copy($impl.TemporaryBuf[12],6,256))) {
          $impl.TemporaryBuf[0] = "\ttay";
          $impl.TemporaryBuf[12] = "\tiny";
          $impl.TemporaryBuf[13] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[14],6,256);
          $impl.TemporaryBuf[14] = $impl.TemporaryBuf[15];
          if (LAB_B(16)) {
            $impl.TemporaryBuf[15] = $impl.TemporaryBuf[16];
            $impl.TemporaryBuf[16] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          } else $impl.TemporaryBuf[15] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          $impl.TemporaryBuf[4] = $impl.TemporaryBuf[5];
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[6];
          $impl.TemporaryBuf[6] = $impl.TemporaryBuf[7];
          $impl.TemporaryBuf[7] = $impl.TemporaryBuf[8];
          $impl.TemporaryBuf[8] = $impl.TemporaryBuf[9];
          $impl.TemporaryBuf[9] = $impl.TemporaryBuf[10];
          $impl.TemporaryBuf[10] = $impl.TemporaryBuf[11];
          $impl.TemporaryBuf[11] = $impl.TemporaryBuf[12];
          $impl.TemporaryBuf[12] = $impl.TemporaryBuf[13];
          $impl.TemporaryBuf[13] = $impl.TemporaryBuf[14];
          $impl.TemporaryBuf[14] = $impl.TemporaryBuf[15];
          $impl.TemporaryBuf[15] = $impl.TemporaryBuf[16];
          if (pas.System.Copy($impl.TemporaryBuf[4],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
            $impl.TemporaryBuf[1] = $impl.TemporaryBuf[4];
            $impl.TemporaryBuf[15] = $impl.TemporaryBuf[6];
            $impl.TemporaryBuf[4] = "~";
            $impl.TemporaryBuf[6] = "~";
          };
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition") && LDY(4) && LDA(5) && ADD_SUB(6) && STA_BP_1(7) && LDA(8) && STA_BP_Y(9) && ($impl.TemporaryBuf[11] === "; --- ForToDoEpilog") && INC_(12) && SEQ(13) && ($impl.TemporaryBuf[14] === ("\tjmp " + $impl.TemporaryBuf[2])) && LAB_L(15)) if ((pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) && (pas.System.Copy($impl.TemporaryBuf[4],6,256) === pas.System.Copy($impl.TemporaryBuf[12],6,256))) {
          $impl.TemporaryBuf[0] = "\ttay";
          $impl.TemporaryBuf[12] = "\tiny";
          $impl.TemporaryBuf[13] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[14],6,256);
          $impl.TemporaryBuf[14] = $impl.TemporaryBuf[15];
          if (LAB_B(16)) {
            $impl.TemporaryBuf[15] = $impl.TemporaryBuf[16];
            $impl.TemporaryBuf[16] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          } else $impl.TemporaryBuf[15] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          $impl.TemporaryBuf[4] = "~";
        };
        if (($impl.TemporaryBuf[0] === "") && LAB_L(1) && ($impl.TemporaryBuf[2] === "; --- ForToDoCondition") && LDY_IM_0(3) && LDA(4) && ADD_SUB(5) && STA(6) && (SCC(7) || SCS(7)) && (INC_(8) || DEC_(8)) && ($impl.TemporaryBuf[10] === "; --- ForToDoEpilog") && INC_(11) && SNE(12) && INC_(13) && SEQ(14) && ($impl.TemporaryBuf[15] === ("\tjmp " + $impl.TemporaryBuf[1])) && LAB_L(16)) if (pas.System.Copy($impl.TemporaryBuf[5],6,256) === ("(" + pas.System.Copy($impl.TemporaryBuf[11],6,256) + "),y")) {
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = "\tldy #$00";
          $impl.TemporaryBuf[12] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
          $impl.TemporaryBuf[14] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
          $impl.TemporaryBuf[15] = $impl.TemporaryBuf[16];
          if (LAB_B(17)) {
            $impl.TemporaryBuf[16] = $impl.TemporaryBuf[17];
            $impl.TemporaryBuf[17] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[11],6,256);
          } else $impl.TemporaryBuf[16] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[11],6,256);
          $impl.TemporaryBuf[11] = "\tiny";
          if (pas.System.Copy($impl.TemporaryBuf[4],6,256) === pas.System.Copy($impl.TemporaryBuf[6],6,256)) {
            $impl.TemporaryBuf[0] = $impl.TemporaryBuf[4];
            $impl.TemporaryBuf[4] = $impl.TemporaryBuf[5];
            $impl.TemporaryBuf[5] = $impl.TemporaryBuf[6];
            $impl.TemporaryBuf[6] = $impl.TemporaryBuf[7];
            $impl.TemporaryBuf[7] = $impl.TemporaryBuf[8];
            $impl.TemporaryBuf[8] = $impl.TemporaryBuf[9];
            $impl.TemporaryBuf[9] = $impl.TemporaryBuf[10];
            $impl.TemporaryBuf[10] = $impl.TemporaryBuf[11];
            $impl.TemporaryBuf[11] = $impl.TemporaryBuf[12];
            $impl.TemporaryBuf[12] = $impl.TemporaryBuf[13];
            $impl.TemporaryBuf[13] = $impl.TemporaryBuf[14];
            $impl.TemporaryBuf[14] = $impl.TemporaryBuf[15];
            $impl.TemporaryBuf[15] = $impl.TemporaryBuf[16];
            $impl.TemporaryBuf[16] = $impl.TemporaryBuf[17];
            $impl.TemporaryBuf[17] = $impl.TemporaryBuf[18];
          };
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition") && LDA(4) && CMP(5) && SKIP(6) && LDY(7) && LDA(8) && STA(9) && ($impl.TemporaryBuf[11] === "; --- ForToDoEpilog") && INC_(12) && SEQ(13) && ($impl.TemporaryBuf[14] === ("\tjmp " + $impl.TemporaryBuf[2])) && LAB_L(15)) if ((pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) && (pas.System.Copy($impl.TemporaryBuf[4],6,256) === pas.System.Copy($impl.TemporaryBuf[7],6,256)) && (pas.System.Copy($impl.TemporaryBuf[7],6,256) === pas.System.Copy($impl.TemporaryBuf[12],6,256))) {
          $impl.TemporaryBuf[0] = "\ttay";
          $impl.TemporaryBuf[4] = "~";
          $impl.TemporaryBuf[5] = "\tcpy " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
          $impl.TemporaryBuf[12] = "\tiny";
          $impl.TemporaryBuf[13] = "\tjne " + pas.System.Copy($impl.TemporaryBuf[14],6,256);
          $impl.TemporaryBuf[14] = $impl.TemporaryBuf[15];
          if (LAB_B(16)) {
            $impl.TemporaryBuf[15] = $impl.TemporaryBuf[16];
            $impl.TemporaryBuf[16] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[7],6,256);
          } else $impl.TemporaryBuf[15] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[7],6,256);
          $impl.TemporaryBuf[7] = "~";
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition") && LDA(4) && CMP(5) && SKIP(6) && ($impl.TemporaryBuf[7] === "") && OPTI(8) && ($impl.TemporaryBuf[9] === "") && LDA(10)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          for (p = 11; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if ((rtl.rcArrR($impl.TemporaryBuf,p - 6) === ("\tldy " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) && STA(p - 5) && (rtl.rcArrR($impl.TemporaryBuf,p - 4) === "") && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === ("\tinc " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tseq") && (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2]))) {
              $impl.TemporaryBuf[0] = "\ttay";
              $impl.TemporaryBuf[4] = "\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
              $impl.TemporaryBuf[5] = "\tcpy " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"\tiny");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tjne " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256));
              rtl.rcArrW($impl.TemporaryBuf,p,"~");
            };
            break;
          };
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition") && LDA(4) && CMP(5) && SKIP(6) && ($impl.TemporaryBuf[7] === "") && OPTI(8) && ($impl.TemporaryBuf[9] === "") && ($impl.TemporaryBuf[10] === ("\tldy " + pas.System.Copy($impl.TemporaryBuf[4],6,256)))) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
          yes = true;
          for (p = 11; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if (yes && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === ("\tinc " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tseq") && (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2])) && (rtl.rcArrR($impl.TemporaryBuf,p + 1) === pas.System.Copy($impl.TemporaryBuf[6],6,256))) {
              $impl.TemporaryBuf[0] = "\ttay";
              if (STA(11)) {
                $impl.TemporaryBuf[4] = "\ttya"}
               else {
                $impl.TemporaryBuf[4] = "~";
                $impl.TemporaryBuf[5] = "\tcpy " + pas.System.Copy($impl.TemporaryBuf[5],6,256);
              };
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"\tiny");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tjne " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256));
              rtl.rcArrW($impl.TemporaryBuf,p,rtl.rcArrR($impl.TemporaryBuf,p + 1));
              if (LAB_B(p + 2)) {
                rtl.rcArrW($impl.TemporaryBuf,p + 1,rtl.rcArrR($impl.TemporaryBuf,p + 2));
                rtl.rcArrW($impl.TemporaryBuf,p + 2,"\tsty " + pas.System.Copy($impl.TemporaryBuf[10],6,256));
              } else rtl.rcArrW($impl.TemporaryBuf,p + 1,"\tsty " + pas.System.Copy($impl.TemporaryBuf[10],6,256));
              $impl.TemporaryBuf[10] = "~";
            };
            break;
          } else if (fail(p) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tlda " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tadd " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tsub " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tadc " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tsbc " + pas.System.Copy($impl.TemporaryBuf[4],6,256)))) yes = false;
        };
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition") && ($impl.TemporaryBuf[4] === ("\tldy " + pas.System.Copy($impl.TemporaryBuf[0],6,256)))) {
          yes = true;
          for (p = 5; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if (yes && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === ("\tinc " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) && SEQ(p - 1) && (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2])) && LAB_L(p + 1)) {
              $impl.TemporaryBuf[0] = "\ttay";
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"\tiny");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tjne " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256));
              rtl.rcArrW($impl.TemporaryBuf,p,rtl.rcArrR($impl.TemporaryBuf,p + 1));
              if (LAB_B(p + 2)) {
                rtl.rcArrW($impl.TemporaryBuf,p + 1,rtl.rcArrR($impl.TemporaryBuf,p + 2));
                rtl.rcArrW($impl.TemporaryBuf,p + 2,"\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256));
              } else rtl.rcArrW($impl.TemporaryBuf,p + 1,"\tsty " + pas.System.Copy($impl.TemporaryBuf[4],6,256));
              $impl.TemporaryBuf[4] = "~";
            };
            break;
          } else if (fail(p) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tlda " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tadd " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tsub " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tadc " + pas.System.Copy($impl.TemporaryBuf[4],6,256))) || (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tsbc " + pas.System.Copy($impl.TemporaryBuf[4],6,256)))) yes = false;
        };
        if (LAB_L(0) && ($impl.TemporaryBuf[1] === "; --- ForToDoCondition") && (LDA(2) === false) && (CMP(3) === false)) {
          for (p = 2; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[0],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if ((rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[0])) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tbmi *+5") && DEC_(p - 2) && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 4) === "") && (INC_(p - 5) || DEC_(p - 5)) && ((rtl.rcArrR($impl.TemporaryBuf,p - 6) === "\tscc") || (rtl.rcArrR($impl.TemporaryBuf,p - 6) === "\tscs")) && STA(p - 7) && (rtl.rcArrR($impl.TemporaryBuf,p + 2) === "") && OPTI(p + 3) && (rtl.rcArrR($impl.TemporaryBuf,p + 4) === "") && LDA(p + 5) && ADD_SUB(p + 6) && (pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p + 5),6,256) === pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p - 7),6,256))) {
              rtl.rcArrW($impl.TemporaryBuf,p + 5,"~");
            };
            break;
          };
        };
        if (LAB_L(0) && ($impl.TemporaryBuf[1] === "; --- ForToDoCondition") && LDA(2) && (IY(2) === false) && ($impl.TemporaryBuf[3] === "\tcmp #$40") && JCS_L(4) && LDA(5)) {
          $impl.TemporaryBuf[2] = "\tbit " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[3] = "~";
          $impl.TemporaryBuf[4] = "\tjvs " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
        };
        if (LAB_L(0) && ($impl.TemporaryBuf[1] === "; --- ForToDoCondition") && LDA(2) && (IY(2) === false) && ($impl.TemporaryBuf[3] === "\tcmp #$40") && JCS_L(4) && ($impl.TemporaryBuf[5] === "") && OPTI(6) && ($impl.TemporaryBuf[7] === "") && LDA(8)) {
          $impl.TemporaryBuf[2] = "\tbit " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[3] = "~";
          $impl.TemporaryBuf[4] = "\tjvs " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
        };
        if (LAB_L(0) && ($impl.TemporaryBuf[1] === "; --- ForToDoCondition") && LDA(2) && CMP(3) && ($impl.TemporaryBuf[4] === "\tbcc @+") && JNE_L(5) && LDA(6) && CMP(7) && ($impl.TemporaryBuf[8] === "\tbcc @+") && JNE_L(9) && LAB_A(10) && ($impl.TemporaryBuf[11] === "") && OPTI(12) && ($impl.TemporaryBuf[13] === "") && LDA(14) && ADD(15)) {
          $impl.TemporaryBuf[10] = "\tclc";
          $impl.TemporaryBuf[11] = "@";
          $impl.TemporaryBuf[15] = "\tadc " + pas.System.Copy($impl.TemporaryBuf[15],6,256);
        };
      };
      function opt_TEMP_FORDEC() {
        var p = 0;
        var arg = "";
        if (($impl.TemporaryBuf[5] === "\t#for") && (pas.System.Pos("#for:dec",$impl.TemporaryBuf[4]) > 0) && (STA(0) || STY(0) || (pas.System.Pos("stz ",$impl.TemporaryBuf[0]) > 0)) && ($impl.TemporaryBuf[1] === "") && LAB_L(2) && ($impl.TemporaryBuf[3] === "; --- ForToDoCondition")) {
          yes = true;
          arg = pas.System.Copy($impl.TemporaryBuf[0],6,256);
          for (p = 6; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if ((rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2])) && (rtl.rcArrR($impl.TemporaryBuf,p - 5) === "; --- ForToDoEpilog") && (pas.System.Pos("dec ",rtl.rcArrR($impl.TemporaryBuf,p - 4)) > 0) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tseq") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === "\tcmp #$FF")) {
              $impl.TemporaryBuf[4] = rtl.rcArrR($impl.TemporaryBuf,p - 4);
              rtl.rcArrW($impl.TemporaryBuf,p - 4,"~");
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"~");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"~");
              rtl.rcArrW($impl.TemporaryBuf,p,"\tjne " + $impl.TemporaryBuf[2]);
              $impl.TemporaryBuf[1] = "\tjmp " + $impl.TemporaryBuf[2] + "f";
              $impl.TemporaryBuf[5] = $impl.TemporaryBuf[2] + "f";
              yes = false;
            };
            break;
          };
          if (yes) {
            $impl.TemporaryBuf[4] = "~";
            $impl.TemporaryBuf[5] = "~";
          };
          if (yes && ($impl.TemporaryBuf[6] === ("\tldy " + arg)) && ($impl.TemporaryBuf[7] === ("\tlda " + arg))) for (p = 8; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if (yes && (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2])) && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === ("\tdec " + arg)) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tbmi *+5") && LAB_L(p + 1)) {
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"\tdey");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tjpl " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256));
              if (LAB_B(p + 2)) {
                rtl.rcArrW($impl.TemporaryBuf,p,"~");
                rtl.rcArrW($impl.TemporaryBuf,p + 1,rtl.rcArrR($impl.TemporaryBuf,p + 2));
                rtl.rcArrW($impl.TemporaryBuf,p + 2,"\tsty " + arg);
              } else {
                rtl.rcArrW($impl.TemporaryBuf,p,"~");
                rtl.rcArrW($impl.TemporaryBuf,p + 1,"\tsty " + arg);
              };
              $impl.TemporaryBuf[0] = "\ttay";
              $impl.TemporaryBuf[6] = "~";
              $impl.TemporaryBuf[7] = "\ttya";
              yes = false;
            };
            break;
          } else if ((((p - 3) >= 8) && (pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p - 3),6,256) === arg)) || fail(p)) yes = false;
          if (yes && ($impl.TemporaryBuf[6] === ("\tldy " + arg))) for (p = 7; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if (yes && (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2])) && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === ("\tdec " + arg)) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tbmi *+5") && LAB_L(p + 1)) {
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"\tdey");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tjpl " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256));
              if (LAB_B(p + 2)) {
                rtl.rcArrW($impl.TemporaryBuf,p,"~");
                rtl.rcArrW($impl.TemporaryBuf,p + 1,rtl.rcArrR($impl.TemporaryBuf,p + 2));
                rtl.rcArrW($impl.TemporaryBuf,p + 2,"\tsty " + arg);
              } else {
                rtl.rcArrW($impl.TemporaryBuf,p,"~");
                rtl.rcArrW($impl.TemporaryBuf,p + 1,"\tsty " + arg);
              };
              $impl.TemporaryBuf[0] = "\ttay";
              $impl.TemporaryBuf[6] = "~";
              yes = false;
            };
            break;
          } else if ((((p - 3) >= 7) && (pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p - 3),6,256) === arg)) || fail(p)) yes = false;
          if (yes && ($impl.TemporaryBuf[8] === ("\tldy " + arg))) for (p = 9; p <= 511; p++) if (pas.System.Pos($impl.TemporaryBuf[2],rtl.rcArrR($impl.TemporaryBuf,p)) > 0) {
            if (yes && LDA(6) && ((pas.System.Pos("and #",$impl.TemporaryBuf[7]) > 0) || (pas.System.Pos("ora #",$impl.TemporaryBuf[7]) > 0) || (pas.System.Pos("eor #",$impl.TemporaryBuf[7]) > 0)) && (rtl.rcArrR($impl.TemporaryBuf,p) === ("\tjmp " + $impl.TemporaryBuf[2])) && (rtl.rcArrR($impl.TemporaryBuf,p - 3) === "; --- ForToDoEpilog") && (rtl.rcArrR($impl.TemporaryBuf,p - 2) === ("\tdec " + arg)) && (rtl.rcArrR($impl.TemporaryBuf,p - 1) === "\tbmi *+5") && LAB_L(p + 1)) {
              rtl.rcArrW($impl.TemporaryBuf,p - 2,"\tdey");
              rtl.rcArrW($impl.TemporaryBuf,p - 1,"\tjpl " + pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p),6,256));
              if (LAB_B(p + 2)) {
                rtl.rcArrW($impl.TemporaryBuf,p,"~");
                rtl.rcArrW($impl.TemporaryBuf,p + 1,rtl.rcArrR($impl.TemporaryBuf,p + 2));
                rtl.rcArrW($impl.TemporaryBuf,p + 2,"\tsty " + arg);
              } else {
                rtl.rcArrW($impl.TemporaryBuf,p,"~");
                rtl.rcArrW($impl.TemporaryBuf,p + 1,"\tsty " + arg);
              };
              if (pas.System.Copy($impl.TemporaryBuf[6],6,256) === arg) $impl.TemporaryBuf[6] = "\ttya";
              $impl.TemporaryBuf[0] = "\ttay";
              $impl.TemporaryBuf[8] = "~";
              yes = false;
            };
            break;
          } else if ((((p - 3) >= 9) && (pas.System.Copy(rtl.rcArrR($impl.TemporaryBuf,p - 3),6,256) === arg)) || fail(p)) yes = false;
        };
      };
      function opt_TEMP_IMUL_CX() {
        if (IFDEF_MUL16(8) && (pas.System.Pos("mva ",$impl.TemporaryBuf[0]) > 0) && (pas.System.Pos("mva :STACK",$impl.TemporaryBuf[0]) === 0) && ($impl.TemporaryBuf[1] === ("\tmva #$00 " + pas.System.Copy($impl.TemporaryBuf[5],6,256))) && LDA(2) && ($impl.TemporaryBuf[3] === "\tsta :ecx") && ($impl.TemporaryBuf[4] === "\tsta :eax") && LDA(5) && ($impl.TemporaryBuf[6] === "\tsta :ecx+1") && ($impl.TemporaryBuf[7] === "\tsta :eax+1")) {
          $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[7] = "~";
          $impl.TemporaryBuf[9] = "\tfmulu_8";
          $impl.TemporaryBuf[11] = "\timulCL";
        };
        if (IFDEF_MUL16(8) && LDA_IM_0(0) && STA(1) && LDA(2) && ($impl.TemporaryBuf[3] === "\tsta :ecx") && ($impl.TemporaryBuf[4] === "\tsta :eax") && LDA(5) && ($impl.TemporaryBuf[6] === "\tsta :ecx+1") && ($impl.TemporaryBuf[7] === "\tsta :eax+1")) if (pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[5],6,256)) {
          $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[7] = "~";
          $impl.TemporaryBuf[9] = "\tfmulu_8";
          $impl.TemporaryBuf[11] = "\timulCL";
        };
      };
      function opt_TEMP_IFTMP() {
        if (LAB_L(0) && IFTMP(1) && JNE_L(2)) {
          $impl.TemporaryBuf[1] = $impl.TemporaryBuf[0];
          $impl.TemporaryBuf[0] = "\tjmp " + pas.System.Copy($impl.TemporaryBuf[2],6,256);
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = $impl.TemporaryBuf[0];
          $impl.TemporaryBuf[0] = "~";
        };
        if (LAB_L(1) && IFTMP(2) && ($impl.TemporaryBuf[3] === "\tbeq *+5") && JMP(4)) {
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = "\tjmp " + pas.System.Copy($impl.TemporaryBuf[4],6,256);
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[4] = "~";
          if ((pas.System.Pos("\tjmp ",$impl.TemporaryBuf[0]) === 1) && ($impl.TemporaryBuf[1] === "~") && (pas.System.Pos("\tjmp ",$impl.TemporaryBuf[2]) === 1)) {
            $impl.TemporaryBuf[2] = "~";
          };
        };
      };
      function opt_TEMP_ORD() {
        if (LDY_1(0) && (CMP(1) || LDA(1)) && SKIP(2) && DEY(3) && LAB_A(4) && TYA(5) && ($impl.TemporaryBuf[6] === "\tsta :ecx") && LDA(7) && ($impl.TemporaryBuf[8] === "\tsta :eax") && IFDEF_MUL8(9)) {
          $impl.TemporaryBuf[6] = "\tseq";
          $impl.TemporaryBuf[9] = "\tlda #$00";
          $impl.TemporaryBuf[10] = "\tsta :eax+1";
          $impl.TemporaryBuf[11] = "~";
          $impl.TemporaryBuf[12] = "~";
          $impl.TemporaryBuf[13] = "~";
        };
        if (LDY_1(0) && LDA(1) && SKIP(2) && SKIP(3) && DEY(4) && LAB_A(5) && TYA(6) && ($impl.TemporaryBuf[7] === "\tsta :ecx") && LDA(8) && ($impl.TemporaryBuf[9] === "\tsta :eax") && IFDEF_MUL8(10)) {
          $impl.TemporaryBuf[7] = "\tseq";
          $impl.TemporaryBuf[10] = "\tlda #$00";
          $impl.TemporaryBuf[11] = "\tsta :eax+1";
          $impl.TemporaryBuf[12] = "~";
          $impl.TemporaryBuf[13] = "~";
          $impl.TemporaryBuf[14] = "~";
        };
        if (LDY_1(0) && LDA(1) && CMP(2) && SKIP(3) && DEY(4) && LAB_A(5) && TYA(6) && ($impl.TemporaryBuf[7] === "\tsta :ecx") && LDA(8) && ($impl.TemporaryBuf[9] === "\tsta :eax") && IFDEF_MUL8(10)) {
          $impl.TemporaryBuf[7] = "\tseq";
          $impl.TemporaryBuf[10] = "\tlda #$00";
          $impl.TemporaryBuf[11] = "\tsta :eax+1";
          $impl.TemporaryBuf[12] = "~";
          $impl.TemporaryBuf[13] = "~";
          $impl.TemporaryBuf[14] = "~";
        };
        if (STA_STACK(0) && LDY_1(1) && LDA_STACK(2) && CMP_IM_0(3) && ($impl.TemporaryBuf[4] === "\tbeq @+") && DEY(5) && LAB_A(6) && TYA(7) && ($impl.TemporaryBuf[8] === "\tsta :ecx") && LDA(9) && ($impl.TemporaryBuf[10] === "\tsta :eax") && IFDEF_MUL8(11)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[2],6,256)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[2] = "~";
          $impl.TemporaryBuf[8] = "\tseq";
          $impl.TemporaryBuf[11] = "\tlda #$00";
          $impl.TemporaryBuf[12] = "\tsta :eax+1";
          $impl.TemporaryBuf[13] = "~";
          $impl.TemporaryBuf[14] = "~";
          $impl.TemporaryBuf[15] = "~";
        };
      };
      function opt_TEMP_X() {
        if ((pas.System.Pos("mva :STACKORIGIN,x",$impl.TemporaryBuf[0]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH,x",$impl.TemporaryBuf[1]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH*2,x",$impl.TemporaryBuf[2]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH*3,x",$impl.TemporaryBuf[3]) > 0) && DEX(4) && ($impl.TemporaryBuf[5] === "") && OPTI(6) && ($impl.TemporaryBuf[7] === "") && INX(8) && MVA(9) && (MVA_STACK(9) === false) && MVA(10) && (MVA_STACK(10) === false) && MVA(11) && (MVA_STACK(11) === false) && MVA(12) && (MVA_STACK(12) === false)) if ((pas.System.Pos(":STACKORIGIN,x",$impl.TemporaryBuf[9]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",$impl.TemporaryBuf[10]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",$impl.TemporaryBuf[11]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",$impl.TemporaryBuf[12]) > 0) && ($impl.TemporaryBuf[0] === ("\tmva :STACKORIGIN,x " + GetSTRING(9))) && ($impl.TemporaryBuf[1] === ("\tmva :STACKORIGIN+STACKWIDTH,x " + GetSTRING(10))) && ($impl.TemporaryBuf[2] === ("\tmva :STACKORIGIN+STACKWIDTH*2,x " + GetSTRING(11))) && ($impl.TemporaryBuf[3] === ("\tmva :STACKORIGIN+STACKWIDTH*3,x " + GetSTRING(12)))) {
          $impl.TemporaryBuf[4] = "~";
          $impl.TemporaryBuf[8] = "~";
          $impl.TemporaryBuf[9] = "~";
          $impl.TemporaryBuf[10] = "~";
          $impl.TemporaryBuf[11] = "~";
          $impl.TemporaryBuf[12] = "~";
        };
        if (LDA(0) && STA(1) && LDA(2) && STA(3) && LDA(4) && STA(5) && LDA(6) && STA(7) && ($impl.TemporaryBuf[8] === "") && OPTI(9) && ($impl.TemporaryBuf[10] === "") && INX(11) && ($impl.TemporaryBuf[12] === ("\tmva " + GetSTRING(0) + " :STACKORIGIN,x")) && ($impl.TemporaryBuf[13] === ("\tmva " + GetSTRING(2) + " :STACKORIGIN+STACKWIDTH,x")) && ($impl.TemporaryBuf[14] === ("\tmva " + GetSTRING(4) + " :STACKORIGIN+STACKWIDTH*2,x")) && ($impl.TemporaryBuf[15] === ("\tmva " + GetSTRING(6) + " :STACKORIGIN+STACKWIDTH*3,x"))) {
          $impl.TemporaryBuf[10] = $impl.TemporaryBuf[9];
          $impl.TemporaryBuf[9] = "";
          $impl.TemporaryBuf[8] = $impl.TemporaryBuf[7];
          $impl.TemporaryBuf[7] = $impl.TemporaryBuf[6];
          $impl.TemporaryBuf[6] = $impl.TemporaryBuf[5];
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[4];
          $impl.TemporaryBuf[4] = $impl.TemporaryBuf[3];
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[2];
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[1];
          $impl.TemporaryBuf[1] = $impl.TemporaryBuf[0];
          $impl.TemporaryBuf[0] = $impl.TemporaryBuf[11];
          $impl.TemporaryBuf[1] = $impl.TemporaryBuf[12];
          $impl.TemporaryBuf[3] = $impl.TemporaryBuf[13];
          $impl.TemporaryBuf[5] = $impl.TemporaryBuf[14];
          $impl.TemporaryBuf[7] = $impl.TemporaryBuf[15];
          $impl.TemporaryBuf[11] = "";
          $impl.TemporaryBuf[12] = "~";
          $impl.TemporaryBuf[13] = "~";
          $impl.TemporaryBuf[14] = "~";
          $impl.TemporaryBuf[15] = "~";
        };
        if ((pas.System.Pos("mva :STACKORIGIN,x",$impl.TemporaryBuf[0]) > 0) && (pas.System.Pos("mva :STACKORIGIN+STACKWIDTH,x",$impl.TemporaryBuf[1]) > 0) && DEX(2) && ($impl.TemporaryBuf[3] === "") && OPTI(4) && ($impl.TemporaryBuf[5] === "") && INX(6) && MVA(7) && (MVA_STACK(7) === false) && MVA(8) && (MVA_STACK(8) === false)) if ((pas.System.Pos(":STACKORIGIN,x",$impl.TemporaryBuf[7]) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",$impl.TemporaryBuf[8]) > 0) && ($impl.TemporaryBuf[0] === ("\tmva :STACKORIGIN,x " + GetSTRING(7))) && ($impl.TemporaryBuf[1] === ("\tmva :STACKORIGIN+STACKWIDTH,x " + GetSTRING(8)))) {
          $impl.TemporaryBuf[2] = "~";
          $impl.TemporaryBuf[6] = "~";
          $impl.TemporaryBuf[7] = "~";
          $impl.TemporaryBuf[8] = "~";
        };
        if (DEX(0) && DEX(1) && ($impl.TemporaryBuf[2] === "") && OPTI(3) && ($impl.TemporaryBuf[4] === "") && INX(5) && INX(6) && (INX(7) === false)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[5] = "~";
          $impl.TemporaryBuf[6] = "~";
        };
        if (DEX(0) && ($impl.TemporaryBuf[1] === "") && OPTI(2) && ($impl.TemporaryBuf[3] === "") && INX(4) && (INX(5) === false)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[4] = "~";
        };
        if (DEX(0) && INX(1)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
        };
        if (INX(0) && DEX(1)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
        };
      };
      function opt_TEMP_EAX() {
        if (($impl.TemporaryBuf[0] === "\tlda :eax") && (($impl.TemporaryBuf[1] === "\tsta @BYTE.MOD.A") || ($impl.TemporaryBuf[1] === "\tsta @WORD.MOD.A") || ($impl.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A") || ($impl.TemporaryBuf[1] === "\tsta @SHORTINT.MOD.A") || ($impl.TemporaryBuf[1] === "\tsta @SMALLINT.MOD.A") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A") || ($impl.TemporaryBuf[1] === "\tsta @BYTE.DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @WORD.DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @SHORTINT.DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @SMALLINT.DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @SHORTREAL_DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @REAL_DIV.A") || ($impl.TemporaryBuf[1] === "\tsta @SHORTREAL_MUL.A") || ($impl.TemporaryBuf[1] === "\tsta @REAL_MUL.A") || ($impl.TemporaryBuf[1] === "\tsta @REAL_FRAC.A") || ($impl.TemporaryBuf[1] === "\tsta @REAL_ROUND.A") || ($impl.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A") || ($impl.TemporaryBuf[1] === "\tsta @SHORTREAL_TRUNC.A") || ($impl.TemporaryBuf[1] === "\tsta @F16_I2F.SV"))) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tlda :eax+1") && (($impl.TemporaryBuf[1] === "\tsta @WORD.MOD.A+1") || ($impl.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A+1") || ($impl.TemporaryBuf[1] === "\tsta @SMALLINT.MOD.A+1") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A+1") || ($impl.TemporaryBuf[1] === "\tsta @WORD.DIV.A+1") || ($impl.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A+1") || ($impl.TemporaryBuf[1] === "\tsta @SMALLINT.DIV.A+1") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A+1") || ($impl.TemporaryBuf[1] === "\tsta @SHORTREAL_DIV.A+1") || ($impl.TemporaryBuf[1] === "\tsta @REAL_DIV.A+1") || ($impl.TemporaryBuf[1] === "\tsta @SHORTREAL_MUL.A+1") || ($impl.TemporaryBuf[1] === "\tsta @REAL_MUL.A+1") || ($impl.TemporaryBuf[1] === "\tsta @REAL_FRAC.A+1") || ($impl.TemporaryBuf[1] === "\tsta @REAL_ROUND.A+1") || ($impl.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A+1") || ($impl.TemporaryBuf[1] === "\tsta @SHORTREAL_TRUNC.A+1") || ($impl.TemporaryBuf[1] === "\tsta @F16_I2F.SV+1"))) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tlda :eax+2") && (($impl.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A+2") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A+2") || ($impl.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A+2") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A+2") || ($impl.TemporaryBuf[1] === "\tsta @REAL_DIV.A+2") || ($impl.TemporaryBuf[1] === "\tsta @REAL_MUL.A+2") || ($impl.TemporaryBuf[1] === "\tsta @REAL_FRAC.A+2") || ($impl.TemporaryBuf[1] === "\tsta @REAL_ROUND.A+2") || ($impl.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A+2") || ($impl.TemporaryBuf[1] === "\tsta @F16_I2F.SV+2"))) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tlda :eax+3") && (($impl.TemporaryBuf[1] === "\tsta @CARDINAL.MOD.A+3") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.MOD.A+3") || ($impl.TemporaryBuf[1] === "\tsta @CARDINAL.DIV.A+3") || ($impl.TemporaryBuf[1] === "\tsta @INTEGER.DIV.A+3") || ($impl.TemporaryBuf[1] === "\tsta @REAL_DIV.A+3") || ($impl.TemporaryBuf[1] === "\tsta @REAL_MUL.A+3") || ($impl.TemporaryBuf[1] === "\tsta @REAL_FRAC.A+3") || ($impl.TemporaryBuf[1] === "\tsta @REAL_ROUND.A+3") || ($impl.TemporaryBuf[1] === "\tsta @REAL_TRUNC.A+3") || ($impl.TemporaryBuf[1] === "\tsta @F16_I2F.SV+3"))) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
        };
      };
      function opt_TEMP_JMP() {
        if (STA(0) && ($impl.TemporaryBuf[1] === "") && JMP(2) && LAB_L(3) && ($impl.TemporaryBuf[4] === "") && OPTI(5) && ($impl.TemporaryBuf[6] === "") && LDA(7)) if (($impl.TemporaryBuf[3] === pas.System.Copy($impl.TemporaryBuf[2],6,256)) && (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[7],6,256))) {
          $impl.TemporaryBuf[2] = "~";
          $impl.TemporaryBuf[3] = "~";
          $impl.TemporaryBuf[7] = "~";
        };
        if (JNE_L(0) && ($impl.TemporaryBuf[1] === "\tjmp @exit") && (pas.System.Pos($impl.TemporaryBuf[2],$impl.TemporaryBuf[0]) > 0) && (IFTMP(3) === false)) {
          $impl.TemporaryBuf[0] = "\tjeq @exit";
          $impl.TemporaryBuf[1] = "~";
        };
        if ((pas.System.Pos("lda #$",$impl.TemporaryBuf[0]) > 0) && (LDA_IM_0(0) === false) && JEQ_L(1) && JMP(2) && (pas.System.Pos($impl.TemporaryBuf[3],$impl.TemporaryBuf[1]) > 0)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[3] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tjmp @exit") && ($impl.TemporaryBuf[1] === "@exit")) {
          $impl.TemporaryBuf[0] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tjmp @exit") && (pas.System.Pos("jmp a_",$impl.TemporaryBuf[1]) > 0)) {
          $impl.TemporaryBuf[1] = "~";
        };
        if (($impl.TemporaryBuf[0] === "\tjmp @+") && JMP(1) && ($impl.TemporaryBuf[2] === "@")) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && JMP(1) && ($impl.TemporaryBuf[2] === pas.System.Copy($impl.TemporaryBuf[1],6,256)) && (IFTMP(3) === false)) {
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[2] = "~";
        };
        if ((SKIP(0) === false) && JMP(1) && LAB_L(2) && ($impl.TemporaryBuf[3] === pas.System.Copy($impl.TemporaryBuf[1],6,256)) && (IFTMP(4) === false)) {
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[3] = "~";
        };
        if ((SKIP(0) === false) && (pas.System.Pos("jmp a_",$impl.TemporaryBuf[1]) > 0) && LAB_L(2) && ($impl.TemporaryBuf[3] === pas.System.Copy($impl.TemporaryBuf[1],6,256))) {
          $impl.TemporaryBuf[1] = "~";
        };
        if ((SKIP(0) === false) && (pas.System.Pos("jmp a_",$impl.TemporaryBuf[1]) > 0) && ($impl.TemporaryBuf[2] === "~") && LAB_L(3) && ($impl.TemporaryBuf[4] === pas.System.Copy($impl.TemporaryBuf[1],6,256))) {
          $impl.TemporaryBuf[1] = "~";
        };
      };
      function opt_TEMP_ZTMP() {
        if (($impl.TemporaryBuf[0] === "\tlda :ztmp10") && ($impl.TemporaryBuf[1] === "\tbpl @+") && ($impl.TemporaryBuf[2] === "\tlda :eax+1") && ($impl.TemporaryBuf[3] === "\tsub :ztmp8") && ($impl.TemporaryBuf[4] === "\tsta :eax+1") && LAB_A(5) && ($impl.TemporaryBuf[6] === "\tlda :ztmp8") && ($impl.TemporaryBuf[7] === "\tbpl @+") && ($impl.TemporaryBuf[8] === "\tlda :eax+1") && ($impl.TemporaryBuf[9] === "\tsub :ztmp10") && ($impl.TemporaryBuf[10] === "\tsta :eax+1") && LAB_A(11)) {
          $impl.TemporaryBuf[0] = "~";
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[2] = "\tbit :ztmp10";
          $impl.TemporaryBuf[3] = "\tbpl @+";
          $impl.TemporaryBuf[4] = "\tsub :ztmp8";
          $impl.TemporaryBuf[5] = "@";
          $impl.TemporaryBuf[6] = "\tbit :ztmp8";
          $impl.TemporaryBuf[7] = "\tbpl @+";
          $impl.TemporaryBuf[8] = "\tsub :ztmp10";
          $impl.TemporaryBuf[9] = "@";
          $impl.TemporaryBuf[11] = "~";
          if ($impl.TemporaryBuf[12] === "\tlda :eax+1") {
            $impl.TemporaryBuf[10] = "~";
            $impl.TemporaryBuf[12] = "~";
          } else $impl.TemporaryBuf[10] = "\tsta :eax+1";
        };
      };
      function opt_TEMP_UNROLL() {
        var p = 0;
        if ((($impl.TemporaryBuf[3] === "+++unroll+++") || ($impl.TemporaryBuf[3] === "---unroll---")) && LDY_IM(4) && STY(5) && LDY(0) && LDA(1) && STA_ADR(2)) if (pas.System.Copy($impl.TemporaryBuf[0],6,256) === pas.System.Copy($impl.TemporaryBuf[5],6,256)) {
          if ($impl.TemporaryBuf[3] === "+++unroll+++") {
            p = rtl.rc(GetBYTE(4) - 1,-2147483648,2147483647)}
           else p = rtl.rc(GetBYTE(4) + 1,-2147483648,2147483647);
          pas.System.Delete({a: 2, p: $impl.TemporaryBuf, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",$impl.TemporaryBuf[2]),2);
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[2] + "+$" + pas.SysUtils.IntToHex(p,2);
          $impl.TemporaryBuf[0] = "~";
        };
        if ((($impl.TemporaryBuf[3] === "+++unroll+++") || ($impl.TemporaryBuf[3] === "---unroll---")) && LDY_IM(4) && STY(5) && LDA(0) && LDY(1) && STA_ADR(2)) if (pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[5],6,256)) {
          if ($impl.TemporaryBuf[3] === "+++unroll+++") {
            p = rtl.rc(GetBYTE(4) - 1,-2147483648,2147483647)}
           else p = rtl.rc(GetBYTE(4) + 1,-2147483648,2147483647);
          pas.System.Delete({a: 2, p: $impl.TemporaryBuf, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",$impl.TemporaryBuf[2]),2);
          $impl.TemporaryBuf[2] = $impl.TemporaryBuf[2] + "+$" + pas.SysUtils.IntToHex(p,2);
          $impl.TemporaryBuf[1] = "~";
        };
        if ((($impl.TemporaryBuf[5] === "+++unroll+++") || ($impl.TemporaryBuf[5] === "---unroll---")) && LDY_IM(6) && STY(7) && LDA(0) && ADD_SUB(1) && TAY(2) && LDA(3) && STA_ADR(4)) if (pas.System.Copy($impl.TemporaryBuf[1],6,256) === pas.System.Copy($impl.TemporaryBuf[7],6,256)) {
          if ($impl.TemporaryBuf[5] === "+++unroll+++") {
            p = rtl.rc(GetBYTE(6) - 1,-2147483648,2147483647)}
           else p = rtl.rc(GetBYTE(6) + 1,-2147483648,2147483647);
          pas.System.Delete({a: 4, p: $impl.TemporaryBuf, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",$impl.TemporaryBuf[4]),2);
          $impl.TemporaryBuf[4] = $impl.TemporaryBuf[4] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
          $impl.TemporaryBuf[0] = "\tldy " + pas.System.Copy($impl.TemporaryBuf[0],6,256);
          $impl.TemporaryBuf[1] = "~";
          $impl.TemporaryBuf[2] = "~";
        };
        if (($impl.TemporaryBuf[0] === "---unroll---") || ($impl.TemporaryBuf[0] === "+++unroll+++") || ($impl.TemporaryBuf[0] === "===unroll===")) {
          $impl.TemporaryBuf[0] = "~";
          if (LDY_IM(1) && STY(2) && LDY(3) && LDA(4) && STA_ADR(5) && ($impl.TemporaryBuf[6] === "===unroll===")) if (pas.System.Copy($impl.TemporaryBuf[2],6,256) === pas.System.Copy($impl.TemporaryBuf[3],6,256)) {
            p = rtl.rc(GetBYTE(1),-2147483648,2147483647);
            pas.System.Delete({a: 5, p: $impl.TemporaryBuf, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",$impl.TemporaryBuf[5]),2);
            $impl.TemporaryBuf[5] = $impl.TemporaryBuf[5] + "+$" + pas.SysUtils.IntToHex(p,2);
            $impl.TemporaryBuf[1] = "~";
            $impl.TemporaryBuf[2] = "~";
            $impl.TemporaryBuf[3] = "~";
            $impl.TemporaryBuf[4] = "~";
          };
          if (LDY_IM(1) && STY(2) && LDA(3) && LDY(4) && STA_ADR(5) && ($impl.TemporaryBuf[6] === "===unroll===")) if (pas.System.Copy($impl.TemporaryBuf[2],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
            p = rtl.rc(GetBYTE(1),-2147483648,2147483647);
            pas.System.Delete({a: 5, p: $impl.TemporaryBuf, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",$impl.TemporaryBuf[5]),2);
            $impl.TemporaryBuf[5] = $impl.TemporaryBuf[5] + "+$" + pas.SysUtils.IntToHex(p,2);
            $impl.TemporaryBuf[1] = "~";
            $impl.TemporaryBuf[2] = "~";
            $impl.TemporaryBuf[3] = "~";
            $impl.TemporaryBuf[4] = "~";
          };
          if (LDY_IM(1) && STY(2) && LDA(3) && ADD_SUB(4) && TAY(5) && LDA(6) && STA_ADR(7) && ($impl.TemporaryBuf[8] === "===unroll===")) if (pas.System.Copy($impl.TemporaryBuf[2],6,256) === pas.System.Copy($impl.TemporaryBuf[4],6,256)) {
            p = rtl.rc(GetBYTE(1),-2147483648,2147483647);
            pas.System.Delete({a: 7, p: $impl.TemporaryBuf, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",$impl.TemporaryBuf[7]),2);
            $impl.TemporaryBuf[7] = $impl.TemporaryBuf[7] + "+$" + pas.SysUtils.IntToHex(p,2) + ",y";
            $impl.TemporaryBuf[1] = "~";
            $impl.TemporaryBuf[2] = "~";
            $impl.TemporaryBuf[3] = "~";
            $impl.TemporaryBuf[4] = "~";
            $impl.TemporaryBuf[5] = "~";
            $impl.TemporaryBuf[6] = "~";
          };
        };
      };
      function opt_TEMP_BOOLEAN_OR() {
        var i = 0;
        var p = 0;
        var yes = false;
        var tmp = "";
        function branch(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbne @+") || (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbeq @+") || (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbcc @+") || (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbcs @+");
          return Result;
        };
        function branch_swap(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = "";
          Result = "";
          if (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbeq @+") {
            Result = "\tsne"}
           else if (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbne @+") {
            Result = "\tseq"}
           else if (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbcc @+") {
            Result = "\tscs"}
           else if (rtl.rcArrR($impl.TemporaryBuf,i) === "\tbcs @+") Result = "\tscc";
          return Result;
        };
        if (LDY_1(0) && LDA(1) && CMP(2) && branch(3) && DEY(4) && LAB_A(5) && STY_STACK(6)) {
          p = 7;
          yes = false;
          tmp = "\tora " + pas.System.Copy($impl.TemporaryBuf[6],6,256);
          while ((p < 512) && LDY_1(p) && LDA(p + 1) && CMP(p + 2) && branch(p + 3) && DEY(p + 4) && LAB_A(p + 5) && TYA(p + 6) && (rtl.rcArrR($impl.TemporaryBuf,p + 7) === tmp) && STA(p + 8)) {
            p += 9;
            yes = true;
          };
          if (yes) {
            i = rtl.rc(p - 1,-2147483648,2147483647);
            tmp = rtl.rcArrR($impl.TemporaryBuf,p - 1);
            $impl.TemporaryBuf[0] = "~";
            $impl.TemporaryBuf[3] = branch_swap(3);
            $impl.TemporaryBuf[4] = "\tjmp @+";
            $impl.TemporaryBuf[5] = "~";
            $impl.TemporaryBuf[6] = "~";
            p -= 9;
            while (p >= 7) {
              rtl.rcArrW($impl.TemporaryBuf,p,"~");
              rtl.rcArrW($impl.TemporaryBuf,p + 3,branch_swap(p + 3));
              rtl.rcArrW($impl.TemporaryBuf,p + 4,"\tjmp @+");
              rtl.rcArrW($impl.TemporaryBuf,p + 5,"~");
              rtl.rcArrW($impl.TemporaryBuf,p + 6,"~");
              rtl.rcArrW($impl.TemporaryBuf,p + 7,"~");
              rtl.rcArrW($impl.TemporaryBuf,p + 8,"~");
              p -= 9;
            };
            rtl.rcArrW($impl.TemporaryBuf,i - 2,"\tlda:seq #$00");
            rtl.rcArrW($impl.TemporaryBuf,i - 1,"@\tlda #$01");
            rtl.rcArrW($impl.TemporaryBuf,i,tmp);
          };
        };
      };
      opt_TEMP_BOOLEAN_OR();
      opt_TEMP_ORD();
      opt_TEMP_CMP();
      opt_TEMP_CMP_0();
      opt_TEMP();
      opt_TEMP_IMUL_CX();
      opt_TEMP_WHILE();
      opt_TEMP_FORDEC();
      opt_TEMP_FOR();
      opt_TEMP_X();
      opt_TEMP_EAX();
      opt_TEMP_JMP();
      opt_TEMP_ZTMP();
      opt_TEMP_UNROLL();
      if ((pas.System.Pos('@move ":bp2" ',$impl.TemporaryBuf[4]) > 1) && LDA(0) && STA_BP2(1) && ($impl.TemporaryBuf[2] === ($impl.TemporaryBuf[0] + "+1")) && STA_BP2_1(3)) {
        $impl.TemporaryBuf[4] = "\t@move " + GetSTRING(0) + " " + pas.System.Copy($impl.TemporaryBuf[4],15,256);
        $impl.TemporaryBuf[0] = "~";
        $impl.TemporaryBuf[1] = "~";
        $impl.TemporaryBuf[2] = "~";
        $impl.TemporaryBuf[3] = "~";
      };
      if ((pas.System.Pos("mva:rpl (:bp2),y ",$impl.TemporaryBuf[5]) > 1) && LDA_IM(0) && STA_BP2(1) && LDA_IM(2) && STA_BP2_1(3) && LDY_IM(4)) {
        p = rtl.rc(GetWORD(0,2),-2147483648,2147483647);
        $impl.TemporaryBuf[0] = "~";
        $impl.TemporaryBuf[1] = "~";
        $impl.TemporaryBuf[2] = "~";
        $impl.TemporaryBuf[3] = "~";
        $impl.TemporaryBuf[5] = "\tmva:rpl $" + pas.SysUtils.IntToHex(p,4) + ",y " + pas.System.Copy($impl.TemporaryBuf[5],19,256);
      };
      if ((pas.System.Pos("mva:rne (:bp2),y ",$impl.TemporaryBuf[5]) > 1) && LDA_IM(0) && STA_BP2(1) && LDA_IM(2) && STA_BP2_1(3) && LDY_IM(4)) {
        p = rtl.rc(GetWORD(0,2),-2147483648,2147483647);
        $impl.TemporaryBuf[0] = "~";
        $impl.TemporaryBuf[1] = "~";
        $impl.TemporaryBuf[2] = "~";
        $impl.TemporaryBuf[3] = "~";
        $impl.TemporaryBuf[5] = "\tmva:rne $" + pas.SysUtils.IntToHex(p,4) + ",y " + pas.System.Copy($impl.TemporaryBuf[5],19,256);
      };
      if (($impl.TemporaryBuf[0] === "\tjsr #$00") && ($impl.TemporaryBuf[1] === "\tlda @BYTE.MOD.RESULT")) {
        $impl.TemporaryBuf[0] = "~";
        $impl.TemporaryBuf[1] = "~";
      };
      if (($impl.TemporaryBuf[0] === "\tjsr #$00") && ($impl.TemporaryBuf[1] === "\tldy @BYTE.MOD.RESULT")) {
        $impl.TemporaryBuf[0] = "\ttay";
        $impl.TemporaryBuf[1] = "~";
      };
      if (($impl.TemporaryBuf[0] === "\tlda :STACKORIGIN,x") && STA(1) && ($impl.TemporaryBuf[2] === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(3) && DEX(4) && ($impl.TemporaryBuf[5] === ":move")) {
        tmp = $impl.TemporaryBuf[6];
        p = rtl.rc(pas.StringUtilities.StrToInt($impl.TemporaryBuf[7]),-2147483648,2147483647);
        if (p === 256) {
          $impl.TemporaryBuf[1] = "\tsta :bp2";
          $impl.TemporaryBuf[3] = "\tsta :bp2+1";
          $impl.TemporaryBuf[4] = "\tldy #$00";
          $impl.TemporaryBuf[5] = "\tmva:rne (:bp2),y adr." + tmp + ",y+";
        } else if (p <= 128) {
          $impl.TemporaryBuf[1] = "\tsta :bp2";
          $impl.TemporaryBuf[3] = "\tsta :bp2+1";
          $impl.TemporaryBuf[4] = "\tldy #$" + pas.SysUtils.IntToHex(p - 1,2);
          $impl.TemporaryBuf[5] = "\tmva:rpl (:bp2),y adr." + tmp + ",y-";
        } else {
          $impl.TemporaryBuf[4] = "\t@move " + tmp + " #adr." + tmp + " #$" + pas.SysUtils.IntToHex(p,2);
          $impl.TemporaryBuf[5] = "~";
        };
        $impl.TemporaryBuf[6] = "~";
        $impl.TemporaryBuf[7] = "\tdex";
      };
      opt_TEMP_MOVE();
      opt_TEMP_FILL();
      opt_TEMP_IFTMP();
      opt_TEMP_TAIL_IF();
      opt_TEMP_TAIL_CASE();
      if (pas.SysUtils.TStringHelper.IndexOf$1.call({a: 0, p: $impl.TemporaryBuf, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }},"#asm:") === 0) {
        pas.Common.OutFile.WriteLn$1(rtl.rcArrR(pas.Common.AsmBlock,pas.StringUtilities.StrToInt(pas.System.Copy($impl.TemporaryBuf[0],6,256))));
        $impl.TemporaryBuf[0] = "~";
      };
      if (pas.SysUtils.TStringHelper.IndexOf$1.call({a: 0, p: $impl.TemporaryBuf, get: function () {
          return this.p[this.a];
        }, set: function (v) {
          this.p[this.a] = v;
        }},"#lib:") === 0) $impl.TemporaryBuf[0] = "\tm@lib " + pas.System.Copy($impl.TemporaryBuf[0],6,256);
      if ($impl.TemporaryBuf[0] === "\tsta @PARAM?") $impl.TemporaryBuf[0] = "~";
      if ($impl.TemporaryBuf[0] === "\tsty @PARAM?") $impl.TemporaryBuf[0] = "\ttya";
      if (pas.System.Pos("@FORTMP_",$impl.TemporaryBuf[0]) > 1) if (LDA(0)) {
        if (pas.System.Pos("::#$00",$impl.TemporaryBuf[0]) === 0) $impl.TemporaryBuf[0] = "\tlda " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (CMP(0)) {
        if (pas.System.Pos("::#$00",$impl.TemporaryBuf[0]) === 0) $impl.TemporaryBuf[0] = "\tcmp " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (SUB(0)) {
        if (pas.System.Pos("::#$00",$impl.TemporaryBuf[0]) === 0) $impl.TemporaryBuf[0] = "\tsub " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (SBC(0)) {
        if (pas.System.Pos("::#$00",$impl.TemporaryBuf[0]) === 0) $impl.TemporaryBuf[0] = "\tsbc " + fortmp(GetSTRING(0)) + "::#$00";
      } else if (STA(0)) {
        $impl.TemporaryBuf[0] = "\tsta " + fortmp(GetSTRING(0))}
       else if (STY(0)) {
        $impl.TemporaryBuf[0] = "\tsty " + fortmp(GetSTRING(0))}
       else if (MVA(0) && (pas.System.Pos("mva @FORTMP_",$impl.TemporaryBuf[0]) === 0)) {
        tmp = pas.System.Copy($impl.TemporaryBuf[0],pas.System.Pos("@FORTMP_",$impl.TemporaryBuf[0]),256);
        $impl.TemporaryBuf[0] = pas.System.Copy($impl.TemporaryBuf[0],1,pas.System.Pos(" @FORTMP_",$impl.TemporaryBuf[0])) + fortmp(tmp);
      } else pas.System.Writeln("Unassigned: " + $impl.TemporaryBuf[0]);
    };
    $impl.ElfHash = function (Value) {
      var Result = 0;
      var x = 0;
      var i = 0;
      Result = 0;
      for (var $l = 1, $end = Value.length; $l <= $end; $l++) {
        i = $l;
        Result = rtl.rc(rtl.lw(Result << 4) + Value.charCodeAt(i - 1),0,4294967295);
        x = rtl.rc(rtl.lw(Result & 0xF0000000),0,4294967295);
        if (x !== 0) Result = rtl.rc(rtl.lw(Result ^ rtl.lw(x >>> 24)),0,4294967295);
        Result = rtl.rc(rtl.lw(Result & rtl.lw(~x)),0,4294967295);
      };
      return Result;
    };
    var s$a$clone = function (a) {
      var b = [];
      b.length = 16;
      for (var c = 0; c < 16; c++) b[c] = a[c].slice(0);
      return b;
    };
    var last_i = 7;
    var last_i_plus_one = 7 + 1;
    var min_j = 0;
    var last_j = 3;
    var cnt_s$a$clone = function (a) {
      var b = [];
      b.length = 9;
      for (var c = 0; c < 9; c++) b[c] = a[c].slice(0);
      return b;
    };
    $impl.OptimizeASM = function () {
      var inxUse = false;
      var found = false;
      var i = 0;
      var l = 0;
      var k = 0;
      var m = 0;
      var x = 0;
      var elf = 0;
      var listing = rtl.arraySetLength(null,"",1024);
      var listing_tmp = rtl.arraySetLength(null,"",128);
      var a = "";
      var t = "";
      var arg0 = "";
      var s = rtl.arraySetLength(null,"",16,4);
      function GetBYTE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = 0;
        Result = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,4)),-2147483648,2147483647);
        return Result;
      };
      function GetWORD(i, j) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(j,-2147483648,2147483647);
        var Result = 0;
        Result = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,4)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,j),6,4)) << 8),-2147483648,2147483647);
        return Result;
      };
      function GetDWORD(i, j, k, l) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(j,-2147483648,2147483647);
        rtl.rc(k,-2147483648,2147483647);
        rtl.rc(l,-2147483648,2147483647);
        var Result = 0;
        var w1 = 0;
        var w2 = 0;
        w1 = rtl.rc(GetWORD(i,j),0,4294967295);
        w2 = rtl.rc(GetWORD(k,l),0,4294967295);
        Result = rtl.rc(w1 + rtl.lw(w2 << 16),0,4294967295);
        return Result;
      };
      function DATA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("-DATAORIGIN",rtl.rcArrR(listing,i)) > 0;
        return Result;
      };
      function TAY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\ttay";
        return Result;
      };
      function TYA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\ttya";
        return Result;
      };
      function INY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tiny";
        return Result;
      };
      function DEY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tdey";
        return Result;
      };
      function INX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tinx";
        return Result;
      };
      function DEX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tdex";
        return Result;
      };
      function AND_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tand (:bp),y";
        return Result;
      };
      function ORA_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tora (:bp),y";
        return Result;
      };
      function EOR_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\teor (:bp),y";
        return Result;
      };
      function LDA_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda (:bp),y";
        return Result;
      };
      function CMP_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tcmp (:bp),y";
        return Result;
      };
      function CMP_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tcmp (:bp2),y";
        return Result;
      };
      function STA_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta (:bp),y";
        return Result;
      };
      function STA_BP_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :bp+1";
        return Result;
      };
      function INC_BP_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tinc :bp+1";
        return Result;
      };
      function STY_BP_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsty :bp+1";
        return Result;
      };
      function LDA_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda (:bp2),y";
        return Result;
      };
      function LDA_BP2(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda :bp2";
        return Result;
      };
      function LDA_BP2_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda :bp2+1";
        return Result;
      };
      function STA_TMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :TMP";
        return Result;
      };
      function STA_TMP_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :TMP+1";
        return Result;
      };
      function STA_BP2(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :bp2";
        return Result;
      };
      function STA_BP2_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :bp2+1";
        return Result;
      };
      function STA_BP2_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tsta :bp2") || (rtl.rcArrR(listing,i) === "\tsta :bp2+1");
        return Result;
      };
      function INC_BP2_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tinc :bp2+1";
        return Result;
      };
      function STA_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta (:bp2),y";
        return Result;
      };
      function ADD_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadd (:bp),y";
        return Result;
      };
      function SUB_BP_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsub (:bp),y";
        return Result;
      };
      function ADD_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadd (:bp2),y";
        return Result;
      };
      function SUB_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsub (:bp2),y";
        return Result;
      };
      function ADC_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadc (:bp2),y";
        return Result;
      };
      function SBC_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsbc (:bp2),y";
        return Result;
      };
      function LDA_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda #$00";
        return Result;
      };
      function ADD_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadd #$00";
        return Result;
      };
      function SUB_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsub #$00";
        return Result;
      };
      function ADC_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadc #$00";
        return Result;
      };
      function CMP_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tcmp #$00";
        return Result;
      };
      function SBC_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsbc #$00";
        return Result;
      };
      function ADC_SBC_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tadc #$00") || (rtl.rcArrR(listing,i) === "\tsbc #$00");
        return Result;
      };
      function LDY_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tldy #$00";
        return Result;
      };
      function AND_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tand #$00";
        return Result;
      };
      function ORA_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tora #$00";
        return Result;
      };
      function EOR_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\teor #$00";
        return Result;
      };
      function ROR_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tror @";
        return Result;
      };
      function ROL_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\trol @";
        return Result;
      };
      function LSR_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlsr @";
        return Result;
      };
      function ASL_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tasl @";
        return Result;
      };
      function LDY_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tldy #1";
        return Result;
      };
      function LDA_EAX_X(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda :eax",rtl.rcArrR(listing,i)) > 0;
        return Result;
      };
      function LDA_EAX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda :eax";
        return Result;
      };
      function LDA_EAX_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda :eax+1";
        return Result;
      };
      function LDA_EAX_2(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda :eax+2";
        return Result;
      };
      function LDA_EAX_3(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tlda :eax+3";
        return Result;
      };
      function STA_EAX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :eax";
        return Result;
      };
      function STA_EAX_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :eax+1";
        return Result;
      };
      function STA_ECX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :ecx";
        return Result;
      };
      function STA_ECX_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta :ecx+1";
        return Result;
      };
      function ADD_EAX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadd :eax";
        return Result;
      };
      function ADC_EAX_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tadc :eax+1";
        return Result;
      };
      function SUB_EAX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsub :eax";
        return Result;
      };
      function SBC_EAX_1(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsbc :eax+1";
        return Result;
      };
      function STA_im_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsta #$00";
        return Result;
      };
      function STY_im_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsty #$00";
        return Result;
      };
      function LAB_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "@";
        return Result;
      };
      function IX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos(",x",rtl.rcArrR(listing,i)) > 0;
        return Result;
      };
      function IY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos(",y",rtl.rcArrR(listing,i)) > 0;
        return Result;
      };
      function CMP_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tcmp #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDY_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tldy #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tldy ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDY_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tldy :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDY_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tldy ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tldy :STACK",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function STY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if (rtl.rcArrR(listing,i) === "\tsty #$00") return false;
        Result = pas.System.Pos("\tsty ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function STY_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsty :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ROR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tror ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ROR_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tror :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LSR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlsr ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LSR_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlsr :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ROL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\trol ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ROL_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\trol :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ASL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tasl ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ASL_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tasl :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function CMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tcmp ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function CMP_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tcmp :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function CMP_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tcmp ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tcmp :STACK",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function MWA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmwa ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MWY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmwy ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MVY(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmvy ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MVY_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmvy #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MVA_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tmva ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(",y",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function MVA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MVA_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MVA_IM_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva #$00",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function MVA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tmva :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ORA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tora ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function AND_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tand #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDA_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDA_ADR_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if (pas.System.Pos(",y",rtl.rcArrR(listing,i)) > 0) {
          Result = (pas.System.Pos("\tlda adr.",rtl.rcArrR(listing,i)) === 1) || ((pas.System.Pos("\tlda ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(".adr.",rtl.rcArrR(listing,i)) > 0))}
         else Result = false;
        return Result;
      };
      function LDA_ADR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tlda adr.",rtl.rcArrR(listing,i)) === 1) || ((pas.System.Pos("\tlda ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(".adr.",rtl.rcArrR(listing,i)) > 0));
        return Result;
      };
      function LDA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tlda ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tlda adr.",rtl.rcArrR(listing,i)) === 0) && (pas.System.Pos(".adr.",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function LDA_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tlda ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tlda :STACK",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function LDA_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tlda ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LDA_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tlda ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(",y",rtl.rcArrR(listing,i)) > 0);
        return Result;
      };
      function STA_ADR_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if (pas.System.Pos(",y",rtl.rcArrR(listing,i)) > 0) {
          Result = (pas.System.Pos("\tsta adr.",rtl.rcArrR(listing,i)) === 1) || ((pas.System.Pos("\tsta ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(".adr.",rtl.rcArrR(listing,i)) > 0))}
         else Result = false;
        return Result;
      };
      function STA_ADR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tsta adr.",rtl.rcArrR(listing,i)) === 1) || ((pas.System.Pos("\tsta ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(".adr.",rtl.rcArrR(listing,i)) > 0));
        return Result;
      };
      function STA(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if (rtl.rcArrR(listing,i) === "\tsta #$00") return false;
        Result = (pas.System.Pos("\tsta ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tsta adr.",rtl.rcArrR(listing,i)) === 0) && (pas.System.Pos(".adr.",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function STA_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if (rtl.rcArrR(listing,i) === "\tsta #$00") return false;
        Result = pas.System.Pos("\tsta ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function STA_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if (rtl.rcArrR(listing,i) === "\tsta #$00") return false;
        Result = (pas.System.Pos("\tsta ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tsta :STACK",rtl.rcArrR(listing,i)) === 0);
        return Result;
      };
      function STA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsta :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function INC_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tinc :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function INC_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tinc ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function DEC_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tdec ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjmp l_",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LAB_L(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("l_",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LAB_B(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("b_",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function LAB_C(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("c_",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADD(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadd ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADD_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadd #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadc ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADC_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadc #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADD_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadd :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADC_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tadc :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADD_SUB_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadd :STACK",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tsub :STACK",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function ADC_SBC_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadc :STACK",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tsbc :STACK",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function SUB(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsub ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function SUB_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsub #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function SBC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsbc ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function SBC_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsbc #",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function SUB_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsub :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function SBC_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tsbc :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ADC_SBC_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadc #",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tsbc #",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function ADD_SUB_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadd #",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tsub #",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function ADD_SUB(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadd ",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tsub ",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function ADD_SUB_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = ((pas.System.Pos("\tadd ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tadd :STACK",rtl.rcArrR(listing,i)) === 0)) || ((pas.System.Pos("\tsub ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tsub :STACK",rtl.rcArrR(listing,i)) === 0));
        return Result;
      };
      function ADC_SBC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tadc ",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tsbc ",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function ADC_SBC_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = ((pas.System.Pos("\tadc ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tadc :STACK",rtl.rcArrR(listing,i)) === 0)) || ((pas.System.Pos("\tsbc ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tsbc :STACK",rtl.rcArrR(listing,i)) === 0));
        return Result;
      };
      function EOR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\teor ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function AND_(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tand ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function AND_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tand :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function ORA_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tora :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function EOR_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\teor :STACK",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function AND_ORA_EOR_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = AND_STACK(i) || ORA_STACK(i) || EOR_STACK(i);
        return Result;
      };
      function AND_ORA_EOR_IM(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tand #",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tora #",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\teor #",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function AND_ORA_EOR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tand ",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\tora ",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("\teor ",rtl.rcArrR(listing,i)) === 1);
        return Result;
      };
      function AND_ORA_EOR_VAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = ((pas.System.Pos("\tand ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tand :STACK",rtl.rcArrR(listing,i)) === 0)) || ((pas.System.Pos("\tora ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\tora :STACK",rtl.rcArrR(listing,i)) === 0)) || ((pas.System.Pos("\teor ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos("\teor :STACK",rtl.rcArrR(listing,i)) === 0));
        return Result;
      };
      function AND_ORA_EOR_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tand (:bp2),y") || (rtl.rcArrR(listing,i) === "\tora (:bp2),y") || (rtl.rcArrR(listing,i) === "\teor (:bp2),y");
        return Result;
      };
      function ADD_SUB_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tadd (:bp2),y") || (rtl.rcArrR(listing,i) === "\tsub (:bp2),y");
        return Result;
      };
      function ADC_SBC_BP2_Y(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tadc (:bp2),y") || (rtl.rcArrR(listing,i) === "\tsbc (:bp2),y");
        return Result;
      };
      function MWY_BP2(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (pas.System.Pos("\tmwy ",rtl.rcArrR(listing,i)) === 1) && (pas.System.Pos(" :bp2",rtl.rcArrR(listing,i)) > 0);
        return Result;
      };
      function ADD_SUB_AL_CL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tjsr addAL_CL") || (rtl.rcArrR(listing,i) === "\tjsr subAL_CL");
        return Result;
      };
      function ADD_SUB_AX_CX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tjsr addAX_CX") || (rtl.rcArrR(listing,i) === "\tjsr subAX_CX");
        return Result;
      };
      function ADD_SUB_EAX_ECX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "\tjsr addEAX_ECX") || (rtl.rcArrR(listing,i) === "\tjsr subEAX_ECX");
        return Result;
      };
      function JSR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjsr ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjeq ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JNE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjne ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JPL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjpl ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JMI(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjmi ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JCC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjcc ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function JCS(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tjcs ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function BEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tbeq ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function BNE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tbne ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function BCC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tbcc ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function BCS(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tbcs ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function BPL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tbpl ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function BMI(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos("\tbmi ",rtl.rcArrR(listing,i)) === 1;
        return Result;
      };
      function SVC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsvc";
        return Result;
      };
      function BNE_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tbne @+";
        return Result;
      };
      function BEQ_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tbeq @+";
        return Result;
      };
      function BCC_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tbcc @+";
        return Result;
      };
      function BCS_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tbcs @+";
        return Result;
      };
      function BPL_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tbpl @+";
        return Result;
      };
      function BMI_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tbmi @+";
        return Result;
      };
      function SEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tseq";
        return Result;
      };
      function SNE(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsne";
        return Result;
      };
      function SPL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tspl";
        return Result;
      };
      function SMI(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tsmi";
        return Result;
      };
      function SCC(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tscc";
        return Result;
      };
      function SCS(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = rtl.rcArrR(listing,i) === "\tscs";
        return Result;
      };
      function UNUSED_A(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = STY_STACK(i) || LDA_STACK(i) || STA_STACK(i) || LDA_IM(i) || ROL_STACK(i) || ROR_STACK(i) || ADC_SBC(i);
        return Result;
      };
      function onBreak(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i) === "@") || (pas.System.Pos("\tjsr ",rtl.rcArrR(listing,i)) === 1) || (rtl.rcArrR(listing,i) === "\teif");
        return Result;
      };
      function argMatch(i, j) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(j,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Copy(rtl.rcArrR(listing,i),6,256) === pas.System.Copy(rtl.rcArrR(listing,j),6,256);
        return Result;
      };
      function WriteInstruction(i) {
        rtl.rc(i,-2147483648,2147483647);
        if (pas.Common.isInterrupt && ((pas.System.Pos(" :bp",rtl.rcArrR(listing,i)) > 0) || (pas.System.Pos(" :STACK",rtl.rcArrR(listing,i)) > 0))) {
          pas.Console.TextColor(12);
          pas.System.Writeln(pas.Common.optimize.SourceFile.Path + " (" + pas.StringUtilities.IntToStr(pas.Common.optimize.line) + ") Error: Illegal instruction in INTERRUPT block '" + pas.System.Copy(rtl.rcArrR(listing,i),2,256) + "'");
          pas.Console.NormVideo();
        };
        $mod.WriteOut(rtl.rcArrR(listing,i));
      };
      function LOCAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if ((i < 0) || (rtl.rcArrR(listing,i) === "")) {
          Result = false}
         else Result = rtl.rcArrR(listing,i) === "\t.LOCAL";
        return Result;
      };
      function ENDL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if ((i < 0) || (rtl.rcArrR(listing,i) === "")) {
          Result = false}
         else Result = rtl.rcArrR(listing,i) === "\t.ENDL";
        return Result;
      };
      function SKIP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        if ((i < 0) || (rtl.rcArrR(listing,i) === "")) {
          Result = false}
         else Result = SEQ(i) || SNE(i) || SPL(i) || SMI(i) || SCC(i) || SCS(i) || JEQ(i) || JNE(i) || JPL(i) || JMI(i) || JCC(i) || JCS(i) || BEQ(i) || BNE(i) || BPL(i) || BMI(i) || BCC(i) || BCS(i);
        return Result;
      };
      function LabelIsUsed(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        function LabelTest(mne) {
          var $tmp = rtl.rcCharAt(pas.Common.optyY,0);
          if (($tmp === "+") || ($tmp === "-")) {
            Result = rtl.rcArrR(listing,i) === (mne + pas.System.Copy(pas.Common.optyY,6,256))}
           else if ($tmp === "*") {
            if (rtl.rcCharAt(pas.Common.optyY,1).charCodeAt() in rtl.createSet(43,45)) {
              Result = (rtl.rcArrR(listing,i) === (mne + pas.System.Copy(pas.Common.optyY,6,pas.System.Pos("|",pas.Common.optyY) - 6))) || (rtl.rcArrR(listing,i) === (mne + pas.System.Copy(pas.Common.optyY,pas.System.Pos("|",pas.Common.optyY) + 1,256)))}
             else Result = rtl.rcArrR(listing,i) === (mne + pas.System.Copy(pas.Common.optyY,6,256))}
           else {
            Result = rtl.rcArrR(listing,i) === (mne + pas.Common.optyY);
          };
        };
        Result = false;
        if (pas.Common.optyY !== "") if (pas.System.Pos("\tsta ",rtl.rcArrR(listing,i)) === 1) {
          LabelTest("\tsta ")}
         else if (pas.System.Pos("\tinc ",rtl.rcArrR(listing,i)) === 1) {
          LabelTest("\tinc ")}
         else if (pas.System.Pos("\tdec ",rtl.rcArrR(listing,i)) === 1) LabelTest("\tdec ");
        return Result;
      };
      function EAX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = pas.System.Pos(" :eax",rtl.rcArrR(listing,i)) > 0;
        return Result;
      };
      function IFDEF_MUL8(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i + 1) === "\tfmulu_8") && (rtl.rcArrR(listing,i) === "\t.ifdef fmulinit");
        return Result;
      };
      function IFDEF_MUL16(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (rtl.rcArrR(listing,i + 1) === "\tfmulu_16") && (rtl.rcArrR(listing,i) === "\t.ifdef fmulinit");
        return Result;
      };
      function LDA_STA_BP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = (LDA_BP_Y(i) && STA_A(i + 1)) || (LDA_A(i) && STA_BP_Y(i + 1));
        return Result;
      };
      function LDA_STA_ADR(i, q, op) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(q,-2147483648,2147483647);
        rtl.rcc(op,0,65535);
        if (LDA_ADR(i + 6) && IY(i + 6)) {
          pas.System.Delete({a: i + 6, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 6)),2);
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 6) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if (STA_ADR(i + 7) && IY(i + 7)) {
          pas.System.Delete({a: i + 7, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 7)),2);
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 7) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if ((LDA_ADR(i + 8) === false) && (STA_ADR(i + 9) === false)) return;
        if (LDA_ADR(i + 8) && IY(i + 8)) {
          pas.System.Delete({a: i + 8, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 8)),2);
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 8) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if (STA_ADR(i + 9) && IY(i + 9)) {
          pas.System.Delete({a: i + 9, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 9)),2);
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 9) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if ((LDA_ADR(i + 10) === false) && (STA_ADR(i + 11) === false)) return;
        if (LDA_ADR(i + 10) && IY(i + 10)) {
          pas.System.Delete({a: i + 10, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 10)),2);
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 10) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if (STA_ADR(i + 11) && IY(i + 11)) {
          pas.System.Delete({a: i + 11, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 11)),2);
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 11) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if ((LDA_ADR(i + 12) === false) && (STA_ADR(i + 13) === false)) return;
        if (LDA_ADR(i + 12) && IY(i + 12)) {
          pas.System.Delete({a: i + 12, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 12)),2);
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 12) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
        if (STA_ADR(i + 13) && IY(i + 13)) {
          pas.System.Delete({a: i + 13, p: listing, get: function () {
              return this.p[this.a];
            }, set: function (v) {
              this.p[this.a] = v;
            }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 13)),2);
          rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 13) + op + "$" + pas.SysUtils.IntToHex(q,2) + ",y");
        };
      };
      function Expand(i, e) {
        rtl.rc(i,-2147483648,2147483647);
        rtl.rc(e,-2147483648,2147483647);
        var k = 0;
        for (var $l = l - 1, $end = i; $l >= $end; $l--) {
          k = $l;
          rtl.rcArrW(listing,k + e,rtl.rcArrR(listing,k));
        };
        l += e;
      };
      function Rebuild() {
        var k = 0;
        var i = 0;
        k = 0;
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if ((rtl.rcArrR(listing,i) !== "") && (rtl.rcCharAt(rtl.rcArrR(listing,i),0) !== ";")) {
            rtl.rcArrW(listing,k,rtl.rcArrR(listing,i));
            if (k > 0) {
              if (DEX(k) && INX(k - 1)) {
                rtl.rcArrW(listing,k - 1,"");
                rtl.rcArrW(listing,k,"");
                k -= 1;
                continue;
              };
              if (INX(k) && DEX(k - 1)) {
                rtl.rcArrW(listing,k - 1,"");
                rtl.rcArrW(listing,k,"");
                k -= 1;
                continue;
              };
              if (LDA_STACK(k) && STA_STACK(k - 1) && (STA_A(i + 1) || ADD_SUB(i + 1))) if (argMatch(k,k - 1)) {
                rtl.rcArrW(listing,k - 1,"");
                rtl.rcArrW(listing,k,"");
                k -= 1;
                continue;
              };
              if (STA_STACK(k) && LDA_STACK(k - 1) && LDA_A(i + 1)) if (argMatch(k,k - 1)) {
                rtl.rcArrW(listing,k - 1,"");
                rtl.rcArrW(listing,k,"");
                k -= 1;
                continue;
              };
              if (STA_STACK(k) && LDA_IM(k - 1) && LDA_VAL(i + 1) && STA_STACK(i + 2)) if (rtl.rcArrR(listing,k) === rtl.rcArrR(listing,i + 2)) {
                rtl.rcArrW(listing,k - 1,"");
                rtl.rcArrW(listing,k,"");
                k -= 1;
                continue;
              };
              if (LDA_A(k) && LDA_A(k - 1) && STA_A(i + 1)) {
                rtl.rcArrW(listing,k - 1,rtl.rcArrR(listing,k));
                rtl.rcArrW(listing,k,"");
                continue;
              };
              if (INY(k) && LDA_A(k - 1) && LDA_A(i + 1)) {
                rtl.rcArrW(listing,k - 1,"\tiny");
                rtl.rcArrW(listing,k,"");
                continue;
              };
              if (STA_im_0(k) && STA_STACK(k - 1)) {
                rtl.rcArrW(listing,k,"");
                continue;
              };
              if (STA_im_0(k) && (LDA_A(k - 1) || ROL_A(k - 1) || ASL_A(k - 1))) {
                if (LDA_A(i + 1)) {
                  rtl.rcArrW(listing,k - 1,"");
                  rtl.rcArrW(listing,k,"");
                  k -= 1;
                  continue;
                };
                if ((LDY(i + 1) || MWY(i + 1) || INY(i + 1)) && LDA_A(i + 2)) {
                  rtl.rcArrW(listing,k - 1,"");
                  rtl.rcArrW(listing,k,"");
                  k -= 1;
                  continue;
                };
                if (STA_im_0(i + 1) && STA_im_0(i + 2) && STA_im_0(i + 3) && LDA_A(i + 4)) {
                  rtl.rcArrW(listing,k - 1,"");
                  rtl.rcArrW(listing,k,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,"");
                  k -= 1;
                  continue;
                };
                if (STA_im_0(i + 1) && STA_im_0(i + 2) && LDA_A(i + 3)) {
                  rtl.rcArrW(listing,k - 1,"");
                  rtl.rcArrW(listing,k,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  k -= 1;
                  continue;
                };
                if (STA_im_0(i + 1) && LDA_A(i + 2)) {
                  rtl.rcArrW(listing,k - 1,"");
                  rtl.rcArrW(listing,k,"");
                  rtl.rcArrW(listing,i + 1,"");
                  k -= 1;
                  continue;
                };
              };
            };
            k += 1;
          };
        };
        rtl.rcArrW(listing,k,"");
        rtl.rcArrW(listing,k + 1,"");
        rtl.rcArrW(listing,k + 2,"");
        rtl.rcArrW(listing,k + 3,"");
        l = rtl.rc(k,-2147483648,2147483647);
      };
      function GetString(a) {
        var Result = "";
        var i = 0;
        Result = "";
        i = 6;
        if (a !== "") while (!(rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(32,9)) && (i <= a.length)) {
          Result = Result + rtl.rcCharAt(a,i - 1);
          i += 1;
        };
        return Result;
      };
      function GetString$1(j) {
        rtl.rc(j,-2147483648,2147483647);
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        i = 6;
        a = rtl.rcArrR(listing,j);
        if (a !== "") while ((i <= a.length) && !(rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(32,9))) {
          Result = Result + rtl.rcCharAt(a,i - 1);
          i += 1;
        };
        return Result;
      };
      function GetStringLast(j) {
        rtl.rc(j,-2147483648,2147483647);
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        a = rtl.rcArrR(listing,j);
        if (a !== "") {
          i = rtl.rc(a.length,-2147483648,2147483647);
          while (!(rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(32,9)) && (i > 0)) i -= 1;
          Result = pas.System.Copy(a,i + 1,256);
        };
        return Result;
      };
      function GetARG(n, x, reset) {
        rtl.rc(n,0,255);
        rtl.rc(x,-128,127);
        var Result = "";
        var i = 0;
        var a = "";
        Result = "";
        if (x < 0) return Result;
        a = rtl.rcArrR(rtl.rcArrR(s,x),n);
        if (a === "") {
          Result = pas.StringUtilities.IntToStr(x + 8);
          var $tmp = n;
          if ($tmp === 0) {
            Result = ":STACKORIGIN+" + Result}
           else if ($tmp === 1) {
            Result = ":STACKORIGIN+STACKWIDTH+" + Result}
           else if ($tmp === 2) {
            Result = ":STACKORIGIN+STACKWIDTH*2+" + Result}
           else if ($tmp === 3) Result = ":STACKORIGIN+STACKWIDTH*3+" + Result;
        } else {
          i = 6;
          while (rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(32,9)) i += 1;
          while ((i <= a.length) && !(rtl.rcCharAt(a,i - 1).charCodeAt() in rtl.createSet(32,9))) {
            Result = Result + rtl.rcCharAt(a,i - 1);
            i += 1;
          };
          if (reset) rtl.rcArrW(rtl.rcArrR(s,x),n,"");
        };
        return Result;
      };
      function RemoveUnusedSTACK() {
        var Result = false;
        var i = 0;
        var j = 0;
        var cnt_l = rtl.arraySetLength(null,false,9,4);
        var cnt_s = rtl.arraySetLength(null,false,9,4);
        function Clear() {
          var i = 0;
          var j = 0;
          for (i = 0; i <= 15; i++) {
            rtl.rcArrR(s,i)[0] = "";
            rtl.rcArrR(s,i)[1] = "";
            rtl.rcArrR(s,i)[2] = "";
            rtl.rcArrR(s,i)[3] = "";
          };
          for (i = 0; i <= 8; i++) {
            for (j = 0; j <= 3; j++) {
              rtl.rcArrW(rtl.rcArrR(cnt_l,i),j,false);
              rtl.rcArrW(rtl.rcArrR(cnt_s,i),j,false);
            };
          };
        };
        function unrelated(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var j = 0;
          var k = 0;
          Result = false;
          for (j = 0; j <= 7; j++) for (k = 0; k <= 3; k++) if (pas.System.Pos(GetARG(k,j,false),rtl.rcArrR(listing,i)) > 0) return (rtl.rcArrR(cnt_s,j,k) && (rtl.rcArrR(cnt_l,j,k) === false)) || ((rtl.rcArrR(cnt_s,j,k) === false) && rtl.rcArrR(cnt_l,j,k));
          for (k = 0; k <= 3; k++) if (pas.System.Pos(GetARG(k,8,false),rtl.rcArrR(listing,i)) > 0) return ((cnt_s[8][0] || cnt_s[8][1] || cnt_s[8][2] || cnt_s[8][3]) === true) && ((cnt_l[8][0] || cnt_l[8][1] || cnt_l[8][2] || cnt_l[8][3]) === false);
          return Result;
        };
        Result = false;
        Rebuild();
        Clear();
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.System.Pos(" :STACK",rtl.rcArrR(listing,i)) > 0) if (STA_STACK(i) || STY_STACK(i)) {
            for (j = 0; j <= 8; j++) if (pas.System.Pos(GetARG(0,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_s,j,0,true);
              break;
            } else if (pas.System.Pos(GetARG(1,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_s,j,1,true);
              break;
            } else if (pas.System.Pos(GetARG(2,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_s,j,2,true);
              break;
            } else if (pas.System.Pos(GetARG(3,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_s,j,3,true);
              break;
            };
          } else {
            for (j = 0; j <= 8; j++) if (pas.System.Pos(GetARG(0,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_l,j,0,true);
              break;
            } else if (pas.System.Pos(GetARG(1,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_l,j,1,true);
              break;
            } else if (pas.System.Pos(GetARG(2,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_l,j,2,true);
              break;
            } else if (pas.System.Pos(GetARG(3,j,false),rtl.rcArrR(listing,i)) > 0) {
              rtl.rcArrW(cnt_l,j,3,true);
              break;
            };
          };
        };
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (pas.System.Pos(" :STACK",rtl.rcArrR(listing,i)) > 0) if (unrelated(i)) {
            a = rtl.rcArrR(listing,i);
            k = rtl.rc(pas.System.Pos(" :STACK",a),-2147483648,2147483647);
            pas.System.Delete({get: function () {
                return a;
              }, set: function (v) {
                a = v;
              }},k,256);
            pas.System.Insert(" #$00",{get: function () {
                return a;
              }, set: function (v) {
                a = v;
              }},k);
            rtl.rcArrW(listing,i,a);
            Result = true;
          };
        };
        return Result;
      };
      function opt_SHR_BYTE() {
        var Result = false;
        var m = 0;
        var k = 0;
        t = "";
        k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,true)),-2147483648,2147483647);
        if (k < 0) return true;
        Result = false;
        if (k > 7) {
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(s,x - 1,3,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
          l += 8;
        } else {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          l += 1;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            rtl.rcArrW(listing,l,"\tlsr @");
            l += 1;
          };
          rtl.rcArrW(listing,l,"\tsta " + GetARG(0,x - 1,true));
          l += 1;
        };
        return Result;
      };
      function opt_SHR_WORD() {
        var m = 0;
        var k = 0;
        t = "";
        k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,false)),-2147483648,2147483647);
        rtl.rcArrW(s,x - 1,2,"\tmva #$00");
        rtl.rcArrW(s,x - 1,3,"\tmva #$00");
        if (k < 0) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tldy " + GetARG(0,x,true));
          rtl.rcArrR(s,x)[0] = "";
          rtl.rcArrW(listing,l + 8,"\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 9,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 10,"\tlsr " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\tror @");
          rtl.rcArrW(listing,l + 12,"\tdey");
          rtl.rcArrW(listing,l + 13,"\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 14,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 15,"\tsta " + GetARG(0,x - 1,true));
          l += 16;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k > 15) {
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
          l += 8;
        } else if (k === 9) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
          l += 3;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 10) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(0,x - 1,true));
          l += 4;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 11) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 12) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x - 1,true));
          l += 6;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 13) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(0,x - 1,true));
          l += 7;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 14) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 15) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tasl @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\trol @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(s,x - 1,3,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 8) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          l += 2;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x - 1,true));
          l += 3;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            rtl.rcArrW(listing,l,"\tlsr " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tror @");
            l += 2;
          };
          rtl.rcArrW(listing,l,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(1,x - 1,true));
          l += 3;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(3,x - 1,true));
          l += 4;
        };
      };
      function opt_SHR_CARD() {
        var m = 0;
        var k = 0;
        t = "";
        k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,false)),-2147483648,2147483647);
        if (k < 0) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tldy " + GetARG(0,x,true));
          rtl.rcArrR(s,x)[0] = "";
          rtl.rcArrW(listing,l + 8,"\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 9,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 10,"\tlsr " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\tror " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror @");
          rtl.rcArrW(listing,l + 14,"\tdey");
          rtl.rcArrW(listing,l + 15,"\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 16,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(0,x - 1,true));
          l += 18;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k === 13) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tasl " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\trol " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tasl " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 14,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 15,"\trol " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 16,"\tasl " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 17,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 18,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 19,"\trol " + GetARG(3,x - 1,true));
          l += 20;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
          l += 8;
        } else if (k === 23) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tasl @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\trol @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tlda #$00");
          rtl.rcArrW(listing,l + 6,"\trol @");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(1,x - 1,true));
          l += 8;
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(s,x - 1,3,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(3,x - 1,true));
          l += 4;
        } else if (k === 27) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(s,x - 1,0,"");
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(s,x - 1,3,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else if (k === 31) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tasl @");
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\trol @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(s,x - 1,3,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
        } else {
          m = rtl.rc(rtl.trunc(k / 8),-2147483648,2147483647);
          k = rtl.rc(k % 8,-2147483648,2147483647);
          if (m > 3) {
            k = 0;
            rtl.rcArrW(listing,l,"\tlda #$00");
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
            l += 5;
          } else {
            var $tmp = m;
            if ($tmp === 1) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrR(s,x - 1)[2] = "";
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda #$00");
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
              l += 8;
            } else if ($tmp === 2) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda #$00");
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(3,x - 1,true));
              l += 7;
            } else if ($tmp === 3) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrR(s,x - 1)[2] = "";
              rtl.rcArrR(s,x - 1)[3] = "";
              rtl.rcArrW(listing,l + 2,"\tlda #$00");
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
              l += 6;
            };
          };
          if (k > 0) {
            if (m === 0) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
              l += 8;
            };
            for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
              m = $l;
              rtl.rcArrW(listing,l,"\tlsr " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tror " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tror " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tror " + GetARG(0,x - 1,true));
              l += 4;
            };
            rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x - 1,true));
            rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
            l += 8;
          };
        };
      };
      function opt_SHL_BYTE() {
        var k = 0;
        var m = 0;
        t = "";
        k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,false)),-2147483648,2147483647);
        rtl.rcArrR(s,x - 1)[1] = "";
        rtl.rcArrR(s,x - 1)[2] = "";
        rtl.rcArrR(s,x - 1)[3] = "";
        l += 2;
        if (k > 31) {
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l,"\tlda #$00");
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda #$00");
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
          l += 8;
        } else if (k === 31) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\tror @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          l += 6;
        } else if (k === 10) {
          rtl.rcArrR(s,x - 1)[1] = "\tmva #$00";
          rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
          rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tasl @");
          rtl.rcArrW(listing,l + 8,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tasl @");
          rtl.rcArrW(listing,l + 11,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
        } else if (k === 11) {
          rtl.rcArrR(s,x - 1)[1] = "\tmva #$00";
          rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
          rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tasl @");
          rtl.rcArrW(listing,l + 8,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tasl @");
          rtl.rcArrW(listing,l + 11,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tasl @");
          rtl.rcArrW(listing,l + 14,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 15,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 16,"\tsta " + GetARG(0,x - 1,true));
          l += 17;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
        } else if (k in rtl.createSet(null,12,15)) {
          k = rtl.rc(16 - k,-2147483648,2147483647);
          rtl.rcArrW(listing,l,"\tlda #$00");
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda #$00");
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tlda #$00");
          rtl.rcArrW(listing,l + 9,"\tsta " + GetARG(0,x - 1,true));
          l += 10;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            rtl.rcArrW(listing,l,"\tlsr " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tror @");
            l += 2;
          };
          rtl.rcArrW(listing,l,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
          rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
          l += 5;
        } else if (k in rtl.createSet(8,16,24)) {
          rtl.rcArrW(listing,l,"\tlda #$00");
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda #$00");
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          var $tmp = k;
          if ($tmp === 8) {
            rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(1,x - 1,true))}
           else if ($tmp === 16) {
            rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(2,x - 1,true))}
           else if ($tmp === 24) rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tlda #$00");
          rtl.rcArrW(listing,l + 9,"\tsta " + GetARG(0,x - 1,true));
          l += 10;
        } else {
          if ((k > 7) || (k < 0)) {
            rtl.rcArrW(listing,l,"\tlda #$00");
            rtl.rcArrR(s,x - 1)[3] = "";
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tlda #$00");
            rtl.rcArrR(s,x - 1)[2] = "";
            rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 4,"\tlda #$00");
            rtl.rcArrR(s,x - 1)[1] = "";
            rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
            l += 6;
            rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
            rtl.rcArrR(s,x - 1)[1] = "";
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x - 1,true));
            rtl.rcArrR(s,x - 1)[0] = "";
            l += 3;
            rtl.rcArrW(listing,l,"\tldy " + GetARG(0,x,true));
            rtl.rcArrR(s,x)[0] = "";
            rtl.rcArrW(listing,l + 1,"\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
            rtl.rcArrW(listing,l + 2,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
            rtl.rcArrW(listing,l + 3,"\tasl @");
            rtl.rcArrW(listing,l + 4,"\trol " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 5,"\trol " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 6,"\trol " + GetARG(3,x - 1,true));
            rtl.rcArrW(listing,l + 7,"\tdey");
            rtl.rcArrW(listing,l + 8,"\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
            rtl.rcArrW(listing,l + 9,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
            rtl.rcArrW(listing,l + 10,"\tsta " + GetARG(0,x - 1,true));
            l += 11;
            rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
            rtl.rcArrR(s,x - 1)[2] = "";
            rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
            rtl.rcArrR(s,x - 1)[3] = "";
            rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
            l += 6;
            pas.Common.ShrShlCnt += 1;
          } else {
            rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tlda #$00");
            l += 3;
            for (var $l1 = 0, $end1 = k - 1; $l1 <= $end1; $l1++) {
              m = $l1;
              rtl.rcArrW(listing,l,"\tasl " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\trol @");
              l += 2;
            };
            rtl.rcArrW(listing,l,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
            l += 3;
          };
        };
      };
      function opt_SHL_WORD() {
        var Result = false;
        var k = 0;
        var m = 0;
        Result = false;
        t = "";
        k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,false)),-2147483648,2147483647);
        rtl.rcArrR(s,x - 1)[2] = "";
        rtl.rcArrR(s,x - 1)[3] = "";
        if (k < 0) {
          rtl.rcArrW(listing,l,"\tlda #$00");
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          l += 4;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          l += 3;
          rtl.rcArrW(listing,l,"\tldy " + GetARG(0,x,true));
          rtl.rcArrR(s,x)[0] = "";
          rtl.rcArrW(listing,l + 1,"\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 2,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 3,"\tasl @");
          rtl.rcArrW(listing,l + 4,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\trol " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tdey");
          rtl.rcArrW(listing,l + 8,"\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 9,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 10,"\tsta " + GetARG(0,x - 1,true));
          l += 11;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k === 16) {
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 4,"\tlda #$00");
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(1,x - 1,true));
          l += 8;
        } else if (k === 10) {
          rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
          rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tasl @");
          rtl.rcArrW(listing,l + 8,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tasl @");
          rtl.rcArrW(listing,l + 11,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
        } else if (k === 11) {
          rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
          rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tasl @");
          rtl.rcArrW(listing,l + 8,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tasl @");
          rtl.rcArrW(listing,l + 11,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tasl @");
          rtl.rcArrW(listing,l + 14,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 15,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 16,"\tsta " + GetARG(0,x - 1,true));
          l += 17;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
        } else if (k === 31) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\tror @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          l += 6;
        } else if (k === 8) {
          rtl.rcArrW(listing,l,"\tlda #$00");
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
        } else {
          if (k > 7) return true;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda #$00");
          l += 5;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            rtl.rcArrW(listing,l,"\tasl " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\trol " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\trol @");
            l += 3;
          };
          rtl.rcArrW(listing,l,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(1,x - 1,true));
          l += 5;
        };
        return Result;
      };
      function opt_SHL_CARD() {
        var k = 0;
        var m = 0;
        t = "";
        k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,false)),-2147483648,2147483647);
        if (k < 0) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 7,"\tldy " + GetARG(0,x,true));
          rtl.rcArrR(s,x)[0] = "";
          rtl.rcArrW(listing,l + 8,"\tbeq l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 9,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 10,"\tasl @");
          rtl.rcArrW(listing,l + 11,"\trol " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\trol " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\trol " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 14,"\tdey");
          rtl.rcArrW(listing,l + 15,"\tbne l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_b");
          rtl.rcArrW(listing,l + 16,"l_" + pas.SysUtils.IntToHex(pas.Common.ShrShlCnt,4) + "_e");
          rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(0,x - 1,true));
          l += 18;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
          l += 6;
          pas.Common.ShrShlCnt += 1;
        } else if (k === 13) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrR(s,x - 1)[1] = "";
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrR(s,x - 1)[0] = "";
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tlsr " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 14,"\tror @");
          rtl.rcArrW(listing,l + 15,"\tlsr " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 16,"\tror " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 17,"\tror " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 18,"\tror @");
          rtl.rcArrW(listing,l + 19,"\tsta " + GetARG(0,x - 1,true));
          l += 20;
          rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlda #$00");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
          l += 8;
        } else if (k === 23) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tror @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
          rtl.rcArrR(s,x - 1)[2] = "";
          rtl.rcArrW(listing,l + 5,"\tlda #$00");
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(2,x - 1,true));
          l += 8;
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          l += 4;
        } else if (k === 31) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrR(s,x - 1)[3] = "";
          rtl.rcArrW(listing,l + 2,"\tlda #$00");
          rtl.rcArrW(listing,l + 3,"\tror @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
          l += 5;
          rtl.rcArrW(s,x - 1,0,"\tmva #$00");
          rtl.rcArrW(s,x - 1,1,"\tmva #$00");
          rtl.rcArrW(s,x - 1,2,"\tmva #$00");
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
          l += 6;
        } else {
          m = rtl.rc(rtl.trunc(k / 8),-2147483648,2147483647);
          k = rtl.rc(k % 8,-2147483648,2147483647);
          if (m > 3) {
            k = 0;
            rtl.rcArrW(listing,l,"\tlda #$00");
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(3,x - 1,true));
            l += 5;
          } else {
            var $tmp = m;
            if ($tmp === 1) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(3,x - 1,true));
              l += 6;
              rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(s,x - 1,3,"");
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(s,x - 1,1,"");
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda #$00");
              rtl.rcArrW(s,x - 1,0,"");
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
              l += 8;
            } else if ($tmp === 2) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(3,x - 1,true));
              l += 4;
              rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(s,x - 1,3,"");
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda #$00");
              rtl.rcArrW(s,x - 1,0,"");
              rtl.rcArrW(s,x - 1,1,"");
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(1,x - 1,true));
              l += 7;
            } else if ($tmp === 3) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
              l += 2;
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(s,x - 1,3,"");
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda #$00");
              rtl.rcArrW(s,x - 1,0,"");
              rtl.rcArrW(s,x - 1,1,"");
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              l += 6;
            };
          };
          if (k > 0) {
            if (m === 0) {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
              l += 8;
            };
            for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
              m = $l;
              rtl.rcArrW(listing,l,"\tasl " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\trol " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\trol " + GetARG(3,x - 1,true));
              l += 4;
            };
            rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
            rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
            rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
            rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x - 1,true));
            rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
            l += 8;
          };
        };
      };
      function opt_BYTE_DIV(k) {
        rtl.rc(k,0,255);
        var $tmp = k;
        if ($tmp === 2) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(0,x - 1,true));
          l += 4;
        } else if ($tmp === 3) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc #$15");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 4) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          l += 5;
        } else if ($tmp === 5) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc #$0d");
          rtl.rcArrW(listing,l + 4,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tror @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\tror @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 6) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror @");
          rtl.rcArrW(listing,l + 14,"\tlsr @ ");
          rtl.rcArrW(listing,l + 15,"\tsta " + GetARG(0,x - 1,true));
          l += 16;
        } else if ($tmp === 7) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
        } else if ($tmp === 8) {
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          l += 5;
        } else if ($tmp === 9) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 10) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tsta  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tsta " + GetARG(0,x - 1,true));
          l += 16;
        } else if ($tmp === 11) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tror @");
          rtl.rcArrW(listing,l + 6,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tadc  " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tsta " + GetARG(0,x - 1,true));
          l += 17;
        } else if ($tmp === 12) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tsta " + GetARG(0,x - 1,true));
          l += 16;
        } else if ($tmp === 13) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tror @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tadd " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tsta " + GetARG(0,x - 1,true));
          l += 17;
        } else if ($tmp === 14) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 15) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc #$04");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tsta " + GetARG(0,x - 1,true));
          l += 13;
        } else if ($tmp === 16) {
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x - 1,true));
          l += 6;
        } else if ($tmp === 17) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tror @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tadc #$00");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 18) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tsta " + GetARG(0,x - 1,true));
          l += 16;
        } else if ($tmp === 19) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tror @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 20) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\tror @");
          rtl.rcArrW(listing,l + 12,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tsta " + GetARG(0,x - 1,true));
          l += 17;
        } else if ($tmp === 21) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tror @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tlsr @");
          rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(0,x - 1,true));
          l += 18;
        } else if ($tmp === 22) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tcmp #$21");
          rtl.rcArrW(listing,l + 4,"\tadc #$00");
          rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 10,"\tror @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tlsr @");
          rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(0,x - 1,true));
          l += 18;
        } else if ($tmp === 23) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\tror @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tsta " + GetARG(0,x - 1,true));
          l += 17;
        } else if ($tmp === 24) {
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 11,"\tror @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
        } else if ($tmp === 25) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tror @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tsta " + GetARG(0,x - 1,true));
          l += 15;
        } else if ($tmp === 26) {
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tror @");
          rtl.rcArrW(listing,l + 6,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 13,"\tror @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tlsr @");
          rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(0,x - 1,true));
          l += 18;
        } else if ($tmp === 27) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tror @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
        } else if ($tmp === 28) {
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tadc #$02");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tlsr @");
          rtl.rcArrW(listing,l + 8,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tror @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tsta " + GetARG(0,x - 1,true));
          l += 13;
        } else if ($tmp === 29) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 5,"\tror @");
          rtl.rcArrW(listing,l + 6,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 7,"\tror @");
          rtl.rcArrW(listing,l + 8,"\tlsr @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 12,"\tror @");
          rtl.rcArrW(listing,l + 13,"\tlsr @");
          rtl.rcArrW(listing,l + 14,"\tlsr @");
          rtl.rcArrW(listing,l + 15,"\tlsr @");
          rtl.rcArrW(listing,l + 16,"\tlsr @");
          rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(0,x - 1,true));
          l += 18;
        } else if ($tmp === 30) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tsec");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
        } else if ($tmp === 31) {
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tlsr @");
          rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 8,"\tror @");
          rtl.rcArrW(listing,l + 9,"\tlsr @");
          rtl.rcArrW(listing,l + 10,"\tlsr @");
          rtl.rcArrW(listing,l + 11,"\tlsr @");
          rtl.rcArrW(listing,l + 12,"\tlsr @");
          rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
          l += 14;
        } else if ($tmp === 32) {
          rtl.rcArrW(listing,l + 1,"\tlsr @");
          rtl.rcArrW(listing,l + 2,"\tlsr @");
          rtl.rcArrW(listing,l + 3,"\tlsr @");
          rtl.rcArrW(listing,l + 4,"\tlsr @");
          rtl.rcArrW(listing,l + 5,"\tlsr @");
          rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(0,x - 1,true));
          l += 7;
        };
      };
      function opt_STA_0(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = true;
        if (rtl.rcArrR(listing,i) === "\tsta @PARAM?.@NIL") {
          rtl.rcArrW(listing,i,"\tsta #$00");
          return false;
        };
        if ((i === 0) && STA_im_0(i)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LAB_A(i) && STY_im_0(i + 1)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((INY(i) === false) && (DEY(i) === false) && STY_im_0(i + 1) && (LDA(i + 2) || STA(i + 2))) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (STY_STACK(i) && STY_im_0(i + 1)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (TAY(i) && STY_im_0(i + 1) && MVA(i + 2)) {
          rtl.rcArrW(listing,i + 1,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 2,"\tsta " + GetStringLast(i + 2));
          return false;
        };
        if (LDA_A(i) && STA_im_0(i + 1)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (STA_STACK(i) && STA_im_0(i + 1)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (STA_im_0(i) && STA_A(i + 1)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA_IM_0(i) && ADC_SBC_IM_0(i + 1) && STA_im_0(i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          if (LDA_IM_0(i + 3) && ADC_SBC_IM_0(i + 4) && STA_im_0(i + 5)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            if (LDA_IM_0(i + 6) && ADC_SBC_IM_0(i + 7) && STA_im_0(i + 8)) {
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
            };
          };
          return false;
        };
        if (STA_im_0(i) && LDA_IM_0(i + 1) && ADC_SBC_IM_0(i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (STA_im_0(i) && LDA_A(i + 1) && (LDA_IM_0(i + 1) === false) && ADC_SBC_IM_0(i + 2)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((LDA_A(i) || TYA(i) || STY(i)) && ADD_SUB(i + 1) && STA_im_0(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4)) {
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((LDA_A(i) || TYA(i)) && ADC_SBC(i + 1) && STA_im_0(i + 2) && (LDY(i + 3) === false) && (ADC_SBC(i + 4) === false)) {
          rtl.rcArrW(listing,i + 2,"");
          if (LSR_STACK(i + 3) || ASL_STACK(i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
          } else if ((i > 0) && STA_im_0(i - 1)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
          };
          return false;
        };
        if (ADD_SUB(i) && STA_im_0(i + 1) && (LDY(i + 2) === false) && (ADC_SBC(i + 3) === false)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((ADD_SUB(i) === false) && (ADC_SBC(i) === false) && STA_im_0(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2) || AND_ORA_EOR(i + 2))) {
          rtl.rcArrW(listing,i + 1,"");
          if (LDA_A(i) && (IY(i) === false)) rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((AND_ORA_EOR(i) || LDA_ADR(i)) && STA_im_0(i + 1)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((LSR_A(i) || ASL_A(i) || ROL_A(i) || ROR_A(i)) && STA_im_0(i + 1)) {
          rtl.rcArrW(listing,i + 1,"");
          if (LDA_A(i + 2) || (LDY(i + 2) && LDA_A(i + 3)) || (MWY(i + 2) && LDA_A(i + 3))) rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((i > 0) && (ADD_SUB(i - 1) === false) && (ADC_SBC(i - 1) === false) && STA_im_0(i) && (ASL(i + 1) || LSR(i + 1))) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && LDY(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2) || TYA(i + 2))) {
          rtl.rcArrW(listing,i,"");
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) rtl.rcArrW(listing,i - 1,"");
          return false;
        };
        if (MWY_BP2(i) && LDY(i + 1) && LDA_BP2_Y(i + 2) && STA_im_0(i + 3) && (MVY(i + 4) || LDY(i + 4) || MWY(i + 4))) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((LDY(i) || INY(i)) && LDA_BP2_Y(i + 1) && STA_im_0(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && LDY(i + 1) && STY_BP_1(i + 2) && LDY(i + 3) && LDA(i + 4)) {
          rtl.rcArrW(listing,i,"");
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) rtl.rcArrW(listing,i - 1,"");
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && MWY(i + 1) && LDY(i + 2) && (LDA_A(i + 3) || MVA(i + 3) || MWA(i + 3))) {
          rtl.rcArrW(listing,i,"");
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) rtl.rcArrW(listing,i - 1,"");
          return false;
        };
        if ((STA_im_0(i) || LDA_A(i)) && LDY(i + 1) && (INY(i + 2) || DEY(i + 2)) && (LDA_A(i + 3) || MVA(i + 3) || MWA(i + 3))) {
          rtl.rcArrW(listing,i,"");
          if ((i > 0) && (LDA_A(i - 1) || ADC_SBC(i - 1))) rtl.rcArrW(listing,i - 1,"");
          return false;
        };
        if (STA_im_0(i) && LDY(i + 1) && LOCAL(i + 2) && LDA(i + 3)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (STA_im_0(i) && LOCAL(i + 1) && LDA(i + 2)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (STA_im_0(i) && CMP_IM_0(i + 1) && BNE(i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (STA_im_0(i) && (BEQ(i + 1) || BNE(i + 1)) && JMP(i + 2)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (TYA(i) && STA_im_0(i + 1) && SKIP(i + 2)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (SCC(i) && (rtl.rcArrR(listing,i + 1) === "\tinc #$00")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (SCS(i) && (rtl.rcArrR(listing,i + 1) === "\tdec #$00")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (STA_STACK(i) && ASL_STACK(i + 1) && STA_im_0(i + 2)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tasl @");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (STA_STACK(i) && ASL_STACK(i + 1) && ASL_STACK(i + 2) && STA_im_0(i + 3)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tasl @");
          rtl.rcArrW(listing,i + 1,"\tasl @");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && STA_A(i + 1)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA(i) && BPL_A(i + 1) && LDA(i + 2) && SUB(i + 3) && STA_im_0(i + 4) && LAB_A(i + 5)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        return Result;
      };
      function opt_STACK(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var tmp = "";
        var yes = false;
        Result = true;
        if ((rtl.rcArrR(listing,i) === "\tpla") && (rtl.rcArrR(listing,i + 1) === "\tsta portb")) {
          if (DEX(i + 10) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 8,"\tdex");
            rtl.rcArrW(listing,i + 9,"\tpla");
            rtl.rcArrW(listing,i + 10,"\tsta portb");
            return false;
          };
          if (DEX(i + 6) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 4,"\tdex");
            rtl.rcArrW(listing,i + 5,"\tpla");
            rtl.rcArrW(listing,i + 6,"\tsta portb");
            return false;
          };
          if (DEX(i + 4) && LDA_STACK(i + 2) && STA_VAL(i + 3)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 2,"\tdex");
            rtl.rcArrW(listing,i + 3,"\tpla");
            rtl.rcArrW(listing,i + 4,"\tsta portb");
            return false;
          };
        };
        if (INX(i) && LDA(i + 1) && (IX(i + 1) === false) && (rtl.rcArrR(listing,i + 2) === "\tsta @PARAM?") && DEX(i + 3)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (rtl.rcArrR(listing,i) === "\tsta @PARAM?.@NIL") {
          rtl.rcArrW(listing,i,"\tsta #$00");
          return false;
        };
        if ((l === (i + 2)) && DEX(i + 1) && MVA(i) && (MVA_STACK(i) === false) && (pas.System.Pos(":STACKORIGIN",rtl.rcArrR(listing,i)) > 0)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((l === (i + 4)) && (LDA_A(i) || STA_STACK(i)) && LDA_STACK(i + 1) && STA_VAL(i + 2) && DEX(i + 3)) if (argMatch(i,i + 1) === false) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((l === (i + 4)) && (AND_ORA_EOR_VAL(i) || ADD_SUB_VAL(i) || ADC_SBC_VAL(i)) && LDA_STACK(i + 1) && STA_VAL(i + 2) && DEX(i + 3)) if (argMatch(i,i + 1) === false) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 1) === "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x")) {
          rtl.rcArrW(listing,i,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && LDA_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 4) === "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x")) {
          rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_STACK(i) && STA_STACK(i + 1)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_STACK(i) && (rtl.rcArrR(listing,i + 1) === "\tsta #$00")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_STACK(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i)) && STA_VAL(i + 4)) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((LAB_A(i) === false) && STY_STACK(i + 1) && LDA_STACK(i + 2)) if (argMatch(i + 1,i + 2)) {
          rtl.rcArrW(listing,i + 1,"\ttya");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN+STACKWIDTH,x")) if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i + 1,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (MVA(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i + 1,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (STA_STACK(i) && LDA_STACK(i + 1) && STA_VAL(i + 2)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && STA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 7)) {
          rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 1) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 2) === "\tlda :STACKORIGIN,x") && STA_ADR(i + 3)) {
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_STACK(i + 2)) if (argMatch(i + 1,i + 2)) {
          if (IY(i) === false) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
          } else rtl.rcArrW(listing,i + 1,"\ttay");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 2) === "\tmva #$00 :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 3) === "\tldy :STACKORIGIN,x")) {
          if (IY(i) === false) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
          } else rtl.rcArrW(listing,i + 1,"\ttay");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (STA_STACK(i) && LDY_STACK(i + 1) && LDA_STACK(i + 2)) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA_VAL(i) && DEX(i + 1)) {
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tsta :STACKORIGIN-1,x") && DEX(i + 1)) {
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tsta :STACKORIGIN,x");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tsta :STACKORIGIN,x") && DEX(i + 1)) {
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tsta :STACKORIGIN+1,x");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN-1,x") && DEX(i + 1)) {
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN,x") && DEX(i + 1)) {
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN+1,x");
          return false;
        };
        if (TYA(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && DEX(i + 2)) {
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 1,"\ttya");
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (TYA(i) && AND_ORA_EOR_VAL(i + 1) && DEX(i + 2)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if ((INX(i) === false) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN,x") && DEX(i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tsta :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        if ((INX(i) === false) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+1,x") && DEX(i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tsta :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        if (LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 5) === "\tldy :STACKORIGIN+STACKWIDTH,x")) {
          rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 4)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i + 1) && MWY_BP2(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tldy :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0)) {
          rtl.rcArrW(listing,i + 2,"\tldy " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && (IY(i + 2) === false) && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 4) === "\tldy :STACKORIGIN+STACKWIDTH,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 4,"\tldy " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && MWY_BP2(i + 3) && LDY(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && INY(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDY(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MWY_BP2(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && INY(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6) && DEX(i + 7)) {
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (MVA(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_A(i + 3) && AND_ORA_EOR_STACK(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && AND_ORA_EOR_STACK(i + 7) && STA_A(i + 8) && DEX(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0)) {
          rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 4),1,5) + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 7,pas.System.Copy(rtl.rcArrR(listing,i + 7),1,5) + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_STACK(i + 3) && AND_ORA_EOR(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && AND_ORA_EOR(i + 7) && STA_A(i + 8) && DEX(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 6)) > 0)) {
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_VAL(i + 3) && (ADD_SUB_VAL(i + 4) || AND_ORA_EOR_VAL(i + 4)) && STA_A(i + 5) && LDA_VAL(i + 6) && (ADC_SBC_VAL(i + 7) || AND_ORA_EOR_VAL(i + 7)) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 12) && DEX(i + 13)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 9)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 11)) > 0)) {
          rtl.rcArrW(listing,i + 9,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 11,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_VAL(i + 3) && STA_A(i + 4) && LDA_VAL(i + 5) && STA_A(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 7,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 9,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && INX(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN-1,x") && STA_VAL(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA_VAL(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 10,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN-1,x") && STA_VAL(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && STA_VAL(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && STA_VAL(i + 11)) if ((pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 10,"\tlda " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 10)) {
          rtl.rcArrW(listing,i + 8,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 10,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && STA_STACK(i + 7)) {
          if (LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13) && LDA_STACK(i + 14) && STA_VAL(i + 15)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 10) && argMatch(i + 5,i + 12) && argMatch(i + 7,i + 14)) {
            rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i));
            rtl.rcArrW(listing,i + 10,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 12,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 14,"\tlda " + GetString$1(i + 6));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_A(i + 8) && AND_ORA_EOR_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && AND_ORA_EOR_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && AND_ORA_EOR_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && AND_ORA_EOR_STACK(i + 18) && STA_A(i + 19)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 9,pas.System.Copy(rtl.rcArrR(listing,i + 9),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 12,pas.System.Copy(rtl.rcArrR(listing,i + 12),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 15,pas.System.Copy(rtl.rcArrR(listing,i + 15),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 18,pas.System.Copy(rtl.rcArrR(listing,i + 18),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
        };
        if (MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          if ((rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && DEX(i + 7)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8) && DEX(i + 9)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 7,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 12)) {
            rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 7,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 9,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 11,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (INX(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR(i + 7) && STA_A(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && AND_ORA_EOR(i + 10) && STA_A(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && AND_ORA_EOR(i + 13) && STA_A(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && AND_ORA_EOR(i + 16) && STA_A(i + 17)) {
            rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 9,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 12,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 15,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_STACK(i + 6) && STA_A(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && AND_ORA_EOR_STACK(i + 9) && STA_A(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && AND_ORA_EOR_STACK(i + 12) && STA_A(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && AND_ORA_EOR_STACK(i + 15) && STA_A(i + 16)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 9)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 12)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 15)) > 0)) {
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 9,pas.System.Copy(rtl.rcArrR(listing,i + 9),1,5) + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 12,pas.System.Copy(rtl.rcArrR(listing,i + 12),1,5) + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 15,pas.System.Copy(rtl.rcArrR(listing,i + 15),1,5) + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (INX(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9) && LDA_VAL(i + 10) && STA_VAL(i + 11) && LDA_VAL(i + 12) && STA_VAL(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tlda :STACKORIGIN-1,x") && STA_VAL(i + 15) && (rtl.rcArrR(listing,i + 16) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA_VAL(i + 17) && (rtl.rcArrR(listing,i + 18) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && STA_VAL(i + 19) && (rtl.rcArrR(listing,i + 20) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && STA_VAL(i + 21)) {
            rtl.rcArrW(listing,i + 14,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 16,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 18,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 20,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (MWY_BP2(i + 5) && LDY(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 8) && INY(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11) && INY(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 14) && INY(i + 15) && (rtl.rcArrR(listing,i + 16) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 17)) {
            rtl.rcArrW(listing,i + 7,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 10,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 13,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 16,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8) && (rtl.rcArrR(listing,i + 9) !== "\tlda :STACKORIGIN+STACKWIDTH*2,x")) {
            rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 7,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 5) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 13)) {
            rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 10,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 12,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
        };
        if (DEX(i + 24) && INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && (rtl.rcArrR(listing,i + 12) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN,x") && STA_BP2_Y(i + 14) && INY(i + 15) && (rtl.rcArrR(listing,i + 16) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_BP2_Y(i + 17) && INY(i + 18) && (rtl.rcArrR(listing,i + 19) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_BP2_Y(i + 20) && INY(i + 21) && (rtl.rcArrR(listing,i + 22) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_BP2_Y(i + 23)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          if (LDA_VAL(i + 5) && LDY_VAL(i + 6) && ADD_IM(i + 7) && STA_BP2(i + 8) && SCC(i + 9) && INY(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsty :bp2+1")) {
            rtl.rcArrW(listing,i + 12,"\tldy :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 13,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 16,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 19,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 22,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 24,"");
            return false;
          };
          if (MWY_BP2(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN-1,x") && ADD_IM(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && ADC_IM(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN-1+STACKWIDTH,x")) {
            rtl.rcArrW(listing,i + 6,"\tlda :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"\ttay");
            rtl.rcArrW(listing,i + 13,"\tlda " + GetString$1(i + 1));
            rtl.rcArrW(listing,i + 16,"\tlda " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 19,"\tlda " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 22,"\tlda " + GetString$1(i + 4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 24,"");
            return false;
          };
        };
        if (INX(i) && MVA(i + 1) && LDA_VAL(i + 2) && (ADD_SUB_STACK(i + 3) || AND_ORA_EOR_STACK(i + 3)) && STA_VAL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 3,pas.System.Copy(rtl.rcArrR(listing,i + 3),1,5) + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tjsr movZTMP_aBX") && DEX(i + 1) && (pas.System.Pos("mva :STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) && DEX(i + 3)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"\tmva :ztmp8 " + pas.System.Copy(rtl.rcArrR(listing,i + 2),21,256));
          return false;
        };
        if (LDA_VAL(i) && (LDA_IM(i) === false) && STA_BP2(i + 1) && (rtl.rcArrR(listing,i + 2) === (rtl.rcArrR(listing,i) + "+1")) && STA_BP2_1(i + 3) && LDY(i + 4)) if (pas.System.Pos(rtl.rcArrR(listing,i),rtl.rcArrR(listing,i + 2)) > 0) {
          rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (MWY_BP2(i) && LDY_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tmva (:bp2),y :STACKORIGIN,x") && DEX(i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tmva (:bp2),y :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (MWY_BP2(i) && LDY_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tmva (:bp2),y :STACKORIGIN+1,x") && DEX(i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tmva (:bp2),y :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 12) && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN-1,x") && (AND_ORA_EOR_VAL(i + 1) || ADD_SUB_VAL(i + 1)) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (AND_ORA_EOR_VAL(i + 4) || ADC_SBC_VAL(i + 4)) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && (AND_ORA_EOR_VAL(i + 7) || ADC_SBC_VAL(i + 7)) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && (AND_ORA_EOR_VAL(i + 10) || ADC_SBC_VAL(i + 10)) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x")) {
          rtl.rcArrW(listing,i + 12,"\tsta :STACKORIGIN+STACKWIDTH*3,x");
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
          rtl.rcArrW(listing,i + 10,"\tlda :STACKORIGIN+STACKWIDTH*3,x");
          rtl.rcArrW(listing,i + 9,"\tsta :STACKORIGIN+STACKWIDTH*2,x");
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 7,"\tlda :STACKORIGIN+STACKWIDTH*2,x");
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,"\tlda :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 6) && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN-1,x") && (AND_ORA_EOR_VAL(i + 1) || ADD_SUB_VAL(i + 1)) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (AND_ORA_EOR_VAL(i + 4) || ADC_SBC_VAL(i + 4)) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH,x")) {
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,"\tlda :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 6) && LDA_VAL(i) && (AND_ORA_EOR_VAL(i + 1) || ADD_SUB_VAL(i + 1)) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 3) && (AND_ORA_EOR_VAL(i + 4) || ADC_SBC_VAL(i + 4)) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH,x")) {
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 10) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 8)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (DEX(i + 12) && LDY_IM_0(i) && LDA_STACK(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && LDY(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11)) if (argMatch(i + 1,i + 4) && argMatch(i + 1,i + 10)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (DEX(i + 11) && LDY_IM_0(i) && LDA_STACK(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && LDA_STACK(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && STA_VAL(i + 10)) if (argMatch(i + 1,i + 4) && argMatch(i + 1,i + 9)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_IM(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && DEX(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN+1,x")) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tsta :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN,x") && AND_ORA_EOR(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN,x")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDY(i) && MVA(i + 1) && INX(i + 2) && LDY(i + 3) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3))) {
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (rtl.rcArrR(listing,i) === "\tjsr @hiWORD") {
          rtl.rcArrW(listing,i,"\tmva :STACKORIGIN+STACKWIDTH,x :STACKORIGIN,x");
          Result = false;
        };
        if (DEX(i + 14) && DEX(i + 11) && LDA_A(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && LDA_VAL(i + 9) && STA_VAL(i + 10) && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 13)) {
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (LDY(i) && (rtl.rcArrR(listing,i + 1) === "\tmva (:bp2),y :STACKORIGIN,x") && INY(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tmva (:bp2),y :STACKORIGIN+STACKWIDTH,x") && LDA(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tadd :STACKORIGIN,x") && STA(i + 6) && LDA(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc :STACKORIGIN+STACKWIDTH,x") && STA(i + 9)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,"\tadd (:bp2),y");
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,"\tiny");
          rtl.rcArrW(listing,i + 8,"\tadc (:bp2),y");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tsta :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 1) === "\tasl :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 2) === "\tldy :STACKORIGIN,x")) {
          rtl.rcArrW(listing,i,"\tasl @");
          rtl.rcArrW(listing,i + 1,"\ttay");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 5) === "\tasl :STACKORIGIN,x") && ROL_A(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 3) && TYA(i) && AND_ORA_EOR_STACK(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x")) if (pas.System.Pos(":STACKORIGIN-1,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 1),1,5) + ":STACKORIGIN,x");
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\ttya");
          return false;
        };
        if (DEX(i + 3) && TYA(i) && AND_ORA_EOR_STACK(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 1),1,5) + ":STACKORIGIN+1,x");
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\ttya");
          return false;
        };
        if (MVA(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_STACK(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 2),1,5) + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (DEX(i + 3) && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x")) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 3) && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x")) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 3) && LDA_VAL(i) && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x")) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 3) && LDA_VAL(i) && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN+1,x")) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 3) && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN-1,x") && AND_ORA_EOR_STACK(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 1),1,5) + ":STACKORIGIN+1,x");
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          return false;
        };
        if (DEX(i + 3) && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_STACK(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN+1,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 1),1,5) + ":STACKORIGIN+2,x");
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN+1,x");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && INX(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tmva #$10 :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 4) === "\tjsr shlEAX_CL.WORD")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0)) {
          rtl.rcArrW(listing,i + 2,"\tmva " + GetString$1(i) + " :STACKORIGIN+STACKWIDTH*2,x");
          rtl.rcArrW(listing,i + 3,"\tmva " + GetString$1(i + 1) + " :STACKORIGIN+STACKWIDTH*3,x");
          rtl.rcArrW(listing,i + 4,"\tinx");
          rtl.rcArrW(listing,i,"\tmva #$00 :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"\tmva #$00 :STACKORIGIN+STACKWIDTH,x");
          return false;
        };
        if (MVA(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN,x") && ADD_SUB(i + 2) && STA_A(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_SBC(i + 5) && STA_A(i + 6)) if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && (IY(i + 1) === false) && ADD_SUB_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN,x") && LDA_VAL(i + 4) && (IY(i + 4) === false) && ADC_SBC_VAL(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 7) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11) && (LDA_A(i + 12) === false)) {
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 11));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          if (DEX(i + 12)) {
            rtl.rcArrW(listing,i + 1,"\tldy :STACKORIGIN,x");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 12,"");
          } else rtl.rcArrW(listing,i + 1,"\tldy :STACKORIGIN-1,x");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if (STA_BP2_Y(i + 21) && MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && LDA_VAL(i + 4) && ADD_SUB(i + 5) && STA_BP2(i + 6) && LDA_VAL(i + 7) && ADC_SBC(i + 8) && STA_BP2_1(i + 9) && LDY_IM_0(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN,x") && STA_BP2_Y(i + 12) && INY(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_BP2_Y(i + 15) && INY(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_BP2_Y(i + 18) && INY(i + 19) && (rtl.rcArrR(listing,i + 20) === "\tlda :STACKORIGIN+STACKWIDTH*3,x")) if ((pas.System.Pos(":STACKORIGIN-1,x",rtl.rcArrR(listing,i + 5)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 8)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 11,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 14,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 17,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 20,"\tlda " + GetString$1(i + 3));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (STA_BP2_Y(i + 13) && MVA(i) && MVA(i + 1) && LDA_VAL(i + 2) && ADD_SUB(i + 3) && STA_BP2(i + 4) && LDA_VAL(i + 5) && ADC_SBC(i + 6) && STA_BP2_1(i + 7) && LDY_IM_0(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN,x") && STA_BP2_Y(i + 10) && INY(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN+STACKWIDTH,x")) if ((pas.System.Pos(":STACKORIGIN-1,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0)) {
          rtl.rcArrW(listing,i + 9,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 12,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && INX(i + 4) && LDA_VAL(i + 5) && ADD_SUB_VAL(i + 6) && STA_VAL(i + 7) && LDA(i + 8) && ADC_SBC(i + 9) && STA(i + 10) && LDA(i + 11) && ADC_SBC(i + 12) && STA(i + 13) && LDA(i + 14) && ADC_SBC(i + 15) && STA(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN-1,x") && STA(i + 18) && (rtl.rcArrR(listing,i + 19) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && STA(i + 20) && (rtl.rcArrR(listing,i + 21) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && STA(i + 22) && (rtl.rcArrR(listing,i + 23) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && STA(i + 24)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 17,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 19,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 21,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 23,"\tlda " + GetString$1(i + 3));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 8) && LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 16)) {
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (DEX(i + 12) && LDA_A(i) && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && AND_ORA_EOR_VAL(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 6) && AND_ORA_EOR_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 9) && AND_ORA_EOR_VAL(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 18) && (rtl.rcArrR(listing,i + 19) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 20)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 14));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 16));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 18));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 20));
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          rtl.rcArrW(listing,i + 20,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 12) === "\tldy :STACKORIGIN-1,x") && LDA_A(i) && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA_A(i + 3) && AND_ORA_EOR_VAL(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_A(i + 6) && AND_ORA_EOR_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_A(i + 9) && AND_ORA_EOR_VAL(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_VAL(i + 18) && (rtl.rcArrR(listing,i + 19) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_VAL(i + 20)) {
          listing_tmp[0] = rtl.rcArrR(listing,i + 12);
          listing_tmp[1] = rtl.rcArrR(listing,i);
          listing_tmp[2] = rtl.rcArrR(listing,i + 1);
          listing_tmp[3] = rtl.rcArrR(listing,i + 14);
          listing_tmp[4] = rtl.rcArrR(listing,i + 3);
          listing_tmp[5] = rtl.rcArrR(listing,i + 4);
          listing_tmp[6] = rtl.rcArrR(listing,i + 16);
          listing_tmp[7] = rtl.rcArrR(listing,i + 6);
          listing_tmp[8] = rtl.rcArrR(listing,i + 7);
          listing_tmp[9] = rtl.rcArrR(listing,i + 18);
          listing_tmp[10] = rtl.rcArrR(listing,i + 9);
          listing_tmp[11] = rtl.rcArrR(listing,i + 10);
          listing_tmp[12] = rtl.rcArrR(listing,i + 20);
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          rtl.rcArrW(listing,i + 5,listing_tmp[5]);
          rtl.rcArrW(listing,i + 6,listing_tmp[6]);
          rtl.rcArrW(listing,i + 7,listing_tmp[7]);
          rtl.rcArrW(listing,i + 8,listing_tmp[8]);
          rtl.rcArrW(listing,i + 9,listing_tmp[9]);
          rtl.rcArrW(listing,i + 10,listing_tmp[10]);
          rtl.rcArrW(listing,i + 11,listing_tmp[11]);
          rtl.rcArrW(listing,i + 12,listing_tmp[12]);
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          rtl.rcArrW(listing,i + 20,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 12) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i) === "\tlda :STACKORIGIN,x") && AND_ORA_EOR_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN+STACKWIDTH,x") && AND_ORA_EOR_VAL(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && AND_ORA_EOR_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && AND_ORA_EOR_VAL(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN,x") && AND_ORA_EOR(i + 14) && STA_VAL(i + 15) && (rtl.rcArrR(listing,i + 16) === "\tlda :STACKORIGIN+STACKWIDTH,x") && AND_ORA_EOR(i + 17) && STA_VAL(i + 18) && (rtl.rcArrR(listing,i + 19) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && AND_ORA_EOR(i + 20) && STA_VAL(i + 21) && (rtl.rcArrR(listing,i + 22) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && AND_ORA_EOR(i + 23) && STA_VAL(i + 24)) {
          listing_tmp[0] = rtl.rcArrR(listing,i + 12);
          listing_tmp[1] = rtl.rcArrR(listing,i);
          listing_tmp[2] = rtl.rcArrR(listing,i + 1);
          listing_tmp[3] = rtl.rcArrR(listing,i + 14);
          listing_tmp[4] = rtl.rcArrR(listing,i + 15);
          listing_tmp[5] = rtl.rcArrR(listing,i + 3);
          listing_tmp[6] = rtl.rcArrR(listing,i + 4);
          listing_tmp[7] = rtl.rcArrR(listing,i + 17);
          listing_tmp[8] = rtl.rcArrR(listing,i + 18);
          listing_tmp[9] = rtl.rcArrR(listing,i + 6);
          listing_tmp[10] = rtl.rcArrR(listing,i + 7);
          listing_tmp[11] = rtl.rcArrR(listing,i + 20);
          listing_tmp[12] = rtl.rcArrR(listing,i + 21);
          listing_tmp[13] = rtl.rcArrR(listing,i + 9);
          listing_tmp[14] = rtl.rcArrR(listing,i + 10);
          listing_tmp[15] = rtl.rcArrR(listing,i + 23);
          listing_tmp[16] = rtl.rcArrR(listing,i + 24);
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          rtl.rcArrW(listing,i + 5,listing_tmp[5]);
          rtl.rcArrW(listing,i + 6,listing_tmp[6]);
          rtl.rcArrW(listing,i + 7,listing_tmp[7]);
          rtl.rcArrW(listing,i + 8,listing_tmp[8]);
          rtl.rcArrW(listing,i + 9,listing_tmp[9]);
          rtl.rcArrW(listing,i + 10,listing_tmp[10]);
          rtl.rcArrW(listing,i + 11,listing_tmp[11]);
          rtl.rcArrW(listing,i + 12,listing_tmp[12]);
          rtl.rcArrW(listing,i + 13,listing_tmp[13]);
          rtl.rcArrW(listing,i + 14,listing_tmp[14]);
          rtl.rcArrW(listing,i + 15,listing_tmp[15]);
          rtl.rcArrW(listing,i + 16,listing_tmp[16]);
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          rtl.rcArrW(listing,i + 20,"");
          rtl.rcArrW(listing,i + 21,"");
          rtl.rcArrW(listing,i + 22,"");
          rtl.rcArrW(listing,i + 23,"");
          rtl.rcArrW(listing,i + 24,"");
          return false;
        };
        if (DEX(i + 4) && LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 8)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 12) && LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && LDA_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_VAL(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_VAL(i + 11)) {
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 11));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          listing_tmp[0] = "\tmva " + GetString$1(i + 2) + " :STACKORIGIN+STACKWIDTH,x";
          listing_tmp[1] = "\tmva " + GetString$1(i + 3) + " :STACKORIGIN+STACKWIDTH*2,x";
          listing_tmp[2] = "\tmva " + GetString$1(i + 4) + " :STACKORIGIN+STACKWIDTH*3,x";
          listing_tmp[3] = "\tinx";
          listing_tmp[4] = rtl.rcArrR(listing,i + 1);
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          listing_tmp[0] = "\tmva " + GetString$1(i + 2) + " :STACKORIGIN+STACKWIDTH,x";
          listing_tmp[1] = "\tinx";
          listing_tmp[2] = rtl.rcArrR(listing,i + 1);
          listing_tmp[3] = rtl.rcArrR(listing,i + 3);
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          return false;
        };
        if (MVA(i) && (pas.System.Pos(" :STACK",rtl.rcArrR(listing,i)) > 0) && LDA_STACK(i + 1) && AND_ORA_EOR(i + 2) && STA_STACK(i + 3)) if (argMatch(i + 1,i + 3) && (pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256),rtl.rcArrR(listing,i)) > 0)) {
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tjsr @hiWORD")) if ((pas.System.Pos(" :STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0)) {
          rtl.rcArrW(listing,i,"\tmva " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,pas.System.Pos(":STACK",rtl.rcArrR(listing,i + 1)) - 6) + ":STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (TAY(i + 7) && LDA(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && ASL_A(i + 1) && TAY(i + 2) && MVA(i + 3) && INX(i + 4) && LDA(i + 5) && ASL_A(i + 6)) {
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (TAY(i + 8) && LDA(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 6)) && ASL_A(i + 1) && TAY(i + 2) && LDA(i + 3) && STA(i + 4) && INX(i + 5) && LDA(i + 6) && ASL_A(i + 7)) {
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if ((MVA(i) === false) && MVA(i + 1) && MVA(i + 2) && ((pas.System.Pos("+",rtl.rcArrR(listing,i + 3)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,i + 3)) === 1))) {
          tmp = rtl.rcArrR(listing,i + 3);
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,tmp);
          return false;
        };
        if ((pas.System.Pos("+",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,i)) === 1)) {
          tmp = pas.System.Copy(rtl.rcArrR(listing,i),2,256);
          yes = false;
          for (var $l = i + 1, $end = l - 1; $l <= $end; $l++) {
            p = $l;
            if (MWY_BP2(p) && (rtl.rcArrR(listing,p) === ("\tmwy " + tmp + " :bp2"))) {
              rtl.rcArrW(listing,p,"")}
             else if (pas.System.Pos("(:bp2),y",rtl.rcArrR(listing,p)) > 0) {
              if (pas.System.Pos("mva (:bp2),y",rtl.rcArrR(listing,p)) > 0) {
                rtl.rcArrW(listing,p,pas.System.Copy(rtl.rcArrR(listing,p),1,5) + "(" + tmp + "),y" + pas.System.Copy(rtl.rcArrR(listing,p),14,256))}
               else rtl.rcArrW(listing,p,pas.System.Copy(rtl.rcArrR(listing,p),1,5) + "(" + tmp + "),y");
              yes = true;
            } else if ((pas.System.Pos("+",rtl.rcArrR(listing,p)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,p)) === 1)) {
              if (rtl.rcArrR(listing,p).length === 1) rtl.rcArrW(listing,p,"");
              break;
            };
          };
          if (yes) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
        };
        if (MVA(i) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tjsr imulBYTE")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tjsr @expandToREAL")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          listing_tmp[0] = "\tmva " + GetString$1(i + 2) + " :STACKORIGIN+STACKWIDTH*3,x";
          listing_tmp[1] = "\tmva " + GetString$1(i + 1) + " :STACKORIGIN+STACKWIDTH*2,x";
          listing_tmp[2] = "\tmva " + GetString$1(i) + " :STACKORIGIN+STACKWIDTH,x";
          listing_tmp[3] = "\tmva #$00 :STACKORIGIN,x";
          rtl.rcArrW(listing,i,listing_tmp[3]);
          rtl.rcArrW(listing,i + 1,listing_tmp[2]);
          rtl.rcArrW(listing,i + 2,listing_tmp[1]);
          rtl.rcArrW(listing,i + 3,listing_tmp[0]);
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        return Result;
      };
      function opt_STACK_INX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = true;
        if (DEX(i) && INX(i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (DEX(i + 1) && INX(i)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (DEX(i + 3) && INX(i) && LDA_VAL(i + 1) && STA_VAL(i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 4) && INX(i) && LDA_VAL(i + 1) && AND_ORA_EOR_VAL(i + 2) && STA_VAL(i + 3)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (DEX(i + 5) && INX(i) && LDA_VAL(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (DEX(i + 9) && INX(i) && LDA_VAL(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (DEX(i + 13) && INX(i) && LDA_VAL(i + 1) && (AND_ORA_EOR_VAL(i + 2) || ADD_SUB_VAL(i + 2)) && STA_VAL(i + 3) && LDA_VAL(i + 4) && (AND_ORA_EOR_VAL(i + 5) || ADC_SBC_VAL(i + 5)) && STA_VAL(i + 6) && LDA_VAL(i + 7) && (AND_ORA_EOR_VAL(i + 8) || ADC_SBC_VAL(i + 8)) && STA_VAL(i + 9) && LDA_VAL(i + 10) && (AND_ORA_EOR_VAL(i + 11) || ADC_SBC_VAL(i + 11)) && STA_VAL(i + 12)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 13,"");
          return false;
        };
        if (DEX(i + 7) && INX(i) && LDA_VAL(i + 1) && (AND_ORA_EOR_VAL(i + 2) || ADD_SUB_VAL(i + 2)) && STA_VAL(i + 3) && LDA_VAL(i + 4) && (AND_ORA_EOR_VAL(i + 5) || ADC_SBC_VAL(i + 5)) && STA_VAL(i + 6)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (DEX(i + 11) && INX(i) && LDA_VAL(i + 1) && (AND_ORA_EOR_VAL(i + 2) || ADD_SUB_VAL(i + 2)) && STA_VAL(i + 3) && LDA_VAL(i + 4) && (AND_ORA_EOR_VAL(i + 5) || ADC_SBC_VAL(i + 5)) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8) && LDA_VAL(i + 9) && STA_VAL(i + 10)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if (DEX(i + 5) && INX(i) && LDY_VAL(i + 1) && INY(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (DEX(i + 3) && INX(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 4) && INX(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (DEX(i + 6) && INX(i) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (DEX(i + 4) && INX(i) && (rtl.rcArrR(listing,i + 1) === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 2) && STA_VAL(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tldy :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (DEX(i + 6) && INX(i) && (rtl.rcArrR(listing,i + 1) === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tldy :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (DEX(i + 10) && INX(i) && (rtl.rcArrR(listing,i + 1) === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9)) {
          rtl.rcArrW(listing,i + 1,"\tldy :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if (DEX(i + 14) && INX(i) && MWY_BP2(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 3) && STA_VAL(i + 4) && INY(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && INY(i + 8) && LDA_VAL(i + 9) && STA_VAL(i + 10) && INY(i + 11) && LDA_VAL(i + 12) && STA_VAL(i + 13)) {
          rtl.rcArrW(listing,i + 2,"\tldy :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 14,"");
          return false;
        };
        if (DEX(i + 6) && INX(i) && MVA(i + 1) && MWY_BP2(i + 2) && LDY_VAL(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (DEX(i + 5) && INX(i) && MWY_BP2(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tldy :STACKORIGIN-1,x") && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
          rtl.rcArrW(listing,i + 2,"\tldy :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (DEX(i + 3) && INX(i) && LDA_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN+1,x")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (DEX(i + 2) && INX(i) && MVA(i + 1) && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN+1,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 2) && INX(i) && MVA(i + 1) && LDY_1(i + 3)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tmva " + GetString$1(i + 1) + " :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (DEX(i + 2) && INX(i) && MVA(i + 1) && MWY_BP2(i + 3) && LDY_VAL(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN+1,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (DEX(i + 11) && INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && ADD_SUB_VAL(i + 6) && STA_VAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_SBC_VAL(i + 9) && STA_VAL(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (DEX(i + 7) && INX(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && ADC_SBC_VAL(i + 5) && STA_VAL(i + 6)) {
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 4,"\tlda :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (DEX(i + 7) && INX(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && ADC_SBC_VAL(i + 5) && STA_VAL(i + 6)) {
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (DEX(i + 5) && MVA(i + 1) && MVA(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (DEX(i + 6) && LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (DEX(i + 7) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && ADC_SBC_VAL(i + 5) && STA_VAL(i + 6)) {
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,"\tlda :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        return Result;
      };
      function opt_STACK_ADD(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        Result = true;
        if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 8)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (LDA_STACK(i) && ((rtl.rcArrR(listing,i + 1) === "\tadd #$01") || (rtl.rcArrR(listing,i + 1) === "\tsub #$01")) && STA_STACK(i + 2) && (INX(i + 3) || DEX(i + 3))) if (argMatch(i,i + 2)) {
          if (rtl.rcArrR(listing,i + 1) === "\tadd #$01") {
            rtl.rcArrW(listing,i + 1,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
           else rtl.rcArrW(listing,i + 1,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA_VAL(i) && (IY(i) === false) && ((rtl.rcArrR(listing,i + 1) === "\tadd #$01") || (rtl.rcArrR(listing,i + 1) === "\tsub #$01")) && STA_STACK(i + 2) && (INX(i + 3) || DEX(i + 3)) && (INX(i + 4) === false) && (DEX(i + 4) === false)) {
          if (rtl.rcArrR(listing,i + 1) === "\tadd #$01") {
            rtl.rcArrW(listing,i + 1,"\tiny")}
           else rtl.rcArrW(listing,i + 1,"\tdey");
          rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 2,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && ADD_SUB_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tldy :STACKORIGIN-1,x") && STA_VAL(i + 4) && DEX(i + 5)) {
          rtl.rcArrW(listing,i + 3,"\tldy :STACKORIGIN,x");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (INX(i) && LDA_VAL(i + 1) && ADD_SUB_VAL(i + 2) && STA_VAL(i + 3) && DEX(i + 4)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (LDA_VAL(i + 1) && (IY(i + 1) === false) && (rtl.rcArrR(listing,i + 2) === "\tadd #$01") && TAY(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 2,"\tiny");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA(i + 1) && ADD_IM_0(i + 2) && STA(i + 3) && LDA(i + 4) && ADC(i + 5) && STA(i + 6)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          return false;
        };
        if (LDA_IM_0(i + 1) && ADD(i + 2) && STA(i + 3) && LDA(i + 4) && ADC(i + 5) && STA(i + 6)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          return false;
        };
        if (LDA_A(i + 1) && ADD_IM_0(i + 2) && STA_A(i + 3) && (INY(i + 4) === false) && (ADC(i + 5) === false)) {
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA_VAL(i + 3) && (LDA_IM(i + 3) === false) && ADD_STACK(i + 4) && TAY(i + 5) && (rtl.rcArrR(listing,i + 6) === (rtl.rcArrR(listing,i + 3) + "+1")) && ADC_STACK(i + 7) && STA_BP_1(i + 8) && LDA_BP_Y(i + 9) && STA(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0)) {
          rtl.rcArrW(listing,i + 4,"\tadd " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 7,"\tadc " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          if (ADC_IM_0(i + 7)) if ((pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "+1") === pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256)) {
            rtl.rcArrW(listing,i + 3,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"\tlda (:bp2),y");
          };
          return false;
        };
        if (MVA(i + 1) && MVA(i + 2) && LDA(i + 3) && ADD_STACK(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_STACK(i + 7) && STA(i + 8)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0)) {
          rtl.rcArrW(listing,i + 4,"\tadd " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 7,"\tadc " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDY_STACK(i + 7) && MWY_BP2(i) && LDA_BP2(i + 1) && ADD_IM(i + 2) && DATA(i + 2) && STA_BP2(i + 3) && LDA_BP2_1(i + 4) && ADC_IM_0(i + 5) && STA_BP2_1(i + 6)) {
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (INX(p) && MVA_IM(p + 1) && (MVA(p + 2) || STA(p + 2)) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,p + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,p + 2)) > 0)) {
              rtl.rcArrW(listing,i + 7,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256) + "+$" + pas.SysUtils.IntToHex(GetBYTE(p + 1),2));
              rtl.rcArrW(listing,p + 1,"");
              rtl.rcArrW(listing,p + 2,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              return false;
            };
          };
          if (Result) {
            rtl.rcArrW(listing,i + 1,"\tldy " + GetString$1(i) + "+1");
            rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
            rtl.rcArrW(listing,i + 4,"\tscc");
            rtl.rcArrW(listing,i + 5,"\tiny");
            rtl.rcArrW(listing,i + 6,"\tsty :bp2+1");
            return false;
          };
        };
        if (LDY_STACK(i + 6) && LDA_A(i) && ADD_SUB_VAL(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_A(i + 5) && (SKIP(i + 7) === false)) if (argMatch(i + 2,i + 6)) {
          rtl.rcArrW(listing,i + 2,"\ttay");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        return Result;
      };
      function opt_STACK_CMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = true;
        if (LAB_A(i) && STY_STACK(i + 1) && LDA_STACK(i + 2) && AND_ORA_EOR_STACK(i + 3)) if (argMatch(i + 1,i + 3) && (argMatch(i + 1,i + 2) === false)) {
          rtl.rcArrW(listing,i + 1,"\ttya");
          rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 3),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LAB_A(i) && STY_STACK(i + 1) && LDA_STACK(i + 2)) if (argMatch(i + 1,i + 2)) {
          rtl.rcArrW(listing,i + 1,"\ttya");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LAB_A(i) && TYA(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && DEX(i + 3)) {
          rtl.rcArrW(listing,i + 2,"\tsty :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 1,"\tdex");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LAB_A(i) && TYA(i + 1) && STA_VAL(i + 2) && DEX(i + 3)) {
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        if (LAB_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsty :STACKORIGIN-1,x") && DEX(i + 2)) {
          rtl.rcArrW(listing,i + 2,"\tsty :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        if (LAB_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsty :STACKORIGIN,x") && DEX(i + 2)) {
          rtl.rcArrW(listing,i + 2,"\tsty :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        if (LAB_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsty :STACKORIGIN+1,x") && DEX(i + 2)) {
          rtl.rcArrW(listing,i + 2,"\tsty :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 1,"\tdex");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tsty :STACKORIGIN,x") && DEX(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tlda :STACKORIGIN+1,x")) {
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\ttya");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDY_1(i) && LAB_A(i + 12) && LAB_A(i + 15) && STY_STACK(i + 16) && DEX(i + 17)) {
          if (rtl.rcArrR(listing,i + 16) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 17,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 16,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 16) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 17,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 16,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 16) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 17,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 16,"\tdex");
            return false;
          };
        };
        if (LDY_1(i) && LAB_A(i + 6) && LAB_A(i + 10) && STY_STACK(i + 11) && DEX(i + 12)) {
          if (rtl.rcArrR(listing,i + 11) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 12,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 11,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 11) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 12,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 11,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 11) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 12,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 11,"\tdex");
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 12) && STY_STACK(i + 13) && DEX(i + 14)) {
          if (rtl.rcArrR(listing,i + 13) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 14,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 13,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 13) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 14,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 13,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 13) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 14,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 13,"\tdex");
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 13) && STY_STACK(i + 14) && DEX(i + 15)) {
          if (rtl.rcArrR(listing,i + 14) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 15,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 14,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 14) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 15,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 14,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 14) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 15,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 14,"\tdex");
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 19) && STY_STACK(i + 20) && DEX(i + 21)) {
          if (rtl.rcArrR(listing,i + 20) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 21,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 20,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 20) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 21,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 20,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 20) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 21,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 20,"\tdex");
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 20) && STY_STACK(i + 21) && DEX(i + 22)) {
          if (rtl.rcArrR(listing,i + 21) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 22,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 21,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 21) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 22,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 21,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 21) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 22,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 21,"\tdex");
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 26) && STY_STACK(i + 27) && DEX(i + 28)) {
          if (rtl.rcArrR(listing,i + 27) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 28,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 27,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 27) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 28,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 27,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 27) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 28,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 27,"\tdex");
            return false;
          };
        };
        if (LOCAL(i + 1) && LAB_A(i + 27) && STY_STACK(i + 28) && DEX(i + 29)) {
          if (rtl.rcArrR(listing,i + 28) === "\tsty :STACKORIGIN-1,x") {
            rtl.rcArrW(listing,i + 29,"\tsty :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 28,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 28) === "\tsty :STACKORIGIN,x") {
            rtl.rcArrW(listing,i + 29,"\tsty :STACKORIGIN+1,x");
            rtl.rcArrW(listing,i + 28,"\tdex");
            return false;
          };
          if (rtl.rcArrR(listing,i + 28) === "\tsty :STACKORIGIN+1,x") {
            rtl.rcArrW(listing,i + 29,"\tsty :STACKORIGIN+2,x");
            rtl.rcArrW(listing,i + 28,"\tdex");
            return false;
          };
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (MVA(i) && LDY_1(i + 1) && LDA_VAL(i + 2) && CMP_VAL(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && TYA(i + 7) && AND_ORA_EOR_STACK(i + 8)) if ((pas.System.Pos(":STACKORIGIN+1,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+1,x",rtl.rcArrR(listing,i + 8)) > 0)) {
          rtl.rcArrW(listing,i + 8,pas.System.Copy(rtl.rcArrR(listing,i + 8),1,5) + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 2) === "\tcmp :STACKORIGIN,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,"\tcmp :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN,x") && (rtl.rcArrR(listing,i + 2) === "\tcmp :STACKORIGIN+1,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,"\tcmp :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tcmp :STACKORIGIN-1,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,"\tcmp :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tcmp :STACKORIGIN,x") && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,"\tcmp :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN,x") && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN+1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN,x") && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN+1,x") && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && AND_ORA_EOR_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && AND_ORA_EOR_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && CMP_VAL(i + 2) && BNE(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN-1,x") && CMP_VAL(i + 5) && LAB_A(i + 6) && SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN+STACKWIDTH,x") && CMP_VAL(i + 2) && BNE(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && CMP_VAL(i + 5) && LAB_A(i + 6) && SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,"\tlda :STACKORIGIN+1,x");
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+1+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tlda :STACKORIGIN+1+STACKWIDTH,x") && CMP_VAL(i + 2) && BNE(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN+1,x") && CMP_VAL(i + 5) && LAB_A(i + 6) && SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,"\tlda :STACKORIGIN+2,x");
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN+2+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (MVA_(i + 1) && MVA_(i + 2) && MVA_(i + 3) && MVA_(i + 4) && INX(i + 5) && MVA_(i + 6) && MVA_(i + 7) && MVA_(i + 8) && MVA_(i + 9) && LDY_1(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 12) === "\tcmp :STACKORIGIN+STACKWIDTH*3,x") && BNE(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 15) === "\tcmp :STACKORIGIN+STACKWIDTH*2,x") && BNE(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 18) === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 19) && (rtl.rcArrR(listing,i + 20) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 21) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 8)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 9)) > 0)) {
          rtl.rcArrW(listing,i + 11,"\tlda " + GetString$1(i + 4));
          rtl.rcArrW(listing,i + 12,"\tcmp " + GetString$1(i + 9));
          rtl.rcArrW(listing,i + 14,"\tlda " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 15,"\tcmp " + GetString$1(i + 8));
          rtl.rcArrW(listing,i + 17,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 18,"\tcmp " + GetString$1(i + 7));
          rtl.rcArrW(listing,i + 20,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 21,"\tcmp " + GetString$1(i + 6));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && BNE(i + 3) && LDA_VAL(i + 4) && CMP_VAL(i + 5) && BNE(i + 6) && LDA_VAL(i + 7) && CMP_VAL(i + 8) && BNE(i + 9) && LDA_VAL(i + 10) && CMP_VAL(i + 11) && LAB_A(i + 12)) {
          if (SKIP(i + 13) && SKIP(i + 14) && DEY(i + 15) && LAB_A(i + 16) && DEX(i + 17)) {
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
          if (SKIP(i + 13) && DEY(i + 14) && LAB_A(i + 15) && DEX(i + 16)) {
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
        };
        if (MVA_(i + 1) && MVA_(i + 2) && INX(i + 3) && MVA_(i + 4) && MVA_(i + 5) && LDY_1(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 8) === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 11) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          rtl.rcArrW(listing,i + 7,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 8,"\tcmp " + GetString$1(i + 5));
          rtl.rcArrW(listing,i + 10,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 11,"\tcmp " + GetString$1(i + 4));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if ((MVA(i) === false) && INX(i + 1) && MVA_(i + 2) && MVA_(i + 3) && LDY_1(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 6) === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 9) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 6,"\tcmp " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 9,"\tcmp " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((MVA(i) === false) && MVA_(i + 1) && MVA_(i + 2) && LDY_1(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 5) === "\tcmp :STACKORIGIN+STACKWIDTH,x") && BNE(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 8) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 5,"\tcmp " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 8,"\tcmp " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LAB_A(i + 6) && LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && BNE(i + 3) && LDA_VAL(i + 4) && CMP_VAL(i + 5)) {
          if (SKIP(i + 7) && SKIP(i + 8) && DEY(i + 9) && LAB_A(i + 10) && DEX(i + 11)) {
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
          if (SKIP(i + 7) && DEY(i + 8) && LAB_A(i + 9) && DEX(i + 10)) {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
        };
        if (MVA_(i + 1) && LDY_1(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN,x") && BEQ(i + 4)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (MVA_(i + 1) && INX(i + 2) && MVA_(i + 3) && LDY_1(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 6) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 5,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 6,"\tcmp " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (MVA_(i) && LDY_1(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 3) === "\tcmp :STACKORIGIN,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tcmp " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (MVA_(i + 1) && DEX(i + 2) && MWY_BP2(i + 3) && LDY_IM(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tmva (:bp2),y :STACKORIGIN+2,x") && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+1,x") && (rtl.rcArrR(listing,i + 7) === "\tcmp :STACKORIGIN+2,x")) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 7,"\tcmp " + GetString$1(i + 5));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && SKIP(i + 2) && DEY(i + 3) && LAB_A(i + 4) && DEX(i + 5)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && SKIP(i + 4) && DEY(i + 5) && LAB_A(i + 6) && DEX(i + 7)) {
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && DEX(i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (MVA_(i + 1) && MVA_(i + 2) && MVA_(i + 3) && MVA_(i + 4) && INX(i + 5) && MVA_(i + 6) && MVA_(i + 7) && MVA_(i + 8) && MVA_(i + 9) && LDY_1(i + 10) && LOCAL(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN-1+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 13) === "\tsub :STACKORIGIN+STACKWIDTH*3,x") && (rtl.rcArrR(listing,i + 14) === "\tbne L4") && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN-1+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 16) === "\tcmp :STACKORIGIN+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 17) === "\tbne L1") && (rtl.rcArrR(listing,i + 18) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 19) === "\tcmp :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 20) === "\tbne L1") && (rtl.rcArrR(listing,i + 21) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 22) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 8)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 9)) > 0)) {
          rtl.rcArrW(listing,i + 12,"\tlda " + GetString$1(i + 4));
          rtl.rcArrW(listing,i + 13,"\tsub " + GetString$1(i + 9));
          rtl.rcArrW(listing,i + 15,"\tlda " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 16,"\tcmp " + GetString$1(i + 8));
          rtl.rcArrW(listing,i + 18,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 19,"\tcmp " + GetString$1(i + 7));
          rtl.rcArrW(listing,i + 21,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 22,"\tcmp " + GetString$1(i + 6));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 23) && LDY_1(i) && LOCAL(i + 1) && LDA_VAL(i + 2) && SUB(i + 3) && (SUB_STACK(i + 3) === false) && (rtl.rcArrR(listing,i + 4) === "\tbne L4") && LDA_VAL(i + 5) && CMP_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tbne L1") && LDA_VAL(i + 8) && CMP_VAL(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tbne L1") && LDA_VAL(i + 11) && CMP_VAL(i + 12) && (rtl.rcArrR(listing,i + 13) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 14) === "\tbcs L3") && (rtl.rcArrR(listing,i + 15) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 16) === "\tbne L5") && (rtl.rcArrR(listing,i + 17) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 18) === "\tbne L5") && (rtl.rcArrR(listing,i + 19) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 20) === "\teor #$FF") && (rtl.rcArrR(listing,i + 21) === "\tora #$01") && (rtl.rcArrR(listing,i + 22) === "L5")) {
          if (SKIP(i + 24) && SKIP(i + 25) && DEY(i + 26) && LAB_A(i + 27) && DEX(i + 28)) {
            rtl.rcArrW(listing,i + 28,rtl.rcArrR(listing,i + 27));
            rtl.rcArrW(listing,i + 27,rtl.rcArrR(listing,i + 26));
            rtl.rcArrW(listing,i + 26,rtl.rcArrR(listing,i + 25));
            rtl.rcArrW(listing,i + 25,rtl.rcArrR(listing,i + 24));
            rtl.rcArrW(listing,i + 24,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 23,rtl.rcArrR(listing,i + 22));
            rtl.rcArrW(listing,i + 22,rtl.rcArrR(listing,i + 21));
            rtl.rcArrW(listing,i + 21,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 18));
            rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
          if (SKIP(i + 24) && DEY(i + 25) && LAB_A(i + 26) && DEX(i + 27)) {
            rtl.rcArrW(listing,i + 27,rtl.rcArrR(listing,i + 26));
            rtl.rcArrW(listing,i + 26,rtl.rcArrR(listing,i + 25));
            rtl.rcArrW(listing,i + 25,rtl.rcArrR(listing,i + 24));
            rtl.rcArrW(listing,i + 24,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 23,rtl.rcArrR(listing,i + 22));
            rtl.rcArrW(listing,i + 22,rtl.rcArrR(listing,i + 21));
            rtl.rcArrW(listing,i + 21,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 18));
            rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
        };
        if (MVA_(i + 1) && MVA_(i + 2) && INX(i + 3) && MVA_(i + 4) && MVA_(i + 5) && LDY_1(i + 6) && LOCAL(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 9) === "\tsub :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 10) === "\tbne L4") && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 12) === "\tcmp :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          rtl.rcArrW(listing,i + 8,"\tlda " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 9,"\tsub " + GetString$1(i + 5));
          rtl.rcArrW(listing,i + 11,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 12,"\tcmp " + GetString$1(i + 4));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (DEX(i + 10) && LDY_1(i) && LDA_VAL(i + 1) && CMP_VAL(i + 2) && LDA_VAL(i + 3) && SBC_IM_0(i + 4) && SVC(i + 5) && (rtl.rcArrR(listing,i + 6) === "\teor #$80") && (BPL(i + 7) || BMI(i + 7)) && DEY(i + 8) && LAB_A(i + 9)) {
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (ENDL(i + 16) && LDY_1(i) && LOCAL(i + 1) && LDA_VAL(i + 2) && SUB(i + 3) && (SUB_STACK(i + 3) === false) && (rtl.rcArrR(listing,i + 4) === "\tbne L4") && LDA_VAL(i + 5) && CMP_VAL(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tbeq L5") && (rtl.rcArrR(listing,i + 8) === "\tlda #$00") && (rtl.rcArrR(listing,i + 9) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 10) === "\tora #$01") && (rtl.rcArrR(listing,i + 11) === "\tbne L5") && (rtl.rcArrR(listing,i + 12) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 13) === "\teor #$FF") && (rtl.rcArrR(listing,i + 14) === "\tora #$01") && (rtl.rcArrR(listing,i + 15) === "L5")) {
          if (SKIP(i + 17) && SKIP(i + 18) && DEY(i + 19) && LAB_A(i + 20) && DEX(i + 21)) {
            rtl.rcArrW(listing,i + 21,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 18));
            rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
          if (SKIP(i + 17) && DEY(i + 18) && LAB_A(i + 19) && DEX(i + 20)) {
            rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 18));
            rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
        };
        if (MVA_(i + 1) && INX(i + 2) && MVA_(i + 3) && LDY_1(i + 4) && LOCAL(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 7) === "\tsub :STACKORIGIN,x")) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 7,"\tsub " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (DEX(i + 8) && LDY_1(i) && LDA_VAL(i + 1) && SUB(i + 2) && (SUB_STACK(i + 2) === false) && SVC(i + 3) && (rtl.rcArrR(listing,i + 4) === "\teor #$80") && (BPL(i + 5) || BMI(i + 5)) && DEY(i + 6) && LAB_A(i + 7)) {
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\tdex");
          return false;
        };
        if (ENDL(i + 9) && LDY_1(i) && LOCAL(i + 1) && LDA_VAL(i + 2) && SUB(i + 3) && (SUB_STACK(i + 3) === false) && (rtl.rcArrR(listing,i + 4) === "\tbeq L5") && (rtl.rcArrR(listing,i + 5) === "\tbvc L5") && (rtl.rcArrR(listing,i + 6) === "\teor #$FF") && (rtl.rcArrR(listing,i + 7) === "\tora #$01") && (rtl.rcArrR(listing,i + 8) === "L5")) {
          if (SKIP(i + 10) && SKIP(i + 11) && DEY(i + 12) && LAB_A(i + 13) && DEX(i + 14)) {
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
          if (SKIP(i + 10) && DEY(i + 11) && LAB_A(i + 12) && DEX(i + 13)) {
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tdex");
            return false;
          };
        };
        if (MVA_(i) && LDY_1(i + 1) && LOCAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tlda :STACKORIGIN-1+STACKWIDTH,x")) if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        return Result;
      };
      function opt_STACK_ADR(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        Result = true;
        if ((LDA_ADR(i + 16) || STA_ADR(i + 17) || LDA_ADR(i + 18) || STA_ADR(i + 19)) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 7) === "\tasl :STACKORIGIN,x") && ROL_A(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 11) && TAY(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          if ((LDA_STACK(i) === false) && (SUB_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && SUB_IM(i + 1)) || (LDA_IM(i) && SUB(i + 1) && (SUB_IM(i + 1) === false))) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA(i + 3) && SBC(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 1,"");
            } else {
              p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
              rtl.rcArrW(listing,i + 1,"");
            };
            p = rtl.rc(p * 2,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\ttay");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            if (LDA_ADR_Y(i + 16)) {
              pas.System.Delete({a: i + 16, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 16)),2);
              rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 16) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 17)) {
              pas.System.Delete({a: i + 17, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 17)),2);
              rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 17) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 18)),2);
              rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 18) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 19)),2);
              rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 19) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            return false;
          };
          if ((LDA_STACK(i) === false) && (ADD_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && ADD_IM(i + 1)) || (LDA_IM(i) && ADD(i + 1) && (ADD_IM(i + 1) === false))) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA(i + 3) && ADC(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 1,"");
            } else {
              p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
              rtl.rcArrW(listing,i + 1,"");
            };
            p = rtl.rc(p * 2,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\ttay");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            if (LDA_ADR_Y(i + 16)) {
              pas.System.Delete({a: i + 16, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 16)),2);
              rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 16) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 17)) {
              pas.System.Delete({a: i + 17, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 17)),2);
              rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 17) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 18)),2);
              rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 18) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 19)),2);
              rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 19) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            return false;
          };
        };
        if ((LDA_ADR(i + 18) || STA_ADR(i + 19) || LDA_ADR(i + 20) || STA_ADR(i + 21) || LDA_ADR(i + 22) || STA_ADR(i + 23) || LDA_ADR(i + 24) || STA_ADR(i + 25)) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 7) === "\tasl :STACKORIGIN,x") && ROL_A(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tasl :STACKORIGIN,x") && ROL_A(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 13) && TAY(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          if ((LDA_STACK(i) === false) && (SUB_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && SUB_IM(i + 1)) || (LDA_IM(i) && SUB(i + 1) && (SUB_IM(i + 1) === false))) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA(i + 3) && SBC(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 1,"");
            } else {
              p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
              rtl.rcArrW(listing,i + 1,"");
            };
            p = rtl.rc(p * 4,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\tasl @");
            rtl.rcArrW(listing,i + 4,"\ttay");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 18)),2);
              rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 18) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 19)),2);
              rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 19) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 20)) {
              pas.System.Delete({a: i + 20, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 20)),2);
              rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 20) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 21)) {
              pas.System.Delete({a: i + 21, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 21)),2);
              rtl.rcArrW(listing,i + 21,rtl.rcArrR(listing,i + 21) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 22)) {
              pas.System.Delete({a: i + 22, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 22)),2);
              rtl.rcArrW(listing,i + 22,rtl.rcArrR(listing,i + 22) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 23)) {
              pas.System.Delete({a: i + 23, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 23)),2);
              rtl.rcArrW(listing,i + 23,rtl.rcArrR(listing,i + 23) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 24)) {
              pas.System.Delete({a: i + 24, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 24)),2);
              rtl.rcArrW(listing,i + 24,rtl.rcArrR(listing,i + 24) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 25)) {
              pas.System.Delete({a: i + 25, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 25)),2);
              rtl.rcArrW(listing,i + 25,rtl.rcArrR(listing,i + 25) + "-$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            return false;
          };
          if ((LDA_STACK(i) === false) && (ADD_STACK(i + 1) === false) && ((LDA(i) && (LDA_IM(i) === false) && ADD_IM(i + 1)) || (LDA_IM(i) && ADD(i + 1) && (ADD_IM(i + 1) === false))) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA(i + 3) && ADC(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
            if (LDA_IM(i)) {
              p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 1,"");
            } else {
              p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
              rtl.rcArrW(listing,i + 1,"");
            };
            p = rtl.rc(p * 4,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\tasl @");
            rtl.rcArrW(listing,i + 4,"\ttay");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            if (LDA_ADR_Y(i + 18)) {
              pas.System.Delete({a: i + 18, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 18)),2);
              rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 18) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 19)) {
              pas.System.Delete({a: i + 19, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 19)),2);
              rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 19) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 20)) {
              pas.System.Delete({a: i + 20, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 20)),2);
              rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 20) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 21)) {
              pas.System.Delete({a: i + 21, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 21)),2);
              rtl.rcArrW(listing,i + 21,rtl.rcArrR(listing,i + 21) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 22)) {
              pas.System.Delete({a: i + 22, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 22)),2);
              rtl.rcArrW(listing,i + 22,rtl.rcArrR(listing,i + 22) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 23)) {
              pas.System.Delete({a: i + 23, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 23)),2);
              rtl.rcArrW(listing,i + 23,rtl.rcArrR(listing,i + 23) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (LDA_ADR_Y(i + 24)) {
              pas.System.Delete({a: i + 24, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 24)),2);
              rtl.rcArrW(listing,i + 24,rtl.rcArrR(listing,i + 24) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            if (STA_ADR_Y(i + 25)) {
              pas.System.Delete({a: i + 25, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 25)),2);
              rtl.rcArrW(listing,i + 25,rtl.rcArrR(listing,i + 25) + "+$" + pas.SysUtils.IntToHex(p,2) + ",y");
            };
            return false;
          };
        };
        if ((LDA_ADR(i + 10) || STA_ADR(i + 11)) && LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tasl :STACKORIGIN,x") && ROL_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 5) && TAY(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          rtl.rcArrW(listing,i,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"\tasl @");
          rtl.rcArrW(listing,i + 2,"\ttay");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if ((LDA_ADR(i + 12) || STA_ADR(i + 13)) && LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tasl :STACKORIGIN,x") && ROL_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tasl :STACKORIGIN,x") && ROL_A(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 7) && TAY(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          rtl.rcArrW(listing,i,"\tlda :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 1,"\tasl @");
          rtl.rcArrW(listing,i + 2,"\tasl @");
          rtl.rcArrW(listing,i + 3,"\ttay");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && MVA_IM(i) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (MVA(i + 1) || STA(i + 1)) && (rtl.rcArrR(listing,i + 2) === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 3) && TAY(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN+STACKWIDTH,x") && ADC_IM_0(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :STACKORIGIN+STACKWIDTH,x")) {
          if (MVA_IM(i + 1)) {
            p = rtl.rc(GetWORD(i,i + 1),-2147483648,2147483647)}
           else p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
          if (LDA_ADR_Y(i + 8)) {
            pas.System.Delete({a: i + 8, p: listing, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 8)),2);
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 8) + "+$" + pas.SysUtils.IntToHex(p,2));
          };
          if (STA_ADR_Y(i + 9)) {
            pas.System.Delete({a: i + 9, p: listing, get: function () {
                return this.p[this.a];
              }, set: function (v) {
                this.p[this.a] = v;
              }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 9)),2);
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 9) + "+$" + pas.SysUtils.IntToHex(p,2));
          };
          if ((LDA(i + 10) || LDA_ADR(i + 10)) && (STA(i + 11) || STA_ADR(i + 11))) {
            if (LDA_ADR_Y(i + 10)) {
              pas.System.Delete({a: i + 10, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 10)),2);
              rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 10) + "+$" + pas.SysUtils.IntToHex(p,2));
            };
            if (STA_ADR_Y(i + 11)) {
              pas.System.Delete({a: i + 11, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 11)),2);
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 11) + "+$" + pas.SysUtils.IntToHex(p,2));
            };
            if ((LDA(i + 12) || LDA_ADR(i + 12)) && (STA(i + 13) || STA_ADR(i + 13))) {
              if (LDA_ADR_Y(i + 12)) {
                pas.System.Delete({a: i + 12, p: listing, get: function () {
                    return this.p[this.a];
                  }, set: function (v) {
                    this.p[this.a] = v;
                  }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 12)),2);
                rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 12) + "+$" + pas.SysUtils.IntToHex(p,2));
              };
              if (STA_ADR_Y(i + 13)) {
                pas.System.Delete({a: i + 13, p: listing, get: function () {
                    return this.p[this.a];
                  }, set: function (v) {
                    this.p[this.a] = v;
                  }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 13)),2);
                rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 13) + "+$" + pas.SysUtils.IntToHex(p,2));
              };
              if ((LDA(i + 14) || LDA_ADR(i + 14)) && (STA(i + 15) || STA_ADR(i + 15))) {
                if (LDA_ADR_Y(i + 14)) {
                  pas.System.Delete({a: i + 14, p: listing, get: function () {
                      return this.p[this.a];
                    }, set: function (v) {
                      this.p[this.a] = v;
                    }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 14)),2);
                  rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 14) + "+$" + pas.SysUtils.IntToHex(p,2));
                };
                if (STA_ADR_Y(i + 15)) {
                  pas.System.Delete({a: i + 15, p: listing, get: function () {
                      return this.p[this.a];
                    }, set: function (v) {
                      this.p[this.a] = v;
                    }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 15)),2);
                  rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 15) + "+$" + pas.SysUtils.IntToHex(p,2));
                };
              };
            };
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if ((LDA_ADR(i + 13) || STA_ADR(i + 14)) && LDA_A(i) && ADD_SUB(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && ADC_SBC(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && DEX(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN,x") && ADD_IM_0(i + 8) && TAY(i + 9) && LDA_STACK(i + 10) && ADC_IM_0(i + 11) && STA_STACK(i + 12)) if (argMatch(i + 10,i + 12)) {
          rtl.rcArrW(listing,i + 9,"\tdex");
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 12,"\ttay");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) if (argMatch(i + 3,i + 5)) {
          rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        return Result;
      };
      function opt_STACK_AL_CL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var q = 0;
        var tmp = "";
        Result = true;
        if (ADD_SUB_AL_CL(i + 10) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && INX(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && MVA(i + 9)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 8)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 9)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ADD_SUB_AL_CL(i + 7) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && INX(i + 5) && MVA(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (MVA_IM(i + 1) && INX(i + 2) && MVA_IM(i + 3) && ADD_SUB_AL_CL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          p = rtl.rc(GetBYTE(i + 1),-2147483648,2147483647);
          q = rtl.rc(GetBYTE(i + 3),-2147483648,2147483647);
          if (rtl.rcArrR(listing,i + 4) === "\tjsr addAL_CL") {
            p = rtl.rc(p + q,-2147483648,2147483647)}
           else p = rtl.rc(p - q,-2147483648,2147483647);
          rtl.rcArrW(listing,i + 1,"\tmva #$" + pas.SysUtils.IntToHex(p & 0xff,2) + " :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"\tinx");
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && ADD_SUB_AL_CL(i + 3)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && ADD_SUB_AL_CL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (JSR(i) && INX(i + 1) && MVA(i + 2) && ADD_SUB_AL_CL(i + 3) && DEX(i + 4)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) {
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          if (rtl.rcArrR(listing,i + 3) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 2,"\tadd " + GetString$1(i + 2))}
           else rtl.rcArrW(listing,i + 2,"\tsub " + GetString$1(i + 2));
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (MVA(i) && INX(i + 1) && MVA(i + 2) && ADD_SUB_AL_CL(i + 3)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0)) {
          tmp = GetString$1(i + 2);
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          if (rtl.rcArrR(listing,i + 3) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 1,"\tadd " + tmp)}
           else rtl.rcArrW(listing,i + 1,"\tsub " + tmp);
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 3,"\tinx");
          return false;
        };
        if ((LDA(i) || LDA_ADR(i)) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN,x") && (LDA(i + 2) || LDA_ADR(i + 2)) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN+STACKWIDTH,x") && INX(i + 4) && MVA(i + 5) && ADD_SUB_AL_CL(i + 6)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 5)) > 0) {
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 1,"\tadd " + GetString$1(i + 5))}
           else rtl.rcArrW(listing,i + 1,"\tsub " + GetString$1(i + 5));
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 3,"\tinx");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && ADD_SUB_AL_CL(i + 4)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          if (rtl.rcArrR(listing,i + 4) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 1,"\tadd " + GetString$1(i + 3))}
           else rtl.rcArrW(listing,i + 1,"\tsub " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 3,"\tinx");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (MVA(i + 1) && (IY(i + 1) === false) && INX(i + 2) && (LDA(i + 3) || LDA_ADR(i + 3)) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN,x") && ADD_SUB_AL_CL(i + 5)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i + 1,"\tlda " + GetString$1(i + 1));
          if (rtl.rcArrR(listing,i + 5) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 2,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256))}
           else rtl.rcArrW(listing,i + 2,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 5,"\tinx");
          return false;
        };
        if (INX(i) && (IY(i + 1) === false) && MVA(i + 1) && INX(i + 2) && MWY_BP2(i + 3) && LDY_IM(i + 4) && (pas.System.Pos("\tmva (:bp2),y",rtl.rcArrR(listing,i + 5)) > 0) && ADD_SUB_AL_CL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          tmp = "\tlda " + GetString$1(i + 1);
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 3,tmp);
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 4,"\tadd (:bp2),y")}
           else rtl.rcArrW(listing,i + 4,"\tsub (:bp2),y");
          rtl.rcArrW(listing,i + 5,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 6,"\tinx");
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && LDY_IM(i + 2) && LDA_BP2_Y(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN,x") && INX(i + 5) && (IY(i + 6) === false) && MVA(i + 6) && ADD_SUB_AL_CL(i + 7)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) {
          if (rtl.rcArrR(listing,i + 7) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 4,"\tadd " + GetString$1(i + 6))}
           else rtl.rcArrW(listing,i + 4,"\tsub " + GetString$1(i + 6));
          rtl.rcArrW(listing,i + 5,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 6,"\tinx");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && LDY_IM(i + 2) && (pas.System.Pos("\tmva (:bp2),y",rtl.rcArrR(listing,i + 3)) > 0) && INX(i + 4) && (IY(i + 5) === false) && MVA(i + 5) && ADD_SUB_AL_CL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          rtl.rcArrW(listing,i + 3,"\tlda (:bp2),y");
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 4,"\tadd " + GetString$1(i + 5))}
           else rtl.rcArrW(listing,i + 4,"\tsub " + GetString$1(i + 5));
          rtl.rcArrW(listing,i + 5,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 6,"\tinx");
          return false;
        };
        if (INX(i) && MWY_BP2(i + 1) && LDY_IM(i + 2) && (pas.System.Pos("\tmva (:bp2),y",rtl.rcArrR(listing,i + 3)) > 0) && INX(i + 4) && LDY_IM(i + 5) && (pas.System.Pos("\tmva (:bp2),y",rtl.rcArrR(listing,i + 6)) > 0) && ADD_SUB_AL_CL(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0)) {
          rtl.rcArrW(listing,i + 3,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 5));
          if (rtl.rcArrR(listing,i + 7) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 5,"\tadd (:bp2),y")}
           else rtl.rcArrW(listing,i + 5,"\tsub (:bp2),y");
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 7,"\tinx");
          return false;
        };
        if (INX(i) && LDY_IM(i + 1) && (pas.System.Pos("\tmva (:bp2),y",rtl.rcArrR(listing,i + 2)) > 0) && INX(i + 3) && LDY_IM(i + 4) && (pas.System.Pos("\tmva (:bp2),y",rtl.rcArrR(listing,i + 5)) > 0) && ADD_SUB_AL_CL(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          rtl.rcArrW(listing,i + 2,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 4));
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i + 4,"\tadd (:bp2),y")}
           else rtl.rcArrW(listing,i + 4,"\tsub (:bp2),y");
          rtl.rcArrW(listing,i + 5,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 6,"\tinx");
          return false;
        };
        if (ADD_SUB_AL_CL(i) && DEX(i + 1) && (pas.System.Pos("\tmva :STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) && DEX(i + 3)) {
          if (rtl.rcArrR(listing,i) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i,"\tadb :STACKORIGIN-1,x :STACKORIGIN,x " + pas.System.Copy(rtl.rcArrR(listing,i + 2),pas.System.Pos(",x",rtl.rcArrR(listing,i + 2)) + 3,rtl.rcArrR(listing,i + 2).length))}
           else rtl.rcArrW(listing,i,"\tsbb :STACKORIGIN-1,x :STACKORIGIN,x " + pas.System.Copy(rtl.rcArrR(listing,i + 2),pas.System.Pos(",x",rtl.rcArrR(listing,i + 2)) + 3,rtl.rcArrR(listing,i + 2).length));
          rtl.rcArrW(listing,i + 2,"");
          if ((i > 0) && (pas.System.Pos("\tjsr @expand",rtl.rcArrR(listing,i - 1)) > 0)) rtl.rcArrW(listing,i - 1,"");
          return false;
        };
        if (ADD_SUB_AL_CL(i) && DEX(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 3) && (LDA(i + 4) === false)) {
          if (rtl.rcArrR(listing,i) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 1,"\tadd :STACKORIGIN,x");
          } else {
            rtl.rcArrW(listing,i,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 1,"\tsub :STACKORIGIN,x");
          };
          rtl.rcArrW(listing,i + 2,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 3,"\tdex");
          return false;
        };
        return Result;
      };
      function opt_STACK_AX_CX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var q = 0;
        var tmp = "";
        Result = true;
        if (MVA_IM(i + 1) && MVA_IM(i + 2) && INX(i + 3) && MVA_IM(i + 4) && MVA_IM(i + 5) && ADD_SUB_AX_CX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          p = rtl.rc(GetWORD(i + 1,i + 2),-2147483648,2147483647);
          q = rtl.rc(GetWORD(i + 4,i + 5),-2147483648,2147483647);
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAX_CX") {
            p = rtl.rc(p + q,-2147483648,2147483647)}
           else p = rtl.rc(p - q,-2147483648,2147483647);
          rtl.rcArrW(listing,i + 1,"\tmva #$" + pas.SysUtils.IntToHex(p & 0xff,2) + " :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,"\tmva #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2) + " :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"\tinx");
          return false;
        };
        if (INX(i) && MVA_IM(i + 1) && INX(i + 2) && MVA_IM(i + 3) && MVA_IM(i + 4) && MVA_IM(i + 5) && ADD_SUB_AX_CX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
          q = rtl.rc(GetWORD(i + 3,i + 5),-2147483648,2147483647);
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAX_CX") {
            p = rtl.rc(p + q,-2147483648,2147483647)}
           else p = rtl.rc(p - q,-2147483648,2147483647);
          rtl.rcArrW(listing,i + 1,"\tmva #$" + pas.SysUtils.IntToHex(p & 0xff,2) + " :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 2,"\tmva #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2) + " :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"\tinx");
          return false;
        };
        if (INX(i) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && DEX(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          rtl.rcArrW(listing,i + 1,"\tlda " + GetString$1(i + 1));
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 2,"\tadd " + GetString$1(i + 3))}
           else rtl.rcArrW(listing,i + 2,"\tsub " + GetString$1(i + 3));
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          tmp = GetString$1(i + 4);
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i + 5));
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 5,"\tadc " + tmp)}
           else rtl.rcArrW(listing,i + 5,"\tsbc " + tmp);
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (MVA(i) && (MVA_IM(i) === false) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && MVA(i + 4) && ADD_SUB_AX_CX(i + 5) && DEX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          tmp = rtl.rcArrR(listing,i + 3);
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 3,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN,x");
          if (rtl.rcArrR(listing,i + 5) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 1,"\tadd " + GetString(tmp));
            rtl.rcArrW(listing,i + 4,"\tadc " + GetString$1(i + 4));
          } else {
            rtl.rcArrW(listing,i + 1,"\tsub " + GetString(tmp));
            rtl.rcArrW(listing,i + 4,"\tsbc " + GetString$1(i + 4));
          };
          rtl.rcArrW(listing,i + 5,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if ((MVA(i) === false) && MVA(i + 1) && INX(i + 2) && MVA(i + 3) && MVA(i + 4) && ADD_SUB_AX_CX(i + 5) && DEX(i + 6)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          tmp = rtl.rcArrR(listing,i + 4);
          rtl.rcArrW(listing,i + 4,"\tlda " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN,x");
          if (rtl.rcArrR(listing,i + 5) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 2,"\tadd " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 5,"\tadc " + GetString(tmp));
          } else {
            rtl.rcArrW(listing,i + 2,"\tsub " + GetString$1(i + 3));
            rtl.rcArrW(listing,i + 5,"\tsbc " + GetString(tmp));
          };
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN+STACKWIDTH,x");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && INX(i + 4) && MVA(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && ADD_SUB_AX_CX(i + 9)) if ((pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 7)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 8)) > 0)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && INX(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && (DEX(i + 7) === false)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          Expand(i + 6,1);
          listing_tmp[0] = "\tinx";
          listing_tmp[1] = "\tinx";
          listing_tmp[2] = "\tlda " + GetString$1(i + 1);
          if (rtl.rcArrR(listing,i + 7) === "\tjsr addAX_CX") {
            listing_tmp[3] = "\tadd " + GetString$1(i + 4);
            listing_tmp[6] = "\tadc " + GetString$1(i + 5);
          } else {
            listing_tmp[3] = "\tsub " + GetString$1(i + 4);
            listing_tmp[6] = "\tsbc " + GetString$1(i + 5);
          };
          listing_tmp[4] = "\tsta :STACKORIGIN-1,x";
          listing_tmp[5] = "\tlda " + GetString$1(i + 2);
          listing_tmp[7] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
          for (p = 0; p <= 7; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
          return false;
        };
        if (INX(i) && MWY(i + 1) && LDY_IM(i + 2) && MVA(i + 3) && MVA(i + 4) && INX(i + 5) && MVA(i + 6) && MVA(i + 7) && ADD_SUB_AX_CX(i + 8) && (DEX(i + 9) === false)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0)) {
          Expand(i + 8,1);
          listing_tmp[0] = "\tinx";
          listing_tmp[1] = "\tinx";
          listing_tmp[2] = rtl.rcArrR(listing,i + 1);
          listing_tmp[3] = rtl.rcArrR(listing,i + 2);
          listing_tmp[4] = "\tlda " + GetString$1(i + 3);
          if (rtl.rcArrR(listing,i + 9) === "\tjsr addAX_CX") {
            listing_tmp[5] = "\tadd " + GetString$1(i + 6);
            listing_tmp[8] = "\tadc " + GetString$1(i + 7);
          } else {
            listing_tmp[5] = "\tsub " + GetString$1(i + 6);
            listing_tmp[8] = "\tsbc " + GetString$1(i + 7);
          };
          listing_tmp[6] = "\tsta :STACKORIGIN-1,x";
          listing_tmp[7] = "\tlda " + GetString$1(i + 4);
          listing_tmp[9] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
          for (p = 0; p <= 9; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
          return false;
        };
        if (LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && DEX(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 1,"\tadd " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 4,"\tadc " + GetString$1(i + 5));
          } else {
            rtl.rcArrW(listing,i + 1,"\tsub " + GetString$1(i + 4));
            rtl.rcArrW(listing,i + 4,"\tsbc " + GetString$1(i + 5));
          };
          rtl.rcArrW(listing,i + 2,"\tsta :STACKORIGIN-1,x");
          rtl.rcArrW(listing,i + 5,"\tsta :STACKORIGIN-1+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (MVA(i) && MVA(i + 1) && ADD_SUB_AX_CX(i + 2) && DEX(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda :STACKORIGIN,x") && STA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 7)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0)) {
          tmp = rtl.rcArrR(listing,i + 1);
          if (rtl.rcArrR(listing,i + 2) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 2,"\tadd " + GetString$1(i));
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda :STACKORIGIN-1+STACKWIDTH,x");
            rtl.rcArrW(listing,i + 5,"\tadc " + GetString(tmp));
            rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          } else {
            rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 2,"\tsub " + GetString$1(i));
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda :STACKORIGIN-1+STACKWIDTH,x");
            rtl.rcArrW(listing,i + 5,"\tsbc " + GetString(tmp));
            rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 7,"\tdex");
          return false;
        };
        if (JSR(i) && (rtl.rcArrR(listing,i + 1) === "\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 2) === "\tmva #$00 :STACKORIGIN+STACKWIDTH,x") && ADD_SUB_AX_CX(i + 3) && DEX(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda :STACKORIGIN,x") && STA_A(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 8)) {
          if (rtl.rcArrR(listing,i + 3) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 2,"\tadd :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda #$00");
            rtl.rcArrW(listing,i + 5,"\tadc #$00");
            rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
          } else {
            rtl.rcArrW(listing,i + 1,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 2,"\tsub :STACKORIGIN,x");
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda #$00");
            rtl.rcArrW(listing,i + 5,"\tsbc #$00");
            rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
          };
          rtl.rcArrW(listing,i + 7,"\tdex");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (JSR(i) && INX(i + 1) && MVA(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tmva #$00 :STACKORIGIN+STACKWIDTH,x") && (rtl.rcArrR(listing,i + 4) === "\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x") && ADD_SUB_AX_CX(i + 5) && DEX(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tlda :STACKORIGIN,x") && STA_A(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 10)) if (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) {
          if (rtl.rcArrR(listing,i + 5) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 3,"\tadd " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 4,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 5,"\tlda #$00");
            rtl.rcArrW(listing,i + 6,"\tadc #$00");
            rtl.rcArrW(listing,i + 7,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
          } else {
            rtl.rcArrW(listing,i + 3,"\tsub " + GetString$1(i + 2));
            rtl.rcArrW(listing,i + 2,"\tlda :STACKORIGIN-1,x");
            rtl.rcArrW(listing,i + 4,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 5,"\tlda #$00");
            rtl.rcArrW(listing,i + 6,"\tsbc #$00");
            rtl.rcArrW(listing,i + 7,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
          };
          rtl.rcArrW(listing,i + 8,"\tdex");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if ((MVA(i) === false) && INX(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_AX_CX(i + 6) && DEX(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN,x") && STA_A(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addAX_CX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 2);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 2);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
          };
          rtl.rcArrW(listing,i + 1,listing_tmp[0]);
          rtl.rcArrW(listing,i + 2,listing_tmp[1]);
          rtl.rcArrW(listing,i + 3,listing_tmp[2]);
          rtl.rcArrW(listing,i + 4,listing_tmp[3]);
          rtl.rcArrW(listing,i + 5,listing_tmp[4]);
          rtl.rcArrW(listing,i + 6,listing_tmp[5]);
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if ((INX(i) === false) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && ADD_SUB_AX_CX(i + 5) && DEX(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tldy :STACKORIGIN-1,x") && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN,x") && STA_A(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 4)) > 0)) {
          if (rtl.rcArrR(listing,i + 5) === "\tjsr addAX_CX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 1);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 2);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 1);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 2);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
          };
          rtl.rcArrW(listing,i + 1,"\tdex");
          rtl.rcArrW(listing,i + 2,"\tldy :STACKORIGIN-1,x");
          rtl.rcArrW(listing,i + 3,listing_tmp[0]);
          rtl.rcArrW(listing,i + 4,listing_tmp[1]);
          rtl.rcArrW(listing,i + 5,listing_tmp[2]);
          rtl.rcArrW(listing,i + 6,listing_tmp[3]);
          rtl.rcArrW(listing,i + 7,listing_tmp[4]);
          rtl.rcArrW(listing,i + 8,listing_tmp[5]);
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if ((INX(i) === false) && LDA_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_VAL(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && MVA(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && ADD_SUB_AX_CX(i + 9) && DEX(i + 10)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 5)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 7)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 8)) > 0)) {
          if (rtl.rcArrR(listing,i + 9) === "\tjsr addAX_CX") {
            listing_tmp[0] = rtl.rcArrR(listing,i + 1);
            listing_tmp[1] = "\tadd " + GetString$1(i + 5);
            listing_tmp[2] = "\tsta :STACKORIGIN,x";
            listing_tmp[3] = rtl.rcArrR(listing,i + 3);
            listing_tmp[4] = "\tadc " + GetString$1(i + 6);
            listing_tmp[5] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          } else {
            listing_tmp[0] = rtl.rcArrR(listing,i + 1);
            listing_tmp[1] = "\tsub " + GetString$1(i + 5);
            listing_tmp[2] = "\tsta :STACKORIGIN,x";
            listing_tmp[3] = rtl.rcArrR(listing,i + 3);
            listing_tmp[4] = "\tsbc " + GetString$1(i + 6);
            listing_tmp[5] = "\tsta :STACKORIGIN+STACKWIDTH,x";
          };
          rtl.rcArrW(listing,i + 1,"\tdex");
          rtl.rcArrW(listing,i + 2,listing_tmp[0]);
          rtl.rcArrW(listing,i + 3,listing_tmp[1]);
          rtl.rcArrW(listing,i + 4,listing_tmp[2]);
          rtl.rcArrW(listing,i + 5,listing_tmp[3]);
          rtl.rcArrW(listing,i + 6,listing_tmp[4]);
          rtl.rcArrW(listing,i + 7,listing_tmp[5]);
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if (LDA_A(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && MVA(i + 9) && MVA(i + 10) && ADD_SUB_AX_CX(i + 11) && DEX(i + 12)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 9)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 10)) > 0)) {
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          if (rtl.rcArrR(listing,i + 11) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 2,"\tadd " + GetString$1(i + 9));
            rtl.rcArrW(listing,i + 5,"\tadc " + GetString$1(i + 10));
          } else {
            rtl.rcArrW(listing,i + 2,"\tsub " + GetString$1(i + 9));
            rtl.rcArrW(listing,i + 5,"\tsbc " + GetString$1(i + 10));
          };
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN-1,x");
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN-1+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if (LDA_A(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA_A(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_A(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && INX(i + 9) && MVA(i + 10) && MVA(i + 11) && ADD_SUB_AX_CX(i + 12) && DEX(i + 13)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 10)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 11)) > 0)) {
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
          if (rtl.rcArrR(listing,i + 12) === "\tjsr addAX_CX") {
            rtl.rcArrW(listing,i + 2,"\tadd " + GetString$1(i + 10));
            rtl.rcArrW(listing,i + 5,"\tadc " + GetString$1(i + 11));
          } else {
            rtl.rcArrW(listing,i + 2,"\tsub " + GetString$1(i + 10));
            rtl.rcArrW(listing,i + 5,"\tsbc " + GetString$1(i + 11));
          };
          rtl.rcArrW(listing,i + 3,"\tsta :STACKORIGIN,x");
          rtl.rcArrW(listing,i + 6,"\tsta :STACKORIGIN+STACKWIDTH,x");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          return false;
        };
        if (DEX(i + 9) && LDA_A(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x")) {
          if (INX(i + 10) && MVA(i + 11) && MVA(i + 12) && ADD_SUB_AX_CX(i + 13) && DEX(i + 14)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 11)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 12)) > 0)) {
            rtl.rcArrW(listing,i + 7,"\tdex");
            if (rtl.rcArrR(listing,i + 13) === "\tjsr addAX_CX") {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 9,"\tadd " + GetString$1(i + 11));
              rtl.rcArrW(listing,i + 10,"\tsta :STACKORIGIN,x");
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 12,"\tadc " + GetString$1(i + 12));
              rtl.rcArrW(listing,i + 13,"\tsta :STACKORIGIN+STACKWIDTH,x");
            } else {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 9,"\tsub " + GetString$1(i + 11));
              rtl.rcArrW(listing,i + 10,"\tsta :STACKORIGIN,x");
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 12,"\tsbc " + GetString$1(i + 12));
              rtl.rcArrW(listing,i + 13,"\tsta :STACKORIGIN+STACKWIDTH,x");
            };
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (INX(i + 10) && MVA(i + 11) && MVA(i + 12) && MVA(i + 13) && MVA(i + 14) && ADD_SUB_AX_CX(i + 15) && DEX(i + 16)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 11)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 12)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 13)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 14)) > 0)) {
            rtl.rcArrW(listing,i + 7,"\tdex");
            if (rtl.rcArrR(listing,i + 15) === "\tjsr addAX_CX") {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 9,"\tadd " + GetString$1(i + 11));
              rtl.rcArrW(listing,i + 10,"\tsta :STACKORIGIN,x");
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 12,"\tadc " + GetString$1(i + 12));
              rtl.rcArrW(listing,i + 13,"\tsta :STACKORIGIN+STACKWIDTH,x");
            } else {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 9,"\tsub " + GetString$1(i + 11));
              rtl.rcArrW(listing,i + 10,"\tsta :STACKORIGIN,x");
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 12,"\tsbc " + GetString$1(i + 12));
              rtl.rcArrW(listing,i + 13,"\tsta :STACKORIGIN+STACKWIDTH,x");
            };
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (MVA(i + 10) && MVA(i + 11) && ADD_SUB_AX_CX(i + 12) && DEX(i + 13)) if ((pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 10)) > 0) && (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 11)) > 0)) {
            rtl.rcArrW(listing,i + 6,"\tdex");
            if (rtl.rcArrR(listing,i + 12) === "\tjsr addAX_CX") {
              rtl.rcArrW(listing,i + 7,"\tlda :STACKORIGIN-1,x");
              rtl.rcArrW(listing,i + 8,"\tadd " + GetString$1(i + 1));
              rtl.rcArrW(listing,i + 9,"\tsta :STACKORIGIN-1,x");
              rtl.rcArrW(listing,i + 10,"\tlda :STACKORIGIN-1+STACKWIDTH,x");
              rtl.rcArrW(listing,i + 11,"\tadc " + GetString$1(i + 3));
              rtl.rcArrW(listing,i + 12,"\tsta :STACKORIGIN-1+STACKWIDTH,x");
            } else {
              rtl.rcArrW(listing,i + 7,"\tlda :STACKORIGIN-1,x");
              rtl.rcArrW(listing,i + 8,"\tsub " + GetString$1(i + 1));
              rtl.rcArrW(listing,i + 9,"\tsta :STACKORIGIN-1,x");
              rtl.rcArrW(listing,i + 10,"\tlda :STACKORIGIN-1+STACKWIDTH,x");
              rtl.rcArrW(listing,i + 11,"\tsbc " + GetString$1(i + 3));
              rtl.rcArrW(listing,i + 12,"\tsta :STACKORIGIN-1+STACKWIDTH,x");
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
        };
        return Result;
      };
      function opt_STACK_EAX_ECX(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = true;
        if (MVA(i) && MVA(i + 1) && MVA(i + 2) && (MVA_IM_0(i + 2) === false) && MVA(i + 3) && (MVA_IM_0(i + 3) === false) && INX(i + 4) && MVA(i + 5) && MVA(i + 6) && MVA(i + 7) && MVA(i + 8) && ADD_SUB_EAX_ECX(i + 9) && DEX(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN,x") && STA(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 18)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 5)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 7)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 8)) > 0)) {
          if (rtl.rcArrR(listing,i + 9) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda " + GetString$1(i);
            listing_tmp[1] = "\tadd " + GetString$1(i + 5);
            listing_tmp[2] = rtl.rcArrR(listing,i + 12);
            listing_tmp[3] = "\tlda " + GetString$1(i + 1);
            listing_tmp[4] = "\tadc " + GetString$1(i + 6);
            listing_tmp[5] = rtl.rcArrR(listing,i + 14);
            listing_tmp[6] = "\tlda " + GetString$1(i + 2);
            listing_tmp[7] = "\tadc " + GetString$1(i + 7);
            listing_tmp[8] = rtl.rcArrR(listing,i + 16);
            listing_tmp[9] = "\tlda " + GetString$1(i + 3);
            listing_tmp[10] = "\tadc " + GetString$1(i + 8);
            listing_tmp[11] = rtl.rcArrR(listing,i + 18);
          } else {
            listing_tmp[0] = "\tlda " + GetString$1(i);
            listing_tmp[1] = "\tsub " + GetString$1(i + 5);
            listing_tmp[2] = rtl.rcArrR(listing,i + 12);
            listing_tmp[3] = "\tlda " + GetString$1(i + 1);
            listing_tmp[4] = "\tsbc " + GetString$1(i + 6);
            listing_tmp[5] = rtl.rcArrR(listing,i + 14);
            listing_tmp[6] = "\tlda " + GetString$1(i + 2);
            listing_tmp[7] = "\tsbc " + GetString$1(i + 7);
            listing_tmp[8] = rtl.rcArrR(listing,i + 16);
            listing_tmp[9] = "\tlda " + GetString$1(i + 3);
            listing_tmp[10] = "\tsbc " + GetString$1(i + 8);
            listing_tmp[11] = rtl.rcArrR(listing,i + 18);
          };
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          rtl.rcArrW(listing,i + 5,listing_tmp[5]);
          rtl.rcArrW(listing,i + 6,listing_tmp[6]);
          rtl.rcArrW(listing,i + 7,listing_tmp[7]);
          rtl.rcArrW(listing,i + 8,listing_tmp[8]);
          rtl.rcArrW(listing,i + 9,listing_tmp[9]);
          rtl.rcArrW(listing,i + 10,listing_tmp[10]);
          rtl.rcArrW(listing,i + 11,listing_tmp[11]);
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          return false;
        };
        if (LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && DEX(i + 8) && ADD_SUB_EAX_ECX(i + 9) && DEX(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN,x") && STA_A(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA_A(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA_A(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA_A(i + 18)) {
          if (rtl.rcArrR(listing,i + 9) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256);
            listing_tmp[2] = rtl.rcArrR(listing,i + 12);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            listing_tmp[5] = rtl.rcArrR(listing,i + 14);
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256);
            listing_tmp[8] = rtl.rcArrR(listing,i + 16);
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256);
            listing_tmp[11] = rtl.rcArrR(listing,i + 18);
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256);
            listing_tmp[2] = rtl.rcArrR(listing,i + 12);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            listing_tmp[5] = rtl.rcArrR(listing,i + 14);
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256);
            listing_tmp[8] = rtl.rcArrR(listing,i + 16);
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256);
            listing_tmp[11] = rtl.rcArrR(listing,i + 18);
          };
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,"\tdex");
          rtl.rcArrW(listing,i + 2,listing_tmp[0]);
          rtl.rcArrW(listing,i + 3,listing_tmp[1]);
          rtl.rcArrW(listing,i + 4,listing_tmp[2]);
          rtl.rcArrW(listing,i + 5,listing_tmp[3]);
          rtl.rcArrW(listing,i + 6,listing_tmp[4]);
          rtl.rcArrW(listing,i + 7,listing_tmp[5]);
          rtl.rcArrW(listing,i + 8,listing_tmp[6]);
          rtl.rcArrW(listing,i + 9,listing_tmp[7]);
          rtl.rcArrW(listing,i + 10,listing_tmp[8]);
          rtl.rcArrW(listing,i + 11,listing_tmp[9]);
          rtl.rcArrW(listing,i + 12,listing_tmp[10]);
          rtl.rcArrW(listing,i + 13,listing_tmp[11]);
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          return false;
        };
        if ((MVA(i) === false) && INX(i + 1) && MVA(i + 2) && MVA(i + 3) && MVA(i + 4) && MVA(i + 5) && ADD_SUB_EAX_ECX(i + 6) && DEX(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tlda :STACKORIGIN,x") && STA(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 15)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 4)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 5)) > 0)) {
          if (rtl.rcArrR(listing,i + 6) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 2);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tadc " + GetString$1(i + 4);
            listing_tmp[8] = rtl.rcArrR(listing,i + 13);
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tadc " + GetString$1(i + 5);
            listing_tmp[11] = rtl.rcArrR(listing,i + 15);
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 2);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = "\tlda :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
            listing_tmp[6] = "\tlda :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[7] = "\tsbc " + GetString$1(i + 4);
            listing_tmp[8] = rtl.rcArrR(listing,i + 13);
            listing_tmp[9] = "\tlda :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[10] = "\tsbc " + GetString$1(i + 5);
            listing_tmp[11] = rtl.rcArrR(listing,i + 15);
          };
          rtl.rcArrW(listing,i + 1,listing_tmp[0]);
          rtl.rcArrW(listing,i + 2,listing_tmp[1]);
          rtl.rcArrW(listing,i + 3,listing_tmp[2]);
          rtl.rcArrW(listing,i + 4,listing_tmp[3]);
          rtl.rcArrW(listing,i + 5,listing_tmp[4]);
          rtl.rcArrW(listing,i + 6,listing_tmp[5]);
          rtl.rcArrW(listing,i + 7,listing_tmp[6]);
          rtl.rcArrW(listing,i + 8,listing_tmp[7]);
          rtl.rcArrW(listing,i + 9,listing_tmp[8]);
          rtl.rcArrW(listing,i + 10,listing_tmp[9]);
          rtl.rcArrW(listing,i + 11,listing_tmp[10]);
          rtl.rcArrW(listing,i + 12,listing_tmp[11]);
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          return false;
        };
        if (LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && MVA(i + 8) && MVA(i + 9) && MVA(i + 10) && MVA(i + 11) && ADD_SUB_EAX_ECX(i + 12) && (DEX(i + 13) === false)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 8)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 9)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 10)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 11)) > 0)) {
          if (rtl.rcArrR(listing,i + 12) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = "\tadd " + GetString$1(i + 8);
            listing_tmp[2] = "\tsta :STACKORIGIN-1,x";
            listing_tmp[3] = rtl.rcArrR(listing,i + 2);
            listing_tmp[4] = "\tadc " + GetString$1(i + 9);
            listing_tmp[5] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            listing_tmp[7] = "\tadc " + GetString$1(i + 10);
            listing_tmp[8] = "\tsta :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[9] = rtl.rcArrR(listing,i + 6);
            listing_tmp[10] = "\tadc " + GetString$1(i + 11);
            listing_tmp[11] = "\tsta :STACKORIGIN-1+STACKWIDTH*3,x";
          } else {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = "\tsub " + GetString$1(i + 8);
            listing_tmp[2] = "\tsta :STACKORIGIN-1,x";
            listing_tmp[3] = rtl.rcArrR(listing,i + 2);
            listing_tmp[4] = "\tsbc " + GetString$1(i + 9);
            listing_tmp[5] = "\tsta :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            listing_tmp[7] = "\tsbc " + GetString$1(i + 10);
            listing_tmp[8] = "\tsta :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[9] = rtl.rcArrR(listing,i + 6);
            listing_tmp[10] = "\tsbc " + GetString$1(i + 11);
            listing_tmp[11] = "\tsta :STACKORIGIN-1+STACKWIDTH*3,x";
          };
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          rtl.rcArrW(listing,i + 5,listing_tmp[5]);
          rtl.rcArrW(listing,i + 6,listing_tmp[6]);
          rtl.rcArrW(listing,i + 7,listing_tmp[7]);
          rtl.rcArrW(listing,i + 8,listing_tmp[8]);
          rtl.rcArrW(listing,i + 9,listing_tmp[9]);
          rtl.rcArrW(listing,i + 10,listing_tmp[10]);
          rtl.rcArrW(listing,i + 11,listing_tmp[11]);
          rtl.rcArrW(listing,i + 12,"");
          return false;
        };
        if (DEX(i + 13) && LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :STACKORIGIN-1,x") && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :STACKORIGIN-1+STACKWIDTH,x") && LDA_A(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :STACKORIGIN-1+STACKWIDTH*2,x") && LDA_A(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :STACKORIGIN-1+STACKWIDTH*3,x") && MVA(i + 8) && MVA(i + 9) && MVA(i + 10) && MVA(i + 11) && ADD_SUB_EAX_ECX(i + 12) && (rtl.rcArrR(listing,i + 14) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 15) && (rtl.rcArrR(listing,i + 16) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 17) && (rtl.rcArrR(listing,i + 18) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 19) && (rtl.rcArrR(listing,i + 20) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 21)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 8)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 9)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 10)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 11)) > 0)) {
          if (rtl.rcArrR(listing,i + 12) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = "\tadd " + GetString$1(i + 8);
            listing_tmp[2] = rtl.rcArrR(listing,i + 15);
            listing_tmp[3] = rtl.rcArrR(listing,i + 2);
            listing_tmp[4] = "\tadc " + GetString$1(i + 9);
            listing_tmp[5] = rtl.rcArrR(listing,i + 17);
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            listing_tmp[7] = "\tadc " + GetString$1(i + 10);
            listing_tmp[8] = rtl.rcArrR(listing,i + 19);
            listing_tmp[9] = rtl.rcArrR(listing,i + 6);
            listing_tmp[10] = "\tadc " + GetString$1(i + 11);
            listing_tmp[11] = rtl.rcArrR(listing,i + 21);
          } else {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = "\tsub " + GetString$1(i + 8);
            listing_tmp[2] = rtl.rcArrR(listing,i + 15);
            listing_tmp[3] = rtl.rcArrR(listing,i + 2);
            listing_tmp[4] = "\tsbc " + GetString$1(i + 9);
            listing_tmp[5] = rtl.rcArrR(listing,i + 17);
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            listing_tmp[7] = "\tsbc " + GetString$1(i + 10);
            listing_tmp[8] = rtl.rcArrR(listing,i + 19);
            listing_tmp[9] = rtl.rcArrR(listing,i + 6);
            listing_tmp[10] = "\tsbc " + GetString$1(i + 11);
            listing_tmp[11] = rtl.rcArrR(listing,i + 21);
          };
          rtl.rcArrW(listing,i,"\tdex");
          rtl.rcArrW(listing,i + 1,listing_tmp[0]);
          rtl.rcArrW(listing,i + 2,listing_tmp[1]);
          rtl.rcArrW(listing,i + 3,listing_tmp[2]);
          rtl.rcArrW(listing,i + 4,listing_tmp[3]);
          rtl.rcArrW(listing,i + 5,listing_tmp[4]);
          rtl.rcArrW(listing,i + 6,listing_tmp[5]);
          rtl.rcArrW(listing,i + 7,listing_tmp[6]);
          rtl.rcArrW(listing,i + 8,listing_tmp[7]);
          rtl.rcArrW(listing,i + 9,listing_tmp[8]);
          rtl.rcArrW(listing,i + 10,listing_tmp[9]);
          rtl.rcArrW(listing,i + 11,listing_tmp[10]);
          rtl.rcArrW(listing,i + 12,listing_tmp[11]);
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          rtl.rcArrW(listing,i + 20,"");
          rtl.rcArrW(listing,i + 21,"");
          return false;
        };
        if (TAY(i) && LDA_VAL(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :STACKORIGIN,x") && LDA_A(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :STACKORIGIN+STACKWIDTH,x") && LDA_A(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :STACKORIGIN+STACKWIDTH*2,x") && LDA_A(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tsta :STACKORIGIN+STACKWIDTH*3,x") && ADD_SUB_EAX_ECX(i + 9) && DEX(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tlda :STACKORIGIN,x") && STA_VAL(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda :STACKORIGIN+STACKWIDTH,x") && STA(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tlda :STACKORIGIN+STACKWIDTH*2,x") && STA(i + 16) && (rtl.rcArrR(listing,i + 17) === "\tlda :STACKORIGIN+STACKWIDTH*3,x") && STA(i + 18)) {
          if (rtl.rcArrR(listing,i + 9) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tlda :STACKORIGIN-1,x";
            listing_tmp[1] = "\tadd " + GetString$1(i + 1);
            listing_tmp[2] = "\tsta " + GetString$1(i + 12);
            listing_tmp[3] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[4] = "\tadc " + GetString$1(i + 3);
            listing_tmp[5] = "\tsta " + GetString$1(i + 14);
            listing_tmp[6] = "\tlda :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[7] = "\tadc " + GetString$1(i + 5);
            listing_tmp[8] = "\tsta " + GetString$1(i + 16);
            listing_tmp[9] = "\tlda :STACKORIGIN-1+STACKWIDTH*3,x";
            listing_tmp[10] = "\tadc " + GetString$1(i + 7);
            listing_tmp[11] = "\tsta " + GetString$1(i + 18);
          } else {
            listing_tmp[0] = "\tlda :STACKORIGIN-1,x";
            listing_tmp[1] = "\tsub " + GetString$1(i + 1);
            listing_tmp[2] = "\tsta " + GetString$1(i + 12);
            listing_tmp[3] = "\tlda :STACKORIGIN-1+STACKWIDTH,x";
            listing_tmp[4] = "\tsbc " + GetString$1(i + 3);
            listing_tmp[5] = "\tsta " + GetString$1(i + 14);
            listing_tmp[6] = "\tlda :STACKORIGIN-1+STACKWIDTH*2,x";
            listing_tmp[7] = "\tsbc " + GetString$1(i + 5);
            listing_tmp[8] = "\tsta " + GetString$1(i + 16);
            listing_tmp[9] = "\tlda :STACKORIGIN-1+STACKWIDTH*3,x";
            listing_tmp[10] = "\tsbc " + GetString$1(i + 7);
            listing_tmp[11] = "\tsta " + GetString$1(i + 18);
          };
          rtl.rcArrW(listing,i + 1,listing_tmp[0]);
          rtl.rcArrW(listing,i + 2,listing_tmp[1]);
          rtl.rcArrW(listing,i + 3,listing_tmp[2]);
          rtl.rcArrW(listing,i + 4,listing_tmp[3]);
          rtl.rcArrW(listing,i + 5,listing_tmp[4]);
          rtl.rcArrW(listing,i + 6,listing_tmp[5]);
          rtl.rcArrW(listing,i + 7,listing_tmp[6]);
          rtl.rcArrW(listing,i + 8,listing_tmp[7]);
          rtl.rcArrW(listing,i + 9,listing_tmp[8]);
          rtl.rcArrW(listing,i + 10,listing_tmp[9]);
          rtl.rcArrW(listing,i + 11,listing_tmp[10]);
          rtl.rcArrW(listing,i + 12,listing_tmp[11]);
          rtl.rcArrW(listing,i + 13,"\tdex");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          return false;
        };
        if (INX(i) && MVA(i + 1) && MVA(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 4) === "\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x") && INX(i + 5) && MVA(i + 6) && MVA(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x") && (rtl.rcArrR(listing,i + 9) === "\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x") && ADD_SUB_EAX_ECX(i + 10) && DEX(i + 11)) if ((pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(":STACKORIGIN,x",rtl.rcArrR(listing,i + 6)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(":STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 7)) > 0)) {
          if (rtl.rcArrR(listing,i + 10) === "\tjsr addEAX_ECX") {
            listing_tmp[0] = "\tinx";
            listing_tmp[1] = "\tldy #$00";
            listing_tmp[2] = "\tsty :STACKORIGIN+STACKWIDTH*3,x";
            listing_tmp[3] = "\tlda " + GetString$1(i + 1);
            listing_tmp[4] = "\tadd " + GetString$1(i + 6);
            listing_tmp[5] = "\tsta :STACKORIGIN,x";
            listing_tmp[6] = "\tlda " + GetString$1(i + 2);
            listing_tmp[7] = "\tadc " + GetString$1(i + 7);
            listing_tmp[8] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[9] = "\tscc";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = "\tsty :STACKORIGIN+STACKWIDTH*2,x";
          } else {
            listing_tmp[0] = "\tinx";
            listing_tmp[1] = "\tldy #$00";
            listing_tmp[2] = "\tlda " + GetString$1(i + 1);
            listing_tmp[3] = "\tsub " + GetString$1(i + 6);
            listing_tmp[4] = "\tsta :STACKORIGIN,x";
            listing_tmp[5] = "\tlda " + GetString$1(i + 2);
            listing_tmp[6] = "\tsbc " + GetString$1(i + 7);
            listing_tmp[7] = "\tsta :STACKORIGIN+STACKWIDTH,x";
            listing_tmp[8] = "\tscs";
            listing_tmp[9] = "\tdey";
            listing_tmp[10] = "\tsty :STACKORIGIN+STACKWIDTH*2,x";
            listing_tmp[11] = "\tsty :STACKORIGIN+STACKWIDTH*3,x";
          };
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          rtl.rcArrW(listing,i + 5,listing_tmp[5]);
          rtl.rcArrW(listing,i + 6,listing_tmp[6]);
          rtl.rcArrW(listing,i + 7,listing_tmp[7]);
          rtl.rcArrW(listing,i + 8,listing_tmp[8]);
          rtl.rcArrW(listing,i + 9,listing_tmp[9]);
          rtl.rcArrW(listing,i + 10,listing_tmp[10]);
          rtl.rcArrW(listing,i + 11,listing_tmp[11]);
          return false;
        };
        return Result;
      };
      function opt_STACK_PRINT(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var tmp = "";
        function fail(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = JSR(i) || DEX(i) || (pas.System.Pos("\t@print",rtl.rcArrR(listing,i)) > 0);
          return Result;
        };
        Result = true;
        if ((rtl.rcArrR(listing,i + 2) === "\tjsr @printPCHAR") && LDA_IM(i) && LDY_IM(i + 1)) {
          p = rtl.rc(GetWORD(i + 0,i + 1),-2147483648,2147483647);
          rtl.rcArrW(listing,i + 2,"\t@printPCHAR #$" + pas.SysUtils.IntToHex(p,4));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 2) === "\tjsr @printPCHAR") && LDA_VAL(i) && LDY(i + 1)) {
          tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
          if ((tmp + "+1") === pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) {
            rtl.rcArrW(listing,i + 2,"\t@printPCHAR " + tmp);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
        };
        if ((rtl.rcArrR(listing,i + 2) === "\tjsr @printSTRING") && LDA_IM(i) && LDY_IM(i + 1)) {
          p = rtl.rc(GetWORD(i + 0,i + 1),-2147483648,2147483647);
          rtl.rcArrW(listing,i + 2,"\t@printSTRING #$" + pas.SysUtils.IntToHex(p,4));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 2) === "\tjsr @printSTRING") && LDA_VAL(i) && LDY(i + 1)) {
          tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
          if ((tmp + "+1") === pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) {
            rtl.rcArrW(listing,i + 2,"\t@printSTRING " + tmp);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
        };
        if (((rtl.rcArrR(listing,i + 6) === "\tjsr @printSTRING") || (rtl.rcArrR(listing,i + 6) === "\t@printPCHAR")) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_STACK(i + 4) && LDY_STACK(i + 5)) if (argMatch(i + 1,i + 4) && argMatch(i + 3,i + 5)) {
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          if (DEX(i + 7)) for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if (((rtl.rcArrR(listing,i + 4) === "\tjsr @printSTRING") || (rtl.rcArrR(listing,i + 4) === "\t@printPCHAR")) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && LDY_STACK(i + 3)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          if (DEX(i + 5)) for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((rtl.rcArrR(listing,i + 1) === "\t@printCHAR") && MVA_IM(i)) if (pas.System.Pos(" :STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i + 1,"\t@print " + GetString$1(i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 1) === "\t@printCHAR") && (pas.System.Pos("\tmva adr.",rtl.rcArrR(listing,i)) > 0) && IY(i)) if (pas.System.Pos(" :STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 1,"\t@print @");
          if (DEX(i + 2)) for (var $l2 = i - 1; $l2 >= 0; $l2--) {
            p = $l2;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if (INX(i) && (pas.System.Pos("\t@print",rtl.rcArrR(listing,i + 1)) > 0)) {
          p = rtl.rc(i + 1,-2147483648,2147483647);
          while (pas.System.Pos("\t@print",rtl.rcArrR(listing,p)) > 0) p += 1;
          if (DEX(p)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,p,"");
            return false;
          };
        };
        if ((rtl.rcArrR(listing,i + 2) === "\t@printCHAR") && ADD_SUB_AL_CL(i) && DEX(i + 1) && DEX(i + 3)) {
          if (rtl.rcArrR(listing,i) === "\tjsr addAL_CL") {
            rtl.rcArrW(listing,i,"\tadb :STACKORIGIN-1,x :STACKORIGIN,x")}
           else rtl.rcArrW(listing,i,"\tsbb :STACKORIGIN-1,x :STACKORIGIN,x");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 1) === "\tjsr @printBYTE") && STA_STACK(i)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tjsr @printBYTE._a");
          if (DEX(i + 2)) for (var $l3 = i - 1; $l3 >= 0; $l3--) {
            p = $l3;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((rtl.rcArrR(listing,i + 1) === "\tjsr @printBYTE") && MVA(i) && (IY(i) === false)) if (pas.System.Pos(" :STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) {
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 1,"\tjsr @printBYTE._a");
          if (DEX(i + 2)) for (var $l4 = i - 1; $l4 >= 0; $l4--) {
            p = $l4;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((rtl.rcArrR(listing,i + 2) === "\tjsr @printWORD") && MVA(i) && (IY(i) === false) && MVA(i + 1) && (IY(i + 1) === false)) if ((pas.System.Pos(" :STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0)) {
          rtl.rcArrW(listing,i,"\tlda " + GetString$1(i));
          rtl.rcArrW(listing,i + 1,"\tldy " + GetString$1(i + 1));
          rtl.rcArrW(listing,i + 2,"\tjsr @printWORD._ay");
          if (DEX(i + 3)) for (var $l5 = i - 1; $l5 >= 0; $l5--) {
            p = $l5;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((rtl.rcArrR(listing,i + 4) === "\tjsr @printCARD") && MVA(i) && MVA(i + 1) && MVA(i + 2) && MVA(i + 3)) if ((pas.System.Pos(" :STACKORIGIN,x",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH,x",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH*2,x",rtl.rcArrR(listing,i + 2)) > 0) && (pas.System.Pos(" :STACKORIGIN+STACKWIDTH*3,x",rtl.rcArrR(listing,i + 3)) > 0)) {
          rtl.rcArrW(listing,i,"\tmva " + GetString$1(i) + " :dx");
          rtl.rcArrW(listing,i + 1,"\tmva " + GetString$1(i + 1) + " :dx+1");
          rtl.rcArrW(listing,i + 2,"\tmva " + GetString$1(i + 2) + " :dx+2");
          rtl.rcArrW(listing,i + 3,"\tmva " + GetString$1(i + 3) + " :dx+3");
          rtl.rcArrW(listing,i + 4,"\t@printVALUE");
          if (DEX(i + 5)) for (var $l6 = i - 1; $l6 >= 0; $l6--) {
            p = $l6;
            if (fail(p)) {
              break}
             else if (INX(p)) {
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        return Result;
      };
      function opt_BRANCH(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        Result = true;
        if (LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tcmp #$80") && BCS_A(i + 2) && DEY(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tbmi @+");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tcmp #$80") && BCC_A(i + 2) && DEY(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tbpl @+");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tcmp #$7F") && SEQ(i + 2) && BCS_A(i + 3) && DEY(i + 4)) {
          rtl.rcArrW(listing,i + 1,"\tbmi @+");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tcmp #$7F") && BCC_A(i + 2) && BEQ(i + 3) && DEY(i + 4)) {
          rtl.rcArrW(listing,i + 1,"\tbpl @+");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tcmp #$7F") && (rtl.rcArrR(listing,i + 2) === "\tbcc *+7") && (rtl.rcArrR(listing,i + 3) === "\tbeq *+5")) {
          rtl.rcArrW(listing,i + 1,"\tbpl *+5");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((JEQ(i + 5) || JNE(i + 5) || BEQ(i + 5) || BNE(i + 5)) && (SKIP(i + 6) === false) && (DEY(i + 6) === false) && (SKIP(i - 1) === false) && LDA_A(i) && (LDA_BP2_Y(i) === false) && CMP_IM_0(i + 1) && (BEQ(i + 2) || BNE(i + 2)) && LDA_A(i + 3) && LAB_A(i + 4)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((JEQ(i + 3) || JNE(i + 3) || BEQ(i + 3) || BNE(i + 3)) && (SKIP(i + 4) === false) && (DEY(i + 4) === false) && (SKIP(i - 1) === false) && LDA_A(i) && (LDA_BP2_Y(i) === false) && CMP_IM_0(i + 1) && LAB_A(i + 2)) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_IM_0(i) && CMP_IM_0(i + 1) && BNE(i + 2) && (rtl.rcArrR(listing,i + 2) !== "\tbne L1") && (rtl.rcArrR(listing,i + 5) !== "\tbne L1")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (CMP_IM_0(i) && JCC(i + 1) && (JEQ(i + 2) || JNE(i + 2))) {
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA(i) && AND_ORA_EOR(i + 1) && BNE(i + 2) && LDA_IM_0(i + 3) && LAB_A(i + 4) && (BEQ(i + 5) || JEQ(i + 5))) {
          rtl.rcArrW(listing,i + 3,"");
          if (SKIP(i - 1) === false) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"");
          };
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tand #$80") && (JEQ(i + 1) || JNE(i + 1))) {
          rtl.rcArrW(listing,i,"");
          if (JEQ(i + 1)) {
            rtl.rcArrW(listing,i + 1,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
           else rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tand #$80") && LDY_1(i + 2) && ORA_IM_0(i + 3) && SNE(i + 4) && DEY(i + 5) && TYA(i + 6) && JEQ(i + 7) && (SKIP(i + 8) === false)) {
          rtl.rcArrW(listing,i + 1,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tand #$80") && (rtl.rcArrR(listing,i + 2) === "\tcmp #$80") && BNE(i + 3) && LDA_IM_0(i + 4) && CMP_IM_0(i + 5) && LAB_A(i + 6) && (JEQ(i + 7) || JNE(i + 7))) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          if (JEQ(i + 7)) {
            rtl.rcArrW(listing,i + 7,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256))}
           else rtl.rcArrW(listing,i + 7,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tand #$80") && (rtl.rcArrR(listing,i + 2) === "\tcmp #$00") && BNE(i + 3) && LDA_IM_0(i + 4) && CMP_IM_0(i + 5) && LAB_A(i + 6) && (JEQ(i + 7) || JNE(i + 7))) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          if (JEQ(i + 7)) {
            rtl.rcArrW(listing,i + 7,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256))}
           else rtl.rcArrW(listing,i + 7,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tcmp #$80") && (JCC(i + 1) || JCS(i + 1))) {
          rtl.rcArrW(listing,i,"");
          if (JCC(i + 1)) {
            rtl.rcArrW(listing,i + 1,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
           else rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if (BNE_A(i) && LDA_A(i + 1) && CMP_IM_0(i + 2) && LAB_A(i + 3) && JCS(i + 4) && (SKIP(i + 5) === false)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((ENDL(i - 1) === false) && SMI(i) && BNE_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          rtl.rcArrW(listing,i,"\tsmi");
          rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l2 = i - 1; $l2 >= 0; $l2--) {
            p = $l2;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l3 = i - 1; $l3 >= 0; $l3--) {
            p = $l3;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BMI_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l4 = i - 1; $l4 >= 0; $l4--) {
            p = $l4;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && ORA(i + 3) && ORA(i + 4) && SEQ(i + 5) && DEY(i + 6) && LAB_A(i + 7) && TYA(i + 8) && JEQ(i + 9) && (SKIP(i + 10) === false)) {
          rtl.rcArrW(listing,i + 5,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          for (var $l5 = i - 1; $l5 >= 0; $l5--) {
            p = $l5;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && ORA(i + 3) && ORA(i + 4) && SNE(i + 5) && LAB_A(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JNE(i + 10) && (SKIP(i + 11) === false)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 10));
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          for (var $l6 = i - 1; $l6 >= 0; $l6--) {
            p = $l6;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && ORA(i + 3) && ORA(i + 4) && SNE(i + 5) && LAB_A(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JEQ(i + 10) && (SKIP(i + 11) === false)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 10));
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          for (var $l7 = i - 1; $l7 >= 0; $l7--) {
            p = $l7;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && SEQ(i + 3) && DEY(i + 4) && LAB_A(i + 5) && TYA(i + 6) && JEQ(i + 7) && (SKIP(i + 8) === false)) {
          rtl.rcArrW(listing,i + 3,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          for (var $l8 = i - 1; $l8 >= 0; $l8--) {
            p = $l8;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && (JEQ(i + 5) || JNE(i + 5))) {
          if (JEQ(i + 5)) {
            rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256))}
           else rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l9 = i - 1; $l9 >= 0; $l9--) {
            p = $l9;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BNE(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && (JEQ(i + 5) || JNE(i + 5))) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          for (var $l10 = i - 1; $l10 >= 0; $l10--) {
            p = $l10;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i) === false) && BMI_A(i + 1) && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && JNE(i + 6)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 2,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          for (var $l11 = i - 1; $l11 >= 0; $l11--) {
            p = $l11;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i) === false) && BMI_A(i + 1) && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && JEQ(i + 6)) {
          rtl.rcArrW(listing,i + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          for (var $l12 = i - 1; $l12 >= 0; $l12--) {
            p = $l12;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BMI_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l13 = i - 1; $l13 >= 0; $l13--) {
            p = $l13;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l14 = i - 1; $l14 >= 0; $l14--) {
            p = $l14;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i) === false) && (ENDL(i) === false) && BPL_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l15 = i - 1; $l15 >= 0; $l15--) {
            p = $l15;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BCS_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l16 = i - 1; $l16 >= 0; $l16--) {
            p = $l16;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && SEQ(i) && BCS_A(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          rtl.rcArrW(listing,i,"\tbeq @+");
          rtl.rcArrW(listing,i + 1,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l17 = i - 1; $l17 >= 0; $l17--) {
            p = $l17;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCC_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JNE(i + 4)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          for (var $l18 = i - 1; $l18 >= 0; $l18--) {
            p = $l18;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCC_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JEQ(i + 4)) {
          rtl.rcArrW(listing,i,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          for (var $l19 = i - 1; $l19 >= 0; $l19--) {
            p = $l19;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCS_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JEQ(i + 4)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          for (var $l20 = i - 1; $l20 >= 0; $l20--) {
            p = $l20;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && (ENDL(i - 1) === false) && BCS_A(i) && DEY(i + 1) && LAB_A(i + 2) && TYA(i + 3) && JNE(i + 4)) {
          rtl.rcArrW(listing,i,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          for (var $l21 = i - 1; $l21 >= 0; $l21--) {
            p = $l21;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && BCC_A(i) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JNE(i + 5)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l22 = i - 1; $l22 >= 0; $l22--) {
            p = $l22;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((ENDL(i - 1) === false) && BCC_A(i) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i,"\tbcc @+");
          rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"@");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l23 = i - 1; $l23 >= 0; $l23--) {
            p = $l23;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && CMP(i) && BEQ(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && CMP(i) && BCC_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (BMI_A(i + 1) && BEQ(i + 2) && JMP(i + 3) && LAB_A(i + 4)) {
          rtl.rcArrW(listing,i + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (SEQ(i + 1) && BPL_A(i + 2) && JMP(i + 3) && LAB_A(i + 4)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 2,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((SKIP(i) === false) && BPL_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (BCC_A(i) && BEQ(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && BNE(i) && JMP(i + 1) && LAB_A(i + 2)) {
          rtl.rcArrW(listing,i,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (SEQ(i) && BCS_A(i + 1) && JMP(i + 2) && LAB_A(i + 3)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && BCS_A(i) && JMP(i + 1) && LAB_A(i + 2)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && BCC_A(i) && JMP(i + 1) && LAB_A(i + 2)) {
          rtl.rcArrW(listing,i,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && BEQ(i) && JMP(i + 1) && LAB_A(i + 2)) {
          rtl.rcArrW(listing,i,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && (rtl.rcArrR(listing,i) === "\tbne *+5") && JMP(i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && (rtl.rcArrR(listing,i) === "\tbeq *+5") && JMP(i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && (rtl.rcArrR(listing,i) === "\tbcs *+5") && JMP(i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && SEQ(i) && JMP(i + 1)) {
          rtl.rcArrW(listing,i,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_IM_0(i) && (JEQ(i + 1) || JNE(i + 1))) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA_IM_0(i) && JEQ(i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if (LDA_IM(i) && (LDA_IM_0(i) === false) && JNE(i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          return false;
        };
        if (LDA(i) && (LDA_IM(i) === false) && CMP(i + 1) && (CMP_IM(i + 1) === false) && (JNE(i + 2) || BNE(i + 2)) && (SKIP(i + 3) === false)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA(i) && CMP(i + 1) && (JEQ(i + 2) || JCS(i + 2)) && (SKIP(i + 3) === false)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          return false;
        };
        if (LDA(i) && CMP(i + 1) && JCC(i + 2) && JEQ(i + 3)) if (argMatch(i,i + 1)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          return false;
        };
        if (LDY_1(i) && DEY(i + 1) && TYA(i + 2) && (JNE(i + 3) || BNE(i + 3))) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (JCC(i) && JMP(i + 1) && (rtl.rcArrR(listing,i + 2) === pas.System.Copy(rtl.rcArrR(listing,i),6,256))) {
          rtl.rcArrW(listing,i,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (JCS(i) && JMP(i + 1) && (rtl.rcArrR(listing,i + 2) === pas.System.Copy(rtl.rcArrR(listing,i),6,256))) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (JNE(i) && JMP(i + 1) && (rtl.rcArrR(listing,i + 2) === pas.System.Copy(rtl.rcArrR(listing,i),6,256))) {
          rtl.rcArrW(listing,i,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (JEQ(i) && JMP(i + 1) && (rtl.rcArrR(listing,i + 2) === pas.System.Copy(rtl.rcArrR(listing,i),6,256))) {
          rtl.rcArrW(listing,i,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i) === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",rtl.rcArrR(listing,i + 1)) > 0) && JMP(i + 2) && LAB_L(i + 3)) if (pas.System.Pos(rtl.rcArrR(listing,i + 3),rtl.rcArrR(listing,i + 1)) > 0) {
          rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 1,"@");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (BCC_A(i) && BEQ_A(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",rtl.rcArrR(listing,i + 3)) > 0) && (JMP(i + 4) === false)) {
          rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),7,256));
          rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 3),7,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && (BEQ_A(i) || BNE_A(i)) && (rtl.rcArrR(listing,i + 1) === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",rtl.rcArrR(listing,i + 2)) > 0) && (JMP(i + 3) === false)) {
          if (BEQ(i)) {
            rtl.rcArrW(listing,i,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256))}
           else rtl.rcArrW(listing,i,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && (BCS_A(i) || BCC_A(i)) && (rtl.rcArrR(listing,i + 1) === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",rtl.rcArrR(listing,i + 2)) > 0) && (JMP(i + 3) === false)) {
          if (BCS_A(i)) {
            rtl.rcArrW(listing,i,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256))}
           else rtl.rcArrW(listing,i,"\tjcc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && (BPL_A(i) || BMI_A(i)) && (rtl.rcArrR(listing,i + 1) === "\tjmp *+6") && (pas.System.Pos("@\tjmp l_",rtl.rcArrR(listing,i + 2)) > 0) && (JMP(i + 3) === false)) {
          if (BPL_A(i)) {
            rtl.rcArrW(listing,i,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256))}
           else rtl.rcArrW(listing,i,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDY_1(i) && (pas.System.Pos("\tjne l_",rtl.rcArrR(listing,i + 1)) > 0)) {
          rtl.rcArrW(listing,i,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        return Result;
      };
      function opt_CMP_BP2(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        Result = true;
        if (MWY_BP2(i) && LDY_IM_0(i + 1) && LDA_BP2_Y(i + 2) && CMP(i + 3)) {
          rtl.rcArrW(listing,i + 1,"\tldy " + GetString$1(i));
          rtl.rcArrW(listing,i,"\tmvy " + GetString$1(i) + "+1 :bp+1");
          rtl.rcArrW(listing,i + 2,"\tlda (:bp),y");
          return false;
        };
        if (LAB_A(i + 21) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && CMP(i + 11) && BNE_A(i + 12) && LDA_STACK(i + 13) && CMP(i + 14) && BNE_A(i + 15) && LDA_STACK(i + 16) && CMP(i + 17) && BNE_A(i + 18) && LDA_STACK(i + 19) && CMP(i + 20)) if (argMatch(i + 2,i + 19) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 13)) {
          if (pas.System.Pos("\tldy #$",rtl.rcArrR(listing,i)) === 1) {
            p = rtl.rc(GetBYTE(i) + 3,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(p,2));
          } else rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + "+$03");
          rtl.rcArrW(listing,i + 1,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 11));
          rtl.rcArrW(listing,i + 3,"\tbne @+");
          rtl.rcArrW(listing,i + 4,"\tdey");
          rtl.rcArrW(listing,i + 5,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 14));
          rtl.rcArrW(listing,i + 7,"\tbne @+");
          rtl.rcArrW(listing,i + 8,"\tdey");
          rtl.rcArrW(listing,i + 9,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 17));
          rtl.rcArrW(listing,i + 11,"\tbne @+");
          rtl.rcArrW(listing,i + 12,"\tdey");
          rtl.rcArrW(listing,i + 13,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 20));
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          rtl.rcArrW(listing,i + 20,"");
          return false;
        };
        if (LAB_A(i + 19) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && BNE(i + 13) && LDA_STACK(i + 14) && BNE(i + 15) && LDA_STACK(i + 16) && BNE(i + 17) && LDA_STACK(i + 18) && (JEQ(i + 20) || JNE(i + 20)) && (SKIP(i + 21) === false)) if (argMatch(i + 2,i + 18) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 14) && argMatch(i + 11,i + 12)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 4,"\tora (:bp2),y");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 7,"\tora (:bp2),y");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 10,"\tora (:bp2),y");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          return false;
        };
        if (MWY_BP2(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 4)) && LDY(i + 1) && LDA_BP2_Y(i + 2) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && CMP_STACK(i + 9)) if (argMatch(i + 3,i + 8) && argMatch(i + 7,i + 9)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 6,"\tcmp (:bp2),y");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (LDY(i) && LDA(i + 1) && IY(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LDA_A(i + 4) && IY(i + 4) && CMP_STACK(i + 5)) if (argMatch(i + 2,i + 5)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 5,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LAB_A(i + 17) && LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_SUB(i + 7) && STA_STACK(i + 8) && LDA_VAL(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && CMP_STACK(i + 13) && BNE_A(i + 14) && LDA_STACK(i + 15) && CMP_STACK(i + 16)) if (argMatch(i + 2,i + 16) && argMatch(i + 5,i + 13) && argMatch(i + 8,i + 15) && argMatch(i + 11,i + 12)) {
          rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 10));
          rtl.rcArrW(listing,i + 5,"\tldy #$01");
          rtl.rcArrW(listing,i + 6,"\tcmp (:bp2),y");
          rtl.rcArrW(listing,i + 7,"\tbne @+");
          rtl.rcArrW(listing,i + 8,"\tdey");
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 15));
          rtl.rcArrW(listing,i + 10,"\tcmp (:bp2),y");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          return false;
        };
        if (LAB_A(i + 9) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && CMP(i + 5) && BNE_A(i + 6) && LDA_STACK(i + 7) && CMP(i + 8)) if (argMatch(i + 2,i + 7)) {
          if (pas.System.Pos("\tldy #$",rtl.rcArrR(listing,i)) === 1) {
            p = rtl.rc(GetBYTE(i) + 1,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(p,2));
          } else rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + "+$01");
          rtl.rcArrW(listing,i + 1,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 3,"\tbne @+");
          rtl.rcArrW(listing,i + 4,"\tdey");
          rtl.rcArrW(listing,i + 5,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (LAB_A(i + 9) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_A(i + 4) && CMP_BP2_Y(i + 5) && BNE_A(i + 6) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (argMatch(i + 2,i + 8)) {
          if (pas.System.Pos("\tldy #$",rtl.rcArrR(listing,i)) === 1) {
            p = rtl.rc(GetBYTE(i) + 1,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(p,2));
          } else rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + "+$01");
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 3,"\tbne @+");
          rtl.rcArrW(listing,i + 4,"\tdey");
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 7));
          rtl.rcArrW(listing,i + 6,"\tcmp (:bp2),y");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && SKIP(i + 5) && AND_ORA_EOR_STACK(i + 6) && SKIP(i + 7)) if (argMatch(i + 2,i + 6)) {
          if (pas.System.Pos("\tldy #$",rtl.rcArrR(listing,i)) === 1) {
            p = rtl.rc(GetBYTE(i) + 1,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(p,2));
          } else rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + "+$01");
          rtl.rcArrW(listing,i + 1,"\tlda (:bp2),y");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 3,"\tdey");
          if (ORA_STACK(i + 6)) {
            rtl.rcArrW(listing,i + 4,"\tora (:bp2),y")}
           else if (EOR_STACK(i + 6)) {
            rtl.rcArrW(listing,i + 4,"\teor (:bp2),y")}
           else rtl.rcArrW(listing,i + 4,"\tand (:bp2),y");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        return Result;
      };
      function opt_LOCAL(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        Result = true;
        if ((rtl.rcArrR(listing,i + 12) === "\tbne L1") && LDA_IM(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && AND_ORA_EOR_VAL(i + 3) && STA_A(i + 4) && LDY_1(i + 5) && LOCAL(i + 6) && LDA_A(i + 7) && SUB(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L4") && LDA_A(i + 10) && CMP(i + 11) && LDA_STACK(i + 13)) if (argMatch(i + 1,i + 13)) {
          rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 15) === "\tbne L1") && LDA_IM(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && AND_ORA_EOR_VAL(i + 3) && STA_STACK(i + 4) && LDY_1(i + 5) && LOCAL(i + 6) && LDA_A(i + 7) && SUB(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L4") && LDA_A(i + 10) && CMP(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tbne L1") && LDA_A(i + 13) && CMP(i + 14) && LDA_STACK(i + 16)) if (argMatch(i + 1,i + 16)) {
          rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 16) === "\tbne L1") && LDY_IM(i) && LDA_IM(i + 1) && STA_STACK(i + 2) && STY_STACK(i + 3) && STY_STACK(i + 4) && STY_STACK(i + 5) && LDY_1(i + 6) && LOCAL(i + 7) && LDA_A(i + 8) && SUB_STACK(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tbne L4") && LDA_A(i + 11) && CMP_STACK(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tbne L1") && LDA_A(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17) && CMP_STACK(i + 18)) if (argMatch(i + 2,i + 18) && argMatch(i + 3,i + 15) && argMatch(i + 4,i + 12) && argMatch(i + 5,i + 9)) {
          rtl.rcArrW(listing,i + 9,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 12,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 15,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 18,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (ADC_SBC(i) && LOCAL(i + 1) && LDA_A(i + 2)) {
          if ((i > 0) && LDA_A(i - 1)) rtl.rcArrW(listing,i - 1,"");
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA_A(i) && LOCAL(i + 1) && SUB(i + 2)) {
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"\t.LOCAL");
          return false;
        };
        if (LDA_A(i) && LDY(i + 1) && LOCAL(i + 2) && LDA_A(i + 3)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA_A(i) && LOCAL(i + 1) && LDA_A(i + 2)) {
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_STACK(i + 3)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && LDA_A(i + 6) && CMP_STACK(i + 7)) if (argMatch(i + 1,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && LDA_STACK(i + 6) && CMP(i + 7)) if (argMatch(i + 1,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 8) === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tbne L1") && LDA_A(i + 9) && CMP_STACK(i + 10)) if (argMatch(i + 1,i + 10)) {
          rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 8) === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && LDA_STACK(i + 9)) if (argMatch(i + 1,i + 9)) {
          rtl.rcArrW(listing,i + 9,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 11) === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tbne L1") && LDA_A(i + 9) && CMP(i + 10) && LDA_A(i + 12) && CMP_STACK(i + 13)) if (argMatch(i + 1,i + 13)) {
          rtl.rcArrW(listing,i + 13,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 11) === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && LOCAL(i + 2) && LDA_A(i + 3) && SUB(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tbne L4") && LDA_A(i + 6) && CMP(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tbne L1") && LDA_A(i + 9) && CMP(i + 10) && LDA_STACK(i + 12)) if (argMatch(i + 1,i + 12)) {
          rtl.rcArrW(listing,i + 12,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 7) === "\tbne L4") && LDY(i) && LDA_A(i + 1) && STY_STACK(i + 2) && STA_STACK(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_STACK(i + 6) && LDA_A(i + 8) && CMP_STACK(i + 9)) if (argMatch(i + 2,i + 6) && argMatch(i + 3,i + 9)) {
          rtl.rcArrW(listing,i + 6,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 14) === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && STA_STACK(i + 4) && LOCAL(i + 5) && LDA_A(i + 6) && SUB_STACK(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tbne L4") && LDA_A(i + 9) && CMP_STACK(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tbne L1") && LDA_A(i + 12) && CMP_STACK(i + 13) && LDA_A(i + 15) && CMP_STACK(i + 16)) if (argMatch(i + 1,i + 16) && argMatch(i + 2,i + 13) && argMatch(i + 3,i + 10) && argMatch(i + 4,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 13,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 16,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 13) === "\tbne L1") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_IM_0(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tbne L4") && LDA_A(i + 8) && CMP_STACK(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tbne L1") && LDA_A(i + 11) && CMP_STACK(i + 12) && LDA_A(i + 14) && CMP_STACK(i + 15)) if (argMatch(i + 1,i + 9) && argMatch(i + 2,i + 12) && argMatch(i + 3,i + 15)) {
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 12,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 15,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 7) === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LOCAL(i + 4) && LDA_STACK(i + 5) && LDA_STACK(i + 8) && CMP(i + 9) && LDA_STACK(i + 11)) if (argMatch(i + 1,i + 11) && argMatch(i + 2,i + 8) && argMatch(i + 3,i + 5)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (argMatch(i + 1,i + 5) && argMatch(i + 2,i + 8)) {
          rtl.rcArrW(listing,i + 5,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 8,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB(i + 5) && LDA_STACK(i + 7) && CMP(i + 8)) if (argMatch(i + 1,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (argMatch(i + 1,i + 8)) {
          rtl.rcArrW(listing,i + 8,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA(i + 4) && SUB_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
          rtl.rcArrW(listing,i + 5,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP_STACK(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tbne L1") && LDA_A(i + 13) && CMP_STACK(i + 14)) if (argMatch(i + 1,i + 14)) {
          rtl.rcArrW(listing,i + 14,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP_STACK(i + 11)) if (argMatch(i + 1,i + 11)) {
          rtl.rcArrW(listing,i + 11,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 6) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LOCAL(i + 3) && LDA_A(i + 4) && SUB_STACK(i + 5) && LDA_A(i + 7) && CMP_STACK(i + 8)) if (argMatch(i + 1,i + 8)) {
          rtl.rcArrW(listing,i + 8,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 7) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_STACK(i + 6) && LDA_A(i + 8) && CMP_STACK(i + 9)) if (argMatch(i + 1,i + 9) && argMatch(i + 2,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 7) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LOCAL(i + 4) && LDA_A(i + 5) && SUB_STACK(i + 6) && LDA_A(i + 8) && CMP_STACK(i + 9)) if (argMatch(i + 1,i + 6) && argMatch(i + 2,i + 9)) {
          rtl.rcArrW(listing,i + 6,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 8) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY(i + 4) && LOCAL(i + 5) && LDA(i + 6) && SUB_IM_0(i + 7) && LDA(i + 9) && CMP(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tbne L1") && LDA(i + 12)) if (argMatch(i + 1,i + 12) && argMatch(i + 2,i + 9) && argMatch(i + 3,i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 8) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY(i + 4) && LOCAL(i + 5) && LDA_A(i + 6) && SUB_IM_0(i + 7) && LDA_A(i + 9) && CMP_STACK(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tbne L1") && LDA_A(i + 12) && CMP_STACK(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tbne L1") && LDA_A(i + 15) && CMP_STACK(i + 16)) if (argMatch(i + 1,i + 10) && argMatch(i + 2,i + 13) && argMatch(i + 3,i + 16)) {
          rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 13,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 16,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 9) === "\tbne L4") && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && STA_STACK(i + 4) && LDY(i + 5) && LOCAL(i + 6) && LDA_A(i + 7) && SUB_STACK(i + 8) && LDA_A(i + 10) && CMP_STACK(i + 11) && (rtl.rcArrR(listing,i + 12) === "\tbne L1") && LDA_A(i + 13) && CMP_STACK(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tbne L1") && LDA_A(i + 16) && CMP_STACK(i + 17)) if (argMatch(i + 1,i + 8) && argMatch(i + 2,i + 11) && argMatch(i + 3,i + 14) && argMatch(i + 4,i + 17)) {
          rtl.rcArrW(listing,i + 8,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 11,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 14,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 17,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 13) === "\tbne L4") && (rtl.rcArrR(listing,i + 16) === "\tbne L1") && LDA_STACK(i) && ADC_SBC_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_IM_0(i + 11) && SUB_STACK(i + 12) && LDA_IM_0(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17) && CMP_STACK(i + 18)) if (argMatch(i + 2,i + 18) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 12)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 12,"\tsub #$00");
          rtl.rcArrW(listing,i + 15,"\tcmp #$00");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 13) === "\tbne L4") && (rtl.rcArrR(listing,i + 16) === "\tbne L1") && LDA_IM_0(i) && (ADC_SBC_IM_0(i + 1) || ADC_SBC_STACK(i + 1)) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_IM_0(i + 11) && SUB_STACK(i + 12) && LDA_IM_0(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17) && CMP_STACK(i + 18)) if (argMatch(i + 2,i + 18) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 12)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 12,"\tsub #$00");
          rtl.rcArrW(listing,i + 15,"\tcmp #$00");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 13) === "\tbne L4") && (rtl.rcArrR(listing,i + 16) === "\tbne L1") && LDA_STACK(i) && ADC_SBC_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_STACK(i + 11) && SUB_IM_0(i + 12) && LDA_STACK(i + 14) && CMP_IM_0(i + 15) && LDA_STACK(i + 17)) if (argMatch(i + 2,i + 17) && argMatch(i + 5,i + 14) && argMatch(i + 8,i + 11)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 11,"\tlda #$00");
          rtl.rcArrW(listing,i + 14,"\tlda #$00");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 13) === "\tbne L4") && (rtl.rcArrR(listing,i + 16) === "\tbne L1") && LDA_IM_0(i) && ADC_SBC_STACK(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_STACK(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_STACK(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LOCAL(i + 10) && LDA_STACK(i + 11) && SUB_IM_0(i + 12) && LDA_STACK(i + 14) && CMP_IM_0(i + 15) && LDA_STACK(i + 17)) if (argMatch(i + 2,i + 17) && argMatch(i + 5,i + 14) && argMatch(i + 8,i + 11)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 11,"\tlda #$00");
          rtl.rcArrW(listing,i + 14,"\tlda #$00");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 15) === "\tbne L4") && (rtl.rcArrR(listing,i + 18) === "\tbne L1") && LDA_STACK(i) && ADC_SBC_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDA_VAL(i + 9) && ASL_A(i + 10) && TAY(i + 11) && LOCAL(i + 12) && LDA_STACK(i + 13) && SUB_IM_0(i + 14) && LDA_STACK(i + 16) && CMP_IM_0(i + 17) && LDA_STACK(i + 19)) if (argMatch(i + 2,i + 19) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 13)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 13,"\tlda #$00");
          rtl.rcArrW(listing,i + 16,"\tlda #$00");
          return false;
        };
        if ((rtl.rcArrR(listing,i + 15) === "\tbne L4") && (rtl.rcArrR(listing,i + 18) === "\tbne L1") && LDA_IM_0(i) && ADC_SBC_STACK(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_STACK(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_STACK(i + 7) && STA_STACK(i + 8) && LDA_VAL(i + 9) && ASL_A(i + 10) && TAY(i + 11) && LOCAL(i + 12) && LDA_STACK(i + 13) && SUB_IM_0(i + 14) && LDA_STACK(i + 16) && CMP_IM_0(i + 17) && LDA_STACK(i + 19)) if (argMatch(i + 2,i + 19) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 13)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 13,"\tlda #$00");
          rtl.rcArrW(listing,i + 16,"\tlda #$00");
          return false;
        };
        if (ENDL(i + 22) && LDY_IM_0(i) && LDA_VAL(i + 1) && SPL(i + 2) && DEY(i + 3) && STY_STACK(i + 4) && STA_STACK(i + 5) && LDY(i + 6) && LOCAL(i + 7) && LDA_STACK(i + 8) && SUB_IM_0(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tbne L4") && LDA_STACK(i + 11) && CMP_IM(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tbeq L5") && (rtl.rcArrR(listing,i + 14) === "\tlda #$00") && (rtl.rcArrR(listing,i + 15) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 16) === "\tora #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) if (argMatch(i + 4,i + 8) && argMatch(i + 5,i + 11)) {
          if (GetBYTE(i + 12) < 128) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 9,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256));
            rtl.rcArrW(listing,i + 10,"\tbeq L5");
            rtl.rcArrW(listing,i + 11,"\tbvc L5");
            rtl.rcArrW(listing,i + 12,"\teor #$FF");
            rtl.rcArrW(listing,i + 13,"\tora #$01");
            rtl.rcArrW(listing,i + 14,"L5");
            rtl.rcArrW(listing,i + 15,"\t.ENDL");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            return false;
          };
        };
        if (ENDL(i + 22) && LOCAL(i) && LDA_IM_0(i + 1) && SUB_IM_0(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_IM_0(i + 4) && CMP_IM_0(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"\t.LOCAL");
          rtl.rcArrW(listing,i + 8,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
          rtl.rcArrW(listing,i + 9,"\tbne L4");
          rtl.rcArrW(listing,i + 12,"\tbeq L5");
          rtl.rcArrW(listing,i + 13,"\tlda #$00");
          rtl.rcArrW(listing,i + 14,"\tadc #$FF");
          rtl.rcArrW(listing,i + 15,"\tora #$01");
          rtl.rcArrW(listing,i + 16,"\tbne L5");
          rtl.rcArrW(listing,i + 17,"L4\tbvc L5");
          rtl.rcArrW(listing,i + 18,"\teor #$FF");
          rtl.rcArrW(listing,i + 19,"\tora #$01");
          rtl.rcArrW(listing,i + 20,"L5");
          rtl.rcArrW(listing,i + 21,"");
          return false;
        };
        return Result;
      };
      function opt_LT_GTEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var k = 0;
        Result = true;
        if (LAB_A(i + 11) && LDA_A(i) && CMP_IM_0(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM_0(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP_IM_0(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP(i + 10) && (JCS(i + 12) || JCC(i + 12)) && (SKIP(i + 13) === false)) {
          if (CMP_IM_0(i + 10)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            if (JCS(i + 12)) {
              rtl.rcArrW(listing,i + 12,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256))}
             else rtl.rcArrW(listing,i + 12,"");
          } else if (JCS(i + 12)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256));
          } else {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 12,"@");
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM_0(i + 4) && LAB_A(i + 5) && JCC(i + 6) && (SKIP(i + 7) === false)) {
          k = rtl.rc(GetWORD(i + 4,i + 1),-2147483648,2147483647);
          if (k === 0) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
          } else {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"@");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 3,"\tbne @+");
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_VAL(i) && CMP_IM_0(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP(i + 4) && LAB_A(i + 5) && (JCS(i + 6) || JCC(i + 6)) && (SKIP(i + 7) === false)) {
          if (CMP_IM_0(i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            if (JCS(i + 6)) {
              rtl.rcArrW(listing,i + 6,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256))}
             else rtl.rcArrW(listing,i + 6,"");
          } else if (JCS(i + 6)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          } else {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"@");
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP_IM_0(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP_IM_0(i + 4) && LAB_A(i + 5) && BCS(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && (STA(i + 10) || AND_ORA_EOR(i + 10)) && (DEX(i + 12) === false)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM_0(i + 1) && (JCS(i + 2) || JCC(i + 2)) && (SKIP(i + 3) === false)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          if (JCS(i + 2)) {
            rtl.rcArrW(listing,i + 2,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256))}
           else rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (ENDL(i + 8) && (BPL(i + 9) || BMI(i + 9)) && DEY(i + 10) && LAB_A(i + 11) && (STY(i + 12) || TYA(i + 12)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          p = rtl.rc(rtl.rc(GetBYTE(i + 2),-128,127),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
          } else if (BPL(i + 9) && (p === 127)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tcmp #$7F");
            rtl.rcArrW(listing,i + 2,"\tbeq @+");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
          } else if (BMI(i + 9) && (p === -128)) {
            rtl.rcArrW(listing,i,"\tbeq @+");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
          } else {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,"\tsvc");
            rtl.rcArrW(listing,i + 3,"\teor #$80");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 9));
          };
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 8) && (BPL(i + 9) || BMI(i + 9)) && DEY(i + 10) && LAB_A(i + 11) && (STY(i + 12) || TYA(i + 12)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (SUB_IM(i + 2) === false) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 2,"\tsvc");
          rtl.rcArrW(listing,i + 3,"\teor #$80");
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 9));
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && BMI_A(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && STA_A(i + 6) && (DEX(i + 8) === false)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"\tcmp #$80");
          rtl.rcArrW(listing,i + 3,"\tlda #$00");
          rtl.rcArrW(listing,i + 4,"\trol @");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (ENDL(i + 15) && BMI(i + 16) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          p = rtl.rc(rtl.rc(GetWORD(i + 5,i + 2),-32768,32767),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 1));
          } else if (p !== -32768) {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 13,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 14,"\tsvc");
            rtl.rcArrW(listing,i + 15,"\teor #$80");
          } else {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"\tbeq @+");
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 15) && BPL(i + 16) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          p = rtl.rc(rtl.rc(GetWORD(i + 5,i + 2),-32768,32767),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 1));
          } else {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 13,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 14,"\tsvc");
            rtl.rcArrW(listing,i + 15,"\teor #$80");
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 15) && (BPL(i + 16) || BMI(i + 16)) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (CMP_IM(i + 5) === false) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 13,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 14,"\tsvc");
          rtl.rcArrW(listing,i + 15,"\teor #$80");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 22) && (BPL(i + 23) || BMI(i + 23)) && DEY(i + 24) && LAB_A(i + 25) && (STY(i + 26) || TYA(i + 26)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP_IM(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP_IM(i + 11) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          p = rtl.rc(GetBYTE(i + 11) + (GetBYTE(i + 8) << 8) + (GetBYTE(i + 5) << 16) + (GetBYTE(i + 2) << 24),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            return false;
          } else if (BMI(i + 23) && (p === -2147483648)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"\tbeq @+");
            return false;
          } else {
            if ((i > 0) && LDY_1(i - 1) && TYA(i + 26) && (JEQ(i + 27) || JNE(i + 27))) {
              rtl.rcArrW(listing,i - 1,"");
              if (JEQ(i + 27)) {
                if (BPL(i + 23)) {
                  rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256))}
                 else rtl.rcArrW(listing,i + 23,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256));
              } else {
                if (BPL(i + 23)) {
                  rtl.rcArrW(listing,i + 23,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256))}
                 else rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256));
              };
              rtl.rcArrW(listing,i + 24,"");
              rtl.rcArrW(listing,i + 25,"");
              rtl.rcArrW(listing,i + 26,"");
              rtl.rcArrW(listing,i + 27,"");
              return false;
            };
          };
        };
        if (ENDL(i + 22) && (BPL(i + 23) || BMI(i + 23)) && DEY(i + 24) && LAB_A(i + 25) && TYA(i + 26) && (JEQ(i + 27) || JNE(i + 27)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (CMP_IM(i + 11) === false) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          if (JEQ(i + 27)) {
            if (BPL(i + 23)) {
              rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256))}
             else rtl.rcArrW(listing,i + 23,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256));
          } else {
            if (BPL(i + 23)) {
              rtl.rcArrW(listing,i + 23,"\tjpl " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256))}
             else rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 27),6,256));
          };
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          rtl.rcArrW(listing,i + 24,"");
          rtl.rcArrW(listing,i + 25,"");
          rtl.rcArrW(listing,i + 26,"");
          rtl.rcArrW(listing,i + 27,"");
          return false;
        };
        return Result;
      };
      function opt_LTEQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var c = 0;
        var tmp = "";
        Result = true;
        if (LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP_IM(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP_IM(i + 10) && LAB_A(i + 11) && BCC_A(i + 12) && JNE(i + 13) && LAB_A(i + 14)) {
          c = rtl.rc(GetWORD(i + 10,i + 7) + (GetWORD(i + 4,i + 1) << 16),0,4294967295);
          if (c === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 14,"");
            return false;
          } else if (c < 0xFFFFFFFF) {
            c += 1;
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw(c >>> 24),0,255),2));
            rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw(c >>> 16),0,255),2));
            rtl.rcArrW(listing,i + 7,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw(c >>> 8),0,255),2));
            if ((c & 0xff) === 0) {
              rtl.rcArrW(listing,i + 8,"\tsne");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
            } else rtl.rcArrW(listing,i + 10,"\tcmp #$" + pas.SysUtils.IntToHex(c & 0xff,2));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 13),6,256));
            rtl.rcArrW(listing,i + 14,"");
            return false;
          } else {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && JCC(i + 6) && JEQ(i + 7)) {
          p = rtl.rc(GetWORD(i + 4,i + 1),-2147483648,2147483647);
          if ((p > 0) && (p < 0xFFFF)) {
            p += 1;
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 7,"@");
            if ((p & 0xff) !== 0) {
              rtl.rcArrW(listing,i + 5,"\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2))}
             else rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,"\tbne @+");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && BCC_A(i + 6) && JNE(i + 7) && LAB_A(i + 8)) {
          p = rtl.rc(GetWORD(i + 4,i + 1),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          } else if (p < 0xFFFF) {
            p += 1;
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            if ((p & 0xff) === 0) {
              rtl.rcArrW(listing,i + 2,"\tsne");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
            } else rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 8,"");
            return false;
          } else {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && BNE(i + 2) && LDA(i + 3) && CMP(i + 4) && (CMP_IM(i + 4) === false) && LAB_A(i + 5) && BCC_A(i + 6) && BEQ_A(i + 7) && DEY(i + 8) && LAB_A(i + 9)) {
          tmp = rtl.rcArrR(listing,i);
          rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(tmp,6,256));
          tmp = rtl.rcArrR(listing,i + 3);
          rtl.rcArrW(listing,i + 3,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(tmp,6,256));
          rtl.rcArrW(listing,i + 6,"\tbcs @+");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && BCC_A(i + 6) && BEQ_A(i + 7) && DEY(i + 8) && LAB_A(i + 9) && TYA(i + 10) && (STA(i + 11) || AND_ORA_EOR(i + 11)) && (DEX(i + 13) === false)) {
          c = rtl.rc(GetWORD(i + 4,i + 1),0,4294967295);
          if (c === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          } else if (c < 0xFFFF) {
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 8),0,255),2));
            rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BCC_A(i + 2) && JNE(i + 3) && LAB_A(i + 4)) {
          p = rtl.rc(GetBYTE(i + 1),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          } else if (p < 0xFF) {
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex((p + 1) & 0xff,2));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"");
            return false;
          } else {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && JCC(i + 2) && JEQ(i + 3)) {
          rtl.rcArrW(listing,i + 2,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && BCC(i + 2) && BEQ(i + 3) && DEY(i + 4) && LAB_A(i + 5) && (STY(i + 6) || TYA(i + 6))) {
          rtl.rcArrW(listing,i + 2,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"\tbcs @+");
          return false;
        };
        if (ENDL(i + 8) && BMI(i + 9) && BEQ(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          p = rtl.rc(rtl.rc(GetBYTE(i + 2),-128,127),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
          } else if (p === -128) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 5,"\tcmp #$80");
            rtl.rcArrW(listing,i + 6,"\tbeq @+");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
          } else {
            p += 1;
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 5,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 6,"\tsvc");
            rtl.rcArrW(listing,i + 7,"\teor #$80");
            rtl.rcArrW(listing,i + 8,"\tbmi @+");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (ENDL(i + 8) && BMI(i + 9) && BEQ(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (SUB_IM(i + 2) === false) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          tmp = rtl.rcArrR(listing,i + 1);
          rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"\tsub " + pas.System.Copy(tmp,6,256));
          rtl.rcArrW(listing,i + 9,"\tbpl @+");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if (ENDL(i + 15) && BMI_A(i + 16) && BEQ_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          p = rtl.rc(GetWORD(i + 5,i + 2),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 15,"\tbmi @+");
            rtl.rcArrW(listing,i + 16,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 17,"\tseq");
          } else {
            p += 1;
            if (p === 0x8000) {
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              rtl.rcArrW(listing,i + 13,"");
              rtl.rcArrW(listing,i + 14,"");
              rtl.rcArrW(listing,i + 15,"");
              rtl.rcArrW(listing,i + 16,"");
            } else {
              rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 11,"\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2));
              rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 13,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
              rtl.rcArrW(listing,i + 14,"\tsvc");
              rtl.rcArrW(listing,i + 15,"\teor #$80");
              rtl.rcArrW(listing,i + 16,"\tbmi @+");
              rtl.rcArrW(listing,i + 17,"");
            };
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 15) && BMI_A(i + 16) && BEQ_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA(i + 4) && CMP(i + 5) && (CMP_IM(i + 5) === false) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          rtl.rcArrW(listing,i + 11,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 12,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 13,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 14,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 15,"\tsvc");
          rtl.rcArrW(listing,i + 16,"\teor #$80");
          rtl.rcArrW(listing,i + 17,"\tbpl @+");
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if (ENDL(i + 22) && BMI_A(i + 23) && BEQ_A(i + 24) && DEY(i + 25) && LAB_A(i + 26) && (STY(i + 27) || TYA(i + 27)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP_IM(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP_IM(i + 11) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          if (SUB_IM_0(i + 2) && CMP_IM_0(i + 5) && CMP_IM_0(i + 8) && CMP_IM_0(i + 11)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tbmi @+");
            rtl.rcArrW(listing,i + 2,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 4,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
            rtl.rcArrW(listing,i + 5,"\tseq");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            return false;
          } else {
            if ((i > 0) && LDY_1(i - 1) && TYA(i + 27) && (JEQ(i + 28) || JNE(i + 28))) {
              rtl.rcArrW(listing,i - 1,"");
              if (JEQ(i + 28)) {
                rtl.rcArrW(listing,i + 23,"\tsmi");
                rtl.rcArrW(listing,i + 24,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
              } else {
                rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
                rtl.rcArrW(listing,i + 24,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
              };
              rtl.rcArrW(listing,i + 25,"");
              rtl.rcArrW(listing,i + 26,"");
              rtl.rcArrW(listing,i + 27,"");
              rtl.rcArrW(listing,i + 28,"");
              return false;
            };
          };
        };
        if (ENDL(i + 22) && BMI_A(i + 23) && BEQ_A(i + 24) && DEY(i + 25) && LAB_A(i + 26) && TYA(i + 27) && (JEQ(i + 28) || JNE(i + 28)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (CMP_IM(i + 11) === false) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          if (JEQ(i + 28)) {
            rtl.rcArrW(listing,i + 23,"\tsmi");
            rtl.rcArrW(listing,i + 24,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
          } else {
            rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
            rtl.rcArrW(listing,i + 24,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
          };
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          rtl.rcArrW(listing,i + 25,"");
          rtl.rcArrW(listing,i + 26,"");
          rtl.rcArrW(listing,i + 27,"");
          rtl.rcArrW(listing,i + 28,"");
          return false;
        };
        return Result;
      };
      function opt_GT(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        var c = 0;
        var tmp = "";
        Result = true;
        if (LAB_A(i + 11) && JCC(i + 12) && JEQ(i + 13) && LDA_A(i) && BNE_A(i + 1) && DEY(i + 2) && LDA_A(i + 3) && BNE_A(i + 4) && DEY(i + 5) && LDA_A(i + 6) && BNE_A(i + 7) && DEY(i + 8) && LDA_A(i + 9) && CMP_IM_0(i + 10)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 6,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 9,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 12,"");
          return false;
        };
        if (LAB_A(i + 11) && JCC(i + 12) && JEQ(i + 13) && LDA_VAL(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP_IM(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP_IM(i + 10)) {
          c = rtl.rc(GetDWORD(i + 10,i + 7,i + 4,i + 1),0,4294967295);
          if (c === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          } else if (c < 0xFFFFFFFF) {
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 24),0,255),2));
            rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 16),0,255),2));
            rtl.rcArrW(listing,i + 7,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 8),0,255),2));
            rtl.rcArrW(listing,i + 10,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
            rtl.rcArrW(listing,i + 13,"");
            return false;
          } else if (c === 0xFFFFFFFF) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 13),6,256));
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_BP2_Y(i) && BNE(i + 1) && DEY(i + 2) && LDA_BP2_Y(i + 3) && CMP_IM_0(i + 4) && LAB_A(i + 5) && JCC(i + 6) && JEQ(i + 7)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && JCC(i + 6) && JEQ(i + 7)) {
          c = rtl.rc(GetWORD(i + 4,i + 1),0,4294967295);
          if (c === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          } else if (c < 0xFFFF) {
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 8),0,255),2));
            rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
            rtl.rcArrW(listing,i + 7,"");
            return false;
          } else if (c === 0xFFFF) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && BEQ(i + 6) && JCS(i + 7) && LAB_A(i + 8)) {
          c = rtl.rc(GetWORD(i + 4,i + 1),0,4294967295);
          if (c === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            return false;
          } else if (c < 0xFFFF) {
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 8),0,255),2));
            rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tadd #$FF") && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && CMP_IM_0(i + 7) && BNE(i + 8) && LDA_STACK(i + 9) && CMP(i + 10) && LAB_A(i + 11) && JCS(i + 12) && (SKIP(i + 13) === false)) if (argMatch(i + 2,i + 9) && argMatch(i + 5,i + 6)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 12,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256));
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && BNE(i + 2) && LDA_A(i + 3) && CMP_IM(i + 4) && LAB_A(i + 5) && SEQ(i + 6) && BCS(i + 7) && DEY(i + 8) && LAB_A(i + 9)) {
          c = rtl.rc(GetWORD(i + 4,i + 1),0,4294967295);
          if (c === 0) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\tbne @+");
            return false;
          } else if (c < 0xFFFF) {
            rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(rtl.lw((c + 1) >>> 8),0,255),2));
            rtl.rcArrW(listing,i + 4,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && BNE(i + 2) && LDA_A(i + 3) && CMP(i + 4) && (CMP_IM(i + 4) === false) && LAB_A(i + 5) && SEQ(i + 6) && BCS(i + 7) && DEY(i + 8)) {
          tmp = rtl.rcArrR(listing,i);
          rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(tmp,6,256));
          tmp = rtl.rcArrR(listing,i + 3);
          rtl.rcArrW(listing,i + 3,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(tmp,6,256));
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"\tbcc @+");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && JCC(i + 2) && JEQ(i + 3)) {
          if (CMP_IM_0(i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          } else {
            c = rtl.rc(GetBYTE(i + 1),0,4294967295);
            if (c < 255) {
              rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
              rtl.rcArrW(listing,i + 3,"");
              return false;
            } else if (c === 255) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              return false;
            };
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP_IM(i + 1) && SEQ(i + 2) && BCS_A(i + 3)) {
          if (CMP_IM_0(i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tbne @+");
            return false;
          } else {
            c = rtl.rc(GetBYTE(i + 1),0,4294967295);
            if (c < 255) {
              rtl.rcArrW(listing,i + 1,"\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(c + 1,0,255),2));
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
          };
        };
        if ((SKIP(i - 1) === false) && LDA_A(i) && CMP(i + 1) && (CMP_IM(i + 1) === false) && SEQ(i + 2) && BCS_A(i + 3)) {
          tmp = rtl.rcArrR(listing,i);
          rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(tmp,6,256));
          rtl.rcArrW(listing,i + 2,"\tbcc @+");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && SNE(i + 3) && LAB_A(i + 4) && JMP(i + 5)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 3,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if ((SKIP(i) === false) && BMI_A(i + 1) && ORA(i + 2) && SNE(i + 3) && LAB_A(i + 4) && DEY(i + 5) && LAB_A(i + 6) && TYA(i + 7) && JEQ(i + 8)) {
          rtl.rcArrW(listing,i + 1,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
          rtl.rcArrW(listing,i + 3,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if (ENDL(i + 8) && SEQ(i + 9) && BPL_A(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          p = rtl.rc(rtl.rc(GetBYTE(i + 2),-128,127),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tsmi");
            rtl.rcArrW(listing,i + 2,"\tbne @+");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
          } else if (p === 127) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"\tbeq @+");
          } else {
            p += 1;
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,"\tsvc");
            rtl.rcArrW(listing,i + 3,"\teor #$80");
            rtl.rcArrW(listing,i + 4,"\tbpl @+");
          };
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if (ENDL(i + 8) && SEQ(i + 9) && BPL_A(i + 10) && DEY(i + 11) && LAB_A(i + 12) && (STY(i + 13) || TYA(i + 13)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (SUB_IM(i + 2) === false) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          tmp = rtl.rcArrR(listing,i + 1);
          rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"\tsub " + pas.System.Copy(tmp,6,256));
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"\tbmi @+");
          return false;
        };
        if (ENDL(i + 15) && SEQ(i + 16) && BPL_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          p = rtl.rc(rtl.rc(GetWORD(i + 5,i + 2),-32768,32767),-2147483648,2147483647);
          if (p === 0) {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 14,"\tbmi @+");
            rtl.rcArrW(listing,i + 15,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 16,"\tsne");
            rtl.rcArrW(listing,i + 17,"@");
          } else if (p < 0x7FFF) {
            p += 1;
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 11,"\tcmp #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 13,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 14,"\tsvc");
            rtl.rcArrW(listing,i + 15,"\teor #$80");
            rtl.rcArrW(listing,i + 16,"");
          } else {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"\tbeq @+");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 15) && SEQ(i + 16) && BPL_A(i + 17) && DEY(i + 18) && LAB_A(i + 19) && (STY(i + 20) || TYA(i + 20)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (CMP_IM(i + 5) === false) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          tmp = rtl.rcArrR(listing,i + 1);
          rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 2,"\tsub " + pas.System.Copy(tmp,6,256));
          tmp = rtl.rcArrR(listing,i + 4);
          rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 5,"\tcmp " + pas.System.Copy(tmp,6,256));
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"\tbmi @+");
          return false;
        };
        if (ENDL(i + 22) && SEQ(i + 23) && BPL(i + 24) && DEY(i + 25) && LAB_A(i + 26) && (STY(i + 27) || TYA(i + 27)) && LOCAL(i) && LDA_A(i + 1) && SUB_IM(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP_IM(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP_IM(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP_IM(i + 11) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          p = rtl.rc(GetBYTE(i + 11) + (GetBYTE(i + 8) << 8) + (GetBYTE(i + 5) << 16) + (GetBYTE(i + 2) << 24),-2147483648,2147483647);
          if (p === 0) {
            if (LDA_IM_0(i + 1)) {
              rtl.rcArrW(listing,i + 16,"");
              rtl.rcArrW(listing,i + 17,"");
              rtl.rcArrW(listing,i + 18,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 19,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 20,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
              rtl.rcArrW(listing,i + 21,"\tsne");
              rtl.rcArrW(listing,i + 22,"");
            } else {
              rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 17,"\tbmi @+");
              rtl.rcArrW(listing,i + 18,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 19,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 20,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
              rtl.rcArrW(listing,i + 21,"\tsne");
              rtl.rcArrW(listing,i + 22,"@");
            };
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          } else if (p < 0x7FFFFFFF) {
            if ((i > 0) && LDY_1(i - 1) && TYA(i + 27) && (JEQ(i + 28) || JNE(i + 28))) {
              rtl.rcArrW(listing,i - 1,"");
              if (JEQ(i + 28)) {
                rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
                rtl.rcArrW(listing,i + 24,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
              } else {
                rtl.rcArrW(listing,i + 23,"\tsmi");
                rtl.rcArrW(listing,i + 24,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
              };
              rtl.rcArrW(listing,i + 25,"");
              rtl.rcArrW(listing,i + 26,"");
              rtl.rcArrW(listing,i + 27,"");
              rtl.rcArrW(listing,i + 28,"");
              return false;
            };
          } else {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"\tbeq @+");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            return false;
          };
        };
        if (ENDL(i + 22) && SEQ(i + 23) && BPL(i + 24) && DEY(i + 25) && LAB_A(i + 26) && TYA(i + 27) && JEQ(i + 28) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (CMP_IM(i + 11) === false) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          rtl.rcArrW(listing,i + 23,"\tjmi " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
          rtl.rcArrW(listing,i + 24,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 28),6,256));
          for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          rtl.rcArrW(listing,i + 25,"");
          rtl.rcArrW(listing,i + 26,"");
          rtl.rcArrW(listing,i + 27,"");
          rtl.rcArrW(listing,i + 28,"");
          return false;
        };
        return Result;
      };
      function opt_NE_EQ(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        Result = true;
        if (STA_STACK(i) && LDY_1(i + 1) && LDA_VAL(i + 2) && CMP_STACK(i + 3) && (BEQ_A(i + 4) || BNE_A(i + 4)) && DEY(i + 5) && LAB_A(i + 6) && (TYA(i + 7) || STY(i + 7))) if (argMatch(i,i + 3)) {
          rtl.rcArrW(listing,i + 2,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (STA_STACK(i) && LDY_1(i + 1) && LDA_STACK(i + 2) && AND_ORA_EOR(i + 3) && (BEQ_A(i + 4) || BNE_A(i + 4)) && DEY(i + 5) && LAB_A(i + 6) && (TYA(i + 7) || STY(i + 7))) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDY_1(i) && LDA_VAL(i + 1) && CMP_IM_0(i + 2) && BNE_A(i + 3) && LDA_A(i + 4) && CMP_IM_0(i + 5) && LAB_A(i + 6) && (BEQ_A(i + 7) || BNE_A(i + 7)) && DEY(i + 8) && LAB_A(i + 9) && (TYA(i + 10) || STY(i + 10)) && (DEX(i + 11) === false)) {
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && ORA(i + 1) && (BEQ(i + 2) || BNE(i + 2)) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && JNE(i + 6)) {
          if (BEQ(i + 2)) rtl.rcArrW(listing,i + 6,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if ((SKIP(i - 1) === false) && LDA(i) && CMP(i + 1) && BNE(i + 2) && LDA(i + 3) && CMP(i + 4) && LAB_A(i + 5) && BNE(i + 6) && DEY(i + 7) && LAB_A(i + 8) && TYA(i + 9) && JNE(i + 10)) {
          if (CMP_IM_0(i + 1)) rtl.rcArrW(listing,i + 1,"");
          if (CMP_IM_0(i + 4)) rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 10));
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          for (var $l1 = i - 1; $l1 >= 0; $l1--) {
            p = $l1;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if (LDY(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && BNE(i + 5) && LDA_STACK(i + 6) && LAB_A(i + 7) && (JEQ(i + 8) || JNE(i + 8))) if (argMatch(i + 2,i + 6)) {
          rtl.rcArrW(listing,i + 4,"\tora (:bp2),y");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (LDY(i) && LDA_BP2_Y(i + 1) && CMP_IM_0(i + 2) && BNE(i + 3) && DEY(i + 4) && LDA_BP2_Y(i + 5) && CMP_IM_0(i + 6) && LAB_A(i + 7) && (JEQ(i + 8) || JNE(i + 8))) {
          rtl.rcArrW(listing,i + 5,"\tora (:bp2),y");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (ENDL(i + 8) && (BEQ(i + 9) || BNE(i + 9)) && DEY(i + 10) && LAB_A(i + 11) && (STY(i + 12) || TYA(i + 12)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbeq L5") && (rtl.rcArrR(listing,i + 4) === "\tbvc L5") && (rtl.rcArrR(listing,i + 5) === "\teor #$FF") && (rtl.rcArrR(listing,i + 6) === "\tora #$01") && (rtl.rcArrR(listing,i + 7) === "L5")) {
          if (SUB_IM_0(i + 2)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
          } else {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"");
          };
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (ENDL(i + 15) && (BEQ(i + 16) || BNE(i + 16)) && DEY(i + 17) && LAB_A(i + 18) && (STY(i + 19) || TYA(i + 19)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbeq L5") && LDA_IM_0(i + 7) && (rtl.rcArrR(listing,i + 8) === "\tadc #$FF") && (rtl.rcArrR(listing,i + 9) === "\tora #$01") && (rtl.rcArrR(listing,i + 10) === "\tbne L5") && (rtl.rcArrR(listing,i + 11) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 12) === "\teor #$FF") && (rtl.rcArrR(listing,i + 13) === "\tora #$01") && (rtl.rcArrR(listing,i + 14) === "L5")) {
          if (SUB_IM_0(i + 2) && CMP_IM_0(i + 5)) {
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 15,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          } else {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 11,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 12,"\tbne @+");
            rtl.rcArrW(listing,i + 13,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 14,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 15,"@");
          };
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (ENDL(i + 22) && (BEQ(i + 23) || BNE(i + 23)) && DEY(i + 24) && LAB_A(i + 25) && (STY(i + 26) || TYA(i + 26)) && LOCAL(i) && LDA_A(i + 1) && SUB(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tbne L4") && LDA_A(i + 4) && CMP(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tbne L1") && LDA_A(i + 7) && CMP(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tbne L1") && LDA_A(i + 10) && CMP(i + 11) && (rtl.rcArrR(listing,i + 12) === "L1\tbeq L5") && (rtl.rcArrR(listing,i + 13) === "\tbcs L3") && (rtl.rcArrR(listing,i + 14) === "\tlda #$FF") && (rtl.rcArrR(listing,i + 15) === "\tbne L5") && (rtl.rcArrR(listing,i + 16) === "L3\tlda #$01") && (rtl.rcArrR(listing,i + 17) === "\tbne L5") && (rtl.rcArrR(listing,i + 18) === "L4\tbvc L5") && (rtl.rcArrR(listing,i + 19) === "\teor #$FF") && (rtl.rcArrR(listing,i + 20) === "\tora #$01") && (rtl.rcArrR(listing,i + 21) === "L5")) {
          if (SUB_IM_0(i + 2) && CMP_IM_0(i + 5) && CMP_IM_0(i + 8) && CMP_IM_0(i + 11)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 2,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
          } else {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"\tbne @+");
            rtl.rcArrW(listing,i + 3,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 5,"\tbne @+");
            rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 7,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 8,"\tbne @+");
            rtl.rcArrW(listing,i + 9,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
            rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 11),6,256));
            rtl.rcArrW(listing,i + 11,"@");
          };
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          rtl.rcArrW(listing,i + 19,"");
          rtl.rcArrW(listing,i + 20,"");
          rtl.rcArrW(listing,i + 21,"");
          rtl.rcArrW(listing,i + 22,"");
          return false;
        };
        return Result;
      };
      function opt_CMP(i) {
        rtl.rc(i,-2147483648,2147483647);
        var Result = false;
        var p = 0;
        Result = true;
        if (LDY_1(i) && BEQ(i + 1) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && STA(i + 5)) {
          rtl.rcArrW(listing,i,"\tlda #$00");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (LDY_1(i) && BMI(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && STA_A(i + 6)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"\tasl @");
          rtl.rcArrW(listing,i + 3,"\tlda #$00");
          rtl.rcArrW(listing,i + 4,"\tadc #$00");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (LDY_1(i) && (LDA_STACK(i + 1) === false) && BPL(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && STA_A(i + 6)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"\teor #$80");
          rtl.rcArrW(listing,i + 3,"\tasl @");
          rtl.rcArrW(listing,i + 4,"\tlda #$00");
          rtl.rcArrW(listing,i + 5,"\tadc #$00");
          return false;
        };
        if (CMP_IM_0(i + 10) && LDA_A(i) && AND_IM(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 4)) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && CMP_IM_0(i + 7) && BNE(i + 8) && LDA_STACK(i + 9) && LAB_A(i + 11) && (JEQ(i + 12) || JNE(i + 12))) if (argMatch(i + 2,i + 9) && argMatch(i + 5,i + 6)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          return false;
        };
        if (CMP(i + 8) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && AND_ORA_EOR(i + 5) && BNE(i + 6) && LDA_STACK(i + 7) && BNE(i + 9) && LDA_STACK(i + 10) && BNE(i + 11) && LDA_STACK(i + 12)) if (argMatch(i + 1,i + 12) && argMatch(i + 2,i + 10) && argMatch(i + 3,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 10,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 12,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && BNE(i + 5) && LDA_STACK(i + 6) && BNE(i + 7) && LDA_STACK(i + 8)) if (argMatch(i + 1,i + 8) && argMatch(i + 2,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 8,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (CMP(i + 10) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && AND_ORA_EOR(i + 7) && BNE(i + 8) && LDA_STACK(i + 9) && BNE(i + 11) && LDA_STACK(i + 12) && BNE(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 1,i + 14) && argMatch(i + 2,i + 12)) {
          rtl.rcArrW(listing,i + 12,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 14,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (CMP_STACK(i + 13) && LDA(i) && (IY(i) === false) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && (IY(i) === false) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && (IY(i) === false) && ADD_SUB(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && (IY(i) === false) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12)) if (argMatch(i + 5,i + 12) && argMatch(i + 11,i + 13)) {
          listing_tmp[0] = rtl.rcArrR(listing,i + 6);
          listing_tmp[1] = rtl.rcArrR(listing,i + 7);
          listing_tmp[2] = rtl.rcArrR(listing,i + 8);
          listing_tmp[3] = rtl.rcArrR(listing,i + 9);
          listing_tmp[4] = rtl.rcArrR(listing,i + 10);
          listing_tmp[5] = rtl.rcArrR(listing,i + 11);
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 1));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 3));
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 5));
          rtl.rcArrW(listing,i,listing_tmp[0]);
          rtl.rcArrW(listing,i + 1,listing_tmp[1]);
          rtl.rcArrW(listing,i + 2,listing_tmp[2]);
          rtl.rcArrW(listing,i + 3,listing_tmp[3]);
          rtl.rcArrW(listing,i + 4,listing_tmp[4]);
          rtl.rcArrW(listing,i + 5,listing_tmp[5]);
          return false;
        };
        if (LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && AND_ORA_EOR(i + 3) && BNE(i + 4) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
          rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && AND_ORA_EOR(i + 3) && CMP_VAL(i + 4) && BNE(i + 5) && LDA_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (BNE(i) && LDA_IM_0(i + 1) && LAB_A(i + 2) && JNE(i + 3)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (STA_STACK(i) && LDA(i + 1) && CMP_STACK(i + 2) && (JEQ(i + 3) || JNE(i + 3))) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (STY_STACK(i) && LDA(i + 1) && CMP_STACK(i + 2) && (JEQ(i + 3) || JNE(i + 3))) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i,"\ttya");
          rtl.rcArrW(listing,i + 1,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (STA_STACK(i) && LDA(i + 1) && SUB_STACK(i + 2) && CMP_VAL(i + 3) && SKIP(i + 4)) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i + 2,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"\teor #$FF");
          rtl.rcArrW(listing,i + 1,"\tsec");
          return false;
        };
        if ((CMP(i) || LDA(i) || AND_ORA_EOR(i)) && (BEQ_A(i + 1) || BNE_A(i + 1) || BCC_A(i + 1)) && DEY(i + 2) && LAB_A(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          if (BCC_A(i + 1)) {
            rtl.rcArrW(listing,i + 1,"\tjcs " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256))}
           else if (BNE_A(i + 1)) {
            rtl.rcArrW(listing,i + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256))}
           else rtl.rcArrW(listing,i + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          for (var $l = i - 1; $l >= 0; $l--) {
            p = $l;
            if (LDY_1(p)) {
              rtl.rcArrW(listing,p,"");
              break;
            };
          };
          return false;
        };
        if (LDY_1(i) && LDA(i + 1) && SEQ(i + 2) && DEY(i + 3) && TYA(i + 4) && JEQ(i + 5)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 3,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (LDY_1(i) && LDA_Y(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && CMP_STACK(i + 4)) if (argMatch(i + 2,i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (STA_STACK(i) && LDY_1(i + 1) && LDA_STACK(i + 2) && AND_ORA_EOR(i + 3)) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (AND_ORA_EOR(i) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA_STACK(i + 3) && CMP(i + 4)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (STA_STACK(i) && LDA_A(i + 1) && (IY(i + 1) === false) && LDY_1(i + 2) && ORA_STACK(i + 3)) if (argMatch(i,i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && LDY_1(i + 1) && ORA_IM_0(i + 2)) {
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          return false;
        };
        if (LDA(i) && LDY_1(i + 1) && CMP(i + 2) && BNE(i + 3)) if (argMatch(i,i + 2)) {
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (CMP_STACK(i + 8) && LDA(i) && AND_IM(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 4)) && STA_STACK(i + 2) && LDA(i + 3) && STA_STACK(i + 5) && LDY_1(i + 6) && LDA_STACK(i + 7) && (BEQ(i + 9) || BNE(i + 9)) && DEY(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 8)) {
          rtl.rcArrW(listing,i + 5,"\tldy #1");
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 7,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (CMP_STACK(i + 10) && LDY_IM(i) && LDA(i + 1) && AND_IM(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 6)) && STA_STACK(i + 3) && LDY_IM(i + 4) && LDA(i + 5) && STA_STACK(i + 7) && LDY_1(i + 8) && LDA_STACK(i + 9) && (BEQ(i + 11) || BNE(i + 11)) && DEY(i + 12)) if (argMatch(i + 3,i + 9) && argMatch(i + 7,i + 10)) {
          rtl.rcArrW(listing,i + 9,"\tldy #1");
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 3,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (CMP_STACK(i + 12) && MWY_BP2(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && LDY_IM(i + 1) && LDA_BP2_Y(i + 2) && AND_IM(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 8)) && STA_STACK(i + 4) && LDY_IM(i + 6) && LDA_BP2_Y(i + 7) && AND_IM(i + 8) && STA_STACK(i + 9) && LDY_1(i + 10) && LDA_STACK(i + 11) && (BEQ(i + 13) || BNE(i + 13)) && DEY(i + 14)) if (argMatch(i + 4,i + 11) && argMatch(i + 9,i + 12)) {
          rtl.rcArrW(listing,i + 11,"\tldy #1");
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 4,"\teor (:bp2),y");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          return false;
        };
        if (LAB_A(i + 4) && LDY_1(i) && CMP(i + 1) && BNE(i + 2) && DEY(i + 3) && STY(i + 5) && LDA_IM_0(i + 6) && SUB(i + 7)) if (argMatch(i + 5,i + 7)) {
          rtl.rcArrW(listing,i,"\tldy #$00");
          rtl.rcArrW(listing,i + 5,"\ttya");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (CMP(i + 9) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY_1(i + 4) && LDA_STACK(i + 5) && CMP(i + 6) && LDA_STACK(i + 8) && LDA_STACK(i + 11)) if (argMatch(i + 1,i + 11) && argMatch(i + 2,i + 8) && argMatch(i + 3,i + 5)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (CMP(i + 15) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && AND_ORA_EOR(i + 5) && STA_STACK(i + 6) && LDY_1(i + 7) && LDA_STACK(i + 8) && CMP(i + 9) && LDA_STACK(i + 11) && CMP(i + 12) && LDA_STACK(i + 14) && LDA_STACK(i + 17)) if (argMatch(i + 3,i + 11) && argMatch(i + 2,i + 14) && argMatch(i + 1,i + 17)) {
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY_1(i + 3) && LDA_STACK(i + 4) && CMP(i + 5) && LDA_STACK(i + 7)) if (argMatch(i + 1,i + 7) && argMatch(i + 2,i + 4)) {
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA(i + 3)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA(i + 3) && CMP_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA_STACK(i + 3) && (BEQ(i + 4) || BNE(i + 4)) && DEY(i + 5)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 3,"\tcmp #$00");
          return false;
        };
        if (CMP_STACK(i + 19) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDY_1(i + 8) && LDA(i + 9) && CMP_STACK(i + 10) && LDA(i + 12) && CMP_STACK(i + 13) && LDA(i + 15) && CMP_STACK(i + 16) && LDA(i + 18)) if (argMatch(i + 1,i + 19) && argMatch(i + 3,i + 16) && argMatch(i + 5,i + 13) && argMatch(i + 7,i + 10)) {
          rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 13,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 16,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 19,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (CMP(i + 19) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDY_1(i + 8) && LDA_STACK(i + 9) && CMP(i + 10) && LDA_STACK(i + 12) && CMP(i + 13) && LDA_STACK(i + 15) && CMP(i + 16) && LDA_STACK(i + 18)) if (argMatch(i + 1,i + 18) && argMatch(i + 3,i + 15) && argMatch(i + 5,i + 12) && argMatch(i + 7,i + 9)) {
          rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (CMP_STACK(i + 18) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && STA_STACK(i + 6) && LDY_1(i + 7) && LDA(i + 8) && CMP_STACK(i + 9) && LDA(i + 11) && CMP_STACK(i + 12) && LDA(i + 14) && CMP_STACK(i + 15) && LDA(i + 17)) if (argMatch(i + 1,i + 18) && argMatch(i + 3,i + 15) && argMatch(i + 5,i + 12) && argMatch(i + 6,i + 9)) {
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 12,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 15,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 18,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          return false;
        };
        if (CMP_STACK(i + 9) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDY_1(i + 4) && LDA(i + 5) && CMP_STACK(i + 6) && LDA(i + 8)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (CMP_STACK(i + 4) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA(i + 3)) if (argMatch(i + 1,i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_STACK(i + 5) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LDA_Y(i + 3) && LDY_1(i + 4)) if (argMatch(i + 1,i + 5)) {
          rtl.rcArrW(listing,i + 5,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_STACK(i + 6) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && INY(i + 3) && LDA_Y(i + 4) && LDY_1(i + 5)) if (argMatch(i + 1,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_STACK(i + 7) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LDA_Y(i + 3) && STA_STACK(i + 4) && LDY_1(i + 5) && LDA(i + 6)) if (argMatch(i + 1,i + 6)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_STACK(i + 7) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && TAY(i + 4) && LDA_Y(i + 5) && LDY_1(i + 6)) if (argMatch(i + 1,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_STACK(i + 5) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && STA_STACK(i + 3) && LDA_VAL(i + 4) && LDA_VAL(i + 6) && SBC_STACK(i + 7)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 7)) {
          rtl.rcArrW(listing,i + 5,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i + 7,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (CMP_STACK(i + 8) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && CMP_STACK(i + 5) && (BEQ(i + 6) || BNE(i + 6)) && LDA_A(i + 7)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 5)) {
          rtl.rcArrW(listing,i + 5,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 8,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (CMP(i + 15) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDA_STACK(i + 8) && CMP(i + 9) && LDA_STACK(i + 11) && CMP(i + 12) && LDA_STACK(i + 14) && LDA_STACK(i + 17)) if (argMatch(i + 1,i + 17) && argMatch(i + 3,i + 14) && argMatch(i + 5,i + 11) && argMatch(i + 7,i + 8)) {
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (CMP_STACK(i + 18) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDA_A(i + 8) && CMP_STACK(i + 9) && LDA_A(i + 11) && CMP_STACK(i + 12) && LDA_A(i + 14) && CMP_STACK(i + 15) && LDA_A(i + 17)) if (argMatch(i + 1,i + 18) && argMatch(i + 3,i + 15) && argMatch(i + 5,i + 12) && argMatch(i + 7,i + 9)) {
          rtl.rcArrW(listing,i + 9,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
          rtl.rcArrW(listing,i + 12,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 15,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
          rtl.rcArrW(listing,i + 18,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (CMP_STACK(i + 3) && LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2)) if (argMatch(i + 1,i + 3)) {
          rtl.rcArrW(listing,i + 3,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP(i + 3) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (BEQ(i + 4) || BNE(i + 4)) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (BNE(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && LDA_STACK(i + 6)) if (argMatch(i + 1,i + 6) && argMatch(i + 3,i + 4)) {
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (BNE(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && CMP(i + 3) && SKIP(i + 4) && LDA_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
          rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (CMP_STACK(i + 6) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
          rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          return false;
        };
        if (BNE(i + 6) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && CMP_VAL(i + 5) && LDA_STACK(i + 7)) if (argMatch(i + 1,i + 7) && argMatch(i + 3,i + 4)) {
          rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (CMP_STACK(i + 7) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && SKIP(i + 8)) if (argMatch(i + 2,i + 7)) {
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (BNE(i + 13) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && BNE(i + 9) && LDA_STACK(i + 10) && BNE(i + 11) && LDA_STACK(i + 12) && LDA_STACK(i + 14)) if (argMatch(i + 1,i + 14) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 10) && argMatch(i + 7,i + 8)) {
          rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 2));
          rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i));
          rtl.rcArrW(listing,i,"");
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          return false;
        };
        if (BNE(i + 20) && ADD_SUB(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_IM_0(i + 5) && ADC_SBC_IM_0(i + 6) && STA_STACK(i + 7) && LDA_IM_0(i + 8) && ADC_SBC_IM_0(i + 9) && STA_STACK(i + 10) && LDY_1(i + 11) && LDA_IM_0(i + 12) && CMP_STACK(i + 13) && BNE(i + 14) && LDA_IM_0(i + 15) && CMP_STACK(i + 16) && BNE(i + 17) && LDA_IM_0(i + 18) && CMP_STACK(i + 19) && LDA_A(i + 21) && CMP_STACK(i + 22)) if (argMatch(i + 1,i + 22) && argMatch(i + 4,i + 19) && argMatch(i + 7,i + 16) && argMatch(i + 10,i + 13)) {
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          return false;
        };
        if (BNE(i + 21) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC_IM_0(i + 7) && STA_STACK(i + 8) && LDA_IM_0(i + 9) && ADC_SBC_IM_0(i + 10) && STA_STACK(i + 11) && LDY_1(i + 12) && LDA_STACK(i + 13) && CMP_IM_0(i + 14) && BNE(i + 15) && LDA_STACK(i + 16) && CMP_IM_0(i + 17) && BNE(i + 18) && LDA_STACK(i + 19) && CMP_VAL(i + 20) && LDA_STACK(i + 22) && CMP_VAL(i + 23)) if (argMatch(i + 2,i + 22) && argMatch(i + 5,i + 19) && argMatch(i + 8,i + 16) && argMatch(i + 11,i + 13)) {
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          rtl.rcArrW(listing,i + 16,"");
          rtl.rcArrW(listing,i + 17,"");
          rtl.rcArrW(listing,i + 18,"");
          return false;
        };
        if (DEY(i + 7) && STA_STACK(i) && LDA(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDY_IM_0(i + 4) && LDA_STACK(i + 5) && SPL(i + 6) && STA_STACK(i + 8) && STY_STACK(i + 9) && STY_STACK(i + 10)) if (argMatch(i,i + 5) && argMatch(i + 5,i + 8) && argMatch(i + 2,i + 9) && argMatch(i + 3,i + 10)) {
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          return false;
        };
        if (ADC_SBC(i + 12) && LDY_IM_0(i) && LDA(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDA_STACK(i + 8) && ADD_SUB(i + 9) && STA(i + 10) && LDA_STACK(i + 11) && STA(i + 13) && (ADC_SBC(i + 15) === false)) if (argMatch(i + 4,i + 8) && argMatch(i + 5,i + 11)) {
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 11,"\ttya");
          return false;
        };
        if (LAB_A(i + 20) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && CMP_STACK(i + 10) && BNE(i + 11) && LDA_A(i + 12) && CMP_STACK(i + 13) && BNE(i + 14) && LDA_A(i + 15) && CMP_STACK(i + 16) && BNE(i + 17) && LDA_A(i + 18) && CMP_STACK(i + 19)) if (argMatch(i + 2,i + 19) && argMatch(i + 4,i + 16) && argMatch(i + 6,i + 13) && argMatch(i + 8,i + 10)) {
          rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
          rtl.rcArrW(listing,i + 13,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 16,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 19,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          return false;
        };
        if (LAB_A(i + 16) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && CMP(i + 6) && BNE(i + 7) && LDA_A(i + 8) && CMP(i + 9) && BNE(i + 10) && LDA_A(i + 11) && CMP_STACK(i + 12) && BNE(i + 13) && LDA_A(i + 14) && CMP_STACK(i + 15)) if (argMatch(i + 2,i + 15) && argMatch(i + 4,i + 12)) {
          rtl.rcArrW(listing,i + 12,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 15,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (LAB_A(i + 14) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && CMP(i + 4) && BNE(i + 5) && LDA_A(i + 6) && CMP(i + 7) && BNE(i + 8) && LDA_A(i + 9) && CMP(i + 10) && BNE(i + 11) && LDA_A(i + 12) && CMP_STACK(i + 13)) if (argMatch(i + 2,i + 13)) {
          rtl.rcArrW(listing,i + 13,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (CMP_STACK(i + 6) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && LDA_A(i + 7) && SBC_STACK(i + 8)) if (argMatch(i + 2,i + 6) && argMatch(i + 4,i + 8)) {
          rtl.rcArrW(listing,i + 6,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 8,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          return false;
        };
        if (CMP_STACK(i + 4) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3)) if (argMatch(i + 2,i + 4)) {
          rtl.rcArrW(listing,i + 4,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (BNE(i + 5) && (LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && CMP(i + 4) && LDA_A(i + 6) && CMP_STACK(i + 7)) if (argMatch(i + 2,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          return false;
        };
        if (BNE(i + 8) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 6) && CMP_STACK(i + 7) && LDA_A(i + 9) && CMP_STACK(i + 10)) if (argMatch(i + 2,i + 10) && argMatch(i + 4,i + 7)) {
          rtl.rcArrW(listing,i + 7,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 10,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (CMP_STACK(i + 7) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 7)) {
          rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
          rtl.rcArrW(listing,i + 7,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
          rtl.rcArrW(listing,i + 1,"");
          rtl.rcArrW(listing,i + 2,"");
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          return false;
        };
        if (BNE(i + 12) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && ASL_A(i + 1) && TAY(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && ASL_A(i + 8) && TAY(i + 9) && LDA_A(i + 10) && CMP_STACK(i + 11) && LDA_A(i + 13) && CMP_STACK(i + 14)) if (argMatch(i + 4,i + 14) && argMatch(i + 6,i + 11)) {
          rtl.rcArrW(listing,i + 11,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
          rtl.rcArrW(listing,i + 14,"\tcmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
          rtl.rcArrW(listing,i + 3,"");
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          return false;
        };
        if (BNE(i + 24) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 12)) && ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_ADR(i + 6) && STA_STACK(i + 7) && LDA_ADR(i + 8) && STA_STACK(i + 9) && LDA_ADR(i + 10) && STA_STACK(i + 11) && ASL_A(i + 13) && ASL_A(i + 14) && TAY(i + 15) && LDA_STACK(i + 16) && CMP(i + 17) && BNE(i + 18) && LDA_STACK(i + 19) && CMP(i + 20) && BNE(i + 21) && LDA_STACK(i + 22) && CMP(i + 23) && LDA_STACK(i + 25) && CMP(i + 26)) if (argMatch(i + 5,i + 25) && argMatch(i + 7,i + 22) && argMatch(i + 9,i + 19) && argMatch(i + 11,i + 16)) {
          rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 10));
          rtl.rcArrW(listing,i + 19,rtl.rcArrR(listing,i + 8));
          rtl.rcArrW(listing,i + 22,rtl.rcArrR(listing,i + 6));
          rtl.rcArrW(listing,i + 25,rtl.rcArrR(listing,i + 4));
          rtl.rcArrW(listing,i + 4,"");
          rtl.rcArrW(listing,i + 5,"");
          rtl.rcArrW(listing,i + 6,"");
          rtl.rcArrW(listing,i + 7,"");
          rtl.rcArrW(listing,i + 8,"");
          rtl.rcArrW(listing,i + 9,"");
          rtl.rcArrW(listing,i + 10,"");
          rtl.rcArrW(listing,i + 11,"");
          rtl.rcArrW(listing,i + 12,"");
          rtl.rcArrW(listing,i + 13,"");
          rtl.rcArrW(listing,i + 14,"");
          rtl.rcArrW(listing,i + 15,"");
          return false;
        };
        return Result;
      };
      function PeepholeOptimization_STACK() {
        var Result = false;
        var i = 0;
        var tmp = "";
        Result = true;
        tmp = "";
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (JSR(i) || CMP(i) || SKIP(i)) break;
          if (MWY_BP2(i)) if (tmp === rtl.rcArrR(listing,i)) {
            rtl.rcArrW(listing,i,"")}
           else tmp = rtl.rcArrR(listing,i);
        };
        Rebuild();
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (opt_LT_GTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_LTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_GT(i) === false) {
            Result = false;
            break;
          };
          if (opt_NE_EQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_CMP(i) === false) {
            Result = false;
            break;
          };
          if (opt_BRANCH(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_INX(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_ADD(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_CMP(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_ADR(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_AL_CL(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_AX_CX(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_EAX_ECX(i) === false) {
            Result = false;
            break;
          };
          if (opt_STACK_PRINT(i) === false) {
            Result = false;
            break;
          };
        };
        return Result;
      };
      function OptimizeEAX() {
        var Result = false;
        var i = 0;
        var tmp = "";
        Result = false;
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if ((pas.System.Pos(" :eax",rtl.rcArrR(listing,i)) === 5) && (pas.System.Pos("\t.if",rtl.rcArrR(listing,i + 1)) === 0)) {
            Result = true;
            tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
            if (tmp === ":eax") {
              rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":STACKORIGIN+16")}
             else if (tmp === ":eax+1") {
              rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":STACKORIGIN+STACKWIDTH+16")}
             else if (tmp === ":eax+2") {
              rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":STACKORIGIN+STACKWIDTH*2+16")}
             else if (tmp === ":eax+3") rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":STACKORIGIN+STACKWIDTH*3+16");
          };
        };
        return Result;
      };
      function OptimizeEAX_OFF() {
        var i = 0;
        var tmp = "";
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.System.Pos(" :STACKORIGIN+",rtl.rcArrR(listing,i)) === 5) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
            if (tmp === ":STACKORIGIN+16") {
              rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":eax")}
             else if (tmp === ":STACKORIGIN+STACKWIDTH+16") {
              rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":eax+1")}
             else if (tmp === ":STACKORIGIN+STACKWIDTH*2+16") {
              rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":eax+2")}
             else if (tmp === ":STACKORIGIN+STACKWIDTH*3+16") rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + ":eax+3");
          };
        };
      };
      function OptimizeAssignment() {
        var k = 0;
        function opt_STA_ADD(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = true;
          if (STA_STACK(i) && LDA(i + 1) && ADD_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADC(i + 4) && STA(i + 5) && LDA(i + 6) && ADC(i + 7) && STA(i + 8) && LDA(i + 9) && ADC(i + 10) && STA(i + 11)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2) && argMatch(i + 3,i + 4) && argMatch(i + 4,i + 5) && argMatch(i + 6,i + 7) && argMatch(i + 7,i + 8) && argMatch(i + 9,i + 10) && argMatch(i + 10,i + 11)) {
            rtl.rcArrW(listing,i,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 2,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 3,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADC(i + 4) && STA(i + 5) && (ADC(i + 7) === false)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2) && argMatch(i + 3,i + 4) && argMatch(i + 4,i + 5)) {
            rtl.rcArrW(listing,i,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && (ADC(i + 4) === false)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA(i) && ADD(i + 1) && STA(i + 2) && (ADC(i + 4) === false)) if (argMatch(i,i + 1) && (argMatch(i + 1,i + 2) === false)) {
            rtl.rcArrW(listing,i + 1,"\tasl @");
            return false;
          };
          if (LDA(i) && ADD(i + 1) && ADD(i + 2) && ADD(i + 3) && STA(i + 4) && (ADC(i + 6) === false)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2) && argMatch(i + 2,i + 3) && argMatch(i + 3,i + 4)) {
            rtl.rcArrW(listing,i,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA(i) && ADD(i + 1) && ADD(i + 2) && ADD(i + 3) && STA(i + 4) && (ADC(i + 6) === false)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2) && argMatch(i + 2,i + 3) && (argMatch(i + 3,i + 4) === false)) {
            rtl.rcArrW(listing,i + 1,"\tasl @");
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if ((LDA_A(i) === false) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA(i + 8) && LDA_STACK(i + 9) && ADC_SBC_IM_0(i + 10) && STA(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA(i + 8) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA(i) && (LDA_IM_0(i) === false) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && (ADD_IM_0(i + 1) === false) && (SUB_IM_0(i + 1) === false) && STA_STACK(i + 2) && (LDA_IM(i + 3) === false) && LDA(i + 3) && (IY(i + 3) === false) && ADC_SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA_VAL(i + 8) && (IY(i + 8) === false) && LDA_STACK(i + 9) && ADC_SBC_IM_0(i + 10) && STA(i + 11) && (ADC_SBC(i + 13) === false)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            if (ADC_IM_0(i + 4)) {
              rtl.rcArrW(listing,i + 3,"\tscc");
              rtl.rcArrW(listing,i + 4,"\tiny");
            } else {
              rtl.rcArrW(listing,i + 3,"\tscs");
              rtl.rcArrW(listing,i + 4,"\tdey");
            };
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 9,"\ttya");
            if (ADC_IM_0(i + 10)) {
              rtl.rcArrW(listing,i + 9,"\tscc");
              rtl.rcArrW(listing,i + 10,"\tiny");
              rtl.rcArrW(listing,i + 11,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 11),6,256));
            } else {
              rtl.rcArrW(listing,i + 9,"\tscs");
              rtl.rcArrW(listing,i + 10,"\tdey");
              rtl.rcArrW(listing,i + 11,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 11),6,256));
            };
            return false;
          };
          if ((((i > 0) && LDA_IM_0(i - 1)) === false) && ADD_SUB(i) && (ADD_IM_0(i) === false) && (SUB_IM_0(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && ADC_IM_0(i + 9) && STA_VAL(i + 10) && (IY(i + 10) === false) && (ADC(i + 12) === false)) if (argMatch(i + 1,i + 5) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 10));
            if ((rtl.rcArrR(listing,i + 6) === "\tadd #$01") && (pas.System.Pos(rtl.rcArrR(listing,i + 7),rtl.rcArrR(listing,i + 10)) > 0)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
              rtl.rcArrW(listing,i + 5,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 6,"\tsne");
              rtl.rcArrW(listing,i + 7,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
            } else {
              if ((IY(i) === false) && (IY(i + 2) === false)) {
                rtl.rcArrW(listing,i + 1,"\ttay");
                rtl.rcArrW(listing,i + 5,"\ttya");
              };
              rtl.rcArrW(listing,i + 8,"\tscc");
              rtl.rcArrW(listing,i + 9,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 10,"");
            };
            return false;
          };
          if ((((i > 0) && LDA_IM_0(i - 1)) === false) && ADD_SUB(i) && (ADD_IM_0(i) === false) && (SUB_IM_0(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && SUB(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && SBC_IM_0(i + 9) && STA_VAL(i + 10) && (IY(i + 10) === false) && (SBC(i + 12) === false)) if (argMatch(i + 1,i + 5) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 10));
            if ((rtl.rcArrR(listing,i + 6) === "\tsub #$01") && (pas.System.Pos(rtl.rcArrR(listing,i + 7),rtl.rcArrR(listing,i + 10)) > 0)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
              rtl.rcArrW(listing,i + 8,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 6,"\tsne");
              rtl.rcArrW(listing,i + 7,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
            } else {
              if ((IY(i) === false) && (IY(i + 2) === false)) {
                rtl.rcArrW(listing,i + 1,"\ttay");
                rtl.rcArrW(listing,i + 5,"\ttya");
              };
              rtl.rcArrW(listing,i + 8,"\tscs");
              rtl.rcArrW(listing,i + 9,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 10,"");
            };
            return false;
          };
          if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && STY_STACK(i + 3) && LDA(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA(i + 7) && ADC_SBC(i + 8) && STA(i + 9) && (ADC_SBC(i + 11) === false)) if (argMatch(i,i + 5) && argMatch(i + 1,i + 8)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA(i + 3) && ADD_SUB(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA(i + 8) && (ADC_SBC(i + 10) === false)) if (argMatch(i,i + 7)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && STA_A(i + 7)) if (argMatch(i,i + 4) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_STACK(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA(i + 8) && (ADC_SBC(i + 10) === false)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 6) && argMatch(i + 3,i + 5)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_STACK(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_IM_0(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA(i + 13) && LDA_VAL(i + 14) && ADD_STACK(i + 15) && STA(i + 16) && (ADC(i + 18) === false)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 15) && argMatch(i + 6,i + 8) && argMatch(i + 9,i + 11) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 12))) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 4,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 14),6,256));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && LDA(i + 2) && ADD_SUB_STACK(i + 3) && STA(i + 4) && (ADC_SBC(i + 6) === false)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && ASL_STACK(i + 6) && LDA(i + 7) && ADD_SUB_STACK(i + 8) && STA(i + 9) && (ADC_SBC(i + 11) === false)) if (argMatch(i + 2,i + 6) && argMatch(i + 6,i + 8)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8) && STA(i + 9) && (ADC_SBC(i + 11) === false)) if (argMatch(i,i + 4) && argMatch(i + 1,i + 7)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          return Result;
        };
        function opt_STA_LDY(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var tmp = "";
          Result = true;
          if (LDY_STACK(i) && (LDA_ADR(i + 1) || STA_ADR(i + 1) || BEQ(i + 1) || STA_ADR(i + 2) || STA_ADR(i + 3))) {
            tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),6,256);
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if ((rtl.rcArrR(listing,p) === tmp) && (LDA_STACK(p - 1) === false)) {
                if ((p > 1) && ASL_A(p - 2) && ROL_STACK(p - 1)) if (argMatch(p - 1,p) === false) {
                  rtl.rcArrW(listing,p - 1,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && ASL_A(p - 3) && ROL_STACK(p - 2) && ASL_A(p - 1)) if (argMatch(p - 2,p) === false) {
                  rtl.rcArrW(listing,p - 2,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_A(p - 4) && ROL_STACK(p - 3) && ASL_A(p - 2) && ASL_A(p - 1)) if (argMatch(p - 3,p) === false) {
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && ASL_A(p - 3) && ROL_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 2,p) === false) {
                  rtl.rcArrW(listing,p - 2,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_STACK(p - 4) && ROL_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 4,p - 2) && argMatch(p - 2,p)) {
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && ADD_SUB(p - 8) && STA_STACK(p - 7) && LDA_STACK(p - 6) && ADC_SBC(p - 5) && STA_STACK(p - 4) && ASL_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 7,p - 3) && argMatch(p - 3,p - 2) && argMatch(p - 2,p)) {
                  rtl.rcArrW(listing,p - 7,"");
                  rtl.rcArrW(listing,p - 6,"");
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p - 2,"\tasl @");
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_A(p - 4) && ROL_STACK(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 3,p) === false) {
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ASL_A(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 4,p) === false) {
                  rtl.rcArrW(listing,p - 4,"");
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_STACK(p - 6) && ROL_A(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 6,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && ADD_SUB(p - 8) && STA_STACK(p - 7) && LDA_STACK(p - 6) && ADC_SBC(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 7,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 6,"");
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && ASL_A(p - 8) && ROL_STACK(p - 7) && ADD_SUB_STACK(p - 6) && ASL_A(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((argMatch(p - 7,p) === false) && argMatch(p - 6,p - 4) && argMatch(p - 4,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 7,"");
                  Result = false;
                  break;
                };
                if ((p > 6) && ASL_A(p - 7) && ROL_STACK(p - 6) && ADD_SUB_STACK(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((argMatch(p - 6,p) === false) && argMatch(p - 5,p - 4) && argMatch(p - 4,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 6,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_A(p - 4) && ROL_STACK(p - 3) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 3,p - 1) === false) {
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ASL_A(p - 3) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 4,p - 1) === false) {
                  rtl.rcArrW(listing,p - 4,"");
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_A(p - 6) && ROL_STACK(p - 5) && ASL_A(p - 4) && ASL_A(p - 3) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 5,p - 1) === false) {
                  rtl.rcArrW(listing,p - 5,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && ASL_A(p - 8) && ROL_STACK(p - 7) && ASL_A(p - 6) && ADD_SUB_STACK(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((argMatch(p - 7,p) === false) && argMatch(p - 5,p - 4) && argMatch(p - 4,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 7,"");
                  Result = false;
                  break;
                };
                if ((p > 8) && ASL_A(p - 9) && ROL_STACK(p - 8) && ASL_A(p - 7) && ASL_A(p - 6) && ADD_SUB_STACK(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((argMatch(p - 8,p) === false) && argMatch(p - 5,p - 4) && argMatch(p - 4,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 8,"");
                  Result = false;
                  break;
                };
                if ((p > 8) && ASL_A(p - 9) && ROL_STACK(p - 8) && ASL_A(p - 7) && ADD_SUB_STACK(p - 6) && ASL_A(p - 5) && STA_STACK(p - 4) && LDA(p - 3) && AND_ORA_EOR(p - 2) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if ((argMatch(p - 8,p) === false) && argMatch(p - 6,p - 4) && argMatch(p - 4,p - 1) && argMatch(p - 1,p)) {
                  rtl.rcArrW(listing,p - 8,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && ADD_SUB(p - 1) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 6) && LDA_STACK(p - 7) && ADC_SBC(p - 6) && ASL_STACK(p - 5) && ROL_A(p - 4) && STA_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 5,p - 2) && argMatch(p - 2,p)) {
                  rtl.rcArrW(listing,p - 6,"\tsta #$00");
                  rtl.rcArrW(listing,p - 4,"");
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ADD_SUB_STACK(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 3,p) && (argMatch(p - 4,p - 3) === false)) {
                  rtl.rcArrW(listing,p - 4,"");
                  Result = false;
                  break;
                };
                if ((p > 4) && ASL_A(p - 5) && ROL_STACK(p - 4) && ADD_SUB_VAL(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  rtl.rcArrW(listing,p - 4,"");
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_A(p - 6) && ROL_STACK(p - 5) && ASL_A(p - 4) && ADD_SUB_STACK(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 3,p) && (argMatch(p - 5,p - 3) === false)) {
                  rtl.rcArrW(listing,p - 5,"");
                  Result = false;
                  break;
                };
                if ((p > 5) && ASL_A(p - 6) && ROL_STACK(p - 5) && ASL_A(p - 4) && ADD_SUB_VAL(p - 3) && ASL_A(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  rtl.rcArrW(listing,p - 5,"");
                  Result = false;
                  break;
                };
                break;
              } else if ((pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),rtl.rcArrR(listing,p)) > 0) || LAB_A(i) || (rtl.rcArrR(listing,i) === "\teif") || (JSR(i) && (pas.System.Pos("\tjsr @",rtl.rcArrR(listing,i)) === 0))) break;
            };
            if (Result === false) return false;
          };
          return Result;
        };
        function opt_STA_BP(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          Result = true;
          if (STA_BP_Y(i + 8) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDY_STACK(i + 6) && LDA_STACK(i + 7)) if (argMatch(i + 2,i + 7) && (argMatch(i + 2,i + 6) === false)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDY_STACK(i + 6) && STY_BP_1(i + 7) && LDY_STACK(i + 8) && LDA_STACK(i + 9)) if (argMatch(i + 2,i + 9) && (argMatch(i + 2,i + 8) === false)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDY_STACK(i + 13) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_BP_1(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_STACK(i + 8) && SCC(i + 9) && INC_BP_1(i + 10) && LDA(i + 11) && (ADD_SUB(i + 12) || AND_ORA_EOR(i + 12))) if (argMatch(i + 2,i + 6) && argMatch(i + 6,i + 8) && argMatch(i + 8,i + 13)) {
            rtl.rcArrW(listing,i + 2,"\ttay");
            rtl.rcArrW(listing,i + 6,"\ttya");
            rtl.rcArrW(listing,i + 8,"\ttay");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (MVY_IM(i) && (pas.System.Pos(" :bp+1",rtl.rcArrR(listing,i)) > 0) && LDY_IM(i + 1) && LDA_A(i + 2) && STA_BP_Y(i + 3)) {
            p = rtl.rc(GetWORD(i + 1,i),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 3,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (MVY_IM(i) && (pas.System.Pos(" :bp+1",rtl.rcArrR(listing,i)) > 0) && LDY(i + 1) && (LDY_IM(i + 1) === false) && LDA_A(i + 2) && STA_BP_Y(i + 3)) {
            p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 3,"\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y");
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY_IM(i + 2) && LDA_A(i + 3) && STA_BP_Y(i + 4)) {
            p = rtl.rc(GetWORD(i + 2,i),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 4,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY_IM(i + 2) && STA_BP_Y(i + 3)) {
            p = rtl.rc(GetWORD(i + 2,i),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 3,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY(i + 2) && (LDY_IM(i + 2) === false) && LDA_A(i + 3) && STA_BP_Y(i + 4)) {
            p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            if ((p === 0) && (LDY_STACK(i + 2) === false)) {
              rtl.rcArrW(listing,i + 4,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 2,"");
            } else rtl.rcArrW(listing,i + 4,"\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y");
            return false;
          };
          if (LDY_IM(i) && STY_BP_1(i + 1) && LDY(i + 2) && (LDY_IM(i + 2) === false) && STA_BP_Y(i + 3)) {
            p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
            if ((p === 0) && (LDY_STACK(i + 2) === false)) {
              rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 2,"");
            } else rtl.rcArrW(listing,i + 3,"\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_BP_Y(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA_IM(i + 2) && STA_BP_1(i + 3) && LDY(i + 4) && (LDY_IM(i + 4) === false) && LDA_A(i + 5) && AND_ORA_EOR(i + 6) && LDY_STACK(i + 7)) if (argMatch(i + 1,i + 7)) {
            p = rtl.rc(GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 7,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,"\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP_Y(i + 7) && LDA(i) && STA_STACK(i + 1) && LDA_IM(i + 2) && STA_BP_1(i + 3) && LDY(i + 4) && (LDY_IM(i + 4) === false) && LDA_A(i + 5) && LDY_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
            p = rtl.rc(GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 7,"\tsta $" + pas.SysUtils.IntToHex(p,2) + "00,y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_BP_Y(i + 5) && LDA(i) && STA_STACK(i + 1) && LDY_IM(i + 2) && STY_BP_1(i + 3) && LDY_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
            p = rtl.rc(GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 5,"\tlda $" + pas.SysUtils.IntToHex(p,2) + "00,y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP_Y(i + 6) && ADD_IM(i) && TAY(i + 1) && LDA_IM(i + 2) && ADC_IM_0(i + 3) && STA_BP_1(i + 4) && LDA_A(i + 5) && (IY(i + 5) === false)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\ttay");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            return false;
          };
          return Result;
        };
        function opt_STA_LSR(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          Result = true;
          if (LSR_STACK(i) && ROR_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_A(i + 4) && (LDA_STACK(i + 5) === false)) if (argMatch(i + 1,i + 2)) {
            p = rtl.rc(i,-2147483648,2147483647);
            while (LSR_STACK(p) && ROR_STACK(p + 1)) p -= 2;
            if (LDA_A(p) && STA_STACK(p + 1) && argMatch(p + 1,i)) {
              p = rtl.rc(i,-2147483648,2147483647);
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                rtl.rcArrW(listing,p,"\tlsr @");
                p -= 2;
              };
              rtl.rcArrW(listing,p + 1,"");
              return false;
            };
            if (LDA_A(p) && STA_STACK(p + 1) && argMatch(p + 1,i + 1)) {
              p = rtl.rc(i,-2147483648,2147483647);
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                rtl.rcArrW(listing,p + 1,"\tror @");
                p -= 2;
              };
              rtl.rcArrW(listing,p + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
          };
          if (LSR_STACK(i) && ROR_STACK(i + 1) && LDA_STACK(i + 2) && STA_A(i + 3) && (LDA_STACK(i + 4) === false)) if (argMatch(i + 1,i + 2)) {
            p = rtl.rc(i,-2147483648,2147483647);
            while (LSR_STACK(p) && ROR_STACK(p + 1)) p -= 2;
            if (LDA_A(p) && STA_STACK(p + 1) && argMatch(p + 1,i)) {
              p = rtl.rc(i,-2147483648,2147483647);
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                rtl.rcArrW(listing,p,"\tlsr @");
                p -= 2;
              };
              rtl.rcArrW(listing,p + 1,"");
              return false;
            };
            if (LDA_A(p) && STA_STACK(p + 1) && argMatch(p + 1,i + 1)) {
              p = rtl.rc(i,-2147483648,2147483647);
              while (LSR_STACK(p) && ROR_STACK(p + 1)) {
                rtl.rcArrW(listing,p + 1,"\tror @");
                p -= 2;
              };
              rtl.rcArrW(listing,p + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
          };
          if (STA_STACK(i) && LDA_IM_0(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4) && ROR_STACK(i + 5) && ROR_STACK(i + 6) && (ROR(i + 7) === false)) if (argMatch(i,i + 6) && argMatch(i + 2,i + 5) && argMatch(i + 3,i + 4)) {
            p = rtl.rc(i + 4,-2147483648,2147483647);
            while (LSR_STACK(p) && ROR_STACK(p + 1) && ROR_STACK(p + 2)) {
              rtl.rcArrW(listing,p,"\tlsr @");
              rtl.rcArrW(listing,p + 1,"");
              rtl.rcArrW(listing,p + 2,"");
              p += 3;
            };
            rtl.rcArrW(listing,p - 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LSR_STACK(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3)) {
            if (LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && (ADC_SBC(i + 8) === false)) if (argMatch(i + 2,i + 4)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && (LDA_STACK(i + 7) === false) && (ADC_SBC(i + 8) === false)) if (argMatch(i + 3,i + 4)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"");
                rtl.rcArrW(listing,p - 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              return false;
            };
            if (LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8) && STA_VAL(i + 9) && (LDA_STACK(i + 10) === false) && (ADC_SBC(i + 11) === false)) if (argMatch(i + 3,i + 4) && argMatch(i + 2,i + 7)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_STACK(i + 4) && STA_VAL(i + 5) && (LDA_STACK(i + 6) === false)) if (argMatch(i + 3,i + 4)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"");
                rtl.rcArrW(listing,p - 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              return false;
            };
            if (LDA_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (LDA_STACK(i + 8) === false)) if (argMatch(i + 3,i + 4) && argMatch(i + 2,i + 6)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_VAL(i + 4) && ADD_SUB_STACK(i + 5) && STA_VAL(i + 6) && (LDA_STACK(i + 7) === false) && (ADC_SBC(i + 8) === false)) if (argMatch(i + 3,i + 5)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"");
                rtl.rcArrW(listing,p - 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              return false;
            };
            if (LDA_STACK(i + 4) && AND_ORA_EOR_VAL(i + 5) && STA_VAL(i + 6) && (LDA_STACK(i + 7) === false) && (AND_ORA_EOR(i + 8) === false)) if (argMatch(i + 3,i + 4)) {
              p = rtl.rc(i - 1,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && (rtl.rcArrR(listing,p - 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p) === rtl.rcArrR(listing,i + 3))) {
                rtl.rcArrW(listing,p - 3,"");
                rtl.rcArrW(listing,p - 2,"");
                rtl.rcArrW(listing,p - 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                p -= 4;
              };
              rtl.rcArrW(listing,i + 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              return false;
            };
          };
          return Result;
        };
        function opt_STA_IMUL(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = true;
          if ((rtl.rcArrR(listing,i) === "\tjsr @mul40") && LDA(i + 1) && ADD_EAX(i + 2)) {
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tjsr @mul40") && LDA_EAX(i + 1) && ADD_SUB(i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_IM_0(i) && (rtl.rcArrR(listing,i + 1) === "\tsta :eax+2") && LDA_IM_0(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :eax+3") && LDA_A(i + 4) && STA_ECX(i + 5) && LDA_A(i + 6) && STA_ECX_1(i + 7) && LDA_IM_0(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tsta :ecx+2") && LDA_IM_0(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :ecx+3") && (rtl.rcArrR(listing,i + 12) === "\tjsr imulECX")) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 4,"\t.ifdef fmulinit");
            rtl.rcArrW(listing,i + 5,"\tfmulu_16");
            rtl.rcArrW(listing,i + 6,"\tels");
            rtl.rcArrW(listing,i + 7,"\timulCX");
            rtl.rcArrW(listing,i + 8,"\teif");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (STA_EAX(i) && LDA_IM_0(i + 1) && ADC_SBC_IM_0(i + 2) && STA_EAX_1(i + 3) && LDA_IM_0(i + 4) && ADC_SBC_IM_0(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tsta :eax+2") && LDA_IM_0(i + 7) && ADC_SBC_IM_0(i + 8) && (rtl.rcArrR(listing,i + 9) === "\tsta :eax+3") && LDA(i + 10) && STA_ECX(i + 11) && LDA_IM_0(i + 12) && STA_ECX_1(i + 13) && (rtl.rcArrR(listing,i + 14) === "\tsta :ecx+2") && (rtl.rcArrR(listing,i + 15) === "\tsta :ecx+3") && (rtl.rcArrR(listing,i + 16) === "\tjsr imulECX")) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 3,"\t.ifdef fmulinit");
            rtl.rcArrW(listing,i + 4,"\tfmulu_8");
            rtl.rcArrW(listing,i + 5,"\tels");
            rtl.rcArrW(listing,i + 6,"\timulCL");
            rtl.rcArrW(listing,i + 7,"\teif");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            return false;
          };
          return Result;
        };
        function opt_STA_IMUL_CX(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var tmp = "";
          Result = true;
          if (IFDEF_MUL16(i + 8)) {
            if (LDA(i) && (LDA_IM(i) === false) && STA_ECX(i + 1) && LDA(i + 2) && (LDA_IM(i + 2) === false) && STA_ECX_1(i + 3) && LDA_IM(i + 4) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7)) {
              tmp = rtl.rcArrR(listing,i);
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,tmp);
              tmp = rtl.rcArrR(listing,i + 2);
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 6,tmp);
              return false;
            };
            if (LDA(i) && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7)) {
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 9,"\tfmulu_8");
              rtl.rcArrW(listing,i + 11,"\timulCL");
              return false;
            };
            if ((rtl.rcArrR(listing,i) === "\tlda #$02") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
              if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && ADC_SBC(i + 17) && STA(i + 18) && (LDA_EAX_X(i + 19) === false)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tsta :eax");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
              if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tsta :eax");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tsta :eax");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
            if (STA_EAX(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_EAX_1(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda #$02") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                if ((STA_STACK(i + 14) === false) && (STA_STACK(i + 16) === false)) {
                  rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 14));
                  rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 16));
                  rtl.rcArrW(listing,i + 4,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 14),6,256));
                  rtl.rcArrW(listing,i + 5,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 16),6,256));
                  rtl.rcArrW(listing,i + 13,"");
                  rtl.rcArrW(listing,i + 14,"");
                  rtl.rcArrW(listing,i + 15,"");
                  rtl.rcArrW(listing,i + 16,"");
                } else {
                  rtl.rcArrW(listing,i + 4,"\tasl :eax");
                  rtl.rcArrW(listing,i + 5,"\trol :eax+1");
                };
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
            if ((rtl.rcArrR(listing,i) === "\tlda #$04") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tasl @");
                rtl.rcArrW(listing,i + 6,"\trol :eax+1");
                rtl.rcArrW(listing,i + 7,"\tsta :eax");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
              if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tasl @");
                rtl.rcArrW(listing,i + 6,"\trol :eax+1");
                rtl.rcArrW(listing,i + 7,"\tsta :eax");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
            if (STA_EAX(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_EAX_1(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda #$04") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                if ((STA_STACK(i + 14) === false) && (STA_STACK(i + 16) === false)) {
                  rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 14));
                  rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 16));
                  rtl.rcArrW(listing,i + 4,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 14),6,256));
                  rtl.rcArrW(listing,i + 5,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 16),6,256));
                  rtl.rcArrW(listing,i + 6,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 14),6,256));
                  rtl.rcArrW(listing,i + 7,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 16),6,256));
                  rtl.rcArrW(listing,i + 13,"");
                  rtl.rcArrW(listing,i + 14,"");
                  rtl.rcArrW(listing,i + 15,"");
                  rtl.rcArrW(listing,i + 16,"");
                } else {
                  rtl.rcArrW(listing,i + 4,"\tasl :eax");
                  rtl.rcArrW(listing,i + 5,"\trol :eax+1");
                  rtl.rcArrW(listing,i + 6,"\tasl :eax");
                  rtl.rcArrW(listing,i + 7,"\trol :eax+1");
                };
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
            if ((rtl.rcArrR(listing,i) === "\tlda #$08") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
              if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tasl @");
                rtl.rcArrW(listing,i + 6,"\trol :eax+1");
                rtl.rcArrW(listing,i + 7,"\tasl @");
                rtl.rcArrW(listing,i + 8,"\trol :eax+1");
                rtl.rcArrW(listing,i + 9,"\tsta :eax");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
              if (LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && TAY(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA_BP_1(i + 18)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 3,"\tasl @");
                rtl.rcArrW(listing,i + 4,"\trol :eax+1");
                rtl.rcArrW(listing,i + 5,"\tasl @");
                rtl.rcArrW(listing,i + 6,"\trol :eax+1");
                rtl.rcArrW(listing,i + 7,"\tasl @");
                rtl.rcArrW(listing,i + 8,"\trol :eax+1");
                rtl.rcArrW(listing,i + 9,"\tsta :eax");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
            if (STA_EAX(i) && (LDA(i + 1) || TYA(i + 1)) && ADC_SBC(i + 2) && STA_EAX_1(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda #$08") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7)) {
              if (LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
                rtl.rcArrW(listing,i + 3,"\tasl :eax");
                rtl.rcArrW(listing,i + 4,"\trol @");
                rtl.rcArrW(listing,i + 5,"\tasl :eax");
                rtl.rcArrW(listing,i + 6,"\trol @");
                rtl.rcArrW(listing,i + 7,"\tasl :eax");
                rtl.rcArrW(listing,i + 8,"\trol @");
                rtl.rcArrW(listing,i + 9,"\tsta :eax+1");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
              if (LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && STA(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA(i + 18) && (ADC_SBC(i + 20) === false)) {
                rtl.rcArrW(listing,i + 3,"\tasl :eax");
                rtl.rcArrW(listing,i + 4,"\trol @");
                rtl.rcArrW(listing,i + 5,"\tasl :eax");
                rtl.rcArrW(listing,i + 6,"\trol @");
                rtl.rcArrW(listing,i + 7,"\tasl :eax");
                rtl.rcArrW(listing,i + 8,"\trol @");
                rtl.rcArrW(listing,i + 9,"\tsta :eax+1");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
            if (LDA_A(i) && STA_EAX(i + 1) && LDA_A(i + 2) && STA_EAX_1(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda #$0A") && STA_ECX(i + 5) && LDA_IM_0(i + 6) && STA_ECX_1(i + 7) && LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 14));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 16));
              rtl.rcArrW(listing,i + 4,"\ttay");
              rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tasl @");
              rtl.rcArrW(listing,i + 7,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 8,"\tasl @");
              rtl.rcArrW(listing,i + 9,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 10,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 11,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 12,"\ttya");
              rtl.rcArrW(listing,i + 13,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 14,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 15,"\trol @");
              rtl.rcArrW(listing,i + 16,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              return false;
            };
            if (LDA_A(i) && STA_ECX(i + 1) && LDA_A(i + 2) && STA_ECX_1(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tlda #$0A") && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7) && LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 14));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 16));
              rtl.rcArrW(listing,i + 4,"\ttay");
              rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tasl @");
              rtl.rcArrW(listing,i + 7,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 8,"\tasl @");
              rtl.rcArrW(listing,i + 9,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 10,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 11,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 12,"\ttya");
              rtl.rcArrW(listing,i + 13,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 14,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 15,"\trol @");
              rtl.rcArrW(listing,i + 16,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              return false;
            };
            if ((rtl.rcArrR(listing,i) === "\tlda #$0A") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7)) {
              if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && TAY(i + 15)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 1,"\tasl @");
                rtl.rcArrW(listing,i + 2,"\tasl @");
                rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
                rtl.rcArrW(listing,i + 4,"\tasl @");
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                rtl.rcArrW(listing,i + 13,"");
                return false;
              };
              if (LDA(i + 13) && ADD_SUB(i + 14) && (ADD_EAX(i + 15) || SUB_EAX(i + 15)) && TAY(i + 16)) {
                rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 4));
                rtl.rcArrW(listing,i + 1,"\tasl @");
                rtl.rcArrW(listing,i + 2,"\tasl @");
                rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
                rtl.rcArrW(listing,i + 4,"\tasl @");
                rtl.rcArrW(listing,i + 5,"\tsta :eax");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                return false;
              };
            };
          };
          if ((rtl.rcArrR(listing,i) === "\tlda #$0A") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && IFDEF_MUL16(i + 4)) {
            if (LDA_EAX(i + 9) && ADD_SUB(i + 10) && TAY(i + 11)) {
              if (STA_EAX_1(i - 1) && (ADC_IM_0(i - 2) || SBC_IM_0(i - 2)) && LDA_IM_0(i - 3) && STA_EAX(i - 4)) {
                rtl.rcArrW(listing,i - 1,"");
                rtl.rcArrW(listing,i - 2,"");
                rtl.rcArrW(listing,i - 3,"");
                rtl.rcArrW(listing,i,"");
              } else rtl.rcArrW(listing,i,"\tlda :eax");
              rtl.rcArrW(listing,i + 1,"\tasl @");
              rtl.rcArrW(listing,i + 2,"\tasl @");
              rtl.rcArrW(listing,i + 3,"\tadd :eax");
              rtl.rcArrW(listing,i + 4,"\tasl @");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              return false;
            };
            if (LDA(i + 9) && AND_ORA_EOR(i + 10) && (ADD_EAX(i + 11) || SUB_EAX(i + 11)) && (TAY(i + 12) || STA_STACK(i + 12))) {
              rtl.rcArrW(listing,i,"\tlda :eax");
              rtl.rcArrW(listing,i + 1,"\tasl @");
              rtl.rcArrW(listing,i + 2,"\tasl @");
              rtl.rcArrW(listing,i + 3,"\tadd :eax");
              rtl.rcArrW(listing,i + 4,"\tasl @");
              rtl.rcArrW(listing,i + 5,"\tsta :eax");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              return false;
            };
          };
          if (LDY_IM_0(i) && LDA(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_EAX(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsty :eax+1") && (rtl.rcArrR(listing,i + 6) === "\tlda #$0A") && STA_ECX(i + 7) && LDA_IM_0(i + 8) && STA_ECX_1(i + 9) && IFDEF_MUL16(i + 10)) {
            if (LDA(i + 15) && (ADD_EAX(i + 16) || SUB_EAX(i + 16)) && TAY(i + 17)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"\tasl @");
              rtl.rcArrW(listing,i + 3,"\tasl @");
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 5,"\tasl @");
              rtl.rcArrW(listing,i + 6,"\tsta :eax");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              rtl.rcArrW(listing,i + 13,"");
              rtl.rcArrW(listing,i + 14,"");
              if (rtl.rcArrR(listing,i + 16) === "\tadd :eax") {
                rtl.rcArrW(listing,i + 15,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 15),6,256))}
               else rtl.rcArrW(listing,i + 15,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 15),6,256));
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 16,"");
              return false;
            };
            if (LDA(i + 15) && ADD_SUB(i + 16) && (ADD_EAX(i + 17) || SUB_EAX(i + 17)) && (STA(i + 18) || TAY(i + 18))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"\tasl @");
              rtl.rcArrW(listing,i + 3,"\tasl @");
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 5,"\tasl @");
              rtl.rcArrW(listing,i + 6,"\tsta :eax");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              rtl.rcArrW(listing,i + 13,"");
              rtl.rcArrW(listing,i + 14,"");
              if (rtl.rcArrR(listing,i + 17) === "\tadd :eax") {
                rtl.rcArrW(listing,i + 15,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 15),6,256))}
               else rtl.rcArrW(listing,i + 15,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 15),6,256));
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 17,"");
              return false;
            };
          };
          if ((rtl.rcArrR(listing,i) === "\tlda #$10") && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
            if (LDY(i + 13) && LDA_EAX(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && STA(i + 17) && (LDA_EAX_X(i + 18) === false)) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 3,"\tasl @");
              rtl.rcArrW(listing,i + 4,"\trol :eax+1");
              rtl.rcArrW(listing,i + 5,"\tasl @");
              rtl.rcArrW(listing,i + 6,"\trol :eax+1");
              rtl.rcArrW(listing,i + 7,"\tasl @");
              rtl.rcArrW(listing,i + 8,"\trol :eax+1");
              rtl.rcArrW(listing,i + 9,"\tasl @");
              rtl.rcArrW(listing,i + 10,"\trol :eax+1");
              rtl.rcArrW(listing,i + 11,"\tsta :eax");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
            if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && STA(i + 15) && LDA_EAX_1(i + 16) && ADC_SBC(i + 17) && STA(i + 18) && (LDA_EAX_X(i + 19) === false)) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 3,"\tasl @");
              rtl.rcArrW(listing,i + 4,"\trol :eax+1");
              rtl.rcArrW(listing,i + 5,"\tasl @");
              rtl.rcArrW(listing,i + 6,"\trol :eax+1");
              rtl.rcArrW(listing,i + 7,"\tasl @");
              rtl.rcArrW(listing,i + 8,"\trol :eax+1");
              rtl.rcArrW(listing,i + 9,"\tasl @");
              rtl.rcArrW(listing,i + 10,"\trol :eax+1");
              rtl.rcArrW(listing,i + 11,"\tsta :eax");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
          };
          if (LDA_IM_0(i) && STA_ECX(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tlda #$01") && STA_ECX_1(i + 3) && LDA_A(i + 4) && STA_EAX(i + 5) && LDA_A(i + 6) && STA_EAX_1(i + 7)) {
            if (LDA_EAX(i + 13) && STA_A(i + 14) && LDA_EAX_1(i + 15) && STA_A(i + 16) && LDA_EAX_2(i + 17) && STA_A(i + 18) && LDA_EAX_3(i + 19) && STA_A(i + 20)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 9,"\tsta :eax+2");
              rtl.rcArrW(listing,i + 10,"\tlda #$00");
              rtl.rcArrW(listing,i + 11,"\tsta :eax+3");
              rtl.rcArrW(listing,i + 12,"");
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,"\tlda #$00");
              return false;
            };
            if (LDA_EAX(i + 13) && STA_A(i + 14) && LDA_EAX_1(i + 15) && STA_A(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,"\tlda #$00");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
            if (LDA_EAX_1(i + 13) && STA_A(i + 14) && LDA_EAX(i + 15) && STA_A(i + 16) && (LDA_EAX_X(i + 17) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,"\tlda #$00");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
            if (LDA_EAX(i + 13) && ADD_SUB(i + 14) && STA_A(i + 15) && LDA_EAX_1(i + 16) && ADC_SBC(i + 17) && STA_A(i + 18) && (LDA_EAX_X(i + 19) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,"\tlda #$00");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
            if (LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && TAY(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA_BP_1(i + 18)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,"\tlda #$00");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
          };
          if (LDA_A(i) && STA_ECX(i + 1) && LDA_A(i + 2) && STA_ECX(i + 3) && LDA_IM_0(i + 4) && STA_EAX(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda #$01") && STA_EAX_1(i + 7) && LDA_EAX(i + 13) && STA(i + 14) && LDA_EAX_1(i + 15) && STA(i + 16) && (LDA_EAX_X(i + 17) === false)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 4,"\tlda #$00");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (LDA(i) && STA_EAX(i + 1) && LDA_A(i + 2) && STA_EAX_1(i + 3) && LDA_IM_0(i + 4) && STA_ECX(i + 5) && (rtl.rcArrR(listing,i + 6) === "\tlda #$01") && STA_ECX_1(i + 7) && LDA(i + 13) && (ADD_EAX(i + 14) || SUB_EAX(i + 14)) && STA(i + 15) && LDA(i + 16) && (ADC_EAX_1(i + 17) || SBC_EAX_1(i + 17)) && STA(i + 18) && (ADC_SBC(i + 20) === false)) {
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 17,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tlda #$40") && STA_ECX(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tlda #$01") && STA_ECX_1(i + 3) && LDA(i + 4) && STA_EAX(i + 5) && LDA(i + 6) && STA_EAX_1(i + 7)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 4,"\tjsr @mul320");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 11) === "\timulCX") && (LDA_IM(i) === false) && STA_EAX(i + 1) && LDA_IM_0(i + 2) && STA_EAX_1(i + 3) && LDA_A(i + 4) && STA_ECX(i + 5) && LDA_A(i + 6) && STA_ECX_1(i + 7) && IFDEF_MUL16(i + 8)) {
            rtl.rcArrW(listing,i + 11,"\timulCX_AL");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 11) === "\timulCX") && LDA_A(i) && STA_ECX(i + 1) && LDA_A(i + 2) && STA_ECX_1(i + 3) && LDA_A(i + 4) && (LDA_IM(i + 4) === false) && STA_EAX(i + 5) && LDA_IM_0(i + 6) && STA_EAX_1(i + 7) && IFDEF_MUL16(i + 8)) {
            rtl.rcArrW(listing,i + 11,"\timulCX_AL");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 11) === "\timulCX") && (LDA_IM(i) === false) && STA_ECX(i + 1) && LDA_IM_0(i + 2) && STA_ECX_1(i + 3) && LDA_A(i + 4) && STA_EAX(i + 5) && LDA_A(i + 6) && STA_EAX_1(i + 7) && IFDEF_MUL16(i + 8)) {
            rtl.rcArrW(listing,i + 1,"\tsta :eax");
            rtl.rcArrW(listing,i + 3,"\tsta :eax+1");
            rtl.rcArrW(listing,i + 5,"\tsta :ecx");
            rtl.rcArrW(listing,i + 7,"\tsta :ecx+1");
            rtl.rcArrW(listing,i + 11,"\timulCX_AL");
            return false;
          };
          if (STA_EAX(i) && LDA_A(i + 1) && STA_ECX(i + 2) && LDA_A(i + 3) && STA_ECX_1(i + 4) && LDA_A(i + 5) && STA_EAX_1(i + 6) && IFDEF_MUL16(i + 7)) {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = rtl.rcArrR(listing,i + 5);
            listing_tmp[2] = rtl.rcArrR(listing,i + 6);
            listing_tmp[3] = rtl.rcArrR(listing,i + 1);
            listing_tmp[4] = rtl.rcArrR(listing,i + 2);
            listing_tmp[5] = rtl.rcArrR(listing,i + 3);
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            rtl.rcArrW(listing,i,listing_tmp[0]);
            rtl.rcArrW(listing,i + 1,listing_tmp[1]);
            rtl.rcArrW(listing,i + 2,listing_tmp[2]);
            rtl.rcArrW(listing,i + 3,listing_tmp[3]);
            rtl.rcArrW(listing,i + 4,listing_tmp[4]);
            rtl.rcArrW(listing,i + 5,listing_tmp[5]);
            rtl.rcArrW(listing,i + 6,listing_tmp[6]);
            return false;
          };
          return Result;
        };
        function opt_STA_ZTMP(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          Result = true;
          if (LDA_A(i) && BPL_A(i + 1) && LDA_A(i + 2) && SUB(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :eax+2") && LDA_A(i + 5) && SBC(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :eax+3") && LAB_A(i + 8)) {
            if (LDA_EAX(i + 9) && STA_A(i + 10) && LDA_EAX_1(i + 11) && STA_A(i + 12) && (EAX(i + 13) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              return false;
            };
            if (MWY_BP2(i + 9) && LDY_IM_0(i + 10) && LDA_EAX(i + 11) && ADD_SUB(i + 12) && (pas.System.Pos(" (:bp2),y",rtl.rcArrR(listing,i + 12)) > 0) && INY(i + 13) && STA_A(i + 14) && LDA_EAX_1(i + 15) && ADC_SBC(i + 16) && (pas.System.Pos(" (:bp2),y",rtl.rcArrR(listing,i + 16)) > 0) && STA_A(i + 17) && (LDA_A(i + 18) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              return false;
            };
            if (LDA_A(i + 9) && (ADD_EAX(i + 10) || SUB_EAX(i + 10)) && STA_A(i + 11) && LDA_A(i + 12) && (ADC_EAX_1(i + 13) || SBC_EAX_1(i + 13)) && STA_A(i + 14) && (EAX(i + 15) === false) && (ADC_SBC(i + 16) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              return false;
            };
          };
          if ((pas.System.Pos("lda :ztmp",rtl.rcArrR(listing,i + 21)) === 0) && IFDEF_MUL16(i + 16) && STA_EAX(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :ztmp10") && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_EAX_1(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :ztmp11") && LDA_A(i + 8) && ADD_SUB(i + 9) && STA_ECX(i + 10) && (rtl.rcArrR(listing,i + 11) === "\tsta :ztmp8") && LDA_A(i + 12) && ADC_SBC(i + 13) && STA_ECX_1(i + 14) && (rtl.rcArrR(listing,i + 15) === "\tsta :ztmp9")) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",rtl.rcArrR(listing,i + 19)) === 0) && IFDEF_MUL16(i + 14) && STA_ECX(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :ztmp8") && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_ECX_1(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :ztmp9") && LDA_A(i + 8) && STA_EAX(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tsta :ztmp10") && LDA_A(i + 11) && STA_EAX_1(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tsta :ztmp11")) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",rtl.rcArrR(listing,i + 19)) === 0) && IFDEF_MUL16(i + 14) && STA_EAX(i + 2) && (rtl.rcArrR(listing,i + 3) === "\tsta :ztmp10") && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_EAX_1(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :ztmp11") && LDA_A(i + 8) && STA_ECX(i + 9) && (rtl.rcArrR(listing,i + 10) === "\tsta :ztmp8") && LDA_A(i + 11) && STA_ECX_1(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tsta :ztmp9")) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",rtl.rcArrR(listing,i + 17)) === 0) && IFDEF_MUL16(i + 12) && (STA_EAX(i + 1) || STA_ECX(i + 1)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 2)) > 0) && LDA_A(i + 3) && (STA_EAX_1(i + 4) || STA_ECX_1(i + 4)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 5)) > 0) && LDA_A(i + 6) && (STA_EAX(i + 7) || STA_ECX(i + 7)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 8)) > 0) && LDA_A(i + 9) && (STA_EAX_1(i + 10) || STA_ECX_1(i + 10)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 11)) > 0)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",rtl.rcArrR(listing,i + 16)) === 0) && IFDEF_MUL16(i + 11) && DEY(i) && ((rtl.rcArrR(listing,i + 1) === "\tsty :eax+1") || (rtl.rcArrR(listing,i + 1) === "\tsty :ecx+1")) && (pas.System.Pos("sty :ztmp",rtl.rcArrR(listing,i + 2)) > 0) && (STA_EAX(i + 3) || STA_ECX(i + 3)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 4)) > 0) && LDA_A(i + 5) && (STA_EAX(i + 6) || STA_ECX(i + 6)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 7)) > 0) && LDA_A(i + 8) && (STA_EAX_1(i + 9) || STA_ECX_1(i + 9)) && (pas.System.Pos("sta :ztmp",rtl.rcArrR(listing,i + 10)) > 0)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if ((pas.System.Pos("lda :ztmp",rtl.rcArrR(listing,i + 11)) === 0) && IFDEF_MUL8(i + 6) && STA_ECX(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tsta :ztmp8") && LDA_A(i + 3) && STA_EAX(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tsta :ztmp10")) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_EAX_1(i + 9) && LDA_A(i) && BPL_A(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tlda :eax+2") && SUB(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsta :eax+2") && (rtl.rcArrR(listing,i + 5) === "\tlda :eax+3") && SBC(i + 6) && (rtl.rcArrR(listing,i + 7) === "\tsta :eax+3") && LAB_A(i + 8) && (STA_A(i + 10) || LDA_EAX(i + 11))) if ((argMatch(i + 4,i + 11) === false) && (argMatch(i + 7,i + 11) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if ((l === (i + 8)) && LDA_A(i) && BPL_A(i + 1) && LDA_EAX_1(i + 2) && (pas.System.Pos("\tsub :ztmp",rtl.rcArrR(listing,i + 3)) === 1) && STA_EAX_1(i + 4) && LAB_A(i + 5) && LDA_EAX(i + 6) && STA_A(i + 7)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((l === (i + 10)) && LDA_A(i) && BPL_A(i + 1) && LDA_EAX_1(i + 2) && (pas.System.Pos("\tsub :ztmp",rtl.rcArrR(listing,i + 3)) === 1) && STA_EAX_1(i + 4) && LAB_A(i + 5) && LDA_STACK(i + 6) && (ADD_EAX(i + 7) || SUB_EAX(i + 7)) && LDY(i + 8) && STA_A(i + 9)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((l === (i + 10)) && LDA_A(i) && BPL_A(i + 1) && LDA_EAX_1(i + 2) && (pas.System.Pos("\tsub :ztmp",rtl.rcArrR(listing,i + 3)) === 1) && STA_EAX_1(i + 4) && LAB_A(i + 5) && LDA_EAX(i + 6) && STA_A(i + 7) && LDA_EAX_1(i + 8) && STA_A(i + 9)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 8);
            listing_tmp[1] = rtl.rcArrR(listing,i + 9);
            listing_tmp[2] = rtl.rcArrR(listing,i + 6);
            listing_tmp[3] = rtl.rcArrR(listing,i + 7);
            rtl.rcArrW(listing,i + 6,listing_tmp[0]);
            rtl.rcArrW(listing,i + 7,listing_tmp[1]);
            rtl.rcArrW(listing,i + 8,listing_tmp[2]);
            rtl.rcArrW(listing,i + 9,listing_tmp[3]);
            return false;
          };
          if (STA_EAX_1(i + 11) && STA_STACK(i) && LDA_A(i + 1) && STA_ECX(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && STA_ECX_1(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_EAX(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if (argMatch(i,i + 10)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 7);
            listing_tmp[1] = rtl.rcArrR(listing,i + 8);
            listing_tmp[2] = rtl.rcArrR(listing,i + 9);
            listing_tmp[3] = rtl.rcArrR(listing,i + 10);
            listing_tmp[4] = rtl.rcArrR(listing,i + 11);
            listing_tmp[5] = rtl.rcArrR(listing,i + 12);
            listing_tmp[6] = rtl.rcArrR(listing,i + 1);
            listing_tmp[7] = rtl.rcArrR(listing,i + 2);
            listing_tmp[8] = rtl.rcArrR(listing,i + 3);
            listing_tmp[9] = rtl.rcArrR(listing,i + 4);
            listing_tmp[10] = rtl.rcArrR(listing,i + 5);
            listing_tmp[11] = rtl.rcArrR(listing,i + 6);
            for (p = 0; p <= 11; p++) rtl.rcArrW(listing,i + 1 + p,rtl.rcArrR(listing_tmp,p));
            return false;
          };
          if (STA_EAX_1(i + 4) && LDA_A(i) && BPL_A(i + 1) && LDA_A(i + 2) && SUB(i + 3) && LAB_A(i + 5) && LDA_STACK(i + 6) && (ADD_EAX(i + 7) || SUB_EAX(i + 7)) && STA_STACK(i + 8) && (EAX(i + 9) === false) && (ADC_SBC(i + 10) === false)) if (argMatch(i + 4,i + 7) === false) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_EAX_1(i + 18) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_SUB(i + 7) && STA_ECX(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && ADC_SBC(i + 11) && STA_ECX_1(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_EAX(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && STA_A(i + 19)) if (argMatch(i + 2,i + 14) && argMatch(i + 5,i + 17)) {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = rtl.rcArrR(listing,i + 1);
            listing_tmp[2] = rtl.rcArrR(listing,i + 15);
            listing_tmp[3] = rtl.rcArrR(listing,i + 16);
            listing_tmp[4] = rtl.rcArrR(listing,i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 4);
            listing_tmp[6] = rtl.rcArrR(listing,i + 18);
            listing_tmp[7] = rtl.rcArrR(listing,i + 19);
            listing_tmp[8] = rtl.rcArrR(listing,i + 6);
            listing_tmp[9] = rtl.rcArrR(listing,i + 7);
            listing_tmp[10] = rtl.rcArrR(listing,i + 8);
            listing_tmp[11] = rtl.rcArrR(listing,i + 9);
            listing_tmp[12] = rtl.rcArrR(listing,i + 10);
            listing_tmp[13] = rtl.rcArrR(listing,i + 11);
            listing_tmp[14] = rtl.rcArrR(listing,i + 12);
            listing_tmp[15] = rtl.rcArrR(listing,i + 13);
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            for (p = 0; p <= 15; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            return false;
          };
          return Result;
        };
        function PeepholeOptimization_END() {
          var Result = false;
          var i = 0;
          var p = 0;
          var k = 0;
          var tmp = "";
          var old = "";
          var yes = false;
          var ok = false;
          Result = true;
          Rebuild();
          tmp = "";
          old = "";
          for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
            i = $l;
            if (ADD_SUB_STACK(i) || ADC_SBC_STACK(i) || AND_ORA_EOR_STACK(i)) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l1 = i - 1; $l1 >= 1; $l1--) {
                p = $l1;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (LDA_STACK(p - 1) === false) && (SKIP(p - 2) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false) && (IY(0) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(rtl.rcArrR(listing,p - 1),6 - 1,256);
                      for (var $l2 = p, $end1 = i; $l2 <= $end1; $l2++) {
                        k = $l2;
                        if (pas.System.Pos(old,rtl.rcArrR(listing,k)) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    rtl.rcArrW(listing,i,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      rtl.rcArrW(listing,p,"")}
                     else {
                      rtl.rcArrW(listing,p - 1,"");
                      rtl.rcArrW(listing,p,"");
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (LDY(p) || INY(p) || DEY(p) || TAY(p) || TYA(p) || onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && (ADD_SUB(i + 1) || ADC_SBC(i + 1) || AND_ORA_EOR(i + 1) || (ASL_A(i + 1) && TAY(i + 2)) || (ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3)) || (LSR_A(i + 1) && TAY(i + 2)))) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              yes = false;
              for (var $l3 = i - 1; $l3 >= 1; $l3--) {
                p = $l3;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (LDA_STACK(p - 1) === false) && (SKIP(p - 2) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false))) {
                    if (IY(p - 1) && yes) break;
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(rtl.rcArrR(listing,p - 1),6 - 1,256);
                      for (var $l4 = p, $end2 = i; $l4 <= $end2; $l4++) {
                        k = $l4;
                        if (pas.System.Pos(old,rtl.rcArrR(listing,k)) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    rtl.rcArrW(listing,i,rtl.rcArrR(listing,p - 1));
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      rtl.rcArrW(listing,p,"")}
                     else {
                      rtl.rcArrW(listing,p - 1,"");
                      rtl.rcArrW(listing,p,"");
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (LDY(p) || INY(p) || DEY(p) || TAY(p)) {
                  yes = true}
                 else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && STA_BP2_Y(i + 2) && (ADD_SUB(i + 1) || ADC_SBC(i + 1) || AND_ORA_EOR(i + 1)) && (pas.System.Pos(" :STACK",rtl.rcArrR(listing,i + 1)) === 0)) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l5 = i - 1; $l5 >= 1; $l5--) {
                p = $l5;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (LDA_STACK(p - 1) === false) && (SKIP(p - 2) === false) && (IY(p - 1) === false) && (argMatch(p - 1,i + 1) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false) && (IY(0) === false) && (argMatch(p - 1,i + 1) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(rtl.rcArrR(listing,p - 1),6 - 1,256);
                      for (var $l6 = p, $end3 = i; $l6 <= $end3; $l6++) {
                        k = $l6;
                        if (pas.System.Pos(old,rtl.rcArrR(listing,k)) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    rtl.rcArrW(listing,i,rtl.rcArrR(listing,p - 1));
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      rtl.rcArrW(listing,p,"")}
                     else {
                      rtl.rcArrW(listing,p - 1,"");
                      rtl.rcArrW(listing,p,"");
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && STA_BP2_Y(i + 1)) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l7 = i - 1; $l7 >= 1; $l7--) {
                p = $l7;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (LDA_STACK(p - 1) === false) && (SKIP(p - 2) === false) && (IY(p - 1) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false) && (IY(0) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(rtl.rcArrR(listing,p - 1),6 - 1,256);
                      for (var $l8 = p, $end4 = i; $l8 <= $end4; $l8++) {
                        k = $l8;
                        if (pas.System.Pos(old,rtl.rcArrR(listing,k)) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    rtl.rcArrW(listing,i,rtl.rcArrR(listing,p - 1));
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      rtl.rcArrW(listing,p,"")}
                     else {
                      rtl.rcArrW(listing,p - 1,"");
                      rtl.rcArrW(listing,p,"");
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDY_STACK(i) && STY_BP_1(i + 1)) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l9 = i - 1; $l9 >= 1; $l9--) {
                p = $l9;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if (((p > 1) && STA_STACK(p) && LDA_A(p - 1) && (LDA_STACK(p - 1) === false) && (SKIP(p - 2) === false)) || ((p === 1) && STA_STACK(1) && LDA_A(0) && (LDA_STACK(0) === false))) {
                    ok = false;
                    if (LDA_IM(p - 1) === false) {
                      old = pas.System.Copy(rtl.rcArrR(listing,p - 1),6 - 1,256);
                      for (var $l10 = p, $end5 = i; $l10 <= $end5; $l10++) {
                        k = $l10;
                        if (pas.System.Pos(old,rtl.rcArrR(listing,k)) > 0) {
                          ok = true;
                          break;
                        };
                      };
                    };
                    if (ok) break;
                    rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    if (ASL_A(p + 1) || LSR_A(p + 1)) {}
                    else if (STA(p + 1) || TAY(p + 1)) {
                      rtl.rcArrW(listing,p,"")}
                     else {
                      rtl.rcArrW(listing,p - 1,"");
                      rtl.rcArrW(listing,p,"");
                    };
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (STA_STACK(i + 1) && ((LDA_A(i) && (LDA_STACK(i) === false)) || (AND_ORA_EOR(i) && (AND_ORA_EOR_STACK(i) === false)) || ASL_A(i) || ROL_A(i) || ADD_SUB_VAL(i) || ADC_SBC_VAL(i))) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256);
              for (var $l11 = i - 1; $l11 >= 1; $l11--) {
                p = $l11;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if (STA_STACK(p)) {
                    if ((p > 2) && TAY(p - 3) && LDA_STACK(p - 2) && ADC_IM_0(p - 1)) {}
                    else {
                      rtl.rcArrW(listing,p,"");
                      Result = false;
                      break;
                    };
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA_STACK(i) && (EAX(i) === false) && STA_A(i + 1) && (IY(i + 1) === false) && (pas.System.Pos(":bp2",rtl.rcArrR(listing,i + 1)) === 0) && (STA_A(i + 2) === false) && (TAY(i + 2) === false) && (argMatch(i,i + 1) === false)) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l12 = i - 1; $l12 >= 1; $l12--) {
                p = $l12;
                if ((pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) && ((STA_STACK(p) && (LDA_STACK(p - 1) === false)) || (STY_STACK(p) && (LDY_STACK(p - 1) === false)))) {
                  if (STA_STACK(p)) {
                    rtl.rcArrW(listing,p,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
                   else rtl.rcArrW(listing,p,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  Result = false;
                  break;
                } else if ((pas.System.Pos(tmp,rtl.rcArrR(listing,p)) === 6) || argMatch(i + 1,p) || onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDY_STACK(i) && STY(i + 1) && (pas.System.Pos(":bp2",rtl.rcArrR(listing,i + 1)) === 0) && (STY(i + 2) === false) && (TYA(i + 2) === false) && (argMatch(i,i + 1) === false)) {
              tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l13 = i - 1; $l13 >= 1; $l13--) {
                p = $l13;
                if ((rtl.rcArrR(listing,p) === tmp) && (LDA_STACK(p - 1) === false)) {
                  rtl.rcArrW(listing,p,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  Result = false;
                  break;
                } else if ((pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),rtl.rcArrR(listing,p)) === 6) || argMatch(i + 1,p) || onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (LDA(i) && ADD_STACK(i + 1) && TAY(i + 2) && LDA(i + 3) && ADC_STACK(i + 4) && STA_BP_1(i + 5)) {
              tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256);
              for (var $l14 = i - 1; $l14 >= 1; $l14--) {
                p = $l14;
                if (pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) {
                  if ((p > 1) && LDA(p - 2) && ADD_SUB(p - 1) && STA_STACK(p) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && LDA(p + 4) && ADC_SBC(p + 5) && STA_STACK(p + 6) && LDA(p + 7) && ADC_SBC(p + 8) && STA_STACK(p + 9)) {
                    rtl.rcArrW(listing,p + 4,"");
                    rtl.rcArrW(listing,p + 5,"");
                    rtl.rcArrW(listing,p + 6,"");
                    rtl.rcArrW(listing,p + 7,"");
                    rtl.rcArrW(listing,p + 8,"");
                    rtl.rcArrW(listing,p + 9,"");
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (DEY(i) && STA_STACK(i + 1) && STY_STACK(i + 2) && ASL_STACK(i + 3) && ROL_STACK(i + 4)) if (argMatch(i + 1,i + 3) && argMatch(i + 2,i + 4)) {
              tmp = rtl.rcArrR(listing,i + 1);
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
              p = rtl.rc(i + 3,-2147483648,2147483647);
              while (ASL_STACK(p) && ROL_STACK(p + 1)) {
                rtl.rcArrW(listing,p - 1,"\tasl @");
                rtl.rcArrW(listing,p,rtl.rcArrR(listing,p + 1));
                p += 2;
              };
              rtl.rcArrW(listing,p - 1,tmp);
              Result = false;
              break;
            };
            if (LDA_STACK(i) && STA_BP2(i + 1) && LDA_STACK(i + 2) && STA_BP2_1(i + 3)) {
              tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              for (var $l15 = i - 1; $l15 >= 0; $l15--) {
                p = $l15;
                if (rtl.rcArrR(listing,p) === tmp) {
                  if ((p > 1) && LDY_IM_0(i + 4) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1) && (rtl.rcArrR(listing,p + 1) === (rtl.rcArrR(listing,p - 2) + "+1")) && ADC_IM_0(p + 2) && STA_STACK(p + 3)) if (pas.System.Pos(rtl.rcArrR(listing,p - 2),rtl.rcArrR(listing,p + 1)) > 0) {
                    rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256) + " :bp2");
                    rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                    rtl.rcArrW(listing,i + 4,"");
                    rtl.rcArrW(listing,p - 2,"");
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p,"");
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                    Result = false;
                    break;
                  };
                  if ((p > 7) && LDY_IM_0(i + 4) && ((LDA_A(i + 5) && STA_BP2_Y(i + 6)) || (LDA_BP2_Y(i + 5) && STA_A(i + 6))) && (INY(i + 7) === false) && LDA_IM_0(p - 8) && STA_STACK(p - 7) && LDA_VAL(p - 6) && ASL_A(p - 5) && ROL_STACK(p - 4) && ASL_A(p - 3) && ROL_STACK(p - 2) && (pas.System.Pos("\tadd <adr.",rtl.rcArrR(listing,p - 1)) > 0) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,p + 1)) > 0) && ADC_STACK(p + 2) && STA_STACK(p + 3)) if (argMatch(i + 2,p - 7)) {
                    rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 6),6,256));
                    rtl.rcArrW(listing,i + 1,"\tasl @");
                    rtl.rcArrW(listing,i + 2,"\tasl @");
                    rtl.rcArrW(listing,i + 3,"\ttay");
                    rtl.rcArrW(listing,i + 4,"");
                    if (LDA_BP2_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 1),7,256) + ",y");
                    if (STA_BP2_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,p - 1),7,256) + ",y");
                    rtl.rcArrW(listing,p - 8,"");
                    rtl.rcArrW(listing,p - 7,"");
                    rtl.rcArrW(listing,p - 6,"");
                    rtl.rcArrW(listing,p - 5,"");
                    rtl.rcArrW(listing,p - 4,"");
                    rtl.rcArrW(listing,p - 3,"");
                    rtl.rcArrW(listing,p - 2,"");
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p,"");
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                    Result = false;
                    break;
                  };
                  if ((p > 0) && LDY_IM_0(i + 4) && ((LDA_A(i + 5) && STA_BP2_Y(i + 6)) || (LDA_BP2_Y(i + 5) && STA_A(i + 6))) && (INY(i + 7) === false) && (pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,p - 1)) > 0) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,p + 1)) > 0) && STA_STACK(p + 2) && (STA_A(p + 3) === false)) if (argMatch(i + 2,p + 2)) {
                    rtl.rcArrW(listing,i,"");
                    rtl.rcArrW(listing,i + 1,"");
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                    rtl.rcArrW(listing,i + 4,"");
                    if (LDA_BP2_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 1),7,256));
                    if (STA_BP2_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,p - 1),7,256));
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p,"");
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    Result = false;
                    break;
                  };
                  if ((p > 1) && LDY_IM_0(i + 4) && ((LDA_A(i + 5) && STA_BP2_Y(i + 6)) || (LDA_BP2_Y(i + 5) && STA_A(i + 6))) && (INY(i + 7) === false) && (pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,p - 2)) > 0) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,p + 1)) > 0) && ADC_IM_0(p + 2) && STA_STACK(p + 3)) if (argMatch(i + 2,p + 3)) {
                    rtl.rcArrW(listing,i,"");
                    rtl.rcArrW(listing,i + 1,"");
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                    rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    if (LDA_BP2_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 2),7,256) + ",y");
                    if (STA_BP2_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,p - 2),7,256) + ",y");
                    rtl.rcArrW(listing,p - 2,"");
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p,"");
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                    Result = false;
                    break;
                  };
                  if (LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && LDA(p + 4) && ADC_SBC(p + 5) && STA_STACK(p + 6) && LDA(p + 7) && ADC_SBC(p + 8) && STA_STACK(p + 9)) if (argMatch(i + 2,p + 3)) {
                    rtl.rcArrW(listing,p + 4,"");
                    rtl.rcArrW(listing,p + 5,"");
                    rtl.rcArrW(listing,p + 6,"");
                    rtl.rcArrW(listing,p + 7,"");
                    rtl.rcArrW(listing,p + 8,"");
                    rtl.rcArrW(listing,p + 9,"");
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (MWY_BP2(i) && LDY(i + 1) && LDA_STACK(i + 2) && ADD_SUB(i + 3) && STA_BP2_Y(i + 4) && INY(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7) && STA_BP2_Y(i + 8) && (INY(i + 9) === false)) {
              tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
              for (var $l16 = i - 1; $l16 >= 0; $l16--) {
                p = $l16;
                if (rtl.rcArrR(listing,p) === tmp) {
                  if ((p >= 3) && (rtl.rcArrR(listing,p - 3) === rtl.rcArrR(listing,i)) && (rtl.rcArrR(listing,p - 2) === rtl.rcArrR(listing,i + 1)) && LDA_BP2_Y(p - 1) && INY(p + 1) && LDA_BP2_Y(p + 2) && STA_STACK(p + 3)) {
                    rtl.rcArrW(listing,p - 3,"");
                    rtl.rcArrW(listing,p - 2,"");
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p,"");
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                    rtl.rcArrW(listing,i + 2,"\tlda (:bp2),y");
                    rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
                    Result = false;
                    break;
                  };
                  break;
                } else if (onBreak(p)) break;
              };
              if (Result === false) break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA(i + 4) && STA_VAL(i + 5)) if (argMatch(i,i + 2) && argMatch(i + 1,i + 4)) {
              rtl.rcArrW(listing,i,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 1,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              Result = false;
              break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && LDA_STACK(i + 2) && STA_STACK(i + 3) && LDA(i + 4)) if (argMatch(i,i + 2) && argMatch(i + 1,i + 3)) {
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA_STACK(i + 3) && STA_STACK(i + 4) && LDA(i + 5)) if (argMatch(i,i + 3) && argMatch(i + 1,i + 4)) {
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              Result = false;
              break;
            };
            if (STY_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA_STACK(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 6) && LDA_STACK(i + 7) && STA_VAL(i + 8)) if (argMatch(i,i + 3) && argMatch(i + 1,i + 5) && argMatch(i + 2,i + 7)) {
              rtl.rcArrW(listing,i,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 1,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
              rtl.rcArrW(listing,i + 2,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              Result = false;
              break;
            };
            if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LDA_STACK(i + 3) && STA_STACK(i + 4) && LDA(i + 5)) if (argMatch(i,i + 3) && argMatch(i + 1,i + 4)) {
              rtl.rcArrW(listing,i + 1,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDA_STACK(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7)) if ((argMatch(i,i + 1) === false) && argMatch(i,i + 4) && argMatch(i + 2,i + 6)) {
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDY(i + 1) && MVA_STACK(i + 2)) if (pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),rtl.rcArrR(listing,i + 2)) > 0) {
              tmp = pas.System.Copy(rtl.rcArrR(listing,i),6,256);
              rtl.rcArrW(listing,i + 2,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 2),6 + tmp.length,256));
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDY(i + 1) && LDA_STACK(i + 2) && STA(i + 3) && IY(i + 3)) if (argMatch(i,i + 2) && (argMatch(i,i + 1) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              Result = false;
              break;
            };
            if (LDA_A(i) && (IY(i) === false) && (LDA_A(i + 1) || MVA(i + 1) || MWA(i + 1))) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if (LDA_A(i) && IY(i) && LDA_A(i + 1) && (IY(i + 1) === false)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if (LDA_A(i) && IY(i) && LDA_A(i + 1) && IY(i + 1)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_STACK(i + 3) && TAY(i + 4)) if (argMatch(i + 1,i + 3)) {
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
            if (ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA(i + 5) && ADC_SBC(i + 6) && STA(i + 7) && LDA(i + 8) && ADC_SBC(i + 9) && STA(i + 10)) {
              if (((i + 22) === (l - 1)) && LDA(i + 17) && ADC_SBC(i + 18) && STA_STACK(i + 19) && LDA(i + 20) && ADC_SBC(i + 21) && STA_STACK(i + 22)) {
                rtl.rcArrW(listing,i + 17,"");
                rtl.rcArrW(listing,i + 18,"");
                rtl.rcArrW(listing,i + 19,"");
                rtl.rcArrW(listing,i + 20,"");
                rtl.rcArrW(listing,i + 21,"");
                rtl.rcArrW(listing,i + 22,"");
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && (AND_ORA_EOR(i + 12) || ADD_SUB(i + 12)) && STA(i + 13)) if (argMatch(i + 1,i + 11) && (argMatch(i + 4,i + 14) === false)) {
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && (AND_ORA_EOR(i + 12) || ADD_SUB(i + 12)) && LDY(i + 13) && STA(i + 14) && (LDA_A(i + 15) === false)) if (argMatch(i + 1,i + 11)) {
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && (AND_ORA_EOR(i + 12) || ADD_SUB(i + 12)) && STA(i + 13) && LDA_STACK(i + 14) && (AND_ORA_EOR(i + 15) || ADC_SBC(i + 15)) && STA(i + 16)) if (argMatch(i + 1,i + 11) && argMatch(i + 4,i + 14) && (argMatch(i + 7,i + 17) === false)) {
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                Result = false;
                break;
              };
              if (LDA(i + 11) && ADD_SUB(i + 12) && STA_STACK(i + 13) && LDY_STACK(i + 14) && STY_BP_1(i + 15) && LDY_STACK(i + 16) && LDA_STACK(i + 17) && STA_BP_Y(i + 18)) if (argMatch(i + 1,i + 16) && argMatch(i + 4,i + 14) && argMatch(i + 13,i + 17)) {
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                Result = false;
                break;
              };
              if (LDA_STACK(i + 11) && ADD_SUB(i + 12) && TAY(i + 13) && LDA_STACK(i + 14) && ADC_SBC(i + 15) && STA_BP_1(i + 16) && LDA(i + 17) && STA_BP_Y(i + 18)) if (argMatch(i + 1,i + 11) && argMatch(i + 4,i + 14)) {
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                Result = false;
                break;
              };
            };
            if (SCC(i) && INC_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && (ADD_SUB(i + 4) || AND_ORA_EOR(i + 4)) && STA_VAL(i + 5)) if ((argMatch(i + 1,i + 2) === false) && (argMatch(i + 1,i + 3) === false) && (argMatch(i + 1,i + 4) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if ((l === (i + 8)) && LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 4) && STA(i + 5) && LDA_STACK(i + 6) && STA(i + 7)) if (argMatch(i + 2,i + 6) && argMatch(i + 3,i + 4)) {
              rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 1,"\tlsr @");
              Result = false;
              break;
            };
            if (LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 4) && LSR_A(i + 5) && ROR_STACK(i + 6) && ROR_STACK(i + 7)) if (argMatch(i + 1,i + 4) && argMatch(i + 2,i + 6) && argMatch(i + 3,i + 7)) {
              rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 1,"\tlsr @");
              rtl.rcArrW(listing,i + 4,"");
              Result = false;
              break;
            };
            if ((l === (i + 2)) && STA_A(i) && INY(i + 1)) {
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if (l === (i + 3)) {
              if (LDA_A(i) && (ADD_IM_0(i + 1) || SUB_IM_0(i + 1)) && STA_VAL(i + 2)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && STA_VAL(i + 2)) {
                rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && LDY(i + 1) && STA_VAL(i + 2)) if (argMatch(i,i + 1) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ADD_SUB(i + 1) && STA_VAL(i + 2)) if (argMatch(i,i + 1) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && STA_VAL(i + 2)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (STA_A(i) && INY(i + 1) && INY(i + 2)) {
                rtl.rcArrW(listing,i + 2,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && STA_VAL(i + 2)) if (argMatch(i,i + 1) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
            };
            if (l === (i + 4)) {
              if (ROL_STACK(i) && STA_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ADD_SUB(i + 1) && ADD_SUB(i + 2) && STA_VAL(i + 3)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ADD_SUB(i + 1) && AND_ORA_EOR(i + 2) && STA_VAL(i + 3)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB(i + 2) && STA_VAL(i + 3)) if (argMatch(i,i + 2) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && (LDA(i + 1) || LDY(i + 1)) && (LDY(i + 2) || LDA_A(i + 2)) && STA_VAL(i + 3)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && STA_VAL(i + 3)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
            };
            if (l === (i + 5)) {
              if (ROL_STACK(i) && ADD_SUB(i + 1) && TAY(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) if (argMatch(i,i + 1) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ADD_SUB(i + 1) && ADD_SUB(i + 2) && AND_ORA_EOR(i + 3) && STA_VAL(i + 4)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB(i + 3) && STA_VAL(i + 4)) if (argMatch(i,i + 3) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && AND_ORA_EOR(i + 3) && STA_VAL(i + 4)) if (argMatch(i,i + 3) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && STA_VAL(i + 4)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (LDY_IM_0(i) && LDA_A(i + 1) && SPL(i + 2) && DEY(i + 3) && STA_VAL(i + 4)) {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && STA_VAL(i + 2) && LDA_A(i + 3) && STA_VAL(i + 4)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && LDY(i + 3) && STA_VAL(i + 4)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && TAY(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 4) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && ASL_STACK(i + 1) && LDA_VAL(i + 2) && (ADD_SUB_STACK(i + 3) || AND_ORA_EOR_STACK(i + 3)) && STA_VAL(i + 4)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
            };
            if (l === (i + 6)) {
              if (ROL_STACK(i) && STA_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB(i + 4) && STA_VAL(i + 5)) if (argMatch(i,i + 4) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && AND_ORA_EOR(i + 4) && STA_VAL(i + 5)) if (argMatch(i,i + 4) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && AND_ORA_EOR(i + 4) && STA_VAL(i + 5)) if (argMatch(i,i + 4) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && STA_VAL(i + 5)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_VAL(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && STA_VAL(i + 5)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (AND_ORA_EOR(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) if (argMatch(i + 1,i + 4) && (argMatch(i + 1,i + 2) === false)) {
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && STA_VAL(i + 2) && LDA_IM(i + 3) && (ADD_SUB(i + 4) || AND_ORA_EOR(i + 4)) && STA_VAL(i + 5)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 4) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2) || ASL_A(i + 2) || LSR_A(i + 2)) && STA_VAL(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 4) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
            };
            if (l === (i + 7)) {
              if (ROL_STACK(i) && ASL_A(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6)) if (argMatch(i,i + 5) === false) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADD_SUB_VAL(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 6)) if (argMatch(i,i + 2) && argMatch(i + 1,i + 5)) {
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 6));
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ASL_A(i + 5) && STA_VAL(i + 6)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && STA_VAL(i + 6)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_VAL(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 3) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && STA_VAL(i + 3) && LDA_A(i + 4) && (ADC_SBC(i + 5) || AND_ORA_EOR(i + 5)) && STA_VAL(i + 6)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 4) === false) && (argMatch(i,i + 5) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
            };
            if (l === (i + 8)) {
              if (ROL_STACK(i) && STA_VAL(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_VAL(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7)) {
                rtl.rcArrW(listing,i + 1,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && MWY(i + 1) && LDY_IM(i + 2) && LDA(i + 3) && STA_BP2_Y(i + 4) && INY(i + 5) && LDA(i + 6) && STA_BP2_Y(i + 7)) if ((argMatch(i,i + 3) === false) && (argMatch(i,i + 6) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && INY(i + 1) && LDA_A(i + 2) && (ADD_SUB(i + 3) || AND_ORA_EOR(i + 3)) && STA_VAL(i + 4) && LDA_A(i + 5) && (ADC_SBC(i + 6) || AND_ORA_EOR(i + 6)) && STA_VAL(i + 7)) if ((argMatch(i,i + 2) === false) && (argMatch(i,i + 3) === false) && (argMatch(i,i + 5) === false) && (argMatch(i,i + 6) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
              if (UNUSED_A(i) && LDA_A(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 4) === false) && (argMatch(i,i + 6) === false)) {
                rtl.rcArrW(listing,i,"");
                Result = false;
                break;
              };
            };
            if ((l === (i + 9)) && ROL_STACK(i) && ASL_A(i + 1) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_VAL(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((l === (i + 9)) && ROL_STACK(i) && ADD_SUB_VAL(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && ADC_SBC_IM_0(i + 7) && STA_VAL(i + 8)) if ((argMatch(i,i + 2) === false) && (argMatch(i,i + 4) === false)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((l === (i + 9)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && STA_VAL(i + 8)) {
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if (UNUSED_A(i) && LDA(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && TAY(i + 3) && LDA(i + 4) && (ADC_SBC(i + 5) || AND_ORA_EOR(i + 5)) && STA_BP_1(i + 6) && LDA(i + 7) && STA_BP_Y(i + 8)) if ((argMatch(i,i + 1) === false) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 4) === false) && (argMatch(i,i + 5) === false) && (argMatch(i,i + 7) === false)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((l === (i + 10)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((l === (i + 10)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && ADD_SUB_STACK(i + 5) && STA_VAL(i + 6) && LDA_VAL(i + 7) && ADC_SBC_IM_0(i + 8) && STA_VAL(i + 9)) if ((argMatch(i,i + 3) === false) && (argMatch(i,i + 5) === false)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((l === (i + 11)) && LDA(i) && (LDA_STACK(i) === false) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && (LDA_STACK(i + 3) === false) && ADC_SBC_IM(i + 4) && AND_ORA_EOR(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && STA_VAL(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 6,i + 9)) {
              p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
              if ((p === 1) && ADD_IM(i + 1) && argMatch(i,i + 8) && argMatch(i + 3,i + 10)) {
                rtl.rcArrW(listing,i,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
                rtl.rcArrW(listing,i + 1,"\tsne");
                rtl.rcArrW(listing,i + 2,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
              } else {
                rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
                rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 10));
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
              };
              Result = false;
              break;
            };
            if ((l === (i + 11)) && LDY(i) && BEQ(i + 1) && LAB_L(i + 2) && ASL_A(i + 3) && ROL_STACK(i + 4) && ROL_STACK(i + 5) && ROL_STACK(i + 6) && DEY(i + 7) && BNE(i + 8) && LAB_L(i + 9) && STA_A(i + 10)) {
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              if (LDY_IM(i) && (GetBYTE(i) > 7)) {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"\tlda #$00");
              };
              Result = false;
              break;
            };
            if ((l === (i + 12)) && LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11)) if (argMatch(i,i + 3) && argMatch(i,i + 8) && argMatch(i + 1,i + 10)) {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
            if ((l === (i + 13)) && LDY(i) && BEQ(i + 1) && LAB_L(i + 2) && ASL_A(i + 3) && ROL_STACK(i + 4) && ROL_STACK(i + 5) && ROL_STACK(i + 6) && DEY(i + 7) && BNE(i + 8) && LAB_L(i + 9) && STA_VAL(i + 10) && LDA_STACK(i + 11) && STA_A(i + 12)) if (argMatch(i + 4,i + 11)) {
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              if (LDY_IM(i) && (GetBYTE(i) > 15)) {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"\tlda #$00");
                rtl.rcArrW(listing,i + 11,"");
              };
              Result = false;
              break;
            };
            if (ASL_STACK(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 4)) && ROL_STACK(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 5)) && ROL_STACK(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 6)) && ROL_STACK(i + 3) && (rtl.rcArrR(listing,i + 3) !== rtl.rcArrR(listing,i + 7))) {
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_VAL(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7)) if (argMatch(i + 1,i + 6) && (argMatch(i,i + 2) === false) && (argMatch(i,i + 4) === false) && (argMatch(i + 1,i + 2) === false) && (argMatch(i + 1,i + 4) === false)) {
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7)) if (argMatch(i,i + 7) && argMatch(i + 2,i + 5) && argMatch(i + 1,i + 3) && argMatch(i + 3,i + 6)) {
              rtl.rcArrW(listing,i + 6,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 7,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              Result = false;
              break;
            };
            if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_VAL(i + 7) && LDA_STACK(i + 8) && STA_VAL(i + 9)) if ((argMatch(i,i + 9) === false) && argMatch(i + 1,i + 3) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 8)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 9));
              rtl.rcArrW(listing,i + 3,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 5,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              Result = false;
              break;
            };
            if (LDA(i) && ASL_A(i + 1) && STA(i + 2)) if (argMatch(i,i + 2)) {
              rtl.rcArrW(listing,i,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              Result = false;
              break;
            };
            if (STA_STACK(i) && ASL_STACK(i + 1) && LDA_VAL(i + 2)) if (argMatch(i,i + 1)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"\tasl @");
              Result = false;
              break;
            };
            if (STA_STACK(i) && LDA_VAL(i + 1) && (LDA_ADR(i + 1) === false) && ORA_STACK(i + 2)) if (argMatch(i,i + 2)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 2,"");
              Result = false;
              break;
            };
          };
          return Result;
        };
        function PeepholeOptimization_STA() {
          var Result = false;
          var i = 0;
          Result = true;
          Rebuild();
          for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
            i = $l;
            if (opt_STA_ADD(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_LDY(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_BP(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_LSR(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_IMUL(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_IMUL_CX(i) === false) {
              Result = false;
              break;
            };
            if (opt_STA_ZTMP(i) === false) {
              Result = false;
              break;
            };
          };
          return Result;
        };
        function opt_STZ(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = true;
          if (rtl.rcArrR(listing,i + 1) !== "\tsta @PARAM?") {
            if (LDA_IM_0(i) && STA_VAL(i + 1) && (IY(i + 1) === false) && (LDA_A(i + 2) || JSR(i + 2))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"\tstz " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              return false;
            };
            if ((l === (i + 2)) && LDA_IM_0(i) && STA_VAL(i + 1) && (IY(i + 1) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"\tstz " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              return false;
            };
          };
          return Result;
        };
        function opt_LDA(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var tmp = "";
          Result = true;
          if (LDA_IM(i) && STA_STACK(i + 1) && INY(i + 2)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tiny");
          };
          if (LDY(i) && LDA_A(i + 1) && STA_A(i + 2) && STY(i + 3) && STY(i + 4) && STY(i + 5)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 5,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          if (STY_STACK(i) && LDA(i + 1) && AND_ORA_EOR_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\ttya");
            rtl.rcArrW(listing,i + 1,pas.System.Copy(rtl.rcArrR(listing,i + 2),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((LAB_A(i) || DEY(i)) && STY_STACK(i + 1) && LDA_STACK(i + 2)) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 1,"\ttya");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && (STY(i + 1) || INY(i + 1) || DEY(i + 1) || LDY(i + 1) || STA_A(i + 1)) && (LDY_1(i + 1) === false) && LDA_STACK(i + 2) && (SKIP(i + 3) === false) && (CMP(i + 3) === false)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STY_STACK(i) && STA(i + 1) && LDA_STACK(i + 2) && STA_A(i + 3) && (IY(i + 3) === false) && LDA_A(i + 4)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STY_STACK(i) && STY_STACK(i + 1)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDY(i) && LDA_A(i + 1) && STY(i + 2) && STA_A(i + 3)) {
            tmp = rtl.rcArrR(listing,i + 1);
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,tmp);
            return false;
          };
          if (LDY_IM(i) && LDA_IM(i + 1) && STY(i + 2) && STA(i + 3)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            return false;
          };
          if (LDY_IM(i) && LDA_IM(i + 1) && STY_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDY(i + 1) && STY(i + 2) && LDY(i + 3) && LDA_STACK(i + 4)) if (argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && (AND_ORA_EOR(i + 1) || LSR_A(i + 1) || ASL_A(i + 1)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 4)) && STA(i + 2) && STA(i + 5)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDA_A(i) || ADC_SBC(i)) && MWY(i + 1) && LDY(i + 2) && LDA_A(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_IM_0(i) && (STA_A(i + 1) || LDY(i + 1)) && MVA_IM_0(i + 2)) {
            rtl.rcArrW(listing,i + 2,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 2),11,256));
            return false;
          };
          if (LDA_VAL(i) && ASL_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_IM(i) === false) && (LDA_IM(i + 2) === false) && LDA(i) && STA_A(i + 1) && LDA(i + 2)) if (argMatch(i,i + 2) && (argMatch(i,i + 1) === false)) {
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_IM(i) && STA_A(i + 1) && STA_STACK(i + 2) && STA_A(i + 3) && LDA_STACK(i + 4)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_IM(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_STACK(i + 3)) if (argMatch(i + 1,i + 3) && (argMatch(i + 1,i + 2) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i + 6) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDY_VAL(i + 3) && LDA_STACK(i + 4) && STA_A(i + 5) && STA_A(i + 7)) if (argMatch(i + 2,i + 4) && argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_STACK(i + 5) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3) && STA_A(i + 4)) if ((argMatch(i,i + 4) === false) && argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i + 7) && LDA_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && AND_ORA_EOR_STACK(i + 5) && STA_VAL(i + 6) && AND_ORA_EOR_STACK(i + 8) && STA_VAL(i + 9)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 8) && (argMatch(i,i + 4) === false) && (argMatch(i,i + 7) === false) && (argMatch(i + 2,i + 4) === false) && (argMatch(i + 2,i + 7) === false)) {
            rtl.rcArrW(listing,i + 5,pas.System.Copy(rtl.rcArrR(listing,i + 5),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,pas.System.Copy(rtl.rcArrR(listing,i + 8),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_VAL(i + 7) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && AND_ORA_EOR_STACK(i + 5) && STA_VAL(i + 6) && AND_ORA_EOR_STACK(i + 8) && STA_VAL(i + 9)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 8)) {
            rtl.rcArrW(listing,i + 5,pas.System.Copy(rtl.rcArrR(listing,i + 5),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,pas.System.Copy(rtl.rcArrR(listing,i + 8),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_STACK(i + 6) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && AND_ORA_EOR(i + 3) && (AND_ORA_EOR_STACK(i + 3) === false) && STA_STACK(i + 4) && LDA_VAL(i + 5)) if ((argMatch(i + 1,i + 2) === false) && (argMatch(i + 1,i + 4) === false) && argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && AND_ORA_EOR_STACK(i + 3) && STA_A(i + 4)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 3),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && AND_ORA_EOR(i + 3) && (IY(i + 3) === false) && AND_ORA_EOR_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 4),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && IY(i) && AND_ORA_EOR(i + 1) && STA_A(i + 2)) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 1,pas.System.Copy(rtl.rcArrR(listing,i + 1),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            return false;
          };
          if (LDY_VAL(i + 5) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDA_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_BP2_Y(i) && INY(i + 1) && LDA_BP2_Y(i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_BP2_Y(i) && LDA_A(i + 1)) {
            rtl.rcArrW(listing,i,"");
            if ((i > 0) && INY(i - 1)) rtl.rcArrW(listing,i - 1,"");
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && MWY_BP2(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && (LDA_A(i + 1) || MVA(i + 1) || MWA(i + 1))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_A(i) && IY(i) && LDA_A(i + 1) && (IY(i + 1) === false)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_A(i) && IY(i) && LDA_A(i + 1) && IY(i + 1)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && STA_STACK(i + 2)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2)) if (argMatch(i,i + 1) && argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && (ADD_IM_0(i + 3) === false)) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 2,"");
            if ((ASL(i + 3) === false) && (LSR(i + 3) === false)) rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && (ADD_IM_0(i + 2) === false) && (CMP(i + 2) === false)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            if ((ASL(i + 2) === false) && (LSR(i + 2) === false) && (SKIP(i + 2) === false)) rtl.rcArrW(listing,i,"");
            return false;
          };
          if (AND_ORA_EOR(i) && (LDA_A(i + 1) || MVA(i + 1) || MWA(i + 1))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_A(i) && (SKIP(i + 1) === false) && (TAY(i + 1) === false) && (STA(i + 1) === false) && MWA(i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tlsr #$00") && (rtl.rcArrR(listing,i + 1) === "\tror @")) {
            rtl.rcArrW(listing,i,"\tlsr @");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tlsr #$00") && ROR_STACK(i + 1)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if (BNE(i) && BNE(i + 1)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && STA_BP2_Y(i + 1) && INY(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && STA_BP2_Y(i + 4)) if (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) {
            rtl.rcArrW(listing,i + 3,"");
            if (INY(i + 5) && LDA(i + 6) && STA_BP2_Y(i + 7)) if (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 6)) {
              rtl.rcArrW(listing,i + 6,"");
              if (INY(i + 8) && LDA(i + 9) && STA_BP2_Y(i + 10)) if (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) rtl.rcArrW(listing,i + 9,"");
            };
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tlsr #$00") && (rtl.rcArrR(listing,i + 1) === "\tror #$00") && ROR_STACK(i + 2) && ROR_STACK(i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 3,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            return false;
          };
          if (TYA(i) && LDA(i + 1) && STA(i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (TYA(i) && LDA(i + 1) && AND_ORA_EOR(i + 2) && STA(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDY(i + 4) && LDA_IM(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && MWY_BP2(i + 3) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && LDY_STACK(i + 2) && (SKIP(i + 3) === false)) if (argMatch(i,i + 2) && (argMatch(i,i + 1) === false)) {
            rtl.rcArrW(listing,i,"\ttay");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDY(i + 1) && LDA_STACK(i + 2) && STA(i + 3) && IY(i + 3)) if (argMatch(i,i + 2) && (argMatch(i,i + 1) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA(i) && LDY(i + 1)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i,"\ttay");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA(i) && MWY_BP2(i + 1) && LDY(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"\ttay");
            return false;
          };
          if ((LDA_A(i) || ADC_SBC(i)) && (IY(i) === false) && LDY(i + 1) && (LDA_A(i + 2) || MVA(i + 2) || MWA(i + 2))) {
            if ((i > 0) && ADC_SBC(i) && LDA_A(i - 1)) rtl.rcArrW(listing,i - 1,"");
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDY_IM_0(i) && INY(i + 1)) {
            rtl.rcArrW(listing,i,"\tldy #$01");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i + 8) && STA_STACK(i) && (IY(i + 1) === false) && (IY(i + 3) === false) && LDA_A(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && STA_STACK(i + 4) && LDY_STACK(i + 5) && LDA_STACK(i + 6) && STA_A(i + 7) && STA_A(i + 9)) if (argMatch(i,i + 5) && argMatch(i + 2,i + 6) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i,"\ttay");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_STACK(i + 16) && LDY_VAL(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) && LDA_A(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && STA_STACK(i + 8) && LDY(i + 9) && LDA_STACK(i + 10) && STA_A(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && STA_A(i + 17)) if (argMatch(i + 2,i + 10) && argMatch(i + 4,i + 12) && argMatch(i + 6,i + 14) && argMatch(i + 8,i + 16)) {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (LDA_STACK(i + 15) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDY_STACK(i + 8) && LDA_STACK(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 12) && LDA_STACK(i + 13) && STA_A(i + 14) && STA_A(i + 16)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 11) && argMatch(i + 5,i + 13) && argMatch(i + 7,i + 15)) {
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_STACK(i + 18) && LDA_A(i) && (ADD_SUB(i + 1) || AND_ORA_EOR(i + 1)) && STA_STACK(i + 2) && LDA_A(i + 3) && (ADC_SBC(i + 4) || AND_ORA_EOR(i + 4)) && STA_STACK(i + 5) && LDA_A(i + 6) && (ADC_SBC(i + 7) || AND_ORA_EOR(i + 7)) && STA_STACK(i + 8) && LDA_A(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && STA_A(i + 19)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 14) && argMatch(i + 8,i + 16) && argMatch(i + 11,i + 18)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            return false;
          };
          if (STA_STACK(i + 15) && LDA_A(i) && STA_A(i + 1) && LDA_A(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14)) {
            if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 10) && argMatch(i + 5,i + 12) && argMatch(i + 7,i + 14)) {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              return false;
            };
            if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 10) && (argMatch(i + 5,i + 12) === false) && (argMatch(i + 7,i + 14) === false)) {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
          };
          if (STA_STACK(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3)) if ((argMatch(i + 1,i + 3) === false) && argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_A(i) === false) && STA_VAL(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_A(i + 4) && STA_VAL(i + 5) && LDA_A(i + 6) && STA_VAL(i + 7)) if (argMatch(i + 1,i + 4) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_STACK(i + 5) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && (LDA_A(i + 6) || (LDY(i + 6) && LDA_A(i + 7)))) if (argMatch(i + 1,i + 4) && (argMatch(i + 1,i + 3) === false) && (argMatch(i + 3,i + 5) === false)) {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = rtl.rcArrR(listing,i + 1);
            listing_tmp[2] = rtl.rcArrR(listing,i + 4);
            listing_tmp[3] = rtl.rcArrR(listing,i + 5);
            listing_tmp[4] = rtl.rcArrR(listing,i + 2);
            listing_tmp[5] = rtl.rcArrR(listing,i + 3);
            rtl.rcArrW(listing,i,listing_tmp[0]);
            rtl.rcArrW(listing,i + 1,listing_tmp[1]);
            rtl.rcArrW(listing,i + 2,listing_tmp[2]);
            rtl.rcArrW(listing,i + 3,listing_tmp[3]);
            rtl.rcArrW(listing,i + 4,listing_tmp[4]);
            rtl.rcArrW(listing,i + 5,listing_tmp[5]);
            return false;
          };
          if (LDA_STACK(i + 6) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && STA_VAL(i + 7)) if ((argMatch(i,i + 2) === false) && (argMatch(i + 1,i + 3) === false) && argMatch(i + 1,i + 4) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_VAL(i + 3) && STA_VAL(i + 5)) if ((argMatch(i,i + 3) === false) && argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && (ADD_SUB(i + 5) || AND_ORA_EOR(i + 5))) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i + 7) && STA_VAL(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6)) if (argMatch(i + 1,i + 4) && argMatch(i + 2,i + 7) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (STA_STACK(i + 5) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4)) if (argMatch(i + 1,i + 4) && argMatch(i + 3,i + 5)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_VAL(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 6)) if (argMatch(i + 2,i + 5)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            return false;
          };
          if (STA_STACK(i + 3) && LDA_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tsta @PARAM?") && INY(i + 1) && LDA(i + 2) && STA(i + 3)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i + 7) === "\tsta @PARAM?") && ADD_SUB(i) && STA_BP2(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_BP2_1(i + 4) && LDY_IM_0(i + 5) && LDA_BP2_Y(i + 6)) {
            rtl.rcArrW(listing,i + 1,"\ttay");
            rtl.rcArrW(listing,i + 4,"\tsta :bp+1");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"\tlda (:bp),y");
            return false;
          };
          if (INY(i) && LDA_A(i + 1) && INY(i + 2) && LDA_A(i + 3) && LDA_A(i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_EAX_1(i + 6) && LDA_VAL(i) && STA_EAX(i + 1) && LDA_VAL(i + 2) && STA_EAX_1(i + 3) && LDA_EAX(i + 4) && STA_STACK(i + 5) && STA_STACK(i + 7)) if (argMatch(i + 5,i + 7) === false) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          return Result;
        };
        function opt_TAY(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          Result = true;
          if (LDA_A(i) && (IY(i) === false) && TAY(i + 1) && LDA_A(i + 2)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tsub #$01") && TAY(i + 2) && (SBC(i + 4) === false)) {
            if (LDA_IM(i)) {
              p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex((p - 1) & 0xff,2));
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
            } else {
              rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 1,"\tdey");
              rtl.rcArrW(listing,i + 2,"");
            };
            return false;
          };
          if (TYA(i) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && TAY(i + 2) && (SKIP(i + 3) === false)) {
            rtl.rcArrW(listing,i,"\tiny");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (TYA(i) && (rtl.rcArrR(listing,i + 1) === "\tsub #$01") && TAY(i + 2) && (SKIP(i + 3) === false)) {
            rtl.rcArrW(listing,i,"\tdey");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && TAY(i + 2) && LDA(i + 3) && ADD(i + 4)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\tiny");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ADD_IM_0(i) && TAY(i + 1) && (ADC(i + 3) === false)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (SUB_IM_0(i) && TAY(i + 1) && (SBC(i + 3) === false)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA(i) && (IY(i) === false) && TAY(i + 1)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 2) && STA_STACK(i) && ASL_A(i + 1) && LDA_VAL(i + 3) && STA_STACK(i + 4)) if (argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (TAY(i + 3) && STA_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && LDA_VAL(i + 4) && STA_STACK(i + 5)) if (argMatch(i,i + 5)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (TAY(i + 4) && LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_VAL(i + 3) && LDA_VAL(i + 5) && (AND_ORA_EOR_STACK(i + 6) || ADD_SUB_STACK(i + 6))) if (argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 4) && LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && LDA_VAL(i + 5) && ADC_SBC_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 4) && LDA_STACK(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && LDA_VAL(i + 5) && ADC_SBC_STACK(i + 6)) if ((argMatch(i,i + 3) === false) && argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 4) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_A(i + 3) && LDA_VAL(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_A(i + 8)) if (argMatch(i + 1,i + 7)) {
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 5) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ASL_A(i + 4) && LDA_STACK(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && STA_A(i + 9)) if (argMatch(i + 2,i + 6) && argMatch(i + 1,i + 8)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (TAY(i + 6) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && ASL_A(i + 5) && LDA_STACK(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 10)) if (argMatch(i + 1,i + 7) && argMatch(i + 3,i + 9)) {
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (TAY(i + 6) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && ASL_A(i + 5)) if ((argMatch(i + 1,i + 3) === false) && argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 8) && LDA_A(i) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && ADC_SBC(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && ASL_A(i + 7) && LDA_STACK(i + 9) && STA_VAL(i + 10) && LDA_STACK(i + 11) && STA_VAL(i + 12)) if (argMatch(i + 2,i + 9) && argMatch(i + 5,i + 11)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 6);
            listing_tmp[1] = rtl.rcArrR(listing,i + 7);
            listing_tmp[2] = rtl.rcArrR(listing,i + 8);
            listing_tmp[3] = rtl.rcArrR(listing,i);
            listing_tmp[4] = rtl.rcArrR(listing,i + 1);
            listing_tmp[5] = rtl.rcArrR(listing,i + 10);
            listing_tmp[6] = rtl.rcArrR(listing,i + 3);
            listing_tmp[7] = rtl.rcArrR(listing,i + 4);
            listing_tmp[8] = rtl.rcArrR(listing,i + 12);
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            for (p = 0; p <= 8; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            return false;
          };
          if (TAY(i + 11) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && LDA_A(i + 8) && ASL_A(i + 9) && ASL_A(i + 10) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19)) if (argMatch(i + 1,i + 12) && argMatch(i + 3,i + 14) && argMatch(i + 5,i + 16) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 16,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 18,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (TAY(i + 7) && LDA_A(i) && (IY(i) === false) && (EAX(i) === false) && STA_STACK(i + 1) && STA_STACK(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ASL_A(i + 5) && ASL_A(i + 6) && LDA_A(i + 8) && AND_ORA_EOR_STACK(i + 9) && STA_A(i + 10)) if (argMatch(i + 1,i + 9)) {
            rtl.rcArrW(listing,i + 9,pas.System.Copy(rtl.rcArrR(listing,i + 9),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            return false;
          };
          if (LDA(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 6)) && TAY(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 7)) && LDA_A(i + 3) && STA_A(i + 4)) {
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 6)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 7)) && ASL_A(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 8)) && TAY(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 9)) && LDA_A(i + 4) && STA_A(i + 5)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && ADD_IM(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 6)) && ASL_A(i + 2) && ASL_A(i + 3) && STA_STACK(i + 4) && ASL_A(i + 7) && ASL_A(i + 8)) {
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (TAY(i + 5) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && ASL_A(i + 1) && STA_STACK(i + 2) && ASL_A(i + 4)) {
            rtl.rcArrW(listing,i + 3,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"\ttay");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (TAY(i + 8) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && ASL_A(i + 1) && ASL_A(i + 2) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDA_A(i + 5) && ASL_A(i + 6) && ASL_A(i + 7)) {
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (TAY(i + 7) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 4)) && ASL_A(i + 1) && ASL_A(i + 2) && STA_STACK(i + 3) && ASL_A(i + 5) && ASL_A(i + 6)) {
            rtl.rcArrW(listing,i + 4,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 3,"\ttay");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (TAY(i + 9) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && STA_STACK(i + 4) && ASL_A(i + 6) && ASL_A(i + 7) && ASL_A(i + 8)) {
            rtl.rcArrW(listing,i + 5,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 4,"\ttay");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 8)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 9)) && ASL_A(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 10)) && TAY(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 11)) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7)) {
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 8)) && TAY(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 9)) && LDA_A(i + 3) && STA_A(i + 4) && LDA_A(i + 5) && STA_A(i + 6)) {
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 10)) && TAY(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 11)) && LDA_A(i + 3) && (ADD_SUB(i + 4) || AND_ORA_EOR(i + 4)) && STA_A(i + 5) && LDA_A(i + 6) && (ADC_SBC(i + 7) || AND_ORA_EOR(i + 7)) && STA_A(i + 8)) {
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (TAY(i + 13) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 10)) && ASL_A(i + 4) && ADD_SUB(i + 5) && (rtl.rcArrR(listing,i + 5) === rtl.rcArrR(listing,i + 12)) && STA_STACK(i + 6) && ASL_A(i + 8) && ASL_A(i + 9) && ASL_A(i + 11)) {
            rtl.rcArrW(listing,i + 7,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 6,"\ttay");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (TAY(i + 11) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && LDA_ADR(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 8)) && ASL_A(i + 2) && ASL_A(i + 3) && TAY(i + 4) && LDA_ADR(i + 5) && STA_A(i + 6) && ASL_A(i + 9) && ASL_A(i + 10)) if ((argMatch(i + 6,i + 7) === false) && (argMatch(i + 6,i + 8) === false)) {
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 12)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 13)) && ASL_A(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 14)) && TAY(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 15)) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && STA_A(i + 11)) {
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 14)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 15)) && ASL_A(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 16)) && TAY(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 17)) && LDA_A(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && STA_A(i + 11) && LDA_A(i + 12) && STA_A(i + 13)) {
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 16)) && ASL_A(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 17)) && ASL_A(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 18)) && TAY(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 19)) && LDA_A(i + 4) && (ADD_SUB(i + 5) || AND_ORA_EOR(i + 5)) && STA_A(i + 6) && LDA_A(i + 7) && (ADC_SBC(i + 8) || AND_ORA_EOR(i + 8)) && STA_A(i + 9) && LDA_A(i + 10) && (ADC_SBC(i + 11) || AND_ORA_EOR(i + 11)) && STA_A(i + 12) && LDA_A(i + 13) && (ADC_SBC(i + 14) || AND_ORA_EOR(i + 14)) && STA_A(i + 15)) {
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            return false;
          };
          if (TAY(i + 16) && LDA_VAL(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 13)) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && TAY(i + 4) && LDA_A(i + 5) && STA_A(i + 6) && LDA_A(i + 7) && STA_A(i + 8) && LDA_A(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && STA_A(i + 12) && ASL_A(i + 14) && ASL_A(i + 15)) {
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            return false;
          };
          if ((LDA_ADR(i + 2) || STA_ADR(i + 3)) && ROL_STACK(i) && TAY(i + 1)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 3) || STA_ADR(i + 4)) && ROL_STACK(i) && ASL_A(i + 1) && TAY(i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && TAY(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && TAY(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_A(i) && LDA_A(i + 1) && ASL_A(i + 2) && TAY(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 4) || STA_ADR(i + 5)) && ROL_STACK(i) && ADD_SUB_VAL(i + 1) && ADD_SUB_VAL(i + 2) && TAY(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ROL_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && TAY(i + 4)) if (argMatch(i + 1,i + 3) === false) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ASL_STACK(i) && ROL_STACK(i + 1) && LDA_STACK(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 5) || STA_ADR(i + 6)) && ASL_STACK(i) && ROL_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB_STACK(i + 3) && TAY(i + 4)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ASL_STACK(i) && ROL_A(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) if (argMatch(i,i + 3) && (argMatch(i + 2,i + 3) === false)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) if (argMatch(i + 1,i + 2) === false) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ROL_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && AND_ORA_EOR_VAL(i + 3) && ADD_SUB_STACK(i + 4) && TAY(i + 5)) if (argMatch(i + 1,i + 4) === false) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && ADD_SUB_VAL(i + 4) && TAY(i + 5)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && TAY(i + 6)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && ADD_SUB_VAL(i + 5) && TAY(i + 6)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && TAY(i + 6)) if (argMatch(i + 1,i + 3) === false) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 7) || STA_ADR(i + 8)) && ROL_STACK(i) && ADD_SUB_VAL(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && AND_ORA_EOR_VAL(i + 4) && ADD_SUB_STACK(i + 5) && TAY(i + 6)) if (argMatch(i + 2,i + 5)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ASL_A(i + 4) && ADD_SUB_VAL(i + 5) && ADD_SUB_VAL(i + 6) && TAY(i + 7)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD_SUB_VAL(i + 6) && TAY(i + 7)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && (ADD_SUB_STACK(i + 4) || AND_ORA_EOR(i + 4)) && ASL_A(i + 5) && ADD_SUB_VAL(i + 6) && TAY(i + 7)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 4),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            return false;
          };
          if ((LDA_ADR(i + 8) || STA_ADR(i + 9)) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && AND_ORA_EOR_VAL(i + 5) && ADD_SUB_STACK(i + 6) && TAY(i + 7)) if (argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_STACK(i + 2) && ASL_A(i + 3) && STA_STACK(i + 4) && LDA_VAL(i + 5) && AND_ORA_EOR(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if ((argMatch(i + 1,i + 2) === false) && argMatch(i + 2,i + 4) && argMatch(i + 4,i + 7)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_VAL(i + 5) && AND_ORA_EOR_VAL(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if (argMatch(i + 1,i + 7)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ROL_STACK(i) && ASL_A(i + 1) && ASL_A(i + 2) && ADD_SUB_VAL(i + 3) && STA_STACK(i + 4) && LDA_VAL(i + 5) && AND_ORA_EOR_VAL(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if (argMatch(i + 4,i + 7)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && ASL_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB_VAL(i + 7) && TAY(i + 8)) if (argMatch(i + 1,i + 5) && argMatch(i + 5,i + 6)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDA_ADR(i + 9) || STA_ADR(i + 10)) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && ASL_STACK(i + 5) && LDA_VAL(i + 6) && ADD_SUB_STACK(i + 7) && TAY(i + 8)) if (argMatch(i + 1,i + 5) && argMatch(i + 5,i + 7)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDA_ADR(i + 10) || STA_ADR(i + 11)) && ASL_A(i) && ROL_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_STACK(i + 3) && ASL_A(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && AND_ORA_EOR(i + 7) && ADD_SUB_STACK(i + 8) && TAY(i + 9)) if ((argMatch(i + 1,i + 3) === false) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 8)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          return Result;
        };
        function opt_LDY(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var tmp = "";
          Result = true;
          if (INY(i) && LDA_IM_0(i + 1) && ASL_STACK(i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (INY(i) && (LSR_STACK(i + 1) || ASL_STACK(i + 1))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (TAY(i) && TYA(i + 1)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((INY(i) || DEY(i)) && (LDY(i + 1) || MWY(i + 1) || MVY(i + 1) || TAY(i + 1))) {
            rtl.rcArrW(listing,i,"");
            pas.Common.optyY = "";
            return false;
          };
          if (LDY(i) && STY(i + 1) && (STY_BP_1(i + 1) === false)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            k = rtl.rc(i + 1,-2147483648,2147483647);
            while (STY(k)) {
              rtl.rcArrW(listing,k,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,k),6,256));
              k += 1;
            };
            pas.Common.optyY = "";
            return false;
          };
          if (LDY_IM(i) && (DATA(i) === false) && INY(i + 1)) {
            p = rtl.rc(GetBYTE(i) + 1,-2147483648,2147483647);
            if (p < 256) {
              rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(p,2));
              rtl.rcArrW(listing,i + 1,"");
              return false;
            };
          };
          if (LDY_IM(i) && DATA(i) && INY(i + 1)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i) + "+1");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (INY(i) && LDA_A(i + 1) && (IY(i + 1) === false) && STA_A(i + 2) && (IY(i + 2) === false) && (LDY(i + 3) || MWY(i + 3) || MVY(i + 3) || TAY(i + 3))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (INY(i) && LDA_A(i + 1) && (IY(i + 1) === false) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && (IY(i + 2) === false) && TAY(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (INY(i) && STA_A(i + 1) && (IY(i + 1) === false) && (LDY(i + 2) || MWY(i + 2) || MVY(i + 2))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_VAL(i) && (LDA_IM(i) === false) && ADD_SUB(i + 1) && STA_VAL(i + 2) && LDY(i + 3)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\ttya");
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && STA(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA(i + 3) && LDY(i + 4) && LDA(i + 5) && STA_A(i + 6) && LDA(i + 7) && STA_A(i + 8)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 7)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (TAY(i) && STY(i + 1) && LDY(i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if (STA(i) && STA(i + 1) && LDY(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"\ttay");
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && LDY(i + 1) && CMP(i + 2)) {
            tmp = rtl.rcArrR(listing,i);
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,tmp);
            return false;
          };
          if (STY_STACK(i) && TYA(i + 1) && STA_STACK(i + 2) && LDA(i + 3)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDY_STACK(i + 3) && STY_STACK(i) && LDA_A(i + 1) && ADD_SUB(i + 2) && (SKIP(i + 4) === false)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY_STACK(i + 4) && STA_STACK(i) && TAY(i + 1) && LDA_VAL(i + 2) && ADD_SUB_VAL(i + 3) && STA_VAL(i + 5)) if (argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDY_STACK(i + 5) && LDA(i) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && STA_STACK(i + 2) && LDY(i + 3) && LDA_A(i + 4)) if (argMatch(i,i + 3) && argMatch(i + 2,i + 5)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"\tiny");
            return false;
          };
          if (LDY_STACK(i + 2) && STA_STACK(i) && (LDA_A(i + 1) || AND_ORA_EOR(i + 1)) && (IY(i + 1) === false) && STA_A(i + 3)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\ttay");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDY_STACK(i + 3) && STA_STACK(i) && LDA_A(i + 1) && (IY(i + 1) === false) && AND_ORA_EOR(i + 2) && (IY(i + 2) === false) && STA_A(i + 4)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"\ttay");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY_STACK(i + 4) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY(i + 2) && LDA_A(i + 3)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && INY(i + 1) && (LDA_A(i + 2) || STA_A(i + 2))) {
            rtl.rcArrW(listing,i + 3,"\tdey");
            return false;
          };
          if (TAY(i + 10) && LDA_VAL(i) && STA_STACK(i + 1) && ASL_A(i + 2) && TAY(i + 3) && LDA_VAL(i + 4) && STA_A(i + 5) && LDA_VAL(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && ASL_A(i + 9)) if (argMatch(i + 1,i + 8)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDY_IM(i + 5) && (DATA(i + 5) === false) && LDA_BP2(i) && ADD_IM(i + 1) && DATA(i + 1) && STA_BP2(i + 2) && SCC(i + 3) && INC_BP2_1(i + 4)) {
            if (LDY_IM_0(i + 5)) {
              rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
             else rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + "+" + pas.System.Copy(rtl.rcArrR(listing,i + 5),7,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDY_IM(i + 12) && LDA_BP2(i) && ADD_IM(i + 1) && DATA(i + 1) && STA_BP2(i + 2) && LDA_BP2_1(i + 3) && ADC_IM_0(i + 4) && STA_BP2_1(i + 5) && LDA_BP2(i + 6) && ADD_IM(i + 7) && STA_BP2(i + 8) && LDA_BP2_1(i + 9) && ADC_IM_0(i + 10) && STA_BP2_1(i + 11)) {
            if (LDY_IM_0(i + 5)) {
              rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
             else rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + "+" + pas.System.Copy(rtl.rcArrR(listing,i + 7),7,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && STA_ADR(i + 2)) {
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 5)) && LDA_ADR(i + 1) && STA_ADR(i + 2) && LDA_ADR(i + 3) && STA_ADR(i + 4)) {
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 2)) && LDA_ADR(i + 1) && STA_ADR(i + 3)) {
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && ADD_SUB(i + 2) && STA_ADR(i + 4)) {
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 4) && ADD_SUB_STACK(i + 5)) if (argMatch(i + 2,i + 5)) {
            if (ADD_STACK(i + 5)) {
              rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
             else rtl.rcArrW(listing,i + 5,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY(i) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADD_SUB_STACK(i + 4) && STA_STACK(i + 5)) if ((argMatch(i + 2,i + 3) === false) && argMatch(i + 2,i + 4) && argMatch(i + 3,i + 5)) {
            if (ADD_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDY_VAL(i) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDY_VAL(i + 3) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB_STACK(i + 7)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 7)) {
            if (ADD_STACK(i + 7)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            if (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && (LDY(i + 2) || INY(i + 2)) && LDA_ADR(i + 3) && (AND_ORA_EOR_STACK(i + 4) || ADD_SUB_STACK(i + 4))) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 4),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && (LDY(i + 3) || INY(i + 3)) && LDA_ADR(i + 4) && (AND_ORA_EOR_STACK(i + 5) || ADD_SUB_STACK(i + 5))) if (argMatch(i + 2,i + 5)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 5),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && (LDY(i + 3) || INY(i + 3)) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && (AND_ORA_EOR(i + 7) || ADD_SUB_STACK(i + 7))) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 7)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 7),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_A(i + 7) && LDA_STACK(i + 8) && (ADC_SBC(i + 9) || AND_ORA_EOR(i + 9))) if (argMatch(i + 2,i + 5) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && (ADD_SUB_STACK(i + 6) || AND_ORA_EOR_STACK(i + 6)) && STA_A(i + 7) && LDA_A(i + 8) && (ADC_SBC_STACK(i + 9) || AND_ORA_EOR_STACK(i + 9))) if (argMatch(i + 2,i + 6) && argMatch(i + 4,i + 9)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 9,pas.System.Copy(rtl.rcArrR(listing,i + 9),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDY(i) || TAY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD_SUB_STACK(i + 6) && STA(i + 7) && (ADC_SBC_STACK(i + 9) === false)) if (argMatch(i + 2,i + 5) && argMatch(i + 4,i + 6)) {
            rtl.rcArrW(listing,i + 5,pas.System.Copy(rtl.rcArrR(listing,i + 5),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDY_STACK(i + 5) && STY_STACK(i) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 6) && STA_ADR(i + 7) && LDA_STACK(i + 8) && STA_ADR(i + 9)) if (argMatch(i,i + 5) && argMatch(i + 2,i + 6) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ROL_A(i + 10) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && ASL_STACK(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12)) if ((argMatch(i + 2,i + 5) === false) && argMatch(i + 2,i + 12) && argMatch(i + 5,i + 7)) {
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ROL_A(i + 10) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && ASL_STACK(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_STACK(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15)) if ((argMatch(i + 2,i + 5) === false) && argMatch(i + 2,i + 15) && argMatch(i + 5,i + 7) && argMatch(i + 7,i + 13)) {
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STY_STACK(i) && LDA_ADR(i + 1) && LDY_STACK(i + 2) && STA_ADR(i + 3)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((LDY(i) || STY(i)) && LDY(i + 9) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 10) && ADD_SUB_STACK(i + 11) && STA_A(i + 12) && LDA_A(i + 13) && ADC_SBC_STACK(i + 14) && STA_A(i + 15) && LDA_A(i + 16) && ADC_SBC_STACK(i + 17) && STA_A(i + 18) && LDA_A(i + 19) && ADC_SBC_STACK(i + 20) && STA_A(i + 21)) if (argMatch(i,i + 9) && argMatch(i + 2,i + 11) && argMatch(i + 4,i + 14) && argMatch(i + 6,i + 17) && argMatch(i + 8,i + 20)) {
            rtl.rcArrW(listing,i + 11,pas.System.Copy(rtl.rcArrR(listing,i + 11),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 14,pas.System.Copy(rtl.rcArrR(listing,i + 14),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 17,pas.System.Copy(rtl.rcArrR(listing,i + 17),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 20,pas.System.Copy(rtl.rcArrR(listing,i + 20),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if ((LDY(i) || STY(i)) && LDY(i + 5) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 6) && STA_ADR(i + 7) && LDA_STACK(i + 8) && STA_ADR(i + 9)) if (argMatch(i,i + 5) && argMatch(i + 2,i + 6) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((LDY(i) || STY(i)) && LDY(i + 5) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 6) && ADD_SUB(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11)) if (argMatch(i,i + 5) && argMatch(i + 2,i + 6) && argMatch(i + 4,i + 9)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDY(i) || STY(i)) && LDY(i + 7) && LDA_A(i + 1) && ADD_SUB_VAL(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADC_SBC_VAL(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 8) && STA_ADR(i + 9) && LDA_STACK(i + 10) && STA_ADR(i + 11)) if (argMatch(i,i + 7) && argMatch(i + 3,i + 8) && argMatch(i + 6,i + 10)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDY(i + 6) && LDA_A(i) && (IY(i) === false) && ADD_SUB_VAL(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (IY(i + 3) === false) && ADC_SBC_VAL(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_STACK(i + 7) && STA_ADR(i + 8) && LDA_STACK(i + 9) && STA_ADR(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 9)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 6);
            listing_tmp[1] = rtl.rcArrR(listing,i);
            listing_tmp[2] = rtl.rcArrR(listing,i + 1);
            listing_tmp[3] = rtl.rcArrR(listing,i + 8);
            listing_tmp[4] = rtl.rcArrR(listing,i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 4);
            listing_tmp[6] = rtl.rcArrR(listing,i + 10);
            rtl.rcArrW(listing,i,listing_tmp[0]);
            rtl.rcArrW(listing,i + 1,listing_tmp[1]);
            rtl.rcArrW(listing,i + 2,listing_tmp[2]);
            rtl.rcArrW(listing,i + 3,listing_tmp[3]);
            rtl.rcArrW(listing,i + 4,listing_tmp[4]);
            rtl.rcArrW(listing,i + 5,listing_tmp[5]);
            rtl.rcArrW(listing,i + 6,listing_tmp[6]);
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (TAY(i + 5) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 3)) && LDA_ADR(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 4)) && STA_STACK(i + 2)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          return Result;
        };
        function opt_AND(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          Result = true;
          if (AND_STACK(i + 18) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && AND_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && AND_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && AND_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 9,"\tand " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 12,"\tand " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 15,"\tand " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 18,"\tand " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_IM_0(i) && AND_(i + 1) && STA_A(i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && AND_IM_0(i + 1) && STA_A(i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda #$00");
            return false;
          };
          if (LDA_STACK(i) && AND_IM_0(i + 1) && STA_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda #$00");
            return false;
          };
          if (AND_IM_0(i) && MWY(i + 1) && LDY(i + 2) && LDA_A(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tand #$FF") && STA_A(i + 2)) {
            if (argMatch(i,i + 2)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
            };
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (AND_ORA_EOR(i) && (rtl.rcArrR(listing,i + 1) === "\tand #$FF") && STA_A(i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && AND_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tand " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_BP2_Y(i + 1) && AND_IM(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_BP2_Y(i + 5) && AND_IM(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && AND_IM(i + 10) && STA_STACK(i + 11) && INY(i + 12) && LDA_BP2_Y(i + 13) && AND_IM(i + 14) && STA_STACK(i + 15) && LDA_A(i + 16) && EOR_STACK(i + 17) && STA_A(i + 18) && LDA_A(i + 19) && EOR_STACK(i + 20) && STA_A(i + 21) && LDA_A(i + 22) && EOR_STACK(i + 23) && STA_A(i + 24) && LDA_A(i + 25) && EOR_STACK(i + 26) && STA_A(i + 27)) if (argMatch(i + 3,i + 17) && argMatch(i + 7,i + 20) && argMatch(i + 11,i + 23) && argMatch(i + 15,i + 26)) {
            for (p = 0; p <= 3; p++) if (rtl.rcArrR(listing,(p * 4) + i + 2) === "\tand #$00") {
              rtl.rcArrW(listing,(p * 4) + i + 1,"");
              rtl.rcArrW(listing,(p * 4) + i + 2,"");
              rtl.rcArrW(listing,(p * 4) + i + 3,"");
              rtl.rcArrW(listing,(p * 3) + i + 17,"");
            } else if (rtl.rcArrR(listing,(p * 4) + i + 2) === "\tand #$FF") {
              rtl.rcArrW(listing,(p * 4) + i + 1,rtl.rcArrR(listing,(p * 3) + i + 16));
              rtl.rcArrW(listing,(p * 4) + i + 2,"\teor (:bp2),y");
              rtl.rcArrW(listing,(p * 4) + i + 3,rtl.rcArrR(listing,(p * 3) + i + 18));
              rtl.rcArrW(listing,(p * 3) + i + 16,"");
              rtl.rcArrW(listing,(p * 3) + i + 17,"");
              rtl.rcArrW(listing,(p * 3) + i + 18,"");
            };
            if (rtl.rcArrR(listing,i + 13) === "") {
              rtl.rcArrW(listing,i + 12,"");
              if (rtl.rcArrR(listing,i + 9) === "") {
                rtl.rcArrW(listing,i + 8,"");
                if (rtl.rcArrR(listing,i + 5) === "") {
                  rtl.rcArrW(listing,i + 4,"");
                };
              };
            };
            return false;
          };
          if (LDA_BP2_Y(i) && AND_IM_0(i + 1) && STA_A(i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda #$00");
            return false;
          };
          return Result;
        };
        function opt_ORA(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = true;
          if (LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7)) {
            if (LDA_A(i + 8) && ORA_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && ORA_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && ORA_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && ORA_STACK(i + 18) && STA_A(i + 19)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 7,i + 18)) {
              rtl.rcArrW(listing,i + 9,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 12,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 15,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 18,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              return false;
            };
            if (LDA_STACK(i + 8) && AND_ORA_EOR(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && AND_ORA_EOR(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && AND_ORA_EOR(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && AND_ORA_EOR(i + 18) && STA_A(i + 19)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11) && argMatch(i + 5,i + 14) && argMatch(i + 7,i + 17)) {
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              return false;
            };
          };
          if (LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && AND_ORA_EOR(i + 10) && STA_A(i + 11) && LDA_STACK(i + 12) && AND_ORA_EOR(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && AND_ORA_EOR(i + 16) && STA_A(i + 17)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15)) {
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_A(i) && ORA_IM_0(i + 1) && STA_A(i + 2)) {
            if (argMatch(i,i + 2)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
            };
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_A(i) && ORA_IM_0(i + 1) && AND_ORA_EOR(i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (AND_ORA_EOR(i) && ORA_IM_0(i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_IM_0(i) && ORA(i + 1) && STA_A(i + 2)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_A(i) && (rtl.rcArrR(listing,i + 1) === "\tora #$FF") && STA_A(i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda #$FF");
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ORA_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_A(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && AND_ORA_EOR(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && ORA(i + 7)) if (argMatch(i + 1,i + 3) && argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && AND_ORA_EOR_VAL(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_STACK(i + 8)) if (argMatch(i + 1,i + 7) && argMatch(i + 3,i + 8) && (argMatch(i + 1,i + 4) === false) && argMatch(i + 4,i + 6)) {
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ORA_STACK(i + 7) && STA(i + 8) && LDA(i + 9) && ORA_STACK(i + 10) && STA(i + 11)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 2,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 5,"\tora " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDY(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ORA_STACK(i + 7) && STA(i + 8) && LDA(i + 9) && ORA_STACK(i + 10) && STA(i + 11)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10) && (argMatch(i + 2,i + 6) === false) && (argMatch(i + 5,i + 9) === false)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 2,"\tora (:bp2),y");
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 4,"\tiny");
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 6,"\tora (:bp2),y");
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ORA(i + 7) && (ORA_STACK(i + 7) === false) && STA(i + 8) && LDA_STACK(i + 9) && ORA(i + 10) && (ORA_STACK(i + 10) === false) && STA(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          return Result;
        };
        function opt_EOR(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          Result = true;
          if (AND_ORA_EOR(i + 22) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && AND_ORA_EOR(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && AND_ORA_EOR(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && AND_ORA_EOR(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = rtl.rcArrR(listing,i + 1);
            listing_tmp[2] = rtl.rcArrR(listing,i + 13);
            listing_tmp[3] = rtl.rcArrR(listing,i + 14);
            listing_tmp[4] = rtl.rcArrR(listing,i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 4);
            listing_tmp[6] = rtl.rcArrR(listing,i + 16);
            listing_tmp[7] = rtl.rcArrR(listing,i + 17);
            listing_tmp[8] = rtl.rcArrR(listing,i + 6);
            listing_tmp[9] = rtl.rcArrR(listing,i + 7);
            listing_tmp[10] = rtl.rcArrR(listing,i + 19);
            listing_tmp[11] = rtl.rcArrR(listing,i + 20);
            listing_tmp[12] = rtl.rcArrR(listing,i + 9);
            listing_tmp[13] = rtl.rcArrR(listing,i + 10);
            listing_tmp[14] = rtl.rcArrR(listing,i + 22);
            listing_tmp[15] = rtl.rcArrR(listing,i + 23);
            for (p = 0; p <= 15; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (AND_ORA_EOR_STACK(i + 22) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && AND_ORA_EOR(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_VAL(i + 12) && AND_ORA_EOR_STACK(i + 13) && STA_A(i + 14) && LDA_VAL(i + 15) && AND_ORA_EOR_STACK(i + 16) && STA_A(i + 17) && LDA_VAL(i + 18) && AND_ORA_EOR_STACK(i + 19) && STA_A(i + 20) && LDA_VAL(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 13) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 19) && argMatch(i + 11,i + 22)) {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = rtl.rcArrR(listing,i + 1);
            listing_tmp[2] = pas.System.Copy(rtl.rcArrR(listing,i + 13),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256);
            listing_tmp[3] = rtl.rcArrR(listing,i + 14);
            listing_tmp[4] = rtl.rcArrR(listing,i + 3);
            listing_tmp[5] = rtl.rcArrR(listing,i + 4);
            listing_tmp[6] = pas.System.Copy(rtl.rcArrR(listing,i + 16),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 15),6,256);
            listing_tmp[7] = rtl.rcArrR(listing,i + 17);
            listing_tmp[8] = rtl.rcArrR(listing,i + 6);
            listing_tmp[9] = rtl.rcArrR(listing,i + 7);
            listing_tmp[10] = pas.System.Copy(rtl.rcArrR(listing,i + 19),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 18),6,256);
            listing_tmp[11] = rtl.rcArrR(listing,i + 20);
            listing_tmp[12] = rtl.rcArrR(listing,i + 9);
            listing_tmp[13] = rtl.rcArrR(listing,i + 10);
            listing_tmp[14] = pas.System.Copy(rtl.rcArrR(listing,i + 22),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 21),6,256);
            listing_tmp[15] = rtl.rcArrR(listing,i + 23);
            for (p = 0; p <= 15; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (AND_ORA_EOR_STACK(i + 26) && LDA_A(i) && AND_ORA_EOR(i + 1) && AND_ORA_EOR(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && AND_ORA_EOR(i + 5) && AND_ORA_EOR(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && AND_ORA_EOR(i + 9) && AND_ORA_EOR(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && AND_ORA_EOR(i + 13) && AND_ORA_EOR(i + 14) && STA_STACK(i + 15) && LDA_A(i + 16) && AND_ORA_EOR_STACK(i + 17) && STA_A(i + 18) && LDA_A(i + 19) && AND_ORA_EOR_STACK(i + 20) && STA_A(i + 21) && LDA_A(i + 22) && AND_ORA_EOR_STACK(i + 23) && STA_A(i + 24) && LDA_A(i + 25) && STA_A(i + 27)) if (argMatch(i + 3,i + 17) && argMatch(i + 7,i + 20) && argMatch(i + 11,i + 23) && argMatch(i + 15,i + 26)) {
            listing_tmp[0] = rtl.rcArrR(listing,i);
            listing_tmp[1] = rtl.rcArrR(listing,i + 1);
            listing_tmp[2] = rtl.rcArrR(listing,i + 2);
            listing_tmp[3] = pas.System.Copy(rtl.rcArrR(listing,i + 17),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 16),6,256);
            listing_tmp[4] = rtl.rcArrR(listing,i + 18);
            listing_tmp[5] = rtl.rcArrR(listing,i + 4);
            listing_tmp[6] = rtl.rcArrR(listing,i + 5);
            listing_tmp[7] = rtl.rcArrR(listing,i + 6);
            listing_tmp[8] = pas.System.Copy(rtl.rcArrR(listing,i + 20),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 19),6,256);
            listing_tmp[9] = rtl.rcArrR(listing,i + 21);
            listing_tmp[10] = rtl.rcArrR(listing,i + 8);
            listing_tmp[11] = rtl.rcArrR(listing,i + 9);
            listing_tmp[12] = rtl.rcArrR(listing,i + 10);
            listing_tmp[13] = pas.System.Copy(rtl.rcArrR(listing,i + 23),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 22),6,256);
            listing_tmp[14] = rtl.rcArrR(listing,i + 24);
            listing_tmp[15] = rtl.rcArrR(listing,i + 12);
            listing_tmp[16] = rtl.rcArrR(listing,i + 13);
            listing_tmp[17] = rtl.rcArrR(listing,i + 14);
            listing_tmp[18] = pas.System.Copy(rtl.rcArrR(listing,i + 26),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 25),6,256);
            listing_tmp[19] = rtl.rcArrR(listing,i + 27);
            for (p = 0; p <= 19; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            rtl.rcArrW(listing,i + 25,"");
            rtl.rcArrW(listing,i + 26,"");
            rtl.rcArrW(listing,i + 27,"");
            return false;
          };
          if (EOR_STACK(i + 18) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && EOR_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && EOR_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && EOR_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 9,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 12,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 15,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 18,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (EOR_STACK(i + 21) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && INY(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && STA_STACK(i + 10) && LDA_A(i + 11) && EOR_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && EOR_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && EOR_STACK(i + 18) && STA_A(i + 19) && LDA_A(i + 20) && STA_A(i + 22)) if (argMatch(i + 1,i + 12) && argMatch(i + 4,i + 15) && argMatch(i + 7,i + 18) && argMatch(i + 10,i + 21)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 1,"\teor (:bp2),y");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 3,"\tiny");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 5,"\teor (:bp2),y");
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 16));
            rtl.rcArrW(listing,i + 7,"\tiny");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 9,"\teor (:bp2),y");
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 11,"\tiny");
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 13,"\teor (:bp2),y");
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 22));
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            return false;
          };
          if (AND_ORA_EOR(i + 6) && LDA_A(i) && AND_ORA_EOR(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && STA_VAL(i + 4) && LDA_STACK(i + 5) && STA_VAL(i + 7)) if (argMatch(i + 2,i + 5)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && EOR_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((INY(i) === false) && LDA_A(i + 1) && EOR_IM_0(i + 2) && STA_A(i + 3)) {
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((INY(i) === false) && LDA_IM_0(i + 1) && EOR(i + 2) && STA_A(i + 3)) {
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_IM(i) && (pas.System.Pos("eor #",rtl.rcArrR(listing,i + 1)) > 0) && STA_A(i + 2)) {
            p = rtl.rc(GetBYTE(i) ^ GetBYTE(i + 1),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p,2));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tlda #$FF") && SUB(i + 1) && (SUB_IM(i + 1) === false) && LDY(i + 2) && STA_A(i + 3)) {
            rtl.rcArrW(listing,i + 1,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tlda #$FF") && SUB(i + 1) && (SUB_IM(i + 1) === false) && STA_A(i + 2) && (SBC(i + 4) === false)) {
            rtl.rcArrW(listing,i + 1,"\teor " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          return Result;
        };
        function opt_NOT(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          Result = true;
          if (LDY_1(i) && LDA_VAL(i + 1) && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && STY(i + 5) && (TYA(i + 6) === false) && (STY(i + 6) === false)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"\teor #$01");
            rtl.rcArrW(listing,i + 5,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          return Result;
        };
        function opt_ADD(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var err = 0;
          var tmp = "";
          Result = true;
          if ((pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && ADD_IM(i + 1) && STA_A(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && ADC_IM(i + 4) && STA_A(i + 5)) {
            p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (p !== 0) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i) + "+$" + pas.SysUtils.IntToHex(p,2));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 3) + "+$" + pas.SysUtils.IntToHex(p,2));
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && ADD_SUB(i + 2) && ADD_IM_0(i + 3) && (STA_A(i + 4) || TAY(i + 4))) {
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && ADD_IM_0(i + 2) && (STA_A(i + 3) || TAY(i + 3))) {
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && ADD_STACK(i + 1) && STA_STACK(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && ADC_STACK(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && (DATA(i + 7) === false) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_IM(i + 10) && STA_STACK(i + 11)) if (argMatch(i + 1,i + 2) && argMatch(i + 2,i + 6) && argMatch(i + 6,i + 8) && argMatch(i + 4,i + 5) && argMatch(i + 5,i + 9) && argMatch(i + 9,i + 11)) {
            p = rtl.rc(GetWORD(i + 7,i + 10),-2147483648,2147483647);
            if (p !== 0) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i) + "+$" + pas.SysUtils.IntToHex(p,2));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 3) + "+$" + pas.SysUtils.IntToHex(p,2));
            };
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if ((pas.System.Pos("\tadd <adr.",rtl.rcArrR(listing,i)) > 0) && STA_STACK(i + 1) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 2)) > 0) && ADC(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD_IM(i + 6) && (DATA(i + 6) === false) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADC_IM(i + 9) && STA_STACK(i + 10)) if (argMatch(i + 1,i + 5) && argMatch(i + 5,i + 7) && argMatch(i + 4,i + 8) && argMatch(i + 8,i + 10)) {
            p = rtl.rc(GetWORD(i + 6,i + 9),-2147483648,2147483647);
            if (p !== 0) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i) + "+$" + pas.SysUtils.IntToHex(p,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 2) + "+$" + pas.SysUtils.IntToHex(p,2));
            };
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (LDA_VAL(i) && ADC_SBC(i + 1) && STA_A(i + 2) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 4)) && LDA_VAL(i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ADC_SBC(i) && LDA_A(i + 1) && ADD_SUB(i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && STA_A(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && STA_A(i + 2) && (IY(i + 2) === false) && (STA_BP_1(i + 2) === false)) if (argMatch(i,i + 2) === false) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\tiny");
            rtl.rcArrW(listing,i + 2,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            return false;
          };
          if (LDA(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && TAY(i + 2) && (IY(i + 3) || IY(i + 4))) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\tiny");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && ((rtl.rcArrR(listing,i + 1) === "\tadd #$01") || (rtl.rcArrR(listing,i + 1) === "\tsub #$01")) && STA_VAL(i + 2) && (IY(i + 2) === false) && (STA_BP_1(i + 2) === false) && LDA_A(i + 3) && (ADD_SUB(i + 4) || STA_A(i + 4))) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (rtl.rcArrR(listing,i + 1) === "\tadd #$01") {
              rtl.rcArrW(listing,i + 1,"\tiny")}
             else rtl.rcArrW(listing,i + 1,"\tdey");
            rtl.rcArrW(listing,i + 2,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && ((rtl.rcArrR(listing,i + 1) === "\tadd #$01") || (rtl.rcArrR(listing,i + 1) === "\tsub #$01")) && STA_VAL(i + 2) && (IY(i + 2) === false) && LDY(i + 3)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (rtl.rcArrR(listing,i + 1) === "\tadd #$01") {
              rtl.rcArrW(listing,i + 1,"\tiny")}
             else rtl.rcArrW(listing,i + 1,"\tdey");
            rtl.rcArrW(listing,i + 2,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LDA_STACK(i + 4) && (SKIP(i + 5) === false)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && LDA_A(i + 2) && (ADC_SBC(i + 3) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && ADC_IM_0(i + 1) && STA_STACK(i + 2) && LDY(i + 3) && LDA_STACK(i + 4) && ADD(i + 5)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          if (LDA(i) && ADD(i + 1) && LDY(i + 2) && LDA(i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tadd #$01") && TAY(i + 3)) {
            rtl.rcArrW(listing,i + 2,"\ttay");
            rtl.rcArrW(listing,i + 3,"\tiny");
            return false;
          };
          if ((LDY_VAL(i) || TAY(i)) && LDA(i + 1) && (LDA_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4)) if (argMatch(i + 2,i + 4)) {
            if (ADD_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDA_VAL(i + 3) && ADD_SUB_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
            if (ADD_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDA(i + 3) && (LDA_STACK(i + 3) === false) && ADD_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (TYA(i) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && TAY(i + 2) && SCC(i + 3) && INC_BP_1(i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tiny");
            rtl.rcArrW(listing,i + 3,"\tsne");
            return false;
          };
          if (LDA(i) && (IY(i) === false) && ADD(i + 1) && IY(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5)) {
            tmp = rtl.rcArrR(listing,i);
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(tmp,6,256));
            return false;
          };
          if (LDA_STACK(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (STA_STACK(i + 2) || TAY(i + 2)) && LDA_STACK(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false) && STA_BP_1(i + 5)) {
            tmp = rtl.rcArrR(listing,i);
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(tmp,6,256));
            tmp = rtl.rcArrR(listing,i + 3);
            rtl.rcArrW(listing,i + 3,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 4,"\tadc " + pas.System.Copy(tmp,6,256));
            return false;
          };
          if (TAY(i + 8) && LDA_STACK(i) && ADD_IM_0(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM_0(i + 7) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA_STACK(i + 11)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 6) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA(i) && LDA_STACK(i + 1) && STA(i + 2) && LDA(i + 3) && ADD_SUB(i + 4) && (IY(i + 4) === false) && STA(i + 5) && (IY(i + 5) === false) && (ADC_SBC(i + 7) === false)) if (argMatch(i,i + 3) && (pas.System.Pos(rtl.rcArrR(listing,i + 2),rtl.rcArrR(listing,i + 5)) > 0)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA(i + 5) && LDA(i + 6) && (IY(i + 6) === false) && ADD_SUB_STACK(i + 7) && STA(i + 8) && (IY(i + 8) === false) && (ADC_SBC(i + 10) === false)) if (argMatch(i + 2,i + 7)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA(i + 5) && LDA(i + 6) && (IY(i + 6) === false) && ADD_STACK(i + 7) && SUB(i + 8) && (IY(i + 8) === false) && STA(i + 9) && (IY(i + 9) === false) && (SBC(i + 11) === false)) if (argMatch(i + 2,i + 7)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADD_SUB_STACK(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_SBC_STACK(i + 7)) if (argMatch(i + 1,i + 4) && argMatch(i + 2,i + 7)) {
            rtl.rcArrW(listing,i + 4,pas.System.Copy(rtl.rcArrR(listing,i + 4),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 7,pas.System.Copy(rtl.rcArrR(listing,i + 7),1,5) + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADD_SUB(i + 4) && STA(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7)) if (argMatch(i + 1,i + 3) && argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ADC_SBC(i + 14) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && ADC_SBC(i + 8) && STA_STACK(i + 9) && LDA_STACK(i + 10) && ADC_SBC(i + 11) && STA_STACK(i + 12) && LDA_STACK(i + 13) && STA_STACK(i + 15)) if (argMatch(i + 1,i + 10) && argMatch(i + 3,i + 13)) {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_SBC(i + 19) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADD_SUB(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADC_SBC(i + 13) && STA_STACK(i + 14) && LDA_STACK(i + 15) && ADC_SBC(i + 16) && STA_STACK(i + 17) && LDA_STACK(i + 18) && STA_STACK(i + 20)) if (argMatch(i + 9,i + 11) && argMatch(i + 12,i + 14) && argMatch(i + 15,i + 17) && argMatch(i + 18,i + 20) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 11)) && (rtl.rcArrR(listing,i + 5) === rtl.rcArrR(listing,i + 14)) && (rtl.rcArrR(listing,i + 8) === rtl.rcArrR(listing,i + 17))) {
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            return false;
          };
          if (ADC_SBC(i + 16) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_SUB(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && STA_A(i + 17) && (ADC_SBC(i + 19) === false)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_SBC(i + 10) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_SUB(i + 13) && STA_A(i + 14) && (ADC_SBC(i + 16) === false)) if (argMatch(i + 2,i + 12)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_SBC(i + 9) && ADD_SUB(i) && STA_VAL(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_VAL(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && STA_STACK(i + 10)) {
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (ADC_SBC(i + 9) && ADD_SUB(i) && STA_VAL(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && STA_STACK(i + 10)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (ADC_SBC(i + 9) && ADD_SUB(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ADC_SBC(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && STA_STACK(i + 10) && LDA_STACK(i + 11) && STA_STACK(i + 12) && LDA_STACK(i + 13) && STA_STACK(i + 14) && LDA_STACK(i + 15) && STA_STACK(i + 16)) if (argMatch(i + 1,i + 15) && argMatch(i + 4,i + 13) && argMatch(i + 7,i + 11) && argMatch(i + 10,i + 12) && argMatch(i + 11,i + 14) && argMatch(i + 13,i + 16)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            return false;
          };
          if (ADC(i + 11) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && ASL_A(i + 5) && TAY(i + 6) && LDA_STACK(i + 7) && ADD(i + 8) && STA(i + 9) && LDA_STACK(i + 10) && STA(i + 12)) if (argMatch(i + 1,i + 7) && argMatch(i + 3,i + 10)) {
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && STA_A(i + 7) && STA_A(i + 8) && LDA_A(i + 9)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && STA_VAL(i + 7) && LDA_VAL(i + 8) && STA_VAL(i + 9) && LDA_STACK(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13)) if (argMatch(i + 2,i + 10) && argMatch(i + 5,i + 12)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (ADC(i + 13) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && ADC(i + 10) && STA_A(i + 11) && LDA_STACK(i + 12) && STA_A(i + 14) && (ADC(i + 16) === false)) if (argMatch(i + 1,i + 6) && argMatch(i + 3,i + 9) && argMatch(i + 5,i + 12)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ADC(i + 18) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADD(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && ADC(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && ADC(i + 15) && STA_A(i + 16) && LDA_STACK(i + 17) && STA_A(i + 19)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11) && argMatch(i + 5,i + 14) && argMatch(i + 7,i + 17)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (ADC(i + 12) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADD(i + 9) && STA_STACK(i + 10) && LDA_STACK(i + 11) && STA_STACK(i + 13) && LDA_IM_0(i + 14) && ADC_IM_0(i + 15) && STA_STACK(i + 16) && LDA_IM_0(i + 17) && ADC_IM_0(i + 18) && STA_STACK(i + 19)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11) && argMatch(i + 5,i + 16) && argMatch(i + 7,i + 19)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (ADC(i + 12) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && ADD(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 13) && (ADC(i + 15) === false)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC(i + 8) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && ADD(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_A(i + 9)) if (argMatch(i + 1,i + 4) && argMatch(i + 3,i + 7) && (argMatch(i + 6,i + 2) === false)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC(i + 6) && LDA_A(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD(i + 3) && (ADD_STACK(i + 3) === false) && STA_A(i + 4) && LDA_STACK(i + 5) && STA_A(i + 7)) if (argMatch(i + 1,i + 5) && (argMatch(i,i + 4) === false)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ADD_SUB_VAL(i) && STA_VAL(i + 1) && LDA_A(i + 2) && ADC_SBC_VAL(i + 3) && STA_VAL(i + 4) && LDA_A(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && STA_STACK(i + 8)) if (argMatch(i + 1,i + 5) && argMatch(i + 4,i + 7)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (ADC_IM(i + 10) && LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && ADC_IM(i + 7) && STA_A(i + 8) && LDA_IM(i + 9) && STA_A(i + 11)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256)) << 24),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256)) << 24),-2147483648,2147483647);
            p = rtl.rc(p + err,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 9,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (ADC_IM(i + 4) && LDA_IM(i) && ADD_IM(i + 1) && (DATA(i + 1) === false) && STA_A(i + 2) && LDA_IM(i + 3) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            p = rtl.rc(GetWORD(i,i + 3) + GetWORD(i + 1,i + 4),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && (ADC(i + 4) === false)) {
            p = rtl.rc(GetBYTE(i) + GetBYTE(i + 1),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (SUB_IM(i + 1) && ADD_IM(i + 2) && (STA_A(i + 3) || TAY(i + 3)) && (ADC_SBC(i + 5) === false)) {
            p = rtl.rc(-GetBYTE(i + 1) + GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            return false;
          };
          if (ADD_IM(i + 1) && SUB_IM(i + 2) && (STA_A(i + 3) || TAY(i + 3)) && (ADC_SBC(i + 5) === false)) {
            p = rtl.rc(GetBYTE(i + 1) - GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ADD_IM(i + 1) && ADD_IM(i + 2) && (STA_A(i + 3) || TAY(i + 3)) && (ADC(i + 5) === false)) {
            p = rtl.rc(GetBYTE(i + 1) + GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            return false;
          };
          if (SUB_IM(i + 1) && SUB_IM(i + 2) && (STA_A(i + 3) || TAY(i + 3)) && (SBC(i + 5) === false)) {
            p = rtl.rc(GetBYTE(i + 1) + GetBYTE(i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            return false;
          };
          if (LDA_A(i) && (LDA_IM(i) === false) && ADD_SUB_IM(i + 1) && ADD_SUB(i + 2) && (ADD_SUB_IM(i + 2) === false) && ADD_SUB_IM(i + 3)) {
            tmp = rtl.rcArrR(listing,i + 2);
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,tmp);
            return false;
          };
          if (LDA_IM(i) && ADD_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && ADC_IM(i + 7) && STA_A(i + 8) && (ADC(i + 10) === false)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256)) << 16),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16),-2147483648,2147483647);
            p = rtl.rc(p + err,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (ADC_STACK(i + 14) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 1) === false) && ASL_STACK(i + 5) && ROL_A(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && STA_STACK(i + 9) && LDA_IM(i + 10) && ADD_STACK(i + 11) && STA_A(i + 12) && LDA_IM(i + 13) && STA_A(i + 15)) if (argMatch(i + 2,i + 5) && argMatch(i + 5,i + 11) && argMatch(i + 9,i + 14)) {
            p = rtl.rc((GetWORD(i,i + 3) * 4) + GetWORD(i + 10,i + 13),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 10,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 13,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (ADC_STACK(i + 14) && LDA_VAL(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && STA_STACK(i + 9) && LDA_IM(i + 10) && ADD_STACK(i + 11) && STA_A(i + 12) && LDA_IM(i + 13) && STA_A(i + 15)) if (argMatch(i + 2,i + 5) && argMatch(i + 5,i + 11) && argMatch(i + 9,i + 14)) {
            p = rtl.rc((GetWORD(i + 1,i + 4) * 4) + GetWORD(i + 10,i + 13),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 10,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 13,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (ADC_STACK(i + 12) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 1) === false) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_STACK(i + 7) && LDA_IM(i + 8) && ADD_STACK(i + 9) && STA_A(i + 10) && LDA_IM(i + 11) && STA_A(i + 13)) if (argMatch(i + 2,i + 5) && argMatch(i + 5,i + 9) && argMatch(i + 7,i + 12)) {
            p = rtl.rc((GetWORD(i,i + 3) * 2) + GetWORD(i + 8,i + 11),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 8,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 11,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (ADC_STACK(i + 12) && LDA_VAL(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_STACK(i + 7) && LDA_IM(i + 8) && ADD_STACK(i + 9) && STA_A(i + 10) && LDA_IM(i + 11) && STA_A(i + 13)) if (argMatch(i + 2,i + 5) && argMatch(i + 5,i + 9) && argMatch(i + 7,i + 12)) {
            p = rtl.rc((GetWORD(i + 1,i + 4) * 2) + GetWORD(i + 8,i + 11),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 8,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 11,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (ADC_IM(i + 10) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && (DATA(i + 7) === false) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            p = rtl.rc(GetWORD(i,i + 3) + GetWORD(i + 7,i + 10),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_IM(i + 10) && LDA_A(i) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            p = rtl.rc((-1 * GetWORD(i + 1,i + 4)) + GetWORD(i + 7,i + 10),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 4,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (SBC_IM(i + 10) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && SUB_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            p = rtl.rc(GetWORD(i + 1,i + 4) - GetWORD(i + 7,i + 10),-2147483648,2147483647);
            if (p < 0) {
              p = rtl.rc(Math.abs(p),-2147483648,2147483647);
              rtl.rcArrW(listing,i + 1,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
              rtl.rcArrW(listing,i + 4,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            } else {
              rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
              rtl.rcArrW(listing,i + 4,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            };
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_IM(i + 22) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && ADC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && ADC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
            p = rtl.rc(GetBYTE(i + 1) + (GetBYTE(i + 4) << 8) + (GetBYTE(i + 7) << 16) + (GetBYTE(i + 10) << 24),-2147483648,2147483647);
            err = rtl.rc(GetBYTE(i + 13) + (GetBYTE(i + 16) << 8) + (GetBYTE(i + 19) << 16) + (GetBYTE(i + 22) << 24),-2147483648,2147483647);
            p = rtl.rc(p + err,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 4,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 7,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 10,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (ADC_IM(i + 22) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADC(i + 7) && STA_STACK(i + 8) && LDA_IM(i + 9) && ADC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && ADC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && ADC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
            p = rtl.rc(GetBYTE(i) + (GetBYTE(i + 3) << 8) + (GetBYTE(i + 6) << 16) + (GetBYTE(i + 9) << 24),-2147483648,2147483647);
            err = rtl.rc(GetBYTE(i + 13) + (GetBYTE(i + 16) << 8) + (GetBYTE(i + 19) << 16) + (GetBYTE(i + 22) << 24),-2147483648,2147483647);
            p = rtl.rc(p + err,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 9,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (ADC_IM(i + 22) && LDA_A(i) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && SBC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && SBC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && ADC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && ADC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
            p = rtl.rc(GetBYTE(i + 1) + (GetBYTE(i + 4) << 8) + (GetBYTE(i + 7) << 16) + (GetBYTE(i + 10) << 24),-2147483648,2147483647);
            err = rtl.rc(GetBYTE(i + 13) + (GetBYTE(i + 16) << 8) + (GetBYTE(i + 19) << 16) + (GetBYTE(i + 22) << 24),-2147483648,2147483647);
            p = rtl.rc(-p + err,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 4,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 7,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 10,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (ADC_IM(i + 11) && LDA_A(i) && ADD_IM(i + 1) && (DATA(i + 1) === false) && STA_STACK(i + 2) && INY(i + 3) && LDA_A(i + 4) && ADC_IM(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && ADD_IM(i + 8) && (DATA(i + 8) === false) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 6,i + 10)) {
            p = rtl.rc(GetWORD(i + 1,i + 5) + GetWORD(i + 8,i + 11),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 5,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (ADC_IM(i + 11) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_IM(i + 4) && ADC(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && ADD_IM(i + 8) && (DATA(i + 8) === false) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 6,i + 10)) {
            p = rtl.rc(GetWORD(i,i + 4) + GetWORD(i + 8,i + 11),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 4,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (SBC_IM(i + 11) && LDA_A(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_A(i + 4) && ADC_IM(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && SUB_IM(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 6,i + 10)) {
            p = rtl.rc(GetWORD(i + 1,i + 5) - GetWORD(i + 8,i + 11),-2147483648,2147483647);
            if (p < 0) {
              p = rtl.rc(Math.abs(p),-2147483648,2147483647);
              rtl.rcArrW(listing,i + 1,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 9));
              rtl.rcArrW(listing,i + 5,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 12));
            } else {
              rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 9));
              rtl.rcArrW(listing,i + 5,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 12));
            };
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (SBC_IM(i + 11) && LDA_IM(i) && ADD(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_IM(i + 4) && ADC(i + 5) && STA_STACK(i + 6) && LDA_STACK(i + 7) && SUB_IM(i + 8) && STA_A(i + 9) && LDA_STACK(i + 10) && STA_A(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 6,i + 10)) {
            p = rtl.rc(GetWORD(i,i + 4) - GetWORD(i + 8,i + 11),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 4,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (ADC_IM(i + 10) && LDA_A(i) && ADD_IM(i + 1) && (DATA(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM(i + 7) && (DATA(i + 7) === false) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            p = rtl.rc(GetWORD(i + 1,i + 4) + GetWORD(i + 7,i + 10),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 4,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_IM_0(i + 10) && LDA(i) && (LDA_STACK(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tadd #$01") && STA(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_IM_0(i + 7) && STA(i + 8) && LDA(i + 9) && STA(i + 11)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5) && argMatch(i + 6,i + 8) && argMatch(i + 9,i + 11)) {
            rtl.rcArrW(listing,i,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\tbne @+");
            rtl.rcArrW(listing,i + 2,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 3,"\tbne @+");
            rtl.rcArrW(listing,i + 4,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 5,"\tbne @+");
            rtl.rcArrW(listing,i + 6,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 7,"@");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA_VAL(i) && (LDA_IM_0(i) === false) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && STA_A(i + 2) && LDA_A(i + 3) && STA_A(i + 5) && (ADC(i + 7) === false)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5) && (pas.System.Pos(rtl.rcArrR(listing,i),rtl.rcArrR(listing,i + 3)) > 0)) {
            if (rtl.rcArrR(listing,i + 1) === "\tadd #$01") {
              rtl.rcArrW(listing,i,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 1,"\tsne");
              rtl.rcArrW(listing,i + 2,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
            } else {
              rtl.rcArrW(listing,i + 3,"\tscc");
              rtl.rcArrW(listing,i + 4,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
              rtl.rcArrW(listing,i + 5,"");
            };
            return false;
          };
          if (ADC_SBC(i + 7) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && LDY(i + 4) && STA(i + 5) && LDA_STACK(i + 6) && STA(i + 8)) if (argMatch(i + 1,i + 6) && (argMatch(i + 1,i + 4) === false)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ADC_IM_0(i + 7) && LDA(i) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA(i + 3) && ADD(i + 4) && (STA(i + 5) || TAY(i + 5)) && LDA_STACK(i + 6)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 7,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ADC_SBC_VAL(i + 6) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADD_SUB_VAL(i + 3) && TAY(i + 4) && LDA_STACK(i + 5) && STA_STACK(i + 7) && LDA_STACK(i + 8)) if (argMatch(i + 1,i + 8) && (argMatch(i + 1,i + 2) === false) && (argMatch(i + 1,i + 5) === false) && argMatch(i + 5,i + 7)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA(i) && LDA(i + 1) && ADD_IM_0(i + 2) && STA(i + 3) && LDA(i + 4) && ADC(i + 5) && STA(i + 6)) if (argMatch(i,i + 5)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          if (LDA(i) && (LDA_STACK(i) === false) && ADD_IM_0(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && (ADC_IM_0(i + 4) === false) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_SUB_STACK(i + 7)) if (argMatch(i + 2,i + 7)) {
            if (ADD_STACK(i + 7)) {
              rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 7,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && (LDA_IM(i + 1) === false) && (rtl.rcArrR(listing,i + 2) === "\tadd #$01") && ADD_STACK(i + 3) && TAY(i + 4)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"\ttay");
            rtl.rcArrW(listing,i + 3,"\tiny");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA(i) && LDA_STACK(i + 1) && STA(i + 2) && LDA(i + 3) && (IY(i + 3) === false) && ADD(i + 4) && STA(i + 5) && (IY(i + 5) === false) && (ADC(i + 7) === false)) if (argMatch(i,i + 4) && (pas.System.Pos(rtl.rcArrR(listing,i + 2),rtl.rcArrR(listing,i + 5)) > 0)) {
            rtl.rcArrW(listing,i,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ASL_A(i + 5) && ADD_SUB_STACK(i + 6) && STA(i + 7) && LDA_STACK(i + 8)) if (argMatch(i + 1,i + 6) && argMatch(i + 3,i + 8)) {
            if (ADD_STACK(i + 6)) {
              rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 6,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_STACK(i + 18) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && ADD_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && ADC_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && ADC_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 9,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 12,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 15,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 18,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (ADC_IM_0(i + 9) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && (LDA_STACK(i + 4) === false) && ADD_SUB_VAL(i + 5) && ADD_STACK(i + 6) && TAY(i + 7) && LDA_STACK(i + 8) && STA_STACK(i + 10)) if (argMatch(i + 1,i + 6) && argMatch(i + 3,i + 8)) {
            rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_IM_0(i + 7) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && ADD_SUB_VAL(i + 3) && ADD_STACK(i + 4) && TAY(i + 5) && LDA_STACK(i + 6) && STA_STACK(i + 8)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ADC_STACK(i + 17) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && ADD_STACK(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && ADC_STACK(i + 11) && STA_A(i + 12) && LDA_A(i + 13) && ADC_STACK(i + 14) && STA_A(i + 15) && LDA_A(i + 16) && STA_A(i + 18)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11) && argMatch(i + 5,i + 14) && argMatch(i + 6,i + 17)) {
            rtl.rcArrW(listing,i + 8,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 11,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 14,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 17,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ADD_STACK(i + 3) && STA_A(i + 4)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADD_STACK(i + 3) && STA_A(i + 4)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && (LDA_STACK(i + 1) === false) && ADD(i + 2) && (ADD_STACK(i + 2) === false) && ADD_STACK(i + 3) && STA_A(i + 4)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if ((LDA_A(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_IM(i + 2) === false) && ADD_SUB_IM(i + 3) && ADD_STACK(i + 4) && TAY(i + 5)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 2,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            if ((rtl.rcArrR(listing,i + 3) === "\tadd #$01") || (rtl.rcArrR(listing,i + 3) === "\tsub #$01")) {
              if (rtl.rcArrR(listing,i + 3) === "\tadd #$01") {
                rtl.rcArrW(listing,i + 5,"\tiny")}
               else rtl.rcArrW(listing,i + 5,"\tdey");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"\ttay");
            };
            return false;
          };
          if (ADD_STACK(i + 5) && LDA(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_VAL(i + 6) && (ADC(i + 8) === false)) if (argMatch(i + 1,i + 5)) {
            if (LDA_IM_0(i)) {
              rtl.rcArrW(listing,i + 5,"")}
             else rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_STACK(i + 11) && STA_STACK(i) && LDA(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && STA_STACK(i + 4) && LDA(i + 5) && STA_STACK(i + 6) && LDA(i + 7) && (LDA_STACK(i + 7) === false) && ADD_STACK(i + 8) && STA(i + 9) && LDA(i + 10) && (LDA_STACK(i + 10) === false) && STA_STACK(i + 12) && LDY_STACK(i + 13)) if (argMatch(i,i + 8) && argMatch(i + 2,i + 11) && argMatch(i + 12,i + 13)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 11,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ADC_IM_0(i + 10) && LDA_IM_0(i) && ADD(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA(i + 8) && LDA_STACK(i + 9) && STA(i + 11) && (ADC(i + 13) === false)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 9,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 10,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ADC_STACK(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ADD_STACK(i + 5) && STA_A(i + 6) && LDA(i + 7)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 8)) {
            rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_SBC_STACK(i + 19) && (LDY_VAL(i) || TAY(i) || STY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_ADR(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADD_SUB_STACK(i + 10) && STA_A(i + 11) && LDA_A(i + 12) && ADC_SBC_STACK(i + 13) && STA_A(i + 14) && LDA_A(i + 15) && ADC_SBC_STACK(i + 16) && STA_A(i + 17) && LDA_A(i + 18) && STA_A(i + 20)) if (argMatch(i + 2,i + 10) && argMatch(i + 4,i + 13) && argMatch(i + 6,i + 16) && argMatch(i + 8,i + 19)) {
            if (ADD_STACK(i + 10)) {
              rtl.rcArrW(listing,i + 10,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 13,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 16,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
              rtl.rcArrW(listing,i + 19,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            } else {
              rtl.rcArrW(listing,i + 10,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 13,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 16,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
              rtl.rcArrW(listing,i + 19,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (ADC_SBC_STACK(i + 9) && (LDY_VAL(i) || TAY(i) || STY(i)) && LDA_ADR(i + 1) && STA_STACK(i + 2) && LDA_ADR(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADD_SUB_STACK(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && STA_A(i + 10)) if (argMatch(i + 2,i + 6) && argMatch(i + 4,i + 9)) {
            if (ADD_STACK(i + 6)) {
              rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 9,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            } else {
              rtl.rcArrW(listing,i + 6,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 9,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (ADC_SBC_STACK(i + 15) && (LDY_VAL(i) || TAY(i) || STY(i)) && LDA_A(i + 1) && ADD_SUB(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && LDA_ADR(i + 7) && STA_STACK(i + 8) && LDA_ADR(i + 9) && STA_STACK(i + 10) && LDA_STACK(i + 11) && ADD_SUB_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 16)) if (argMatch(i + 3,i + 11) && argMatch(i + 6,i + 14) && argMatch(i + 8,i + 12) && argMatch(i + 10,i + 15)) {
            if (ADD_STACK(i + 12)) {
              rtl.rcArrW(listing,i + 12,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 15,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            } else {
              rtl.rcArrW(listing,i + 12,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 15,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            };
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (STY_BP_1(i + 13) && LDA_STACK(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDY(i + 12) && LDY(i + 14) && LDA_STACK(i + 15) && STA_BP_Y(i + 16)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5) && argMatch(i + 6,i + 8) && argMatch(i + 9,i + 11) && argMatch(i + 2,i + 15)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (ADC_IM_0(i + 16) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_A(i + 15) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19) && LDA_STACK(i + 20) && STA_A(i + 21) && LDA_STACK(i + 22) && STA_A(i + 23) && LDA_STACK(i + 24) && STA_A(i + 25)) if (argMatch(i + 2,i + 18) && argMatch(i + 5,i + 20) && argMatch(i + 8,i + 22) && argMatch(i + 11,i + 24)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 12);
            listing_tmp[1] = rtl.rcArrR(listing,i + 13);
            listing_tmp[2] = rtl.rcArrR(listing,i + 14);
            listing_tmp[3] = rtl.rcArrR(listing,i + 15);
            listing_tmp[4] = rtl.rcArrR(listing,i + 16);
            listing_tmp[5] = rtl.rcArrR(listing,i + 17);
            listing_tmp[6] = rtl.rcArrR(listing,i);
            listing_tmp[7] = rtl.rcArrR(listing,i + 1);
            listing_tmp[8] = rtl.rcArrR(listing,i + 19);
            listing_tmp[9] = rtl.rcArrR(listing,i + 3);
            listing_tmp[10] = rtl.rcArrR(listing,i + 4);
            listing_tmp[11] = rtl.rcArrR(listing,i + 21);
            listing_tmp[12] = rtl.rcArrR(listing,i + 6);
            listing_tmp[13] = rtl.rcArrR(listing,i + 7);
            listing_tmp[14] = rtl.rcArrR(listing,i + 23);
            listing_tmp[15] = rtl.rcArrR(listing,i + 9);
            listing_tmp[16] = rtl.rcArrR(listing,i + 10);
            listing_tmp[17] = rtl.rcArrR(listing,i + 25);
            for (p = 0; p <= 17; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            rtl.rcArrW(listing,i + 25,"");
            return false;
          };
          if (STY_BP_1(i + 13) && LDA_STACK(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDY_STACK(i + 12) && LDY_STACK(i + 14) && LDA(i + 15) && STA_BP_Y(i + 16)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5) && argMatch(i + 6,i + 8) && argMatch(i + 9,i + 11) && argMatch(i + 5,i + 12) && argMatch(i + 2,i + 14)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if ((LAB_A(i) === false) && LDA_A(i + 1) && ADD_EAX(i + 2) && STA_A(i + 3) && LDA_A(i + 4) && ADC_EAX_1(i + 5) && STA_A(i + 6) && (ADC(i + 8) === false)) {
            rtl.rcArrW(listing,i + 2,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 5,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 1,"\tlda :eax");
            rtl.rcArrW(listing,i + 4,"\tlda :eax+1");
            return false;
          };
          if (LDA_STACK(i) && STA_EAX_1(i + 1) && LDA_EAX(i + 2) && ADD_SUB_VAL(i + 3) && STA_STACK(i + 4) && LDA_EAX_1(i + 5) && ADC_SBC_VAL(i + 6) && STA_STACK(i + 7)) if (argMatch(i,i + 7)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_STACK(i) && STA_EAX_1(i + 1) && LDA_A(i + 2) && ADD_SUB_VAL(i + 3) && STA_VAL(i + 4) && LDA_A(i + 5) && (ADC_EAX_1(i + 6) || SBC_EAX_1(i + 6)) && STA_VAL(i + 7)) if ((argMatch(i,i + 2) === false) && (argMatch(i,i + 5) === false)) {
            if (ADC(i + 6)) {
              rtl.rcArrW(listing,i + 6,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 6,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && (LDA_STACK(i) === false) && STA_EAX(i + 1) && LDA_VAL(i + 2) && STA_EAX_1(i + 3) && LDA_VAL(i + 4) && (ADD_EAX(i + 5) || SUB_EAX(i + 5)) && STA_STACK(i + 6)) {
            if (ADD_EAX(i + 5)) {
              rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 5,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ADD_IM_0(i + 1) && LDA_VAL(i) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC(i + 4) && (ADC_IM_0(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_STACK(i + 7) && (TAY(i + 8) || STA_A(i + 8)) && LDA_A(i + 9) && ADC_STACK(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADD(i + 5)) {
            rtl.rcArrW(listing,i + 4,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA(i) && ADD(i + 1) && STA(i + 2) && LDA(i + 3) && ADD(i + 5)) {
            rtl.rcArrW(listing,i + 4,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ADC_IM_0(i + 10) && LDA_IM_0(i) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM_0(i + 3) === false) && ADC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && STA_STACK(i + 11) && (ADC(i + 13) === false)) if (argMatch(i + 2,i + 6) && argMatch(i + 6,i + 8) && argMatch(i + 5,i + 9) && argMatch(i + 9,i + 11)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_IM_0(i) && STA_STACK(i + 1) && ADD_STACK(i + 2) && STA(i + 3)) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tadd #$00");
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA_IM_0(i) && ADD(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (ADC_IM_0(i + 4) && LDA_IM_0(i) && ADD(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && STA_A(i + 5) && LDA_A(i + 6) && ADC_IM_0(i + 7) && STA_A(i + 8) && (ADC(i + 10) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_IM_0(i + 3) && ADC(i + 4) && STA_A(i + 5) && LDA_IM_0(i + 6) && ADC(i + 7) && STA_A(i + 8) && LDA_IM_0(i + 9) && ADC(i + 10) && STA_A(i + 11)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && ADC_IM_0(i + 7) && STA_A(i + 8) && LDA_A(i + 9) && ADC_IM_0(i + 10) && STA_A(i + 11)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (LDA_VAL(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_VAL(i + 3) && ADC_IM_0(i + 4) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_VAL(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_IM_0(i + 3) && ADC(i + 4) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_A(i + 5) && (ADC(i + 7) === false)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (IY(i + 1) === false) && STA(i + 2) && (IY(i + 2) === false) && (ADC(i + 4) === false)) if (argMatch(i + 1,i + 2) === false) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && STA(i + 2) && INY(i + 3) && LDA(i + 4) && ADC(i + 5)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM(i + 1) === false) && TAY(i + 2) && LDA_A(i + 3) && ADC(i + 4) && (ADC_IM(i + 4) === false) && STA_A(i + 5) && (STA_BP_1(i + 5) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (LDA_IM_0(i) && ADD(i + 1) && (ADD_IM(i + 1) === false) && STA(i + 2) && (STA_BP2(i + 2) === false) && LDA(i + 3) && ADC(i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if ((LDA_IM(i) === false) && ADD_IM_0(i + 1) && STA(i + 2) && LDA(i + 3) && ADC(i + 4)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (ADC_IM_0(i) && ADD(i + 1) && (ADD_IM(i + 1) === false) && STA_A(i + 2) && (ADC(i + 4) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if (ADC_IM_0(i) && LDY(i + 1) && ADD(i + 2) && (ADD_IM(i + 2) === false) && STA_A(i + 3) && (ADC(i + 5) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            return false;
          };
          if (ADD(i) && ADD_IM_0(i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ADD(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADD_IM_0(i + 3)) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA(i) && (IY(i) === false) && ADD_IM_0(i + 1) && STA(i + 2) && (IY(i + 2) === false) && (INY(i + 3) === false) && (ADC(i + 4) === false)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_A(i) && ADD_IM_0(i + 1) && STA_A(i + 2) && LDA_A(i + 3) && (ADD(i + 4) || STA_A(i + 4))) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && ADD_IM_0(i + 1) && STA(i + 2) && INY(i + 3) && LDA(i + 4) && ADC(i + 5)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 5,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          if (LDA_IM_0(i) && ADC_IM_0(i + 1) && LDA_A(i + 2) && AND_ORA_EOR(i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i) && LDA_VAL(i + 1) && ADD_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && ADD_STACK(i + 1) && STA_A(i + 2)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          return Result;
        };
        function opt_SUB(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var err = 0;
          Result = true;
          if ((pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && SUB_IM(i + 1) && STA_A(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && SBC_IM(i + 4) && STA_A(i + 5)) {
            p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (p !== 0) rtl.rcArrW(listing,i,rtl.rcArrR(listing,i) + "-$" + pas.SysUtils.IntToHex(p,2));
            rtl.rcArrW(listing,i + 1,"");
            if (p !== 0) rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 3) + "-$" + pas.SysUtils.IntToHex(p,2));
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA(i) && LDA(i + 1) && ADD_SUB(i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tsub #$01") && STA_A(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((l === 3) && LDA_A(i) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tsub #$01") && STA_A(i + 2) && (IY(i + 2) === false)) if (argMatch(i,i + 2) === false) {
            if (LDA_IM(i)) {
              p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex((p - 1) & 0xff,2));
              rtl.rcArrW(listing,i + 1,"");
            } else {
              rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 1,"\tdey");
              rtl.rcArrW(listing,i + 2,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            };
            return false;
          };
          if (TYA(i) && (rtl.rcArrR(listing,i + 1) === "\tsub #$01") && TAY(i + 2) && SCS(i + 3) && DEC_(i + 4)) {
            rtl.rcArrW(listing,i + 1,"\tsne");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 3,"\tdey");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA(i) && LDA(i + 1) && ((rtl.rcArrR(listing,i + 2) === "\tadd #$01") || (rtl.rcArrR(listing,i + 2) === "\tsub #$01")) && ADD(i + 3) && TAY(i + 4)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            if (ADD(i + 2)) {
              rtl.rcArrW(listing,i + 3,"\tiny")}
             else rtl.rcArrW(listing,i + 3,"\tdey");
            rtl.rcArrW(listing,i + 2,"\ttay");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA(i) && SUB_IM_0(i + 1) && STA(i + 2) && LDA(i + 3) && SBC(i + 4)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (LDA(i) && SUB_IM_0(i + 1) && STA(i + 2) && (SBC(i + 4) === false)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (SUB(i) && SUB_IM_0(i + 1)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA_A(i) && SUB_STACK(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_STACK(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12)) if (argMatch(i + 2,i + 8) && argMatch(i + 5,i + 11)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 6);
            listing_tmp[1] = rtl.rcArrR(listing,i + 7);
            listing_tmp[2] = rtl.rcArrR(listing,i);
            listing_tmp[3] = rtl.rcArrR(listing,i + 1);
            listing_tmp[4] = rtl.rcArrR(listing,i + 9);
            listing_tmp[5] = rtl.rcArrR(listing,i + 10);
            listing_tmp[6] = rtl.rcArrR(listing,i + 3);
            listing_tmp[7] = rtl.rcArrR(listing,i + 4);
            listing_tmp[8] = rtl.rcArrR(listing,i + 12);
            rtl.rcArrW(listing,i,listing_tmp[0]);
            rtl.rcArrW(listing,i + 1,listing_tmp[1]);
            rtl.rcArrW(listing,i + 2,listing_tmp[2]);
            rtl.rcArrW(listing,i + 3,listing_tmp[3]);
            rtl.rcArrW(listing,i + 4,listing_tmp[4]);
            rtl.rcArrW(listing,i + 5,listing_tmp[5]);
            rtl.rcArrW(listing,i + 6,listing_tmp[6]);
            rtl.rcArrW(listing,i + 7,listing_tmp[7]);
            rtl.rcArrW(listing,i + 8,listing_tmp[8]);
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (SBC_STACK(i + 9) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA(i + 5) && SUB_STACK(i + 6) && STA(i + 7) && LDA(i + 8) && STA(i + 10)) if (argMatch(i + 1,i + 6) && argMatch(i + 4,i + 9)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,"\tsub (:bp2),y");
            rtl.rcArrW(listing,i + 6,"\tiny");
            rtl.rcArrW(listing,i + 9,"\tsbc (:bp2),y");
            return false;
          };
          if (SBC(i + 9) && LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && SUB(i + 6) && STA_A(i + 7) && LDA_STACK(i + 8) && STA_A(i + 10)) if (argMatch(i + 1,i + 5) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            return false;
          };
          if (SBC_STACK(i + 18) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && SUB_STACK(i + 9) && STA_A(i + 10) && LDA_A(i + 11) && SBC_STACK(i + 12) && STA_A(i + 13) && LDA_A(i + 14) && SBC_STACK(i + 15) && STA_A(i + 16) && LDA_A(i + 17) && STA_A(i + 19)) if (argMatch(i + 1,i + 9) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 9,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 12,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 15,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 18,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (SBC(i + 10) && LDA_A(i) && SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 14) && argMatch(i + 8,i + 16) && argMatch(i + 11,i + 18)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            return false;
          };
          if (SBC(i + 12) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && SUB(i + 9) && STA_A(i + 10) && LDA_STACK(i + 11) && STA_A(i + 13) && (SBC(i + 15) === false)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_SBC(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7)) if (argMatch(i + 1,i + 4) && argMatch(i + 3,i + 7)) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (SBC_STACK(i + 8) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && SUB_STACK(i + 5) && STA_A(i + 6) && LDA(i + 7)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 8)) {
            rtl.rcArrW(listing,i + 5,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 8,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_SBC(i + 6) && LDA(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ADD_SUB(i + 3) && STA(i + 4) && LDA_STACK(i + 5) && STA(i + 7)) if (argMatch(i + 1,i + 5) && (argMatch(i + 4,i) === false)) {
            rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA(i + 6)) if (argMatch(i + 1,i + 4) && (argMatch(i + 3,i) === false)) {
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDA(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA(i + 3) && LDA_VAL(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8)) if (argMatch(i + 1,i + 7) && (argMatch(i + 6,i) === false)) {
            rtl.rcArrW(listing,i + 7,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STY_STACK(i) && SUB(i + 1) && STA_VAL(i + 2) && LDA_STACK(i + 3) && SBC(i + 4)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"\ttya");
            return false;
          };
          if (SBC_IM_0(i + 10) && LDA_VAL(i) && (rtl.rcArrR(listing,i + 1) === "\tsub #$01") && STA_A(i + 2) && LDA_A(i + 3) && SBC_IM_0(i + 4) && STA_A(i + 5) && LDA_A(i + 6) && SBC_IM_0(i + 7) && STA_A(i + 8) && LDA_A(i + 9) && STA_A(i + 11)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5) && argMatch(i + 6,i + 8) && argMatch(i + 9,i + 11)) {
            rtl.rcArrW(listing,i + 1,"\tbne @+1");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,"\tbne @+");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 5,"\tsne");
            rtl.rcArrW(listing,i + 6,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 7,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 8,"@");
            rtl.rcArrW(listing,i + 9,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 10,"@");
            rtl.rcArrW(listing,i + 11,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            return false;
          };
          if ((l === 6) && LDA_VAL(i) && SUB_IM(i + 1) && (SUB_IM_0(i + 1) === false) && STA_A(i + 2) && LDA_A(i + 3) && SBC_IM_0(i + 4) && STA_A(i + 5)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5)) {
            if (rtl.rcArrR(listing,i + 1) === "\tsub #$01") {
              rtl.rcArrW(listing,i + 1,"\tbne @+");
              rtl.rcArrW(listing,i + 2,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + "+1");
              rtl.rcArrW(listing,i + 3,"@");
              rtl.rcArrW(listing,i + 4,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 5,"");
            } else {
              rtl.rcArrW(listing,i + 3,"\tscs");
              rtl.rcArrW(listing,i + 4,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
              rtl.rcArrW(listing,i + 5,"");
            };
            return false;
          };
          if (LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && (SBC(i + 7) === false)) {
            p = rtl.rc(GetWORD(i,i + 3) - GetWORD(i + 1,i + 4),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((l === 3) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2)) {
            p = rtl.rc(GetBYTE(i) - GetBYTE(i + 1),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            return false;
          };
          if (LDA_A(i) && (LDA_IM(i) === false) && ADD_IM(i + 1) && SUB_IM(i + 2) && STA_A(i + 3)) {
            p = rtl.rc(-(GetBYTE(i + 1) - GetBYTE(i + 2)),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            return false;
          };
          if (LDA_IM(i) && SUB_IM(i + 1) && STA_BP2_Y(i + 2) && INY(i + 3) && LDA_IM(i + 4) && SBC_IM(i + 5) && STA_BP2_Y(i + 6) && (INY(i + 7) === false)) {
            p = rtl.rc(GetWORD(i,i + 4) - GetWORD(i + 1,i + 5),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (SBC_IM(i + 7) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && STA_A(i + 8) && (SBC(i + 10) === false)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256)) << 16),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16),-2147483648,2147483647);
            p = rtl.rc(p - err,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (SBC_IM(i + 10) && LDA_A(i) && (LDA_IM(i) === false) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && SUB_IM(i + 7) && STA_A(i + 8) && LDA_STACK(i + 9) && STA_A(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            p = rtl.rc(GetWORD(i + 1,i + 4) + GetWORD(i + 7,i + 10),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 4,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (SBC_IM(i + 10) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && SBC_IM(i + 7) && STA_A(i + 8) && LDA_IM(i + 9) && STA_A(i + 11)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256)) << 24),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256)) << 24),-2147483648,2147483647);
            p = rtl.rc(p - err,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 9,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (SBC_IM(i + 7) && LDA_IM(i) && SUB_IM(i + 1) && STA_A(i + 2) && LDA_IM(i + 3) && SBC_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && STA_A(i + 8)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256)) << 16),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16),-2147483648,2147483647);
            p = rtl.rc(p - err,-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 3,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (SBC_IM(i + 22) && LDA_A(i) && (LDA_IM(i) === false) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && SBC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && SBC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && SUB_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && SBC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && SBC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256)) << 24),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 13),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 16),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 19),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 22),6,256)) << 24),-2147483648,2147483647);
            p = rtl.rc(p + err,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tsub #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 4,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 7,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 10,"\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (SBC_IM(i + 22) && LDA_A(i) && (LDA_IM(i) === false) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_IM(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_IM(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && SUB_IM(i + 13) && STA_A(i + 14) && LDA_STACK(i + 15) && SBC_IM(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && SBC_IM(i + 19) && STA_A(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
            p = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256)) << 24),-2147483648,2147483647);
            err = rtl.rc(pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 13),6,256)) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 16),6,256)) << 8) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 19),6,256)) << 16) + (pas.Common.GetVAL(pas.System.Copy(rtl.rcArrR(listing,i + 22),6,256)) << 24),-2147483648,2147483647);
            p = rtl.rc(p - err,-2147483648,2147483647);
            rtl.rcArrW(listing,i + 1,"\tadd #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 4,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 7,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 16,0,255),2));
            rtl.rcArrW(listing,i + 10,"\tadc #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 24,0,255),2));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 20));
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 23));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (LDA_A(i) && (IY(i) === false) && SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && SUB(i + 4) && STA_A(i + 5) && LDA_STACK(i + 6) && SBC_IM_0(i + 7)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 7,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (TAY(i + 5) && LDA_A(i) && (IY(i) === false) && SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && SUB(i + 4) && LDA_STACK(i + 6) && SBC_IM_0(i + 7)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 7,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (SBC_IM_0(i + 10) && LDA_A(i) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && SUB(i + 7) && TAY(i + 8) && LDA_STACK(i + 9) && STA_BP_1(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 2,"\ttay");
            rtl.rcArrW(listing,i + 5,"\tsta :bp+1");
            rtl.rcArrW(listing,i + 6,"\ttya");
            rtl.rcArrW(listing,i + 9,"\tscs");
            rtl.rcArrW(listing,i + 10,"\tdec :bp+1");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_A(i) && SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && SUB_STACK(i + 4) && STA_A(i + 5) && SCS(i + 6)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 2,"\tclc");
            rtl.rcArrW(listing,i + 3,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"\teor #$FF");
            rtl.rcArrW(listing,i + 6,"\tscc");
            return false;
          };
          if (LDA_VAL(i) && STA_VAL(i + 2) && LDA_VAL(i + 3) && STA_VAL(i + 5) && SUB(i + 1) && (SUB_IM(i + 1) === false) && SBC_IM_0(i + 4) && (LDA_A(i + 6) === false)) if (argMatch(i,i + 2) && argMatch(i + 3,i + 5)) {
            rtl.rcArrW(listing,i + 3,"\tscs");
            rtl.rcArrW(listing,i + 4,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          return Result;
        };
        function opt_LSR(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var tmp = "";
          Result = true;
          if (ROR_STACK(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4)) if (argMatch(i + 1,i + 5) && argMatch(i + 3,i + 4)) {
            if (LSR_STACK(i + 6) && ROR_STACK(i + 7) && LSR_STACK(i + 8) && ROR_STACK(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && LDA_STACK(i + 12)) if (argMatch(i + 11,i + 12)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 5,"\tror @");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 9,"\tror @");
              rtl.rcArrW(listing,i + 11,"\tror @");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
            if (LSR_STACK(i + 6) && ROR_STACK(i + 7) && LSR_STACK(i + 8) && ROR_STACK(i + 9) && LDA_STACK(i + 10)) if (argMatch(i + 9,i + 10)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 5,"\tror @");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 9,"\tror @");
              rtl.rcArrW(listing,i + 10,"");
              return false;
            };
            if (LSR_STACK(i + 6) && ROR_STACK(i + 7) && LDA_STACK(i + 8)) if (argMatch(i + 7,i + 8)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 5,"\tror @");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 8,"");
              return false;
            };
            if (LDA_STACK(i + 6)) if (argMatch(i + 5,i + 6)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 5,"\tror @");
              rtl.rcArrW(listing,i + 6,"");
              return false;
            };
          };
          if (ROR_STACK(i + 7) && LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LSR_STACK(i + 6)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 6)) {
            if (LSR_STACK(i + 8) && ROR_STACK(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && LSR_STACK(i + 12) && ROR_STACK(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 13,i + 14)) {
              p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(p,0,255) + 1,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 3,"\tdey");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 9,"\tror @");
              rtl.rcArrW(listing,i + 11,"\tror @");
              rtl.rcArrW(listing,i + 13,"\tror @");
              rtl.rcArrW(listing,i + 14,"");
              return false;
            };
            if (LSR_STACK(i + 8) && ROR_STACK(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && LDA_STACK(i + 12)) if (argMatch(i + 11,i + 12)) {
              p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(p,0,255) + 1,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 3,"\tdey");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 9,"\tror @");
              rtl.rcArrW(listing,i + 11,"\tror @");
              rtl.rcArrW(listing,i + 12,"");
              return false;
            };
            if (LSR_STACK(i + 8) && ROR_STACK(i + 9) && LDA_STACK(i + 10)) if (argMatch(i + 9,i + 10)) {
              p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(p,0,255) + 1,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 3,"\tdey");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 9,"\tror @");
              rtl.rcArrW(listing,i + 10,"");
              return false;
            };
            if (LDA_STACK(i + 8)) if (argMatch(i + 7,i + 8)) {
              p = rtl.rc(GetBYTE(i),-2147483648,2147483647);
              rtl.rcArrW(listing,i,"\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(p,0,255) + 1,2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 3,"\tdey");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 7,"\tror @");
              rtl.rcArrW(listing,i + 8,"");
              return false;
            };
          };
          if (ROR_STACK(i + 10) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && LSR_A(i + 7) && ROR_STACK(i + 8) && ROR_STACK(i + 9) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_A(i + 13) && LDA_STACK(i + 14) && STA_A(i + 15) && LDA_STACK(i + 16) && STA_A(i + 17) && LDA_STACK(i + 18) && STA_A(i + 19)) if (argMatch(i,i + 13) && argMatch(i + 1,i + 12) && argMatch(i + 2,i + 15) && argMatch(i + 3,i + 14) && argMatch(i + 4,i + 17) && argMatch(i + 5,i + 16) && argMatch(i + 6,i + 19) && argMatch(i + 5,i + 16) && argMatch(i + 11,i + 18)) {
            rtl.rcArrW(listing,i + 3,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 1,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 2,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            return false;
          };
          if (ROR_STACK(i + 11) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && LDA_VAL(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && STA_STACK(i + 7) && LSR_STACK(i + 8) && ROR_STACK(i + 9) && ROR_STACK(i + 10) && LDA_STACK(i + 12) && STA(i + 13) && LDA_STACK(i + 14) && STA(i + 15) && LDA_STACK(i + 16) && STA(i + 17) && LDA_STACK(i + 18) && STA(i + 19)) if (argMatch(i,i + 13) && argMatch(i + 1,i + 12) && argMatch(i + 2,i + 15) && argMatch(i + 3,i + 14) && argMatch(i + 4,i + 17) && argMatch(i + 5,i + 16) && argMatch(i + 6,i + 19) && argMatch(i + 7,i + 18)) {
            rtl.rcArrW(listing,i + 3,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 1,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 2,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            return false;
          };
          if (ROR_STACK(i + 8) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && (LDA_IM_0(i + 4) === false) && STA_STACK(i + 5) && LSR_STACK(i + 6) && ROR_STACK(i + 7) && (ROR_STACK(i + 9) === false)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 7) && argMatch(i + 5,i + 6)) {
            tmp = rtl.rcArrR(listing,i + 4);
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,tmp);
            tmp = rtl.rcArrR(listing,i + 5);
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,tmp);
            p = rtl.rc(i + 6,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,p) === rtl.rcArrR(listing,p + 3)) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,p + 4)) && (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,p + 5))) p += 3;
            if (LDA_STACK(p + 3) && argMatch(p + 2,p + 3)) {
              rtl.rcArrW(listing,p + 3,"");
              rtl.rcArrW(listing,i + 5,"");
              p = rtl.rc(i + 6,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,p) === rtl.rcArrR(listing,p + 3)) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,p + 4)) && (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,p + 5))) {
                rtl.rcArrW(listing,p + 2,"\tror @");
                p += 3;
              };
              rtl.rcArrW(listing,p + 2,"\tror @");
            };
            return false;
          };
          if (ROR_STACK(i + 4) && STA_STACK(i) && LDA_IM_0(i + 1) && (ADC_IM_0(i + 2) || SBC_IM_0(i + 2)) && LSR_A(i + 3) && LDA_STACK(i + 5) && STA(i + 6)) if (argMatch(i,i + 4) && argMatch(i + 4,i + 5)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 4,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (ROR_STACK(i + 8) && STA_STACK(i) && LDA_IM_0(i + 1) && (ADC_IM_0(i + 2) || SBC_IM_0(i + 2)) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && (ADC_IM_0(i + 5) || SBC_IM_0(i + 5)) && LSR_A(i + 6) && ROR_STACK(i + 7) && LDA_STACK(i + 9) && STA(i + 10) && LDA_STACK(i + 11)) if (argMatch(i,i + 8) && argMatch(i + 8,i + 9) && argMatch(i + 3,i + 7) && argMatch(i + 7,i + 11)) {
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"\tlsr @");
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 3));
            return false;
          };
          if (LDA_A(i) && LSR_STACK(i + 1) && ROR_STACK(i + 2) && LDA_A(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_A(i) && LSR_STACK(i + 1) && ROR_STACK(i + 2) && LSR_STACK(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA(i) && ADC_SBC(i + 1) && LSR_STACK(i + 2) && ROR_STACK(i + 3) && ROR_STACK(i + 4) && LDA_STACK(i + 5)) if (argMatch(i + 4,i + 5)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i) && LSR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 4)) if (argMatch(i,i + 3) && argMatch(i + 3,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"\tror @");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && ROR_STACK(i + 3) && STA_im_0(i + 4)) {
            p = 0;
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i - (p * 4))) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(i + 1) - (p * 4))) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(i + 2) - (p * 4))) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(i + 3) - (p * 4)))) p += 1;
            if (LDA_A((i + 3) - (p * 4)) || TYA((i + 3) - (p * 4))) {
              if (IY((i + 3) - (p * 4)) && (LDY((i + 2) - (p * 4)) || INY((i + 2) - (p * 4)))) rtl.rcArrW(listing,(i + 2) - (p * 4),"");
              rtl.rcArrW(listing,(i + 3) - (p * 4),"");
            };
            p -= 1;
            while (p >= 0) {
              rtl.rcArrW(listing,i - (p * 4),"");
              rtl.rcArrW(listing,(i + 1) - (p * 4),"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,(i + 1) - (p * 4)),6,256));
              p -= 1;
            };
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LSR_A(i) && ROR_STACK(i + 1) && ROR_STACK(i + 2) && STA_im_0(i + 3)) {
            p = 0;
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i - (p * 3))) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(i + 1) - (p * 3))) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(i + 2) - (p * 3)))) p += 1;
            if (LDA_A((i + 2) - (p * 3)) || TYA((i + 2) - (p * 3))) {
              if (IY((i + 2) - (p * 3)) && (LDY((i + 1) - (p * 3)) || INY((i + 1) - (p * 3)))) rtl.rcArrW(listing,(i + 1) - (p * 3),"");
              rtl.rcArrW(listing,(i + 2) - (p * 3),"");
            };
            p -= 1;
            while (p >= 0) {
              rtl.rcArrW(listing,i - (p * 3),"");
              rtl.rcArrW(listing,(i + 1) - (p * 3),"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,(i + 1) - (p * 3)),6,256));
              p -= 1;
            };
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LSR_A(i) && ROR_STACK(i + 1) && STA_im_0(i + 2)) {
            p = 0;
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i - (p * 2))) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(i + 1) - (p * 2)))) p += 1;
            if (LDA_A((i + 1) - (p * 2)) || TYA((i + 1) - (p * 2))) {
              if (IY((i + 1) - (p * 2)) && (LDY(i - (p * 2)) || INY(i - (p * 2)))) rtl.rcArrW(listing,i - (p * 2),"");
              rtl.rcArrW(listing,(i + 1) - (p * 2),"");
            };
            p -= 1;
            while (p >= 0) {
              rtl.rcArrW(listing,i - (p * 2),"");
              rtl.rcArrW(listing,(i + 1) - (p * 2),"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,(i + 1) - (p * 2)),6,256));
              p -= 1;
            };
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ROR_STACK(i + 4) && STA_STACK(i) && STY_STACK(i + 1) && LSR_STACK(i + 2) && ROR_STACK(i + 3) && LDA_STACK(i + 5) && STA(i + 6) && (LDA_A(i + 7) === false)) if (argMatch(i,i + 3) && argMatch(i + 1,i + 2) && argMatch(i + 4,i + 5)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            return false;
          };
          if (ROR_STACK(i + 6) && STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && LSR_STACK(i + 3) && ROR_STACK(i + 4) && ROR_STACK(i + 5) && LDA_STACK(i + 7) && STA(i + 8) && (LDA_A(i + 9) === false)) if (argMatch(i + 6,i + 7) && argMatch(i,i + 5) && argMatch(i + 1,i + 4) && argMatch(i + 2,i + 3)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            return false;
          };
          if (ROR_STACK(i + 5) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4) && LDA_STACK(i + 6) && STA(i + 7)) if (argMatch(i + 1,i + 5) && argMatch(i + 5,i + 6) && argMatch(i + 3,i + 4)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 5,"\tror @");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (ROR_A(i + 4) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && LSR_STACK(i + 3) && STA(i + 5) && LDA_STACK(i + 6) && STA(i + 7)) if (argMatch(i,i + 7) && argMatch(i + 1,i + 3) && argMatch(i + 2,i + 5) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (ROR_STACK(i + 11) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LSR_STACK(i + 9) && ROR_STACK(i + 10) && LDA_STACK(i + 12) && STA(i + 13) && (LDA_STACK(i + 14) === false)) if (argMatch(i + 2,i + 11) && argMatch(i + 11,i + 12) && argMatch(i + 5,i + 10) && argMatch(i + 8,i + 9)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256));
            return false;
          };
          if (ROR_STACK(i + 10) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && LSR_A(i + 8) && ROR_STACK(i + 9) && LDA_STACK(i + 11) && STA_VAL(i + 12) && LDA_STACK(i + 13) && STA_VAL(i + 14)) if (argMatch(i + 2,i + 10) && argMatch(i + 10,i + 11) && argMatch(i + 5,i + 9) && argMatch(i + 9,i + 13)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 14));
            rtl.rcArrW(listing,i + 9,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 14),6,256));
            rtl.rcArrW(listing,i + 10,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 12),6,256));
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            return false;
          };
          if (ROL_A(i + 12) && STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LSR_STACK(i + 4) && ROR_STACK(i + 5) && ROR_STACK(i + 6) && ROR_STACK(i + 7) && LDA_STACK(i + 8) && ASL_STACK(i + 9) && ROL_A(i + 10) && ASL_STACK(i + 11) && STA_STACK(i + 13)) if (argMatch(i,i + 5) && argMatch(i + 3,i + 4) && argMatch(i + 6,i + 8) && argMatch(i + 7,i + 9)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_IM_0(i) && (pas.System.Pos("sta :STACKORIGIN+STACKWIDTH*2",rtl.rcArrR(listing,i + 1)) > 0) && LSR_A(i + 2) && (pas.System.Pos("ror :STACKORIGIN+STACKWIDTH*2",rtl.rcArrR(listing,i + 3)) > 0) && ROR_STACK(i + 4) && ROR_STACK(i + 5) && STA(i + 6)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 2,"\tlda #$00");
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda #$00");
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (LDA_IM_0(i) && (pas.System.Pos("sta :STACKORIGIN+STACKWIDTH*2",rtl.rcArrR(listing,i + 1)) > 0) && (pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH*2",rtl.rcArrR(listing,i + 2)) > 0) && ROR_STACK(i + 3) && ROR_STACK(i + 4)) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 3,"\tlda #$00");
            rtl.rcArrW(listing,i + 4,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if ((pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH*2",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos("ror :STACKORIGIN+STACKWIDTH",rtl.rcArrR(listing,i + 1)) > 0) && ROR_A(i + 2) && ORA(i + 3) && STA(i + 4) && (LDA_A(i + 5) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if ((pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH*2",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos("ror :STACKORIGIN+STACKWIDTH",rtl.rcArrR(listing,i + 1)) > 0) && ROR_A(i + 2) && (pas.System.Pos("lsr :STACKORIGIN+STACKWIDTH",rtl.rcArrR(listing,i + 3)) > 0) && ROR_A(i + 4)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            return false;
          };
          if (LDA_VAL(i) && LSR_A(i + 1) && STA_A(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LSR_A(i + 1) && STA_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (STA_STACK(i) && LSR_A(i + 1) && LSR_A(i + 2) && STA_STACK(i + 3)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (DEY(i + 8) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && LDY(i + 3) && BEQ(i + 4) && LAB_L(i + 5) && LSR_STACK(i + 6) && ROR_A(i + 7) && BNE(i + 9) && LAB_L(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13)) if (argMatch(i + 1,i + 6) && argMatch(i + 6,i + 12) && argMatch(i,i + 13) && argMatch(i + 2,i + 11)) {
            rtl.rcArrW(listing,i + 6,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (DEY(i + 14) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && LSR_STACK(i + 10) && ROR_STACK(i + 11) && ROR_STACK(i + 12) && ROR_A(i + 13) && BNE(i + 15) && LAB_L(i + 16) && STA_VAL(i + 17) && LDA_STACK(i + 18) && STA_VAL(i + 19) && LDA_STACK(i + 20) && STA_VAL(i + 21) && LDA_STACK(i + 22) && STA_VAL(i + 23)) if (argMatch(i + 1,i + 10) && argMatch(i + 10,i + 22) && argMatch(i + 3,i + 11) && argMatch(i + 11,i + 20) && argMatch(i + 5,i + 12) && argMatch(i + 12,i + 18) && argMatch(i,i + 23) && argMatch(i + 2,i + 21) && argMatch(i + 4,i + 19) && argMatch(i + 6,i + 17)) {
            rtl.rcArrW(listing,i + 10,"\tlsr " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 11,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 12,"\tror " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (LDY_STACK(i + 11) && STA_STACK(i) && LDA_STACK(i + 1) && (ADC_IM_0(i + 2) || SBC_IM_0(i + 2)) && STA_STACK(i + 3) && LDA_STACK(i + 4) && (ADC_IM_0(i + 5) || SBC_IM_0(i + 5)) && STA_STACK(i + 6) && LDA_STACK(i + 7) && (ADC_IM_0(i + 8) || SBC_IM_0(i + 8)) && STA_STACK(i + 9) && LDA(i + 10) && BEQ(i + 12) && LAB_L(i + 13)) if (argMatch(i,i + 11)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          return Result;
        };
        function opt_ASL(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var tmp = "";
          var yes = false;
          Result = true;
          if (ASL_A(i + 5) && LDA_A(i) && STA_STACK(i + 1) && LDA_IM_0(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 2);
            listing_tmp[1] = rtl.rcArrR(listing,i + 3);
            listing_tmp[2] = rtl.rcArrR(listing,i);
            listing_tmp[3] = rtl.rcArrR(listing,i + 1);
            listing_tmp[4] = rtl.rcArrR(listing,i + 4);
            listing_tmp[5] = rtl.rcArrR(listing,i + 5);
            rtl.rcArrW(listing,i,listing_tmp[0]);
            rtl.rcArrW(listing,i + 1,listing_tmp[1]);
            rtl.rcArrW(listing,i + 2,listing_tmp[2]);
            rtl.rcArrW(listing,i + 3,listing_tmp[3]);
            rtl.rcArrW(listing,i + 4,listing_tmp[4]);
            rtl.rcArrW(listing,i + 5,listing_tmp[5]);
            return false;
          };
          if (ROL_A(i) && LDA_A(i + 1) && (STA_A(i + 2) || LSR_A(i + 2) || ASL_A(i + 2))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (ROL_A(i) && LDA_A(i + 1) && (AND_ORA_EOR(i + 2) || ADD_SUB(i + 2)) && (STA_A(i + 3) || MWY_BP2(i + 3) || LDY(i + 3) || TAY(i + 3))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (ROL_A(i) && MWY_BP2(i + 1) && LDA_A(i + 2) && (AND_ORA_EOR(i + 3) || ADD_SUB(i + 3)) && (STA_A(i + 4) || LDY(i + 4) || TAY(i + 4))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (ROL_A(i) && LDA_A(i + 1) && (AND_ORA_EOR(i + 2) || ADD_SUB(i + 2)) && (AND_ORA_EOR(i + 3) || ADD_SUB(i + 3)) && (STA_A(i + 4) || MWY_BP2(i + 4) || LDY(i + 4))) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (LDA_VAL(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && ASL_STACK(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (ROL_A(i + 14) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_IM_0(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ASL_STACK(i + 13) && STA_STACK(i + 15)) if (argMatch(i + 2,i + 13) && argMatch(i + 5,i + 12) && argMatch(i + 5,i + 15)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && ASL_STACK(i + 6) && ROL_A(i + 7)) if (argMatch(i + 2,i + 6)) {
            if (STA_STACK(i + 8) && argMatch(i + 5,i + 8)) {
              rtl.rcArrW(listing,i + 5,"");
              return false;
            };
            if ((rtl.rcArrR(listing,i + 8) === rtl.rcArrR(listing,i + 6)) && (rtl.rcArrR(listing,i + 9) === rtl.rcArrR(listing,i + 7)) && STA_STACK(i + 10) && argMatch(i + 5,i + 10)) {
              rtl.rcArrW(listing,i + 5,"");
              return false;
            };
          };
          if (ASL_STACK(i) && ROL_A(i + 1) && LDA_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ROL_A(i + 6) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && ASL_STACK(i + 5) && LDY_STACK(i + 7)) if (argMatch(i + 2,i + 5) && argMatch(i + 5,i + 7)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tasl @");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\ttay");
            return false;
          };
          if (ROL_A(i + 3) && STA_STACK(i) && LDA_A(i + 1) && ASL_STACK(i + 2) && LDY_STACK(i + 4)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tasl @");
            rtl.rcArrW(listing,i + 4,"\ttay");
            return false;
          };
          if (ROL_A(i + 4) && LDA_A(i) && STA_STACK(i + 1) && LDA_A(i + 2) && ASL_STACK(i + 3) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (IY(i + 7) === false)) if (argMatch(i + 1,i + 3) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i + 1,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 3,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (LDA_A(i) && STA_STACK(i + 1) && ASL_STACK(i + 2) && (LDA_A(i + 3) || MWA(i + 3))) if (argMatch(i + 1,i + 2)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\tasl @");
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && (ASL_STACK(i + 3) || LSR_STACK(i + 3)) && (ROL(i + 4) === false) && (ROR(i + 4) === false)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && (ASL(i + 3) || LSR(i + 3)) && STA_im_0(i + 4) && (ROR_STACK(i + 5) || ROL_STACK(i + 5))) if (argMatch(i,i + 5)) {
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if ((rtl.rcArrR(listing,i) === "\tasl #$00") && (rtl.rcArrR(listing,i + 1) === "\trol #$00")) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((ASL_STACK(i) || ASL_A(i)) && (rtl.rcArrR(listing,i + 1) === "\trol #$00")) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ROL_STACK(i) && (rtl.rcArrR(listing,i + 1) === "\trol #$00")) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ASL_STACK(i + 2) && LDY_STACK(i + 3)) if (argMatch(i,i + 1) && argMatch(i,i + 2) && argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tasl @");
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\ttay");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && LDA_STACK(i + 2)) if (argMatch(i,i + 1) && argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\tasl @");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && ASL_A(i + 1) && STA_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && LDA_VAL(i + 2)) if (argMatch(i,i + 1)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tasl @");
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && (LDY_STACK(i + 4) || LDA_STACK(i + 4))) if (argMatch(i,i + 2) && argMatch(i,i + 3) && argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\tasl @");
            if (LDY_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\ttay")}
             else rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && LDY_STACK(i + 2)) if (argMatch(i,i + 1) && argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tasl @");
            rtl.rcArrW(listing,i + 2,"\ttay");
            return false;
          };
          if (STA_STACK(i) && LDA_A(i + 1) && ASL_STACK(i + 2) && LDY_STACK(i + 3)) if (argMatch(i,i + 2) && argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\ttay");
            return false;
          };
          if (ASL_A(i) && ROL_STACK(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && LDY_STACK(i + 4)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_A(i + 6) && LDA_A(i + 7) && ADC_SBC(i + 8) && STA_A(i + 9) && (ADC_SBC(i + 11) === false)) if (argMatch(i,i + 5)) {
            yes = pas.System.Pos(" :STACK",rtl.rcArrR(listing,i + 8)) > 0;
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              if (!yes) rtl.rcArrW(listing,(k - 4) + 1,"");
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            if (!yes) rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_A(i + 6) && (ADC_SBC(i + 8) === false)) if (argMatch(i,i + 5)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              rtl.rcArrW(listing,(k - 4) + 1,"");
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA(i + 4) && ASL_A(i + 5) && TAY(i + 6) && LDA_STACK(i + 7) && ADD_SUB(i + 8) && STA_A(i + 9) && LDA(i + 10) && ADC_SBC(i + 11) && STA_A(i + 12) && (ADC_SBC(i + 14) === false)) if (argMatch(i,i + 7)) {
            yes = pas.System.Pos(" :STACK",rtl.rcArrR(listing,i + 10)) > 0;
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              if (!yes) rtl.rcArrW(listing,(k - 4) + 1,"");
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            if (!yes) rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_SBC(i + 16) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && ASL_A(i + 10) && TAY(i + 11) && LDA_STACK(i + 12) && ADD_SUB(i + 13) && STA(i + 14) && LDA_STACK(i + 15) && STA(i + 17) && (ADC_SBC(i + 19) === false)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && (EAX(i + 5) === false) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (EAX(i + 7) === false) && (LDA_STACK(i + 8) === false)) if (argMatch(i,i + 4) && argMatch(i + 1,i + 6)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_STACK(i + 3) && STA_VAL(i + 4) && (EAX(i + 4) === false) && LDA_STACK(i + 5) && STA_VAL(i + 6) && (EAX(i + 6) === false) && (LDA_STACK(i + 7) === false)) if (argMatch(i + 1,i + 3) && argMatch(i + 2,i + 5)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 3)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 3) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 3) + 2))) {
              k -= 3;
            };
            if (STA_STACK(k - 1) && argMatch(k - 1,i + 2)) {
              k = rtl.rc(i,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 3)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 3) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 3) + 2))) {
                rtl.rcArrW(listing,(k - 3) + 2,"\trol @");
                k -= 3;
              };
              rtl.rcArrW(listing,i + 2,"\trol @");
              rtl.rcArrW(listing,k - 1,"");
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && (EAX(i + 3) === false) && LDA_STACK(i + 4) && STA_VAL(i + 5) && (EAX(i + 5) === false) && (LDA_STACK(i + 6) === false)) if (argMatch(i,i + 2) && argMatch(i + 1,i + 4)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 2)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 2) + 1))) {
              k -= 2;
            };
            if (STA_STACK(k - 1) && argMatch(k - 1,i)) {
              k = rtl.rc(i,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 2)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 2) + 1))) {
                rtl.rcArrW(listing,k - 2,"\tasl @");
                k -= 2;
              };
              rtl.rcArrW(listing,i,"\tasl @");
              rtl.rcArrW(listing,k - 1,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            } else if (STA_STACK(k - 1) && argMatch(k - 1,i + 1)) {
              k = rtl.rc(i,-2147483648,2147483647);
              while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 2)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 2) + 1))) {
                rtl.rcArrW(listing,(k - 2) + 1,"\trol @");
                k -= 2;
              };
              rtl.rcArrW(listing,i + 1,"\trol @");
              rtl.rcArrW(listing,k - 1,"");
              rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 3));
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && (EAX(i + 5) === false) && (LDA_STACK(i + 6) === false)) if (argMatch(i,i + 4)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              rtl.rcArrW(listing,(k - 4) + 1,"");
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            if (STA_STACK(k - 1) && ADC_SBC(k - 2) && LDA(k - 3) && STA_STACK(k - 4) && ADC_SBC(k - 5) && LDA(k - 6) && STA_STACK(k - 7) && ADC_SBC(k - 8) && LDA(k - 9)) if (argMatch(k - 7,i + 1) && argMatch(k - 4,i + 2) && argMatch(k - 1,i + 3)) {
              rtl.rcArrW(listing,k - 1,"");
              rtl.rcArrW(listing,k - 2,"");
              rtl.rcArrW(listing,k - 3,"");
              rtl.rcArrW(listing,k - 4,"");
              rtl.rcArrW(listing,k - 5,"");
              rtl.rcArrW(listing,k - 6,"");
              rtl.rcArrW(listing,k - 7,"");
              rtl.rcArrW(listing,k - 8,"");
              rtl.rcArrW(listing,k - 9,"");
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_STACK(i + 3) && STA_VAL(i + 4) && (LDA_STACK(i + 5) === false)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"\trol @");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && (EAX(i + 3) === false) && (LDA_STACK(i + 4) === false)) if (argMatch(i,i + 2)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 2)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 2) + 1))) {
              rtl.rcArrW(listing,(k - 2) + 1,"");
              k -= 2;
            };
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ROL_A(i + 6) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && ASL_STACK(i + 5) && STA_STACK(i + 7) && LDA(i + 8) && (LDA_STACK(i + 8) === false) && ADD_STACK(i + 9)) if (argMatch(i + 1,i + 3) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 9,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 8,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 7,"\tasl @");
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 5,"\tasl @");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ROL_A(i + 4) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_STACK(i + 3) && STA_STACK(i + 5) && LDA(i + 6) && (LDA_STACK(i + 6) === false) && ADD_STACK(i + 7)) if (argMatch(i + 1,i + 3) && argMatch(i + 3,i + 7)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 6,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 5,"\tasl @");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (ROL_A(i + 7) && LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && ASL_STACK(i + 6) && STA_STACK(i + 8) && LDA(i + 9) && ADD_STACK(i + 10)) if (argMatch(i + 2,i + 6) && argMatch(i + 6,i + 10) && argMatch(i + 5,i + 8)) {
            rtl.rcArrW(listing,i,"\tldy #$01");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 3,"\tdey");
            rtl.rcArrW(listing,i + 5,"\tasl @");
            rtl.rcArrW(listing,i + 6,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (LDY_STACK(i + 9) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && ASL_STACK(i + 5) && ROL_A(i + 6) && STA_STACK(i + 7) && MWY_BP2(i + 8)) if (argMatch(i + 1,i + 3) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (LDY_STACK(i + 4) && ASL_STACK(i) && ROL_A(i + 1) && STA_STACK(i + 2) && MWY_BP2(i + 3)) if (argMatch(i,i + 4) && (argMatch(i,i + 2) === false)) {
            rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"\ttay");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && STA_BP2_Y(i + 7) && INY(i + 8) && LDA_STACK(i + 9) && STA_BP2_Y(i + 10) && (INY(i + 11) === false)) if (argMatch(i,i + 6) && argMatch(i + 1,i + 9)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_A(i + 4) && ADD_SUB_STACK(i + 5) && STA_A(i + 6) && (LDA_A(i + 7) === false)) if (argMatch(i,i + 5)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              rtl.rcArrW(listing,(k - 4) + 1,"");
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && LDA_STACK(i + 4) && ADD_SUB(i + 5) && STA_A(i + 6) && (LDA_A(i + 7) === false)) if (argMatch(i,i + 4)) {
            k = rtl.rc(i,-2147483648,2147483647);
            while ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,k - 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,(k - 4) + 1)) && (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,(k - 4) + 2)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,(k - 4) + 3))) {
              rtl.rcArrW(listing,(k - 4) + 1,"");
              rtl.rcArrW(listing,(k - 4) + 2,"");
              rtl.rcArrW(listing,(k - 4) + 3,"");
              k -= 4;
            };
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ASL_STACK(i + 10) && STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && LDA(i + 7) && ADC_SBC(i + 8) && STA_STACK(i + 9) && (ROL_STACK(i + 11) === false)) if (argMatch(i,i + 10)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          if (ROL_STACK(i + 5) && ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && ASL_STACK(i + 4) && LDA_STACK(i + 6)) if ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 5)) && argMatch(i + 4,i + 6)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ROL_STACK(i + 7) && ASL_STACK(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && ASL_STACK(i + 4) && ROL_STACK(i + 5) && ASL_STACK(i + 6) && LDA_STACK(i + 8)) if ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 4)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 5)) && (rtl.rcArrR(listing,i + 4) === rtl.rcArrR(listing,i + 6)) && (rtl.rcArrR(listing,i + 5) === rtl.rcArrR(listing,i + 7)) && argMatch(i + 6,i + 8)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5)) if (argMatch(i,i + 4) && argMatch(i,i + 5)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && LDA(i + 3) && (LDA_STACK(i + 3) === false) && ADD_STACK(i + 4) && STA_VAL(i + 5)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"\trol @");
            rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_STACK(i) && ASL_STACK(i + 1) && ROL_STACK(i + 2) && LDA_VAL(i + 3) && (ADD_STACK(i + 4) === false)) if (argMatch(i,i + 2)) {
            tmp = rtl.rcArrR(listing,i);
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 1,"\trol @");
            rtl.rcArrW(listing,i + 2,tmp);
            return false;
          };
          if (ROL_STACK(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && STA_VAL(i + 3) && LDA_STACK(i + 4) && STA_VAL(i + 5) && LDA_A(i + 6)) if (argMatch(i,i + 2) && argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((ADD_SUB(i) || LDA_A(i) || ROL_A(i) || AND_ORA_EOR(i)) && STA_STACK(i + 1) && ASL_STACK(i + 2) && (ROL_STACK(i + 3) === false)) if (argMatch(i + 1,i + 2)) {
            p = 0;
            while (rtl.rcArrR(listing,i + 2) === rtl.rcArrR(listing,i + 2 + p)) p += 1;
            p -= 1;
            rtl.rcArrW(listing,i + 2 + p,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            while (p >= 0) {
              p -= 1;
              rtl.rcArrW(listing,i + 2 + p,"\tasl @");
            };
            return false;
          };
          if (ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_STACK(i + 2) && AND_ORA_EOR_VAL(i + 3) && STA(i + 4) && (LDA(i + 5) === false)) if (argMatch(i + 1,i + 2) === false) {
            p = rtl.rc(i,-2147483648,2147483647);
            while (ASL_A(p) && ROL_STACK(p + 1)) {
              rtl.rcArrW(listing,p + 1,"");
              p -= 2;
            };
            return false;
          };
          if (ROL_STACK(i + 11) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && STA_STACK(i + 7) && ASL_STACK(i + 8) && ROL_STACK(i + 9) && ROL_STACK(i + 10) && LDA_STACK(i + 12) && STA_VAL(i + 13) && LDA_STACK(i + 14) && STA_VAL(i + 15) && LDA_STACK(i + 16) && STA_VAL(i + 17) && LDA_STACK(i + 18) && STA_VAL(i + 19)) if (argMatch(i + 1,i + 8) && argMatch(i + 8,i + 12) && argMatch(i + 3,i + 9) && argMatch(i + 9,i + 14) && argMatch(i + 5,i + 10) && argMatch(i + 10,i + 16) && argMatch(i + 7,i + 11) && argMatch(i + 11,i + 18)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 17));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 19));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 8,"\tasl " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 9,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 10,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 11,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            return false;
          };
          if (STA_STACK(i) && STY_STACK(i + 1) && STY_STACK(i + 2) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && (ROL_STACK(i + 5) === false)) if (argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_STACK(i) && LDA_IM_0(i + 1) && STA_STACK(i + 2) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && LDA_STACK(i + 5)) if (argMatch(i,i + 4) && argMatch(i + 2,i + 3) && argMatch(i + 3,i + 5)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tasl @");
            rtl.rcArrW(listing,i + 2,"\tlda #$00");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ADC_SBC_VAL(i + 10) && LDA_VAL(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && STA_STACK(i + 3) && ASL_STACK(i + 4) && ROL_STACK(i + 5) && LDA_STACK(i + 6) && ADD_SUB_VAL(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && STA_VAL(i + 11)) if (argMatch(i + 1,i + 4) && argMatch(i + 3,i + 5) && argMatch(i + 4,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,"\tasl @");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (ADC_IM_0(i + 8) && LDA_VAL(i) && STA(i + 1) && LDA_VAL(i + 2) && ASL_A(i + 3) && ROL(i + 4) && ADD(i + 5) && STA(i + 6) && (STA_EAX(i + 6) === false) && LDA(i + 7) && STA(i + 9) && (STA_EAX_1(i + 9) === false) && (ADC(i + 11) === false)) if ((pas.System.Pos(rtl.rcArrR(listing,i + 6),rtl.rcArrR(listing,i + 9)) > 0) && argMatch(i + 1,i + 4) && argMatch(i + 4,i + 7)) {
            if (argMatch(i + 9,i)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
            } else rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 4,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"\tscc");
            rtl.rcArrW(listing,i + 9,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
            return false;
          };
          if (DEY(i + 8) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && LDY(i + 3) && BEQ(i + 4) && LAB_L(i + 5) && ASL_A(i + 6) && ROL_STACK(i + 7) && BNE(i + 9) && LAB_L(i + 10) && STA_VAL(i + 11) && LDA_STACK(i + 12) && STA_VAL(i + 13)) if (argMatch(i + 1,i + 7) && argMatch(i + 7,i + 12) && argMatch(i,i + 13) && argMatch(i + 2,i + 11)) {
            rtl.rcArrW(listing,i + 7,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (DEY(i + 14) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && ASL_A(i + 10) && ROL_STACK(i + 11) && ROL_STACK(i + 12) && ROL_STACK(i + 13) && BNE(i + 15) && LAB_L(i + 16) && STA_VAL(i + 17) && LDA_STACK(i + 18) && STA_VAL(i + 19) && LDA_STACK(i + 20) && STA_VAL(i + 21) && LDA_STACK(i + 22) && STA_VAL(i + 23)) if (argMatch(i + 1,i + 13) && argMatch(i + 13,i + 22) && argMatch(i + 3,i + 12) && argMatch(i + 12,i + 20) && argMatch(i + 5,i + 11) && argMatch(i + 11,i + 18) && argMatch(i,i + 23) && argMatch(i + 2,i + 21) && argMatch(i + 4,i + 19) && argMatch(i + 6,i + 17)) {
            rtl.rcArrW(listing,i + 11,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i + 12,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 13,"\trol " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (MWY_BP2(i + 21) && LDA_IM_0(i) && STA_STACK(i + 1) && LDA_IM_0(i + 2) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && ASL_A(i + 10) && ROL_STACK(i + 11) && ROL_STACK(i + 12) && ROL_STACK(i + 13) && DEY(i + 14) && BNE(i + 15) && LAB_L(i + 16) && STA_STACK(i + 17) && LDA_A(i + 18) && ADD_SUB_STACK(i + 19) && STA_A(i + 20)) if (argMatch(i + 1,i + 13) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 11) && argMatch(i + 17,i + 19) && (argMatch(i + 17,i + 11) === false) && (argMatch(i + 17,i + 12) === false) && (argMatch(i + 17,i + 13) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (MWY_BP2(i + 24) && LDA_IM_0(i) && STA_STACK(i + 1) && LDA_IM_0(i + 2) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && LDY(i + 7) && BEQ(i + 8) && LAB_L(i + 9) && ASL_A(i + 10) && ROL_STACK(i + 11) && ROL_STACK(i + 12) && ROL_STACK(i + 13) && DEY(i + 14) && BNE(i + 15) && LAB_L(i + 16) && STA_STACK(i + 17) && LDA_A(i + 18) && ADD_SUB_STACK(i + 19) && STA_A(i + 20) && LDA_A(i + 21) && ADC_SBC_STACK(i + 22) && STA_A(i + 23)) if (argMatch(i + 1,i + 13) && argMatch(i + 3,i + 12) && argMatch(i + 5,i + 11) && argMatch(i + 11,i + 22) && argMatch(i + 17,i + 19) && (argMatch(i + 17,i + 11) === false) && (argMatch(i + 17,i + 12) === false) && (argMatch(i + 17,i + 13) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (ASL_A(i) && ROL_STACK(i + 1) && ROL_STACK(i + 2) && ROL_STACK(i + 3) && DEY(i + 4) && BNE(i + 5) && LAB_L(i + 6) && STA_STACK(i + 7) && LDA_VAL(i + 8) && ORA_STACK(i + 9) && STA_STACK(i + 10) && LDA_VAL(i + 11) && ORA_STACK(i + 12) && STA_STACK(i + 13) && LDA_STACK(i + 14) && STA_VAL(i + 15) && LDA_STACK(i + 16) && STA_VAL(i + 17)) if (argMatch(i + 1,i + 12) && argMatch(i + 7,i + 9) && argMatch(i + 10,i + 14) && argMatch(i + 13,i + 16)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (TAY(i + 4) && ASL_A(i) && ROL_STACK(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && LDA_VAL(i + 5) && ADC_SBC_IM_0(i + 6) && STA_A(i + 7)) {
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (TAY(i + 4) && ROL_STACK(i) && ASL_A(i + 1) && ADD_SUB_VAL(i + 2) && ADD_SUB_VAL(i + 3) && LDA_VAL(i + 5) && ADC_SBC_IM_0(i + 6) && STA_A(i + 7)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((STA_A(i + 5) || TAY(i + 5)) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4)) {
            if (ADD_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((STA_A(i + 6) || TAY(i + 6)) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && ASL_A(i + 2) && ADD_SUB_STACK(i + 3) && ADD_SUB_VAL(i + 4) && AND_ORA_EOR_VAL(i + 5)) if (argMatch(i + 1,i + 3)) {
            if (ADD_STACK(i + 3)) {
              rtl.rcArrW(listing,i + 3,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 3,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((STA_A(i + 7) || TAY(i + 7)) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4) && ADD_SUB_VAL(i + 5) && AND_ORA_EOR_VAL(i + 6)) if (argMatch(i + 1,i + 4)) {
            if (ADD_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((STA_A(i + 7) || TAY(i + 7)) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_STACK(i + 4) && ASL_A(i + 5) && ADD_SUB_VAL(i + 6)) if (argMatch(i + 1,i + 4)) {
            if (ADD_STACK(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((STA_A(i + 7) || TAY(i + 7)) && LDA(i) && (LDA_STACK(i) === false) && STA_STACK(i + 1) && ASL_A(i + 2) && ASL_A(i + 3) && ADD_SUB_VAL(i + 4) && ASL_A(i + 5) && ADD_SUB_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
            if (ADD_STACK(i + 6)) {
              rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 6,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if ((LDA_A(i) || ROL_A(i)) && ASL_STACK(i + 1) && ROL_STACK(i + 2)) {
            if (LDA_A(i + 3)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 5) && ASL_STACK(i + 3) && ROL_STACK(i + 4)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 7) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 9) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6) && ASL_STACK(i + 7) && ROL_STACK(i + 8)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 11) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6) && ASL_STACK(i + 7) && ROL_STACK(i + 8) && ASL_STACK(i + 9) && ROL_STACK(i + 10)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 13) && ASL_STACK(i + 3) && ROL_STACK(i + 4) && ASL_STACK(i + 5) && ROL_STACK(i + 6) && ASL_STACK(i + 7) && ROL_STACK(i + 8) && ASL_STACK(i + 9) && ROL_STACK(i + 10) && ASL_STACK(i + 11) && ROL_STACK(i + 12)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
          };
          if ((LDA_A(i) || ROL_A(i)) && ASL_STACK(i + 1)) {
            if (LDA_A(i + 2)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if ((MWY_BP2(i + 2) || LDY(i + 2)) && LDA_A(i + 3)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (ROL_A(i + 2) && LDA_A(i + 3)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
            if (ROL_A(i + 2) && (MWY_BP2(i + 3) || LDY(i + 3)) && LDA_A(i + 4)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
            if (ROL_A(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && MWY_BP2(i + 5) && LDY(i + 6) && LDA_A(i + 7)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
            if (ROL_A(i + 2) && MWY_BP2(i + 3) && LDY(i + 4) && LDA_A(i + 5)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
            if (ROL_A(i + 2) && MWY_BP2(i + 3) && LDY(i + 4) && INY(i + 5) && LDA_A(i + 6)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              return false;
            };
            if (MWY_BP2(i + 2) && LDY(i + 3) && LDA_A(i + 4)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 3) && ASL_STACK(i + 2)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 4) && ASL_STACK(i + 2) && (MWY_BP2(i + 3) || LDY(i + 3))) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 5) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && (MWY_BP2(i + 4) || LDY(i + 4))) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 6) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && (MWY_BP2(i + 5) || LDY(i + 5))) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 7) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && (MWY_BP2(i + 6) || LDY(i + 6))) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 8) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && ASL_STACK(i + 6) && (MWY_BP2(i + 7) || LDY(i + 7))) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 4) && ASL_STACK(i + 2) && ASL_STACK(i + 3)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 5) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 6) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 7) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && ASL_STACK(i + 6)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
            if (LDA_A(i + 8) && ASL_STACK(i + 2) && ASL_STACK(i + 3) && ASL_STACK(i + 4) && ASL_STACK(i + 5) && ASL_STACK(i + 6) && ASL_STACK(i + 7)) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
          };
          return Result;
        };
        function opt_SPL(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var err = 0;
          Result = true;
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_IM(i + 1) && (LDA_IM_0(i + 1) === false) && DEY(i + 3)) {
            err = 0;
            pas.System.val$6(pas.System.Copy(rtl.rcArrR(listing,i + 1),7,256),{get: function () {
                return p;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                p = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                err = v;
              }});
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            if (p > 127) rtl.rcArrW(listing,i,"\tldy #$FF");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && STY_STACK(i + 4) && (LDA_STACK(i + 5) || STA_STACK(i + 5))) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_A(i + 1) && DEY(i + 3) && STY_STACK(i + 4) && STA_STACK(i + 5) && (LDA_A(i + 6) || LDY(i + 6))) if (argMatch(i + 4,i + 5)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && LDA_STACK(i + 4)) if (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && ADD_SUB_VAL(i + 4) && STA_STACK(i + 5) && TYA(i + 6) && LDY_STACK(i + 7) && (LDA(i + 8) || MVA(i + 8))) if (argMatch(i + 5,i + 7)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && ADD_SUB(i + 4) && AND_ORA_EOR_VAL(i + 5) && STA(i + 6)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_IM_0(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7)) {
            rtl.rcArrW(listing,i,"\tlda #$00");
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 2,"\tlda #$00");
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda #$00");
            rtl.rcArrW(listing,i + 5,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 6,"\tlda #$00");
            rtl.rcArrW(listing,i + 7,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_IM_0(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && (STA_A(i + 7) === false) && (STY(i + 7) === false)) {
            rtl.rcArrW(listing,i,"\tlda #$00");
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 2,"\tlda #$00");
            rtl.rcArrW(listing,i + 3,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 4,"\tlda #$00");
            rtl.rcArrW(listing,i + 5,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && STY_STACK(i + 4) && MWY_BP2(i + 5) && LDY_IM(i + 6) && LDA_BP2_Y(i + 7) && ADD_STACK(i + 8)) if (argMatch(i + 1,i + 8)) {
            rtl.rcArrW(listing,i + 7,"\tadd (:bp2),y");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDA_STACK(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10)) if (argMatch(i + 4,i + 8) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 5,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          if (SPL(i + 2) && LDY_IM_0(i) && LDA_STACK(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && LDA_A(i + 7) && ADD_SUB_STACK(i + 8) && STA_A(i + 9) && LDA_A(i + 10) && ADC_SBC_STACK(i + 11) && STA_A(i + 12) && (ADC_SBC(i + 14) === false)) if (argMatch(i + 1,i + 4) && argMatch(i + 4,i + 11)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (SPL(i + 10) && SPL(i + 2) && LDY_IM_0(i) && LDA_VAL(i + 1) && DEY(i + 3) && STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDY_IM_0(i + 8) && LDA_VAL(i + 9) && DEY(i + 11) && STA_STACK(i + 12) && STY_STACK(i + 13) && STY_STACK(i + 14) && STY_STACK(i + 15)) if (argMatch(i + 1,i + 9)) {
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (SPL(i + 3) && STA_STACK(i) && LDY_IM_0(i + 1) && LDA_STACK(i + 2) && DEY(i + 4) && STA_STACK(i + 5) && STY_STACK(i + 6)) if (argMatch(i,i + 6) && argMatch(i + 2,i + 5) && (argMatch(i,i + 2) === false)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (SPL(i + 3) && STA_STACK(i) && LDY_IM_0(i + 1) && LDA_STACK(i + 2) && DEY(i + 4) && STA_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7)) if (argMatch(i,i + 7) && argMatch(i + 2,i + 5) && (argMatch(i,i + 2) === false)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (SPL(i + 3) && STA_STACK(i) && LDY_IM_0(i + 1) && LDA_STACK(i + 2) && DEY(i + 4) && STY_STACK(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && STA(i + 8) && (IY(i + 8) === false)) if (argMatch(i,i + 5) && argMatch(i + 5,i + 7) && (argMatch(i,i + 2) === false)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (SPL(i + 4) && LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_VAL(i + 3) && DEY(i + 5) && STA_STACK(i + 6) && STY_STACK(i + 7) && LDA(i + 8) && STA(i + 9) && LDA(i + 10) && ADD_SUB_STACK(i + 11)) if (argMatch(i + 1,i + 11)) {
            if (ADD_STACK(i + 11)) {
              rtl.rcArrW(listing,i + 11,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 11,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (SPL(i + 4) && LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA(i + 3) && DEY(i + 5) && ADD_SUB_VAL(i + 6) && ADD_SUB_STACK(i + 7) && (STA(i + 8) || TAY(i + 8))) if (argMatch(i + 1,i + 7)) {
            if (ADD(i + 7)) {
              rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 7,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (SPL(i + 4) && (ADD_SUB(i) || AND_ORA_EOR(i)) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_STACK(i + 3) && DEY(i + 5)) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (SPL(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_STACK(i + 3) && DEY(i + 5) && STA_STACK(i + 6)) if (argMatch(i + 1,i + 3) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (SPL(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_IM_0(i + 2) && LDA_A(i + 3) && DEY(i + 5) && STA_STACK(i + 6) && STA_STACK(i + 7) && STY_STACK(i + 8) && LDA_STACK(i + 9) && STA_STACK(i + 10)) if (argMatch(i + 1,i + 9) && argMatch(i + 6,i + 10) && (argMatch(i + 1,i + 3) === false)) {
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (SPL(i + 4) && LDY_IM_0(i) && LDA_A(i + 1) && STA_STACK(i + 2) && LDA_STACK(i + 3) && DEY(i + 5) && STY_STACK(i + 6) && ADD_SUB(i + 7) && STA_VAL(i + 8) && LDA_STACK(i + 9) && ADC_SBC(i + 10)) if (argMatch(i + 2,i + 3) && argMatch(i + 6,i + 9)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 9,"\ttya");
            return false;
          };
          if (SPL(i + 5) && LDY_IM_0(i) && LDA_A(i + 1) && STA_STACK(i + 2) && LDY_IM_0(i + 3) && LDA_STACK(i + 4) && DEY(i + 6)) if (argMatch(i + 2,i + 4)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (SPL(i + 6) && LDA(i) && (LDA_STACK(i) === false) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (LDA_STACK(i + 2) === false) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDY_IM_0(i + 4) && LDA(i + 5) && DEY(i + 7) && ADD_SUB_STACK(i + 8) && STA(i + 9) && TYA(i + 10) && ADC_SBC_STACK(i + 11) && STA(i + 12)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 11)) {
            if (ADD_STACK(i + 8)) {
              rtl.rcArrW(listing,i + 8,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 8,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (ADC_STACK(i + 11)) {
              rtl.rcArrW(listing,i + 11,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256))}
             else rtl.rcArrW(listing,i + 11,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (SPL(i + 12) && STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && LDA_A(i + 7) && ADC_SBC(i + 8) && STA_STACK(i + 9) && LDY_IM_0(i + 10) && LDA_STACK(i + 11) && DEY(i + 13) && STA_STACK(i + 14) && STY_STACK(i + 15) && STY_STACK(i + 16) && STY_STACK(i + 17)) if (argMatch(i,i + 11) && argMatch(i + 11,i + 14) && argMatch(i + 3,i + 15) && argMatch(i + 6,i + 16) && argMatch(i + 9,i + 17)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          if (LDY_IM_0(i) && (LDA_A(i + 1) || AND_ORA_EOR(i + 1)) && SPL(i + 2) && DEY(i + 3)) {
            if (STA_A(i + 4) && LOCAL(i + 5) && LDA_A(i + 6)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (STY(i + 4) && ASL_A(i + 5) && TAY(i + 6)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (ADD_SUB(i + 4) && STA_STACK(i + 5) && TYA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDY_STACK(i + 9)) if (argMatch(i + 5,i + 9)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 5,"\ttay");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              return false;
            };
            if (STY_STACK(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ASL_STACK(i + 7) && ROL_A(i + 8) && STA_STACK(i + 9) && LDY_STACK(i + 10)) if (argMatch(i + 4,i + 6) && argMatch(i + 6,i + 9) && argMatch(i + 5,i + 7) && argMatch(i + 7,i + 10)) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 1,"\tasl @");
              rtl.rcArrW(listing,i + 2,"\ttay");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              return false;
            };
            if (STA_STACK(i + 4) && STY_STACK(i + 5) && STY_STACK(i + 6) && STY_STACK(i + 7) && LDA_STACK(i + 8) && ADD_SUB(i + 9) && STA_VAL(i + 10) && LDA_STACK(i + 11) && ADC_SBC(i + 12) && STA(i + 13) && (ADC_SBC(i + 15) === false)) if (argMatch(i + 4,i + 8) && argMatch(i + 5,i + 11)) {
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 11,"\ttya");
              return false;
            };
            if (STY_STACK(i + 4) && ADD_SUB(i + 5) && STA_VAL(i + 6) && LDA_STACK(i + 7) && ADC_SBC(i + 8)) if (argMatch(i + 4,i + 7)) {
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 7,"\ttya");
              return false;
            };
            if (STY_STACK(i + 4) && ADD(i + 5) && STA_VAL(i + 6) && LDA(i + 7) && ADC_STACK(i + 8)) if (argMatch(i + 4,i + 8)) {
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 8,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 7,"\ttya");
              return false;
            };
            if (STY_STACK(i + 4) && STA(i + 5) && STA(i + 6) && LDA_STACK(i + 7) && STA(i + 8) && STA(i + 9)) if (argMatch(i + 4,i + 7)) {
              rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 4,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
              rtl.rcArrW(listing,i + 5,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256));
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              return false;
            };
            if (STY_STACK(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6) && STA_VAL(i + 7) && (STA_A(i + 8) === false)) if (argMatch(i + 4,i + 6)) {
              rtl.rcArrW(listing,i + 4,"\tsty " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              return false;
            };
            if (STY_STACK(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_SUB_STACK(i + 7) && STA(i + 8) && (ADC_SBC(i + 10) === false)) if (argMatch(i + 5,i + 7) && (argMatch(i + 4,i + 6) === false)) {
              rtl.rcArrW(listing,i + 4,"\tsty #$00");
              return false;
            };
            if (STY_STACK(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADD_STACK(i + 7)) if (argMatch(i + 4,i + 7)) {
              rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 5,"\ttya");
              rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
              rtl.rcArrW(listing,i + 7,"");
              return false;
            };
            if (STA_A(i + 4) && (LDA_A(i + 5) || ASL(i + 5) || LSR(i + 5))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (STA_A(i + 4) && STA_A(i + 5) && (LDA_A(i + 6) || ASL(i + 6) || LSR(i + 6))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (STA_im_0(i + 4) && STY_im_0(i + 5) && STY_im_0(i + 6) && (STA_A(i + 7) === false) && (STY(i + 7) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              return false;
            };
            if (STA_im_0(i + 4) && (STA_A(i + 5) || STY(i + 5))) {
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STA_im_0(i + 4) && (STA_A(i + 5) === false) && (STY(i + 5) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STY_im_0(i + 4) && (TYA(i + 5) || CMP(i + 5) || ADD_SUB(i + 5) || AND_ORA_EOR(i + 5) || SKIP(i + 5))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STY_im_0(i + 4) && STA_im_0(i + 5) && (STA_A(i + 6) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              return false;
            };
            if (STA_A(i + 4) && STY_im_0(i + 5)) {
              rtl.rcArrW(listing,i + 5,"");
              return false;
            };
            if (STY_im_0(i + 4) && STA_A(i + 5)) {
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STY_im_0(i + 4) && STY_im_0(i + 5) && (LDA_A(i + 6) || LDY(i + 6) || MWY(i + 6))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              return false;
            };
            if (STY_im_0(i + 4) && (LDA_A(i + 5) || LDY(i + 5) || MWY(i + 5))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STY_im_0(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && (ADC_SBC(i + 8) === false)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STY_im_0(i + 4) && ADD_SUB(i + 5) && TAY(i + 6)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STY_im_0(i + 4) && ADD_SUB(i + 5) && STA(i + 6) && LDA(i + 7) && ADC_SBC(i + 8) && STA(i + 9)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              return false;
            };
            if (STA_A(i + 4) && (MWY(i + 5) || LDY(i + 5))) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
          };
          return Result;
        };
        function opt_POKE(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var tmp = "";
          var yes = false;
          Result = true;
          if (((pas.System.Pos(rtl.rcArrR(listing,i),rtl.rcArrR(listing,i + 3)) > 0) || ((pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) && (pas.System.Pos("\tlda >",rtl.rcArrR(listing,i + 3)) > 0))) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && TAY(i + 2) && LDA_VAL(i + 3) && (LDA_IM(i + 3) === false) && ADC_IM_0(i + 4) && STA_BP_1(i + 5)) {
            if (LDA_BP_Y(i + 6) && (STA(i + 7) || LSR_A(i + 7) || ASL_A(i + 7)) && (pas.System.Pos(" :STACK",rtl.rcArrR(listing,i + 7)) === 0)) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tsta (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && STA_STACK(i + 7) && LDA_STACK(i + 8) && STA_BP_1(i + 9)) if (argMatch(i + 7,i + 8) === false) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && TAY(i + 7) && LDA(i + 8) && STA(i + 9)) if (argMatch(i + 7,i + 8) === false) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              if (LDA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 9)) rtl.rcArrW(listing,i + 9,"\tsta (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && LDY(i + 7) && STA(i + 8)) if (argMatch(i + 7,i + 8) === false) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA(i + 6) && (LDA_BP_Y(i + 6) === false) && (LDA_STACK(i + 6) === false) && (AND_ORA_EOR(i + 7) || ADD_SUB(i + 7)) && (pas.System.Pos(" (:bp),y",rtl.rcArrR(listing,i + 7)) > 0) && STA(i + 8) && (STA_BP_Y(i + 8) === false) && (STA_STACK(i + 8) === false)) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 7,pas.System.Copy(rtl.rcArrR(listing,i + 7),1,5) + "(:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && AND_ORA_EOR(i + 7) && (STA_VAL(i + 8) || CMP(i + 8))) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
              if (CMP_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tcmp (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && STA_STACK(i + 7)) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && CMP(i + 7)) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              if (CMP_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tcmp (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA_BP_Y(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && (MWY_BP2(i + 9) || LDY(i + 9))) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
            if (LDA(i + 6) && STA_VAL(i + 7)) {
              if (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) {
                rtl.rcArrW(listing,i + 4,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2")}
               else rtl.rcArrW(listing,i + 4,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              if (LDA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tsta (:bp2),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              return false;
            };
          };
          if ((pas.System.Pos("+",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,i)) === 1)) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i),2,256);
            yes = false;
            for (var $l = i + 1, $end = l - 1; $l <= $end; $l++) {
              p = $l;
              if (MWY_BP2(p) && (rtl.rcArrR(listing,p) === ("\tmwy " + tmp + " :bp2"))) {
                rtl.rcArrW(listing,p,"")}
               else if (pas.System.Pos("(:bp2),y",rtl.rcArrR(listing,p)) > 0) {
                rtl.rcArrW(listing,p,pas.System.Copy(rtl.rcArrR(listing,p),1,5) + "(" + tmp + "),y");
                yes = true;
              } else if ((pas.System.Pos("+",rtl.rcArrR(listing,p)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,p)) === 1)) {
                if (rtl.rcArrR(listing,p).length === 1) rtl.rcArrW(listing,p,"");
                break;
              };
            };
            if (yes) {
              rtl.rcArrW(listing,i,"");
              return false;
            };
          };
          if (((pas.System.Pos("+",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,i)) === 1)) && LDY_VAL(i + 1) && LDA_VAL(i + 2) && (("\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + "+1") === rtl.rcArrR(listing,i + 2)) && STA_BP_1(i + 3)) {
            if (LDA(i + 4) && ADD_SUB(i + 5) && STA(i + 6)) {
              rtl.rcArrW(listing,i + 1,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 2,"\tldy #$00");
              rtl.rcArrW(listing,i + 3,"");
              if (LDA_BP_Y(i + 4)) rtl.rcArrW(listing,i + 4,"\tlda (:bp2),y");
              if (ADD_BP_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tadd (:bp2),y");
              if (SUB_BP_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tsub (:bp2),y");
              if (STA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tsta (:bp2),y");
              return false;
            };
            if (LDA(i + 4) && AND_ORA_EOR(i + 5) && STA(i + 6)) {
              rtl.rcArrW(listing,i + 1,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 2,"\tldy #$00");
              rtl.rcArrW(listing,i + 3,"");
              if (LDA_BP_Y(i + 4)) rtl.rcArrW(listing,i + 4,"\tlda (:bp2),y");
              if (AND_BP_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tand (:bp2),y");
              if (ORA_BP_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\tora (:bp2),y");
              if (EOR_BP_Y(i + 5)) rtl.rcArrW(listing,i + 5,"\teor (:bp2),y");
              if (STA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tsta (:bp2),y");
              return false;
            };
            if (LDA(i + 4) && LDY(i + 5) && STA(i + 6)) {
              rtl.rcArrW(listing,i + 1,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 2,"\tldy #$00");
              rtl.rcArrW(listing,i + 3,"");
              if (LDA_BP_Y(i + 4)) rtl.rcArrW(listing,i + 4,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tsta (:bp2),y");
              return false;
            };
          };
          if (((pas.System.Pos("+",rtl.rcArrR(listing,i)) === 1) || (pas.System.Pos("-",rtl.rcArrR(listing,i)) === 1)) && LDA_VAL(i + 1) && (LDA_IM(i + 1) === false) && ADD(i + 2) && TAY(i + 3) && LDA_VAL(i + 4) && ((rtl.rcArrR(listing,i + 1) + "+1") === rtl.rcArrR(listing,i + 4)) && ADC_IM_0(i + 5) && STA_BP_1(i + 6)) {
            if (LDA(i + 7) && STA(i + 8)) {
              rtl.rcArrW(listing,i + 1,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 2,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda (:bp2),y");
              if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
              return false;
            };
          };
          return Result;
        };
        function opt_BP(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var tmp = "";
          var yes = false;
          Result = true;
          if (rtl.rcArrR(listing,i) === "\tmwy :bp2 :bp2") {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((pas.System.Pos("\tldy >",rtl.rcArrR(listing,i)) > 0) && STY_BP_1(i + 1) && (pas.System.Pos("\tldy <",rtl.rcArrR(listing,i + 2)) > 0) && LDA_BP_Y(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tadd #$01") && STA_BP_Y(i + 5)) if (pas.System.Copy(rtl.rcArrR(listing,i),7,256) === pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256)) {
            rtl.rcArrW(listing,i,"\tinc " + pas.System.Copy(rtl.rcArrR(listing,i),7,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((pas.System.Pos("\tldy >",rtl.rcArrR(listing,i)) > 0) && STY_BP_1(i + 1) && (pas.System.Pos("\tldy <",rtl.rcArrR(listing,i + 2)) > 0) && LDA_BP_Y(i + 3) && (rtl.rcArrR(listing,i + 4) === "\tsub #$01") && STA_BP_Y(i + 5)) if (pas.System.Copy(rtl.rcArrR(listing,i),7,256) === pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256)) {
            rtl.rcArrW(listing,i,"\tdec " + pas.System.Copy(rtl.rcArrR(listing,i),7,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_VAL(i) && (IY(i) === false) && LDY(i + 1) && STY_BP_1(i + 2) && TAY(i + 3) && LDA_BP_Y(i + 4)) {
            rtl.rcArrW(listing,i + 3,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (STA_BP_1(i + 5) && STA_STACK(i) && STA_BP_1(i + 1) && LDA_BP_Y(i + 2) && STA_STACK(i + 3) && LDA_STACK(i + 4)) if (argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 6) && STA_STACK(i) && STA_BP_1(i + 1) && LDA_BP_Y(i + 2) && (AND_ORA_EOR(i + 3) || ADD_SUB(i + 3)) && STA_STACK(i + 4) && LDA_STACK(i + 5)) if (argMatch(i,i + 5)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (STY_BP_1(i + 7) && LDY(i) && STY_BP_1(i + 1) && LDY(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && (STA(i + 5) || AND_ORA_EOR(i + 5)) && LDY(i + 6)) if ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 6)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 7))) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (STY_BP_1(i + 8) && LDY(i) && STY_BP_1(i + 1) && LDY(i + 2) && LDA(i + 3) && AND_ORA_EOR(i + 4) && AND_ORA_EOR(i + 5) && STA(i + 6) && LDY(i + 7)) if ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 8))) {
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (STA_BP_1(i + 3) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && LDY_STACK(i + 4)) if (argMatch(i + 1,i + 4)) {
            rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 3,"\tsty :bp+1");
            return false;
          };
          if (STA_BP_1(i + 4) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && ADD_SUB(i + 3) && LDY_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            if (ADD_IM_0(i + 3) || SUB_IM_0(i + 3)) {
              rtl.rcArrW(listing,i + 3,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 4,"\tsty :bp+1");
              rtl.rcArrW(listing,i + 2,"");
            };
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_STACK(i) && SUB(i + 1) && (SUB_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_STACK(i + 3) && SBC(i + 4) && (SBC_STACK(i + 4) === false) && LDY_STACK(i + 6)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 2,"\ttay");
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_VAL(i) && (IY(i) === false) && (ADD_IM_0(i + 1) || SUB_IM_0(i + 1)) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && LDY_STACK(i + 6)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            if (ADC(i + 4)) {
              rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256))}
             else rtl.rcArrW(listing,i + 4,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            if (ADD_IM_0(i + 4) || SUB_IM_0(i + 4)) {
              rtl.rcArrW(listing,i + 3,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 4,"\tsty :bp+1");
              rtl.rcArrW(listing,i + 5,"");
            };
            return false;
          };
          if (STA_BP_1(i + 3) && LDY(i) && LDA(i + 1) && (IY(i + 1) === false) && ADD_IM_0(i + 2)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"\tsty :bp+1");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STY_BP_1(i + 3) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDY_VAL(i + 4) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STY_BP_1(i + 3) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDY_VAL(i + 4) && LDA_BP_Y(i + 5) && LDY_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STY_BP_1(i + 3) && (LDA_A(i) === false) && STA_STACK(i + 1) && LDY_VAL(i + 2) && LDY_VAL(i + 4) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (IY(i + 1) === false) && STA_STACK(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY(i + 6) && LDA_A(i + 7) && (ADD_SUB(i + 8) || AND_ORA_EOR(i + 8)) && LDY_STACK(i + 9)) if (argMatch(i + 2,i + 9)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 9,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 10,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 10) && ADD(i) && STA_STACK(i + 1) && LDA_STACK(i + 2) && ADC_IM_0(i + 3) && STA_STACK(i + 4) && LDA_IM_0(i + 5) && ADD_STACK(i + 6) && TAY(i + 7) && LDA_VAL(i + 8) && ADC_STACK(i + 9)) if (argMatch(i + 1,i + 6) && argMatch(i + 2,i + 4) && argMatch(i + 4,i + 9)) {
            rtl.rcArrW(listing,i + 1,"\ttay");
            rtl.rcArrW(listing,i + 3,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 4,"\tsta :bp+1");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (STA_BP_1(i + 7) && (ADC(i) === false) && LDA_IM_0(i + 2) && ADD_STACK(i + 3) && TAY(i + 4) && LDA_IM(i + 5) && (LDA_IM_0(i + 5) === false) && ADC_STACK(i + 6)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            return false;
          };
          if (STA_BP_Y(i + 11) && LDA(i) && STA_STACK(i + 1) && LDA(i + 2) && STA_STACK(i + 3) && LDA(i + 4) && ADD_SUB(i + 5) && TAY(i + 6) && LDA(i + 7) && ADC_SBC_STACK(i + 8) && STA_BP_1(i + 9) && LDA_STACK(i + 10)) if (argMatch(i + 1,i + 8) && argMatch(i + 3,i + 10)) {
            rtl.rcArrW(listing,i + 10,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            if (ADC_STACK(i + 8)) {
              rtl.rcArrW(listing,i + 8,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 8,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_BP_Y(i + 9) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && ADD_SUB(i + 3) && TAY(i + 4) && LDA_A(i + 5) && ADC_SBC(i + 6) && STA_BP_1(i + 7) && LDA_STACK(i + 8)) if (argMatch(i + 1,i + 8)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (STA_BP_Y(i + 6) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_BP_1(i + 3) && LDY(i + 4) && LDA_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 3,"\tsty :bp+1");
            return false;
          };
          if (STA_BP_1(i + 5) && STY_STACK(i) && LDA(i + 1) && ADD_SUB(i + 2) && STA(i + 3) && LDA_STACK(i + 4)) if (argMatch(i,i + 4)) {
            rtl.rcArrW(listing,i,"\tsty :bp+1");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(i + 3) === false) && (IY(i + 3) === false) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && (LDA_IM_0(i + 9) === false) && ADC_STACK(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDY_IM(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && LDY_IM(i + 3) && LDA_BP2_Y(i + 4) && STA_VAL(i + 5) && LDA_STACK(i + 6)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && STA_A(i + 6) && LDA_STACK(i + 7) && STA_A(i + 8)) if (argMatch(i + 1,i + 5) && argMatch(i + 4,i + 7)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            return false;
          };
          if (LDY(i + 2) && STA_STACK(i) && MWY_BP2(i + 1) && LDA_STACK(i + 3) && STA(i + 4) && IY(i + 4)) if (argMatch(i,i + 3) && (argMatch(i,i + 2) === false)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY(i + 3) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && MWY_BP2(i + 2) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6)) if (argMatch(i + 1,i + 6)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDY(i + 3) && LDA_VAL(i) && (IY(i) === false) && STA_STACK(i + 1) && MWY_BP2(i + 2) && LDA_BP2_Y(i + 4) && LDY_STACK(i + 5)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDY(i + 7) && LDA_IM(i) && STA_STACK(i + 1) && MWY_BP2(i + 2) && LDY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDA_STACK(i + 8)) if (argMatch(i + 1,i + 8) && (argMatch(i + 1,i + 5) === false)) {
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            return false;
          };
          if (LDY(i + 5) && MWY_BP2(i) && LDY(i + 1) && LDA(i + 2) && SKIP(i + 3) && MWY(i + 4) && LDA(i + 6)) if (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 4)) {
            rtl.rcArrW(listing,i + 4,"");
            if (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 5)) rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_STACK(i) && MWY_BP2(i + 1) && LDY(i + 2) && LDA_STACK(i + 3)) if (argMatch(i,i + 3)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_A(i) && MWY_BP2(i + 1) && LDY(i + 2) && LDA_A(i + 3)) {
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((LDA_A(i) || AND_ORA_EOR(i)) && MWY_BP2(i + 1) && (pas.System.Pos("\tmwy #",rtl.rcArrR(listing,i + 1)) === 0) && LDY_IM_0(i + 2) && STA_BP2_Y(i + 3) && (rtl.rcArrR(listing,i + 4) === "")) {
            yes = true;
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (argMatch(p,i + 1)) {
                yes = false;
                break;
              };
            };
            if (yes) {
              tmp = GetString$1(i + 1);
              rtl.rcArrW(listing,i + 1,"\tmvy " + tmp + "+1 :bp+1");
              rtl.rcArrW(listing,i + 2,"\tldy " + tmp);
              rtl.rcArrW(listing,i + 3,"\tsta (:bp),y");
              return false;
            };
          };
          if ((ASL(i) || LSR(i)) && MWY_BP2(i + 1) && (pas.System.Pos("\tmwy #",rtl.rcArrR(listing,i + 1)) === 0) && LDY_IM_0(i + 2) && STA_BP2_Y(i + 3) && (rtl.rcArrR(listing,i + 4) === "")) {
            yes = true;
            for (var $l1 = i - 1; $l1 >= 0; $l1--) {
              p = $l1;
              if (argMatch(p,i + 1)) {
                yes = false;
                break;
              };
            };
            if (yes) {
              tmp = GetString$1(i + 1);
              rtl.rcArrW(listing,i + 1,"\tmvy " + tmp + "+1 :bp+1");
              rtl.rcArrW(listing,i + 2,"\tldy " + tmp);
              rtl.rcArrW(listing,i + 3,"\tsta (:bp),y");
              return false;
            };
          };
          if (STA_BP2_Y(i + 12) && LDY_IM_0(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11)) if (argMatch(i + 2,i + 8) && argMatch(i + 5,i + 11)) {
            rtl.rcArrW(listing,i,"\tmwy " + GetString$1(i + 6) + " :TMP");
            rtl.rcArrW(listing,i + 1,"\tldy #$00");
            rtl.rcArrW(listing,i + 2,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 3,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 4,"\tiny");
            rtl.rcArrW(listing,i + 5,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 6,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (STA_BP2_Y(i + 7) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && INY(i + 8) && LDA_STACK(i + 9)) if (argMatch(i + 1,i + 6) && argMatch(i + 3,i + 9)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_BP2_Y(i + 11) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && ADD_BP2_Y(i + 7) && INY(i + 8) && STA(i + 9) && LDA_STACK(i + 10)) if (argMatch(i + 1,i + 6) && argMatch(i + 3,i + 10)) {
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (ADC_BP2_Y(i + 15) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_STACK(i + 7) && MWY_BP2(i + 8) && LDY(i + 9) && LDA_STACK(i + 10) && ADD_BP2_Y(i + 11) && INY(i + 12) && STA(i + 13) && LDA_STACK(i + 14) && STA(i + 16) && LDA_STACK(i + 17) && ADC(i + 18) && STA(i + 19) && LDA_STACK(i + 20) && ADC(i + 21) && STA(i + 22)) if (argMatch(i + 1,i + 10) && argMatch(i + 3,i + 14) && argMatch(i + 5,i + 17) && argMatch(i + 7,i + 20)) {
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (STA_BP2_Y(i + 13) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA(i + 6) && STA_BP2_Y(i + 7) && INY(i + 8) && LDA(i + 9) && STA_BP2_Y(i + 10) && INY(i + 11) && LDA_STACK(i + 12) && INY(i + 14) && LDA_STACK(i + 15) && STA_BP2_Y(i + 16)) if (argMatch(i + 1,i + 12) && argMatch(i + 3,i + 15)) {
            rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_Y(i + 15) && MWY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) && LDY_IM(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 10)) && LDA_BP2_Y(i + 2) && ADD_SUB(i + 3) && STA_STACK(i + 4) && INY(i + 5) && LDA_BP2_Y(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 4,i + 11) && argMatch(i + 8,i + 14)) {
            rtl.rcArrW(listing,i + 4,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (STA_BP2_Y(i + 15) && MWY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) && LDY_IM(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 10)) && LDA_A(i + 2) && (ADD_BP2_Y(i + 3) || SUB_BP2_Y(i + 3)) && STA_STACK(i + 4) && INY(i + 5) && LDA_A(i + 6) && (ADC_BP2_Y(i + 7) || SBC_BP2_Y(i + 7)) && STA_STACK(i + 8) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 4,i + 11) && argMatch(i + 8,i + 14)) {
            rtl.rcArrW(listing,i + 4,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (LDA_BP2_Y(i + 4) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && STA_STACK(i + 5) && LDA_STACK(i + 6) && (ADD_SUB(i + 7) || AND_ORA_EOR(i + 7)) && (IY(i + 7) === false) && STA(i + 8) && LDA_STACK(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA(i + 11)) if (argMatch(i + 2,i + 6) && argMatch(i + 5,i + 9)) {
            rtl.rcArrW(listing,i + 1,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 4,"\tiny");
            rtl.rcArrW(listing,i + 5,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (LDA_BP2_Y(i + 4) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && STA_STACK(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && (ADD_SUB_STACK(i + 7) || AND_ORA_EOR_STACK(i + 7)) && STA(i + 8) && LDA_A(i + 9) && (IY(i + 9) === false) && (ADC_SBC_STACK(i + 10) || AND_ORA_EOR_STACK(i + 10)) && STA(i + 11)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 7),1,5) + "(:bp2),y");
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 4,"\tiny");
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 6,pas.System.Copy(rtl.rcArrR(listing,i + 10),1,5) + "(:bp2),y");
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if ((i > 0) && STA_BP2_Y(i + 28) && MWY_BP2(i - 1) && (rtl.rcArrR(listing,i - 1) === rtl.rcArrR(listing,i + 16)) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 17)) && LDA_BP2_Y(i + 1) && (ADD_SUB(i + 2) || AND_ORA_EOR(i + 2)) && STA_STACK(i + 3) && INY(i + 4) && LDA_BP2_Y(i + 5) && (ADC_SBC(i + 6) || AND_ORA_EOR(i + 6)) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_STACK(i + 11) && INY(i + 12) && LDA_BP2_Y(i + 13) && (ADC_SBC(i + 14) || AND_ORA_EOR(i + 14)) && STA_STACK(i + 15) && LDA_STACK(i + 18) && STA_BP2_Y(i + 19) && INY(i + 20) && LDA_STACK(i + 21) && STA_BP2_Y(i + 22) && INY(i + 23) && LDA_STACK(i + 24) && STA_BP2_Y(i + 25) && INY(i + 26) && LDA_STACK(i + 27)) if (argMatch(i + 3,i + 18) && argMatch(i + 7,i + 21) && argMatch(i + 11,i + 24) && argMatch(i + 15,i + 27)) {
            rtl.rcArrW(listing,i + 3,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 7,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 11,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 15,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            rtl.rcArrW(listing,i + 25,"");
            rtl.rcArrW(listing,i + 26,"");
            rtl.rcArrW(listing,i + 27,"");
            rtl.rcArrW(listing,i + 28,"");
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDA(i) && ADD_SUB(i + 1) && STA(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA(i + 8) && LDA(i + 9) && ADC_SBC(i + 10) && STA(i + 11) && LDA(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDY_IM_0(i + 18) && LDA(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA(i + 22) && STA_BP2_Y(i + 23) && INY(i + 24) && LDA(i + 25) && STA_BP2_Y(i + 26) && INY(i + 27) && LDA(i + 28)) if ((argMatch(i + 2,i + 12) === false) && (argMatch(i + 2,i + 13) === false) && argMatch(i + 2,i + 19) && argMatch(i + 5,i + 22) && argMatch(i + 8,i + 25) && argMatch(i + 11,i + 28)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 12);
            listing_tmp[1] = rtl.rcArrR(listing,i + 13);
            listing_tmp[2] = rtl.rcArrR(listing,i + 14);
            listing_tmp[3] = rtl.rcArrR(listing,i + 15);
            listing_tmp[4] = rtl.rcArrR(listing,i + 16);
            listing_tmp[5] = rtl.rcArrR(listing,i + 17);
            listing_tmp[6] = rtl.rcArrR(listing,i + 18);
            listing_tmp[7] = rtl.rcArrR(listing,i);
            listing_tmp[8] = rtl.rcArrR(listing,i + 1);
            listing_tmp[9] = rtl.rcArrR(listing,i + 20);
            listing_tmp[10] = rtl.rcArrR(listing,i + 21);
            listing_tmp[11] = rtl.rcArrR(listing,i + 3);
            listing_tmp[12] = rtl.rcArrR(listing,i + 4);
            listing_tmp[13] = rtl.rcArrR(listing,i + 20);
            listing_tmp[14] = rtl.rcArrR(listing,i + 21);
            listing_tmp[15] = rtl.rcArrR(listing,i + 6);
            listing_tmp[16] = rtl.rcArrR(listing,i + 7);
            listing_tmp[17] = rtl.rcArrR(listing,i + 20);
            listing_tmp[18] = rtl.rcArrR(listing,i + 21);
            listing_tmp[19] = rtl.rcArrR(listing,i + 9);
            listing_tmp[20] = rtl.rcArrR(listing,i + 10);
            listing_tmp[21] = rtl.rcArrR(listing,i + 20);
            for (p = 0; p <= 21; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            rtl.rcArrW(listing,i + 25,"");
            rtl.rcArrW(listing,i + 26,"");
            rtl.rcArrW(listing,i + 27,"");
            rtl.rcArrW(listing,i + 28,"");
            rtl.rcArrW(listing,i + 29,"");
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDA_IM(i) && STA_A(i + 1) && LDA_IM(i + 2) && STA_A(i + 3) && LDA_IM(i + 4) && STA_A(i + 5) && LDA_IM(i + 6) && STA_A(i + 7) && LDA_A(i + 8) && ADD_SUB(i + 9) && STA_BP2(i + 10) && LDA_A(i + 11) && ADC_SBC(i + 12) && STA_BP2_1(i + 13) && LDY_IM_0(i + 14) && LDA(i + 15) && ADD_SUB(i + 16) && STA_BP2_Y(i + 17) && INY(i + 18) && LDA(i + 19) && ADC_SBC(i + 20) && STA_BP2_Y(i + 21) && INY(i + 22) && LDA(i + 23) && ADC_SBC(i + 24) && STA_BP2_Y(i + 25) && INY(i + 26) && LDA(i + 27) && ADC_SBC(i + 28)) if (argMatch(i + 1,i + 16) && argMatch(i + 3,i + 20) && argMatch(i + 5,i + 24) && argMatch(i + 7,i + 28)) {
            if (ADD(i + 16)) {
              rtl.rcArrW(listing,i + 16,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 20,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 24,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 28,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            } else {
              rtl.rcArrW(listing,i + 16,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
              rtl.rcArrW(listing,i + 20,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              rtl.rcArrW(listing,i + 24,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
              rtl.rcArrW(listing,i + 28,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            };
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (STA_BP2_Y(i + 15) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 10)) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM(i + 6) === false) && STA_BP2(i + 7) && (rtl.rcArrR(listing,i + 8) === (rtl.rcArrR(listing,i + 6) + "+1")) && STA_BP2_1(i + 9) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 2,i + 11) && argMatch(i + 5,i + 14)) {
            if (pas.System.Pos(rtl.rcArrR(listing,i + 6),rtl.rcArrR(listing,i + 8)) > 0) {
              rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256) + " :TMP");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
            } else {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
              rtl.rcArrW(listing,i + 1,"\tsta :TMP");
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
              rtl.rcArrW(listing,i + 3,"\tsta :TMP+1");
            };
            rtl.rcArrW(listing,i + 4,"\tldy #$00");
            rtl.rcArrW(listing,i + 5,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 6,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 7,"\tiny");
            rtl.rcArrW(listing,i + 8,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 9,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (STA_BP2_Y(i + 37) && STA_BP2(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_BP2_1(i + 3) && LDY(i + 4) && (rtl.rcArrR(listing,i + 4) === rtl.rcArrR(listing,i + 26)) && LDA_BP2_Y(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_STACK(i + 11) && INY(i + 12) && LDA_BP2_Y(i + 13) && (ADC_SBC(i + 14) || AND_ORA_EOR(i + 14)) && STA_STACK(i + 15) && INY(i + 16) && LDA_BP2_Y(i + 17) && (ADC_SBC(i + 18) || AND_ORA_EOR(i + 18)) && STA_STACK(i + 19) && LDA_A(i + 20) && ADD_SUB(i + 21) && STA_BP2(i + 22) && LDA_A(i + 23) && ADC_SBC(i + 24) && STA_BP2_1(i + 25) && LDA_STACK(i + 27) && STA_BP2_Y(i + 28) && INY(i + 29) && LDA_STACK(i + 30) && STA_BP2_Y(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && STA_BP2_Y(i + 34) && INY(i + 35) && LDA_STACK(i + 36)) if (argMatch(i + 7,i + 27) && argMatch(i + 11,i + 30) && argMatch(i + 15,i + 33) && argMatch(i + 19,i + 36)) {
            rtl.rcArrW(listing,i + 22,"\tsta :TMP");
            rtl.rcArrW(listing,i + 25,"\tsta :TMP+1");
            listing_tmp[0] = rtl.rcArrR(listing,i + 20);
            listing_tmp[1] = rtl.rcArrR(listing,i + 21);
            listing_tmp[2] = rtl.rcArrR(listing,i + 22);
            listing_tmp[3] = rtl.rcArrR(listing,i + 23);
            listing_tmp[4] = rtl.rcArrR(listing,i + 24);
            listing_tmp[5] = rtl.rcArrR(listing,i + 25);
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            listing_tmp[7] = rtl.rcArrR(listing,i + 5);
            listing_tmp[8] = rtl.rcArrR(listing,i + 6);
            listing_tmp[9] = "\tsta (:TMP),y";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = rtl.rcArrR(listing,i + 9);
            listing_tmp[12] = rtl.rcArrR(listing,i + 10);
            listing_tmp[13] = "\tsta (:TMP),y";
            listing_tmp[14] = "\tiny";
            listing_tmp[15] = rtl.rcArrR(listing,i + 13);
            listing_tmp[16] = rtl.rcArrR(listing,i + 14);
            listing_tmp[17] = "\tsta (:TMP),y";
            listing_tmp[18] = "\tiny";
            listing_tmp[19] = rtl.rcArrR(listing,i + 17);
            listing_tmp[20] = rtl.rcArrR(listing,i + 18);
            listing_tmp[21] = "\tsta (:TMP),y";
            for (p = 0; p <= 21; p++) rtl.rcArrW(listing,i + p + 4,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 26,"");
            rtl.rcArrW(listing,i + 27,"");
            rtl.rcArrW(listing,i + 28,"");
            rtl.rcArrW(listing,i + 29,"");
            rtl.rcArrW(listing,i + 30,"");
            rtl.rcArrW(listing,i + 31,"");
            rtl.rcArrW(listing,i + 32,"");
            rtl.rcArrW(listing,i + 33,"");
            rtl.rcArrW(listing,i + 34,"");
            rtl.rcArrW(listing,i + 35,"");
            rtl.rcArrW(listing,i + 36,"");
            rtl.rcArrW(listing,i + 37,"");
            return false;
          };
          if (STA_BP2_Y(i + 23) && STA_BP2(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_BP2_1(i + 3) && LDY(i + 4) && (rtl.rcArrR(listing,i + 4) === rtl.rcArrR(listing,i + 18)) && LDA_BP2_Y(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_STACK(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_STACK(i + 11) && LDA_A(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA_A(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDA_STACK(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA_STACK(i + 22)) if (argMatch(i + 7,i + 19) && argMatch(i + 11,i + 22)) {
            rtl.rcArrW(listing,i + 14,"\tsta :TMP");
            rtl.rcArrW(listing,i + 17,"\tsta :TMP+1");
            listing_tmp[0] = rtl.rcArrR(listing,i + 12);
            listing_tmp[1] = rtl.rcArrR(listing,i + 13);
            listing_tmp[2] = rtl.rcArrR(listing,i + 14);
            listing_tmp[3] = rtl.rcArrR(listing,i + 15);
            listing_tmp[4] = rtl.rcArrR(listing,i + 16);
            listing_tmp[5] = rtl.rcArrR(listing,i + 17);
            listing_tmp[6] = rtl.rcArrR(listing,i + 4);
            listing_tmp[7] = rtl.rcArrR(listing,i + 5);
            listing_tmp[8] = rtl.rcArrR(listing,i + 6);
            listing_tmp[9] = "\tsta (:TMP),y";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = rtl.rcArrR(listing,i + 9);
            listing_tmp[12] = rtl.rcArrR(listing,i + 10);
            listing_tmp[13] = "\tsta (:TMP),y";
            for (p = 0; p <= 13; p++) rtl.rcArrW(listing,i + p + 4,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 18,"");
            rtl.rcArrW(listing,i + 19,"");
            rtl.rcArrW(listing,i + 20,"");
            rtl.rcArrW(listing,i + 21,"");
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            return false;
          };
          if (STA_BP2_Y(i + 21) && STA_BP2(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_BP2_1(i + 3) && LDY(i + 4) && (rtl.rcArrR(listing,i + 4) === rtl.rcArrR(listing,i + 16)) && LDA_BP2_Y(i + 5) && STA_STACK(i + 6) && INY(i + 7) && LDA_BP2_Y(i + 8) && STA_STACK(i + 9) && LDA_A(i + 10) && ADD_SUB(i + 11) && STA_BP2(i + 12) && LDA_A(i + 13) && ADC_SBC(i + 14) && STA_BP2_1(i + 15) && LDA_STACK(i + 17) && STA_BP2_Y(i + 18) && INY(i + 19) && LDA_STACK(i + 20)) if (argMatch(i + 6,i + 17) && argMatch(i + 9,i + 20)) {
            rtl.rcArrW(listing,i + 12,"\tsta :TMP");
            rtl.rcArrW(listing,i + 15,"\tsta :TMP+1");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 17,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 18,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 20,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 21,"\tsta (:TMP),y");
            return false;
          };
          if (STA_BP2_Y(i + 18) && LDA_A(i) && (IY(i) === false) && STA_A(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_A(i + 3) && LDA_A(i + 4) && (IY(i + 4) === false) && STA_A(i + 5) && LDA_A(i + 6) && (IY(i + 6) === false) && STA_A(i + 7) && LDY(i + 8) && LDA_A(i + 9) && STA_BP2(i + 10) && LDA_A(i + 11) && STA_BP2_1(i + 12) && LDY(i + 13) && LDA_A(i + 14) && STA_BP2_Y(i + 15) && INY(i + 16) && LDA_A(i + 17) && (LDA_A(i + 19) === false)) if (argMatch(i + 1,i + 14) && argMatch(i + 3,i + 17)) {
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_Y(i + 13) && MWY_BP2(i) && LDY_IM(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 8)) && LDA_BP2_Y(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_BP2_Y(i + 5) && STA_STACK(i + 6) && MWY_BP2(i + 7) && (rtl.rcArrR(listing,i + 7) !== rtl.rcArrR(listing,i)) && LDA_STACK(i + 9) && STA_BP2_Y(i + 10) && INY(i + 11) && LDA_STACK(i + 12)) if (argMatch(i + 3,i + 9) && argMatch(i + 6,i + 12)) {
            rtl.rcArrW(listing,i + 1,"\tmwy " + GetString$1(i + 7) + " :TMP");
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 3,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 4,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 5,"\tiny");
            rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 7,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 7)) && LDA_BP2_Y(i + 1) && STA(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA(i + 5) && MWY_BP2(i + 6) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_IM_0(i + 11)) if (argMatch(i + 2,i + 8)) {
            rtl.rcArrW(listing,i,"\tmwy " + GetString$1(i + 6) + " :TMP");
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 2,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 3,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 4,"\tiny");
            rtl.rcArrW(listing,i + 5,"\tlda #$00");
            rtl.rcArrW(listing,i + 6,"\tsta (:TMP),y");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA(i + 5) && LDA(i + 6) && ADD_SUB(i + 7) && TAY(i + 8) && LDA(i + 9) && ADC_SBC(i + 10) && LDA(i + 12)) if (argMatch(i + 2,i + 12)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP2_1(i + 27) && AND_ORA_EOR_BP2_Y(i + 42) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 28)) && LDA_STACK(i + 1) && AND_ORA_EOR_BP2_Y(i + 2) && STA_STACK(i + 3) && INY(i + 4) && LDA_STACK(i + 5) && AND_ORA_EOR_BP2_Y(i + 6) && STA_STACK(i + 7) && INY(i + 8) && LDA_STACK(i + 9) && AND_ORA_EOR_BP2_Y(i + 10) && STA_STACK(i + 11) && INY(i + 12) && LDA_STACK(i + 13) && AND_ORA_EOR_BP2_Y(i + 14) && STA_STACK(i + 15) && LDA_A(i + 16) && STA_STACK(i + 17) && LDA_A(i + 18) && ASL_A(i + 19) && ROL_STACK(i + 20) && ASL_A(i + 21) && ROL_STACK(i + 22) && ADD_SUB(i + 23) && STA_BP2(i + 24) && LDA_A(i + 25) && ADC_SBC_STACK(i + 26) && LDY(i + 28) && LDA_STACK(i + 29) && AND_ORA_EOR_BP2_Y(i + 30) && STA_A(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && AND_ORA_EOR_BP2_Y(i + 34) && STA_A(i + 35) && INY(i + 36) && LDA_STACK(i + 37) && AND_ORA_EOR_BP2_Y(i + 38) && STA_A(i + 39) && INY(i + 40) && LDA_STACK(i + 41) && STA_A(i + 43)) if (argMatch(i + 1,i + 3) && argMatch(i + 5,i + 7) && argMatch(i + 9,i + 11) && argMatch(i + 13,i + 15) && argMatch(i + 3,i + 29) && argMatch(i + 7,i + 33) && argMatch(i + 11,i + 37) && argMatch(i + 15,i + 41)) {
            rtl.rcArrW(listing,i + 24,"\tsta :TMP");
            rtl.rcArrW(listing,i + 27,"\tsta :TMP+1");
            listing_tmp[0] = rtl.rcArrR(listing,i + 16);
            listing_tmp[1] = rtl.rcArrR(listing,i + 17);
            listing_tmp[2] = rtl.rcArrR(listing,i + 18);
            listing_tmp[3] = rtl.rcArrR(listing,i + 19);
            listing_tmp[4] = rtl.rcArrR(listing,i + 20);
            listing_tmp[5] = rtl.rcArrR(listing,i + 21);
            listing_tmp[6] = rtl.rcArrR(listing,i + 22);
            listing_tmp[7] = rtl.rcArrR(listing,i + 23);
            listing_tmp[8] = rtl.rcArrR(listing,i + 24);
            listing_tmp[9] = rtl.rcArrR(listing,i + 25);
            listing_tmp[10] = rtl.rcArrR(listing,i + 26);
            listing_tmp[11] = rtl.rcArrR(listing,i + 27);
            listing_tmp[12] = rtl.rcArrR(listing,i + 28);
            listing_tmp[13] = rtl.rcArrR(listing,i + 29);
            listing_tmp[14] = rtl.rcArrR(listing,i + 30);
            listing_tmp[15] = pas.System.Copy(rtl.rcArrR(listing,i + 2),1,5) + "(:TMP),y";
            listing_tmp[16] = rtl.rcArrR(listing,i + 31);
            listing_tmp[17] = "\tiny";
            listing_tmp[18] = rtl.rcArrR(listing,i + 33);
            listing_tmp[19] = rtl.rcArrR(listing,i + 34);
            listing_tmp[20] = pas.System.Copy(rtl.rcArrR(listing,i + 6),1,5) + "(:TMP),y";
            listing_tmp[21] = rtl.rcArrR(listing,i + 35);
            listing_tmp[22] = "\tiny";
            listing_tmp[23] = rtl.rcArrR(listing,i + 37);
            listing_tmp[24] = rtl.rcArrR(listing,i + 38);
            listing_tmp[25] = pas.System.Copy(rtl.rcArrR(listing,i + 10),1,5) + "(:TMP),y";
            listing_tmp[26] = rtl.rcArrR(listing,i + 39);
            listing_tmp[27] = "\tiny";
            listing_tmp[28] = rtl.rcArrR(listing,i + 41);
            listing_tmp[29] = rtl.rcArrR(listing,i + 42);
            listing_tmp[30] = pas.System.Copy(rtl.rcArrR(listing,i + 14),1,5) + "(:TMP),y";
            listing_tmp[31] = rtl.rcArrR(listing,i + 43);
            for (p = 0; p <= 31; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 32,"");
            rtl.rcArrW(listing,i + 33,"");
            rtl.rcArrW(listing,i + 34,"");
            rtl.rcArrW(listing,i + 35,"");
            rtl.rcArrW(listing,i + 36,"");
            rtl.rcArrW(listing,i + 37,"");
            rtl.rcArrW(listing,i + 38,"");
            rtl.rcArrW(listing,i + 39,"");
            rtl.rcArrW(listing,i + 40,"");
            rtl.rcArrW(listing,i + 41,"");
            rtl.rcArrW(listing,i + 42,"");
            rtl.rcArrW(listing,i + 43,"");
            return false;
          };
          if (LDY_IM_0(i) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && INY(i + 6) && LDA_BP2_Y(i + 7) && STA_STACK(i + 8) && INY(i + 9) && LDA_BP2_Y(i + 10) && STA_STACK(i + 11)) {
            if (LDA_STACK(i + 12) && STA_STACK(i + 13) && LDA_STACK(i + 14) && STA_STACK(i + 15) && LDA_STACK(i + 16) && STA_STACK(i + 17)) if (argMatch(i + 2,i + 13) && argMatch(i + 5,i + 12) && argMatch(i + 8,i + 14) && argMatch(i + 11,i + 16) && argMatch(i + 12,i + 15) && argMatch(i + 14,i + 17)) {
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 8));
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 5));
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 12,"");
              rtl.rcArrW(listing,i + 13,"");
              rtl.rcArrW(listing,i + 14,"");
              rtl.rcArrW(listing,i + 15,"");
              rtl.rcArrW(listing,i + 16,"");
              rtl.rcArrW(listing,i + 17,"");
              return false;
            };
            if (LDA_A(i + 12) && ADD_SUB_STACK(i + 13) && STA_A(i + 14) && LDA_A(i + 15) && ADC_SBC_STACK(i + 16) && STA_A(i + 17) && LDA_A(i + 18) && ADC_SBC_STACK(i + 19) && STA_A(i + 20) && LDA_A(i + 21) && ADC_SBC_STACK(i + 22) && STA_A(i + 23)) if (argMatch(i + 2,i + 13) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 19) && argMatch(i + 11,i + 22)) {
              if (ADD(i + 13)) {
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 12));
                rtl.rcArrW(listing,i + 2,"\tadd (:bp2),y");
                rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 14));
                rtl.rcArrW(listing,i + 4,"\tiny");
                rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 15));
                rtl.rcArrW(listing,i + 6,"\tadc (:bp2),y");
                rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 17));
                rtl.rcArrW(listing,i + 8,"\tiny");
                rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 18));
                rtl.rcArrW(listing,i + 10,"\tadc (:bp2),y");
                rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 20));
                rtl.rcArrW(listing,i + 12,"\tiny");
                rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 21));
                rtl.rcArrW(listing,i + 14,"\tadc (:bp2),y");
                rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 23));
              } else {
                rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 12));
                rtl.rcArrW(listing,i + 2,"\tsub (:bp2),y");
                rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 14));
                rtl.rcArrW(listing,i + 4,"\tiny");
                rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 15));
                rtl.rcArrW(listing,i + 6,"\tsbc (:bp2),y");
                rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 17));
                rtl.rcArrW(listing,i + 8,"\tiny");
                rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 18));
                rtl.rcArrW(listing,i + 10,"\tsbc (:bp2),y");
                rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 20));
                rtl.rcArrW(listing,i + 12,"\tiny");
                rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 21));
                rtl.rcArrW(listing,i + 14,"\tsbc (:bp2),y");
                rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 23));
              };
              rtl.rcArrW(listing,i + 16,"");
              rtl.rcArrW(listing,i + 17,"");
              rtl.rcArrW(listing,i + 18,"");
              rtl.rcArrW(listing,i + 19,"");
              rtl.rcArrW(listing,i + 20,"");
              rtl.rcArrW(listing,i + 21,"");
              rtl.rcArrW(listing,i + 22,"");
              rtl.rcArrW(listing,i + 23,"");
              return false;
            };
            if (LDA_STACK(i + 12) && (ADD_SUB(i + 13) || AND_ORA_EOR(i + 13)) && (IY(i + 13) === false) && STA_A(i + 14) && LDA_STACK(i + 15) && (ADC_SBC(i + 16) || AND_ORA_EOR(i + 16)) && STA_A(i + 17) && LDA_STACK(i + 18) && (ADC_SBC(i + 19) || AND_ORA_EOR(i + 19)) && STA_A(i + 20) && LDA_STACK(i + 21) && (ADC_SBC(i + 22) || AND_ORA_EOR(i + 22)) && STA_A(i + 23)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 15) && argMatch(i + 8,i + 18) && argMatch(i + 11,i + 21)) {
              rtl.rcArrW(listing,i + 1,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 14));
              rtl.rcArrW(listing,i + 4,"\tiny");
              rtl.rcArrW(listing,i + 5,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 16));
              rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 17));
              rtl.rcArrW(listing,i + 8,"\tiny");
              rtl.rcArrW(listing,i + 9,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 19));
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 20));
              rtl.rcArrW(listing,i + 12,"\tiny");
              rtl.rcArrW(listing,i + 13,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 22));
              rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 23));
              rtl.rcArrW(listing,i + 16,"");
              rtl.rcArrW(listing,i + 17,"");
              rtl.rcArrW(listing,i + 18,"");
              rtl.rcArrW(listing,i + 19,"");
              rtl.rcArrW(listing,i + 20,"");
              rtl.rcArrW(listing,i + 21,"");
              rtl.rcArrW(listing,i + 22,"");
              rtl.rcArrW(listing,i + 23,"");
              return false;
            };
            if (LDA_A(i + 12) && ADD_STACK(i + 13) && STA_A(i + 14) && LDA_A(i + 15) && ADC_STACK(i + 16) && STA_A(i + 17) && LDA_A(i + 18) && ADC_STACK(i + 19) && STA_A(i + 20) && LDA_A(i + 21) && ADC_STACK(i + 22) && STA_A(i + 23)) if (argMatch(i + 2,i + 13) && argMatch(i + 5,i + 16) && argMatch(i + 8,i + 19) && argMatch(i + 11,i + 22)) {
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 12));
              rtl.rcArrW(listing,i + 2,"\tadd (:bp2),y");
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 14));
              rtl.rcArrW(listing,i + 4,"\tiny");
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 15));
              rtl.rcArrW(listing,i + 6,"\tadc (:bp2,y)");
              rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 17));
              rtl.rcArrW(listing,i + 8,"\tiny");
              rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 18));
              rtl.rcArrW(listing,i + 10,"\tadc (:bp2),y");
              rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 20));
              rtl.rcArrW(listing,i + 12,"\tiny");
              rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 21));
              rtl.rcArrW(listing,i + 14,"\tadc (:bp2),y");
              rtl.rcArrW(listing,i + 15,rtl.rcArrR(listing,i + 23));
              rtl.rcArrW(listing,i + 16,"");
              rtl.rcArrW(listing,i + 17,"");
              rtl.rcArrW(listing,i + 18,"");
              rtl.rcArrW(listing,i + 19,"");
              rtl.rcArrW(listing,i + 20,"");
              rtl.rcArrW(listing,i + 21,"");
              rtl.rcArrW(listing,i + 22,"");
              rtl.rcArrW(listing,i + 23,"");
              return false;
            };
            if (LDY_IM_0(i + 18) && STA_BP2_1(i + 17) && LDA_A(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA_A(i + 15) && ADC_SBC(i + 16) && LDA(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA(i + 22) && STA_BP2_Y(i + 23) && INY(i + 24) && LDA(i + 25) && STA_BP2_Y(i + 26) && INY(i + 27) && LDA(i + 28) && STA_BP2_Y(i + 29)) if (argMatch(i + 2,i + 19) && argMatch(i + 5,i + 22) && argMatch(i + 8,i + 25) && argMatch(i + 11,i + 28) && (argMatch(i + 2,i + 12) === false) && (argMatch(i + 2,i + 13) === false)) {
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 12));
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 13));
              rtl.rcArrW(listing,i + 2,"\tsta :TMP");
              rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 15));
              rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 16));
              rtl.rcArrW(listing,i + 5,"\tsta :TMP+1");
              rtl.rcArrW(listing,i + 6,"\tldy #$00");
              rtl.rcArrW(listing,i + 7,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 8,"\tsta (:TMP),y");
              rtl.rcArrW(listing,i + 9,"\tiny");
              rtl.rcArrW(listing,i + 10,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 11,"\tsta (:TMP),y");
              rtl.rcArrW(listing,i + 12,"\tiny");
              rtl.rcArrW(listing,i + 13,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 14,"\tsta (:TMP),y");
              rtl.rcArrW(listing,i + 15,"\tiny");
              rtl.rcArrW(listing,i + 16,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 17,"\tsta (:TMP),y");
              rtl.rcArrW(listing,i + 18,"");
              rtl.rcArrW(listing,i + 19,"");
              rtl.rcArrW(listing,i + 20,"");
              rtl.rcArrW(listing,i + 21,"");
              rtl.rcArrW(listing,i + 22,"");
              rtl.rcArrW(listing,i + 23,"");
              rtl.rcArrW(listing,i + 24,"");
              rtl.rcArrW(listing,i + 25,"");
              rtl.rcArrW(listing,i + 26,"");
              rtl.rcArrW(listing,i + 27,"");
              rtl.rcArrW(listing,i + 28,"");
              rtl.rcArrW(listing,i + 29,"");
              return false;
            };
            if (LDY_IM_0(i + 24) && STA_BP2_1(i + 23) && LDA_A(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14) && ASL_A(i + 15) && ROL_STACK(i + 16) && ASL_A(i + 17) && ROL_STACK(i + 18) && ADD_SUB(i + 19) && STA_BP2(i + 20) && LDA_A(i + 21) && ADC_SBC_STACK(i + 22) && LDA_STACK(i + 25) && (AND_ORA_EOR_BP2_Y(i + 26) || ADD_SUB_BP2_Y(i + 26)) && STA_A(i + 27) && INY(i + 28) && LDA_STACK(i + 29) && (AND_ORA_EOR_BP2_Y(i + 30) || ADC_SBC_BP2_Y(i + 30)) && STA_A(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && (AND_ORA_EOR_BP2_Y(i + 34) || ADC_SBC_BP2_Y(i + 34)) && STA_A(i + 35) && INY(i + 36) && LDA_STACK(i + 37) && (AND_ORA_EOR_BP2_Y(i + 38) || ADC_SBC_BP2_Y(i + 38)) && STA_A(i + 39)) if (argMatch(i + 2,i + 25) && argMatch(i + 5,i + 29) && argMatch(i + 8,i + 33) && argMatch(i + 11,i + 37)) {
              rtl.rcArrW(listing,i + 20,"\tsta :TMP");
              rtl.rcArrW(listing,i + 23,"\tsta :TMP+1");
              rtl.rcArrW(listing,i + 25,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 26,pas.System.Copy(rtl.rcArrR(listing,i + 26),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 29,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 30,pas.System.Copy(rtl.rcArrR(listing,i + 30),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 33,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 34,pas.System.Copy(rtl.rcArrR(listing,i + 34),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 37,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 38,pas.System.Copy(rtl.rcArrR(listing,i + 38),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              return false;
            };
            if (LDY_IM_0(i + 23) && STA_BP2_1(i + 22) && LDA_A(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14) && ASL_A(i + 15) && ROL_STACK(i + 16) && ASL_A(i + 17) && ROL_STACK(i + 18) && STA_BP2(i + 19) && LDA_A(i + 20) && ADD_SUB_STACK(i + 21) && LDA_STACK(i + 24) && (AND_ORA_EOR_BP2_Y(i + 25) || ADD_SUB_BP2_Y(i + 25)) && STA_A(i + 26) && INY(i + 27) && LDA_STACK(i + 28) && (AND_ORA_EOR_BP2_Y(i + 29) || ADC_SBC_BP2_Y(i + 29)) && STA_A(i + 30) && INY(i + 31) && LDA_STACK(i + 32) && (AND_ORA_EOR_BP2_Y(i + 33) || ADC_SBC_BP2_Y(i + 33)) && STA_A(i + 34) && INY(i + 35) && LDA_STACK(i + 36) && (AND_ORA_EOR_BP2_Y(i + 37) || ADC_SBC_BP2_Y(i + 37)) && STA_A(i + 38)) if (argMatch(i + 2,i + 24) && argMatch(i + 5,i + 28) && argMatch(i + 8,i + 32) && argMatch(i + 11,i + 36)) {
              rtl.rcArrW(listing,i + 19,"\tsta :TMP");
              rtl.rcArrW(listing,i + 22,"\tsta :TMP+1");
              rtl.rcArrW(listing,i + 24,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 25,pas.System.Copy(rtl.rcArrR(listing,i + 25),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 28,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 29,pas.System.Copy(rtl.rcArrR(listing,i + 29),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 32,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 33,pas.System.Copy(rtl.rcArrR(listing,i + 33),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 36,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 37,pas.System.Copy(rtl.rcArrR(listing,i + 37),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              return false;
            };
            if (LDY_IM_0(i + 29) && STA_BP2_1(i + 28) && LDA_A(i + 12) && AND_ORA_EOR(i + 13) && STA_STACK(i + 14) && LDA_A(i + 15) && AND_ORA_EOR(i + 16) && STA_STACK(i + 17) && ASL_STACK(i + 18) && ROL_A(i + 19) && ASL_STACK(i + 20) && ROL_A(i + 21) && STA_STACK(i + 22) && LDA_A(i + 23) && ADD_SUB_STACK(i + 24) && STA_BP2(i + 25) && LDA_A(i + 26) && ADC_SBC_STACK(i + 27) && LDA_STACK(i + 30) && (AND_ORA_EOR_BP2_Y(i + 31) || ADD_SUB_BP2_Y(i + 31)) && STA_A(i + 32) && INY(i + 33) && LDA_STACK(i + 34) && (AND_ORA_EOR_BP2_Y(i + 35) || ADC_SBC_BP2_Y(i + 35)) && STA_A(i + 36) && INY(i + 37) && LDA_STACK(i + 38) && (AND_ORA_EOR_BP2_Y(i + 39) || ADC_SBC_BP2_Y(i + 39)) && STA_A(i + 40) && INY(i + 41) && LDA_STACK(i + 42) && (AND_ORA_EOR_BP2_Y(i + 43) || ADC_SBC_BP2_Y(i + 43)) && STA_A(i + 44)) if (argMatch(i + 2,i + 30) && argMatch(i + 5,i + 34) && argMatch(i + 8,i + 38) && argMatch(i + 11,i + 42)) {
              rtl.rcArrW(listing,i + 25,"\tsta :TMP");
              rtl.rcArrW(listing,i + 28,"\tsta :TMP+1");
              rtl.rcArrW(listing,i + 30,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 31,pas.System.Copy(rtl.rcArrR(listing,i + 31),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 34,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 35,pas.System.Copy(rtl.rcArrR(listing,i + 35),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 38,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 39,pas.System.Copy(rtl.rcArrR(listing,i + 39),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 42,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 43,pas.System.Copy(rtl.rcArrR(listing,i + 43),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              return false;
            };
            if (LDY_IM_0(i + 28) && STA_BP2_1(i + 27) && LDA_A(i + 12) && STA_STACK(i + 13) && LDA_A(i + 14) && AND_ORA_EOR(i + 15) && STA_STACK(i + 16) && ASL_STACK(i + 17) && ROL_A(i + 18) && ASL_STACK(i + 19) && ROL_A(i + 20) && STA_STACK(i + 21) && LDA_A(i + 22) && ADD_SUB_STACK(i + 23) && STA_BP2(i + 24) && LDA_A(i + 25) && ADC_SBC_STACK(i + 26) && LDA_STACK(i + 29) && (AND_ORA_EOR_BP2_Y(i + 30) || ADD_SUB_BP2_Y(i + 30)) && STA_A(i + 31) && INY(i + 32) && LDA_STACK(i + 33) && (AND_ORA_EOR_BP2_Y(i + 34) || ADC_SBC_BP2_Y(i + 34)) && STA_A(i + 35) && INY(i + 36) && LDA_STACK(i + 37) && (AND_ORA_EOR_BP2_Y(i + 38) || ADC_SBC_BP2_Y(i + 38)) && STA_A(i + 39) && INY(i + 40) && LDA_STACK(i + 41) && (AND_ORA_EOR_BP2_Y(i + 42) || ADC_SBC_BP2_Y(i + 42)) && STA_A(i + 43)) if (argMatch(i + 2,i + 29) && argMatch(i + 5,i + 33) && argMatch(i + 8,i + 37) && argMatch(i + 11,i + 41)) {
              rtl.rcArrW(listing,i + 24,"\tsta :TMP");
              rtl.rcArrW(listing,i + 27,"\tsta :TMP+1");
              rtl.rcArrW(listing,i + 29,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 30,pas.System.Copy(rtl.rcArrR(listing,i + 30),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 33,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 34,pas.System.Copy(rtl.rcArrR(listing,i + 34),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 37,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 38,pas.System.Copy(rtl.rcArrR(listing,i + 38),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i + 41,"\tlda (:bp2),y");
              rtl.rcArrW(listing,i + 42,pas.System.Copy(rtl.rcArrR(listing,i + 42),1,5) + "(:TMP),y");
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,"");
              rtl.rcArrW(listing,i + 9,"");
              rtl.rcArrW(listing,i + 10,"");
              rtl.rcArrW(listing,i + 11,"");
              return false;
            };
          };
          if (STA_BP2_1(i + 15) && (AND_ORA_EOR_BP2_Y(i + 22) || ADC_SBC_BP2_Y(i + 22)) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 16)) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && ASL_A(i + 9) && ROL_STACK(i + 10) && ADD_SUB(i + 11) && STA_BP2(i + 12) && LDA_A(i + 13) && ADC_SBC_STACK(i + 14) && LDA_STACK(i + 17) && (AND_ORA_EOR_BP2_Y(i + 18) || ADD_SUB_BP2_Y(i + 18)) && STA_A(i + 19) && INY(i + 20) && LDA_STACK(i + 21) && STA_A(i + 23)) if (argMatch(i + 2,i + 17) && argMatch(i + 5,i + 21)) {
            rtl.rcArrW(listing,i + 12,"\tsta :TMP");
            rtl.rcArrW(listing,i + 15,"\tsta :TMP+1");
            rtl.rcArrW(listing,i + 17,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 18,pas.System.Copy(rtl.rcArrR(listing,i + 18),1,5) + "(:TMP),y");
            rtl.rcArrW(listing,i + 21,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 22,pas.System.Copy(rtl.rcArrR(listing,i + 22),1,5) + "(:TMP),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP2_1(i + 14) && (AND_ORA_EOR_BP2_Y(i + 21) || ADC_SBC_BP2_Y(i + 21)) && LDY(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 15)) && LDA_BP2_Y(i + 1) && STA_STACK(i + 2) && INY(i + 3) && LDA_BP2_Y(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && STA_STACK(i + 7) && LDA_A(i + 8) && ASL_A(i + 9) && ROL_STACK(i + 10) && STA_BP2(i + 11) && LDA_A(i + 12) && ADD_SUB_STACK(i + 13) && LDA_STACK(i + 16) && (AND_ORA_EOR_BP2_Y(i + 17) || ADD_SUB_BP2_Y(i + 17)) && STA_A(i + 18) && INY(i + 19) && LDA_STACK(i + 20) && STA_A(i + 22)) if (argMatch(i + 2,i + 16) && argMatch(i + 5,i + 20)) {
            rtl.rcArrW(listing,i + 11,"\tsta :TMP");
            rtl.rcArrW(listing,i + 14,"\tsta :TMP+1");
            rtl.rcArrW(listing,i + 16,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 17,pas.System.Copy(rtl.rcArrR(listing,i + 17),1,5) + "(:TMP),y");
            rtl.rcArrW(listing,i + 20,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 21,pas.System.Copy(rtl.rcArrR(listing,i + 21),1,5) + "(:TMP),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP2_Y(i + 18) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && MWY_BP2(i + 12) && LDY_IM(i + 13) && LDA_STACK(i + 14) && STA_BP2_Y(i + 15) && INY(i + 16) && LDA_STACK(i + 17) && (INY(i + 19) === false)) if (argMatch(i + 2,i + 14) && argMatch(i + 5,i + 17)) {
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY_IM(i + 7) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11)) if (argMatch(i + 2,i + 8) && argMatch(i + 5,i + 11)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 6);
            listing_tmp[1] = rtl.rcArrR(listing,i + 7);
            listing_tmp[2] = rtl.rcArrR(listing,i);
            listing_tmp[3] = rtl.rcArrR(listing,i + 1);
            listing_tmp[4] = rtl.rcArrR(listing,i + 9);
            listing_tmp[5] = rtl.rcArrR(listing,i + 10);
            listing_tmp[6] = rtl.rcArrR(listing,i + 3);
            listing_tmp[7] = rtl.rcArrR(listing,i + 4);
            listing_tmp[8] = rtl.rcArrR(listing,i + 9);
            for (p = 0; p <= 8; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (STA_BP_Y(i + 12) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY_IM(i + 5) && LDA_BP2_Y(i + 6) && STA_STACK(i + 7) && LDY_STACK(i + 8) && STY_BP_1(i + 9) && LDY_STACK(i + 10) && LDA_STACK(i + 11)) if (argMatch(i + 3,i + 8) && argMatch(i + 1,i + 10) && argMatch(i + 7,i + 11)) {
            rtl.rcArrW(listing,i + 8,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 10,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDA_A(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA_A(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY_IM(i + 5) && LDA(i + 6) && ADD_SUB_STACK(i + 7) && STA_BP2_Y(i + 8) && INY(i + 9) && LDA(i + 10) && ADC_SBC_STACK(i + 11)) if (argMatch(i + 1,i + 7) && argMatch(i + 3,i + 11)) {
            if (ADD_STACK(i + 7)) {
              rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))}
             else rtl.rcArrW(listing,i + 7,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (ADC_STACK(i + 11)) {
              rtl.rcArrW(listing,i + 11,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256))}
             else rtl.rcArrW(listing,i + 11,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP_Y(i + 16) && LDA_A(i) && ADD_SUB(i + 1) && TAY(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && AND_ORA_EOR(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && ADD_SUB(i + 10) && TAY(i + 11) && LDA(i + 12) && ADC_SBC(i + 13) && STA_BP_1(i + 14) && LDA_STACK(i + 15)) if (argMatch(i + 8,i + 15) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 10)) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 12)) && (rtl.rcArrR(listing,i + 4) === rtl.rcArrR(listing,i + 13))) {
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (STA_BP_1(i + 12) && LDA_A(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && TAY(i + 3) && LDA_A(i + 4) && ADC_SBC(i + 5) && STA_STACK(i + 6) && STA_BP_1(i + 7) && LDA_BP_Y(i + 8) && AND_ORA_EOR(i + 9) && STA_STACK(i + 10) && LDA_STACK(i + 11) && LDY_STACK(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 2,i + 13) && argMatch(i + 6,i + 11) && argMatch(i + 10,i + 14)) {
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_A(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_BP2_Y(i + 8) && LDY_STACK(i + 9)) if (argMatch(i + 2,i + 9) && (pas.System.Copy(rtl.rcArrR(listing,i),6,256) === GetString$1(i + 6)) && (pas.System.Pos(rtl.rcArrR(listing,i),rtl.rcArrR(listing,i + 3)) > 0)) {
            rtl.rcArrW(listing,i + 9,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 10,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_Y(i + 15) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDY(i + 6) && STY_BP_1(i + 7) && LDY(i + 8) && LDA_BP_Y(i + 9) && STA_STACK(i + 10) && LDY_STACK(i + 11) && STY_BP_1(i + 12) && LDY_STACK(i + 13) && LDA_STACK(i + 14)) if ((rtl.rcArrR(listing,i + 3) !== rtl.rcArrR(listing,i + 6)) && argMatch(i + 2,i + 13) && argMatch(i + 5,i + 11) && argMatch(i + 10,i + 14)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 15,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_Y(i + 15) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDY(i + 6) && STY_BP_1(i + 7) && LDY(i + 8) && LDA_BP_Y(i + 9) && STA_STACK(i + 10) && LDY_STACK(i + 11) && STY_BP_1(i + 12) && LDY_STACK(i + 13) && LDA_STACK(i + 14)) if ((rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 6)) && argMatch(i + 2,i + 13) && argMatch(i + 5,i + 11) && argMatch(i + 10,i + 14) && argMatch(i,i + 8)) {
            rtl.rcArrW(listing,i + 11,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 12,"\tldy #$00");
            rtl.rcArrW(listing,i + 13,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 14,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 15,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (STA_BP_Y(i + 14) && LDA_A(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_BP2_Y(i + 8) && STA_STACK(i + 9) && LDY_STACK(i + 10) && STY_BP_1(i + 11) && LDY_STACK(i + 12) && LDA_STACK(i + 13)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 10) && argMatch(i + 9,i + 13) && (pas.System.Pos(rtl.rcArrR(listing,i),rtl.rcArrR(listing,i + 3)) > 0) && (pas.System.Copy(rtl.rcArrR(listing,i),6,256) === GetString$1(i + 6))) {
            rtl.rcArrW(listing,i + 9,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 10,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            p = rtl.rc(GetWORD(i,i + 3) + GetWORD(i + 6,i + 9),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p,0,255),2));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 9,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_VAL(i) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_IM(i + 4) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            p = rtl.rc(GetWORD(i + 1,i + 4) + GetWORD(i + 6,i + 9),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p,0,255),2));
            rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 9,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(p >>> 8,0,255),2));
            rtl.rcArrW(listing,i + 10,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_Y(i + 9) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY(i + 6) && LDA_A(i + 7) && LDY_STACK(i + 8)) if (argMatch(i + 2,i + 8)) {
            p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 8,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 9,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY(i + 6) && LDA_A(i + 7) && (ADD_SUB(i + 8) || AND_ORA_EOR(i + 8)) && LDY_STACK(i + 9)) if (argMatch(i + 2,i + 9)) {
            p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 9,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 10,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 6) && STY_STACK(i) && LDA(i + 1) && ADD_SUB(i + 2) && ADD_SUB(i + 3) && STA(i + 4) && LDA_STACK(i + 5)) if (argMatch(i,i + 5)) {
            rtl.rcArrW(listing,i,"\tsty :bp+1");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            return false;
          };
          if (LDY_STACK(i + 7) && ADD_SUB(i) && STA_STACK(i + 1) && LDA(i + 2) && ADC_SBC(i + 3) && STA_BP_1(i + 4) && LDA(i + 5) && (IY(i + 5) === false) && ADD_SUB(i + 6)) if (argMatch(i + 1,i + 7)) {
            rtl.rcArrW(listing,i + 1,"\ttay");
            rtl.rcArrW(listing,i + 7,"");
            return false;
          };
          if (STA_BP_Y(i + 10) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_BP2_Y(i + 8) && LDY_STACK(i + 9)) if (argMatch(i + 2,i + 9)) {
            p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 9,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 10,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP2_Y(i + 7) && STA_STACK(i) && LDA(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && MWY_BP2(i + 4) && LDY(i + 5) && LDA_STACK(i + 6) && (INY(i + 8) === false)) if (argMatch(i,i + 6)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_1(i + 5) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_IM(i + 1) && STA_BP2(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC_IM_0(i + 4) && LDY_IM_0(i + 6)) {
            p = rtl.rc(GetBYTE(i + 1),-2147483648,2147483647);
            if (p <= 0xFC) {
              rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
              rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 2,"");
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"");
              rtl.rcArrW(listing,i + 5,"");
              rtl.rcArrW(listing,i + 6,"");
              return false;
            };
          };
          if (STA_BP2_1(i + 4) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && STA_BP2(i + 1) && (rtl.rcArrR(listing,i + 2) === (rtl.rcArrR(listing,i) + "+1")) && ADD_IM_0(i + 3) && LDY(i + 5)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_BP2_1(i + 3) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && STA_BP2(i + 1) && (rtl.rcArrR(listing,i + 2) === (rtl.rcArrR(listing,i) + "+1")) && LDY(i + 4)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_1(i + 3) && LDA_ADR(i) && (IY(i) === false) && STA_BP2(i + 1) && LDA_ADR(i + 2) && (IY(i + 2) === false) && LDY(i + 4)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && (rtl.rcArrR(listing,i + 1) === "\tsta :TMP") && (rtl.rcArrR(listing,i + 2) === (rtl.rcArrR(listing,i) + "+1")) && (rtl.rcArrR(listing,i + 3) === "\tsta :TMP+1") && LDY(i + 4)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :TMP");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (LDY_VAL(i) && (LDY_IM(i) === false) && LDA_VAL(i + 1) && (LDA_IM(i + 1) === false) && STA_BP_1(i + 2) && LDA_BP_Y(i + 3) && MWY_BP2(i + 4)) if ((pas.System.Copy(rtl.rcArrR(listing,i),6,256) === GetString$1(i + 4)) && (("\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + "+1") === rtl.rcArrR(listing,i + 1))) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 1,"\tldy #$00");
            rtl.rcArrW(listing,i + 2,"\tlda (:bp2),y");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_Y(i + 8) && STA_STACK(i) && TAY(i + 1) && LDA(i + 2) && STA_BP2(i + 3) && LDA(i + 4) && STA_BP2_1(i + 5) && LDY(i + 6) && LDA_STACK(i + 7)) if (argMatch(i,i + 7)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"\ttya");
            return false;
          };
          if (STA_BP2_1(i + 15) && LDA(i) && ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && STA_BP2(i + 13) && LDA_STACK(i + 14) && LDY_IM_0(i + 16)) if (argMatch(i + 2,i + 12) && argMatch(i + 5,i + 14)) {
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 15));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (STA_BP2_Y(i + 12) && LDA(i) && ADD_STACK(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_STACK(i + 4) && STA_STACK(i + 5) && MWY_BP2(i + 6) && LDY(i + 7) && LDA_STACK(i + 8) && STA_BP2_Y(i + 9) && INY(i + 10) && LDA_STACK(i + 11)) if (argMatch(i + 2,i + 8) && argMatch(i + 5,i + 11)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 6);
            listing_tmp[1] = rtl.rcArrR(listing,i + 7);
            listing_tmp[2] = rtl.rcArrR(listing,i);
            listing_tmp[3] = rtl.rcArrR(listing,i + 1);
            listing_tmp[4] = rtl.rcArrR(listing,i + 9);
            listing_tmp[5] = rtl.rcArrR(listing,i + 10);
            listing_tmp[6] = rtl.rcArrR(listing,i + 3);
            listing_tmp[7] = rtl.rcArrR(listing,i + 4);
            listing_tmp[8] = rtl.rcArrR(listing,i + 12);
            rtl.rcArrW(listing,i,listing_tmp[0]);
            rtl.rcArrW(listing,i + 1,listing_tmp[1]);
            rtl.rcArrW(listing,i + 2,listing_tmp[2]);
            rtl.rcArrW(listing,i + 3,listing_tmp[3]);
            rtl.rcArrW(listing,i + 4,listing_tmp[4]);
            rtl.rcArrW(listing,i + 5,listing_tmp[5]);
            rtl.rcArrW(listing,i + 6,listing_tmp[6]);
            rtl.rcArrW(listing,i + 7,listing_tmp[7]);
            rtl.rcArrW(listing,i + 8,listing_tmp[8]);
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          if (LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_A(i + 5) && ADD_STACK(i + 6) && STA_A(i + 7) && (STA_BP2_(i + 7) === false) && LDA_A(i + 8) && ADC_STACK(i + 9) && STA_A(i + 10) && (STA_BP2_(i + 10) === false)) if (argMatch(i + 1,i + 6) && argMatch(i + 4,i + 9)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 5,"\tadd (:bp2),y");
            rtl.rcArrW(listing,i + 6,"\tiny");
            rtl.rcArrW(listing,i + 9,"\tadc (:bp2),y");
            return false;
          };
          if (LDA_BP2_Y(i) && STA_STACK(i + 1) && INY(i + 2) && LDA_BP2_Y(i + 3) && STA_STACK(i + 4) && LDA_STACK(i + 5) && ADD(i + 6) && STA_A(i + 7) && (STA_BP2_(i + 7) === false) && LDA_STACK(i + 8) && ADC(i + 9) && STA_A(i + 10) && (STA_BP2_(i + 10) === false)) if (argMatch(i + 1,i + 5) && argMatch(i + 4,i + 8)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i));
            return false;
          };
          if (STA_BP_1(i + 1) && LDA(i) && (IY(i) === false) && LDY(i + 2) && LDA_STA_BP(i + 3)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"\tsty :bp+1");
            return false;
          };
          if (STY_BP_1(i + 5) && MWY_BP2(i) && LDY(i + 1) && LDA_BP2_Y(i + 2) && STA_STACK(i + 3) && LDY_VAL(i + 4) && LDY_VAL(i + 6) && LDA_STA_BP(i + 7)) if ((pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256) === GetString$1(i)) && ((rtl.rcArrR(listing,i + 6) + "+1") === rtl.rcArrR(listing,i + 4))) {
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 5,"\tldy #$00");
            rtl.rcArrW(listing,i + 6,"");
            if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_A(i) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 8)) && ADD(i + 1) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 9)) && TAY(i + 2) && LDA_A(i + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,i + 11)) && ADC(i + 4) && (rtl.rcArrR(listing,i + 4) === rtl.rcArrR(listing,i + 12)) && LDA_STA_BP(i + 6) && STA_BP2(i + 10) && STA_BP2_1(i + 13)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 8));
            rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 11));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 6));
            if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i + 6,"\tldy #$00");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_VAL(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC_IM_0(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i,"\tmwy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " :bp2");
            rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
            return false;
          };
          if (STA_BP_1(i + 5) && (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && (pas.System.Pos("\tlda >",rtl.rcArrR(listing,i + 3)) > 0) && ADC_IM_0(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (argMatch(i + 2,i + 6)) {
            rtl.rcArrW(listing,i,"\tmwy #" + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + " :bp2");
            rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta (:bp2),y");
            return false;
          };
          if (STA_BP2_1(i + 3) && (pas.System.Pos("\tlda <",rtl.rcArrR(listing,i)) > 0) && STA_BP2(i + 1) && (pas.System.Pos("\tlda >",rtl.rcArrR(listing,i + 2)) > 0) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && STA_STACK(i + 6)) {
            rtl.rcArrW(listing,i + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            if (INY(i + 7) && LDA_BP2_Y(i + 8) && STA_STACK(i + 9)) {
              rtl.rcArrW(listing,i + 7,"");
              rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 5) + "+1");
              if (INY(i + 10) && LDA_BP2_Y(i + 11) && STA_STACK(i + 12)) {
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 5) + "+2");
                if (INY(i + 13) && LDA_BP2_Y(i + 14) && STA_STACK(i + 15)) {
                  rtl.rcArrW(listing,i + 13,"");
                  rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 5) + "+3");
                };
              };
            };
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM(i) && ADD_IM(i + 1) && TAY(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && LDA_STA_BP(i + 6)) {
            p = rtl.rc(GetWORD(i,i + 3) + GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (LDA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            if (STA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_BP_Y(i + 6) && LDA_IM(i) && ADD_IM(i + 1) && TAY(i + 2) && LDA_IM(i + 3) && ADC_IM(i + 4) && STA_BP_1(i + 5) && (ADD_SUB(i + 7) || AND_ORA_EOR(i + 7)) && STA_BP_Y(i + 8)) {
            p = rtl.rc(GetWORD(i,i + 3) + GetWORD(i + 1,i + 4),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 8,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && TAY(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && LDA_STA_BP(i + 6)) {
            p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            if (LDA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 2) && LDY_IM(i) && LDA_IM(i + 1) && LDA_STA_BP(i + 3)) {
            p = rtl.rc(GetWORD(i,i + 1),-2147483648,2147483647);
            if (LDA_BP_Y(i + 3)) rtl.rcArrW(listing,i + 3,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            if (STA_BP_Y(i + 4)) rtl.rcArrW(listing,i + 4,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (LDA_BP_Y(i + 3) && LDY_IM(i) && LDA_IM(i + 1) && STA_BP_1(i + 2) && (ADD_SUB(i + 4) || AND_ORA_EOR(i + 4)) && STA_BP_Y(i + 5)) {
            p = rtl.rc(GetWORD(i,i + 1),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 3,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 5,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            p = rtl.rc(GetWORD(i,i + 3) + GetWORD(i + 6,i + 9),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && (ADD_IM(i + 1) || SUB(i + 1)) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && (ADC_IM(i + 4) || SBC_IM(i + 4)) && STA_STACK(i + 5) && LDA_IM(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            if (ADD_IM(i + 1)) {
              p = rtl.rc(GetWORD(i + 1,i + 4) + GetWORD(i + 6,i + 9),-2147483648,2147483647)}
             else p = rtl.rc(GetWORD(i + 6,i + 9) - GetWORD(i + 1,i + 4),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(i + 3) === false) && (IY(i + 3) === false) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_IM_0(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM_0(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"\tsta :bp2");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"\tsta :bp2+1");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta (:bp2),y");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(i + 3) === false) && (IY(i + 3) === false) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM_0(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 10,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 7));
            rtl.rcArrW(listing,i + 7,"\tsta :bp2");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 10));
            rtl.rcArrW(listing,i + 10,"\tsta :bp2+1");
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_A(i) && (LDA_IM(i) === false) && ADD(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && (LDA_IM(+3) === false) && ADC(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM_0(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_IM_0(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 2,"\tsta :bp2");
            rtl.rcArrW(listing,i + 5,"\tsta :bp2+1");
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta (:bp2),y");
            return false;
          };
          if (STA_BP_1(i + 5) && LDA(i) && (IY(i) === false) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_SBC_IM(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (argMatch(i + 2,i + 6)) {
            p = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (SUB_IM(i + 1)) p = rtl.rc(rtl.rc(-p,0,65535),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 4) && ADD_IM(i) && STA_STACK(i + 1) && LDA_IM(i + 2) && ADC_IM_0(i + 3) && LDY_STACK(i + 5) && LDA_STA_BP(i + 6)) if (argMatch(i + 1,i + 5)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\ttay");
            if (LDA_BP_Y(i + 6)) rtl.rcArrW(listing,i + 6,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && LDY_STACK(i + 6) && LDA_STA_BP(i + 7)) if (argMatch(i + 2,i + 6)) {
            p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            if (LDA_BP_Y(i + 7)) rtl.rcArrW(listing,i + 7,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 8)) rtl.rcArrW(listing,i + 8,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDA_BP_Y(i + 7) && LDA_IM(i) && ADD(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC_IM_0(i + 4) && STA_BP_1(i + 5) && LDY_STACK(i + 6) && (ADD_SUB_VAL(i + 8) || AND_ORA_EOR_VAL(i + 8)) && STA_A(i + 9)) if (argMatch(i + 2,i + 6)) {
            p = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 7,"\tlda $" + pas.SysUtils.IntToHex(p,4) + ",y");
            if (STA_BP_Y(i + 9)) rtl.rcArrW(listing,i + 9,"\tsta $" + pas.SysUtils.IntToHex(p,4) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (ADD_IM(i + 1) === false) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 7,"\tsta :bp2");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,"\tadc #$00");
            rtl.rcArrW(listing,i + 10,"\tsta :bp2+1");
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD_IM(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && (LDA_IM(i + 6) === false) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 7,"\tsta :bp2");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,"\tadc #$00");
            rtl.rcArrW(listing,i + 10,"\tsta :bp2+1");
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_BP_1(i + 11) && LDA_VAL(i) && (LDA_IM(i) === false) && SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_IM_0(i + 3) && SBC_IM_0(i + 4) && STA_STACK(i + 5) && LDA_VAL(i + 6) && ADD_STACK(i + 7) && TAY(i + 8) && LDA_VAL(i + 9) && ADC_STACK(i + 10) && LDA_STA_BP(i + 12)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 1));
            rtl.rcArrW(listing,i + 7,"\tsta :bp2");
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 9,"\tsbc #$00");
            rtl.rcArrW(listing,i + 10,"\tsta :bp2+1");
            rtl.rcArrW(listing,i + 11,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            if (LDA_BP_Y(i + 12)) rtl.rcArrW(listing,i + 12,"\tlda (:bp2),y");
            if (STA_BP_Y(i + 13)) rtl.rcArrW(listing,i + 13,"\tsta (:bp2),y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (STA_BP_1(i + 4) && ADD_SUB(i) && (IY(i) === false) && (ADD_SUB_IM(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && ADC_SBC(i + 3) && LDY_STACK(i + 5) && LDA_STA_BP(i + 6)) if (argMatch(i + 1,i + 5)) {
            rtl.rcArrW(listing,i + 1,"\ttay");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (STA_BP2_Y(i + 29) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_STACK(i + 11) && LDA_A(i + 12) && ADD_SUB(i + 13) && STA_BP2(i + 14) && LDA_A(i + 15) && ADC_SBC(i + 16) && STA_BP2_1(i + 17) && LDY_IM_0(i + 18) && LDA_STACK(i + 19) && STA_BP2_Y(i + 20) && INY(i + 21) && LDA_STACK(i + 22) && STA_BP2_Y(i + 23) && INY(i + 24) && LDA_STACK(i + 25) && STA_BP2_Y(i + 26) && INY(i + 27) && LDA_STACK(i + 28)) if ((argMatch(i + 2,i + 13) === false) && argMatch(i + 2,i + 19) && argMatch(i + 5,i + 22) && argMatch(i + 8,i + 25) && argMatch(i + 11,i + 28)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 12);
            listing_tmp[1] = rtl.rcArrR(listing,i + 13);
            listing_tmp[2] = rtl.rcArrR(listing,i + 14);
            listing_tmp[3] = rtl.rcArrR(listing,i + 15);
            listing_tmp[4] = rtl.rcArrR(listing,i + 16);
            listing_tmp[5] = rtl.rcArrR(listing,i + 17);
            listing_tmp[6] = rtl.rcArrR(listing,i + 18);
            listing_tmp[7] = rtl.rcArrR(listing,i);
            listing_tmp[8] = rtl.rcArrR(listing,i + 1);
            listing_tmp[9] = "\tsta (:bp2),y";
            listing_tmp[10] = "\tiny";
            listing_tmp[11] = rtl.rcArrR(listing,i + 3);
            listing_tmp[12] = rtl.rcArrR(listing,i + 4);
            listing_tmp[13] = "\tsta (:bp2),y";
            listing_tmp[14] = "\tiny";
            listing_tmp[15] = rtl.rcArrR(listing,i + 6);
            listing_tmp[16] = rtl.rcArrR(listing,i + 7);
            listing_tmp[17] = "\tsta (:bp2),y";
            listing_tmp[18] = "\tiny";
            listing_tmp[19] = rtl.rcArrR(listing,i + 9);
            listing_tmp[20] = rtl.rcArrR(listing,i + 10);
            listing_tmp[21] = "\tsta (:bp2),y";
            for (p = 0; p <= 21; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 22,"");
            rtl.rcArrW(listing,i + 23,"");
            rtl.rcArrW(listing,i + 24,"");
            rtl.rcArrW(listing,i + 25,"");
            rtl.rcArrW(listing,i + 26,"");
            rtl.rcArrW(listing,i + 27,"");
            rtl.rcArrW(listing,i + 28,"");
            rtl.rcArrW(listing,i + 29,"");
            return false;
          };
          if (STA_BP2_Y(i + 17) && LDA_A(i) && (LDA_IM(i) === false) && (IY(i) === false) && ADD_SUB(i + 1) && (IY(i + 1) === false) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_SUB(i + 7) && STA_BP2(i + 8) && LDA_A(i + 9) && ADC_SBC(i + 10) && STA_BP2_1(i + 11) && LDY_IM_0(i + 12) && LDA_STACK(i + 13) && STA_BP2_Y(i + 14) && INY(i + 15) && LDA_STACK(i + 16)) if ((argMatch(i + 2,i + 7) === false) && argMatch(i + 2,i + 13) && argMatch(i + 5,i + 16)) {
            listing_tmp[0] = rtl.rcArrR(listing,i + 6);
            listing_tmp[1] = rtl.rcArrR(listing,i + 7);
            listing_tmp[2] = rtl.rcArrR(listing,i + 8);
            listing_tmp[3] = rtl.rcArrR(listing,i + 9);
            listing_tmp[4] = rtl.rcArrR(listing,i + 10);
            listing_tmp[5] = rtl.rcArrR(listing,i + 11);
            listing_tmp[6] = "\tldy #$00";
            listing_tmp[7] = rtl.rcArrR(listing,i);
            listing_tmp[8] = rtl.rcArrR(listing,i + 1);
            listing_tmp[9] = rtl.rcArrR(listing,i + 2);
            listing_tmp[10] = "\tsta (:bp2),y";
            listing_tmp[11] = "\tiny";
            listing_tmp[12] = rtl.rcArrR(listing,i + 3);
            listing_tmp[13] = rtl.rcArrR(listing,i + 4);
            listing_tmp[14] = rtl.rcArrR(listing,i + 5);
            listing_tmp[15] = "\tsta (:bp2),y";
            for (p = 0; p <= 15; p++) rtl.rcArrW(listing,i + p,rtl.rcArrR(listing_tmp,p));
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"");
            return false;
          };
          if (STA_BP2_Y(i + 15) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && ADD(i + 5) && STA_BP2(i + 6) && LDA(i + 7) && ADC(i + 8) && STA_BP2_1(i + 9) && LDY_IM_0(i + 10) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if (argMatch(i + 1,i + 11) && argMatch(i + 3,i + 14)) {
            rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 14,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_Y(i + 15) && LDA(i) && (IY(i) === false) && STA_STACK(i + 1) && LDA(i + 2) && (IY(i + 2) === false) && STA_STACK(i + 3) && LDA(i + 4) && ADD(i + 5) && STA_BP2(i + 6) && LDA(i + 7) && ADC(i + 8) && STA_BP2_1(i + 9) && LDY_IM_0(i + 10) && LDA(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA(i + 14) && INY(i + 16) && LDA_STACK(i + 17) && STA_BP2_Y(i + 18) && INY(i + 19) && LDA_STACK(i + 20) && STA_BP2_Y(i + 21)) if (argMatch(i + 1,i + 17) && argMatch(i + 3,i + 20)) {
            rtl.rcArrW(listing,i + 17,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 20,rtl.rcArrR(listing,i + 2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            return false;
          };
          if (STA_BP2_Y(i + 15) && MWY_BP2(i) && MWY_BP2(i + 9) && LDY(i + 1) && LDA_BP2_Y(i + 2) && INY(i + 3) && ADD_SUB(i + 4) && STA_STACK(i + 5) && LDA_BP2_Y(i + 6) && ADC_SBC(i + 7) && STA_STACK(i + 8) && LDY(i + 10) && LDA_STACK(i + 11) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA_STACK(i + 14)) if ((rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 9)) && (rtl.rcArrR(listing,i + 1) === rtl.rcArrR(listing,i + 10)) && argMatch(i + 5,i + 11) && argMatch(i + 8,i + 14)) {
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 4));
            rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 13));
            rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 12));
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"");
            rtl.rcArrW(listing,i + 15,"");
            return false;
          };
          if (LDA_BP2_Y(i + 8) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && STA(i + 6) && (IY(i + 6) === false) && INY(i + 7) && STA(i + 9) && (IY(i + 9) === false) && INY(i + 10) && LDA_BP2_Y(i + 11) && STA(i + 12) && (IY(i + 12) === false) && INY(i + 13) && LDA_BP2_Y(i + 14) && STA(i + 15) && (IY(i + 15) === false)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"\tlda $" + pas.SysUtils.IntToHex(p + 1,4));
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"\tlda $" + pas.SysUtils.IntToHex(p + 2,4));
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 14,"\tlda $" + pas.SysUtils.IntToHex(p + 3,4));
            return false;
          };
          if (LDA_BP2_Y(i + 8) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && STA(i + 6) && (IY(i + 6) === false) && INY(i + 7) && STA(i + 9) && (IY(i + 9) === false) && (INY(i + 10) === false)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"\tlda $" + pas.SysUtils.IntToHex(p + 1,4));
            return false;
          };
          if (STA_BP2_Y(i + 9) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA(i + 5) && (IY(i + 5) === false) && STA_BP2_Y(i + 6) && INY(i + 7) && LDA(i + 8) && (IY(i + 8) === false) && INY(i + 10) && LDA(i + 11) && (IY(i + 11) === false) && STA_BP2_Y(i + 12) && INY(i + 13) && LDA(i + 14) && (IY(i + 14) === false) && STA_BP2_Y(i + 15)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 9,"\tsta $" + pas.SysUtils.IntToHex(p + 1,4));
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 12,"\tsta $" + pas.SysUtils.IntToHex(p + 2,4));
            rtl.rcArrW(listing,i + 13,"");
            rtl.rcArrW(listing,i + 15,"\tsta $" + pas.SysUtils.IntToHex(p + 3,4));
            return false;
          };
          if (STA_BP2_Y(i + 9) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA(i + 5) && (IY(i + 5) === false) && STA_BP2_Y(i + 6) && INY(i + 7) && LDA(i + 8) && (IY(i + 8) === false) && (INY(i + 10) === false)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 6,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 9,"\tsta $" + pas.SysUtils.IntToHex(p + 1,4));
            return false;
          };
          if (LDA_BP2_Y(i + 9) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_BP2_Y(i + 7) && INY(i + 8) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && STA_BP2_Y(i + 11) && (INY(i + 12) === false)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 7,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"\tlda $" + pas.SysUtils.IntToHex(p + 1,4));
            rtl.rcArrW(listing,i + 11,"\tsta $" + pas.SysUtils.IntToHex(p + 1,4));
            return false;
          };
          if (STA_BP2_Y(i + 11) && LDA_IM(i) && STA_BP2(i + 1) && LDA_IM(i + 2) && STA_BP2_1(i + 3) && LDY_IM_0(i + 4) && LDA_BP2_Y(i + 5) && (ADD_SUB(i + 6) || AND_ORA_EOR(i + 6)) && STA_BP2_Y(i + 7) && INY(i + 8) && LDA_BP2_Y(i + 9) && (ADC_SBC(i + 10) || AND_ORA_EOR(i + 10)) && INY(i + 12) && LDA_BP2_Y(i + 13) && (ADC_SBC(i + 14) || AND_ORA_EOR(i + 14)) && STA_BP2_Y(i + 15) && INY(i + 16) && LDA_BP2_Y(i + 17) && (ADC_SBC(i + 18) || AND_ORA_EOR(i + 18)) && STA_BP2_Y(i + 19)) {
            p = rtl.rc(GetWORD(i,i + 2),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"\tlda $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 7,"\tsta $" + pas.SysUtils.IntToHex(p,4));
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"\tlda $" + pas.SysUtils.IntToHex(p + 1,4));
            rtl.rcArrW(listing,i + 11,"\tsta $" + pas.SysUtils.IntToHex(p + 1,4));
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"\tlda $" + pas.SysUtils.IntToHex(p + 2,4));
            rtl.rcArrW(listing,i + 15,"\tsta $" + pas.SysUtils.IntToHex(p + 2,4));
            rtl.rcArrW(listing,i + 16,"");
            rtl.rcArrW(listing,i + 17,"\tlda $" + pas.SysUtils.IntToHex(p + 3,4));
            rtl.rcArrW(listing,i + 19,"\tsta $" + pas.SysUtils.IntToHex(p + 3,4));
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_VAL(i) && (IY(i) === false) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA_VAL(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (STA_BP_1(i + 5) && LDA_IM_0(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (IY(i + 1) === false) && TAY(i + 2) && LDA_VAL(i + 3) && ADC(i + 4) && (ADC_STACK(i + 4) === false)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 4,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            return false;
          };
          if (STA_BP_1(i + 9) && STA_STACK(i) && LDA_A(i + 1) && ADC_SBC(i + 2) && STA_STACK(i + 3) && LDA_IM_0(i + 4) && ADD_STACK(i + 5) && TAY(i + 6) && LDA_IM_0(i + 7) && ADC_STACK(i + 8)) if (argMatch(i,i + 5) && argMatch(i + 3,i + 8)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 6));
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i + 9));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            return false;
          };
          return Result;
        };
        function opt_BP_ADR(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var q = 0;
          var tmp = "";
          Result = true;
          if ((pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && ADD_STACK(i + 1) && TAY(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && ADC_STACK(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && ADD_SUB(i + 7) && STA_BP_Y(i + 8)) {
            tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256);
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (rtl.rcArrR(listing,p) === tmp) {
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3)) {
                  rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
                  rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,p - 2));
                  rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,p - 1));
                  rtl.rcArrW(listing,i + 5,"\ttay");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
                  rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,p - 2));
                  rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,p - 1));
                  rtl.rcArrW(listing,i + 5,"\ttay");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA(p - 1) && (LDA_STACK(p - 1) === false) && (LDA_IM(p - 1) === false) && LDA(p + 1) && ADD_SUB(p + 2) && STA_STACK(p + 3)) {
                  rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
                  rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,p - 1));
                  rtl.rcArrW(listing,i + 5,"\ttay");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && ((LDA(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA(p + 1) && ADC(p + 2) && STA_STACK(p + 3)) {
                  if (LDA_IM(p - 2)) {
                    q = rtl.rc(GetWORD(p - 2,p + 1),-2147483648,2147483647);
                    rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    rtl.rcArrW(listing,i + 5,"");
                  } else {
                    q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                    if (IY(p - 2) === false) {
                      rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                      rtl.rcArrW(listing,i + 5,"");
                    } else {
                      rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
                      rtl.rcArrW(listing,i + 5,"\ttay");
                    };
                  };
                  rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + "+$" + pas.SysUtils.IntToHex(q,2) + ",y");
                  rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + "+$" + pas.SysUtils.IntToHex(q,2) + ",y");
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA(p + 1) && SBC(p + 2) && STA_STACK(p + 3)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  if (IY(p - 2) === false) {
                    rtl.rcArrW(listing,i + 4,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                    rtl.rcArrW(listing,i + 5,"");
                  } else {
                    rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
                    rtl.rcArrW(listing,i + 5,"\ttay");
                  };
                  rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + "-$" + pas.SysUtils.IntToHex(q,2) + ",y");
                  rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + "-$" + pas.SysUtils.IntToHex(q,2) + ",y");
                  rtl.rcArrW(listing,i,"");
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA_IM(p - 2) && SUB(p - 1) && (SUB_IM(p - 1) === false) && LDA(p + 1) && SBC(p + 2) && STA_STACK(p + 3)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                break;
              };
            };
            if (Result === false) return false;
          };
          if ((pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && ADD_IM(i + 1) && TAY(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && ADC_IM(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && ADD_SUB(i + 7) && STA_BP_Y(i + 8)) {
            q = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + "+$" + pas.SysUtils.IntToHex(q,2));
            rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + "+$" + pas.SysUtils.IntToHex(q,2));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (ADD_IM(i + 1) === false) && TAY(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && ADC_IM(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6) && ADD_SUB(i + 7) && STA_BP_Y(i + 8)) {
            rtl.rcArrW(listing,i + 5,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
            rtl.rcArrW(listing,i + 8,"\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            return false;
          };
          if (LDY_IM_0(i + 4) && (pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && STA_BP2(i + 1) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 2)) > 0) && STA_BP2_1(i + 3) && LDA_BP2_Y(i + 5) && (STA_A(i + 6) || TAY(i + 6)) && (INY(i + 7) === false)) if (pas.System.Copy(rtl.rcArrR(listing,i),7,256) === pas.System.Copy(rtl.rcArrR(listing,i + 2),7,256)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDY_IM_0(i + 6) && (pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i)) > 0) && ADD_SUB_VAL(i + 1) && (IY(i + 1) === false) && STA_BP2(i + 2) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 3)) > 0) && ADC_SBC_IM_0(i + 4) && STA_BP2_1(i + 5) && LDA_BP2_Y(i + 7) && (STA_A(i + 8) || TAY(i + 8)) && (INY(i + 9) === false)) if (pas.System.Copy(rtl.rcArrR(listing,i),7,256) === pas.System.Copy(rtl.rcArrR(listing,i + 3),7,256)) {
            rtl.rcArrW(listing,i + 7,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),7,256) + ",y");
            rtl.rcArrW(listing,i + 6,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (LDY_IM_0(i + 12) && LDA_IM_0(i) && ASL_STACK(i + 1) && ROL_A(i + 2) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_STACK(i + 5) && (pas.System.Pos("\tlda <adr.",rtl.rcArrR(listing,i + 6)) > 0) && ADD_STACK(i + 7) && STA_BP2(i + 8) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 9)) > 0) && ADC_STACK(i + 10) && STA_BP2_1(i + 11) && LDA_BP2_Y(i + 13) && (STA_A(i + 14) || TAY(i + 14)) && (INY(i + 15) === false)) if ((pas.System.Copy(rtl.rcArrR(listing,i + 6),7,256) === pas.System.Copy(rtl.rcArrR(listing,i + 9),7,256)) && argMatch(i + 3,i + 7) && argMatch(i + 5,i + 10)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 1,"\tasl @");
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\ttay");
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 6),7,256) + ",y");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          if (LDY_IM_0(i + 12) && LDA_IM_0(i) && STA_STACK(i + 1) && LDA_VAL(i + 2) && ASL_A(i + 3) && ROL_STACK(i + 4) && ASL_A(i + 5) && ROL_STACK(i + 6) && (pas.System.Pos("\tadd <adr.",rtl.rcArrR(listing,i + 7)) > 0) && STA_BP2(i + 8) && (pas.System.Pos("\tlda >adr.",rtl.rcArrR(listing,i + 9)) > 0) && ADC_STACK(i + 10) && STA_BP2_1(i + 11) && LDA_BP2_Y(i + 13) && (STA_A(i + 14) || TAY(i + 14)) && (INY(i + 15) === false)) if ((pas.System.Copy(rtl.rcArrR(listing,i + 7),7,256) === pas.System.Copy(rtl.rcArrR(listing,i + 9),7,256)) && argMatch(i + 1,i + 10)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
            rtl.rcArrW(listing,i + 1,"\tasl @");
            rtl.rcArrW(listing,i + 2,"\tasl @");
            rtl.rcArrW(listing,i + 3,"\ttay");
            rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 7),7,256) + ",y");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"");
            rtl.rcArrW(listing,i + 8,"");
            rtl.rcArrW(listing,i + 9,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            rtl.rcArrW(listing,i + 13,"");
            return false;
          };
          return Result;
        };
        function opt_BP2_ADR(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var q = 0;
          var tmp = "";
          Result = true;
          if (LDA_VAL(i) && ADD_STACK(i + 1) && STA_BP2(i + 2) && LDA_VAL(i + 3) && ADC_STACK(i + 4) && STA_BP2_1(i + 5) && LDY_IM_0(i + 6)) {
            tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256);
            if (LDA_IM_0(i) && LDA_IM_0(i + 3)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            };
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (rtl.rcArrR(listing,p) === tmp) {
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1) && LDA(p + 1) && ADC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  q = rtl.rc(q * 4,-2147483648,2147483647);
                  if (q <= (256 - 4)) {
                    rtl.rcArrW(listing,i + 6,"\tldy #$" + pas.SysUtils.IntToHex(q,2));
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    Result = false;
                    break;
                  };
                };
                if ((p > 1) && LDA_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA_IM(p + 1) && ADC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  q = rtl.rc(GetWORD(p - 2,p + 1),-2147483648,2147483647);
                  q = rtl.rc(q * 4,-2147483648,2147483647);
                  if (q <= (256 - 4)) {
                    rtl.rcArrW(listing,i + 6,"\tldy #$" + pas.SysUtils.IntToHex(q,2));
                    rtl.rcArrW(listing,p - 2,"");
                    rtl.rcArrW(listing,p - 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    rtl.rcArrW(listing,p + 2,"");
                    Result = false;
                    break;
                  };
                };
                break;
              } else if (onBreak(p)) break;
            };
            if (Result === false) return false;
            for (var $l1 = i - 1; $l1 >= 0; $l1--) {
              p = $l1;
              if (rtl.rcArrR(listing,p) === tmp) {
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1) && LDA(p + 1) && ADC_IM_0(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  q = rtl.rc(q * 2,-2147483648,2147483647);
                  if (q <= (256 - 2)) {
                    rtl.rcArrW(listing,i + 6,"\tldy #$" + pas.SysUtils.IntToHex(q,2));
                    rtl.rcArrW(listing,p - 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    Result = false;
                    break;
                  };
                };
                if ((p > 1) && LDA_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA_IM_0(p + 1) && ADC_IM_0(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = rtl.rc(GetWORD(p - 2,p + 1),-2147483648,2147483647);
                  q = rtl.rc(q * 2,-2147483648,2147483647);
                  if (q <= (256 - 2)) {
                    rtl.rcArrW(listing,i + 6,"\tldy #$" + pas.SysUtils.IntToHex(q,2));
                    rtl.rcArrW(listing,p - 2,"");
                    rtl.rcArrW(listing,p - 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    rtl.rcArrW(listing,p + 2,"");
                    Result = false;
                    break;
                  };
                };
                break;
              } else if (onBreak(p)) break;
            };
            if (Result === false) return false;
            if (Result === false) return false;
          };
          return Result;
        };
        function opt_ADR(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var p = 0;
          var q = 0;
          var tmp = "";
          Result = true;
          if (LDA_STACK(i) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA_STACK(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            tmp = "\tsta " + pas.System.Copy(rtl.rcArrR(listing,i),6,256);
            for (var $l = i - 1; $l >= 0; $l--) {
              p = $l;
              if (rtl.rcArrR(listing,p) === tmp) {
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\tasl @");
                  rtl.rcArrW(listing,i + 4,"\ttay");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && AND_ORA_EOR(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\tasl @");
                  rtl.rcArrW(listing,i + 4,"\ttay");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA_VAL(p - 3) && (LDA_IM(p - 3) === false) && ADD_SUB(p - 2) && AND_ORA_EOR(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\tasl @");
                  rtl.rcArrW(listing,i + 4,"\ttay");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && ASL_STACK(p + 4) && ROL_A(p + 5) && STA_STACK(p + 6)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\tasl @");
                  rtl.rcArrW(listing,i + 4,"\ttay");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && ((LDA(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA_A(p + 1) && ADC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  if (LDA_IM(p - 2)) {
                    q = rtl.rc(GetWORD(p - 2,p + 1),-2147483648,2147483647);
                    rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                  } else {
                    q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                    rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                  };
                  q = rtl.rc(q * 4,-2147483648,2147483647);
                  rtl.rcArrW(listing,i + 1,"\tasl @");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  LDA_STA_ADR(i,q,"+");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  rtl.rcArrW(listing,p + 7,"\tsta #$00");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA_A(p + 1) && SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                  q = rtl.rc(q * 4,-2147483648,2147483647);
                  rtl.rcArrW(listing,i + 1,"\tasl @");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  rtl.rcArrW(listing,p + 7,"\tsta #$00");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && ADD_SUB(p - 1) && LDA_VAL(p + 1) && ADC_SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && ASL_STACK(p + 5) && ROL_A(p + 6) && STA_STACK(p + 7)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\tasl @");
                  rtl.rcArrW(listing,i + 4,"\ttay");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"");
                  rtl.rcArrW(listing,p + 6,"");
                  rtl.rcArrW(listing,p + 7,"");
                  Result = false;
                  break;
                };
                break;
              };
            };
            if (Result === false) return false;
            for (var $l1 = i - 1; $l1 >= 0; $l1--) {
              p = $l1;
              if (rtl.rcArrR(listing,p) === tmp) {
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && AND_ORA_EOR(p - 1) && (AND_ORA_EOR_STACK(p - 1) === false) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA(p - 3) && (LDA_STACK(p - 3) === false) && ADD_SUB_VAL(p - 2) && AND_ORA_EOR(p - 1) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA_A(p + 1) && ASL_STACK(p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"\tasl @");
                  rtl.rcArrW(listing,i + 3,"\ttay");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"\tsta #$00");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_STACK(p - 2) && argMatch(p - 2,p) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p),6,256));
                  q = rtl.rc(q * 2,-2147483648,2147483647);
                  rtl.rcArrW(listing,i + 1,"\tasl @");
                  rtl.rcArrW(listing,i + 2,"\ttay");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"\tsta #$00");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_A(p - 2) === false) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p),6,256));
                  q = rtl.rc(q * 2,-2147483648,2147483647);
                  rtl.rcArrW(listing,i + 1,"\tasl @");
                  rtl.rcArrW(listing,i + 2,"\ttay");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"\tsta #$00");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && ((LDA(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA_A(p + 1) && ADC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  if (LDA_IM(p - 2)) {
                    q = rtl.rc(GetWORD(p - 2,p + 1),-2147483648,2147483647);
                    rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                  } else {
                    q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                    rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                  };
                  q = rtl.rc(q * 2,-2147483648,2147483647);
                  rtl.rcArrW(listing,i + 1,"\tasl @");
                  rtl.rcArrW(listing,i + 2,"\ttay");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  LDA_STA_ADR(i,q,"+");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"\tsta #$00");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA_A(p + 1) && SBC(p + 2) && ASL_STACK(p + 3) && ROL_A(p + 4) && STA_STACK(p + 5)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                  q = rtl.rc(q * 2,-2147483648,2147483647);
                  rtl.rcArrW(listing,i + 1,"\tasl @");
                  rtl.rcArrW(listing,i + 2,"\ttay");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,p + 4,"");
                  rtl.rcArrW(listing,p + 5,"\tsta #$00");
                  Result = false;
                  break;
                };
                break;
              };
            };
            if (Result === false) return false;
            for (var $l2 = i - 1; $l2 >= 0; $l2--) {
              p = $l2;
              if (rtl.rcArrR(listing,p) === tmp) {
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ((LDA_A(p - 3) === false) || (LDA_A(p - 3) && (LDA_STACK(p - 3) === false) && (LDA_IM(p - 3) === false))) && SUB_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && ADC(p + 2) && STA_STACK(p + 3) && (ADC(p + 5) === false)) {
                  q = rtl.rc(GetBYTE(p - 2),-2147483648,2147483647);
                  LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,"");
                  if (LDA_EAX_1(p + 1) && ADD_EAX(p - 1)) {
                    rtl.rcArrW(listing,p - 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,p - 3),6,256));
                    rtl.rcArrW(listing,p - 3,"\tlda :eax");
                  };
                  Result = false;
                  break;
                };
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ((LDA_A(p - 3) === false) || (LDA_A(p - 3) && (LDA_STACK(p - 3) === false) && (LDA_IM(p - 3) === false))) && ADD_IM(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && ADC(p + 2) && STA_STACK(p + 3) && (ADC(p + 5) === false)) {
                  q = rtl.rc(GetBYTE(p - 2),-2147483648,2147483647);
                  LDA_STA_ADR(i,q,"+");
                  rtl.rcArrW(listing,p - 2,"");
                  if (LDA_EAX_1(p + 1) && ADD_EAX(p - 1)) {
                    rtl.rcArrW(listing,p - 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,p - 3),6,256));
                    rtl.rcArrW(listing,p - 3,"\tlda :eax");
                  };
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA_VAL(p - 3) && (LDA_IM(p - 3) === false) && ADD_SUB_VAL(p - 2) && ADD_SUB_VAL(p - 1) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && ROL_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 2,p + 3)) {
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && ASL_A(p - 2) && ROL_STACK(p - 1)) if (argMatch(p - 1,i + 3)) {
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && ROL_STACK(p - 3) && ADD_SUB_VAL(p - 2) && (ADD_SUB_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_STACK(p - 3) && ADD_SUB_IM(p - 2) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_STACK(p - 3) && ADD_SUB_VAL(p - 2) && (ADD_SUB_IM(p - 2) === false) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 4) && ROL_A(p - 5) && STA_STACK(p - 4) && LDA_A(p - 3) && (LDA_IM(p - 3) === false) && AND_ORA_EOR(p - 2) && ADD_SUB(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 4,p + 3)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && ROL_A(p - 4) && STA_STACK(p - 3) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_STACK(p - 4) && ROL_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && ASL_STACK(p - 4) && ROL_STACK(p - 3) && LDA_VAL(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_STACK(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_STACK(p - 2) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 2,p + 3)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 3) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && ROL_A(p - 4) && STA_STACK(p - 3) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 3,p + 3)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 2) && LDA_VAL(p - 3) && (LDA_IM(p - 3) === false) && AND_ORA_EOR(p - 2) && (AND_ORA_EOR_STACK(p - 2) === false) && ADD_SUB_VAL(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && ((LDA_A(p - 2) === false) || (LDA_VAL(p - 2) && (LDA_IM(p - 2) === false))) && ADD_SUB_VAL(p - 1) && (ADD_SUB_IM(p - 1) === false) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if (STA_STACK(p) && INY(p + 1) && LDA_A(p + 2) && STA_STACK(p + 3)) if (argMatch(p + 3,i + 3)) {
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && LDA_VAL(p - 2) && ADD_SUB_VAL(p - 1) && (ADC_SBC(p + 2) === false)) {
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA_A(p + 1) && ADD_SUB(p + 2) && STA_STACK(p + 3) && (rtl.rcArrR(listing,i + 3) === rtl.rcArrR(listing,p + 3)) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 0) && LDA_VAL(p - 1) && (LDA_IM(p - 1) === false) && LDA(p + 1) && (LDA_STACK(p + 1) === false) && (LDA_IM(p + 1) === false) && ASL_STACK(p + 2) && argMatch(p,p + 2) && ROL_A(p + 3) && STA_STACK(p + 4)) {
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 5) && LDY_IM_0(p - 6) && LDA(p - 5) && SPL(p - 4) && DEY(p - 3) && STY_STACK(p - 2) && ADD_SUB(p - 1) && LDA_A(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p - 2,"\tsty #$00");
                  Result = false;
                  break;
                };
                if ((p > 4) && LDY_IM_0(p - 5) && LDA(p - 4) && SPL(p - 3) && DEY(p - 2) && ADD_SUB(p - 1) && TYA(p + 1) && ADC_SBC(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_A(p - 8) === false) && ADD_SUB(p - 7) && (ADD_SUB_IM(p - 7) === false) && STA_STACK(p - 6) && LDA_STACK(p - 5) && ADC_SBC(p - 4) && STA_STACK(p - 3) && LDA(p - 2) && (LDA_STACK(p - 2) === false) && ADD_SUB_STACK(p - 1) && (ADC_SBC(p + 2) === false)) if (argMatch(p - 6,p - 1)) {
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  rtl.rcArrW(listing,p - 3,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && ADD_SUB_IM(p - 7) && STA_STACK(p - 6) && LDA(p - 5) && ADC_SBC_IM(p - 4) && STA_STACK(p - 3) && LDA_VAL(p - 2) && SUB_STACK(p - 1) && LDA_A(p + 1) && SBC_STACK(p + 2) && STA_STACK(p + 3) && (SBC(p + 5) === false)) if (argMatch(p - 6,p - 1) && argMatch(p - 3,p + 2)) {
                  q = rtl.rc(GetWORD(p - 7,p - 4),-2147483648,2147483647);
                  if (ADD_IM(p - 7)) {
                    LDA_STA_ADR(i,q,"-")}
                   else LDA_STA_ADR(i,q,"+");
                  rtl.rcArrW(listing,p - 1,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,p - 8),6,256));
                  rtl.rcArrW(listing,p + 2,"\tsbc " + pas.System.Copy(rtl.rcArrR(listing,p - 5),6,256));
                  rtl.rcArrW(listing,p - 8,"");
                  rtl.rcArrW(listing,p - 7,"");
                  rtl.rcArrW(listing,p - 6,"");
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && ADD_SUB_IM(p - 7) && STA_STACK(p - 6) && LDA(p - 5) && ADC_SBC_IM(p - 4) && STA_STACK(p - 3) && LDA_VAL(p - 2) && ADD_STACK(p - 1) && LDA_A(p + 1) && ADC_STACK(p + 2) && STA_STACK(p + 3) && (ADC(p + 5) === false)) if (argMatch(p - 6,p - 1) && argMatch(p - 3,p + 2)) {
                  q = rtl.rc(GetWORD(p - 7,p - 4),-2147483648,2147483647);
                  if (ADD_IM(p - 7)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,p - 8),6,256));
                  rtl.rcArrW(listing,p + 2,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,p - 5),6,256));
                  rtl.rcArrW(listing,p - 8,"");
                  rtl.rcArrW(listing,p - 7,"");
                  rtl.rcArrW(listing,p - 6,"");
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && (LDA_IM(p - 8) === false) && ADD_SUB_IM(p - 7) && STA_STACK(p - 6) && LDA(p - 5) && ADC_SBC_IM(p - 4) && STA_STACK(p - 3) && LDA_STACK(p - 2) && ADD(p - 1) && (ADD_STACK(p - 1) === false) && (ADD_IM(p - 1) === false) && LDA_A(p + 1) && ADC(p + 2) && (ADC_STACK(p + 2) === false) && (ADC_IM(p + 2) === false) && STA_STACK(p + 3) && (ADC(p + 5) === false)) if (argMatch(p - 6,p - 2) && argMatch(p - 3,p + 3)) {
                  q = rtl.rc(GetWORD(p - 7,p - 4),-2147483648,2147483647);
                  if (ADD_IM(p - 7)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,rtl.rcArrR(listing,p - 8));
                  rtl.rcArrW(listing,p + 1,rtl.rcArrR(listing,p - 5));
                  rtl.rcArrW(listing,p - 8,"");
                  rtl.rcArrW(listing,p - 7,"");
                  rtl.rcArrW(listing,p - 6,"");
                  rtl.rcArrW(listing,p - 5,"");
                  rtl.rcArrW(listing,p - 4,"");
                  rtl.rcArrW(listing,p - 3,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(p - 8) && (LDA_IM(p - 8) === false) && ADD(p - 7) && (ADD_STACK(p - 7) === false) && (ADD_IM(p - 7) === false) && STA_STACK(p - 6) && LDA(p - 5) && ADC(p - 4) && (ADC_STACK(p - 4) === false) && (ADC_IM(p - 4) === false) && STA_STACK(p - 3) && LDA_STACK(p - 2) && ADD_SUB_IM(p - 1) && LDA_A(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) if (argMatch(p - 6,p - 2) && argMatch(p - 3,p + 3)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 7) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (ADD_SUB(p - 7) === false) && (ADC_SBC(p - 4) === false) && LDA_STACK(p - 2) && ADD_SUB_IM(p - 1) && LDA_STACK(p + 1) && ADC_SBC_IM(p + 2) && STA_STACK(p + 3) && (ADC_SBC(p + 5) === false)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  if (ADD_IM(p - 1)) {
                    LDA_STA_ADR(i,q,"+")}
                   else LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (ADD_STACK(p - 1) === false) && (IY(p - 2) === false) && ((LDA_A(p - 2) && (LDA_IM(p - 2) === false) && ADD_IM(p - 1)) || (LDA_IM(p - 2) && ADD(p - 1) && (ADD_IM(p - 1) === false))) && LDA_VAL(p + 1) && ADC(p + 2) && (ADC_STACK(p + 2) === false) && STA_STACK(p + 3) && (ADC(p + 5) === false)) {
                  if (LDA_IM(p - 2)) {
                    q = rtl.rc(GetWORD(p - 2,p + 1),-2147483648,2147483647);
                    rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 1),6,256));
                    rtl.rcArrW(listing,i + 1,"");
                  } else {
                    q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                    rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                    rtl.rcArrW(listing,i + 1,"");
                  };
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  LDA_STA_ADR(i,q,"+");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && (IY(p - 2) === false) && LDA_A(p - 2) && (LDA_IM(p - 2) === false) && SUB_IM(p - 1) && LDA_A(p + 1) && SBC_IM(p + 2) && STA_STACK(p + 3) && (SBC(p + 5) === false)) {
                  q = rtl.rc(GetWORD(p - 1,p + 2),-2147483648,2147483647);
                  rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,p - 2),6,256));
                  rtl.rcArrW(listing,i + 1,"");
                  rtl.rcArrW(listing,i + 2,"");
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  LDA_STA_ADR(i,q,"-");
                  rtl.rcArrW(listing,p - 2,"");
                  rtl.rcArrW(listing,p - 1,"");
                  rtl.rcArrW(listing,p,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                if ((p > 1) && (LDA_STACK(p - 2) === false) && (SUB_STACK(p - 1) === false) && LDA_IM(p - 2) && SUB(p - 1) && (SUB_IM(p - 1) === false) && LDA_A(p + 1) && SBC(p + 2) && STA_STACK(p + 3) && (SBC(p + 5) === false)) {
                  rtl.rcArrW(listing,i + 3,"");
                  rtl.rcArrW(listing,i + 4,"");
                  rtl.rcArrW(listing,i + 5,"");
                  rtl.rcArrW(listing,p + 1,"");
                  rtl.rcArrW(listing,p + 2,"");
                  rtl.rcArrW(listing,p + 3,"");
                  Result = false;
                  break;
                };
                break;
              } else if (rtl.rcArrR(listing,p) === ("\tasl " + pas.System.Copy(rtl.rcArrR(listing,i),6,256))) break;
            };
            if (Result === false) return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_VAL(i) && (LDA_IM(i) === false) && ADD(i + 1) && (ADD_IM_0(i + 1) === false) && (ADD_STACK(i + 1) === false) && TAY(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && (IY(i + 6) || IY(i + 7)) && LDA_IM(i) && ADD_IM_0(i + 1) && TAY(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            rtl.rcArrW(listing,i,"\tldy " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            q = rtl.rc(GetBYTE(i),-2147483648,2147483647);
            if (LDA_ADR_Y(i + 6)) {
              pas.System.Delete({a: i + 6, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 6)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i + 6) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            if (STA_ADR_Y(i + 7)) {
              pas.System.Delete({a: i + 7, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 7)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 7,rtl.rcArrR(listing,i + 7) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            rtl.rcArrW(listing,i,"");
            if ((LDA_ADR(i + 8) === false) && (STA_ADR(i + 9) === false)) return false;
            if (LDA_ADR_Y(i + 8)) {
              pas.System.Delete({a: i + 8, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 8)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 8,rtl.rcArrR(listing,i + 8) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            if (STA_ADR_Y(i + 9)) {
              pas.System.Delete({a: i + 9, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 9)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 9) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            if ((LDA_ADR(i + 10) === false) && (STA_ADR(i + 11) === false)) return false;
            if (LDA_ADR_Y(i + 10)) {
              pas.System.Delete({a: i + 10, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 10)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 10,rtl.rcArrR(listing,i + 10) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            if (STA_ADR_Y(i + 11)) {
              pas.System.Delete({a: i + 11, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 11)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 11,rtl.rcArrR(listing,i + 11) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            if ((LDA_ADR(i + 12) === false) && (STA_ADR(i + 13) === false)) return false;
            if (LDA_ADR_Y(i + 12)) {
              pas.System.Delete({a: i + 12, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 12)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 12,rtl.rcArrR(listing,i + 12) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            if (STA_ADR_Y(i + 13)) {
              pas.System.Delete({a: i + 13, p: listing, get: function () {
                  return this.p[this.a];
                }, set: function (v) {
                  this.p[this.a] = v;
                }},pas.System.Pos(",y",rtl.rcArrR(listing,i + 13)),2);
              if (q !== 0) rtl.rcArrW(listing,i + 13,rtl.rcArrR(listing,i + 13) + "+$" + pas.SysUtils.IntToHex(q,2));
            };
            return false;
          };
          if ((LDA_ADR(i + 6) || STA_ADR(i + 7)) && (LDA_IM(i) === false) && (LDA_STACK(i) === false) && ADD_IM(i + 1) && TAY(i + 2) && LDA(i + 3) && ADC_IM_0(i + 4) && STA_STACK(i + 5)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_VAL(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10) && argMatch(i + 6,i + 8) && argMatch(i + 8,i + 12) && argMatch(i + 9,i + 11) && argMatch(i + 11,i + 15)) {
            q = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            rtl.rcArrW(listing,i + 10,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_IM(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && (ADD_IM(i + 1) === false) && STA_STACK(i + 2) && LDA_IM(i + 3) && ADC(i + 4) && (ADC_STACK(i + 1) === false) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if (argMatch(i + 2,i + 7) && argMatch(i + 5,i + 10) && argMatch(i + 6,i + 8) && argMatch(i + 8,i + 12) && argMatch(i + 9,i + 11) && argMatch(i + 11,i + 15)) {
            q = rtl.rc(GetWORD(i,i + 3),-2147483648,2147483647);
            LDA_STA_ADR(i + 12,q,"+");
            rtl.rcArrW(listing,i + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 10,"\tadc " + pas.System.Copy(rtl.rcArrR(listing,i + 4),6,256));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_VAL(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA_VAL(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && (ADD_STACK(i + 7) === false) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC(i + 10) && (ADC_STACK(i + 10) === false) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if (argMatch(i + 2,i + 6) && argMatch(i + 6,i + 8) && argMatch(i + 8,i + 12) && argMatch(i + 5,i + 9) && argMatch(i + 9,i + 11) && argMatch(i + 11,i + 15)) {
            q = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            rtl.rcArrW(listing,i + 6,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i + 9,rtl.rcArrR(listing,i + 3));
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && LDA_STACK(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 7) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 10) && argMatch(i + 6,i + 8) && argMatch(i + 8,i + 12) && argMatch(i + 9,i + 11) && argMatch(i + 11,i + 15)) {
            q = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 12) || STA_ADR(i + 13)) && (IY(i + 12) || IY(i + 13)) && LDA_STACK(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_IM_0(i + 7) && TAY(i + 8) && LDA_STACK(i + 9) && ADC_IM_0(i + 10) && STA_STACK(i + 11)) if (argMatch(i,i + 2) && argMatch(i + 2,i + 6) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 9) && argMatch(i + 9,i + 11)) {
            q = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 6,q,"+")}
             else LDA_STA_ADR(i + 6,q,"-");
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if ((LDA_ADR(i + 18) || STA_ADR(i + 19)) && (IY(i + 18) || IY(i + 19)) && STY_STACK(i) && ADD_SUB_IM(i + 1) && STA_STACK(i + 2) && LDA(i + 3) && ADC_SBC_IM(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD_STACK(i + 7) && STA_STACK(i + 8) && LDA_STACK(i + 9) && ADC_STACK(i + 10) && STA_STACK(i + 11) && LDA_STACK(i + 12) && ADD_IM_0(i + 13) && TAY(i + 14) && LDA_STACK(i + 15) && ADC_IM_0(i + 16) && STA_STACK(i + 17)) if (argMatch(i,i + 3) && argMatch(i + 2,i + 7) && argMatch(i + 3,i + 5) && argMatch(i + 5,i + 10) && argMatch(i + 6,i + 8) && argMatch(i + 8,i + 12) && argMatch(i + 9,i + 11) && argMatch(i + 11,i + 15)) {
            q = rtl.rc(GetWORD(i + 1,i + 4),-2147483648,2147483647);
            if (ADD_IM(i + 1)) {
              LDA_STA_ADR(i + 12,q,"+")}
             else LDA_STA_ADR(i + 12,q,"-");
            rtl.rcArrW(listing,i,"\tsty #$00");
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            return false;
          };
          if (ADD_SUB(i + 1) && STA_STACK(i + 2) && LDA_A(i + 3) && ADC_SBC(i + 4) && STA_STACK(i + 5) && MWY(i + 6) && LDA_STACK(i + 7) && ADD_SUB(i + 8) && STA_STACK(i + 9) && LDA_STACK(i + 10) && ADC_SBC(i + 11) && STA_STACK(i + 12) && LDY_STACK(i + 13)) if (argMatch(i + 2,i + 7) && argMatch(i + 7,i + 9) && argMatch(i + 5,i + 10) && argMatch(i + 10,i + 12) && argMatch(i + 9,i + 13)) {
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 10,"");
            rtl.rcArrW(listing,i + 11,"");
            rtl.rcArrW(listing,i + 12,"");
            return false;
          };
          return Result;
        };
        function opt_FORTMP(i) {
          rtl.rc(i,-2147483648,2147483647);
          var Result = false;
          var tmp = "";
          Result = true;
          if ((pas.System.Pos("sta @FORTMP_",rtl.rcArrR(listing,i + 1)) > 0) && LDA_IM(i)) {
            rtl.rcArrW(listing,i + 1,"\tmva " + pas.System.Copy(rtl.rcArrR(listing,i),6,4) + " " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if ((pas.System.Pos("sta @FORTMP_",rtl.rcArrR(listing,i + 1)) > 0) && LDA_ADR(i) && (IY(i) === false)) {
            rtl.rcArrW(listing,i + 1,"\tmva " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i,"");
            return false;
          };
          if (pas.System.Pos("@FORTMP_",rtl.rcArrR(listing,i)) === 0) {
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && MVA_IM(i + 3) && (STA(i + 4) === false)) if ((pas.System.Copy(rtl.rcArrR(listing,i),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 3),6,4))) {
              rtl.rcArrW(listing,i + 1,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 1),10,256));
              rtl.rcArrW(listing,i + 2,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 2),10,256));
              rtl.rcArrW(listing,i + 3,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 3),10,256));
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && MVA_IM(i + 3) && (STA(i + 4) === false)) if ((pas.System.Copy(rtl.rcArrR(listing,i),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 3),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i),6,4) !== pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4) !== pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4) !== pas.System.Copy(rtl.rcArrR(listing,i + 3),6,4))) {
              tmp = rtl.rcArrR(listing,i);
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 1,rtl.rcArrR(listing,i + 2));
              rtl.rcArrW(listing,i + 2,tmp);
              rtl.rcArrW(listing,i + 3,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 3),10,256));
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && (STA(i + 3) === false)) if ((pas.System.Copy(rtl.rcArrR(listing,i),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4))) {
              rtl.rcArrW(listing,i + 1,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 1),10,256));
              rtl.rcArrW(listing,i + 2,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 2),10,256));
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && MVA_IM(i + 2) && (STA(i + 3) === false)) if ((pas.System.Copy(rtl.rcArrR(listing,i),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4)) && (pas.System.Copy(rtl.rcArrR(listing,i),6,4) !== pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4))) {
              tmp = rtl.rcArrR(listing,i);
              rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i + 1,tmp);
              rtl.rcArrW(listing,i + 2,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 2),10,256));
              return false;
            };
            if (MVA_IM(i) && STA(i + 1) && MVA_IM(i + 2) && (STA(i + 3) === false)) if (pas.System.Copy(rtl.rcArrR(listing,i),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 2),6,4)) {
              rtl.rcArrW(listing,i + 2,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 2),10,256));
              return false;
            };
            if (MVA_IM(i) && MVA_IM(i + 1) && (STA(i + 2) === false)) if (pas.System.Copy(rtl.rcArrR(listing,i),6,4) === pas.System.Copy(rtl.rcArrR(listing,i + 1),6,4)) {
              rtl.rcArrW(listing,i + 1,"\tsta" + pas.System.Copy(rtl.rcArrR(listing,i + 1),10,256));
              return false;
            };
          };
          return Result;
        };
        function PeepholeOptimization() {
          var Result = false;
          var i = 0;
          Result = true;
          Rebuild();
          for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
            i = $l;
            if (opt_FORTMP(i) === false) {
              Result = false;
              break;
            };
            if ((i === (l - 1)) && (STA_STACK(i) || STY_STACK(i) || LDA_A(i) || LDY(i) || AND_ORA_EOR(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i) || ADC(i) || SBC(i))) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 2)) && SKIP(i + 1) && STA_STACK(i)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 2)) && JMP(i + 1) && (STA_STACK(i) || STY_STACK(i) || LDA_A(i) || LDY(i) || AND_ORA_EOR(i) || INY(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i) || ADC(i) || SBC(i))) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 2)) && STA_im_0(i) && INY(i + 1)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if ((i === (l - 3)) && (LDA_VAL(i + 1) || TYA(i + 1)) && STA_A(i + 2) && (LDA_A(i) || AND_ORA_EOR(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i))) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 3)) && STA_STACK(i) && (JNE(i + 1) || JEQ(i + 1)) && (LAB_L(i + 2) || LAB_B(i + 2))) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 3)) && INY(i) && AND_ORA_EOR(i + 1) && (IY(i + 1) === false) && STA_A(i + 2) && (IY(i + 2) === false)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 4)) && LDA_VAL(i + 1) && STA_A(i + 2) && STA_A(i + 3) && (LDA_A(i) || AND_ORA_EOR(i) || LSR_STACK(i) || ASL_STACK(i) || ROR_STACK(i) || ROL_STACK(i) || LSR_A(i) || ASL_A(i) || ROR_A(i) || ROL_A(i))) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if ((i === (l - 4)) && LDA_STACK(i) && STA_STACK(i + 1) && (LDA_VAL(i + 2) || TYA(i + 2)) && STA_A(i + 3)) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if ((i === (l - 4)) && INY(i) && LDA_A(i + 1) && (IY(i + 1) === false) && AND_ORA_EOR(i + 2) && (IY(i + 2) === false) && STA_A(i + 3) && (IY(i + 3) === false)) {
              rtl.rcArrW(listing,i,"");
              Result = false;
              break;
            };
            if (LDA_VAL(i) && AND_IM(i + 1) && (rtl.rcArrR(listing,i + 2) === "\tjsr #$00") && LDA_IM_0(i + 3) && STA_STACK(i + 4) && (rtl.rcArrR(listing,i + 5) === "\tlda @BYTE.MOD.RESULT")) {
              rtl.rcArrW(listing,i + 2,rtl.rcArrR(listing,i + 4));
              rtl.rcArrW(listing,i + 3,"");
              rtl.rcArrW(listing,i + 4,rtl.rcArrR(listing,i));
              rtl.rcArrW(listing,i + 5,rtl.rcArrR(listing,i + 1));
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"\tlda #$00");
              Result = false;
              break;
            };
            if ((rtl.rcArrR(listing,i) === "\tjsr #$00") && (rtl.rcArrR(listing,i + 1) === "\tlda @BYTE.MOD.RESULT")) {
              rtl.rcArrW(listing,i,"");
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if ((rtl.rcArrR(listing,i) === "\tjsr #$00") && (rtl.rcArrR(listing,i + 1) === "\tldy @BYTE.MOD.RESULT")) {
              rtl.rcArrW(listing,i,"\ttay");
              rtl.rcArrW(listing,i + 1,"");
              Result = false;
              break;
            };
            if (opt_STA_0(i) === false) {
              Result = false;
              break;
            };
            if (opt_LDA(i) === false) {
              Result = false;
              break;
            };
            if (opt_TAY(i) === false) {
              Result = false;
              break;
            };
            if (opt_LDY(i) === false) {
              Result = false;
              break;
            };
            if (opt_BP(i) === false) {
              Result = false;
              break;
            };
            if (opt_AND(i) === false) {
              Result = false;
              break;
            };
            if (opt_ORA(i) === false) {
              Result = false;
              break;
            };
            if (opt_EOR(i) === false) {
              Result = false;
              break;
            };
            if (opt_NOT(i) === false) {
              Result = false;
              break;
            };
            if (opt_ADD(i) === false) {
              Result = false;
              break;
            };
            if (opt_SUB(i) === false) {
              Result = false;
              break;
            };
            if (opt_LSR(i) === false) {
              Result = false;
              break;
            };
            if (opt_ASL(i) === false) {
              Result = false;
              break;
            };
            if (opt_SPL(i) === false) {
              Result = false;
              break;
            };
            if (opt_ADR(i) === false) {
              Result = false;
              break;
            };
            if (opt_BP_ADR(i) === false) {
              Result = false;
              break;
            };
            if (opt_BP2_ADR(i) === false) {
              Result = false;
              break;
            };
            if (opt_POKE(i) === false) {
              Result = false;
              break;
            };
            if (pas.Common.target.cpu !== pas.Targets.TCPU.CPU_6502) {
              if (opt_STZ(i) === false) {
                Result = false;
                break;
              };
            };
          };
          return Result;
        };
        do {
        } while (!PeepholeOptimization());
        while (RemoveUnusedSTACK()) do {
        } while (!PeepholeOptimization());
        do {
        } while (!PeepholeOptimization_STA());
        while (RemoveUnusedSTACK()) do {
        } while (!PeepholeOptimization());
        do {
        } while (!PeepholeOptimization_END());
        while (RemoveUnusedSTACK()) do {
        } while (!PeepholeOptimization());
      };
      function OptimizeRelation() {
        var Result = false;
        var i = 0;
        var p = 0;
        var tmp = "";
        var yes = false;
        Result = true;
        for (var $l = 0, $end = l - 1; $l <= $end; $l++) {
          i = $l;
          if (pas.System.Pos("@+",rtl.rcArrR(listing,i)) > 0) break;
          if (rtl.rcArrR(listing,i) === "@") rtl.rcArrW(listing,i,"");
        };
        Rebuild();
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (CMP(i) && LAB_A(i + 1) && (JEQ(i + 2) || JNE(i + 2)) && LAB_A(i + 3)) {
            rtl.rcArrW(listing,i + 3,"");
            Result = false;
            break;
          };
          if (LDA_IM(i) && ADD_IM(i + 1) && STA(i + 2) && (ADC(i + 4) === false)) {
            p = rtl.rc(GetBYTE(i) + GetBYTE(i + 1),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            Result = false;
            break;
          };
          if (LDA_IM(i) && SUB_IM(i + 1) && STA(i + 2) && (SBC(i + 4) === false)) {
            p = rtl.rc(GetBYTE(i) - GetBYTE(i + 1),-2147483648,2147483647);
            rtl.rcArrW(listing,i,"\tlda #$" + pas.SysUtils.IntToHex(p & 0xff,2));
            rtl.rcArrW(listing,i + 1,"");
            Result = false;
            break;
          };
          if (LDA(i) && LDY_1(i + 1) && AND_IM_0(i + 2) && BNE(i + 3) && LDA(i + 4)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            rtl.rcArrW(listing,i + 3,"");
            Result = false;
            break;
          };
          if ((i > 0) && AND_IM_0(i)) if (LDA_IM_0(i - 1)) {
            rtl.rcArrW(listing,i,"");
            Result = false;
            break;
          };
          if ((i > 0) && ORA(i)) if (LDA_IM_0(i - 1)) {
            rtl.rcArrW(listing,i,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i),6,256));
            Result = false;
            break;
          };
          if (LDA_IM_0(i) && BNE(i + 1) && LDA(i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,"");
            Result = false;
            break;
          };
          if (LDA(i) && SKIP(i + 1) && LDA(i + 2) && (rtl.rcArrR(listing,i) === rtl.rcArrR(listing,i + 2))) {
            rtl.rcArrW(listing,i + 2,"");
            Result = false;
            break;
          };
          if ((LDA_A(i) || ADC_SBC(i)) && (EOR_IM_0(i + 1) || ORA_IM_0(i + 1)) && SKIP(i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            Result = false;
            break;
          };
          if (AND_ORA_EOR(i) && (EOR_IM_0(i + 1) || ORA_IM_0(i + 1)) && SKIP(i + 2)) {
            rtl.rcArrW(listing,i + 1,"");
            Result = false;
            break;
          };
          if (STA_STACK(i) && INY(i + 1) && LDA_STACK(i + 2) && CMP(i + 3)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"");
            Result = false;
            break;
          };
          if (STA_STACK(i) && LDA(i + 1) && AND_ORA_EOR_STACK(i + 2)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 1,pas.System.Copy(rtl.rcArrR(listing,i + 2),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            Result = false;
            break;
          };
          if (STY_STACK(i) && LDA_STACK(i + 1) && AND_ORA_EOR_STACK(i + 2) && STA_STACK(i + 3)) if (argMatch(i,i + 2) && argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i,"\ttya");
            rtl.rcArrW(listing,i + 1,pas.System.Copy(rtl.rcArrR(listing,i + 2),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            Result = false;
            break;
          };
          if (STY_STACK(i) && LDA(i + 1) && ADD_STACK(i + 2) && STA(i + 3)) if (argMatch(i,i + 2)) {
            rtl.rcArrW(listing,i,"\ttya");
            rtl.rcArrW(listing,i + 1,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,i + 1),6,256));
            rtl.rcArrW(listing,i + 2,"");
            Result = false;
            break;
          };
          if (STA_STACK(i) && LDA_STACK(i + 1) && AND_ORA_EOR(i + 2) && (AND_ORA_EOR_STACK(i + 2) === false) && STA_STACK(i + 3) && LDA_STACK(i + 4) && BNE(i + 5) && LDA_STACK(i + 6)) if (argMatch(i,i + 4) && argMatch(i + 1,i + 3) && argMatch(i + 3,i + 6)) {
            rtl.rcArrW(listing,i,rtl.rcArrR(listing,i + 5));
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"");
            Result = false;
            break;
          };
          if ((AND_ORA_EOR(i) || ASL_A(i) || ROL_A(i) || LSR_A(i) || ROR_A(i)) && (IY(i) === false) && STA_STACK(i + 1) && LDY_1(i + 2) && LDA_STACK(i + 3) && (BNE(i + 4) || BEQ(i + 4))) if (argMatch(i + 1,i + 3)) {
            rtl.rcArrW(listing,i + 1,"");
            rtl.rcArrW(listing,i + 3,rtl.rcArrR(listing,i));
            rtl.rcArrW(listing,i,"");
            Result = false;
            break;
          };
          if ((STY_STACK(i) || STA_STACK(i)) && MVA_STACK(i + 1) && (pas.System.Copy(rtl.rcArrR(listing,i),6,256) === GetString$1(i + 1))) {
            rtl.rcArrW(listing,i + 1,pas.System.Copy(rtl.rcArrR(listing,i),1,5) + pas.System.Copy(rtl.rcArrR(listing,i + 1),GetString$1(i + 1).length + 7,256));
            rtl.rcArrW(listing,i,"");
            Result = false;
            break;
          };
          if (opt_LOCAL(i) === false) {
            Result = false;
            break;
          };
          if (opt_LT_GTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_LTEQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_GT(i) === false) {
            Result = false;
            break;
          };
          if (opt_NE_EQ(i) === false) {
            Result = false;
            break;
          };
          if (opt_CMP(i) === false) {
            Result = false;
            break;
          };
          if (opt_CMP_BP2(i) === false) {
            Result = false;
            break;
          };
          if (opt_BRANCH(i) === false) {
            Result = false;
            break;
          };
          if (LDY_1(i) && LDA(i + 1) && CMP(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && TYA(i + 6) && AND_(i + 7) && (AND_STACK(i + 7) === false) && JEQ(i + 8)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 4,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 6,"");
            rtl.rcArrW(listing,i + 7,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            Result = false;
            break;
          };
          if (LDY_1(i) && LDA(i + 1) && SKIP(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && AND_(i + 6) && (AND_STACK(i + 6) === false) && JEQ(i + 7)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 5,"");
            rtl.rcArrW(listing,i + 6,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            Result = false;
            break;
          };
          if (LAB_A(i) && TYA(i + 1) && AND_STACK(i + 2) && JEQ(i + 3)) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            yes = true;
            for (var $l2 = i - 1; $l2 >= 0; $l2--) {
              p = $l2;
              if (ORA_STACK(p) || LOCAL(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && AND_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && LDY_1(p + 1) && LDA_STACK(p + 2) && argMatch(p,p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && (argMatch(p,i + 2) === false)) || (TYA(p) && (LAB_A(p - 1) === false) && (AND_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l3 = i - 1; $l3 >= 0; $l3--) {
                p = $l3;
                if (LDY_1(p)) rtl.rcArrW(listing,p,"");
                if (rtl.rcArrR(listing,p) === ("\tsty " + tmp)) rtl.rcArrW(listing,p,"");
                if ((TYA(p) === false) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p + 2) === ("\tsta " + tmp))) {
                  rtl.rcArrW(listing,p + 1,rtl.rcArrR(listing,i + 3));
                  rtl.rcArrW(listing,p + 2,"");
                };
                if (LAB_A(p) && TYA(p + 1) && AND_(p + 2) && (rtl.rcArrR(listing,p + 3) === ("\tsta " + tmp))) {
                  if (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,i + 2)) {
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                  } else {
                    rtl.rcArrW(listing,p + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p + 2),6,256));
                    rtl.rcArrW(listing,p + 2,rtl.rcArrR(listing,i + 3));
                    rtl.rcArrW(listing,p + 3,"");
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) rtl.rcArrW(listing,p,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              };
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256));
              for (var $l4 = i; $l4 >= 1; $l4--) {
                p = $l4;
                if ((pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) && (ADD_SUB(p - 1) === false) && (ADC_SBC(p - 1) === false) && (LDA_A(p - 1) === false)) {
                  if (rtl.rcArrR(listing,p) === ("\tsta " + tmp)) rtl.rcArrW(listing,p,rtl.rcArrR(listing,i + 3));
                  break;
                };
              };
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
          };
          if (LDY_1(i) && LDA(i + 1) && CMP(i + 2) && SKIP(i + 3) && DEY(i + 4) && LAB_A(i + 5) && TYA(i + 6) && (ORA_STACK(i + 7) === false) && ORA(i + 7) && JEQ(i + 8)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 4,"\tjmp *+6");
            rtl.rcArrW(listing,i + 5,"@\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256) + "x");
            rtl.rcArrW(listing,i + 6,"\tlda:sne " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 7,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256));
            rtl.rcArrW(listing,i + 8,pas.System.Copy(rtl.rcArrR(listing,i + 8),6,256) + "x");
            Result = false;
            break;
          };
          if (LDY_1(i) && LDA(i + 1) && SKIP(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && (ORA_STACK(i + 6) === false) && ORA(i + 6) && JEQ(i + 7)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 3,"\tjmp *+6");
            rtl.rcArrW(listing,i + 4,"@\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256) + "x");
            rtl.rcArrW(listing,i + 5,"\tlda:sne " + pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256));
            rtl.rcArrW(listing,i + 6,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256));
            rtl.rcArrW(listing,i + 7,pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256) + "x");
            Result = false;
            break;
          };
          if (LDY_1(i) && (rtl.rcArrR(listing,i + 1) === "\tand #$01") && BEQ(i + 2) && DEY(i + 3) && LAB_A(i + 4) && TYA(i + 5) && (ORA_STACK(i + 6) === false) && ORA(i + 6) && JEQ(i + 7)) {
            rtl.rcArrW(listing,i,"");
            rtl.rcArrW(listing,i + 2,"\teor #$01");
            rtl.rcArrW(listing,i + 3,"");
            rtl.rcArrW(listing,i + 4,"");
            rtl.rcArrW(listing,i + 5,"");
            Result = false;
            break;
          };
          if (LAB_A(i) && TYA(i + 1) && ORA_STACK(i + 2) && JEQ(i + 3)) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            yes = true;
            for (var $l5 = i - 1; $l5 >= 0; $l5--) {
              p = $l5;
              if (AND_STACK(p) || LOCAL(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && ORA_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && LDY_1(p + 1) && LDA_STACK(p + 2) && argMatch(p,p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && (argMatch(p,i + 2) === false)) || (TYA(p) && (LAB_A(p - 1) === false) && (ORA_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l6 = i - 1; $l6 >= 0; $l6--) {
                p = $l6;
                if (LDY_1(p)) rtl.rcArrW(listing,p,"");
                if (rtl.rcArrR(listing,p) === ("\tsty " + tmp)) rtl.rcArrW(listing,p,"");
                if ((TYA(p) === false) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p + 2) === ("\tsta " + tmp))) {
                  rtl.rcArrW(listing,p + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "x");
                  rtl.rcArrW(listing,p + 2,"");
                };
                if (LAB_A(p) && TYA(p + 1) && (pas.System.Pos("ora ",rtl.rcArrR(listing,p + 2)) > 0) && (rtl.rcArrR(listing,p + 3) === ("\tsta " + tmp))) {
                  if (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,i + 2)) {
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                  } else {
                    rtl.rcArrW(listing,p + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p + 2),6,256));
                    rtl.rcArrW(listing,p + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "x");
                    rtl.rcArrW(listing,p + 3,"");
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) {
                  rtl.rcArrW(listing,p,"\tjmp *+6");
                  rtl.rcArrW(listing,p + 1,"@\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "x");
                };
              };
              rtl.rcArrW(listing,i + 1,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "x");
              for (var $l7 = i; $l7 >= 1; $l7--) {
                p = $l7;
                if ((pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) && (ADD_SUB(p - 1) === false) && (ADC_SBC(p - 1) === false) && (LDA_A(p - 1) === false)) {
                  if (rtl.rcArrR(listing,p) === ("\tsta " + tmp)) rtl.rcArrW(listing,p,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "x");
                  break;
                };
              };
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && AND_STACK(i + 2) && JNE(i + 3)) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            yes = true;
            for (var $l8 = i - 1; $l8 >= 0; $l8--) {
              p = $l8;
              if (ORA_STACK(p) || LOCAL(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && AND_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && LDY_1(p + 1) && LDA_STACK(p + 2) && argMatch(p,p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && (argMatch(p,i + 2) === false)) || (TYA(p) && (LAB_A(p - 1) === false) && (AND_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l9 = i - 1; $l9 >= 0; $l9--) {
                p = $l9;
                if (LDY_1(p)) rtl.rcArrW(listing,p,"");
                if (rtl.rcArrR(listing,p) === ("\tsty " + tmp)) rtl.rcArrW(listing,p,"");
                if ((TYA(p) === false) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p + 2) === ("\tsta " + tmp))) {
                  rtl.rcArrW(listing,p + 1,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "w");
                  rtl.rcArrW(listing,p + 2,"");
                };
                if (LAB_A(p) && TYA(p + 1) && AND_(p + 2) && (rtl.rcArrR(listing,p + 3) === ("\tsta " + tmp))) {
                  if (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,i + 2)) {
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                  } else {
                    rtl.rcArrW(listing,p + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p + 2),6,256));
                    rtl.rcArrW(listing,p + 2,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "w");
                    rtl.rcArrW(listing,p + 3,"");
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) rtl.rcArrW(listing,p,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "w");
              };
              rtl.rcArrW(listing,i + 1,"\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
              rtl.rcArrW(listing,i + 2,pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "w");
              for (var $l10 = i; $l10 >= 1; $l10--) {
                p = $l10;
                if ((pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) && (ADD_SUB(p - 1) === false) && (ADC_SBC(p - 1) === false) && (LDA_A(p - 1) === false)) {
                  if (rtl.rcArrR(listing,p) === ("\tsta " + tmp)) rtl.rcArrW(listing,p,"\tjeq " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256) + "w");
                  break;
                };
              };
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && ORA_STACK(i + 2) && JNE(i + 3)) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            yes = true;
            for (var $l11 = i - 1; $l11 >= 0; $l11--) {
              p = $l11;
              if (AND_STACK(p) || LOCAL(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && ORA_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && LDY_1(p + 1) && LDA_STACK(p + 2) && argMatch(p,p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && (argMatch(p,i + 2) === false)) || (TYA(p) && (LAB_A(p - 1) === false) && (ORA_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l12 = i - 1; $l12 >= 0; $l12--) {
                p = $l12;
                if (LDY_1(p)) rtl.rcArrW(listing,p,"");
                if (rtl.rcArrR(listing,p) === ("\tsty " + tmp)) rtl.rcArrW(listing,p,"");
                if ((TYA(p) === false) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p + 2) === ("\tsta " + tmp))) {
                  rtl.rcArrW(listing,p + 1,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
                  rtl.rcArrW(listing,p + 2,"");
                };
                if (LAB_A(p) && TYA(p + 1) && ORA(p + 2) && (rtl.rcArrR(listing,p + 3) === ("\tsta " + tmp))) {
                  if (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,i + 2)) {
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                  } else {
                    rtl.rcArrW(listing,p + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p + 2),6,256));
                    rtl.rcArrW(listing,p + 2,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
                    rtl.rcArrW(listing,p + 3,"");
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) {
                  rtl.rcArrW(listing,p,"\tjmp *+6");
                  rtl.rcArrW(listing,p + 1,"@\tjmp " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
                };
              };
              rtl.rcArrW(listing,i + 1,"");
              rtl.rcArrW(listing,i + 2,"");
              for (var $l13 = i; $l13 >= 1; $l13--) {
                p = $l13;
                if ((pas.System.Pos(tmp,rtl.rcArrR(listing,p)) > 0) && (ADD_SUB(p - 1) === false) && (ADC_SBC(p - 1) === false) && (LDA_A(p - 1) === false)) {
                  if (rtl.rcArrR(listing,p) === ("\tsta " + tmp)) rtl.rcArrW(listing,p,"\tjne " + pas.System.Copy(rtl.rcArrR(listing,i + 3),6,256));
                  break;
                };
              };
              rtl.rcArrW(listing,i + 3,"");
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && AND_STACK(i + 2) && (STA_VAL(i + 3) || (LDY(i + 3) && STA_ADR(i + 4)))) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            yes = true;
            for (var $l14 = i - 1; $l14 >= 1; $l14--) {
              p = $l14;
              if (ORA_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && AND_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && LDY_1(p + 1) && LDA_STACK(p + 2) && argMatch(p,p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && (argMatch(p,i + 2) === false)) || (TYA(p) && (LAB_A(p - 1) === false) && (AND_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l15 = i - 1; $l15 >= 0; $l15--) {
                p = $l15;
                if (LDY_1(p)) rtl.rcArrW(listing,p,"");
                if (rtl.rcArrR(listing,p) === ("\tsty " + tmp)) rtl.rcArrW(listing,p,"");
                if ((TYA(p) === false) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p + 2) === ("\tsta " + tmp))) {
                  rtl.rcArrW(listing,p + 1,"\tjeq l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s");
                  rtl.rcArrW(listing,p + 2,"");
                };
                if (LAB_A(p) && TYA(p + 1) && AND_(p + 2) && (rtl.rcArrR(listing,p + 3) === ("\tsta " + tmp))) {
                  if (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,i + 2)) {
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                  } else {
                    rtl.rcArrW(listing,p + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p + 2),6,256));
                    rtl.rcArrW(listing,p + 2,"\tjeq l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s");
                    rtl.rcArrW(listing,p + 3,"");
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) rtl.rcArrW(listing,p,"\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s");
              };
              rtl.rcArrW(listing,i + 1,"\tlda:sne #$01");
              rtl.rcArrW(listing,i + 2,"l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s\tlda #$00");
              Result = false;
              break;
            };
          };
          if (LAB_A(i) && TYA(i + 1) && ORA_STACK(i + 2) && STA_VAL(i + 3)) {
            tmp = pas.System.Copy(rtl.rcArrR(listing,i + 2),6,256);
            yes = true;
            for (var $l16 = i - 1; $l16 >= 1; $l16--) {
              p = $l16;
              if (AND_STACK(p) || (STY_STACK(p) && LAB_A(p - 1) && LDA(p + 1) && ORA_STACK(p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && LDA_STACK(p + 1)) || (STY_STACK(p) && LAB_A(p - 1) && LDY_1(p + 1) && LDA_STACK(p + 2) && argMatch(p,p + 2)) || (STY_STACK(p) && LAB_A(p - 1) && (argMatch(p,i + 2) === false)) || (TYA(p) && (LAB_A(p - 1) === false) && (ORA_STACK(p + 1) === false))) {
                yes = false;
                break;
              };
            };
            if (yes) {
              for (var $l17 = i - 1; $l17 >= 0; $l17--) {
                p = $l17;
                if (LDY_1(p)) rtl.rcArrW(listing,p,"");
                if (rtl.rcArrR(listing,p) === ("\tsty " + tmp)) rtl.rcArrW(listing,p,"");
                if ((TYA(p) === false) && (rtl.rcArrR(listing,p + 1) === rtl.rcArrR(listing,i + 2)) && (rtl.rcArrR(listing,p + 2) === ("\tsta " + tmp))) {
                  rtl.rcArrW(listing,p + 1,"\tjne l1_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s");
                  rtl.rcArrW(listing,p + 2,"");
                };
                if (LAB_A(p) && TYA(p + 1) && ORA(p + 2) && (rtl.rcArrR(listing,p + 3) === ("\tsta " + tmp))) {
                  if (rtl.rcArrR(listing,p + 2) === rtl.rcArrR(listing,i + 2)) {
                    rtl.rcArrW(listing,p + 1,"");
                    rtl.rcArrW(listing,p + 2,"");
                    rtl.rcArrW(listing,p + 3,"");
                  } else {
                    rtl.rcArrW(listing,p + 1,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,p + 2),6,256));
                    rtl.rcArrW(listing,p + 2,"\tjne l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s");
                    rtl.rcArrW(listing,p + 3,"");
                  };
                };
                if (DEY(p) && LAB_A(p + 1)) {
                  rtl.rcArrW(listing,p,"\tjmp *+6");
                  rtl.rcArrW(listing,p + 1,"@\\\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s");
                };
              };
              rtl.rcArrW(listing,i + 1,"\tlda:seq #$00");
              rtl.rcArrW(listing,i + 2,"l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "s\tlda #$01");
              Result = false;
              break;
            };
          };
        };
        return Result;
      };
      function index(k, x, msb) {
        rtl.rc(k,0,255);
        rtl.rc(x,-2147483648,2147483647);
        var m = 0;
        if (msb) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
          l += 3;
          for (var $l = 0, $end = k - 1; $l <= $end; $l++) {
            m = $l;
            rtl.rcArrW(listing,l,"\tasl " + GetARG(0,x,true));
            rtl.rcArrW(listing,l + 1,"\trol @");
            l += 2;
          };
          rtl.rcArrW(listing,l,"\tsta " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x,true));
        } else {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x,true));
          l += 3;
          for (var $l1 = 0, $end1 = k - 1; $l1 <= $end1; $l1++) {
            m = $l1;
            rtl.rcArrW(listing,l,"\tasl @");
            rtl.rcArrW(listing,l + 1,"\trol " + GetARG(1,x,true));
            l += 2;
          };
          rtl.rcArrW(listing,l,"\tsta " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(1,x,true));
        };
        l += 3;
      };
      function imulCL_opt() {
        var Result = false;
        var tmp = "";
        Result = true;
        if (IFDEF_MUL8(m + 4)) {
          if (STA_EAX(m + 1) && STA_ECX(m + 3)) {
            rtl.rcArrW(listing,m + 1,"\tsta :ecx");
            rtl.rcArrW(listing,m + 3,"\tsta :eax");
          };
          if (LDA_IM(m) && LDA_A(m + 2) && (LDA_IM(m + 2) === false)) {
            tmp = rtl.rcArrR(listing,m + 2);
            rtl.rcArrW(listing,m + 2,rtl.rcArrR(listing,m));
            rtl.rcArrW(listing,m,tmp);
          };
          if ((m > 1) && LDA_STACK(m)) if (STA_STACK(m - 1) && argMatch(m,m - 1) && LDA_VAL(m - 2) && (LDA_IM(m - 2) === false)) {
            rtl.rcArrW(listing,m,rtl.rcArrR(listing,m - 2));
            rtl.rcArrW(listing,m - 2,"");
            rtl.rcArrW(listing,m - 1,"");
          };
          if (LDA_IM(m + 2)) {
            k = rtl.rc(GetBYTE(m + 2),-2147483648,2147483647)}
           else k = rtl.rc(-1,-2147483648,2147483647);
          if ((k in rtl.createSet(0,1,2,4,8,16,32)) && (LDA_IM(m) === false) && STA_ECX(m + 1) && STA_EAX(m + 3)) {
            rtl.rcArrR(s,x - 1)[1] = "\tlda #$00";
            rtl.rcArrR(s,x - 1)[2] = "";
            rtl.rcArrR(s,x - 1)[3] = "";
            l = rtl.rc(m,-2147483648,2147483647);
            if (LDA_VAL(l)) {
              rtl.rcArrR(s,x - 1)[0] = rtl.rcArrR(listing,l)}
             else {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              l += 2;
            };
            var $tmp = k;
            if ($tmp === 2) {
              index(1,x - 1,false)}
             else if ($tmp === 4) {
              index(2,x - 1,false)}
             else if ($tmp === 8) {
              index(3,x - 1,false)}
             else if ($tmp === 16) {
              index(4,x - 1,false)}
             else if ($tmp === 32) index(5,x - 1,false);
            if (k in rtl.createSet(0,1)) {
              if (k === 0) rtl.rcArrW(listing,l,"\tlda #$00");
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,l + 1,"\tsta :eax");
              rtl.rcArrW(listing,l + 2,"\tlda #$00");
              rtl.rcArrW(listing,l + 3,"\tsta :eax+1");
              l += 4;
            } else {
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta :eax");
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta :eax+1");
              l += 4;
            };
            return false;
          };
          if ((k in rtl.createSet(3,5,6,7,10,40,64,96,128,255)) && (LDA_IM(m) === false) && STA_ECX(m + 1) && STA_EAX(m + 3)) {
            var $tmp1 = k;
            if ($tmp1 === 3) {
              rtl.rcArrR(s,x - 1)[1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                rtl.rcArrR(s,x - 1)[0] = "\tlda #$00"}
               else rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 3,"\tsta " + GetARG(1,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 4,rtl.rcArrR(listing,m))}
               else rtl.rcArrW(listing,m + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 5,"\tasl @");
              rtl.rcArrW(listing,m + 6,"\trol " + GetARG(1,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 7,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,m),6,256))}
               else rtl.rcArrW(listing,m + 7,"\tadd " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 8,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 10,"\tadc #$00");
              rtl.rcArrW(listing,m + 11,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 12,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 13,"\tsta :eax");
              rtl.rcArrW(listing,m + 14,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 15,"\tsta :eax+1");
              l = rtl.rc(m + 16,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 5) {
              rtl.rcArrR(s,x - 1)[1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                rtl.rcArrR(s,x - 1)[0] = "\tlda #$00"}
               else rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 3,"\tsta " + GetARG(1,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 4,rtl.rcArrR(listing,m))}
               else rtl.rcArrW(listing,m + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 5,"\tasl @");
              rtl.rcArrW(listing,m + 6,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 7,"\tasl @");
              rtl.rcArrW(listing,m + 8,"\trol " + GetARG(1,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 9,"\tadd " + pas.System.Copy(rtl.rcArrR(listing,m),6,256))}
               else rtl.rcArrW(listing,m + 9,"\tadd " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 10,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 11,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 12,"\tadc #$00");
              rtl.rcArrW(listing,m + 13,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 14,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 15,"\tsta :eax");
              rtl.rcArrW(listing,m + 16,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 17,"\tsta :eax+1");
              l = rtl.rc(m + 18,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 6) {
              rtl.rcArrR(s,x - 1)[1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                rtl.rcArrR(s,x - 1)[0] = "\tlda #$00"}
               else rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 4,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,m + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,m + 6,"\tlda " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,m + 7,"\tsta " + GetARG(3,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 8,rtl.rcArrR(listing,m))}
               else rtl.rcArrW(listing,m + 8,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tasl @");
              rtl.rcArrW(listing,m + 10,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 11,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 12,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,m + 13,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 14,"\tsta " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,m + 15,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 16,"\tasl @");
              rtl.rcArrW(listing,m + 17,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 18,"\tadd " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,m + 19,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 20,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 21,"\tadc " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,m + 22,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 23,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 24,"\tsta :eax");
              rtl.rcArrW(listing,m + 25,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 26,"\tsta :eax+1");
              l = rtl.rc(m + 27,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 7) {
              rtl.rcArrR(s,x - 1)[1] = "\tlda #$00";
              if (LDA_VAL(m)) {
                rtl.rcArrR(s,x - 1)[0] = "\tlda #$00"}
               else rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 3,"\tsta " + GetARG(1,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 4,rtl.rcArrR(listing,m))}
               else rtl.rcArrW(listing,m + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 5,"\tasl @");
              rtl.rcArrW(listing,m + 6,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 7,"\tasl @");
              rtl.rcArrW(listing,m + 8,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tasl @");
              rtl.rcArrW(listing,m + 10,"\trol " + GetARG(1,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 11,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,m),6,256))}
               else rtl.rcArrW(listing,m + 11,"\tsub " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 12,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 13,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 14,"\tsbc #$00");
              rtl.rcArrW(listing,m + 15,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 16,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 17,"\tsta :eax");
              rtl.rcArrW(listing,m + 18,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 19,"\tsta :eax+1");
              l = rtl.rc(m + 20,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 10) {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "\tlda #$00";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 5,"\tasl @");
              rtl.rcArrW(listing,m + 6,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 7,"\tasl @");
              rtl.rcArrW(listing,m + 8,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tadd " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 10,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 11,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 12,"\tadc #$00");
              rtl.rcArrW(listing,m + 13,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 14,"\tasl " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 15,"\trol " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 16,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 17,"\tsta :eax");
              rtl.rcArrW(listing,m + 18,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 19,"\tsta :eax+1");
              l = rtl.rc(m + 20,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 40) {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,m + 1,"\tjsr @mul40");
              l = rtl.rc(m + 2,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 64) {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda #$00");
              rtl.rcArrW(listing,m + 3,"\tlsr " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 4,"\tror @");
              rtl.rcArrW(listing,m + 5,"\tlsr " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 6,"\tror @");
              rtl.rcArrW(listing,m + 7,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 8,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tsta :eax");
              rtl.rcArrW(listing,m + 10,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 11,"\tsta :eax+1");
              l = rtl.rc(m + 12,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 96) {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,m + 1,"\tjsr @mul96");
              l = rtl.rc(m + 2,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 128) {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda #$00");
              rtl.rcArrW(listing,m + 3,"\tlsr " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 4,"\tror @");
              rtl.rcArrW(listing,m + 5,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 6,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 7,"\tsta :eax");
              rtl.rcArrW(listing,m + 8,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tsta :eax+1");
              l = rtl.rc(m + 10,-2147483648,2147483647);
              return false;
            } else if ($tmp1 === 255) {
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrR(s,x - 1)[1] = "";
              if (LDA_VAL(m)) {
                rtl.rcArrR(s,x - 1)[0] = "\tlda #$00"}
               else rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,m + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 2,"\tlda #$00");
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 3,"\tsub " + pas.System.Copy(rtl.rcArrR(listing,m),6,256))}
               else rtl.rcArrW(listing,m + 3,"\tsub " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 4,"\tsta " + GetARG(0,x - 1,true));
              if (LDA_VAL(m)) {
                rtl.rcArrW(listing,m + 5,"\tlda " + pas.System.Copy(rtl.rcArrR(listing,m),6,256))}
               else rtl.rcArrW(listing,m + 5,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 6,"\tsbc #$00");
              rtl.rcArrW(listing,m + 7,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 8,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,m + 9,"\tsta :eax");
              rtl.rcArrW(listing,m + 10,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,m + 11,"\tsta :eax+1");
              l = rtl.rc(m + 12,-2147483648,2147483647);
              return false;
            };
          };
        };
        return Result;
      };
      function system_poke() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(0,x - 1,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x - 1,false)) < 0)) {
          rtl.rcArrW(listing,l,"\tldy " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 1,"\tsty :bp+1");
          rtl.rcArrW(listing,l + 2,"\tldy " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 4,"\tsta (:bp),y");
          l += 5;
        } else {
          k = rtl.rc(pas.Common.GetVAL(GetARG(0,x - 1,true)),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l,"\tlda #$" + pas.SysUtils.IntToHex(k,2));
          k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l + 1,"\tsta $" + pas.SysUtils.IntToHex(k,4));
          l += 2;
        };
        x -= 2;
        return Result;
      };
      function system_dpoke() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x,false)) < 0) || (pas.Common.GetVAL(GetARG(0,x - 1,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x - 1,false)) < 0)) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 1,"\tsta :bp2");
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 3,"\tsta :bp2+1");
          rtl.rcArrW(listing,l + 4,"\tldy #$00");
          rtl.rcArrW(listing,l + 5,"\tlda " + GetARG(0,x - 1,true));
          rtl.rcArrW(listing,l + 6,"\tsta (:bp2),y");
          rtl.rcArrW(listing,l + 7,"\tiny");
          rtl.rcArrW(listing,l + 8,"\tlda " + GetARG(1,x - 1,true));
          rtl.rcArrW(listing,l + 9,"\tsta (:bp2),y");
          l += 10;
        } else {
          k = rtl.rc(pas.Common.GetVAL(GetARG(0,x - 1,true)),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l,"\tlda #$" + pas.SysUtils.IntToHex(k,2));
          k = rtl.rc(pas.Common.GetVAL(GetARG(1,x - 1,true)),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l + 2,"\tlda #$" + pas.SysUtils.IntToHex(k,2));
          k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l + 1,"\tsta $" + pas.SysUtils.IntToHex(k,4));
          rtl.rcArrW(listing,l + 3,"\tsta $" + pas.SysUtils.IntToHex(k,4) + "+1");
          l += 4;
        };
        x -= 2;
        return Result;
      };
      function system_peek() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x,false)) < 0)) {
          rtl.rcArrW(listing,l,"\tldy " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 1,"\tsty :bp+1");
          rtl.rcArrW(listing,l + 2,"\tldy " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 3,"\tlda (:bp),y");
          rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x,true));
          l += 5;
        } else {
          k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l,"\tlda $" + pas.SysUtils.IntToHex(k,4));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x,true));
          l += 2;
        };
        return Result;
      };
      function system_dpeek() {
        var Result = false;
        Result = false;
        t = "";
        if ((pas.Common.GetVAL(GetARG(0,x,false)) < 0) || (pas.Common.GetVAL(GetARG(1,x,false)) < 0)) {
          rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 1,"\tsta :bp2");
          rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
          rtl.rcArrW(listing,l + 3,"\tsta :bp2+1");
          rtl.rcArrW(listing,l + 4,"\tldy #$00");
          rtl.rcArrW(listing,l + 5,"\tlda (:bp2),y");
          rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 7,"\tiny");
          rtl.rcArrW(listing,l + 8,"\tlda (:bp2),y");
          rtl.rcArrW(listing,l + 9,"\tsta " + GetARG(1,x,true));
          l += 10;
        } else {
          k = rtl.rc(pas.Common.GetVAL(GetARG(0,x,true)) + (pas.Common.GetVAL(GetARG(1,x,true)) << 8),-2147483648,2147483647);
          if ((k > 0xFFFF) || (k < 0)) return true;
          rtl.rcArrW(listing,l,"\tlda $" + pas.SysUtils.IntToHex(k,4));
          rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x,true));
          rtl.rcArrW(listing,l + 2,"\tlda $" + pas.SysUtils.IntToHex(k,4) + "+1");
          rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x,true));
          l += 4;
        };
        return Result;
      };
      l = 0;
      x = 0;
      arg0 = "";
      inxUse = false;
      listing = rtl.arraySetLength(null,"",1024);
      listing_tmp = rtl.arraySetLength(null,"",128);
      for (i = 0; i <= 15; i++) for (k = 0; k <= 3; k++) rtl.rcArrW(rtl.rcArrR(s,i),k,"");
      for (var $l = 0, $end = rtl.length(pas.Common.OptimizeBuf) - 1 - 1; $l <= $end; $l++) {
        i = $l;
        a = rtl.rcArrR(pas.Common.OptimizeBuf,i);
        if ((a !== "") && (pas.System.Pos(";",a) === 0)) {
          t = a;
          if (a === "\tinx") {
            x += 1;
            inxUse = true;
            t = "";
            continue;
          };
          if (a === "\tdex") {
            x -= 1;
            t = "";
            continue;
          };
          if (pas.System.Pos("@print",a) > 0) {
            x = 51;
            arg0 = "@print";
            $mod.ResetOpty();
            break;
          };
          if ((pas.System.Pos("\tjsr ",a) > 0) || (pas.System.Pos("m@",a) > 0)) {
            if (pas.System.Pos("\tjsr ",a) > 0) {
              arg0 = pas.System.Copy(a,6,256)}
             else arg0 = pas.System.Copy(a,2,256);
            if (arg0.length > 20) {
              x = 51;
              $mod.ResetOpty();
              break;
            };
            elf = rtl.rc($impl.ElfHash(arg0),0,4294967295);
            if (elf === 0x8D58F81) {
              t = "";
              rtl.rcArrW(listing,l,"\tldy #$00");
              rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tspl");
              rtl.rcArrW(listing,l + 3,"\tdey");
              rtl.rcArrW(listing,l + 4,"\tsty " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x - 1,true));
              l += 6;
            } else if (elf === 0x78D58FC) {
              t = "";
              rtl.rcArrW(listing,l,"\tldy #$00");
              rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x,true));
              rtl.rcArrW(listing,l + 2,"\tspl");
              rtl.rcArrW(listing,l + 3,"\tdey");
              rtl.rcArrW(listing,l + 4,"\tsty " + GetARG(1,x,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(0,x,true));
              l += 6;
            } else if (elf === 0xA4BEA14) {
              t = "";
              if ((rtl.rcArrR(s,x)[1] === "") && (rtl.rcArrR(s,x)[2] === "") && (rtl.rcArrR(s,x)[3] === "")) {
                rtl.rcArrW(listing,l,"\tldy #$00");
                rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tspl");
                rtl.rcArrW(listing,l + 3,"\tdey");
                rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 5,"\tsty " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 6,"\tsty " + GetARG(2,x,true));
                rtl.rcArrW(listing,l + 7,"\tsty " + GetARG(3,x,true));
                l += 8;
              };
            } else if (elf === 0x5F632F4) {
              t = "";
              if ((rtl.rcArrR(s,x - 1)[1] === "") && (rtl.rcArrR(s,x - 1)[2] === "") && (rtl.rcArrR(s,x - 1)[3] === "")) {
                rtl.rcArrW(listing,l,"\tldy #$00");
                rtl.rcArrW(listing,l + 1,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 2,"\tspl");
                rtl.rcArrW(listing,l + 3,"\tdey");
                rtl.rcArrW(listing,l + 4,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 5,"\tsty " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tsty " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tsty " + GetARG(3,x - 1,true));
                l += 8;
              };
            } else if (elf === 0xA4C0C6C) {
              t = "";
              if ((rtl.rcArrR(s,x)[2] === "") && (rtl.rcArrR(s,x)[3] === "")) {
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tldy #$00");
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 4,"\tspl");
                rtl.rcArrW(listing,l + 5,"\tdey");
                rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 7,"\tsty " + GetARG(2,x,true));
                rtl.rcArrW(listing,l + 8,"\tsty " + GetARG(3,x,true));
                l += 9;
              };
            } else if (elf === 0x5F7F48C) {
              t = "";
              if ((rtl.rcArrR(s,x - 1)[2] === "") && (rtl.rcArrR(s,x - 1)[3] === "")) {
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 2,"\tldy #$00");
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tspl");
                rtl.rcArrW(listing,l + 5,"\tdey");
                rtl.rcArrW(listing,l + 6,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tsty " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 8,"\tsty " + GetARG(3,x - 1,true));
                l += 9;
              };
            } else if (elf === 0xF7B015C) {
              t = "";
              rtl.rcArrR(s,x)[3] = "";
              rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x,true));
              rtl.rcArrW(listing,l + 6,"\tlda #$00");
              rtl.rcArrR(s,x)[0] = "";
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x,true));
              l += 8;
            } else if (elf === 0x7B01501) {
              t = "";
              rtl.rcArrR(s,x - 1)[3] = "";
              rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda #$00");
              rtl.rcArrR(s,x - 1)[0] = "";
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(0,x - 1,true));
              l += 8;
            } else if (elf === 0x6ED7EC5) {
              t = "";
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
              rtl.rcArrW(listing,l + 1,"\t:4 lsr @");
              rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x,true));
              l += 3;
            } else if (elf === 0x6EEC424) {
              t = "";
              rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x,true));
              rtl.rcArrR(s,x)[0] = "";
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x,true));
              l += 2;
            } else if (elf === 0x6ED7624) {
              t = "";
              rtl.rcArrR(s,x)[0] = "";
              rtl.rcArrR(s,x)[1] = "";
              rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x,true));
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x,true));
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(2,x,true));
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(0,x,true));
              l += 4;
            } else if (elf === 0xD523E88) {
              t = "";
              rtl.rcArrW(s,x - 1,0,"");
              rtl.rcArrW(s,x - 1,1,"");
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(s,x - 1,3,"");
              rtl.rcArrW(listing,l,"\tlda :ztmp8");
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda :ztmp9");
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda :ztmp10");
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda :ztmp11");
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
              l += 8;
            } else if (elf === 0x53B7FA8) {
              t = "";
              rtl.rcArrW(s,x - 1,0,"");
              rtl.rcArrW(s,x - 1,1,"");
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(s,x - 1,3,"");
              rtl.rcArrW(listing,l,"\tlda :eax");
              rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 2,"\tlda :eax+1");
              rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 4,"\tlda :eax+2");
              rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
              rtl.rcArrW(listing,l + 6,"\tlda :eax+3");
              rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
              l += 8;
            } else if (elf === 0xE887644) {
              t = "";
              if ((l > 3) && LDA_IM(l - 4)) {
                k = rtl.rc(GetBYTE(l - 4),-2147483648,2147483647)}
               else k = 0;
              if (k in rtl.createSet(2,4,8,16,32,64,128)) {
                rtl.rcArrW(listing,l - 4,rtl.rcArrR(listing,l - 2));
                l -= 4;
                var $tmp = k;
                if ($tmp === 2) {
                  rtl.rcArrW(listing,l + 1,"\tand #$01")}
                 else if ($tmp === 4) {
                  rtl.rcArrW(listing,l + 1,"\tand #$03")}
                 else if ($tmp === 8) {
                  rtl.rcArrW(listing,l + 1,"\tand #$07")}
                 else if ($tmp === 16) {
                  rtl.rcArrW(listing,l + 1,"\tand #$0F")}
                 else if ($tmp === 32) {
                  rtl.rcArrW(listing,l + 1,"\tand #$1F")}
                 else if ($tmp === 64) {
                  rtl.rcArrW(listing,l + 1,"\tand #$3F")}
                 else if ($tmp === 128) rtl.rcArrW(listing,l + 1,"\tand #$7F");
                rtl.rcArrW(listing,l + 2,"\tjsr #$00");
                l += 3;
              } else {
                rtl.rcArrW(listing,l,"\tjsr @BYTE.MOD");
                l += 1;
              };
            } else if (elf === 0xE886C96) {
              t = "";
              if ((l > 3) && LDA_IM(l - 4)) {
                k = rtl.rc(GetBYTE(l - 4),-2147483648,2147483647)}
               else k = 0;
              if (k in rtl.createSet(null,2,32)) {
                rtl.rcArrW(listing,l - 4,rtl.rcArrR(listing,l - 2));
                l -= 4;
                opt_BYTE_DIV(k);
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tsta :eax");
                l += 2;
              } else {
                rtl.rcArrW(listing,l,"\tjsr @BYTE.DIV");
                l += 1;
              };
            } else if ((elf === 0x4C07985) || (elf === 0xD334D44)) {
              t = "";
              rtl.rcArrW(s,x,1,"");
              rtl.rcArrW(s,x,2,"");
              rtl.rcArrW(s,x,3,"");
              rtl.rcArrW(s,x - 1,1,"");
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(s,x - 1,3,"");
              m = rtl.rc(l,-2147483648,2147483647);
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
              rtl.rcArrW(listing,l + 1,"\tsta :ecx");
              if (elf === 0xD334D44) {
                rtl.rcArrW(listing,l + 2,"\tsta :ztmp8");
                l += 1;
              };
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 3,"\tsta :eax");
              if (elf === 0xD334D44) {
                rtl.rcArrW(listing,l + 4,"\tsta :ztmp10");
                l += 1;
              };
              rtl.rcArrW(listing,l + 4,"\t.ifdef fmulinit");
              rtl.rcArrW(listing,l + 5,"\tfmulu_8");
              rtl.rcArrW(listing,l + 6,"\tels");
              rtl.rcArrW(listing,l + 7,"\timulCL");
              rtl.rcArrW(listing,l + 8,"\teif");
              if (LDA_IM(l) && (rtl.rcArrR(listing,l + 1) === "\tsta :ecx") && LDA_IM(l + 2) && STA_EAX(l + 3)) {
                k = rtl.rc(GetBYTE(l) * GetBYTE(l + 2),-2147483648,2147483647);
                rtl.rcArrW(listing,l,"\tlda #$" + pas.SysUtils.IntToHex(k & 0xff,2));
                rtl.rcArrW(listing,l + 1,"\tsta :eax");
                rtl.rcArrW(listing,l + 2,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(k >>> 8,0,255),2));
                rtl.rcArrW(listing,l + 3,"\tsta :eax+1");
                l += 4;
              } else if (imulCL_opt()) l += 9;
              if (elf === 0xD334D44) {
                rtl.rcArrW(listing,l,"\tlda :ztmp10");
                rtl.rcArrW(listing,l + 1,"\tbpl @+");
                rtl.rcArrW(listing,l + 2,"\tlda :eax+1");
                rtl.rcArrW(listing,l + 3,"\tsub :ztmp8");
                rtl.rcArrW(listing,l + 4,"\tsta :eax+1");
                rtl.rcArrW(listing,l + 5,"@");
                rtl.rcArrW(listing,l + 6,"\tlda :ztmp8");
                rtl.rcArrW(listing,l + 7,"\tbpl @+");
                rtl.rcArrW(listing,l + 8,"\tlda :eax+1");
                rtl.rcArrW(listing,l + 9,"\tsub :ztmp10");
                rtl.rcArrW(listing,l + 10,"\tsta :eax+1");
                rtl.rcArrW(listing,l + 11,"@");
                rtl.rcArrW(listing,l + 12,"\tlda :eax");
                rtl.rcArrW(listing,l + 13,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 14,"\tlda :eax+1");
                rtl.rcArrW(listing,l + 15,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 16,"\tlda #$00");
                rtl.rcArrW(listing,l + 17,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 18,"\tlda #$00");
                rtl.rcArrW(listing,l + 19,"\tsta " + GetARG(3,x - 1,true));
                l += 20;
              };
            } else if ((elf === 0x4C1C364) || (elf === 0x135CDB4)) {
              t = "";
              rtl.rcArrW(s,x,2,"");
              rtl.rcArrW(s,x,3,"");
              rtl.rcArrW(s,x - 1,2,"");
              rtl.rcArrW(s,x - 1,3,"");
              m = rtl.rc(l,-2147483648,2147483647);
              rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
              rtl.rcArrW(listing,l + 1,"\tsta :ecx");
              if (elf === 0x135CDB4) {
                rtl.rcArrW(listing,l + 2,"\tsta :ztmp8");
                l += 1;
              };
              rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
              rtl.rcArrW(listing,l + 3,"\tsta :ecx+1");
              if (elf === 0x135CDB4) {
                rtl.rcArrW(listing,l + 4,"\tsta :ztmp9");
                l += 1;
              };
              rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(0,x - 1,true));
              rtl.rcArrW(listing,l + 5,"\tsta :eax");
              if (elf === 0x135CDB4) {
                rtl.rcArrW(listing,l + 6,"\tsta :ztmp10");
                l += 1;
              };
              rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(1,x - 1,true));
              rtl.rcArrW(listing,l + 7,"\tsta :eax+1");
              if (elf === 0x135CDB4) {
                rtl.rcArrW(listing,l + 8,"\tsta :ztmp11");
                l += 1;
              };
              if (LDA_IM(l) && (rtl.rcArrR(listing,l + 1) === "\tsta :ecx") && LDA_IM(l + 2) && (rtl.rcArrR(listing,l + 3) === "\tsta :ecx+1") && LDA_IM(l + 4) && STA_EAX(l + 5) && LDA_IM(l + 6) && STA_EAX_1(l + 7)) {
                k = rtl.rc(GetWORD(l,l + 2) * GetWORD(l + 4,l + 6),-2147483648,2147483647);
                rtl.rcArrW(listing,l,"\tlda #$" + pas.SysUtils.IntToHex(k & 0xff,2));
                rtl.rcArrW(listing,l + 1,"\tsta :eax");
                rtl.rcArrW(listing,l + 2,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(k >>> 8,0,255),2));
                rtl.rcArrW(listing,l + 3,"\tsta :eax+1");
                rtl.rcArrW(listing,l + 4,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(k >>> 16,0,255),2));
                rtl.rcArrW(listing,l + 5,"\tsta :eax+2");
                rtl.rcArrW(listing,l + 6,"\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(k >>> 24,0,255),2));
                rtl.rcArrW(listing,l + 7,"\tsta :eax+3");
                rtl.rcArrW(listing,l + 8,"");
                rtl.rcArrW(listing,l + 9,"");
                rtl.rcArrW(listing,l + 10,"");
                rtl.rcArrW(listing,l + 11,"");
                rtl.rcArrW(listing,l + 12,"");
              } else {
                rtl.rcArrW(listing,l + 8,"\t.ifdef fmulinit");
                rtl.rcArrW(listing,l + 9,"\tfmulu_16");
                rtl.rcArrW(listing,l + 10,"\tels");
                rtl.rcArrW(listing,l + 11,"\timulCX");
                rtl.rcArrW(listing,l + 12,"\teif");
              };
              l += 13;
              if (elf === 0x135CDB4) {
                rtl.rcArrW(listing,l,"\tlda :ztmp11");
                rtl.rcArrW(listing,l + 1,"\tbpl @+");
                rtl.rcArrW(listing,l + 2,"\tlda :eax+2");
                rtl.rcArrW(listing,l + 3,"\tsub :ztmp8");
                rtl.rcArrW(listing,l + 4,"\tsta :eax+2");
                rtl.rcArrW(listing,l + 5,"\tlda :eax+3");
                rtl.rcArrW(listing,l + 6,"\tsbc :ztmp9");
                rtl.rcArrW(listing,l + 7,"\tsta :eax+3");
                rtl.rcArrW(listing,l + 8,"@");
                rtl.rcArrW(listing,l + 9,"\tlda :ztmp9");
                rtl.rcArrW(listing,l + 10,"\tbpl @+");
                rtl.rcArrW(listing,l + 11,"\tlda :eax+2");
                rtl.rcArrW(listing,l + 12,"\tsub :ztmp10");
                rtl.rcArrW(listing,l + 13,"\tsta :eax+2");
                rtl.rcArrW(listing,l + 14,"\tlda :eax+3");
                rtl.rcArrW(listing,l + 15,"\tsbc :ztmp11");
                rtl.rcArrW(listing,l + 16,"\tsta :eax+3");
                rtl.rcArrW(listing,l + 17,"@");
                rtl.rcArrW(listing,l + 18,"\tlda :eax");
                rtl.rcArrW(listing,l + 19,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 20,"\tlda :eax+1");
                rtl.rcArrW(listing,l + 21,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 22,"\tlda :eax+2");
                rtl.rcArrW(listing,l + 23,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 24,"\tlda :eax+3");
                rtl.rcArrW(listing,l + 25,"\tsta " + GetARG(3,x - 1,true));
                l += 26;
              };
              if ((rtl.rcArrR(listing,m + 1) === "\tsta :ecx") && LDA_IM_0(m + 2) && (rtl.rcArrR(listing,m + 3) === "\tsta :ecx+1") && LDA_A(m + 4) && STA_EAX(m + 5) && LDA_IM_0(m + 6) && STA_EAX_1(m + 7) && IFDEF_MUL16(m + 8)) {
                rtl.rcArrW(listing,m + 2,rtl.rcArrR(listing,m + 4));
                rtl.rcArrW(listing,m + 3,rtl.rcArrR(listing,m + 5));
                rtl.rcArrW(listing,m + 4,rtl.rcArrR(listing,m + 8));
                rtl.rcArrW(listing,m + 5,"\tfmulu_8");
                rtl.rcArrW(listing,m + 6,rtl.rcArrR(listing,m + 10));
                rtl.rcArrW(listing,m + 7,"\timulCL");
                rtl.rcArrW(listing,m + 8,rtl.rcArrR(listing,m + 12));
                l = rtl.rc(m + 9,-2147483648,2147483647);
                imulCL_opt();
              };
            } else if ((elf === 0x4C07164) || (elf === 0xE3FD7A2)) {
              t = "";
              if (pas.Common.target.id === pas.Targets.TTargetID.NEO) {
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 1,"\tsta VAR1_B0");
                rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 3,"\tsta VAR1_B1");
                rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x,true));
                rtl.rcArrW(listing,l + 5,"\tsta VAR1_B2");
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x,true));
                rtl.rcArrW(listing,l + 7,"\tsta VAR1_B3");
                rtl.rcArrW(listing,l + 8,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tsta VAR2_B0");
                rtl.rcArrW(listing,l + 10,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 11,"\tsta VAR2_B1");
                rtl.rcArrW(listing,l + 12,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 13,"\tsta VAR2_B2");
                rtl.rcArrW(listing,l + 14,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 15,"\tsta VAR2_B3");
              } else {
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 1,"\tsta :ecx");
                rtl.rcArrW(listing,l + 2,"\tlda " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 3,"\tsta :ecx+1");
                rtl.rcArrW(listing,l + 4,"\tlda " + GetARG(2,x,true));
                rtl.rcArrW(listing,l + 5,"\tsta :ecx+2");
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(3,x,true));
                rtl.rcArrW(listing,l + 7,"\tsta :ecx+3");
                rtl.rcArrW(listing,l + 8,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tsta :eax");
                rtl.rcArrW(listing,l + 10,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 11,"\tsta :eax+1");
                rtl.rcArrW(listing,l + 12,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 13,"\tsta :eax+2");
                rtl.rcArrW(listing,l + 14,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 15,"\tsta :eax+3");
              };
              rtl.rcArrW(listing,l + 16,"\tjsr imulECX");
              l += 17;
              if (elf === 0xE3FD7A2) {
                rtl.rcArrW(listing,l,"\tlda :eax");
                rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 2,"\tlda :eax+1");
                rtl.rcArrW(listing,l + 3,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tlda :eax+2");
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda :eax+3");
                rtl.rcArrW(listing,l + 7,"\tsta " + GetARG(3,x - 1,true));
                if (STA_im_0(l + 1)) {
                  rtl.rcArrW(listing,l,"");
                  rtl.rcArrW(listing,l + 1,"");
                };
                if (STA_im_0(l + 3)) {
                  rtl.rcArrW(listing,l + 2,"");
                  rtl.rcArrW(listing,l + 3,"");
                };
                if (STA_im_0(l + 5)) {
                  rtl.rcArrW(listing,l + 4,"");
                  rtl.rcArrW(listing,l + 5,"");
                };
                if (STA_im_0(l + 7)) {
                  rtl.rcArrW(listing,l + 6,"");
                  rtl.rcArrW(listing,l + 7,"");
                };
                l += 8;
              };
            } else if (elf === 0x9BBA11B) {
              if (system_peek()) {
                x = 50;
                break;
              };
            } else if (elf === 0x9BBBB75) {
              if (system_poke()) {
                x = 50;
                break;
              };
            } else if (elf === 0xBA7C10B) {
              if (system_dpeek()) {
                x = 50;
                break;
              };
            } else if (elf === 0xBA7DB65) {
              if (system_dpoke()) {
                x = 50;
                break;
              };
            } else if (elf === 0xF6664EC) {
              if (opt_SHR_BYTE()) {
                x = 50;
                break;
              };
            } else if (elf === 0xF66A4EC) {
              opt_SHR_WORD();
            } else if (elf === 0x692BA8C) {
              opt_SHR_CARD();
            } else if (elf === 0x8FB5525) {
              opt_SHL_BYTE();
            } else if (elf === 0x8FAAFC4) {
              if (opt_SHL_WORD()) {
                x = 50;
                break;
              };
            } else if (elf === 0x8FB5DC4) {
              opt_SHL_CARD();
            } else if ((pas.System.Pos("add",arg0) > 0) || (pas.System.Pos("sub",arg0) > 0)) {
              t = "";
              if (elf === 0xB6624DC) {
                rtl.rcArrR(s,x)[1] = "";
                rtl.rcArrR(s,x)[2] = "";
                rtl.rcArrR(s,x)[3] = "";
                rtl.rcArrR(s,x - 1)[1] = "\tmva #$00";
                rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
                rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tsub " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tsbc #$00");
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tsbc #$00");
                rtl.rcArrW(listing,l + 8,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 10,"\tsbc #$00");
                rtl.rcArrW(listing,l + 11,"\tsta " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 3,"");
                rtl.rcArrW(listing,l + 4,"");
                rtl.rcArrW(listing,l + 5,"");
                rtl.rcArrW(listing,l + 6,"");
                rtl.rcArrW(listing,l + 7,"");
                rtl.rcArrW(listing,l + 8,"");
                rtl.rcArrW(listing,l + 9,"");
                rtl.rcArrW(listing,l + 10,"");
                rtl.rcArrW(listing,l + 11,"");
                l += 3;
              };
              if (elf === 0xB66E428) {
                rtl.rcArrR(s,x)[2] = "";
                rtl.rcArrR(s,x)[3] = "";
                rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
                rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tsub " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tsbc " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tsbc #$00");
                rtl.rcArrW(listing,l + 8,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 10,"\tsbc #$00");
                rtl.rcArrW(listing,l + 11,"\tsta " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 6,"");
                rtl.rcArrW(listing,l + 7,"");
                rtl.rcArrW(listing,l + 8,"");
                rtl.rcArrW(listing,l + 9,"");
                rtl.rcArrW(listing,l + 10,"");
                rtl.rcArrW(listing,l + 11,"");
                l += 6;
              };
              if (elf === 0x96B92E8) {
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tsub " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tsbc " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tsbc " + GetARG(2,x,true));
                rtl.rcArrW(listing,l + 8,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 10,"\tsbc " + GetARG(3,x,true));
                rtl.rcArrW(listing,l + 11,"\tsta " + GetARG(3,x - 1,true));
                l += 12;
              };
              if (elf === 0xA86250C) {
                if ((pas.System.Pos(",y",rtl.rcArrR(s,x - 1)[0]) > 0) || (pas.System.Pos(",y",rtl.rcArrR(s,x)[0]) > 0)) {
                  x = 30;
                  break;
                };
                rtl.rcArrR(s,x)[1] = "";
                rtl.rcArrR(s,x)[2] = "";
                rtl.rcArrR(s,x)[3] = "";
                rtl.rcArrR(s,x - 1)[1] = "\tmva #$00";
                rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
                rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tadd " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tadc #$00");
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tadc #$00");
                rtl.rcArrW(listing,l + 8,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 10,"\tadc #$00");
                rtl.rcArrW(listing,l + 11,"\tsta " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 3,"");
                rtl.rcArrW(listing,l + 4,"");
                rtl.rcArrW(listing,l + 5,"");
                rtl.rcArrW(listing,l + 6,"");
                rtl.rcArrW(listing,l + 7,"");
                rtl.rcArrW(listing,l + 8,"");
                rtl.rcArrW(listing,l + 9,"");
                rtl.rcArrW(listing,l + 10,"");
                rtl.rcArrW(listing,l + 11,"");
                l += 3;
              };
              if (elf === 0xA86E5F8) {
                rtl.rcArrR(s,x)[2] = "";
                rtl.rcArrR(s,x)[3] = "";
                rtl.rcArrR(s,x - 1)[2] = "\tmva #$00";
                rtl.rcArrR(s,x - 1)[3] = "\tmva #$00";
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tadd " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tadc " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tadc #$00");
                rtl.rcArrW(listing,l + 8,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 10,"\tadc #$00");
                rtl.rcArrW(listing,l + 11,"\tsta " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 6,"");
                rtl.rcArrW(listing,l + 7,"");
                rtl.rcArrW(listing,l + 8,"");
                rtl.rcArrW(listing,l + 9,"");
                rtl.rcArrW(listing,l + 10,"");
                rtl.rcArrW(listing,l + 11,"");
                l += 6;
              };
              if (elf === 0x96C4308) {
                rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 1,"\tadd " + GetARG(0,x,true));
                rtl.rcArrW(listing,l + 2,"\tsta " + GetARG(0,x - 1,true));
                rtl.rcArrW(listing,l + 3,"\tlda " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 4,"\tadc " + GetARG(1,x,true));
                rtl.rcArrW(listing,l + 5,"\tsta " + GetARG(1,x - 1,true));
                rtl.rcArrW(listing,l + 6,"\tlda " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 7,"\tadc " + GetARG(2,x,true));
                rtl.rcArrW(listing,l + 8,"\tsta " + GetARG(2,x - 1,true));
                rtl.rcArrW(listing,l + 9,"\tlda " + GetARG(3,x - 1,true));
                rtl.rcArrW(listing,l + 10,"\tadc " + GetARG(3,x,true));
                rtl.rcArrW(listing,l + 11,"\tsta " + GetARG(3,x - 1,true));
                l += 12;
              };
            } else if (elf === 0x4746C5) {}
            else if (elf === 0x58D0867) {}
            else if (elf === 0x3CEEED7) {}
            else if (elf === 0x6FEACE2) {}
            else if (elf === 0x44A824C) {}
            else if (elf === 0x44B931) {}
            else if (elf === 0x94C6F26) {}
            else if (elf === 0x9B849A6) {}
            else if (elf === 0xFEB1076) {}
            else if (elf === 0x94C77F4) {}
            else if (elf === 0x9B85174) {}
            else if (elf === 0xFEB2AA4) {}
            else if (elf === 0xE886C96) {}
            else if (elf === 0x4676D26) {}
            else if (elf === 0x6294046) {}
            else if (elf === 0xE887644) {}
            else if (elf === 0x46775F4) {}
            else if (elf === 0x6295A94) {}
            else if (elf === 0xE965FAC) {}
            else if (elf === 0x96287FC) {}
            else if (elf === 0xE9645D6) {}
            else if (elf === 0x9627D86) {}
            else if (elf === 0x2042144) {}
            else if (elf === 0x63448B3) {}
            else if (elf === 0x20C1143) {}
            else if (elf === 0x627E0C3) {}
            else if (elf === 0x44B29C) {}
            else if (elf === 0x44A8E6) {}
            else if (elf === 0x44A584) {}
            else if (elf === 0x44B892) {}
            else if (elf === 0x44C66) {}
            else if (elf === 0x44969) {}
            else if (elf === 0x44AB653) {}
            else if (elf === 0x4B74A64) {}
            else if (elf === 0x94C3D21) {}
            else if (elf === 0x94C31C4) {}
            else if (elf === 0x94C4CD2) {}
            else if (elf === 0x94C46DC) {}
            else if (elf === 0x94C3CA6) {}
            else if (elf === 0x94C3A74) {}
            else if (elf === 0xC430164) {}
            else if (elf === 0x4C3F2C3) {}
            else if (elf === 0x94C3826) {}
            else if (elf === 0x494C3E1) {}
            else if (elf === 0x494C384) {}
            else if (elf === 0x94C38C5) {}
            else {
              x = 51;
              break;
            };
          };
          if (t !== "") {
            if (pas.System.Pos("(:bp),",t) === 0) {
              if (pas.System.Pos(":STACKORIGIN,",t) > 7) {
                rtl.rcArrR(s,x)[0] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",rtl.rcArrR(s,x)[0]) > 0) {
                  rtl.rcArrW(listing,l,"\tlda " + GetARG(0,x,true));
                  rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(0,x,true));
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,",t) > 7) {
                rtl.rcArrR(s,x)[1] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",rtl.rcArrR(s,x)[1]) > 0) {
                  rtl.rcArrW(listing,l,"\tlda " + GetARG(1,x,true));
                  rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(1,x,true));
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,",t) > 7) {
                rtl.rcArrR(s,x)[2] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",rtl.rcArrR(s,x)[2]) > 0) {
                  rtl.rcArrW(listing,l,"\tlda " + GetARG(2,x,true));
                  rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(2,x,true));
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,",t) > 7) {
                rtl.rcArrR(s,x)[3] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
                if (pas.System.Pos(",y",rtl.rcArrR(s,x)[3]) > 0) {
                  rtl.rcArrW(listing,l,"\tlda " + GetARG(3,x,true));
                  rtl.rcArrW(listing,l + 1,"\tsta " + GetARG(3,x,true));
                  l += 2;
                };
              };
              if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,",t) > 7) {
                rtl.rcArrR(s,x - 1)[1] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,",t) > 7) {
                rtl.rcArrR(s,x - 1)[2] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,",t) > 7) {
                rtl.rcArrR(s,x - 1)[3] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH,",t) > 7) {
                rtl.rcArrR(s,x + 1)[1] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*2,",t) > 7) {
                rtl.rcArrR(s,x + 1)[2] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
              if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*3,",t) > 7) {
                rtl.rcArrR(s,x + 1)[3] = pas.System.Copy(a,1,pas.System.Pos(" :STACK",a));
                t = "";
              };
            };
            if (pas.System.Pos(":STACKORIGIN,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,14);
              arg0 = GetARG(0,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN+STACKWIDTH,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,25);
              arg0 = GetARG(1,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*2,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,27);
              arg0 = GetARG(2,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN+STACKWIDTH*3,",t) === 6) {
              pas.System.Delete({get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6,27);
              arg0 = GetARG(3,x,true);
              pas.System.Insert(arg0,{get: function () {
                  return t;
                }, set: function (v) {
                  t = v;
                }},6);
            };
            if (pas.System.Pos(":STACKORIGIN-1,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(0,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(1,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*2,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(2,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN-1+STACKWIDTH*3,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(3,x - 1,true);
            if (pas.System.Pos(":STACKORIGIN+1,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(0,x + 1,true);
            if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(1,x + 1,true);
            if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*2,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(2,x + 1,true);
            if (pas.System.Pos(":STACKORIGIN+1+STACKWIDTH*3,",t) === 6) t = pas.System.Copy(a,1,5) + GetARG(3,x + 1,true);
            if (t !== "") {
              rtl.rcArrW(listing,l,t);
              l += 1;
            };
          };
        };
      };
      if ((x === 0) && inxUse) {
        if (pas.Common.optimize.line !== pas.Common.optimize.oldLine) {
          $mod.WriteOut("");
          $mod.WriteOut("; optimize OK (" + pas.Common.optimize.SourceFile.Name + "), line = " + pas.StringUtilities.IntToStr(pas.Common.optimize.line));
          $mod.WriteOut("");
          pas.Common.optimize.oldLine = rtl.rc(pas.Common.optimize.line,-2147483648,2147483647);
        };
        do {
          OptimizeAssignment();
          do {
          } while (!OptimizeRelation());
          OptimizeAssignment();
        } while (!OptimizeRelation());
        if (OptimizeEAX()) {
          OptimizeAssignment();
          OptimizeEAX_OFF();
          OptimizeAssignment();
        };
        found = false;
        for (var $l1 = 0, $end1 = l - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          if (pas.System.Pos("@FORTMP_",rtl.rcArrR(listing,i)) > 0) if (MVA_IM(i)) {
            found = true;
            if (pas.System.Pos("+3",rtl.rcArrR(listing,i)) > 0) {
              pas.Common.optyFOR3 = rtl.rcArrR(listing,i)}
             else if (pas.System.Pos("+2",rtl.rcArrR(listing,i)) > 0) {
              pas.Common.optyFOR2 = rtl.rcArrR(listing,i)}
             else if (pas.System.Pos("+1",rtl.rcArrR(listing,i)) > 0) {
              pas.Common.optyFOR1 = rtl.rcArrR(listing,i)}
             else pas.Common.optyFOR0 = rtl.rcArrR(listing,i);
            rtl.rcArrW(listing,i,"");
          } else if (CMP(i) || SUB(i) || SBC(i)) {
            found = true;
            if (CMP(i)) arg0 = "\tcmp ";
            if (SUB(i)) arg0 = "\tsub ";
            if (SBC(i)) arg0 = "\tsbc ";
            if (pas.System.Pos("+3",rtl.rcArrR(listing,i)) > 0) {
              if (pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),pas.Common.optyFOR3) > 0) rtl.rcArrW(listing,i,arg0 + GetString(pas.Common.optyFOR3));
            } else if (pas.System.Pos("+2",rtl.rcArrR(listing,i)) > 0) {
              if (pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),pas.Common.optyFOR2) > 0) rtl.rcArrW(listing,i,arg0 + GetString(pas.Common.optyFOR2));
            } else if (pas.System.Pos("+1",rtl.rcArrR(listing,i)) > 0) {
              if (pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),pas.Common.optyFOR1) > 0) rtl.rcArrW(listing,i,arg0 + GetString(pas.Common.optyFOR1));
            } else if (pas.System.Pos(pas.System.Copy(rtl.rcArrR(listing,i),6,256),pas.Common.optyFOR0) > 0) rtl.rcArrW(listing,i,arg0 + GetString(pas.Common.optyFOR0));
          };
        };
        if (found) {
          Rebuild();
          if (l > 0) {
            if ((l === 3) && LDA_A(0) && CMP_IM_0(1) && (pas.System.Pos("\tjcc l_",listing[2]) > 0)) {
              listing[0] = "\t#for:dec " + pas.System.Copy(listing[0],6,256);
              listing[1] = "\t#for";
              listing[2] = "";
            };
            if ((l === 5) && LDA_A(0) && CMP(1) && (CMP_IM(1) === false) && (listing[2] === "\tbcc *+7") && (listing[3] === "\tbeq *+5") && JMP(4)) {
              listing[2] = "\tlda " + pas.System.Copy(listing[1],6,256);
              listing[3] = "\tcmp " + pas.System.Copy(listing[0],6,256);
              listing[4] = "\tjcc " + pas.System.Copy(listing[4],6,256);
              listing[0] = "";
              listing[1] = "";
            };
            if ((l === 5) && LDA_A(0) && CMP_IM(1) && (listing[2] === "\tbcc *+7") && (listing[3] === "\tbeq *+5") && JMP(4)) {
              k = rtl.rc(GetBYTE(1) + 1,-2147483648,2147483647);
              if (k < 0x100) {
                if (k === 0x80) {
                  listing[1] = "";
                  listing[2] = "";
                  listing[3] = "";
                  listing[4] = "\tjmi " + pas.System.Copy(listing[4],6,256);
                } else {
                  listing[1] = "\tcmp #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                  listing[2] = "";
                  listing[3] = "";
                  listing[4] = "\tjcs " + pas.System.Copy(listing[4],6,256);
                };
              } else {
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
                listing[4] = "";
              };
            };
            if ((l === 7) && LDA_A(0) && CMP_IM_0(1) && BNE_A(2) && LDA_A(3) && CMP_IM_0(4) && LAB_A(5) && (pas.System.Pos("\tjcc l_",listing[6]) > 0)) {
              listing[0] = "";
              listing[1] = "";
              listing[2] = "";
              listing[3] = "";
              listing[4] = "";
              listing[5] = "";
              listing[6] = "";
            };
            if ((l === 7) && LDA_A(0) && (LDA_IM(0) === false) && SUB_IM(1) && SVC(2) && (listing[3] === "\teor #$80") && (listing[4] === "\tbmi *+7") && (listing[5] === "\tbeq *+5") && JMP(6)) {
              k = rtl.rc(GetBYTE(1) + 1,-2147483648,2147483647);
              if (k !== 0x80) {
                listing[1] = "\tsub #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[4] = "\tasl @";
                listing[5] = "\tjcc " + pas.System.Copy(listing[6],6,256);
                listing[6] = "";
              };
            };
            if ((l === 6) && LDA_A(0) && (LDA_IM(0) === false) && SUB_IM(1) && SVC(2) && (listing[3] === "\teor #$80") && (listing[4] === "\tbpl *+5") && JMP(5)) {
              listing[4] = "\tjmi " + pas.System.Copy(listing[5],6,256);
              listing[5] = "";
            };
            if ((l === 9) && LDA_A(0) && CMP_IM(1) && BNE_A(2) && LDA_A(3) && CMP_IM(4) && LAB_A(5) && (listing[6] === "\tbcc *+7") && (listing[7] === "\tbeq *+5") && JMP(8)) {
              k = rtl.rc((GetBYTE(1) << 8) + GetBYTE(4),-2147483648,2147483647);
              if (k === 0xFFFF) {
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
                listing[4] = "";
                listing[5] = "";
                listing[6] = "";
                listing[7] = "";
                listing[8] = "";
              } else {
                listing[5] = listing[4];
                listing[4] = listing[3];
                listing[3] = "\tjne " + pas.System.Copy(listing[8],6,256);
                listing[2] = "\tbcc @+";
                listing[6] = "\tbcc @+";
                listing[7] = listing[3];
                listing[8] = "@";
              };
            };
            if ((l === 9) && LDA_A(0) && CMP(1) && (CMP_IM(1) === false) && BNE_A(2) && LDA_A(3) && CMP(4) && (CMP_IM(4) === false) && LAB_A(5) && (listing[6] === "\tbcc *+7") && (listing[7] === "\tbeq *+5") && JMP(8)) {
              listing[7] = "@";
              listing[8] = "\tjcc " + pas.System.Copy(listing[8],6,256);
              listing[5] = "\tlda " + pas.System.Copy(listing[4],6,256);
              listing[6] = "\tcmp " + pas.System.Copy(listing[3],6,256);
              listing[4] = "\tbne @+";
              listing[2] = "\tlda " + pas.System.Copy(listing[1],6,256);
              listing[3] = "\tcmp " + pas.System.Copy(listing[0],6,256);
              listing[0] = "";
              listing[1] = "";
            };
            if ((l === 15) && LDA_A(0) && CMP(1) && (CMP_IM(1) === false) && BNE_A(2) && LDA_A(3) && CMP(4) && (CMP_IM(4) === false) && BNE_A(5) && LDA_A(6) && CMP(7) && (CMP_IM(7) === false) && BNE_A(8) && LDA_A(9) && CMP(10) && (CMP_IM(10) === false) && LAB_A(11) && (listing[12] === "\tbcc *+7") && (listing[13] === "\tbeq *+5") && JMP(14)) {
              listing[13] = "@";
              listing[14] = "\tjcc " + pas.System.Copy(listing[14],6,256);
              listing[11] = "\tlda " + pas.System.Copy(listing[10],6,256);
              listing[12] = "\tcmp " + pas.System.Copy(listing[9],6,256);
              listing[8] = "\tlda " + pas.System.Copy(listing[7],6,256);
              listing[9] = "\tcmp " + pas.System.Copy(listing[6],6,256);
              listing[10] = "\tbne @+";
              listing[5] = "\tlda " + pas.System.Copy(listing[4],6,256);
              listing[6] = "\tcmp " + pas.System.Copy(listing[3],6,256);
              listing[7] = "\tbne @+";
              listing[2] = "\tlda " + pas.System.Copy(listing[1],6,256);
              listing[3] = "\tcmp " + pas.System.Copy(listing[0],6,256);
              listing[4] = "\tbne @+";
              listing[0] = "";
              listing[1] = "";
            };
            if ((l === 13) && LDA_A(0) && CMP_IM_0(1) && BNE_A(2) && LDA_A(3) && CMP_IM_0(4) && BNE_A(5) && LDA_A(6) && CMP_IM_0(7) && BNE_A(8) && LDA_A(9) && CMP_IM_0(10) && LAB_A(11) && (pas.System.Pos("\tjcc l_",listing[12]) > 0)) {
              listing[0] = "";
              listing[1] = "";
              listing[2] = "";
              listing[3] = "";
              listing[4] = "";
              listing[5] = "";
              listing[6] = "";
              listing[7] = "";
              listing[8] = "";
              listing[9] = "";
              listing[10] = "";
              listing[11] = "";
              listing[12] = "";
            };
            if ((l === 15) && LDA_A(0) && (listing[1] === "\tcmp #$FF") && BNE_A(2) && LDA_A(3) && (listing[4] === "\tcmp #$FF") && BNE_A(5) && LDA_A(6) && (listing[7] === "\tcmp #$FF") && BNE_A(8) && LDA_A(9) && (listing[10] === "\tcmp #$FF") && LAB_A(11) && (listing[12] === "\tbcc *+7") && (listing[13] === "\tbeq *+5") && JMP(14)) {
              listing[0] = "";
              listing[1] = "";
              listing[2] = "";
              listing[3] = "";
              listing[4] = "";
              listing[5] = "";
              listing[6] = "";
              listing[7] = "";
              listing[8] = "";
              listing[9] = "";
              listing[10] = "";
              listing[11] = "";
              listing[12] = "";
              listing[13] = "";
              listing[14] = "";
            };
            if ((l === 20) && LOCAL(0) && LDA_A(1) && (LDA_IM(1) === false) && SUB_IM(2) && (listing[3] === "\tbne L4") && LDA_A(4) && (LDA_IM(4) === false) && CMP_IM(5) && (listing[6] === "L1\tbeq L5") && (listing[7] === "\tbcs L3") && (listing[8] === "\tlda #$FF") && (listing[9] === "\tbne L5") && (listing[10] === "L3\tlda #$01") && (listing[11] === "\tbne L5") && (listing[12] === "L4\tbvc L5") && (listing[13] === "\teor #$FF") && (listing[14] === "\tora #$01") && (listing[15] === "L5") && ENDL(16) && (listing[17] === "\tbmi *+7") && (listing[18] === "\tbeq *+5") && JMP(19)) {
              k = rtl.rc((GetBYTE(2) << 8) + GetBYTE(5) + 1,-2147483648,2147483647);
              if (k !== 0x8000) {
                listing[5] = "\tcmp #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[6] = listing[1];
                listing[7] = "\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(k >>> 8,0,255),2);
                listing[8] = "\tsvc";
                listing[9] = "\teor #$80";
                listing[10] = "\tasl @";
                listing[11] = "\tjcc " + pas.System.Copy(listing[19],6,256);
                listing[12] = "";
                listing[13] = "";
                listing[14] = "";
                listing[15] = "";
                listing[16] = "";
                listing[17] = "";
                listing[18] = "";
                listing[19] = "";
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
              };
            };
            if ((l === 19) && LOCAL(0) && LDA_A(1) && (LDA_IM(1) === false) && SUB_IM(2) && (listing[3] === "\tbne L4") && LDA_A(4) && (LDA_IM(4) === false) && CMP_IM(5) && (listing[6] === "L1\tbeq L5") && (listing[7] === "\tbcs L3") && (listing[8] === "\tlda #$FF") && (listing[9] === "\tbne L5") && (listing[10] === "L3\tlda #$01") && (listing[11] === "\tbne L5") && (listing[12] === "L4\tbvc L5") && (listing[13] === "\teor #$FF") && (listing[14] === "\tora #$01") && (listing[15] === "L5") && ENDL(16) && (listing[17] === "\tbpl *+5") && JMP(18)) {
              k = rtl.rc((GetBYTE(2) << 8) + GetBYTE(5),-2147483648,2147483647);
              if (k !== 0x8000) {
                listing[5] = "\tcmp #$" + pas.SysUtils.IntToHex(k & 0xff,2);
                listing[6] = listing[1];
                listing[7] = "\tsbc #$" + pas.SysUtils.IntToHex(rtl.rc(k >>> 8,0,255),2);
                listing[8] = "\tsvc";
                listing[9] = "\teor #$80";
                listing[10] = "\tjmi " + pas.System.Copy(listing[18],6,256);
                listing[11] = "";
                listing[12] = "";
                listing[13] = "";
                listing[14] = "";
                listing[15] = "";
                listing[16] = "";
                listing[17] = "";
                listing[18] = "";
                listing[0] = "";
                listing[1] = "";
                listing[2] = "";
                listing[3] = "";
              };
            };
          };
        };
        Rebuild();
        for (var $l2 = 0, $end2 = l - 1; $l2 <= $end2; $l2++) {
          i = $l2;
          if (MVA_IM(i) || (MVA(i) && (pas.System.Pos("\tmva adr.",rtl.rcArrR(listing,i)) === 0) && (pas.System.Pos(":STACK",rtl.rcArrR(listing,i)) === 0) && (IY(i) === false)) || (LDA_VAL(i) && (IY(i) === false))) {
            arg0 = GetString$1(i);
            if (SKIP(i + 1) || ((i > 0) && (LOCAL(i - 1) || (SKIP(i - 1) && LDA_IM(i))))) {}
            else if (arg0 === pas.Common.optyA) if (MVA(i)) {
              rtl.rcArrW(listing,i,"\tsta " + GetStringLast(i))}
             else rtl.rcArrW(listing,i,"");
            pas.Common.optyA = arg0;
          } else if (MVA(i) && (IY(i) === false)) {
            if (MVA_STACK(i)) {
              arg0 = ""}
             else {
              arg0 = rtl.rcArrR(listing,i);
              k = rtl.rc(rtl.rcArrR(listing,i).length,-2147483648,2147483647);
              while (rtl.rcCharAt(arg0,k - 1) !== " ") k -= 1;
              arg0 = pas.System.Copy(arg0,k + 1,256);
            };
            pas.Common.optyA = arg0;
          } else if (TYA(i) || AND_ORA_EOR(i) || ADD_SUB(i) || ADC_SBC(i) || ASL(i) || LSR(i) || ROL(i) || ROR(i)) {
            if (STA_A(i + 1) && (IY(i + 1) === false)) {
              arg0 = GetString$1(i + 1)}
             else arg0 = "";
            pas.Common.optyA = arg0;
          } else if (((pas.Common.optyA !== "") && STY(i) && (rtl.rcArrR(listing,i) === ("\tsty " + pas.Common.optyA))) || LDA_A(i) || MVA(i) || MWA(i) || TYA(i) || LAB_A(i) || JSR(i) || LAB_L(i) || LAB_B(i) || LAB_C(i) || (rtl.rcArrR(listing,i) === "\t#for") || (pas.System.Pos("\t.if",rtl.rcArrR(listing,i)) > 0)) {
            arg0 = "";
            pas.Common.optyA = "";
          };
        };
        Rebuild();
        i = 0;
        k = 0;
        while (i < l) {
          if (MWY_BP2(i) || (LDA_A(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && STA_BP2(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC(i + 4) && STA_BP2_1(i + 5)) || (LDA_A(i) && ADD(i + 1) && (ADD_STACK(i + 1) === false) && TAY(i + 2) && (rtl.rcArrR(listing,i + 3) === (rtl.rcArrR(listing,i) + "+1")) && ADC(i + 4) && STA_BP_1(i + 5) && LDA_BP_Y(i + 6)) || (LDA_VAL(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (rtl.rcArrR(listing,i) === (rtl.rcArrR(listing,i + 2) + "+1")) && ASL_A(i + 3) && ROL_STACK(i + 4) && ADD(i + 5) && (ADD_STACK(i + 5) === false) && STA_BP2(i + 6) && LDA_A(i + 7) && ADC_STACK(i + 8) && STA_BP2_1(i + 9) && (pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256) === (pas.System.Copy(rtl.rcArrR(listing,i + 5),6,256) + "+1")) && argMatch(i + 1,i + 4) && argMatch(i + 1,i + 8)) || (LDA_VAL(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 2) === (rtl.rcArrR(listing,i) + "+1")) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_STACK(i + 5) && LDA_A(i + 6) && ADD_STACK(i + 7) && STA_BP2(i + 8) && LDA_A(i + 9) && ADC_STACK(i + 10) && STA_BP2_1(i + 11) && (pas.System.Copy(rtl.rcArrR(listing,i + 9),6,256) === (pas.System.Copy(rtl.rcArrR(listing,i + 6),6,256) + "+1")) && argMatch(i + 1,i + 3) && argMatch(i + 1,i + 7) && argMatch(i + 5,i + 10)) || (LDA_VAL(i) && STA_STACK(i + 1) && LDA_A(i + 2) && (rtl.rcArrR(listing,i + 2) === (rtl.rcArrR(listing,i) + "+1")) && ASL_STACK(i + 3) && ROL_A(i + 4) && STA_STACK(i + 5) && LDA_STACK(i + 6) && ADD(i + 7) && STA_TMP(i + 8) && LDA_STACK(i + 9) && ADC(i + 10) && STA_TMP_1(i + 11) && LDY_IM_0(i + 12) && (rtl.rcArrR(listing,i + 13) === "\tlda (:TMP),y") && STA_BP2(i + 14) && INY(i + 15) && (rtl.rcArrR(listing,i + 16) === "\tlda (:TMP),y") && STA_BP2_1(i + 17) && (pas.System.Copy(rtl.rcArrR(listing,i + 10),6,256) === (pas.System.Copy(rtl.rcArrR(listing,i + 7),6,256) + "+1")) && argMatch(i + 1,i + 3) && argMatch(i + 1,i + 6) && argMatch(i + 5,i + 9))) {
            if (LDA_BP_Y(i + 6)) {}
            else if (STA_TMP_1(i + 11) && ASL_STACK(i + 3) && ROL_A(i + 4)) {
              arg0 = "];" + GetString$1(i) + ";" + GetString$1(i + 2) + ";" + GetString$1(i + 7) + ";" + GetString$1(i + 10) + ";";
              k = 18;
            } else if (ASL_STACK(i + 3) && ROL_A(i + 4)) {
              arg0 = "&;" + GetString$1(i) + ";" + GetString$1(i + 2) + ";" + GetString$1(i + 6) + ";" + GetString$1(i + 9) + ";";
              k = 12;
            } else if (ASL_A(i + 3) && ROL_STACK(i + 4)) {
              arg0 = "%;" + GetString$1(i) + ";" + GetString$1(i + 2) + ";" + GetString$1(i + 5) + ";" + GetString$1(i + 7) + ";";
              k = 10;
            } else if (LDA_A(i)) {
              arg0 = "+;" + GetString$1(i) + ";" + GetString$1(i + 1) + ";" + GetString$1(i + 3) + ";" + GetString$1(i + 4) + ";";
              k = 6;
            } else {
              arg0 = rtl.rcArrR(listing,i);
              arg0 = rtl.rcSetCharAt(arg0,3,"?");
              k = 1;
            };
            if (LDA_BP_Y(i + 6)) {
              arg0 = "+;" + GetString$1(i) + ";" + GetString$1(i + 1) + ";" + GetString$1(i + 3) + ";" + GetString$1(i + 4) + ";";
              if (arg0 === pas.Common.optyBP2) {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"\tldy #$00");
                rtl.rcArrW(listing,i + 6,"\tlda (:bp2),y");
                k = 7;
              } else {
                arg0 = pas.Common.optyBP2;
                k = 1;
              };
            } else if (arg0 === pas.Common.optyBP2) {
              if (rtl.rcCharAt(arg0,0) === "]") {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
                rtl.rcArrW(listing,i + 12,"");
                rtl.rcArrW(listing,i + 13,"");
                rtl.rcArrW(listing,i + 14,"");
                rtl.rcArrW(listing,i + 15,"");
                rtl.rcArrW(listing,i + 16,"");
                rtl.rcArrW(listing,i + 17,"");
              } else if (rtl.rcCharAt(arg0,0) === "&") {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
                rtl.rcArrW(listing,i + 10,"");
                rtl.rcArrW(listing,i + 11,"");
              } else if (rtl.rcCharAt(arg0,0) === "%") {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
                rtl.rcArrW(listing,i + 6,"");
                rtl.rcArrW(listing,i + 7,"");
                rtl.rcArrW(listing,i + 8,"");
                rtl.rcArrW(listing,i + 9,"");
              } else if (rtl.rcCharAt(arg0,0) === "+") {
                rtl.rcArrW(listing,i,"");
                rtl.rcArrW(listing,i + 1,"");
                rtl.rcArrW(listing,i + 2,"");
                rtl.rcArrW(listing,i + 3,"");
                rtl.rcArrW(listing,i + 4,"");
                rtl.rcArrW(listing,i + 5,"");
              } else rtl.rcArrW(listing,i,"");
            };
            pas.Common.optyBP2 = arg0;
            i += k;
          } else {
            if ((pas.Common.optyBP2 !== "") && (STA_A(i) || STY(i) || ASL(i) || ROL(i) || LSR(i) || ROR(i) || INC_(i) || DEC_(i))) if ((pas.System.Pos("? " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " ",pas.Common.optyBP2) > 0) || (pas.System.Pos(";" + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + ";",pas.Common.optyBP2) > 0)) pas.Common.optyBP2 = "";
            if (STA_BP2(i) || STA_BP2_1(i) || JSR(i) || LAB_L(i) || LAB_B(i) || LAB_C(i)) pas.Common.optyBP2 = "";
            i += 1;
          };
        };
        Rebuild();
        for (var $l3 = 0, $end3 = l - 1; $l3 <= $end3; $l3++) {
          i = $l3;
          if (LDY_VAL(i)) {
            arg0 = GetString$1(i);
            if (LDY_IM_0(i) && LDA(i + 1) && SPL(i + 2)) {
              arg0 = "";
              pas.Common.optyY = "";
            } else if (arg0 === pas.Common.optyY) {
              rtl.rcArrW(listing,i,"")}
             else {
              if ((pas.Common.optyY !== "") && (pas.System.Pos("#$",pas.Common.optyY) === 1) && (pas.System.Pos("#$",arg0) === 1)) {
                k = rtl.rc(pas.StringUtilities.StrToInt(pas.System.Copy(arg0,2,256)) - pas.StringUtilities.StrToInt(pas.System.Copy(pas.Common.optyY,2,256)),-2147483648,2147483647);
                if (k === 1) {
                  rtl.rcArrW(listing,i,"\tiny")}
                 else if (k === -1) rtl.rcArrW(listing,i,"\tdey");
              };
              pas.Common.optyY = arg0;
            };
          } else if (INY(i)) {
            if (SKIP(i - 1)) {
              arg0 = "";
              pas.Common.optyY = "";
            } else if (pas.Common.optyY !== "") if ((rtl.rcCharAt(pas.Common.optyY,0) === "#") && (rtl.rcCharAt(pas.Common.optyY,1) === "$")) {
              pas.Common.optyY = "#$" + pas.SysUtils.IntToHex(rtl.rc(pas.StringUtilities.StrToInt(pas.System.Copy(pas.Common.optyY,2,256)) + 1,0,255),2)}
             else pas.Common.optyY = "+#$01" + pas.Common.optyY;
          } else if (DEY(i)) {
            if (SKIP(i - 1)) {
              arg0 = "";
              pas.Common.optyY = "";
            } else if (pas.Common.optyY !== "") if ((rtl.rcCharAt(pas.Common.optyY,0) === "#") && (rtl.rcCharAt(pas.Common.optyY,1) === "$")) {
              pas.Common.optyY = "#$" + pas.SysUtils.IntToHex(rtl.rc(pas.StringUtilities.StrToInt(pas.System.Copy(pas.Common.optyY,2,256)) - 1,0,255),2)}
             else pas.Common.optyY = "-#$01" + pas.Common.optyY;
          } else if (TAY(i)) {
            if ((i > 1) && ((ADD_SUB_VAL(i - 1) && (ADC_SBC(i + 2) === false) && LDA_VAL(i - 2) && (IY(i - 2) === false)) || (ASL_A(i - 1) && LDA_VAL(i - 2) && (IY(i - 2) === false)) || ((i > 2) && ASL_A(i - 1) && ASL_A(i - 2) && LDA_VAL(i - 3) && (IY(i - 3) === false)) || ((i > 3) && ASL_A(i - 1) && ASL_A(i - 2) && ASL_A(i - 3) && LDA_VAL(i - 4) && (IY(i - 4) === false)) || ((i > 2) && ADD(i - 1) && ASL_A(i - 2) && LDA_VAL(i - 3) && argMatch(i - 1,i - 3) && (IY(i - 3) === false)) || ((i > 5) && ADD(i - 1) && ASL_A(i - 2) && ADD(i - 3) && ASL_A(i - 4) && ASL_A(i - 5) && LDA_VAL(i - 6) && argMatch(i - 3,i - 6) && (IY(i - 6) === false)))) {
              if (ADD_IM(i - 1) && LDA_A(i - 2)) arg0 = "+" + pas.System.Copy(rtl.rcArrR(listing,i - 1),6,256) + GetString$1(i - 2);
              if (SUB_IM(i - 1) && LDA_A(i - 2)) arg0 = "-" + pas.System.Copy(rtl.rcArrR(listing,i - 1),6,256) + GetString$1(i - 2);
              if (ADD(i - 1) && (ADD_IM(i - 1) === false) && LDA_A(i - 2)) if (GetString$1(i - 1) >= GetString$1(i - 2)) {
                arg0 = "*+$01" + GetString$1(i - 1) + "|" + GetString$1(i - 2)}
               else arg0 = "*+$01" + GetString$1(i - 2) + "|" + GetString$1(i - 1);
              if (SUB(i - 1) && (SUB_IM(i - 1) === false) && LDA_A(i - 2)) if (GetString$1(i - 1) >= GetString$1(i - 2)) {
                arg0 = "*-$01" + GetString$1(i - 1) + "|" + GetString$1(i - 2)}
               else arg0 = "*-$01" + GetString$1(i - 2) + "|" + GetString$1(i - 1);
              if (ASL_A(i - 1) && LDA_A(i - 2)) arg0 = "*#$02" + GetString$1(i - 2);
              if ((i > 2) && ASL_A(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) arg0 = "*#$04" + GetString$1(i - 3);
              if ((i > 3) && ASL_A(i - 1) && ASL_A(i - 2) && ASL_A(i - 3) && LDA_A(i - 4)) arg0 = "*#$08" + GetString$1(i - 4);
              if ((i > 2) && ADD(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) arg0 = "*#$03" + GetString$1(i - 3);
              if ((i > 5) && ADD(i - 1) && ASL_A(i - 2) && ADD(i - 3) && ASL_A(i - 4) && ASL_A(i - 5) && LDA_A(i - 6)) arg0 = "*#$0A" + GetString$1(i - 6) + "+" + GetString$1(i - 1);
              if (arg0 === pas.Common.optyY) {
                if ((i > 5) && ADD(i - 1) && ASL_A(i - 2) && ADD(i - 3) && ASL_A(i - 4) && ASL_A(i - 5) && LDA_A(i - 6)) {
                  rtl.rcArrW(listing,i - 6,"");
                  rtl.rcArrW(listing,i - 5,"");
                  rtl.rcArrW(listing,i - 4,"");
                  rtl.rcArrW(listing,i - 3,"");
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"");
                } else if ((i > 3) && ASL_A(i - 1) && ASL_A(i - 2) && ASL_A(i - 3) && LDA_A(i - 4)) {
                  rtl.rcArrW(listing,i - 4,"");
                  rtl.rcArrW(listing,i - 3,"");
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"");
                } else if ((i > 2) && ADD(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) {
                  rtl.rcArrW(listing,i - 3,"");
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"");
                } else if ((i > 2) && ASL_A(i - 1) && ASL_A(i - 2) && LDA_A(i - 3)) {
                  rtl.rcArrW(listing,i - 3,"");
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"");
                } else {
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"");
                };
              } else if ((pas.Common.optyY !== "") && (rtl.rcCharAt(arg0,0) === "+") && (rtl.rcCharAt(pas.Common.optyY,0) === "+")) {
                k = rtl.rc(pas.StringUtilities.StrToInt(pas.System.Copy(arg0,3,3)) - pas.StringUtilities.StrToInt(pas.System.Copy(pas.Common.optyY,3,3)),-2147483648,2147483647);
                if (k === 1) {
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"\tiny");
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    rtl.rcArrW(listing,i + 1,"");
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                  };
                } else if (k === -1) {
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"\tdey");
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    rtl.rcArrW(listing,i + 1,"");
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                  };
                };
              } else if ((pas.Common.optyY !== "") && (rtl.rcCharAt(arg0,0) === "-") && (rtl.rcCharAt(pas.Common.optyY,0) === "-")) {
                k = rtl.rc(pas.StringUtilities.StrToInt(pas.System.Copy(arg0,3,3)) - pas.StringUtilities.StrToInt(pas.System.Copy(pas.Common.optyY,3,3)),-2147483648,2147483647);
                if (k === 1) {
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"\tdey");
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    rtl.rcArrW(listing,i + 1,"");
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                  };
                } else if (k === -1) {
                  rtl.rcArrW(listing,i - 2,"");
                  rtl.rcArrW(listing,i - 1,"");
                  rtl.rcArrW(listing,i,"\tiny");
                  if (LDA_A(i + 1) && ADC_IM_0(i + 2) && STA_A(i + 3)) {
                    rtl.rcArrW(listing,i + 1,"");
                    rtl.rcArrW(listing,i + 2,"");
                    rtl.rcArrW(listing,i + 3,"");
                  };
                };
              };
              pas.Common.optyY = arg0;
            } else {
              arg0 = "";
              pas.Common.optyY = "";
            };
          } else if (LabelIsUsed(i) || INY(i) || DEY(i) || TAY(i) || LDY_STACK(i) || MVY(i) || MWY(i) || JSR(i) || (pas.System.Pos(",y-",rtl.rcArrR(listing,i)) > 0) || (pas.System.Pos(",y+",rtl.rcArrR(listing,i)) > 0) || ((pas.Common.optyA !== "") && (pas.Common.optyA === pas.Common.optyY)) || LAB_L(i) || LAB_B(i) || LAB_C(i) || (rtl.rcArrR(listing,i) === "\t#for") || (pas.System.Pos("\t.if",rtl.rcArrR(listing,i)) > 0)) {
            arg0 = "";
            pas.Common.optyY = "";
          };
        };
        for (var $l4 = 0, $end4 = l - 1; $l4 <= $end4; $l4++) {
          i = $l4;
          if (rtl.rcArrR(listing,i) !== "") WriteInstruction(i);
        };
      } else {
        l = rtl.rc(rtl.length(pas.Common.OptimizeBuf) - 1,-2147483648,2147483647);
        if (l > 1023) {
          pas.System.Writeln("Out of resources, LISTING");
          pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
        };
        for (var $l5 = 0, $end5 = l - 1; $l5 <= $end5; $l5++) {
          i = $l5;
          rtl.rcArrW(listing,i,rtl.rcArrR(pas.Common.OptimizeBuf,i));
        };
        do {
        } while (!PeepholeOptimization_STACK());
        if (pas.Common.optyA !== "") for (var $l6 = 0, $end6 = l - 1; $l6 <= $end6; $l6++) {
          i = $l6;
          if ((rtl.rcArrR(listing,i) === ("\tinc " + pas.Common.optyA)) || (rtl.rcArrR(listing,i) === ("\tdec " + pas.Common.optyA)) || LDA_A(i) || MVA(i) || MWA(i) || TYA(i) || LAB_A(i) || JSR(i) || (pas.System.Pos("\tjmp ",rtl.rcArrR(listing,i)) > 0) || (pas.System.Pos("\t.if",rtl.rcArrR(listing,i)) > 0)) {
            pas.Common.optyA = "";
            break;
          };
        };
        if (pas.Common.optyY !== "") for (var $l7 = 0, $end7 = l - 1; $l7 <= $end7; $l7++) {
          i = $l7;
          if (LabelIsUsed(i) || LDY(i) || MVY(i) || MWY(i) || INY(i) || DEY(i) || TAY(i) || LAB_A(i) || JSR(i) || (pas.System.Pos("\tjmp ",rtl.rcArrR(listing,i)) > 0) || (pas.System.Pos("\t.if",rtl.rcArrR(listing,i)) > 0)) {
            pas.Common.optyY = "";
            break;
          };
        };
        if (pas.Common.optyBP2 !== "") for (var $l8 = 0, $end8 = l - 1; $l8 <= $end8; $l8++) {
          i = $l8;
          if ((pas.Common.optyBP2 !== "") && (STA_A(i) || STY(i) || ASL(i) || ROL(i) || LSR(i) || ROR(i) || INC_(i) || DEC_(i))) if ((pas.System.Pos("? " + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + " ",pas.Common.optyBP2) > 0) || (pas.System.Pos(";" + pas.System.Copy(rtl.rcArrR(listing,i),6,256) + ";",pas.Common.optyBP2) > 0)) {
            pas.Common.optyBP2 = "";
            break;
          };
          if (STA_BP2(i) || STA_BP2_1(i) || JSR(i) || (pas.System.Pos("\tjmp ",rtl.rcArrR(listing,i)) > 0)) {
            pas.Common.optyBP2 = "";
            break;
          };
        };
        if (pas.Common.optimize.line !== pas.Common.optimize.oldLine) {
          $mod.WriteOut("");
          if (x === 51) {
            $mod.WriteOut("; optimize FAIL (" + "'" + arg0 + "'" + ", " + pas.Common.optimize.SourceFile.Name + "), line = " + pas.StringUtilities.IntToStr(pas.Common.optimize.line))}
           else $mod.WriteOut("; optimize FAIL (" + pas.StringUtilities.IntToStr(x) + ", " + pas.Common.optimize.SourceFile.Name + "), line = " + pas.StringUtilities.IntToStr(pas.Common.optimize.line));
          $mod.WriteOut("");
          pas.Common.optimize.oldLine = rtl.rc(pas.Common.optimize.line,-2147483648,2147483647);
        };
        for (var $l9 = 0, $end9 = l - 1; $l9 <= $end9; $l9++) {
          i = $l9;
          WriteInstruction(i);
        };
      };
      pas.Common.OptimizeBuf = rtl.arraySetLength(pas.Common.OptimizeBuf,"",1);
    };
  };
},["SysUtils","Common","Console","StringUtilities","Targets","Utilities"]);
rtl.module("Scanner",["System","CommonTypes","CompilerTypes","Tokens"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createInterface(this,"IScanner","{EB699F2F-6B14-3F03-8491-759E5755C540}",["TokenizeProgram"],pas.System.IUnknown);
  rtl.createClass(this,"TScanner",pas.System.TInterfacedObject,function () {
    this.TokenizeProgram = function (programUnit, UsesOn) {
      var $Self = this;
      var Text = "";
      var Num = "";
      var Frac = "";
      var OldNumTok = 0;
      var ActiveSourceFile = null;
      var Line = 0;
      var Err = 0;
      var cnt = 0;
      var Line2 = 0;
      var Spaces = 0;
      var TextPos = 0;
      var im = 0;
      var OldNumDefines = 0;
      var Tmp = 0;
      var AsmFound = false;
      var UsesFound = false;
      var UnitFound = false;
      var ExternalFound = false;
      var yes = false;
      var ch = "\x00";
      var ch2 = "\x00";
      var ch_ = "\x00";
      var CurToken = 0;
      var StrParams = [];
      function Tokenize(filePath, testSourceFile) {
        var InFile = null;
        var _line = 0;
        var _uidx = null;
        function ReadUses() {
          var i = 0;
          var j = 0;
          var k = 0;
          var _line = 0;
          var _uidx = null;
          var unitName = "";
          var filePath = "";
          UsesFound = false;
          i = rtl.rc(pas.Common.NumTok() - 1,-2147483648,2147483647);
          while (pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.USESTOK) {
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
              pas.Common.CheckTok(i - 1,pas.Tokens.TTokenKind.INTOK);
              pas.Common.CheckTok(i - 2,pas.Tokens.TTokenKind.IDENTTOK);
              filePath = "";
              for (var $l = 1, $end = pas.Common.TokenAt(i).StrLength; $l <= $end; $l++) {
                k = $l;
                filePath = filePath + String.fromCharCode(rtl.rcArrR(pas.Common.StaticStringData,(pas.Common.TokenAt(i).StrAddress - 256) + k));
              };
              filePath = pas.Common.FindFile(filePath,"unit");
              i -= 2;
            } else {
              pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
              filePath = pas.Common.FindFile(pas.Common.TokenAt(i).Name + ".pas","unit");
            };
            unitName = pas.Utilities.AnsiUpperCase(pas.Common.TokenAt(i).Name);
            for (var $l1 = 2, $end1 = pas.Common.SourceFileList.Size(); $l1 <= $end1; $l1++) {
              j = $l1;
              if (pas.Common.SourceFileList.GetSourceFile(j).Name === unitName) pas.Common.SourceFileList.GetSourceFile(j).Name = "";
            };
            _line = rtl.rc(Line,-2147483648,2147483647);
            _uidx = ActiveSourceFile;
            ActiveSourceFile = pas.Common.SourceFileList.AddUnit(pas.CompilerTypes.TSourceFileType.UNIT_FILE,unitName,filePath);
            Line = 1;
            TokenizeUnit(ActiveSourceFile,true);
            Line = rtl.rc(_line,-2147483648,2147483647);
            ActiveSourceFile = _uidx;
            if (pas.Common.TokenAt(i - 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
              i -= 2}
             else i -= 1;
          };
        };
        function RemoveDefine(X) {
          var i = 0;
          i = rtl.rc(pas.Common.SearchDefine(X),-2147483648,2147483647);
          if (i !== 0) {
            pas.Common.NumDefines -= 1;
            for (var $l = i, $end = pas.Common.NumDefines; $l <= $end; $l++) {
              i = $l;
              rtl.rcArrR(pas.Common.Defines,i - 1).$assign(rtl.rcArrR(pas.Common.Defines,(i + 1) - 1));
            };
          };
        };
        function SkipCodeUntilDirective() {
          var Result = "";
          var c = "\x00";
          var i = 0;
          i = 1;
          Result = "";
          do {
            c = " ";
            InFile.Read({get: function () {
                return c;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                c = v;
              }});
            if (c === pas.StringUtilities.LF) Line += 1;
            var $tmp = i;
            if ($tmp === 1) {
              var $tmp1 = c;
              if ($tmp1 === "(") {
                i = 2}
               else if ($tmp1 === "{") i = 5;
            } else if ($tmp === 2) {
              if (c === "*") {
                i = 3}
               else i = 1}
             else if ($tmp === 3) {
              if (c === "*") i = 4}
             else if ($tmp === 4) {
              if (c === ")") {
                i = 1}
               else i = 3}
             else if ($tmp === 5) {
              if (c === "$") {
                i = 6}
               else {
                i = rtl.rc(0 + 1,0,255);
                Result = "";
              }}
             else if ($tmp === 6) {
              if (pas.System.upcase(c).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars) {
                Result = pas.System.upcase(c);
                i = 7;
              } else {
                i = rtl.rc(0 + 1,0,255);
                Result = "";
              }}
             else if ($tmp === 7) {
              if (pas.System.upcase(c).charCodeAt() in pas.StringUtilities.AllowLabelChars) {
                Result = Result + pas.System.upcase(c)}
               else if (c === "}") {
                i = 9}
               else i = 8}
             else if ($tmp === 8) if (c === "}") i = 9;
          } while (!(i === 9));
          return Result;
        };
        function SkipCodeUntilElseEndif() {
          var Result = false;
          var dir = "";
          var lvl = 0;
          lvl = 0;
          do {
            dir = SkipCodeUntilDirective();
            if (dir === "ENDIF") {
              lvl -= 1;
              if (lvl < 0) return false;
            } else if ((lvl === 0) && (dir === "ELSE")) {
              return true}
             else if (dir === "IFDEF") {
              lvl += 1}
             else if (dir === "IFNDEF") lvl += 1;
          } while (!false);
          return Result;
        };
        function ReadDirective(d, DefineLine) {
          rtl.rc(DefineLine,-2147483648,2147483647);
          var i = 0;
          var v = 0;
          var x = 0;
          var cmd = "";
          var s = "";
          var defineName = "";
          var filePath = "";
          var found = false;
          var Param = rtl.arraySetLength(null,"",8);
          function bin2csv(fn) {
            var bin = null;
            var tmp = 0;
            var NumRead = 0;
            var yes = false;
            try {
              yes = false;
              tmp = 0;
              NumRead = 0;
              bin = rtl.setIntfL(bin,pas.FileIO.TFileSystem.CreateBinaryFile(),true);
              bin.Assign(fn);
              bin.Reset$1(1);
              do {
                bin.BlockRead({get: function () {
                    return tmp;
                  }, set: function (v) {
                    tmp = v;
                  }},1,{get: function () {
                    return NumRead;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    NumRead = v;
                  }});
                if (NumRead === 1) {
                  if (yes) $Self.AddToken(pas.Tokens.GetStandardToken(","),ActiveSourceFile,Line,1,0);
                  $Self.AddToken(pas.Tokens.TTokenKind.INTNUMBERTOK,ActiveSourceFile,Line,1,tmp);
                  yes = true;
                };
              } while (!(NumRead === 0));
              bin.Close();
            } finally {
              rtl._Release(bin);
            };
          };
          function skip_spaces() {
            while (rtl.rcCharAt(d,i - 1).charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) {
              if (rtl.rcCharAt(d,i - 1) === pas.StringUtilities.LF) DefineLine += 1;
              i += 1;
            };
          };
          function newMsgUser(Kind) {
            rtl.rc(Kind,0,191);
            var k = 0;
            k = rtl.rc(pas.Common.msgLists.msgUser.GetCount(),-2147483648,2147483647);
            $Self.AddToken(Kind,ActiveSourceFile,Line,1,k);
            $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
            pas.StringUtilities.SkipWhitespaces(d,{get: function () {
                return i;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                i = v;
              }});
            pas.Common.msgLists.msgUser.Add(pas.System.Copy(d,i,d.length - i));
          };
          var $ir = rtl.createIntfRefs();
          try {
            Param = rtl.arraySetLength(null,"",8);
            if (pas.System.upcase(rtl.rcCharAt(d,0)).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars) {
              i = 1;
              cmd = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }});
              if (cmd === "INCLUDE") cmd = "I";
              if (cmd === "RESOURCE") cmd = "R";
              if (cmd === "WARNING") {
                newMsgUser(pas.Tokens.TTokenKind.WARNINGTOK)}
               else if (cmd === "ERROR") {
                newMsgUser(pas.Tokens.TTokenKind.ERRORTOK)}
               else if (cmd === "INFO") {
                newMsgUser(pas.Tokens.TTokenKind.INFOTOK)}
               else if (cmd === "MACRO+") {
                pas.Common.Macros = true}
               else if (cmd === "MACRO-") {
                pas.Common.Macros = false}
               else if (cmd === "MACRO") {
                s = pas.StringUtilities.GetStringUpperCase(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                if (s === "ON") {
                  pas.Common.Macros = true}
                 else if (s === "OFF") {
                  pas.Common.Macros = false}
                 else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongSwitchToggle,"Wrong switch toggle, use ON/OFF or +/-","","","","","","","","","",""]),pas.Messages.IMessage)));
              } else if (cmd === "I") {
                if (rtl.rcCharAt(d,i - 1) === "+") {
                  $Self.AddToken(pas.Tokens.TTokenKind.IOCHECKON,ActiveSourceFile,Line,1,0);
                  $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
                } else if (rtl.rcCharAt(d,i - 1) === "-") {
                  $Self.AddToken(pas.Tokens.TTokenKind.IOCHECKOFF,ActiveSourceFile,Line,1,0);
                  $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
                } else {
                  s = pas.StringUtilities.GetString(d,false,{get: function () {
                      return i;
                    }, set: function (v) {
                      rtl.rc(v,-2147483648,2147483647);
                      i = v;
                    }});
                  if (pas.Utilities.AnsiUpperCase(s) === "%TIME%") {
                    s = pas.SysUtils.TimeToStr(pas.SysUtils.Now());
                    $Self.AddToken(pas.Tokens.TTokenKind.STRINGLITERALTOK,ActiveSourceFile,Line,s.length + Spaces,0);
                    Spaces = 0;
                    pas.Common.DefineStaticString(pas.Common.NumTok(),s);
                  } else if (pas.Utilities.AnsiUpperCase(s) === "%DATE%") {
                    s = pas.SysUtils.DateToStr(pas.SysUtils.Now());
                    $Self.AddToken(pas.Tokens.TTokenKind.STRINGLITERALTOK,ActiveSourceFile,Line,s.length + Spaces,0);
                    Spaces = 0;
                    pas.Common.DefineStaticString(pas.Common.NumTok(),s);
                  } else {
                    filePath = pas.Common.FindFile(s,"include");
                    _line = rtl.rc(Line,-2147483648,2147483647);
                    _uidx = ActiveSourceFile;
                    Line = 1;
                    ActiveSourceFile = pas.Common.SourceFileList.AddUnit(pas.CompilerTypes.TSourceFileType.INCLUDE_FILE,pas.SysUtils.ExtractFileName(filePath),filePath);
                    Tokenize(filePath,false);
                    Line = rtl.rc(_line,-2147483648,2147483647);
                    ActiveSourceFile = _uidx;
                  };
                };
              } else if (cmd === "EVAL") {
                if (pas.SysUtils.TStringHelper.LastIndexOf.call({get: function () {
                    return d;
                  }, set: function (v) {
                    d = v;
                  }},"}") < 0) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error. Character '}' expected","","","","","","","","","",""]),pas.Messages.IMessage)));
                s = pas.System.Copy(d,i,(pas.SysUtils.TStringHelper.LastIndexOf.call({get: function () {
                    return d;
                  }, set: function (v) {
                    d = v;
                  }},"}") - i) + 1);
                s = pas.SysUtils.TrimRight(s);
                if (rtl.rcCharAt(s,s.length - 1) !== '"') pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,'Syntax error. Missing \'"\'',"","","","","","","","","",""]),pas.Messages.IMessage)));
                $Self.AddToken(pas.Tokens.TTokenKind.EVALTOK,ActiveSourceFile,Line,1,0);
                pas.Common.DefineFilename(pas.Common.NumTok(),s);
              } else if (cmd === "BIN2CSV") {
                s = pas.StringUtilities.GetFilePath(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                s = pas.Common.FindFile(s,"BIN2CSV");
                bin2csv(s);
              } else if (cmd === "OPTIMIZATION") {
                s = pas.StringUtilities.GetStringUpperCase(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                if (s === "LOOPUNROLL") {
                  $Self.AddToken(pas.Tokens.TTokenKind.LOOPUNROLLTOK,ActiveSourceFile,Line,1,0)}
                 else if (s === "NOLOOPUNROLL") {
                  $Self.AddToken(pas.Tokens.TTokenKind.NOLOOPUNROLLTOK,ActiveSourceFile,Line,1,0)}
                 else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalOptimizationSpecified,'Illegal optimization specified "' + s + '"',"","","","","","","","","",""]),pas.Messages.IMessage)));
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
              } else if (cmd === "CODEALIGN") {
                s = pas.StringUtilities.GetStringUpperCase(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                if (s === "PROC") {
                  $Self.AddToken(pas.Tokens.TTokenKind.PROCALIGNTOK,ActiveSourceFile,Line,1,0)}
                 else if (s === "LOOP") {
                  $Self.AddToken(pas.Tokens.TTokenKind.LOOPALIGNTOK,ActiveSourceFile,Line,1,0)}
                 else if (s === "LINK") {
                  $Self.AddToken(pas.Tokens.TTokenKind.LINKALIGNTOK,ActiveSourceFile,Line,1,0)}
                 else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalAlignmentDirective,"Illegal alignment directive '" + s + "'.","","","","","","","","","",""]),pas.Messages.IMessage)));
                pas.StringUtilities.SkipWhitespaces(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                if (rtl.rcCharAt(d,i - 1) !== "=") pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Character '=' expected.","","","","","","","","","",""]),pas.Messages.IMessage)));
                i += 1;
                pas.StringUtilities.SkipWhitespaces(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                s = pas.StringUtilities.GetNumber(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                pas.System.val$6(s,{get: function () {
                    return v;
                  }, set: function (w) {
                    rtl.rc(w,-2147483648,2147483647);
                    v = w;
                  }},{get: function () {
                    return Err;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    Err = v;
                  }});
                if (Err > 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok());
                pas.Common.GetCommonConstType(pas.Common.NumTok(),pas.Tokens.TTokenKind.WORDTOK,pas.Datatypes.GetValueType(v),true);
                pas.Common.TokenAt(pas.Common.NumTok()).Value = rtl.rc(v,-2147483648,2147483647);
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
              } else if (cmd === "UNITPATH") {
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
                do {
                  s = pas.StringUtilities.GetFilePath(d,{get: function () {
                      return i;
                    }, set: function (v) {
                      rtl.rc(v,-2147483648,2147483647);
                      i = v;
                    }});
                  if (s === "") pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FilePathNotSpecified,"An empty path cannot be used","","","","","","","","","",""]),pas.Messages.IMessage)));
                  pas.Common.AddPath(s);
                  if (rtl.rcCharAt(d,i - 1) === ";") {
                    i += 1}
                   else break;
                } while (!(rtl.rcCharAt(d,i - 1) === ";"));
                pas.Common.TokenList.RemoveToken();
              } else if (cmd === "LIBRARYPATH") {
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
                do {
                  s = pas.StringUtilities.GetFilePath(d,{get: function () {
                      return i;
                    }, set: function (v) {
                      rtl.rc(v,-2147483648,2147483647);
                      i = v;
                    }});
                  if (s === "") pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.FilePathNotSpecified,"An empty path cannot be used","","","","","","","","","",""]),pas.Messages.IMessage)));
                  pas.Common.AddPath(s);
                  if (rtl.rcCharAt(d,i - 1) === ";") {
                    i += 1}
                   else break;
                } while (!(rtl.rcCharAt(d,i - 1) === ";"));
                pas.Common.TokenList.RemoveToken();
              } else if ((cmd === "R") && !(rtl.rcCharAt(d,i - 1).charCodeAt() in rtl.createSet(43,45))) {
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
                s = pas.StringUtilities.GetFilePath(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                $impl.AddResource(pas.Common.FindFile(s,"resource"));
                pas.Common.TokenList.RemoveToken();
              } else if ((cmd === "L") || (cmd === "LINK")) {
                $Self.AddToken(pas.Tokens.TTokenKind.LINKTOK,ActiveSourceFile,Line,1,0);
                s = pas.StringUtilities.GetFilePath(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                s = pas.Common.FindFile(s,"link object");
                pas.Common.DefineFilename(pas.Common.NumTok(),s);
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
              } else if ((cmd === "F") || (cmd === "FASTMUL")) {
                $Self.AddToken(pas.Tokens.TTokenKind.SEMICOLONTOK,ActiveSourceFile,Line,1,0);
                s = pas.StringUtilities.GetNumber(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                pas.System.val$6(s,{p: pas.Common, get: function () {
                    return this.p.FastMul;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    this.p.FastMul = v;
                  }},{get: function () {
                    return Err;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    Err = v;
                  }});
                if (Err !== 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok());
                pas.Common.AddDefine("FASTMUL");
                pas.Common.AddDefines = rtl.rc(pas.Common.NumDefines,-2147483648,2147483647);
                pas.Common.GetCommonConstType(pas.Common.NumTok(),pas.Tokens.TTokenKind.BYTETOK,pas.Datatypes.GetValueType(pas.Common.FastMul),true);
                pas.Common.TokenList.RemoveToken();
              } else if ((cmd === "IFDEF") || (cmd === "IFNDEF")) {
                found = 0 !== pas.Common.SearchDefine(pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }}));
                if (cmd === "IFNDEF") found = !found;
                if (!found) {
                  if (SkipCodeUntilElseEndif()) pas.Common.IfdefLevel += 1;
                } else pas.Common.IfdefLevel += 1;
              } else if (cmd === "ELSE") {
                if ((pas.Common.IfdefLevel === 0) || SkipCodeUntilElseEndif()) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ElseWithoutIf,"Found $ELSE without $IFXXX","","","","","","","","","",""]),pas.Messages.IMessage)));
                if (pas.Common.IfdefLevel > 0) pas.Common.IfdefLevel -= 1;
              } else if (cmd === "ENDIF") {
                if (pas.Common.IfdefLevel === 0) {
                  pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.EndifWithoutIf,"Found $ENDIF without $IFXXX","","","","","","","","","",""]),pas.Messages.IMessage)))}
                 else pas.Common.IfdefLevel -= 1;
              } else if (cmd === "DEFINE") {
                defineName = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                Err = 0;
                skip_spaces();
                if (rtl.rcCharAt(d,i - 1) === "(") {
                  Param[0] = "";
                  Param[1] = "";
                  Param[2] = "";
                  Param[3] = "";
                  Param[4] = "";
                  Param[5] = "";
                  Param[6] = "";
                  Param[7] = "";
                  i += 1;
                  skip_spaces();
                  pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Line = rtl.rc(Line,-2147483648,2147483647);
                  if (!(pas.System.upcase(rtl.rcCharAt(d,i - 1)).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars)) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error, 'identifier' expected","","","","","","","","","",""]),pas.Messages.IMessage)));
                  do {
                    Err += 1;
                    if (Err > 8) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TooManyFormalParameters,"Too many formal parameters in " + defineName,"","","","","","","","","",""]),pas.Messages.IMessage)));
                    rtl.rcArrW(Param,Err - 1,pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                        return i;
                      }, set: function (v) {
                        rtl.rc(v,-2147483648,2147483647);
                        i = v;
                      }}));
                    for (var $l = 1, $end = Err - 1; $l <= $end; $l++) {
                      x = $l;
                      if (rtl.rcArrR(Param,x - 1) === rtl.rcArrR(Param,Err - 1)) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(13,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DuplicateIdentifier,"Duplicate identifier '" + rtl.rcArrR(Param,Err - 1) + "'","","","","","","","","","",""]),pas.Messages.IMessage)));
                    };
                    skip_spaces();
                    if (rtl.rcCharAt(d,i - 1) === ",") {
                      i += 1;
                      skip_spaces();
                      if (!(pas.System.upcase(rtl.rcCharAt(d,i - 1)).charCodeAt() in pas.StringUtilities.AllowLabelFirstChars)) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(14,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierExpected,"Syntax error, 'identifier' expected","","","","","","","","","",""]),pas.Messages.IMessage)));
                    };
                  } while (!(rtl.rcCharAt(d,i - 1) === ")"));
                  i += 1;
                  skip_spaces();
                };
                if ((rtl.rcCharAt(d,i - 1) === ":") && (rtl.rcCharAt(d,(i + 1) - 1) === "=")) {
                  i += 2;
                  skip_spaces();
                  pas.Common.AddDefine(defineName);
                  s = pas.System.Copy(d,i,d.length);
                  s = rtl.strSetLength(s,s.length - 1);
                  rtl.rcArrR(pas.Common.Defines,pas.Common.NumDefines - 1).Macro = s;
                  rtl.rcArrR(pas.Common.Defines,pas.Common.NumDefines - 1).Line = rtl.rc(DefineLine,-2147483648,2147483647);
                  if (Err > 0) rtl.rcArrR(pas.Common.Defines,pas.Common.NumDefines - 1).Param = Param.slice(0);
                } else pas.Common.AddDefine(defineName);
              } else if (cmd === "UNDEF") {
                defineName = pas.StringUtilities.GetLabelUpperCase(d,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }});
                RemoveDefine(defineName);
              } else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(15,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalCompilerDirective,"Illegal compiler directive $" + cmd + rtl.rcCharAt(d,i - 1),"","","","","","","","","",""]),pas.Messages.IMessage)));
            };
          } finally {
            $ir.free();
          };
        };
        function ReadSingleLineComment() {
          while (ch !== pas.StringUtilities.LF) InFile.Read({get: function () {
              return ch;
            }, set: function (v) {
              rtl.rcc(v,0,65535);
              ch = v;
            }});
        };
        function ReadChar(c) {
          rtl.rcc(c.get(),0,65535);
          var c2 = "\x00";
          var dir = false;
          var directive = "";
          var _line = 0;
          InFile.Read(c);
          if (c.get() === "(") {
            c2 = " ";
            InFile.Read({get: function () {
                return c2;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                c2 = v;
              }});
            if (c2 === "*") {
              do {
                c2 = rtl.rcc(c.get(),0,65535);
                InFile.Read(c);
                if (c.get() === pas.StringUtilities.LF) Line += 1;
              } while (!((c2 === "*") && (c.get() === ")")));
              InFile.Read(c);
            } else InFile.Seek2(InFile.FilePos() - 1);
          };
          if (c.get() === "{") {
            dir = false;
            directive = "";
            _line = rtl.rc(Line,-2147483648,2147483647);
            InFile.Read({get: function () {
                return c2;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                c2 = v;
              }});
            if (c2 === "$") {
              dir = true}
             else InFile.Seek2(InFile.FilePos() - 1);
            do {
              InFile.Read(c);
              if (dir) directive = directive + c.get();
              if (c.get() !== "}") if (AsmFound) $impl.SaveAsmBlock(c.get());
              if (c.get() === pas.StringUtilities.LF) Line += 1;
            } while (!(c.get() === "}"));
            if (dir) ReadDirective(directive,_line);
            InFile.Read(c);
          } else if (c.get() === "/") {
            InFile.Read({get: function () {
                return c2;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                c2 = v;
              }});
            if (c2 === "/") {
              ReadSingleLineComment()}
             else InFile.Seek2(InFile.FilePos() - 1);
          };
          if (c.get() === pas.StringUtilities.LF) Line += 1;
        };
        function ReadParameters() {
          var Result = "";
          var opn = 0;
          Result = "(";
          opn = 1;
          while (true) {
            ReadChar({get: function () {
                return ch;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                ch = v;
              }});
            if (ch === pas.StringUtilities.LF) Line += 1;
            if (ch === "(") opn += 1;
            if (ch === ")") opn -= 1;
            if (!(ch.charCodeAt() in rtl.createSet(pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) Result = Result + ch;
            if ((Result.length > 255) || (opn === 0)) break;
          };
          if (ch === ")") ReadChar({get: function () {
              return ch;
            }, set: function (v) {
              rtl.rcc(v,0,65535);
              ch = v;
            }});
          return Result;
        };
        function SafeReadChar(c) {
          rtl.rcc(c.get(),0,65535);
          var $ir = rtl.createIntfRefs();
          try {
            ReadChar(c);
            c.set(pas.System.upcase(c.get()));
            if (c.get().charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) Spaces += 1;
            if (!(c.get().charCodeAt() in rtl.createSet(39,32,35,126,36,pas.StringUtilities.TAB.charCodeAt(),pas.StringUtilities.LF.charCodeAt(),pas.StringUtilities.CR.charCodeAt(),123,null,65,90,95,null,48,57,61,46,44,59,40,41,42,47,43,45,58,62,60,94,64,91,93))) {
              pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Unexpected unknown character: " + c.get(),"","","","","","","","","",""]),pas.Messages.IMessage)));
            };
          } finally {
            $ir.free();
          };
        };
        function SkipWhiteSpace() {
          var $ir = rtl.createIntfRefs();
          try {
            SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                ch = v;
              }});
            while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                ch = v;
              }});
            if (!(ch.charCodeAt() in rtl.createSet(39,35))) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.SyntaxError,"Syntax error, 'string' expected but '" + ch + "' found","","","","","","","","","",""]),pas.Messages.IMessage)));
          } finally {
            $ir.free();
          };
        };
        function ReadFractionalPart(ch) {
          rtl.rcc(ch.get(),0,65535);
          var Result = "";
          Result = ".";
          while (pas.System.upcase(ch.get()).charCodeAt() in rtl.createSet(null,48,57)) {
            Result = Result + ch.get();
            SafeReadChar(ch);
          };
          if (pas.System.upcase(ch.get()).charCodeAt() in rtl.createSet(69)) {
            Result = Result + ch.get();
            SafeReadChar(ch);
            if (pas.System.upcase(ch.get()).charCodeAt() in rtl.createSet(null,48,57,45)) {
              Result = Result + ch.get();
              SafeReadChar(ch);
            };
            while (pas.System.upcase(ch.get()).charCodeAt() in rtl.createSet(null,48,57)) {
              Result = Result + ch.get();
              SafeReadChar(ch);
            };
          };
          return Result;
        };
        function TextInvers(p) {
          rtl.rc(p,-2147483648,2147483647);
          var i = 0;
          for (var $l = p, $end = Text.length; $l <= $end; $l++) {
            i = $l;
            if (Text.charCodeAt(i - 1) < 128) Text = rtl.rcSetCharAt(Text,i - 1,String.fromCharCode(Text.charCodeAt(i - 1) + 0x80));
          };
        };
        function TextInternal(p) {
          rtl.rc(p,-2147483648,2147483647);
          var i = 0;
          function ata2int(a) {
            rtl.rc(a,0,255);
            var Result = 0;
            Result = rtl.rc(a,0,255);
            var $tmp = a & 0x7f;
            if (($tmp >= 0) && ($tmp <= 31)) {
              Result += 64}
             else if (($tmp >= 32) && ($tmp <= 95)) Result -= 32;
            return Result;
          };
          function cbm(a) {
            rtl.rcc(a,0,65535);
            var Result = 0;
            Result = rtl.rc(a.charCodeAt(),0,255);
            var $tmp = a;
            if (($tmp >= "a") && ($tmp <= "z")) {
              Result -= 96}
             else if (($tmp >= "[") && ($tmp <= "_")) {
              Result -= 64}
             else if ($tmp === "`") {
              Result = 64}
             else if ($tmp === "@") Result = 0;
            return Result;
          };
          if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
            for (var $l = p, $end = Text.length; $l <= $end; $l++) {
              i = $l;
              Text = rtl.rcSetCharAt(Text,i - 1,String.fromCharCode(ata2int(Text.charCodeAt(i - 1))));
            };
          } else {
            for (var $l1 = p, $end1 = Text.length; $l1 <= $end1; $l1++) {
              i = $l1;
              Text = rtl.rcSetCharAt(Text,i - 1,String.fromCharCode(cbm(rtl.rcCharAt(Text,i - 1))));
            };
          };
        };
        function ReadNumber() {
          if (ch === "%") {
            SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                ch = v;
              }});
            while (ch.charCodeAt() in rtl.createSet(48,49)) {
              Num = Num + ch;
              SafeReadChar({get: function () {
                  return ch;
                }, set: function (v) {
                  rtl.rcc(v,0,65535);
                  ch = v;
                }});
            };
            if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok());
            Num = "%" + Num;
          } else if (ch === "$") {
            SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                ch = v;
              }});
            while (ch.charCodeAt() in pas.StringUtilities.AllowDigitChars) {
              Num = Num + ch;
              SafeReadChar({get: function () {
                  return ch;
                }, set: function (v) {
                  rtl.rcc(v,0,65535);
                  ch = v;
                }});
            };
            if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok());
            Num = "$" + Num;
          } else while (ch.charCodeAt() in rtl.createSet(null,48,57)) {
            Num = Num + ch;
            SafeReadChar({get: function () {
                return ch;
              }, set: function (v) {
                rtl.rcc(v,0,65535);
                ch = v;
              }});
          };
        };
        var $ir = rtl.createIntfRefs();
        try {
          InFile = rtl.setIntfL(InFile,pas.FileIO.TFileSystem.CreateBinaryFile(),true);
          InFile.Assign(filePath);
          InFile.Reset$1(1);
          Text = "";
          ch = " ";
          try {
            while (true) {
              OldNumTok = rtl.rc(pas.Common.NumTok(),-2147483648,2147483647);
              do {
                ReadChar({get: function () {
                    return ch;
                  }, set: function (v) {
                    rtl.rcc(v,0,65535);
                    ch = v;
                  }});
                if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) Spaces += 1;
              } while (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt(),pas.StringUtilities.LF.charCodeAt(),pas.StringUtilities.CR.charCodeAt(),123));
              ch = rtl.rcc(pas.System.upcase(ch),0,65535);
              Num = "";
              if (ch.charCodeAt() in rtl.createSet(null,48,57,36,37)) ReadNumber();
              if (Num.length > 0) {
                $Self.AddToken(pas.Tokens.TTokenKind.INTNUMBERTOK,ActiveSourceFile,Line,Num.length + Spaces,pas.StringUtilities.StrToInt(Num));
                Spaces = 0;
                if (ch === ".") {
                  SafeReadChar({get: function () {
                      return ch;
                    }, set: function (v) {
                      rtl.rcc(v,0,65535);
                      ch = v;
                    }});
                  if (ch === ".") {
                    InFile.Seek2(InFile.FilePos() - 1)}
                   else {
                    Frac = ReadFractionalPart({get: function () {
                        return ch;
                      }, set: function (v) {
                        rtl.rcc(v,0,65535);
                        ch = v;
                      }});
                    pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(pas.Tokens.TTokenKind.FRACNUMBERTOK,0,191);
                    if (Num.length > 17) {
                      pas.Common.TokenAt(pas.Common.NumTok()).FracValue = 0}
                     else pas.Common.TokenAt(pas.Common.NumTok()).FracValue = pas.SysUtils.StrToFloat(Num + Frac);
                    pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Column = rtl.rc(pas.Common.TokenAt(pas.Common.NumTok() - 1).SourceLocation.Column + Num.length + Frac.length + Spaces,-2147483648,2147483647);
                    Spaces = 0;
                  };
                };
                Num = "";
                Frac = "";
              };
              if (ch.charCodeAt() in rtl.createSet(null,65,90,95)) {
                Text = "";
                Err = 0;
                do {
                  Text = Text + ch;
                  ch2 = rtl.rcc(ch,0,65535);
                  SafeReadChar({get: function () {
                      return ch;
                    }, set: function (v) {
                      rtl.rcc(v,0,65535);
                      ch = v;
                    }});
                  if ((ch === ".") && (ch2 === ".")) {
                    ch = "\x00";
                    break;
                  };
                  Err += 1;
                } while (ch.charCodeAt() in rtl.createSet(null,65,90,95,null,48,57,46));
                if (rtl.rcCharAt(Text,Text.length - 1) === ".") {
                  Text = rtl.strSetLength(Text,Text.length - 1);
                  InFile.Seek2(InFile.FilePos() - 2);
                  Err -= 1;
                };
                if (Err > 255) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantStringTooLong,"Constant strings can't be longer than 255 chars","","","","","","","","","",""]),pas.Messages.IMessage)));
                if (Text.length > 0) {
                  CurToken = rtl.rc(pas.Tokens.GetStandardToken(Text),0,191);
                  im = rtl.rc(pas.Common.SearchDefine(Text),-2147483648,2147483647);
                  if ((im > 0) && (rtl.rcArrR(pas.Common.Defines,im - 1).Macro !== "")) {
                    Tmp = rtl.rc(InFile.FilePos(),-9007199254740991,9007199254740991);
                    ch2 = rtl.rcc(ch,0,65535);
                    Num = "";
                    if (rtl.rcArrR(pas.Common.Defines,im - 1).Param[0] !== "") {
                      while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) ReadChar({get: function () {
                          return ch;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch = v;
                        }});
                      if (ch === "(") Num = ReadParameters();
                    };
                    StrParams = rtl.arraySetLength(StrParams,"",1);
                    StrParams[0] = "";
                    pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Line = rtl.rc(Line,-2147483648,2147483647);
                    if (Num === "") {
                      InFile.Seek2(Tmp);
                      ch = rtl.rcc(ch2,0,65535);
                    } else {
                      StrParams = pas.StringUtilities.SplitStr(pas.System.Copy(Num,2,Num.length - 2),",");
                      if ((rtl.length(StrParams) - 1) > 8) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TooManyFormalParameters,"Too many formal parameters in " + Text,"","","","","","","","","",""]),pas.Messages.IMessage)));
                    };
                    if ((StrParams[0] !== "") && (rtl.rcArrR(pas.Common.Defines,im - 1).Param[0] === "")) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters","","","","","","","","","",""]),pas.Messages.IMessage)));
                    OldNumDefines = rtl.rc(pas.Common.NumDefines,-2147483648,2147483647);
                    Err = 1;
                    while ((rtl.rcArrR(rtl.rcArrR(pas.Common.Defines,im - 1).Param,Err - 1) !== "") && (Err <= 8)) {
                      if (rtl.rcArrR(StrParams,Err - 1) === "") pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ParameterMissing,"Parameter missing","","","","","","","","","",""]),pas.Messages.IMessage)));
                      pas.Common.AddDefine(rtl.rcArrR(rtl.rcArrR(pas.Common.Defines,im - 1).Param,Err - 1));
                      rtl.rcArrR(pas.Common.Defines,pas.Common.NumDefines - 1).Macro = rtl.rcArrR(StrParams,Err - 1);
                      rtl.rcArrR(pas.Common.Defines,pas.Common.NumDefines - 1).Line = rtl.rc(Line,-2147483648,2147483647);
                      Err += 1;
                    };
                    $Self.TokenizeMacro(rtl.rcArrR(pas.Common.Defines,im - 1).Macro,rtl.rcArrR(pas.Common.Defines,im - 1).Line,0);
                    pas.Common.NumDefines = rtl.rc(OldNumDefines,-2147483648,2147483647);
                    CurToken = rtl.rc(pas.Tokens.TTokenKind.MACRORELEASE,0,191);
                  } else {
                    if (CurToken === pas.Tokens.TTokenKind.TEXTTOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.TEXTFILETOK,0,191);
                    if (CurToken === pas.Tokens.TTokenKind.FLOATTOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.SINGLETOK,0,191);
                    if (CurToken === pas.Tokens.TTokenKind.FLOAT16TOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.HALFSINGLETOK,0,191);
                    if (CurToken === pas.Tokens.TTokenKind.SHORTSTRINGTOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.STRINGTOK,0,191);
                    if (CurToken === pas.Tokens.TTokenKind.EXTERNALTOK) ExternalFound = true;
                    $Self.AddToken(pas.Tokens.TTokenKind.UNTYPETOK,ActiveSourceFile,Line,Text.length + Spaces,0);
                    Spaces = 0;
                  };
                  if (CurToken === pas.Tokens.TTokenKind.ASMTOK) {
                    pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(CurToken,0,191);
                    pas.Common.TokenAt(pas.Common.NumTok()).Value = 0;
                    Tmp = rtl.rc(InFile.FilePos(),-9007199254740991,9007199254740991);
                    _line = rtl.rc(Line,-2147483648,2147483647);
                    do {
                      InFile.Read({get: function () {
                          return ch;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch = v;
                        }});
                      if (ch === pas.StringUtilities.LF) Line += 1;
                    } while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces);
                    if (ch !== "{") {
                      Line = rtl.rc(_line,-2147483648,2147483647);
                      pas.Common.TokenAt(pas.Common.NumTok()).Value = 1;
                      InFile.Seek2(Tmp - 1);
                      InFile.Read({get: function () {
                          return ch;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch = v;
                        }});
                      rtl.rcArrW(pas.Common.AsmBlock,pas.Common.AsmBlockIndex,"");
                      Text = "";
                      while (true) {
                        InFile.Read({get: function () {
                            return ch;
                          }, set: function (v) {
                            rtl.rcc(v,0,65535);
                            ch = v;
                          }});
                        $impl.SaveAsmBlock(ch);
                        Text = Text + pas.SysUtils.UpperCase(ch);
                        if (pas.System.Pos("END;",Text) > 0) {
                          rtl.rcArrW(pas.Common.AsmBlock,pas.Common.AsmBlockIndex,rtl.strSetLength(rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex),rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex).length - 4));
                          break;
                        };
                        if (ch.charCodeAt() in rtl.createSet(pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt())) {
                          if (ch === pas.StringUtilities.LF) Line += 1;
                          Text = "";
                        };
                      };
                    } else {
                      InFile.Seek2(InFile.FilePos() - 1);
                      AsmFound = true;
                      do {
                        ReadChar({get: function () {
                            return ch;
                          }, set: function (v) {
                            rtl.rcc(v,0,65535);
                            ch = v;
                          }});
                        if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) Spaces += 1;
                      } while (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt(),pas.StringUtilities.LF.charCodeAt(),pas.StringUtilities.CR.charCodeAt(),123,125));
                      AsmFound = false;
                    };
                    pas.Common.AsmBlockIndex += 1;
                    if (pas.Common.AsmBlockIndex > 4095) {
                      pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OutOfResources,"Out of resources, ASMBLOCK","","","","","","","","","",""]),pas.Messages.IMessage)));
                      pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
                    };
                  } else {
                    if (CurToken !== pas.Tokens.TTokenKind.MACRORELEASE) if (CurToken !== pas.Tokens.TTokenKind.UNTYPETOK) {
                      pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(CurToken,0,191);
                      if (CurToken === pas.Tokens.TTokenKind.USESTOK) UsesFound = true;
                      if (CurToken === pas.Tokens.TTokenKind.UNITTOK) UnitFound = true;
                      if (testSourceFile && (UnitFound === false)) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnitExpected,'"UNIT" expected but "' + pas.Tokens.GetTokenSpelling(CurToken) + '" found',"","","","","","","","","",""]),pas.Messages.IMessage)));
                    } else {
                      pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(pas.Tokens.TTokenKind.IDENTTOK,0,191);
                      pas.Common.TokenAt(pas.Common.NumTok()).Name = Text;
                    };
                  };
                  Text = "";
                };
              };
              if (ch.charCodeAt() in rtl.createSet(39,35)) {
                Text = "";
                yes = true;
                do {
                  var $tmp = ch;
                  if ($tmp === "'") {
                    if (yes) {
                      TextPos = rtl.rc(Text.length + 1,-2147483648,2147483647);
                      yes = false;
                    };
                    Spaces += 1;
                    do {
                      InFile.Read({get: function () {
                          return ch;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch = v;
                        }});
                      if (ch === pas.StringUtilities.LF) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.StringExceedsLine,"String exceeds line","","","","","","","","","",""]),pas.Messages.IMessage)));
                      if (!(ch.charCodeAt() in rtl.createSet(39,pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) {
                        Text = Text + ch}
                       else {
                        InFile.Read({get: function () {
                            return ch2;
                          }, set: function (v) {
                            rtl.rcc(v,0,65535);
                            ch2 = v;
                          }});
                        if (ch2 === "'") {
                          Text = Text + "'";
                          ch = "\x00";
                        } else InFile.Seek2(InFile.FilePos() - 1);
                      };
                    } while (!(ch === "'"));
                    Spaces += 1;
                    SafeReadChar({get: function () {
                        return ch;
                      }, set: function (v) {
                        rtl.rcc(v,0,65535);
                        ch = v;
                      }});
                    if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                      ch2 = rtl.rcc(ch,0,65535);
                      Err = rtl.rc(InFile.FilePos(),-2147483648,2147483647);
                      while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) InFile.Read({get: function () {
                          return ch2;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch2 = v;
                        }});
                      if (ch2.charCodeAt() in rtl.createSet(42,126,43)) {
                        ch = rtl.rcc(ch2,0,65535)}
                       else InFile.Seek2(Err);
                    };
                    if (ch === "*") {
                      Spaces += 1;
                      TextInvers(TextPos);
                      SafeReadChar({get: function () {
                          return ch;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch = v;
                        }});
                    };
                    if (ch === "~") {
                      Spaces += 1;
                      TextInternal(TextPos);
                      SafeReadChar({get: function () {
                          return ch;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch = v;
                        }});
                      if (ch === "*") {
                        Spaces += 1;
                        TextInvers(TextPos);
                        SafeReadChar({get: function () {
                            return ch;
                          }, set: function (v) {
                            rtl.rcc(v,0,65535);
                            ch = v;
                          }});
                      };
                    };
                    if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                      ch2 = rtl.rcc(ch,0,65535);
                      Err = rtl.rc(InFile.FilePos(),-2147483648,2147483647);
                      while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) InFile.Read({get: function () {
                          return ch2;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch2 = v;
                        }});
                      if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                        ch = rtl.rcc(ch2,0,65535)}
                       else InFile.Seek2(Err);
                    };
                    if (ch === "+") {
                      yes = true;
                      Spaces += 1;
                      SkipWhiteSpace();
                    };
                  } else if ($tmp === "#") {
                    SafeReadChar({get: function () {
                        return ch;
                      }, set: function (v) {
                        rtl.rcc(v,0,65535);
                        ch = v;
                      }});
                    Num = "";
                    ReadNumber();
                    if (Num.length > 0) {
                      Text = Text + String.fromCharCode(pas.StringUtilities.StrToInt(Num))}
                     else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantExpressionExpected,"Constant expression expected","","","","","","","","","",""]),pas.Messages.IMessage)));
                    if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                      ch2 = rtl.rcc(ch,0,65535);
                      Err = rtl.rc(InFile.FilePos(),-2147483648,2147483647);
                      while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) InFile.Read({get: function () {
                          return ch2;
                        }, set: function (v) {
                          rtl.rcc(v,0,65535);
                          ch2 = v;
                        }});
                      if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                        ch = rtl.rcc(ch2,0,65535)}
                       else InFile.Seek2(Err);
                    };
                    if (ch === "+") {
                      Spaces += 1;
                      SkipWhiteSpace();
                    };
                  };
                } while (ch.charCodeAt() in rtl.createSet(35,39));
                var $tmp1 = ch;
                if ($tmp1 === "*") {
                  TextInvers(TextPos);
                  SafeReadChar({get: function () {
                      return ch;
                    }, set: function (v) {
                      rtl.rcc(v,0,65535);
                      ch = v;
                    }});
                } else if ($tmp1 === "~") {
                  TextInternal(TextPos);
                  SafeReadChar({get: function () {
                      return ch;
                    }, set: function (v) {
                      rtl.rcc(v,0,65535);
                      ch = v;
                    }});
                };
                if (Text.length === 1) {
                  $Self.AddToken(pas.Tokens.TTokenKind.CHARLITERALTOK,ActiveSourceFile,Line,1 + Spaces,Text.charCodeAt(1 - 1));
                  Spaces = 0;
                } else {
                  $Self.AddToken(pas.Tokens.TTokenKind.STRINGLITERALTOK,ActiveSourceFile,Line,Text.length + Spaces,0);
                  Spaces = 0;
                  if (ExternalFound) {
                    pas.Common.DefineFilename(pas.Common.NumTok(),Text)}
                   else pas.Common.DefineStaticString(pas.Common.NumTok(),Text);
                };
                Text = "";
              };
              if (ch.charCodeAt() in rtl.createSet(61,44,59,40,41,42,47,43,45,94,64,91,93)) {
                $Self.AddToken(pas.Tokens.GetStandardToken(ch),ActiveSourceFile,Line,1 + Spaces,0);
                Spaces = 0;
                ExternalFound = false;
                if (UsesFound && (ch === ";")) if (UsesOn) ReadUses();
              };
              if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
                ch_ = rtl.rcc(ch,0,65535);
                Line2 = rtl.rc(Line,-2147483648,2147483647);
                SafeReadChar({get: function () {
                    return ch2;
                  }, set: function (v) {
                    rtl.rcc(v,0,65535);
                    ch2 = v;
                  }});
                ch = rtl.rcc(ch_,0,65535);
                if ((ch2 === "=") || ((ch === "<") && (ch2 === ">")) || ((ch === ".") && (ch2 === "."))) {
                  $Self.AddToken(pas.Tokens.GetStandardToken(ch + ch2),ActiveSourceFile,Line,2 + Spaces,0);
                  Spaces = 0;
                } else if ((ch === ".") && (ch2.charCodeAt() in rtl.createSet(null,48,57))) {
                  $Self.AddToken(pas.Tokens.TTokenKind.INTNUMBERTOK,ActiveSourceFile,Line,0,0);
                  Frac = ReadFractionalPart({get: function () {
                      return ch2;
                    }, set: function (v) {
                      rtl.rcc(v,0,65535);
                      ch2 = v;
                    }});
                  pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(pas.Tokens.TTokenKind.FRACNUMBERTOK,0,191);
                  pas.Common.TokenAt(pas.Common.NumTok()).FracValue = pas.SysUtils.StrToFloat("0" + Frac);
                  pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Column = rtl.rc(pas.Common.TokenAt(pas.Common.NumTok() - 1).SourceLocation.Column + Frac.length + Spaces,-2147483648,2147483647);
                  Spaces = 0;
                  Frac = "";
                  InFile.Seek2(InFile.FilePos() - 1);
                } else {
                  InFile.Seek2(InFile.FilePos() - 1);
                  Line = rtl.rc(Line2,-2147483648,2147483647);
                  if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
                    $Self.AddToken(pas.Tokens.GetStandardToken(ch),ActiveSourceFile,Line,1 + Spaces,0);
                    Spaces = 0;
                  } else {
                    pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Unexpected character '{0}' found. Expected one of '{1}.'",ch,":><.","","","","","","","",""]),pas.Messages.IMessage)));
                  };
                };
              };
              if (pas.Common.NumTok() === OldNumTok) {
                pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Illegal character '{0}' (${1}) found.",ch,pas.SysUtils.IntToHex(ch.charCodeAt(),2),"","","","","","","",""]),pas.Messages.IMessage)));
              };
            };
          } catch ($e) {
            if (pas.Utilities.THaltException.isPrototypeOf($e)) {
              var e = $e;
              pas.Utilities.RaiseHaltException(e.GetExitCode());
            } else if (pas.SysUtils.EInOutError.isPrototypeOf($e)) {
              var e = $e;
              if (Text !== "") {
                if (Text === "END.") {
                  $Self.AddToken(pas.Tokens.TTokenKind.ENDTOK,ActiveSourceFile,Line,3,0);
                  $Self.AddToken(pas.Tokens.TTokenKind.DOTTOK,ActiveSourceFile,Line,1,0);
                } else {
                  $Self.AddToken(pas.Tokens.GetStandardToken(Text),ActiveSourceFile,Line,Text.length + Spaces,0);
                  Spaces = 0;
                };
              };
            } else throw $e
          };
          InFile.Close();
        } finally {
          $ir.free();
          rtl._Release(InFile);
        };
      };
      function TokenizeUnit(a, testSourceFile) {
        var endLine = 0;
        ActiveSourceFile = a;
        Line = 1;
        Spaces = 0;
        if (ActiveSourceFile.UnitIndex > 1) $Self.AddToken(pas.Tokens.TTokenKind.UNITBEGINTOK,ActiveSourceFile,Line,0,0);
        UnitFound = false;
        Tokenize(ActiveSourceFile.Path,testSourceFile);
        if (ActiveSourceFile.UnitIndex > 1) {
          pas.Common.CheckTok(pas.Common.NumTok(),pas.Tokens.TTokenKind.DOTTOK);
          pas.Common.CheckTok(pas.Common.NumTok() - 1,pas.Tokens.TTokenKind.ENDTOK);
          endLine = rtl.rc(pas.Common.TokenAt(pas.Common.NumTok() - 1).SourceLocation.Line,-2147483648,2147483647);
          pas.Common.TokenList.RemoveToken();
          pas.Common.TokenList.RemoveToken();
          $Self.AddToken(pas.Tokens.TTokenKind.UNITENDTOK,ActiveSourceFile,endLine - 1,0,0);
        } else $Self.AddToken(pas.Tokens.TTokenKind.EOFTOK,ActiveSourceFile,Line,0,0);
      };
      AsmFound = false;
      UsesFound = false;
      UnitFound = false;
      ExternalFound = false;
      $impl.TokenizeProgramInitialization(programUnit);
      if (UsesOn) {
        TokenizeUnit(programUnit,false)}
       else for (var $l = pas.Common.SourceFileList.Size(); $l >= 1; $l--) {
        cnt = $l;
        if (pas.Common.SourceFileList.GetSourceFile(cnt).IsRelevant()) TokenizeUnit(pas.Common.SourceFileList.GetSourceFile(cnt),false);
      };
    };
    this.AddToken_ = function (Kind, UnitIndex, Line, Column, Value) {
      rtl.rc(Kind,0,191);
      rtl.rc(UnitIndex,-32768,32767);
      rtl.rc(Line,-2147483648,2147483647);
      rtl.rc(Column,-2147483648,2147483647);
      rtl.rc(Value,-2147483648,2147483647);
      pas.Common.TokenList.AddToken(Kind,pas.Common.SourceFileList.GetSourceFile(UnitIndex),Line,Column,Value);
    };
    this.AddToken = function (Kind, SourceFile, Line, Column, Value) {
      rtl.rc(Kind,0,191);
      rtl.rc(Line,-2147483648,2147483647);
      rtl.rc(Column,-2147483648,2147483647);
      rtl.rc(Value,-2147483648,2147483647);
      pas.Common.TokenList.AddToken(Kind,SourceFile,Line,Column,Value);
    };
    this.TokenizeMacro = function (a, Line, Spaces) {
      var $Self = this;
      rtl.rc(Line,-2147483648,2147483647);
      rtl.rc(Spaces,-2147483648,2147483647);
      var i = 0;
      var Text = "";
      var Num = "";
      var Frac = "";
      var Err = 0;
      var Line2 = 0;
      var TextPos = 0;
      var im = 0;
      var yes = false;
      var ch = "\x00";
      var ch2 = "\x00";
      var CurToken = 0;
      function SkipWhiteSpace() {
        var $ir = rtl.createIntfRefs();
        try {
          ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
          i += 1;
          while (ch.charCodeAt() in pas.StringUtilities.AllowWhiteSpaces) {
            ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
            i += 1;
          };
          if (!(ch.charCodeAt() in rtl.createSet(39,35))) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnexpectedCharacter,"Syntax error, 'string' expected but '" + ch + "' found","","","","","","","","","",""]),pas.Messages.IMessage)));
        } finally {
          $ir.free();
        };
      };
      function TextInvers(p) {
        rtl.rc(p,-2147483648,2147483647);
        var i = 0;
        for (var $l = p, $end = Text.length; $l <= $end; $l++) {
          i = $l;
          if (Text.charCodeAt(i - 1) < 128) Text = rtl.rcSetCharAt(Text,i - 1,String.fromCharCode(Text.charCodeAt(i - 1) + 0x80));
        };
      };
      function TextInternal(p) {
        rtl.rc(p,-2147483648,2147483647);
        var i = 0;
        function ata2int(a) {
          rtl.rc(a,0,255);
          var Result = 0;
          Result = rtl.rc(a,0,255);
          var $tmp = a & 0x7f;
          if (($tmp >= 0) && ($tmp <= 31)) {
            Result += 64}
           else if (($tmp >= 32) && ($tmp <= 95)) Result -= 32;
          return Result;
        };
        function cbm(a) {
          rtl.rcc(a,0,65535);
          var Result = 0;
          Result = rtl.rc(a.charCodeAt(),0,255);
          var $tmp = a;
          if (($tmp >= "a") && ($tmp <= "z")) {
            Result -= 96}
           else if (($tmp >= "[") && ($tmp <= "_")) {
            Result -= 64}
           else if ($tmp === "`") {
            Result = 64}
           else if ($tmp === "@") Result = 0;
          return Result;
        };
        if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
          for (var $l = p, $end = Text.length; $l <= $end; $l++) {
            i = $l;
            Text = rtl.rcSetCharAt(Text,i - 1,String.fromCharCode(ata2int(Text.charCodeAt(i - 1))));
          };
        } else {
          for (var $l1 = p, $end1 = Text.length; $l1 <= $end1; $l1++) {
            i = $l1;
            Text = rtl.rcSetCharAt(Text,i - 1,String.fromCharCode(cbm(rtl.rcCharAt(Text,i - 1))));
          };
        };
      };
      function ReadNumber() {
        if (ch === "%") {
          ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
          i += 1;
          while (ch.charCodeAt() in rtl.createSet(48,49)) {
            Num = Num + ch;
            ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
            i += 1;
          };
          if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok());
          Num = "%" + Num;
        } else if (ch === "$") {
          ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
          i += 1;
          while (pas.System.upcase(ch).charCodeAt() in pas.StringUtilities.AllowDigitChars) {
            Num = Num + ch;
            ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
            i += 1;
          };
          if (Num.length === 0) $impl.ErrorOrdinalExpExpected(pas.Common.NumTok());
          Num = "$" + Num;
        } else while (ch.charCodeAt() in rtl.createSet(null,48,57)) {
          Num = Num + ch;
          ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
          i += 1;
        };
      };
      var $ir = rtl.createIntfRefs();
      try {
        TextPos = 0;
        i = 1;
        while (i <= a.length) {
          while ((i <= a.length) && (rtl.rcCharAt(a,i - 1).charCodeAt() in pas.StringUtilities.AllowWhiteSpaces)) {
            if (rtl.rcCharAt(a,i - 1) === pas.StringUtilities.LF) {
              Line += 1;
              Spaces = 0;
            } else {
              Spaces += 1;
            };
            i += 1;
          };
          if (i <= a.length) {
            ch = rtl.rcc(pas.System.upcase(rtl.rcCharAt(a,i - 1)),0,65535);
            i += 1;
            Num = "";
            if (ch.charCodeAt() in rtl.createSet(null,48,57,36,37)) ReadNumber();
            if (Num.length > 0) {
              this.AddToken_(pas.Tokens.TTokenKind.INTNUMBERTOK,1,Line,Num.length + Spaces,pas.StringUtilities.StrToInt(Num));
              Spaces = 0;
              if (ch === ".") {
                ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                i += 1;
                if (ch === ".") {
                  i -= 1}
                 else {
                  Frac = $impl.ReadFractionalPart(a,{get: function () {
                      return i;
                    }, set: function (v) {
                      rtl.rc(v,-2147483648,2147483647);
                      i = v;
                    }},ch);
                  pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(pas.Tokens.TTokenKind.FRACNUMBERTOK,0,191);
                  pas.Common.TokenAt(pas.Common.NumTok()).FracValue = pas.SysUtils.StrToFloat(Num + Frac);
                  pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Column = rtl.rc(pas.Common.TokenAt(pas.Common.NumTok() - 1).SourceLocation.Column + Num.length + Frac.length + Spaces,-2147483648,2147483647);
                  Spaces = 0;
                };
              };
              Num = "";
              Frac = "";
            };
            if (ch.charCodeAt() in rtl.createSet(null,65,90,95)) {
              Text = "";
              Err = 0;
              TextPos = rtl.rc(i - 1,-2147483648,2147483647);
              while (ch.charCodeAt() in rtl.createSet(null,65,90,95,null,48,57,46)) {
                Text = Text + ch;
                Err += 1;
                ch = rtl.rcc(pas.System.upcase(rtl.rcCharAt(a,i - 1)),0,65535);
                i += 1;
              };
              if (Err > 255) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantStringTooLong,"Constant strings can't be longer than 255 chars","","","","","","","","","",""]),pas.Messages.IMessage)));
              if (Text.length > 0) {
                CurToken = rtl.rc(pas.Tokens.GetStandardToken(Text),0,191);
                im = rtl.rc(pas.Common.SearchDefine(Text),-2147483648,2147483647);
                if ((im > 0) && (rtl.rcArrR(pas.Common.Defines,im - 1).Macro !== "")) {
                  ch = "\x00";
                  i = rtl.rc(TextPos,-2147483648,2147483647);
                  if (rtl.rcArrR(pas.Common.Defines,im - 1).Macro === pas.System.Copy(a,i,Text.length)) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.RecursionInMacro,"Recursion in macros is not allowed","","","","","","","","","",""]),pas.Messages.IMessage)));
                  pas.System.Delete({get: function () {
                      return a;
                    }, set: function (v) {
                      a = v;
                    }},i,Text.length);
                  pas.System.Insert(rtl.rcArrR(pas.Common.Defines,im - 1).Macro,{get: function () {
                      return a;
                    }, set: function (v) {
                      a = v;
                    }},i);
                  CurToken = rtl.rc(pas.Tokens.TTokenKind.MACRORELEASE,0,191);
                } else {
                  if (CurToken === pas.Tokens.TTokenKind.TEXTTOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.TEXTFILETOK,0,191);
                  if (CurToken === pas.Tokens.TTokenKind.FLOATTOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.SINGLETOK,0,191);
                  if (CurToken === pas.Tokens.TTokenKind.FLOAT16TOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.HALFSINGLETOK,0,191);
                  if (CurToken === pas.Tokens.TTokenKind.SHORTSTRINGTOK) CurToken = rtl.rc(pas.Tokens.TTokenKind.STRINGTOK,0,191);
                  this.AddToken_(pas.Tokens.TTokenKind.UNTYPETOK,1,Line,Text.length + Spaces,0);
                  Spaces = 0;
                };
                if (CurToken !== pas.Tokens.TTokenKind.MACRORELEASE) if (CurToken !== pas.Tokens.TTokenKind.UNTYPETOK) {
                  pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(CurToken,0,191);
                } else {
                  pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(pas.Tokens.TTokenKind.IDENTTOK,0,191);
                  pas.Common.TokenAt(pas.Common.NumTok()).Name = Text;
                };
              };
              Text = "";
            };
            if (ch.charCodeAt() in rtl.createSet(39,35)) {
              Text = "";
              yes = true;
              do {
                var $tmp = ch;
                if ($tmp === "'") {
                  if (yes) {
                    TextPos = rtl.rc(Text.length + 1,-2147483648,2147483647);
                    yes = false;
                  };
                  Spaces += 1;
                  do {
                    ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                    i += 1;
                    if (ch === pas.StringUtilities.LF) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.StringExceedsLine,"String exceeds line","","","","","","","","","",""]),pas.Messages.IMessage)));
                    if (!(ch.charCodeAt() in rtl.createSet(39,pas.StringUtilities.CR.charCodeAt(),pas.StringUtilities.LF.charCodeAt()))) {
                      Text = Text + ch}
                     else {
                      ch2 = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                      i += 1;
                      if (ch2 === "'") {
                        Text = Text + "'";
                        ch = "\x00";
                      } else i -= 1;
                    };
                  } while (!(ch === "'"));
                  Spaces += 1;
                  ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                  i += 1;
                  if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                    ch2 = rtl.rcc(ch,0,65535);
                    Err = rtl.rc(i,-2147483648,2147483647);
                    while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                      ch2 = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                      i += 1;
                    };
                    if (ch2.charCodeAt() in rtl.createSet(42,126,43)) {
                      ch = rtl.rcc(ch2,0,65535)}
                     else i = rtl.rc(Err,-2147483648,2147483647);
                  };
                  if (ch === "*") {
                    Spaces += 1;
                    TextInvers(TextPos);
                    ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                    i += 1;
                  };
                  if (ch === "~") {
                    Spaces += 1;
                    TextInternal(TextPos);
                    ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                    i += 1;
                    if (ch === "*") {
                      Spaces += 1;
                      TextInvers(TextPos);
                      ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                      i += 1;
                    };
                  };
                  if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                    ch2 = rtl.rcc(ch,0,65535);
                    Err = rtl.rc(i,-2147483648,2147483647);
                    while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                      ch2 = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                      i += 1;
                    };
                    if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                      ch = rtl.rcc(ch2,0,65535)}
                     else i = rtl.rc(Err,-2147483648,2147483647);
                  };
                  if (ch === "+") {
                    yes = true;
                    Spaces += 1;
                    SkipWhiteSpace();
                  };
                } else if ($tmp === "#") {
                  ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                  i += 1;
                  Num = "";
                  ReadNumber();
                  if (Num.length > 0) {
                    Text = Text + String.fromCharCode(pas.StringUtilities.StrToInt(Num))}
                   else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ConstantExpressionExpected,"Constant expression expected","","","","","","","","","",""]),pas.Messages.IMessage)));
                  if (ch.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                    ch2 = rtl.rcc(ch,0,65535);
                    Err = rtl.rc(i,-2147483648,2147483647);
                    while (ch2.charCodeAt() in rtl.createSet(32,pas.StringUtilities.TAB.charCodeAt())) {
                      ch2 = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                      i += 1;
                    };
                    if (ch2.charCodeAt() in rtl.createSet(39,43)) {
                      ch = rtl.rcc(ch2,0,65535)}
                     else i = rtl.rc(Err,-2147483648,2147483647);
                  };
                  if (ch === "+") {
                    Spaces += 1;
                    SkipWhiteSpace();
                  };
                };
              } while (ch.charCodeAt() in rtl.createSet(35,39));
              var $tmp1 = ch;
              if ($tmp1 === "*") {
                TextInvers(TextPos);
                ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                i += 1;
              } else if ($tmp1 === "~") {
                TextInternal(TextPos);
                ch = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
                i += 1;
              };
              if (Text.length === 1) {
                this.AddToken_(pas.Tokens.TTokenKind.CHARLITERALTOK,1,Line,1 + Spaces,Text.charCodeAt(1 - 1));
                Spaces = 0;
              } else {
                this.AddToken_(pas.Tokens.TTokenKind.STRINGLITERALTOK,1,Line,Text.length + Spaces,0);
                Spaces = 0;
                pas.Common.DefineStaticString(pas.Common.NumTok(),Text);
              };
              Text = "";
            };
            if (ch.charCodeAt() in rtl.createSet(61,44,59,40,41,42,47,43,45,94,64,91,93)) {
              this.AddToken_(pas.Tokens.GetStandardToken(ch),1,Line,1 + Spaces,0);
              Spaces = 0;
            };
            if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
              Line2 = rtl.rc(Line,-2147483648,2147483647);
              ch2 = rtl.rcc(rtl.rcCharAt(a,i - 1),0,65535);
              i += 1;
              if ((ch2 === "=") || ((ch === "<") && (ch2 === ">")) || ((ch === ".") && (ch2 === "."))) {
                this.AddToken_(pas.Tokens.GetStandardToken(ch + ch2),1,Line,2 + Spaces,0);
                Spaces = 0;
              } else if ((ch === ".") && (ch2.charCodeAt() in rtl.createSet(null,48,57))) {
                this.AddToken_(pas.Tokens.TTokenKind.INTNUMBERTOK,1,Line,0,0);
                Frac = $impl.ReadFractionalPart(a,{get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }},ch2);
                pas.Common.TokenAt(pas.Common.NumTok()).Kind = rtl.rc(pas.Tokens.TTokenKind.FRACNUMBERTOK,0,191);
                pas.Common.TokenAt(pas.Common.NumTok()).FracValue = pas.SysUtils.StrToFloat("0" + Frac);
                pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Column = rtl.rc(pas.Common.TokenAt(pas.Common.NumTok() - 1).SourceLocation.Column + Frac.length + Spaces,-2147483648,2147483647);
                Spaces = 0;
                Frac = "";
                i -= 1;
              } else {
                i -= 1;
                Line = rtl.rc(Line2,-2147483648,2147483647);
                if (ch.charCodeAt() in rtl.createSet(58,62,60,46)) {
                  this.AddToken_(pas.Tokens.GetStandardToken(ch),1,Line,1 + Spaces,0);
                  Spaces = 0;
                };
              };
            };
          };
        };
      } finally {
        $ir.free();
      };
    };
    rtl.addIntf(this,$mod.IScanner);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$implcode = function () {
    $impl.ErrorOrdinalExpExpected = function (i) {
      rtl.rc(i,-2147483648,2147483647);
      var $ir = rtl.createIntfRefs();
      try {
        pas.Messages.Error$1(i,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.OrdinalExpExpected,"Ordinal expression expected.","","","","","","","","","",""]),pas.Messages.IMessage)));
      } finally {
        $ir.free();
      };
    };
    $impl.TokenizeProgramInitialization = function (ProgramUnit) {
      var i = 0;
      pas.Common.NumIdent_ = 0;
      pas.Common.TokenList.Clear();
      pas.Common.FastMul = rtl.rc(-1,-2147483648,2147483647);
      pas.Common.DataSegmentUse = false;
      pas.Common.LoopUnroll = false;
      pas.Common.PublicSection = true;
      pas.Common.ActiveSourceFile = ProgramUnit;
      pas.Common.WithName = rtl.arraySetLength(pas.Common.WithName,"",1);
      pas.Common.LinkObj = rtl.arraySetLength(pas.Common.LinkObj,"",1);
      pas.Common.resArray = rtl.arraySetLength(pas.Common.resArray,pas.CompilerTypes.TResource,1);
      pas.Messages.Initialize();
      pas.Common.NumBlocks = 0;
      pas.Common.BlockStackTop = 0;
      pas.Common.CodeSize = 0;
      pas.Common.CodePosStackTop = 0;
      pas.Common.CaseCnt = 0;
      pas.Common.IfCnt = 0;
      pas.Common.ShrShlCnt = 0;
      pas.Common.NumTypes = 0;
      pas.Common.run_func = 0;
      pas.Common.NumProc = 0;
      pas.Memory.ClearWordMemory({p: pas.Common, get: function () {
          return this.p.StaticStringData;
        }, set: function (v) {
          this.p.StaticStringData = v;
        }});
      pas.Common.NumStaticStrChars = 0;
      pas.Common.IfdefLevel = 0;
      pas.Common.AsmBlockIndex = 0;
      pas.Common.NumDefines = rtl.rc(pas.Common.AddDefines,-2147483648,2147483647);
      pas.Optimize.ResetOpty();
      pas.Common.optyFOR0 = "";
      pas.Common.optyFOR1 = "";
      pas.Common.optyFOR2 = "";
      pas.Common.optyFOR3 = "";
      for (i = 0; i <= 4095; i++) rtl.rcArrW(pas.Common.AsmBlock,i,"");
    };
    $impl.AddResource = function (fnam) {
      var i = 0;
      var j = 0;
      var t = null;
      var res = pas.CompilerTypes.TResource.$new();
      var s = "";
      var tmp = "";
      var $ir = rtl.createIntfRefs();
      try {
        t = rtl.setIntfL(t,pas.FileIO.TFileSystem.CreateTextFile(),true);
        t.Assign(fnam);
        t.Reset();
        try {
          while (!t.EOF()) {
            s = "";
            t.ReadLn({get: function () {
                return s;
              }, set: function (v) {
                s = v;
              }});
            i = 1;
            pas.StringUtilities.SkipWhitespaces(s,{get: function () {
                return i;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                i = v;
              }});
            if ((s.length > (i - 1)) && !(rtl.rcCharAt(s,i - 1).charCodeAt() in rtl.createSet(35,59))) {
              res.resName = pas.StringUtilities.GetLabelUpperCase(s,{get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }});
              res.resType = pas.StringUtilities.GetLabelUpperCase(s,{get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }});
              res.resFile = pas.StringUtilities.GetFilePath(s,{get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }});
              if ((res.resType === "RCDATA") || (res.resType === "RCASM") || (res.resType === "DOSFILE") || (res.resType === "RELOC") || (res.resType === "RMT") || (res.resType === "MPT") || (res.resType === "CMC") || (res.resType === "RMTPLAY") || (res.resType === "RMTPLAY2") || (res.resType === "RMTPLAYV") || (res.resType === "MPTPLAY") || (res.resType === "CMCPLAY") || (res.resType === "EXTMEM") || (res.resType === "XBMP") || (res.resType === "SAPR") || (res.resType === "SAPRPLAY") || (res.resType === "PP") || (res.resType === "LIBRARY") || (res.resType === "MD1PLAY") || (res.resType === "MD1")) {}
              else pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UndefinedResourceType,"Undefined resource type: Type = '" + res.resType + "', Name = '" + res.resName + "'","","","","","","","","","",""]),pas.Messages.IMessage)));
              if ((res.resFile !== "") && (pas.Common.unitPathList.FindFile(res.resFile) === "")) {
                pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.ResourceFileNotFound,"Cannot find resource file '{0}' for resource {1} of type {2} unit path '{3}'.",res.resFile,res.resName,pas.Common.unitPathList.ToString(),"","","","","","",""]),pas.Messages.IMessage)));
              };
              for (j = 1; j <= 8; j++) {
                if (i <= s.length) {
                  if (rtl.rcCharAt(s,i - 1).charCodeAt() in rtl.createSet(39,34)) {
                    tmp = pas.StringUtilities.GetStringUpperCase(s,{get: function () {
                        return i;
                      }, set: function (v) {
                        rtl.rc(v,-2147483648,2147483647);
                        i = v;
                      }})}
                   else tmp = pas.StringUtilities.GetNumber(s,{get: function () {
                      return i;
                    }, set: function (v) {
                      rtl.rc(v,-2147483648,2147483647);
                      i = v;
                    }});
                } else {
                  tmp = "";
                };
                if (tmp === "") tmp = "0";
                rtl.rcArrW(res.resPar,j - 1,tmp);
              };
              for (var $l = rtl.length(pas.Common.resArray) - 1 - 1; $l >= 0; $l--) {
                j = $l;
                if (rtl.rcArrR(pas.Common.resArray,j).resName === res.resName) pas.Messages.Error$1(pas.Common.NumTok(),$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.DuplicateResource,"Duplicate resource: Type = " + res.resType + ", Name = '" + res.resName + "'","","","","","","","","","",""]),pas.Messages.IMessage)));
              };
              j = rtl.rc(rtl.length(pas.Common.resArray) - 1,-2147483648,2147483647);
              rtl.rcArrR(pas.Common.resArray,j).$assign(res);
              pas.Common.resArray = rtl.arraySetLength(pas.Common.resArray,pas.CompilerTypes.TResource,j + 2);
            };
          };
        } finally {
          t.Close();
        };
      } finally {
        $ir.free();
        rtl._Release(t);
      };
    };
    $impl.SaveAsmBlock = function (a) {
      rtl.rcc(a,0,65535);
      rtl.rcArrW(pas.Common.AsmBlock,pas.Common.AsmBlockIndex,rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex) + a);
    };
    $impl.ReadFractionalPart = function (a, i, ch) {
      rtl.rc(i.get(),-2147483648,2147483647);
      rtl.rcc(ch,0,65535);
      var Result = "";
      Result = ".";
      Result = ".";
      while (pas.System.upcase(ch).charCodeAt() in rtl.createSet(null,48,57)) {
        Result = Result + ch;
        ch = rtl.rcc(rtl.rcCharAt(a,i.get() - 1),0,65535);
        i.set(i.get() + 1);
      };
      if (pas.System.upcase(ch).charCodeAt() in rtl.createSet(69)) {
        Result = Result + ch;
        ch = rtl.rcc(rtl.rcCharAt(a,i.get() - 1),0,65535);
        i.set(i.get() + 1);
        if (pas.System.upcase(ch).charCodeAt() in rtl.createSet(null,48,57,45)) {
          Result = Result + ch;
          ch = rtl.rcc(rtl.rcCharAt(a,i.get() - 1),0,65535);
          i.set(i.get() + 1);
        };
        while (pas.System.upcase(ch).charCodeAt() in rtl.createSet(null,48,57)) {
          Result = Result + ch;
          ch = rtl.rcc(rtl.rcCharAt(a,i.get() - 1),0,65535);
          i.set(i.get() + 1);
        };
      };
      return Result;
    };
  };
},["Classes","SysUtils","Common","Datatypes","Messages","FileIO","Memory","Optimize","StringUtilities","Targets","Utilities"]);
rtl.module("Compiler",["System","FileIO","CompilerTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.CompilerTitle = function () {
    var Result = "";
    Result = "Mad Pascal Compiler version " + pas.Common.title + " [" + "2025/10/6" + "] for MOS 6502 CPU";
    return Result;
  };
  this.Main = function (programUnit, unitPathList) {
    var scanner = null;
    var i = 0;
    try {
      pas.Common.unitPathList = unitPathList;
      rtl.setIntfP($impl,"evaluationContext",rtl.queryIntfT($impl.TEvaluationContext.$create("Create$1"),pas.MathEvaluate.IEvaluationContext),true);
      rtl.setIntfP(pas.Debugger,"debugger",rtl.queryIntfT(pas.Debugger.TDebugger.$create("Create$1"),pas.Debugger.IDebugger),true);
      pas.Common.TokenList = pas.CompilerTypes.TTokenList.$create("Create$1");
      pas.Common.IdentifierList = pas.CompilerTypes.TIdentifierList.$create("Create$1");
      for (i = 1; i <= 16384; i++) pas.Common.IdentifierList.AddIdentifier();
      pas.Common.IFTmpPosStack = rtl.arraySetLength(pas.Common.IFTmpPosStack,0,1);
      pas.Common.Defines[0].Name = pas.Utilities.AnsiUpperCase(pas.Common.target.Name);
      pas.Console.TextColor(15);
      pas.System.Writeln("Compiling " + programUnit.Name);
      scanner = rtl.setIntfL(scanner,rtl.queryIntfT(pas.Scanner.TScanner.$create("Create"),pas.Scanner.IScanner),true);
      scanner.TokenizeProgram(programUnit,true);
      if (pas.Common.NumTok() === 0) pas.Messages.Error(1,"");
      pas.Common.SourceFileList.AddUnit(pas.CompilerTypes.TSourceFileType.UNIT_FILE,"SYSTEM",pas.Common.FindFile("system.pas","unit"));
      scanner.TokenizeProgram(programUnit,false);
      pas.Common.NumStaticStrCharsTmp = rtl.rc(pas.Common.NumStaticStrChars,-2147483648,2147483647);
      $impl.InitializeIdentifiers();
      pas.Common.NumPredefIdent = rtl.rc(pas.Common.NumIdent(),-2147483648,2147483647);
      $impl.CompileProgram(pas.CompilerTypes.TPass.CALL_DETERMINATION);
      pas.Optimize.OptimizeProgram(pas.Parser.GetIdentIndex("MAIN"));
      pas.Common.NumIdent_ = rtl.rc(pas.Common.NumPredefIdent,-2147483648,2147483647);
      pas.Memory.ClearWordMemory({p: pas.Common, get: function () {
          return this.p._DataSegment;
        }, set: function (v) {
          this.p._DataSegment = v;
        }});
      pas.Common.SourceFileList.ClearAllowedUnitNames();
      pas.Common.NumBlocks = 0;
      pas.Common.BlockStackTop = 0;
      pas.Common.CodeSize = 0;
      pas.Common.CodePosStackTop = 0;
      pas.Common.CaseCnt = 0;
      pas.Common.IfCnt = 0;
      pas.Common.ShrShlCnt = 0;
      pas.Common.NumTypes = 0;
      pas.Common.run_func = 0;
      pas.Common.NumProc = 0;
      pas.Common.NumStaticStrChars = rtl.rc(pas.Common.NumStaticStrCharsTmp,-2147483648,2147483647);
      pas.Optimize.ResetOpty();
      pas.Common.optyFOR0 = "";
      pas.Common.optyFOR1 = "";
      pas.Common.optyFOR2 = "";
      pas.Common.optyFOR3 = "";
      pas.Common.LIBRARY_USE = pas.Common.LIBRARYTOK_USE;
      pas.Common.LIBRARYTOK_USE = false;
      pas.Common.PROGRAMTOK_USE = false;
      pas.Common.INTERFACETOK_USE = false;
      pas.Common.PublicSection = true;
      pas.Common.iOut = rtl.rc(-1,-2147483648,2147483647);
      pas.Common.outTmp = "";
      pas.Common.OptimizeBuf = rtl.arraySetLength(pas.Common.OptimizeBuf,"",1);
      $impl.CompileProgram(pas.CompilerTypes.TPass.CODE_GENERATION);
    } finally {
      rtl._Release(scanner);
    };
  };
  this.Free = function () {
    pas.Common.TokenList.$destroy("Free$1");
    pas.Common.TokenList = null;
    pas.Common.IdentifierList.$destroy("Free$1");
    pas.Common.IdentifierList = null;
    pas.Common.IFTmpPosStack = rtl.arraySetLength(pas.Common.IFTmpPosStack,0,0);
    rtl.setIntfP(pas.Debugger,"debugger",null);
    rtl.setIntfP($impl,"evaluationContext",null);
    rtl.free(pas.Common,"unitPathList");
    pas.Common.unitPathList = null;
  };
  $mod.$implcode = function () {
    $impl.evaluationContext = null;
    rtl.createClass($impl,"TEvaluationContext",pas.System.TInterfacedObject,function () {
      this.Create$1 = function () {
        return this;
      };
      this.GetConstantName = function (expression, index) {
        rtl.rc(index.get(),-2147483648,2147483647);
        var Result = "";
        Result = pas.StringUtilities.GetConstantUpperCase(expression,index);
        return Result;
      };
      this.GetConstantValue = function (constantName, constantValue) {
        rtl.rc(constantValue.get(),-2147483648,2147483647);
        var Result = false;
        var identTemp = 0;
        identTemp = rtl.rc(pas.Parser.GetIdentIndex(constantName),-2147483648,2147483647);
        if (identTemp > 0) {
          constantValue.set(pas.Common.IdentifierAt(identTemp).Value);
          Result = true;
        } else {
          constantValue.set(0);
          Result = false;
        };
        return Result;
      };
      rtl.addIntf(this,pas.MathEvaluate.IEvaluationContext);
      rtl.addIntf(this,pas.System.IUnknown);
    });
    $impl.GetIdentResult = function (ProcAsBlock) {
      rtl.rc(ProcAsBlock,-2147483648,2147483647);
      var Result = 0;
      var IdentIndex = 0;
      Result = 0;
      for (var $l = 1, $end = pas.Common.NumIdent(); $l <= $end; $l++) {
        IdentIndex = $l;
        if ((pas.Common.IdentifierAt(IdentIndex).Block === ProcAsBlock) && (pas.Common.IdentifierAt(IdentIndex).Name === "RESULT")) return IdentIndex;
      };
      return Result;
    };
    $impl.GetOverloadName = function (IdentIndex) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var Result = "";
      var ParamIndex = 0;
      Result = "@" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).NumParams,2);
      if (pas.Common.IdentifierAt(IdentIndex).NumParams > 0) for (var $l = pas.Common.IdentifierAt(IdentIndex).NumParams; $l >= 1; $l--) {
        ParamIndex = $l;
        Result = Result + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).PassMethod,2) + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).DataType,2) + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).AllocElementType,2) + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).NumAllocElements,8 * ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).NumAllocElements !== 0) + 0));
      };
      return Result;
    };
    $impl.GetLocalName = function (IdentIndex, a) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var Result = "";
      if ((pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex > 1) && (pas.Common.IdentifierAt(IdentIndex).SourceFile !== pas.Common.ActiveSourceFile) && pas.Common.IdentifierAt(IdentIndex).Section) {
        Result = pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + "." + a + pas.Common.IdentifierAt(IdentIndex).Name}
       else Result = a + pas.Common.IdentifierAt(IdentIndex).Name;
      return Result;
    };
    $impl.ExtractName = function (IdentIndex, a) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var Result = "";
      var lab = "";
      lab = pas.Common.IdentifierAt(IdentIndex).Name;
      if ((lab !== a) && (pas.System.Pos(pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + ".",a) === 1)) {
        lab = pas.Common.IdentifierAt(IdentIndex).Name;
        if (pas.SysUtils.TStringHelper.IndexOf.call({get: function () {
            return lab;
          }, set: function (v) {
            lab = v;
          }},".") > 0) lab = pas.System.Copy(lab,1,pas.SysUtils.TStringHelper.LastIndexOf.call({get: function () {
            return lab;
          }, set: function (v) {
            lab = v;
          }},"."));
        if (pas.System.Pos(pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + ".adr.",a) === 1) {
          Result = pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + ".adr." + lab}
         else Result = pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + "." + lab;
      } else Result = pas.System.Copy(a,1,pas.SysUtils.TStringHelper.IndexOf.call({get: function () {
          return a;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},"."));
      return Result;
    };
    $impl.TestName = function (IdentIndex, a) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var Result = false;
      if ((IdentIndex > 0) && (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex > 1) && (pas.System.Pos(pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + ".",a) === 1)) {
        a = pas.System.Copy(a,pas.SysUtils.TStringHelper.IndexOf.call({get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }},".") + 2,a.length);
      };
      Result = pas.System.Pos(".",a) > 0;
      return Result;
    };
    var TBest = rtl.recNewT(null,"",function () {
      this.hit = 0;
      this.IdentIndex = 0;
      this.b = 0;
      this.$eq = function (b) {
        return (this.hit === b.hit) && (this.IdentIndex === b.IdentIndex) && (this.b === b.b);
      };
      this.$assign = function (s) {
        this.hit = s.hit;
        this.IdentIndex = s.IdentIndex;
        this.b = s.b;
        return this;
      };
    });
    $impl.GetIdentProc = function (S, ProcIdentIndex, Param, NumParams) {
      rtl.rc(ProcIdentIndex,-2147483648,2147483647);
      rtl.rc(NumParams,-2147483648,2147483647);
      var Result = 0;
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      var i = 0;
      var k = 0;
      var b = 0;
      var hits = 0;
      var m = 0;
      var df = 0;
      var yes = false;
      var best = [];
      Result = 0;
      best = [];
      best = rtl.arraySetLength(best,TBest,1);
      best[0].$assign(TBest.$new());
      for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
        BlockStackIndex = $l;
        for (var $l1 = pas.Common.NumIdent(); $l1 >= 1; $l1--) {
          IdentIndex = $l1;
          if ((pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) && (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex === pas.Common.IdentifierAt(ProcIdentIndex).SourceFile.UnitIndex) && (S === pas.Common.IdentifierAt(IdentIndex).Name) && (rtl.rcArrR(pas.Common.BlockStack,BlockStackIndex) === pas.Common.IdentifierAt(IdentIndex).Block) && (pas.Common.IdentifierAt(IdentIndex).NumParams === NumParams)) {
            hits = 0;
            for (var $l2 = 1, $end = NumParams; $l2 <= $end; $l2++) {
              i = $l2;
              if (((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType in pas.Datatypes.UnsignedOrdinalTypes) && (rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.UnsignedOrdinalTypes) && (pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType) >= pas.Datatypes.GetDataSize(rtl.rcArrR(Param,i - 1).DataType))) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType in pas.Datatypes.SignedOrdinalTypes) && (rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.SignedOrdinalTypes) && (pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType) >= pas.Datatypes.GetDataSize(rtl.rcArrR(Param,i - 1).DataType))) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType in pas.Datatypes.SignedOrdinalTypes) && (rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.UnsignedOrdinalTypes) && (pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType) >= pas.Datatypes.GetDataSize(rtl.rcArrR(Param,i - 1).DataType))) || (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType === rtl.rcArrR(Param,i - 1).DataType) || ((rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.Pointers) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType === rtl.rcArrR(Param,i - 1).AllocElementType)) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING))) {
                if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) {
                  var $tmp = rtl.rcArrR(Param,i - 1).AllocElementType;
                  if (($tmp === pas.Tokens.TTokenKind.PROCEDURETOK) || ($tmp === pas.Tokens.TTokenKind.FUNCTIONTOK)) {
                    yes = pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(rtl.lw(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).NumAllocElements >>> 16),4))).NumParams === pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,i - 1).Name)).NumParams}
                   else if ($tmp === pas.Tokens.TTokenKind.PROCVARTOK) {
                    yes = pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(rtl.lw(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).NumAllocElements >>> 16),4))).NumParams === pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(rtl.lw(rtl.rcArrR(Param,i - 1).NumAllocElements >>> 16),4))).NumParams}
                   else {
                    yes = false;
                  };
                  if (yes) hits += 1;
                } else hits += 1;
                if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(Param,i - 1).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(Param,i - 1).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(Param,i - 1).NumAllocElements > 0)) {
                  hits += 1;
                };
                if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType in pas.Datatypes.IntegerTypes) && (rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.IntegerTypes)) {
                  if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType in pas.Datatypes.UnsignedOrdinalTypes) {
                    b = rtl.rc(pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType),-2147483648,2147483647);
                    k = rtl.rc(pas.Datatypes.GetDataSize(rtl.rcArrR(Param,i - 1).DataType),-2147483648,2147483647);
                    if (b >= k) {
                      df = rtl.rc(4 - Math.abs(b - k),0,255);
                      if (rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.UnsignedOrdinalTypes) df += 2;
                      hits += df;
                    };
                  } else {
                    b = rtl.rc(pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType),-2147483648,2147483647);
                    k = rtl.rc(pas.Datatypes.GetDataSize(rtl.rcArrR(Param,i - 1).DataType),-2147483648,2147483647);
                    if (rtl.rcArrR(Param,i - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.BYTETOK,pas.Tokens.TTokenKind.WORDTOK)) k += 1;
                    if (b >= k) {
                      df = rtl.rc(4 - Math.abs(b - k),0,255);
                      if (rtl.rcArrR(Param,i - 1).DataType in pas.Datatypes.SignedOrdinalTypes) df += 2;
                      hits += df;
                    };
                  };
                };
                if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType === rtl.rcArrR(Param,i - 1).DataType) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType === rtl.rcArrR(Param,i - 1).AllocElementType)) {
                  hits += 1;
                };
                if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).DataType === rtl.rcArrR(Param,i - 1).DataType) && ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType === rtl.rcArrR(Param,i - 1).AllocElementType) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(Param,i - 1).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).NumAllocElements === rtl.rcArrR(Param,i - 1).NumAllocElements)) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(Param,i - 1).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,i - 1).NumAllocElements === rtl.rcArrR(Param,i - 1).NumAllocElements)))) {
                  hits += 1;
                };
              };
            };
            k = rtl.rc(rtl.length(best) - 1,-2147483648,2147483647);
            rtl.rcArrR(best,k).IdentIndex = rtl.rc(IdentIndex,-2147483648,2147483647);
            rtl.rcArrR(best,k).hit = rtl.rc(hits,0,4294967295);
            rtl.rcArrR(best,k).b = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Block,-2147483648,2147483647);
            best = rtl.arraySetLength(best,TBest,k + 2);
          };
        };
      };
      m = 0;
      b = 0;
      if ((rtl.length(best) - 1) === 1) {
        Result = rtl.rc(best[0].IdentIndex,-2147483648,2147483647)}
       else {
        if (NumParams === 0) {
          for (var $l3 = 0, $end1 = rtl.length(best) - 1 - 1; $l3 <= $end1; $l3++) {
            i = $l3;
            if (rtl.rcArrR(best,i).b >= b) {
              b = rtl.rc(rtl.rcArrR(best,i).b,-2147483648,2147483647);
              Result = rtl.rc(rtl.rcArrR(best,i).IdentIndex,-2147483648,2147483647);
            };
          };
        } else for (var $l4 = 0, $end2 = rtl.length(best) - 1 - 1; $l4 <= $end2; $l4++) {
          i = $l4;
          if ((rtl.rcArrR(best,i).hit > m) && (rtl.rcArrR(best,i).b >= b)) {
            m = rtl.rc(rtl.rcArrR(best,i).hit,0,4294967295);
            b = rtl.rc(rtl.rcArrR(best,i).b,-2147483648,2147483647);
            Result = rtl.rc(rtl.rcArrR(best,i).IdentIndex,-2147483648,2147483647);
          };
        };
      };
      best = rtl.arraySetLength(best,TBest,0);
      return Result;
    };
    var TOV = rtl.recNewT(null,"",function () {
      this.i = 0;
      this.j = 0;
      this.b = 0;
      this.SourceFile = null;
      this.$eq = function (b) {
        return (this.i === b.i) && (this.j === b.j) && (this.b === b.b) && (this.SourceFile === b.SourceFile);
      };
      this.$assign = function (s) {
        this.i = s.i;
        this.j = s.j;
        this.b = s.b;
        this.SourceFile = s.SourceFile;
        return this;
      };
    });
    var TL = rtl.recNewT(null,"",function () {
      this.SourceFile = null;
      this.b = 0;
      this.NumParams = 0;
      this.$new = function () {
        var r = Object.create(this);
        r.Param = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
        return r;
      };
      this.$eq = function (b) {
        return (this.SourceFile === b.SourceFile) && (this.b === b.b) && rtl.arrayEq(this.Param,b.Param) && (this.NumParams === b.NumParams);
      };
      this.$assign = function (s) {
        this.SourceFile = s.SourceFile;
        this.b = s.b;
        this.Param = pas.CompilerTypes.TParamList$clone(s.Param);
        this.NumParams = s.NumParams;
        return this;
      };
    });
    $impl.TestIdentProc = function (x, S) {
      rtl.rc(x,-2147483648,2147483647);
      var IdentIndex = 0;
      var BlockStackIndex = 0;
      var i = 0;
      var k = 0;
      var m = 0;
      var ok = false;
      var ov = [];
      var l = [];
      function addOverlay(SourceFile, Block, ovr) {
        rtl.rc(Block,-2147483648,2147483647);
        var i = 0;
        for (var $l = rtl.length(ov) - 1 - 1; $l >= 0; $l--) {
          i = $l;
          if ((rtl.rcArrR(ov,i).SourceFile.UnitIndex === SourceFile.UnitIndex) && (rtl.rcArrR(ov,i).b === Block)) {
            rtl.rcArrR(ov,i).i += ovr + 0;
            rtl.rcArrR(ov,i).j += 1;
            return;
          };
        };
        i = rtl.rc(rtl.length(ov) - 1,-2147483648,2147483647);
        rtl.rcArrR(ov,i).SourceFile = SourceFile;
        rtl.rcArrR(ov,i).b = rtl.rc(Block,-2147483648,2147483647);
        rtl.rcArrR(ov,i).i = rtl.rc(ovr + 0,-2147483648,2147483647);
        rtl.rcArrR(ov,i).j = 1;
        ov = rtl.arraySetLength(ov,TOV,i + 2);
      };
      var $ir = rtl.createIntfRefs();
      try {
        ov = [];
        ov = rtl.arraySetLength(ov,TOV,1);
        l = [];
        l = rtl.arraySetLength(l,TL,1);
        for (var $l = pas.Common.BlockStackTop; $l >= 0; $l--) {
          BlockStackIndex = $l;
          for (var $l1 = pas.Common.NumIdent(); $l1 >= 1; $l1--) {
            IdentIndex = $l1;
            if ((pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) && (S === pas.Common.IdentifierAt(IdentIndex).Name) && (rtl.rcArrR(pas.Common.BlockStack,BlockStackIndex) === pas.Common.IdentifierAt(IdentIndex).Block)) {
              for (var $l2 = 0, $end = rtl.length(l) - 1 - 1; $l2 <= $end; $l2++) {
                k = $l2;
                if ((pas.Common.IdentifierAt(IdentIndex).NumParams === rtl.rcArrR(l,k).NumParams) && (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex === rtl.rcArrR(l,k).SourceFile.UnitIndex) && (pas.Common.IdentifierAt(IdentIndex).Block === rtl.rcArrR(l,k).b)) {
                  ok = true;
                  for (var $l3 = 1, $end1 = rtl.rcArrR(l,k).NumParams; $l3 <= $end1; $l3++) {
                    m = $l3;
                    if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,m - 1).DataType !== rtl.rcArrR(rtl.rcArrR(l,k).Param,m - 1).DataType) || (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,m - 1).AllocElementType !== rtl.rcArrR(rtl.rcArrR(l,k).Param,m - 1).AllocElementType)) {
                      ok = false;
                      break;
                    };
                    if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,m - 1).DataType === rtl.rcArrR(rtl.rcArrR(l,k).Param,m - 1).DataType) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,m - 1).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) && (rtl.rcArrR(rtl.rcArrR(l,k).Param,m - 1).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) && (rtl.lw(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,m - 1).NumAllocElements >>> 16) !== rtl.lw(rtl.rcArrR(rtl.rcArrR(l,k).Param,m - 1).NumAllocElements >>> 16))) {
                      ok = false;
                      break;
                    };
                  };
                  if (ok) pas.Messages.Error$1(x,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongParameterList,"Overloaded functions '" + pas.Common.IdentifierAt(IdentIndex).Name + "' have the same parameter list","","","","","","","","","",""]),pas.Messages.IMessage)));
                };
              };
              k = rtl.rc(rtl.length(l) - 1,-2147483648,2147483647);
              rtl.rcArrR(l,k).NumParams = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumParams,0,65535);
              rtl.rcArrR(l,k).Param = pas.Common.IdentifierAt(IdentIndex).Param;
              rtl.rcArrR(l,k).SourceFile = pas.Common.IdentifierAt(IdentIndex).SourceFile;
              rtl.rcArrR(l,k).b = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Block,-2147483648,2147483647);
              l = rtl.arraySetLength(l,TL,k + 2);
              addOverlay(pas.Common.IdentifierAt(IdentIndex).SourceFile,pas.Common.IdentifierAt(IdentIndex).Block,pas.Common.IdentifierAt(IdentIndex).isOverload);
            };
          };
        };
        for (var $l4 = 0, $end2 = rtl.length(ov) - 1 - 1; $l4 <= $end2; $l4++) {
          i = $l4;
          if (rtl.rcArrR(ov,i).j > 1) if (rtl.rcArrR(ov,i).i !== rtl.rcArrR(ov,i).j) pas.Messages.Error$1(x,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.NotAllDeclarationsOverloaded,"Not all declarations of " + pas.Common.IdentifierAt(pas.Common.NumIdent()).Name + " are declared with OVERLOAD","","","","","","","","","",""]),pas.Messages.IMessage)));
        };
        l = rtl.arraySetLength(l,TL,0);
        ov = rtl.arraySetLength(ov,TOV,0);
      } finally {
        $ir.free();
      };
    };
    $impl.AddCallGraphChild = function (ParentBlock, ChildBlock) {
      rtl.rc(ParentBlock,-2147483648,2147483647);
      rtl.rc(ChildBlock,-2147483648,2147483647);
      if (ParentBlock !== ChildBlock) {
        rtl.rcArrR(pas.Common.CallGraph,ParentBlock - 1).NumChildren += 1;
        rtl.rcArrW(rtl.rcArrR(pas.Common.CallGraph,ParentBlock - 1).ChildBlock,rtl.rcArrR(pas.Common.CallGraph,ParentBlock - 1).NumChildren - 1,ChildBlock);
      };
    };
    $impl.asm65separator = function (a) {
      if (a) pas.Optimize.asm65("","");
      pas.Optimize.asm65("; " + pas.System.StringOfChar("-",60),"");
    };
    $impl.GetStackVariable = function (n) {
      rtl.rc(n,0,255);
      var Result = "";
      var $tmp = n;
      if ($tmp === 0) {
        Result = " :STACKORIGIN,x"}
       else if ($tmp === 1) {
        Result = " :STACKORIGIN+STACKWIDTH,x"}
       else if ($tmp === 2) {
        Result = " :STACKORIGIN+STACKWIDTH*2,x"}
       else if ($tmp === 3) {
        Result = " :STACKORIGIN+STACKWIDTH*3,x"}
       else {
        Result = "";
      };
      return Result;
    };
    $impl.a65 = function (code, Value, Kind, Size, IdentIndex) {
      rtl.rc(code,0,17);
      rtl.rc(Value,-9007199254740991,9007199254740991);
      rtl.rc(Kind,0,191);
      rtl.rc(Size,0,255);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var v = 0;
      var svar = "";
      var $tmp = code;
      if ($tmp === pas.CompilerTypes.TCode65.putEOL) {
        pas.Optimize.asm65("\t@printEOL","")}
       else if ($tmp === pas.CompilerTypes.TCode65.putCHAR) {
        pas.Optimize.asm65("\tjsr @printCHAR","")}
       else if ($tmp === pas.CompilerTypes.TCode65.shlAL_CL) {
        pas.Optimize.asm65("\tjsr @shlEAX_CL.BYTE","")}
       else if ($tmp === pas.CompilerTypes.TCode65.shlAX_CL) {
        pas.Optimize.asm65("\tjsr @shlEAX_CL.WORD","")}
       else if ($tmp === pas.CompilerTypes.TCode65.shlEAX_CL) {
        pas.Optimize.asm65("\tjsr @shlEAX_CL.CARD","")}
       else if ($tmp === pas.CompilerTypes.TCode65.shrAL_CL) {
        pas.Optimize.asm65("\tjsr @shrAL_CL","")}
       else if ($tmp === pas.CompilerTypes.TCode65.shrAX_CL) {
        pas.Optimize.asm65("\tjsr @shrAX_CL","")}
       else if ($tmp === pas.CompilerTypes.TCode65.shrEAX_CL) {
        pas.Optimize.asm65("\tjsr @shrEAX_CL","")}
       else if ($tmp === pas.CompilerTypes.TCode65.addBX) {
        pas.Optimize.asm65("\tinx","")}
       else if ($tmp === pas.CompilerTypes.TCode65.subBX) {
        pas.Optimize.asm65("\tdex","")}
       else if ($tmp === pas.CompilerTypes.TCode65.addAL_CL) {
        pas.Optimize.asm65("\tjsr addAL_CL","")}
       else if ($tmp === pas.CompilerTypes.TCode65.addAX_CX) {
        pas.Optimize.asm65("\tjsr addAX_CX","")}
       else if ($tmp === pas.CompilerTypes.TCode65.addEAX_ECX) {
        pas.Optimize.asm65("\tjsr addEAX_ECX","")}
       else if ($tmp === pas.CompilerTypes.TCode65.subAL_CL) {
        pas.Optimize.asm65("\tjsr subAL_CL","")}
       else if ($tmp === pas.CompilerTypes.TCode65.subAX_CX) {
        pas.Optimize.asm65("\tjsr subAX_CX","")}
       else if ($tmp === pas.CompilerTypes.TCode65.subEAX_ECX) {
        pas.Optimize.asm65("\tjsr subEAX_ECX","")}
       else if ($tmp === pas.CompilerTypes.TCode65.imulECX) {
        pas.Optimize.asm65("\tjsr imulECX","")}
       else if ($tmp === pas.CompilerTypes.TCode65.movaBX_Value) {
        if (Kind === pas.Tokens.TTokenKind.VARTOK) {
          svar = $impl.GetLocalName(IdentIndex,"");
          pas.Optimize.asm65("\tmva <" + svar + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tmva >" + svar + $impl.GetStackVariable(1),"");
        } else {
          v = rtl.rc(rtl.rc(Value,0,255),0,255);
          pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $impl.GetStackVariable(0),"");
          if (Size in rtl.createSet(2,4)) {
            v = rtl.rc(rtl.rc(Math.floor(Value / 256),0,255),0,255);
            pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $impl.GetStackVariable(1),"");
          };
          if (Size === 4) {
            v = rtl.rc(rtl.rc(Math.floor(Value / 65536),0,255),0,255);
            pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $impl.GetStackVariable(2),"");
            v = rtl.rc(rtl.rc(Math.floor(Value / 16777216),0,255),0,255);
            pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(v,2) + $impl.GetStackVariable(3),"");
          };
        };
      };
    };
    $impl.Gen = function () {
      if (!pas.Common.OutputDisabled) pas.Common.CodeSize += 1;
    };
    $impl.ExpandParam = function (Dest, Source) {
      rtl.rc(Dest,0,191);
      rtl.rc(Source,0,191);
      var i = 0;
      if ((Source in pas.Datatypes.IntegerTypes) && (Dest in pas.Datatypes.IntegerTypes)) {
        i = rtl.rc(pas.Datatypes.GetDataSize(Dest) - pas.Datatypes.GetDataSize(Source),-2147483648,2147483647);
        if (i > 0) {
          var $tmp = i;
          if ($tmp === 1) {
            if (Source in pas.Datatypes.SignedOrdinalTypes) {
              pas.Optimize.asm65("\tjsr @expandSHORT2SMALL","")}
             else pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH,x","")}
           else if ($tmp === 2) {
            if (Source in pas.Datatypes.SignedOrdinalTypes) {
              pas.Optimize.asm65("\tjsr @expandToCARD.SMALL","")}
             else {
              pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x","");
            }}
           else if ($tmp === 3) if (Source in pas.Datatypes.SignedOrdinalTypes) {
            pas.Optimize.asm65("\tjsr @expandToCARD.SHORT","")}
           else {
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN+STACKWIDTH*3,x","");
          };
        };
      };
    };
    $impl.ExpandParam_m1 = function (Dest, Source) {
      rtl.rc(Dest,0,191);
      rtl.rc(Source,0,191);
      var i = 0;
      if ((Source in pas.Datatypes.IntegerTypes) && (Dest in pas.Datatypes.IntegerTypes)) {
        i = rtl.rc(pas.Datatypes.GetDataSize(Dest) - pas.Datatypes.GetDataSize(Source),-2147483648,2147483647);
        if (i > 0) {
          var $tmp = i;
          if ($tmp === 1) {
            if (Source in pas.Datatypes.SignedOrdinalTypes) {
              pas.Optimize.asm65("\tjsr @expandSHORT2SMALL1","")}
             else pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x","")}
           else if ($tmp === 2) {
            if (Source in pas.Datatypes.SignedOrdinalTypes) {
              pas.Optimize.asm65("\tjsr @expandToCARD1.SMALL","")}
             else {
              pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*3,x","");
            }}
           else if ($tmp === 3) if (Source in pas.Datatypes.SignedOrdinalTypes) {
            pas.Optimize.asm65("\tjsr @expandToCARD1.SHORT","")}
           else {
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tmva #$00 :STACKORIGIN-1+STACKWIDTH*3,x","");
          };
        };
      };
    };
    $impl.ExpandExpression = function (ValType, RightValType, VarType, ForceMinusSign) {
      rtl.rc(ValType.get(),0,191);
      rtl.rc(RightValType,0,191);
      rtl.rc(VarType,0,191);
      var m = 0;
      var sign = false;
      if ((ValType.get() in pas.Datatypes.IntegerTypes) && (RightValType in pas.Datatypes.IntegerTypes)) {
        if ((pas.Datatypes.GetDataSize(ValType.get()) < pas.Datatypes.GetDataSize(RightValType)) && ((VarType === pas.Tokens.TTokenKind.UNTYPETOK) || (pas.Datatypes.GetDataSize(RightValType) >= pas.Datatypes.GetDataSize(VarType)))) {
          $impl.ExpandParam_m1(RightValType,ValType.get());
          ValType.set(RightValType);
        } else {
          if (VarType in pas.Datatypes.Pointers) VarType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
          m = rtl.rc(pas.Datatypes.GetDataSize(ValType.get()),0,255);
          if (pas.Datatypes.GetDataSize(RightValType) > m) m = rtl.rc(pas.Datatypes.GetDataSize(RightValType),0,255);
          if (VarType === pas.Tokens.TTokenKind.BOOLEANTOK) {
            m += 1}
           else if (VarType !== pas.Tokens.TTokenKind.UNTYPETOK) if (pas.Datatypes.GetDataSize(VarType) > m) m += 1;
          if ((ValType.get() in pas.Datatypes.SignedOrdinalTypes) || (RightValType in pas.Datatypes.SignedOrdinalTypes) || ForceMinusSign) {
            sign = true}
           else sign = false;
          var $tmp = m;
          if ($tmp === 1) {
            if (sign) {
              VarType = rtl.rc(pas.Tokens.TTokenKind.SHORTINTTOK,0,191)}
             else VarType = rtl.rc(pas.Tokens.TTokenKind.BYTETOK,0,191)}
           else if ($tmp === 2) {
            if (sign) {
              VarType = rtl.rc(pas.Tokens.TTokenKind.SMALLINTTOK,0,191)}
             else VarType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191)}
           else {
            if (sign) {
              VarType = rtl.rc(pas.Tokens.TTokenKind.INTEGERTOK,0,191)}
             else VarType = rtl.rc(pas.Tokens.TTokenKind.CARDINALTOK,0,191);
          };
          $impl.ExpandParam_m1(VarType,ValType.get());
          $impl.ExpandParam(VarType,RightValType);
          ValType.set(VarType);
        };
      };
    };
    $impl.ExpandWord = function () {
      $impl.Gen();
    };
    $impl.ExpandByte = function () {
      $impl.Gen();
      $impl.ExpandWord();
    };
    $impl.InfoAboutSize = function (Size) {
      rtl.rc(Size,0,255);
      var Result = "";
      var $tmp = Size;
      if ($tmp === 1) {
        Result = " BYTE / CHAR / SHORTINT / BOOLEAN"}
       else if ($tmp === 2) {
        Result = " WORD / SMALLINT / SHORTREAL / POINTER"}
       else if ($tmp === 4) {
        Result = " CARDINAL / INTEGER / REAL / SINGLE"}
       else {
        Result = " unknown";
      };
      return Result;
    };
    $impl.GenerateIndexShift = function (ElementType, Ofset) {
      rtl.rc(ElementType,0,191);
      rtl.rc(Ofset,0,255);
      var $tmp = pas.Datatypes.GetDataSize(ElementType);
      if ($tmp === 2) {
        if (Ofset === 0) {
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tasl :STACKORIGIN,x","");
          pas.Optimize.asm65("\trol @","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        } else {
          pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH,x","");
          pas.Optimize.asm65("\tasl :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
          pas.Optimize.asm65("\trol @","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
        }}
       else if ($tmp === 4) if (Ofset === 0) {
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tasl :STACKORIGIN,x","");
        pas.Optimize.asm65("\trol @","");
        pas.Optimize.asm65("\tasl :STACKORIGIN,x","");
        pas.Optimize.asm65("\trol @","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      } else {
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH,x","");
        pas.Optimize.asm65("\tasl :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\trol @","");
        pas.Optimize.asm65("\tasl :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\trol @","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + "+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-" + pas.StringUtilities.IntToStr(Ofset) + ",x","");
      };
    };
    $impl.StopOptimization = function () {
      if (pas.Common.run_func === 0) {
        pas.Common.optimize.use = false;
        if ((rtl.length(pas.Common.OptimizeBuf) - 1) > 0) pas.Optimize.asm65("","");
      };
    };
    $impl.StartOptimization = function (i) {
      rtl.rc(i,-2147483648,2147483647);
      $impl.StopOptimization();
      pas.Common.optimize.use = true;
      pas.Common.optimize.SourceFile = pas.Common.TokenAt(i).SourceLocation.SourceFile;
      pas.Common.optimize.line = rtl.rc(pas.Common.TokenAt(i).SourceLocation.Line,-2147483648,2147483647);
    };
    $impl.LoadBP2 = function (IdentIndex, svar) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var lab = "";
      if (pas.System.Pos(".",svar) > 0) {
        lab = $impl.ExtractName(IdentIndex,svar);
        if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(lab)).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
          pas.Optimize.asm65("\tmwy " + lab + " :bp2","");
          pas.Optimize.asm65("\tlda :bp2","");
          pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda :bp2+1","");
          pas.Optimize.asm65("\tadc #$00","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
      } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
    };
    $impl.Push = function (Value, IndirectionLevel, Size, IdentIndex, par) {
      rtl.rc(Value,-9007199254740991,9007199254740991);
      rtl.rc(IndirectionLevel,0,255);
      rtl.rc(Size,0,255);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(par,0,255);
      var Kind = 0;
      var NumAllocElements = 0;
      var svar = "";
      var svara = "";
      var lab = "";
      if (IdentIndex > 0) {
        Kind = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Kind,0,191);
        if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
          Size = rtl.rc(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),0,255);
          NumAllocElements = 0;
        } else NumAllocElements = rtl.rc(pas.Parser.Elements(IdentIndex),0,4294967295);
        svar = $impl.GetLocalName(IdentIndex,"");
      } else {
        Kind = rtl.rc(pas.Tokens.TTokenKind.CONSTTOK,0,191);
        NumAllocElements = 0;
        svar = "";
      };
      svara = svar;
      if (pas.System.Pos(".",svar) > 0) {
        svara = $impl.GetLocalName(IdentIndex,"adr.")}
       else svara = "adr." + svar;
      $impl.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; Push" + $impl.InfoAboutSize(Size),"");
      var $tmp = IndirectionLevel;
      if ($tmp === 0) {
        pas.Optimize.asm65("; as Value $" + pas.SysUtils.IntToHex(Value,8) + " (" + pas.StringUtilities.IntToStr(Value) + ")","");
        pas.Optimize.asm65("","");
        $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.Gen();
        $impl.a65(pas.CompilerTypes.TCode65.movaBX_Value,Value,Kind,Size,IdentIndex);
      } else if ($tmp === 1) {
        pas.Optimize.asm65("; as Pointer","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        var $tmp1 = Size;
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tmva " + svar + $impl.GetStackVariable(0),"");
          $impl.ExpandByte();
        } else if ($tmp1 === 2) {
          if ($impl.TestName(IdentIndex,svar)) {
            lab = $impl.ExtractName(IdentIndex,svar);
            if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(lab)).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
              pas.Optimize.asm65("\tlda " + lab,"");
              pas.Optimize.asm65("\tldy " + lab + "+1","");
              pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
              pas.Optimize.asm65("\tscc","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tsty" + $impl.GetStackVariable(1),"");
            } else {
              pas.Optimize.asm65("\tmva " + svar + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tmva " + svar + "+1" + $impl.GetStackVariable(1),"");
            };
          } else {
            pas.Optimize.asm65("\tmva " + svar + $impl.GetStackVariable(0),"");
            pas.Optimize.asm65("\tmva " + svar + "+1" + $impl.GetStackVariable(1),"");
          };
          $impl.ExpandWord();
        } else if ($tmp1 === 4) {
          pas.Optimize.asm65("\tmva " + svar + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tmva " + svar + "+1" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tmva " + svar + "+2" + $impl.GetStackVariable(2),"");
          pas.Optimize.asm65("\tmva " + svar + "+3" + $impl.GetStackVariable(3),"");
        };
      } else if ($tmp === 5) {
        pas.Optimize.asm65("; as Pointer to Record","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tlda #" + svar + "-DATAORIGIN","")}
         else pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(par,2),"");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd " + $impl.ExtractName(IdentIndex,svar),"");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tadc " + $impl.ExtractName(IdentIndex,svar) + "+1","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
        } else {
          pas.Optimize.asm65("\tadd " + svar,"");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tadc " + svar + "+1","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
        };
      } else if ($tmp === 2) {
        pas.Optimize.asm65("; as Pointer to Pointer","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+" + svar,"");
        if ($impl.TestName(IdentIndex,svar)) {
          if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
            pas.Optimize.asm65("\tmwy " + svar + " :bp2","")}
           else pas.Optimize.asm65("\tmwy " + $impl.ExtractName(IdentIndex,svar) + " :bp2","");
        } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
        if ($impl.TestName(IdentIndex,svar)) {
          if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
            pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(par,2),"")}
           else pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","");
        } else pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(par,2),"");
        var $tmp2 = Size;
        if ($tmp2 === 1) {
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(0),"");
          $impl.ExpandByte();
        } else if ($tmp2 === 2) {
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(1),"");
          $impl.ExpandWord();
        } else if ($tmp2 === 4) {
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(2),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tmva (:bp2),y" + $impl.GetStackVariable(3),"");
        };
        if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+","");
      } else if (($tmp === 3) || ($tmp === 4)) {
        pas.Optimize.asm65("; as Pointer to Array Origin","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        var $tmp3 = Size;
        if ($tmp3 === 1) {
          if ((NumAllocElements > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+" + svar,"");
            if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
              pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
              pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tsta :bp+1","");
              pas.Optimize.asm65("\tlda (:bp),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).ObjectVariable && (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
                pas.Optimize.asm65("\tmwy " + svar + " :TMP","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:TMP),y","");
                pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:TMP),y","");
                pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
                pas.Optimize.asm65("\ttay","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tsta :bp+1","");
                pas.Optimize.asm65("\tlda (:bp),y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              };
            };
            if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("+","");
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
            } else {
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
            };
          };
          $impl.ExpandByte();
        } else if ($tmp3 === 2) {
          if (IndirectionLevel === 3) $impl.GenerateIndexShift(pas.Tokens.TTokenKind.WORDTOK,0);
          pas.Optimize.asm65("","");
          if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
                pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
                pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tsta :bp2+1","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tsta :bp2+1","");
              };
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
            };
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
            } else {
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
                pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","")}
               else pas.Optimize.asm65("\tlda " + svara + "+1,y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
            };
          };
          $impl.ExpandWord();
        } else if ($tmp3 === 4) {
          if (IndirectionLevel === 3) $impl.GenerateIndexShift(pas.Tokens.TTokenKind.CARDINALTOK,0);
          pas.Optimize.asm65("","");
          if (((NumAllocElements * 4) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
                pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
                pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tsta :bp2+1","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd" + $impl.GetStackVariable(0),"");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tsta :bp2+1","");
              };
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
            };
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
            } else {
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
              if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
                pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
                pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
              } else {
                pas.Optimize.asm65("\tlda " + svara + "+1,y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
                pas.Optimize.asm65("\tlda " + svara + "+2,y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
                pas.Optimize.asm65("\tlda " + svara + "+3,y","");
                pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
              };
            };
          };
        };
      } else if ($tmp === 6) {
        pas.Optimize.asm65("; as Pointer to Array ^Record","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd " + $impl.ExtractName(IdentIndex,svar),"");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tadc " + $impl.ExtractName(IdentIndex,svar) + "+1","");
          pas.Optimize.asm65("\tsta :TMP+1","");
        } else {
          pas.Optimize.asm65("\tadd " + svar,"");
          pas.Optimize.asm65("\tsta :TMP","");
          pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tadc " + svar + "+1","");
          pas.Optimize.asm65("\tsta :TMP+1","");
        };
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda (:TMP),y","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:TMP),y","");
        pas.Optimize.asm65("\tsta :bp2+1","");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","")}
         else pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(par,2),"");
        var $tmp4 = Size;
        if ($tmp4 === 1) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          $impl.ExpandByte();
        } else if ($tmp4 === 2) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
          $impl.ExpandWord();
        } else if ($tmp4 === 4) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
        };
      } else if ($tmp === 12) {
        pas.Optimize.asm65("; as Pointer to Array ^Record to String","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd " + $impl.ExtractName(IdentIndex,svar),"");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tadc " + $impl.ExtractName(IdentIndex,svar) + "+1","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        } else {
          pas.Optimize.asm65("\tadd " + svar,"");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tadc " + svar + "+1","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        };
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
        } else pas.Optimize.asm65("\tadd #$" + pas.SysUtils.IntToHex(par,2),"");
        pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
      } else if ($tmp === 10) {
        pas.Optimize.asm65("; as Pointer to Record^ Array Origin","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tmwy " + $impl.ExtractName(IdentIndex,svar) + " :bp2","")}
         else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
        pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","")}
         else pas.Optimize.asm65("\tadd #$" + pas.SysUtils.IntToHex(par,2),"");
        pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
        pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
        pas.Optimize.asm65("\tldy" + $impl.GetStackVariable(0),"");
        var $tmp5 = Size;
        if ($tmp5 === 1) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          $impl.ExpandByte();
        } else if ($tmp5 === 2) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
          $impl.ExpandWord();
        } else if ($tmp5 === 4) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(0),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(1),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(2),"");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta" + $impl.GetStackVariable(3),"");
        };
      } else if ($tmp === 11) {
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if ($impl.TestName(IdentIndex,svar)) {
            pas.Optimize.asm65("\tlda " + $impl.ExtractName(IdentIndex,svar),"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :TMP","");
            pas.Optimize.asm65("\tlda " + $impl.ExtractName(IdentIndex,svar) + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :TMP+1","");
          } else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :TMP","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :TMP+1","");
          };
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (:TMP),y","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:TMP),y","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        } else {
          pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda " + svara + ",y","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda " + svara + "+1,y","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        };
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tadd #$" + pas.SysUtils.IntToHex(par,2),"");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
        var $tmp6 = Size;
        if ($tmp6 === 1) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        } else if ($tmp6 === 2) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if ($tmp6 === 4) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      };
    };
    $impl.SaveToSystemStack = function (cnt) {
      rtl.rc(cnt,-2147483648,2147483647);
      var i = 0;
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) for (var $in = pas.Common.IFTmpPosStack, $l = 0, $end = rtl.length($in) - 1; $l <= $end; $l++) {
        i = $in[$l];
        if (i === cnt) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          break;
        };
      };
    };
    $impl.RestoreFromSystemStack = function (cnt) {
      rtl.rc(cnt,-2147483648,2147483647);
      var i = 0;
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      pas.Optimize.asm65("\tlda IFTMP_" + pas.SysUtils.IntToHex(cnt,4),"");
      if (pas.Common.pass === pas.CompilerTypes.TPass.CALL_DETERMINATION) {
        i = rtl.rc(rtl.length(pas.Common.IFTmpPosStack) - 1,-2147483648,2147483647);
        rtl.rcArrW(pas.Common.IFTmpPosStack,i,cnt);
        pas.Common.IFTmpPosStack = rtl.arraySetLength(pas.Common.IFTmpPosStack,0,i + 2);
      };
    };
    $impl.RemoveFromSystemStack = function () {
      $impl.Gen();
      $impl.Gen();
    };
    $impl.GenerateFileOpen = function (IdentIndex, ioCode) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(ioCode,0,9);
      pas.Optimize.ResetOpty();
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\ttxa:pha","");
      if (pas.Common.IOCheck) {
        pas.Optimize.asm65("\tsec","")}
       else pas.Optimize.asm65("\tclc","");
      var $tmp = ioCode;
      if (($tmp === pas.CompilerTypes.TIOCode.Append) || ($tmp === pas.CompilerTypes.TIOCode.OpenRead) || ($tmp === pas.CompilerTypes.TIOCode.OpenWrite)) {
        pas.Optimize.asm65("\t@openfile " + pas.Common.IdentifierAt(IdentIndex).Name + ", #" + pas.StringUtilities.IntToStr(pas.CompilerTypes.GetIOBits(ioCode)),"")}
       else if ($tmp === pas.CompilerTypes.TIOCode.FileMode) {
        pas.Optimize.asm65("\t@openfile " + pas.Common.IdentifierAt(IdentIndex).Name + ", MAIN.SYSTEM.FileMode","")}
       else if ($tmp === pas.CompilerTypes.TIOCode.Close) pas.Optimize.asm65("\t@closefile " + pas.Common.IdentifierAt(IdentIndex).Name,"");
      pas.Optimize.asm65("\tpla:tax","");
      pas.Optimize.asm65("","");
    };
    $impl.GenerateFileRead = function (IdentIndex, ioCode, NumParams) {
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(ioCode,0,9);
      rtl.rc(NumParams,-2147483648,2147483647);
      pas.Optimize.ResetOpty();
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\ttxa:pha","");
      if (pas.Common.IOCheck) {
        pas.Optimize.asm65("\tsec","")}
       else pas.Optimize.asm65("\tclc","");
      var $tmp = ioCode;
      if (($tmp === pas.CompilerTypes.TIOCode.Read) || ($tmp === pas.CompilerTypes.TIOCode.Write) || ($tmp === pas.CompilerTypes.TIOCode.ReadRecord) || ($tmp === pas.CompilerTypes.TIOCode.WriteRecord)) if (NumParams === 3) {
        pas.Optimize.asm65("\t@readfile " + pas.Common.IdentifierAt(IdentIndex).Name + ", #" + pas.StringUtilities.IntToStr(pas.CompilerTypes.GetIOBits(ioCode) | 0x80),"")}
       else pas.Optimize.asm65("\t@readfile " + pas.Common.IdentifierAt(IdentIndex).Name + ", #" + pas.StringUtilities.IntToStr(pas.CompilerTypes.GetIOBits(ioCode)),"");
      pas.Optimize.asm65("\tpla:tax","");
      pas.Optimize.asm65("","");
    };
    $impl.GenerateIncDec = function (IndirectionLevel, ExpressionType, Down, IdentIndex) {
      rtl.rc(IndirectionLevel,0,255);
      rtl.rc(ExpressionType,0,191);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var b = "";
      var c = "";
      var svar = "";
      var svara = "";
      var NumAllocElements = 0;
      if (IdentIndex > 0) {
        if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
          NumAllocElements = 0;
        } else NumAllocElements = rtl.rc(pas.Parser.Elements(IdentIndex),0,4294967295);
        svar = $impl.GetLocalName(IdentIndex,"");
      } else {
        NumAllocElements = 0;
        svar = "";
      };
      svara = svar;
      if (pas.System.Pos(".",svar) > 0) {
        svara = $impl.GetLocalName(IdentIndex,"adr.")}
       else svara = "adr." + svar;
      if (Down) {
        b = "sub";
        c = "sbc";
      } else {
        b = "add";
        c = "adc";
      };
      var $tmp = IndirectionLevel;
      if ($tmp === 1) {
        pas.Optimize.asm65("; as Pointer","");
        pas.Optimize.asm65("","");
        var $tmp1 = pas.Datatypes.GetDataSize(ExpressionType);
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svar,"");
        } else if ($tmp1 === 2) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp1 === 4) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
          pas.Optimize.asm65("\tlda " + svar + "+2","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta " + svar + "+2","");
          pas.Optimize.asm65("\tlda " + svar + "+3","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta " + svar + "+3","");
        };
      } else if ($tmp === 2) {
        pas.Optimize.asm65("; as Pointer To Pointer","");
        pas.Optimize.asm65("","");
        $impl.LoadBP2(IdentIndex,svar);
        pas.Optimize.asm65("\tldy #$00","");
        var $tmp2 = pas.Datatypes.GetDataSize(ExpressionType);
        if ($tmp2 === 1) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp2 === 2) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp2 === 4) {
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
      } else if (($tmp === 3) || ($tmp === 4)) {
        pas.Optimize.asm65("; as Pointer To Array Origin","");
        pas.Optimize.asm65("","");
        var $tmp3 = pas.Datatypes.GetDataSize(ExpressionType);
        if ($tmp3 === 1) {
          if ((NumAllocElements > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if ((IdentIndex > 0) && pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp+1","");
              pas.Optimize.asm65("\tlda (:bp),y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp),y","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp+1","");
              pas.Optimize.asm65("\tlda (:bp),y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp),y","");
            };
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            } else {
              pas.Optimize.asm65("\tlda <" + svara,"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda >" + svara,"");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp+1","");
              pas.Optimize.asm65("\tlda (:bp),y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp),y","");
            };
          };
        } else if ($tmp3 === 2) {
          if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
            $impl.LoadBP2(IdentIndex,svar);
            pas.Optimize.asm65("\tlda :bp2","");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :bp2+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          } else {
            if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
              if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tadd #$00","");
                pas.Optimize.asm65("\ttay","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tadc #$00","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda " + svara + ",y","");
                pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svara + ",y","");
                pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","");
                pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","");
              } else {
                if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
                  pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
                  pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                  pas.Optimize.asm65("\tsta :bp2","");
                  pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
                  pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :bp2+1","");
                } else {
                  pas.Optimize.asm65("\tlda " + svar,"");
                  pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                  pas.Optimize.asm65("\tsta :bp2","");
                  pas.Optimize.asm65("\tlda " + svar + "+1","");
                  pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :bp2+1","");
                };
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
              };
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
                pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda " + svara + ",y","");
                pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svara + ",y","");
                pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","");
                pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","");
              } else {
                pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda " + svara + ",y","");
                pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svara + ",y","");
                pas.Optimize.asm65("\tlda " + svara + "+1,y","");
                pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta " + svara + "+1,y","");
              };
            };
          }}
         else if ($tmp3 === 4) if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
          $impl.LoadBP2(IdentIndex,svar);
          pas.Optimize.asm65("\tlda :bp2","");
          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda :bp2+1","");
          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :bp2+1","");
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:bp2),y","");
          pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else {
          if (((NumAllocElements * 4) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              };
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            };
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
            } else {
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\t" + b + " :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda " + svara + "+1,y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svara + "+1,y","");
              pas.Optimize.asm65("\tlda " + svara + "+2,y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svara + "+2,y","");
              pas.Optimize.asm65("\tlda " + svara + "+3,y","");
              pas.Optimize.asm65("\t" + c + " :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svara + "+3,y","");
            };
          };
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      };
      $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
    };
    $impl.GenerateAssignment = function (IndirectionLevel, Size, IdentIndex, Param, ParamY) {
      rtl.rc(IndirectionLevel,0,255);
      rtl.rc(Size,0,255);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var NumAllocElements = 0;
      var IdentTemp = 0;
      var svar = "";
      var svara = "";
      function LoadRegisterY() {
        if (ParamY !== "") {
          pas.Optimize.asm65("\tldy #" + ParamY,"")}
         else if (pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) > 0) {
          if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && !(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.UNTYPETOK,pas.Tokens.TTokenKind.PROCVARTOK))) {
            pas.Optimize.asm65("\tldy #$00","")}
           else pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","");
        } else pas.Optimize.asm65("\tldy #$00","");
      };
      if (IdentIndex > 0) {
        if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
          Size = rtl.rc(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),0,255);
          NumAllocElements = 0;
        } else NumAllocElements = rtl.rc(pas.Parser.Elements(IdentIndex),0,4294967295);
        svar = $impl.GetLocalName(IdentIndex,"");
      } else {
        svar = Param;
        NumAllocElements = 0;
      };
      svara = svar;
      if (pas.System.Pos(".",svar) > 0) {
        svara = $impl.GetLocalName(IdentIndex,"adr.")}
       else svara = "adr." + svar;
      $impl.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("; Generate Assignment for" + $impl.InfoAboutSize(Size),"");
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      var $tmp = IndirectionLevel;
      if ($tmp === 6) {
        pas.Optimize.asm65("; as Pointer to Array ^Record","");
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if ($impl.TestName(IdentIndex,svar)) {
            IdentTemp = rtl.rc(pas.Parser.GetIdentIndex($impl.ExtractName(IdentIndex,svar)),-2147483648,2147483647);
            if ((IdentTemp > 0) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements_ > 1) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements_ <= 128)) {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,"adr.") + ",y","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,"adr.") + "+1,y","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            } else {
              pas.Optimize.asm65("\tlda " + $impl.ExtractName(IdentIndex,svar),"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta :TMP","");
              pas.Optimize.asm65("\tlda " + $impl.ExtractName(IdentIndex,svar) + "+1","");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :TMP+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:TMP),y","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:TMP),y","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
          } else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :TMP","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :TMP+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:TMP),y","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:TMP),y","");
            pas.Optimize.asm65("\tsta :bp2+1","");
          };
        } else {
          pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda " + svara + ",y","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda " + svara + "+1,y","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        };
        LoadRegisterY();
        var $tmp1 = Size;
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp1 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp1 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 9) {
        pas.Optimize.asm65("; as Pointer to Dereference","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta :bp2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :bp2+1","");
        LoadRegisterY();
        var $tmp2 = Size;
        if ($tmp2 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp2 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp2 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if (($tmp === 3) || ($tmp === 4)) {
        pas.Optimize.asm65("; as Pointer to Array Origin","");
        var $tmp3 = Size;
        if ($tmp3 === 1) {
          if ((NumAllocElements > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-" + svar,"");
            if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
              pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
              pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp),y","");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).ObjectVariable && (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
                pas.Optimize.asm65("\tmwy " + svar + " :TMP","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:TMP),y","");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:TMP),y","");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\ttay","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta (:bp),y","");
              };
            };
            if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-","");
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
            };
          };
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else if ($tmp3 === 2) {
          if (IndirectionLevel === 3) $impl.GenerateIndexShift(pas.Tokens.TTokenKind.WORDTOK,1);
          if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              };
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            };
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
                pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(NumAllocElements) + ",y","")}
               else pas.Optimize.asm65("\tsta " + svara + "+1,y","");
            };
          };
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else if ($tmp3 === 4) {
          if (IndirectionLevel === 3) $impl.GenerateIndexShift(pas.Tokens.TTokenKind.CARDINALTOK,1);
          if (((NumAllocElements * 4) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).Value >= 0)) {
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2),"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 256),0,255),2),"");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              } else {
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
              };
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            };
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta (:bp2),y","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svara + ",y","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
                pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements,-2147483648,2147483647)) + ",y","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 2,-2147483648,2147483647)) + ",y","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tsta " + svara + "+" + pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * 3,-2147483648,2147483647)) + ",y","");
              } else {
                pas.Optimize.asm65("\tsta " + svara + "+1,y","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta " + svara + "+2,y","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tsta " + svara + "+3,y","");
              };
            };
          };
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === 8) {
        pas.Optimize.asm65("; as StringPointer to Array Origin","");
        var $tmp4 = Size;
        if ($tmp4 === 2) {
          if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tpha","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tpla","");
            pas.Optimize.asm65("\tsta :bp2","");
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tpha","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tpla","");
              pas.Optimize.asm65("\tsta :bp2","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svara + "+1,y","");
              pas.Optimize.asm65("\tsta :bp2+1","");
            };
          };
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda #$01","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === 7) {
        pas.Optimize.asm65("; as StringPointer to Array Origin","");
        var $tmp5 = Size;
        if ($tmp5 === 2) {
          if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta @move.dst","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda (:bp2),y","");
            pas.Optimize.asm65("\tsta @move.dst+1","");
          } else {
            if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.LoadBP2(IdentIndex,svar);
              pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta @move.dst","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta @move.dst+1","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda " + svara + ",y","");
              pas.Optimize.asm65("\tsta @move.dst","");
              pas.Optimize.asm65("\tlda " + svara + "+1,y","");
              pas.Optimize.asm65("\tsta @move.dst+1","");
            };
          };
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @move.src","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @move.src+1","");
          if (pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements > 0) {
            pas.Optimize.asm65("\tlda <" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements),"");
            pas.Optimize.asm65("\tsta @move.cnt","");
            pas.Optimize.asm65("\tlda >" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements),"");
            pas.Optimize.asm65("\tsta @move.cnt+1","");
            pas.Optimize.asm65("\tjsr @move","");
            if (pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements < 256) {
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda #" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements - 1),"");
              pas.Optimize.asm65("\tcmp (@move.src),y","");
              pas.Optimize.asm65("\tscs","");
              pas.Optimize.asm65("\tsta (@move.dst),y","");
            };
          } else {
            pas.Optimize.asm65("\tldy #$00","");
            pas.Optimize.asm65("\tlda (@move.src),y","");
            pas.Optimize.asm65("\tadd #1","");
            pas.Optimize.asm65("\tsta @move.cnt","");
            pas.Optimize.asm65("\tscc","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tsty @move.cnt+1","");
            pas.Optimize.asm65("\tjsr @move","");
          };
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === 12) {
        $impl.Gen();
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd " + $impl.ExtractName(IdentIndex,svar),"");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tadc " + $impl.ExtractName(IdentIndex,svar) + "+1","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        } else {
          pas.Optimize.asm65("\tadd " + svar,"");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tadc " + svar + "+1","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        };
        pas.Optimize.asm65("\tldy #$00","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","")}
         else pas.Optimize.asm65("\tadd #" + ParamY,"");
        pas.Optimize.asm65("\tsta @move.dst","");
        pas.Optimize.asm65("\tiny","");
        pas.Optimize.asm65("\tlda (:bp2),y","");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta @move.dst+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @move.src","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @move.src+1","");
        pas.Optimize.asm65("\tlda <" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements),"");
        pas.Optimize.asm65("\tsta @move.cnt","");
        pas.Optimize.asm65("\tlda >" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements),"");
        pas.Optimize.asm65("\tsta @move.cnt+1","");
        pas.Optimize.asm65("\tjsr @move","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 10) {
        pas.Optimize.asm65("; as Pointer to Record^ Array Origin","");
        pas.Optimize.asm65("","");
        $impl.Gen();
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tmwy " + $impl.ExtractName(IdentIndex,svar) + " :bp2","")}
         else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        if ($impl.TestName(IdentIndex,svar)) {
          pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","")}
         else pas.Optimize.asm65("\tadd #" + ParamY,"");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
        var $tmp6 = Size;
        if ($tmp6 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp6 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp6 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 11) {
        pas.Optimize.asm65("\tdex","");
        if (((NumAllocElements * 2) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
          if ($impl.TestName(IdentIndex,svar)) {
            pas.Optimize.asm65("\tlda " + $impl.ExtractName(IdentIndex,svar),"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :TMP","");
            pas.Optimize.asm65("\tlda " + $impl.ExtractName(IdentIndex,svar) + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :TMP+1","");
          } else {
            pas.Optimize.asm65("\tlda " + svar,"");
            pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :TMP","");
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :TMP+1","");
          };
          pas.Optimize.asm65("\tldy #$00","");
          pas.Optimize.asm65("\tlda (:TMP),y","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda (:TMP),y","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        } else {
          pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda " + svara + ",y","");
          pas.Optimize.asm65("\tsta :bp2","");
          pas.Optimize.asm65("\tlda " + svara + "+1,y","");
          pas.Optimize.asm65("\tsta :bp2+1","");
        };
        pas.Optimize.asm65("\tinx","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tadd #" + ParamY,"");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tadc #$00","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
        var $tmp7 = Size;
        if ($tmp7 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp7 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp7 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 2) {
        pas.Optimize.asm65("; as Pointer to Pointer","");
        if ((IdentIndex > 0) && pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-" + svar,"");
        if ($impl.TestName(IdentIndex,svar)) {
          if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && !(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.UNTYPETOK,pas.Tokens.TTokenKind.PROCVARTOK))) {
            pas.Optimize.asm65("\tmwy " + svar + " :bp2","")}
           else pas.Optimize.asm65("\tmwy " + $impl.ExtractName(IdentIndex,svar) + " :bp2","");
        } else pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
        LoadRegisterY();
        var $tmp8 = Size;
        if ($tmp8 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp8 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        } else if ($tmp8 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
          pas.Optimize.asm65("\tiny","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta (:bp2),y","");
        };
        if ((IdentIndex > 0) && pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (NumAllocElements === 0)) pas.Optimize.asm65("-","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 1) {
        pas.Optimize.asm65("; as Pointer","");
        var $tmp9 = Size;
        if ($tmp9 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svar,"");
        } else if ($tmp9 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp9 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta " + svar + "+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta " + svar + "+3","");
        };
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      };
      $impl.StopOptimization();
    };
    $impl.GenerateReturn = function (IsFunction, isInt, isInl, isOvr) {
      var yes = false;
      $impl.Gen();
      yes = true;
      if (!isInt) if (!IsFunction) {
        pas.Optimize.asm65("@exit","");
        if (!isInl) {
          pas.Optimize.asm65("\t.ifdef @new","");
          pas.Optimize.asm65("\tlda <@VarData","");
          pas.Optimize.asm65("\tsta :ztmp","");
          pas.Optimize.asm65("\tlda >@VarData","");
          pas.Optimize.asm65("\tldy #@VarDataSize-1","");
          pas.Optimize.asm65("\tjmp @FreeMem","");
          pas.Optimize.asm65("\tels","");
          pas.Optimize.asm65("\trts","; ret");
          pas.Optimize.asm65("\teif","");
        };
        yes = false;
      };
      if (yes && (isInl === false)) if (isInt) {
        pas.Optimize.asm65("\trti","; ret")}
       else pas.Optimize.asm65("\trts","; ret");
      pas.Optimize.asm65(".endl","");
      if (isOvr) {
        pas.Optimize.asm65(".endl","; overload");
      };
    };
    $impl.GenerateIfThenCondition = function () {
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      pas.Optimize.asm65("\tlda :STACKORIGIN+1,x","");
      pas.Optimize.asm65("\tbne *+5","");
    };
    $impl.GenerateElseCondition = function () {
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      pas.Optimize.asm65("\tbeq *+5","");
    };
    $impl.GenerateRepeatUntilCondition = function () {
      $impl.GenerateIfThenCondition();
    };
    $impl.GenerateRelationOperation = function (relation, ValType) {
      rtl.rc(relation,0,191);
      rtl.rc(ValType,0,191);
      var $tmp = relation;
      if ($tmp === pas.Tokens.TTokenKind.EQTOK) {
        $impl.Gen();
        $impl.Gen();
        pas.Optimize.asm65("\tbeq @+","");
      } else if (($tmp === pas.Tokens.TTokenKind.NETOK) || ($tmp === pas.Tokens.TTokenKind.UNTYPETOK)) {
        $impl.Gen();
        $impl.Gen();
        pas.Optimize.asm65("\tbne @+","");
      } else if ($tmp === pas.Tokens.TTokenKind.GTTOK) {
        $impl.Gen();
        $impl.Gen();
        pas.Optimize.asm65("\tseq","");
        if (ValType in rtl.unionSet(pas.Datatypes.RealTypes,pas.Datatypes.SignedOrdinalTypes)) {
          pas.Optimize.asm65("\tbpl @+","")}
         else pas.Optimize.asm65("\tbcs @+","");
      } else if ($tmp === pas.Tokens.TTokenKind.GETOK) {
        $impl.Gen();
        $impl.Gen();
        if (ValType in rtl.unionSet(pas.Datatypes.RealTypes,pas.Datatypes.SignedOrdinalTypes)) {
          pas.Optimize.asm65("\tbpl @+","")}
         else pas.Optimize.asm65("\tbcs @+","");
      } else if ($tmp === pas.Tokens.TTokenKind.LTTOK) {
        $impl.Gen();
        $impl.Gen();
        if (ValType in rtl.unionSet(pas.Datatypes.RealTypes,pas.Datatypes.SignedOrdinalTypes)) {
          pas.Optimize.asm65("\tbmi @+","")}
         else pas.Optimize.asm65("\tbcc @+","");
      } else if ($tmp === pas.Tokens.TTokenKind.LETOK) {
        $impl.Gen();
        $impl.Gen();
        if (ValType in rtl.unionSet(pas.Datatypes.RealTypes,pas.Datatypes.SignedOrdinalTypes)) {
          pas.Optimize.asm65("\tbmi @+","");
          pas.Optimize.asm65("\tbeq @+","");
        } else {
          pas.Optimize.asm65("\tbcc @+","");
          pas.Optimize.asm65("\tbeq @+","");
        };
      };
    };
    $impl.GenerateForToDoCondition = function (ValType, Down, IdentIndex) {
      rtl.rc(ValType,0,191);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      var svar = "";
      var CounterSize = 0;
      svar = $impl.GetLocalName(IdentIndex,"");
      CounterSize = rtl.rc(pas.Datatypes.GetDataSize(ValType),0,255);
      pas.Optimize.asm65(";" + $impl.InfoAboutSize(CounterSize),"");
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      var $tmp = CounterSize;
      if ($tmp === 1) {
        $impl.ExpandByte();
        if (ValType === pas.Tokens.TTokenKind.SHORTINTTOK) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tsub :STACKORIGIN+1,x","");
          pas.Optimize.asm65("\tsvc","");
          pas.Optimize.asm65("\teor #$80","");
        } else {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
        };
      } else if ($tmp === 2) {
        $impl.ExpandWord();
        if (ValType === pas.Tokens.TTokenKind.SMALLINTTOK) {
          pas.Optimize.asm65("\t.LOCAL","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tsub :STACKORIGIN+1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne L4","");
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
          pas.Optimize.asm65("L1\tbeq L5","");
          pas.Optimize.asm65("\tbcs L3","");
          pas.Optimize.asm65("\tlda #$FF","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L3\tlda #$01","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L4\tbvc L5","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("L5","");
          pas.Optimize.asm65("\t.ENDL","");
        } else {
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
          pas.Optimize.asm65("@","");
        };
      } else if ($tmp === 4) {
        if (ValType === pas.Tokens.TTokenKind.INTEGERTOK) {
          pas.Optimize.asm65("\t.LOCAL","");
          pas.Optimize.asm65("\tlda " + svar + "+3","");
          pas.Optimize.asm65("\tsub :STACKORIGIN+1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tbne L4","");
          pas.Optimize.asm65("\tlda " + svar + "+2","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tbne L1","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne L1","");
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
          pas.Optimize.asm65("L1\tbeq L5","");
          pas.Optimize.asm65("\tbcs L3","");
          pas.Optimize.asm65("\tlda #$FF","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L3\tlda #$01","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L4\tbvc L5","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("L5","");
          pas.Optimize.asm65("\t.ENDL","");
        } else {
          pas.Optimize.asm65("\tlda " + svar + "+3","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda " + svar + "+2","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+1,x","");
          pas.Optimize.asm65("@","");
        };
      };
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      if (Down) {
        if (ValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTINTTOK,pas.Tokens.TTokenKind.SMALLINTTOK,pas.Tokens.TTokenKind.INTEGERTOK)) {
          pas.Optimize.asm65("\tbpl *+5","")}
         else pas.Optimize.asm65("\tbcs *+5","");
      } else {
        if (ValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTINTTOK,pas.Tokens.TTokenKind.SMALLINTTOK,pas.Tokens.TTokenKind.INTEGERTOK)) {
          pas.Optimize.asm65("\tbmi *+7","");
          pas.Optimize.asm65("\tbeq *+5","");
        } else {
          pas.Optimize.asm65("\tbcc *+7","");
          pas.Optimize.asm65("\tbeq *+5","");
        };
      };
    };
    $impl.GenerateIfThenProlog = function () {
      pas.Common.CodePosStackTop += 1;
      rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),"");
    };
    $impl.GenerateCaseEqualityCheck = function (Value, SelectorType, Join, CaseLocalCnt) {
      rtl.rc(Value,-9007199254740991,9007199254740991);
      rtl.rc(SelectorType,0,191);
      rtl.rc(CaseLocalCnt,-2147483648,2147483647);
      $impl.Gen();
      $impl.Gen();
      var $tmp = pas.Datatypes.GetDataSize(SelectorType);
      if ($tmp === 1) if (Join === false) {
        pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        if (Value !== 0) pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(Value,0,255),2),"");
      } else pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(rtl.rc(Value,0,255),2),"");
      pas.Optimize.asm65("\tbeq @+","");
    };
    $impl.GenerateCaseRangeCheck = function (Value1, Value2, SelectorType, Join, CaseLocalCnt) {
      rtl.rc(Value1,-9007199254740991,9007199254740991);
      rtl.rc(Value2,-9007199254740991,9007199254740991);
      rtl.rc(SelectorType,0,191);
      rtl.rc(CaseLocalCnt,-2147483648,2147483647);
      $impl.Gen();
      $impl.Gen();
      if ((SelectorType in rtl.createSet(pas.Tokens.TTokenKind.BYTETOK,pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.ENUMTOK)) && (Value1 >= 0) && (Value2 >= 0)) {
        if ((Value1 === 0) && (Value2 === 255)) {
          pas.Optimize.asm65("\tjmp @+","");
        } else if (Value1 === 0) {
          if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
          if (Value2 === 127) {
            pas.Optimize.asm65("\tcmp #$00","");
            pas.Optimize.asm65("\tbpl @+","");
          } else {
            pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value2 + 1,2),"");
            pas.Optimize.asm65("\tbcc @+","");
          };
        } else if (Value2 === 255) {
          if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
          if (Value1 === 128) {
            pas.Optimize.asm65("\tcmp #$00","");
            pas.Optimize.asm65("\tbmi @+","");
          } else {
            pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value1,2),"");
            pas.Optimize.asm65("\tbcs @+","");
          };
        } else if (Value1 === Value2) {
          if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
          pas.Optimize.asm65("\tcmp #$" + pas.SysUtils.IntToHex(Value1,2),"");
          pas.Optimize.asm65("\tbeq @+","");
        } else {
          if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
          pas.Optimize.asm65("\tclc","; clear carry for add");
          pas.Optimize.asm65("\tadc #$FF-$" + pas.SysUtils.IntToHex(Value2,2),"; make m = $FF");
          pas.Optimize.asm65("\tadc #$" + pas.SysUtils.IntToHex(Value2,2) + "-$" + pas.SysUtils.IntToHex(Value1,2) + "+1","; carry set if in range n to m");
          pas.Optimize.asm65("\tbcs @+","");
        };
      } else {
        var $tmp = pas.Datatypes.GetDataSize(SelectorType);
        if ($tmp === 1) {
          if (Join === false) pas.Optimize.asm65("\tlda @CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
          pas.Optimize.asm65("\tcmp #" + pas.StringUtilities.IntToStr(rtl.rc(Value1,0,255)),"");
        };
        $impl.GenerateRelationOperation(pas.Tokens.TTokenKind.LTTOK,SelectorType);
        var $tmp1 = pas.Datatypes.GetDataSize(SelectorType);
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tcmp #" + pas.StringUtilities.IntToStr(rtl.rc(Value2,0,255)),"");
        };
        $impl.GenerateRelationOperation(pas.Tokens.TTokenKind.GTTOK,SelectorType);
        pas.Optimize.asm65("\tjmp *+6","");
        pas.Optimize.asm65("@","");
      };
    };
    $impl.GenerateCaseStatementProlog = function () {
      $impl.GenerateIfThenProlog();
    };
    $impl.GenerateCaseStatementEpilog = function (cnt) {
      rtl.rc(cnt,-2147483648,2147483647);
      var StoredCodeSize = 0;
      pas.Optimize.ResetOpty();
      pas.Optimize.asm65("\tjmp a_" + pas.SysUtils.IntToHex(cnt,4),"");
      pas.Optimize.asm65("s_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),"");
      StoredCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
      $impl.Gen();
      pas.Optimize.asm65("l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop) + 3,4),"");
      $impl.Gen();
      rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,StoredCodeSize);
    };
    $impl.GenerateCaseEpilog = function (NumCaseStatements, cnt) {
      rtl.rc(NumCaseStatements,-2147483648,2147483647);
      rtl.rc(cnt,-2147483648,2147483647);
      pas.Optimize.ResetOpty();
      pas.Common.CodePosStackTop -= NumCaseStatements;
      if (!pas.Common.OutputDisabled) pas.Common.CodeSize += NumCaseStatements;
      pas.Optimize.asm65("a_" + pas.SysUtils.IntToHex(cnt,4),"");
    };
    $impl.GenerateAsmLabels = function (l) {
      rtl.rc(l,-2147483648,2147483647);
      if (!pas.Common.OutputDisabled) if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
        pas.Optimize.asm65("l_" + pas.SysUtils.IntToHex(l,4),"");
      };
    };
    $impl.GenerateIfThenEpilog = function () {
      var CodePos = 0;
      pas.Optimize.ResetOpty();
      CodePos = rtl.rc(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop),0,65535);
      pas.Common.CodePosStackTop -= 1;
      $impl.GenerateAsmLabels(CodePos + 3);
    };
    $impl.GenerateWhileDoProlog = function () {
      $impl.GenerateIfThenProlog();
    };
    $impl.GenerateWhileDoEpilog = function () {
      var CodePos = 0;
      var ReturnPos = 0;
      CodePos = rtl.rc(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop),0,65535);
      pas.Common.CodePosStackTop -= 1;
      ReturnPos = rtl.rc(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop),0,65535);
      pas.Common.CodePosStackTop -= 1;
      $impl.Gen();
      pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(ReturnPos,4),"");
      $impl.GenerateAsmLabels(CodePos + 3);
    };
    $impl.GenerateRepeatUntilProlog = function () {
      pas.Common.CodePosStackTop += 1;
      rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
      $impl.GenerateAsmLabels(pas.Common.CodeSize);
    };
    $impl.GenerateRepeatUntilEpilog = function () {
      var ReturnPos = 0;
      pas.Optimize.ResetOpty();
      ReturnPos = rtl.rc(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop),0,65535);
      pas.Common.CodePosStackTop -= 1;
      $impl.Gen();
      pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(ReturnPos,4),"");
    };
    $impl.GenerateForToDoProlog = function () {
      $impl.GenerateWhileDoProlog();
    };
    $impl.GenerateForToDoEpilog = function (ValType, Down, IdentIndex, Epilog, forBPL) {
      rtl.rc(ValType,0,191);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(forBPL,0,255);
      var svar = "";
      var CounterSize = 0;
      svar = $impl.GetLocalName(IdentIndex,"");
      CounterSize = rtl.rc(pas.Datatypes.GetDataSize(ValType),0,255);
      var $tmp = CounterSize;
      if ($tmp === 1) {
        $impl.Gen();
      } else if ($tmp === 2) {
        $impl.Gen();
      } else if ($tmp === 4) {
        $impl.Gen();
        $impl.Gen();
      };
      if (Down) {
        $impl.Gen();
        var $tmp1 = CounterSize;
        if ($tmp1 === 1) {
          pas.Optimize.asm65("\tdec " + svar,"")}
         else if ($tmp1 === 2) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tdec " + svar + "+1","");
          pas.Optimize.asm65("@","");
          pas.Optimize.asm65("\tdec " + svar,"");
        } else if ($tmp1 === 4) {
          pas.Optimize.asm65("\tlda " + svar,"");
          pas.Optimize.asm65("\tbne @+1","");
          pas.Optimize.asm65("\tlda " + svar + "+1","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda " + svar + "+2","");
          pas.Optimize.asm65("\tsne","");
          pas.Optimize.asm65("\tdec " + svar + "+3","");
          pas.Optimize.asm65("\tdec " + svar + "+2","");
          pas.Optimize.asm65("@","");
          pas.Optimize.asm65("\tdec " + svar + "+1","");
          pas.Optimize.asm65("@","");
          pas.Optimize.asm65("\tdec " + svar,"");
        };
      } else {
        $impl.Gen();
        var $tmp2 = CounterSize;
        if ($tmp2 === 1) {
          pas.Optimize.asm65("\tinc " + svar,"")}
         else if ($tmp2 === 2) {
          pas.Optimize.asm65("\tinc " + svar,"");
          pas.Optimize.asm65("\tsne","");
          pas.Optimize.asm65("\tinc " + svar + "+1","");
        } else if ($tmp2 === 4) {
          pas.Optimize.asm65("\tinc " + svar,"");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tinc " + svar + "+1","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tinc " + svar + "+2","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tinc " + svar + "+3","");
          pas.Optimize.asm65("@","");
        };
      };
      $impl.Gen();
      $impl.Gen();
      if (Epilog) {
        if (ValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTINTTOK,pas.Tokens.TTokenKind.SMALLINTTOK,pas.Tokens.TTokenKind.INTEGERTOK)) {
          var $tmp3 = CounterSize;
          if ($tmp3 === 1) {
            if (Down) {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tcmp #$7f","");
              pas.Optimize.asm65("\tseq","");
            } else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tcmp #$80","");
              pas.Optimize.asm65("\tseq","");
            };
          };
        } else if (Down) {
          var $tmp4 = CounterSize;
          if ($tmp4 === 1) {
            if ((forBPL & 1) !== 0) {
              pas.Optimize.asm65("\tbmi *+5","")}
             else if ((forBPL & 2) !== 0) {
              pas.Optimize.asm65("\tseq","")}
             else {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tcmp #$FF","");
              pas.Optimize.asm65("\tseq","");
            }}
           else if ($tmp4 === 2) {
            pas.Optimize.asm65("\tlda " + svar + "+1","");
            pas.Optimize.asm65("\tcmp #$FF","");
            pas.Optimize.asm65("\tseq","");
          } else if ($tmp4 === 4) {
            pas.Optimize.asm65("\tlda " + svar + "+3","");
            pas.Optimize.asm65("\tcmp #$FF","");
            pas.Optimize.asm65("\tseq","");
          };
        } else {
          pas.Optimize.asm65("\tseq","");
        };
        $impl.GenerateWhileDoEpilog();
      };
    };
    $impl.GenerateProgramProlog = function () {
      var i = 0;
      var j = 0;
      var tmp = false;
      var a = "";
      var header = "";
      if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
        tmp = pas.Common.optimize.use;
        pas.Common.optimize.use = false;
        $impl.Gen();
        $impl.asm65separator(false);
        pas.Optimize.asm65("; " + $mod.CompilerTitle(),"");
        $impl.asm65separator(false);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("STACKWIDTH\t= 16","");
        if (pas.Common.target.id === pas.Targets.TTargetID.A8) pas.Optimize.asm65("CODEORIGIN\t= $" + pas.SysUtils.IntToHex(pas.Common.CODEORIGIN_BASE,4),"");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("TRUE\t\t= " + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("TRUE")).Value),"");
        pas.Optimize.asm65("FALSE\t\t= " + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("FALSE")).Value),"");
        pas.Optimize.asm65("EOL\t\t= $" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("EOL")).Value,2),"");
        pas.Optimize.asm65("__BUFFER\t= $" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("__BUFFER")).Value,4),"");
        pas.Optimize.asm65("@BUF\t\t= __BUFFER","");
        $impl.asm65separator(true);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.ZPAGE_BASE,2),"");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("zpage","");
        pas.Optimize.asm65("","");
        if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
          pas.Optimize.asm65(".if .def(@vbxe_detect)","");
          pas.Optimize.asm65("fxptr\t.ds 2","; VBXE pointer");
          pas.Optimize.asm65(".fi","");
          pas.Optimize.asm65("","");
        };
        pas.Optimize.asm65(".if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)","");
        pas.Optimize.asm65("psptr\t.ds 2","; PROGRAMSTACK Pointer");
        pas.Optimize.asm65(".fi","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("bp\t.ds 2","");
        pas.Optimize.asm65("bp2\t.ds 2","");
        pas.Optimize.asm65("bp3\t= bp+1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("eax\t.ds 4",";8 bytes (aex + edx) -> divREAL");
        pas.Optimize.asm65("edx\t.ds 4","");
        pas.Optimize.asm65("ecx\t.ds 4","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("TMP","");
        pas.Optimize.asm65("ztmp","");
        pas.Optimize.asm65("ztmp8\t.ds 1","");
        pas.Optimize.asm65("ztmp9\t.ds 1","");
        pas.Optimize.asm65("ztmp10\t.ds 1","");
        pas.Optimize.asm65("ztmp11\t.ds 1","");
        if (pas.Common.STACK_BASE >= 0) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.STACK_BASE,4),"");
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("STACKORIGIN\t.ds STACKWIDTH*4","");
        pas.Optimize.asm65("zpend","");
        $impl.asm65separator(true);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("ax\t= eax","");
        pas.Optimize.asm65("al\t= eax","");
        pas.Optimize.asm65("ah\t= eax+1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("cx\t= ecx","");
        pas.Optimize.asm65("cl\t= ecx","");
        pas.Optimize.asm65("ch\t= ecx+1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("dx\t= edx","");
        pas.Optimize.asm65("dl\t= edx","");
        pas.Optimize.asm65("dh\t= edx+1","");
        if (pas.Common.target.id === pas.Targets.TTargetID.NEO) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("FP1MAN0 = VAR1_B0","");
          pas.Optimize.asm65("FP1MAN1 = VAR1_B1","");
          pas.Optimize.asm65("FP1MAN2 = VAR1_B2","");
          pas.Optimize.asm65("FP1MAN3 = VAR1_B3","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("FP2MAN0 = VAR2_B0","");
          pas.Optimize.asm65("FP2MAN1 = VAR2_B1","");
          pas.Optimize.asm65("FP2MAN2 = VAR2_B2","");
          pas.Optimize.asm65("FP2MAN3 = VAR2_B3","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("FPMAN0 = FP1MAN0","");
          pas.Optimize.asm65("FPMAN1 = FP1MAN1","");
          pas.Optimize.asm65("FPMAN2 = FP1MAN2","");
          pas.Optimize.asm65("FPMAN3 = FP1MAN3","");
        } else {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg eax","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("FP1MAN0\t.ds 1","");
          pas.Optimize.asm65("FP1MAN1\t.ds 1","");
          pas.Optimize.asm65("FP1MAN2\t.ds 1","");
          pas.Optimize.asm65("FP1MAN3\t.ds 1","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg edx","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("FP2MAN0\t.ds 1","");
          pas.Optimize.asm65("FP2MAN1\t.ds 1","");
          pas.Optimize.asm65("FP2MAN2\t.ds 1","");
          pas.Optimize.asm65("FP2MAN3\t.ds 1","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg ecx","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("FPMAN0\t.ds 1","");
          pas.Optimize.asm65("FPMAN1\t.ds 1","");
          pas.Optimize.asm65("FPMAN2\t.ds 1","");
          pas.Optimize.asm65("FPMAN3\t.ds 1","");
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg ztmp8","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FP1SGN\t.ds 1","");
        pas.Optimize.asm65("FP1EXP\t.ds 1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg ztmp10","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FP2SGN\t.ds 1","");
        pas.Optimize.asm65("FP2EXP\t.ds 1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg bp2","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("FPSGN\t.ds 1","");
        pas.Optimize.asm65("FPEXP\t.ds 1","");
        if ((pas.Common.target.id === pas.Targets.TTargetID.A8) && (pas.Common.LIBRARY_USE === false)) {
          if (pas.Common.RCLIBRARY) {
            pas.Optimize.asm65("","");
            pas.Optimize.asm65("\torg MAIN.SYSTEM.__PORTB_BANKS+$40","");
            pas.Optimize.asm65("\ticl 'atari\\xmsproc.asm'","");
          };
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.BASICOFF","");
          pas.Optimize.asm65("\torg CODEORIGIN","");
          pas.Optimize.asm65("\ticl 'atari\\basicoff.asm'","");
          pas.Optimize.asm65("\tini CODEORIGIN","");
          pas.Optimize.asm65("\t.fi","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.S_VBXE","");
          pas.Optimize.asm65("\topt h-","");
          pas.Optimize.asm65("\tins 'atari\\s_vbxe\\sdxld2.obx'","");
          pas.Optimize.asm65("\topt h+","");
          pas.Optimize.asm65("\t.fi","");
        };
        if (((rtl.length(pas.Common.resArray) - 1) > 0) && (pas.Common.target.id === pas.Targets.TTargetID.A8) && (pas.Common.LIBRARY_USE === false)) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg CODEORIGIN","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65(".local\tMAIN.@RESOURCE","");
          pas.Optimize.asm65(".endl","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65(".local\tRESOURCE","");
          pas.Optimize.asm65("\ticl 'atari\\resource.asm'","");
          pas.Optimize.asm65("\t?EXTDETECT = 0","");
          pas.Optimize.asm65("\t?VBXDETECT = 0","");
          pas.Optimize.asm65("","");
          for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
            i = $l;
            if (rtl.rcArrR(pas.Common.resArray,i).resStream === false) {
              a = "\t" + rtl.rcArrR(pas.Common.resArray,i).resType + " '" + rtl.rcArrR(pas.Common.resArray,i).resFile + "'" + " ";
              a = a + rtl.rcArrR(pas.Common.resArray,i).resFullName;
              for (j = 1; j <= 8; j++) a = a + " " + rtl.rcArrR(rtl.rcArrR(pas.Common.resArray,i).resPar,j - 1);
              pas.Optimize.asm65(a,"");
            };
          };
          pas.Optimize.asm65(".endl","");
        };
        $impl.asm65separator(true);
        if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\torg CODEORIGIN","");
        } else {
          for (var $in = pas.Common.target.header, $l1 = 0, $end1 = rtl.length($in) - 1; $l1 <= $end1; $l1++) {
            header = $in[$l1];
            if (header === "END") {
              break}
             else if (header !== "") {
              pas.Optimize.asm65("\t" + header,"")}
             else pas.Optimize.asm65("","");
          };
          if (pas.Common.target.id === pas.Targets.TTargetID.RAW) {
            pas.Optimize.asm65("","");
            pas.Optimize.asm65("\topt h-f+","");
            pas.Optimize.asm65("","");
            pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.target.codeorigin,4),"");
            pas.Optimize.asm65("\tjmp START","");
            pas.Optimize.asm65("","");
            pas.Common.CODEORIGIN_BASE = rtl.rc(pas.Common.target.codeorigin + 3,-2147483648,2147483647);
          } else if (pas.Common.target.id === pas.Targets.TTargetID.NEO) {
            pas.Optimize.asm65("","");
            pas.Optimize.asm65("\topt h-f+c+","");
            pas.Optimize.asm65("","");
            pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.target.codeorigin,4),"");
            pas.Optimize.asm65("\tjmp START","");
            pas.Optimize.asm65("","");
            pas.Common.CODEORIGIN_BASE = rtl.rc(pas.Common.target.codeorigin + 3,-2147483648,2147483647);
          };
          pas.Optimize.asm65("CODEORIGIN","");
        };
        for (var $l2 = 0, $end2 = pas.Common.NumStaticStrChars - 1; $l2 <= $end2; $l2++) {
          i = $l2;
          $impl.Gen();
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tSTATICDATA","");
        $impl.asm65separator(true);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("RTLIB","");
        if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
          pas.Optimize.asm65("\ticl 'rtl6502_a8.asm'","")}
         else pas.Optimize.asm65("\ticl 'rtl6502_" + pas.Utilities.AnsiLowerCase(pas.Common.target.Name) + ".asm'","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".print 'ZPAGE: ',zpage,'..',zpend-1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".print 'RTBUF: ',@buf,'..',@buf+255","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".print 'RTLIB: ',RTLIB,'..',*-1","");
        $impl.asm65separator(true);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("START","");
        if (pas.Common.LIBRARY_USE) pas.Optimize.asm65("\tstx MAIN.@regX+1","");
        pas.Optimize.asm65("\ttsx","");
        pas.Optimize.asm65("\tstx MAIN.@halt+1","");
        pas.Optimize.asm65("","");
        if ((pas.Common.target.id === pas.Targets.TTargetID.A8) && (pas.Common.LIBRARY_USE === false)) {
          pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.ROMOFF","");
          pas.Optimize.asm65("\ticl 'atari\\romoff.asm'","");
          pas.Optimize.asm65("\t.fi","");
          pas.Optimize.asm65("","");
        };
        if (pas.Common.FastMul > 0) {
          pas.Optimize.asm65("\tfmulinit","");
          pas.Optimize.asm65("","");
        };
        if (pas.Common.LIBRARY_USE === false) {
          pas.Optimize.asm65("VLEN\t= VARDATASIZE-VARINITSIZE","");
          pas.Optimize.asm65("VADR\t= DATAORIGIN+VARINITSIZE","");
          pas.Optimize.asm65("","");
          if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
            pas.Optimize.asm65("\tift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)","");
            pas.Optimize.asm65("\tert 'Invalid memory address range ',VADR","");
            pas.Optimize.asm65("\teif","");
            pas.Optimize.asm65("","");
          };
          pas.Optimize.asm65("\tift (VLEN > 0) && (VLEN <= 256)","");
          pas.Optimize.asm65("\tldx #256-VLEN","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tsta:rne VADR+VLEN-256,x+","");
          pas.Optimize.asm65("\teli VLEN>256","");
          pas.Optimize.asm65("\tm@init","");
          pas.Optimize.asm65("\teif","");
          pas.Optimize.asm65("","");
        };
        pas.Optimize.asm65(".ifdef psptr","");
        pas.Optimize.asm65("\tmwa #PROGRAMSTACK psptr","");
        pas.Optimize.asm65(".fi","");
        pas.Optimize.asm65("","");
        if (pas.Common.target.id in rtl.createSet(pas.Targets.TTargetID.C64,pas.Targets.TTargetID.C4P)) {
          pas.Optimize.asm65("\tlda #$0e","");
          pas.Optimize.asm65("\tjsr $ffd2","; shifted charset");
          pas.Optimize.asm65("","");
        };
        if (pas.Common.target.id === pas.Targets.TTargetID.NEO) {
          pas.Optimize.asm65("\tstz $FF04","; set radians as default");
          pas.Optimize.asm65("\tmva #35 $FF01","");
          pas.Optimize.asm65("\tmva #4  $FF00","");
        };
        if ((pas.Common.target.id === pas.Targets.TTargetID.A8) && (pas.Common.LIBRARY_USE === false)) {
          pas.Optimize.asm65("\tldx #$00","; X = 0");
          pas.Optimize.asm65("\tstx bp","; BP = 0");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tstx audctl","; reset POKEY");
          pas.Optimize.asm65("\tstx audctl+$10","");
          pas.Optimize.asm65("\tlda #3","");
          pas.Optimize.asm65("\tsta skctl","");
          pas.Optimize.asm65("\tsta skctl+$10","");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tdex","; X = 255");
          pas.Optimize.asm65("","");
        } else {
          pas.Optimize.asm65("\tldx #$00","");
          pas.Optimize.asm65("\tstx bp","; BP = 0");
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tdex","; X = 255");
          pas.Optimize.asm65("","");
        };
        if (pas.Common.target.cpu !== pas.Targets.TCPU.CPU_6502) pas.Optimize.asm65("\topt c+","");
        pas.Optimize.asm65("\tUNITINITIALIZATION","");
        pas.Optimize.asm65("","");
        pas.Common.optimize.use = tmp;
      };
    };
    $impl.GenerateProgramEpilog = function (ExitCode) {
      rtl.rc(ExitCode,0,255);
      $impl.Gen();
      $impl.Gen();
      pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(ExitCode,2),"");
      pas.Optimize.asm65("\tjmp @halt","");
    };
    $impl.GenerateDeclarationProlog = function () {
      pas.Common.CodePosStackTop += 1;
      rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),"");
    };
    $impl.GenerateDeclarationEpilog = function () {
      $impl.GenerateIfThenEpilog();
    };
    $impl.GenerateRead = function () {
      pas.Optimize.asm65("\t@getline","");
    };
    $impl.GenerateWriteString = function (Address, IndirectionLevel, ValueType) {
      rtl.rc(Address,0,65535);
      rtl.rc(IndirectionLevel,0,255);
      rtl.rc(ValueType,0,191);
      pas.Optimize.asm65("","");
      var $tmp = IndirectionLevel;
      if ($tmp === 7) {
        pas.Optimize.asm65("\tjsr @printBOOLEAN","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 6) {
        pas.Optimize.asm65("\t@printCHAR","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 9) {
        pas.Optimize.asm65("\tjsr @printSHORTREAL","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 8) {
        pas.Optimize.asm65("\tjsr @printREAL","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 11) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @FTOA.I","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @FTOA.I+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta @FTOA.I+2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta @FTOA.I+3","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        pas.Optimize.asm65("\tjsr @FTOA","");
      } else if ($tmp === 10) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_F2A.I","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_F2A.I+1","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        pas.Optimize.asm65("\tjsr @F16_F2A","");
      } else if ($tmp === 0) {
        var $tmp1 = pas.Datatypes.GetDataSize(ValueType);
        if ($tmp1 === 1) {
          if (ValueType === pas.Tokens.TTokenKind.SHORTINTTOK) {
            pas.Optimize.asm65("\tjsr @printSHORTINT","")}
           else pas.Optimize.asm65("\tjsr @printBYTE","")}
         else if ($tmp1 === 2) {
          if (ValueType === pas.Tokens.TTokenKind.SMALLINTTOK) {
            pas.Optimize.asm65("\tjsr @printSMALLINT","")}
           else pas.Optimize.asm65("\tjsr @printWORD","")}
         else if ($tmp1 === 4) if (ValueType === pas.Tokens.TTokenKind.INTEGERTOK) {
          pas.Optimize.asm65("\tjsr @printINT","")}
         else pas.Optimize.asm65("\tjsr @printCARD","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 1) {
        pas.Optimize.asm65("\t@printSTRING #CODEORIGIN+$" + pas.SysUtils.IntToHex(Address - 256,4),"");
      } else if ($tmp === 2) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tjsr @printSTRING","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      } else if ($tmp === 12) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tjsr @printPCHAR","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      };
    };
    $impl.GenerateUnaryOperation = function (op, ValType) {
      rtl.rc(op,0,191);
      rtl.rc(ValType,0,191);
      var $tmp = op;
      if ($tmp === pas.Tokens.TTokenKind.PLUSTOK) {}
      else if ($tmp === pas.Tokens.TTokenKind.MINUSTOK) {
        $impl.Gen();
        $impl.Gen();
        $impl.Gen();
        if (ValType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\teor #$80","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        } else if (ValType === pas.Tokens.TTokenKind.SINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\teor #$80","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        } else {
          var $tmp1 = pas.Datatypes.GetDataSize(ValType);
          if ($tmp1 === 1) {
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp1 === 2) {
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc #$00","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp1 === 4) {
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tsbc :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
        };
      } else if ($tmp === pas.Tokens.TTokenKind.NOTTOK) {
        $impl.Gen();
        $impl.Gen();
        $impl.Gen();
        if (ValType === pas.Tokens.TTokenKind.BOOLEANTOK) {
          pas.Optimize.asm65("\tldy #1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tbeq @+","");
          pas.Optimize.asm65("\tdey","");
          pas.Optimize.asm65("@","");
          pas.Optimize.asm65("\tsty :STACKORIGIN,x","");
        } else {
          $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType);
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        };
      };
    };
    $impl.GenerateBinaryOperation = function (op, ResultType) {
      rtl.rc(op,0,191);
      rtl.rc(ResultType,0,191);
      $impl.Gen();
      $impl.Gen();
      $impl.Gen();
      var $tmp = op;
      if ($tmp === pas.Tokens.TTokenKind.PLUSTOK) {
        if (ResultType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_ADD.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_ADD.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_ADD.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_ADD.A+1","");
          pas.Optimize.asm65("\tjsr @F16_ADD","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if (ResultType === pas.Tokens.TTokenKind.SINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :FP2MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP2MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP2MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP2MAN3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :FP1MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP1MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP1MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP1MAN3","");
          pas.Optimize.asm65("\tjsr @FADD","");
          pas.Optimize.asm65("\tlda :FPMAN0","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :FPMAN1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :FPMAN2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :FPMAN3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        } else {
          var $tmp1 = pas.Datatypes.GetDataSize(ResultType);
          if ($tmp1 === 1) {
            $impl.a65(pas.CompilerTypes.TCode65.addAL_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp1 === 2) {
            $impl.a65(pas.CompilerTypes.TCode65.addAX_CX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp1 === 4) $impl.a65(pas.CompilerTypes.TCode65.addEAX_ECX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === pas.Tokens.TTokenKind.MINUSTOK) {
        if (ResultType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_SUB.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_SUB.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_SUB.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_SUB.A+1","");
          pas.Optimize.asm65("\tjsr @F16_SUB","");
          pas.Optimize.asm65("\tlda :eax","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :eax+1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if (ResultType === pas.Tokens.TTokenKind.SINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :FP2MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP2MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP2MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP2MAN3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta :FP1MAN0","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :FP1MAN1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :FP1MAN2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :FP1MAN3","");
          pas.Optimize.asm65("\tjsr @FSUB","");
          pas.Optimize.asm65("\tlda :FPMAN0","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :FPMAN1","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :FPMAN2","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :FPMAN3","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        } else {
          var $tmp2 = pas.Datatypes.GetDataSize(ResultType);
          if ($tmp2 === 1) {
            $impl.a65(pas.CompilerTypes.TCode65.subAL_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp2 === 2) {
            $impl.a65(pas.CompilerTypes.TCode65.subAX_CX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp2 === 4) $impl.a65(pas.CompilerTypes.TCode65.subEAX_ECX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === pas.Tokens.TTokenKind.MULTOK) {
        if (ResultType in pas.Datatypes.RealTypes) {
          var $tmp3 = ResultType;
          if ($tmp3 === pas.Tokens.TTokenKind.SHORTREALTOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_MUL.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_MUL.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_MUL.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_MUL.A+1","");
            pas.Optimize.asm65("\tjsr @SHORTREAL_MUL","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          } else if ($tmp3 === pas.Tokens.TTokenKind.REALTOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.B+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.B+3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_MUL.A+3","");
            pas.Optimize.asm65("\tjsr @REAL_MUL","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          } else if ($tmp3 === pas.Tokens.TTokenKind.SINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :FP2MAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FP2MAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FP2MAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FP2MAN3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :FP1MAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FP1MAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FP1MAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FP1MAN3","");
            pas.Optimize.asm65("\tjsr @FMUL","");
            pas.Optimize.asm65("\tlda :FPMAN0","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :FPMAN1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :FPMAN2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :FPMAN3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          } else if ($tmp3 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_MUL.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_MUL.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @F16_MUL.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_MUL.A+1","");
            pas.Optimize.asm65("\tjsr @F16_MUL","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          };
        } else {
          if (ResultType in pas.Datatypes.SignedOrdinalTypes) {
            var $tmp4 = ResultType;
            if ($tmp4 === pas.Tokens.TTokenKind.SHORTINTTOK) {
              pas.Optimize.asm65("\tjsr mulSHORTINT","")}
             else if ($tmp4 === pas.Tokens.TTokenKind.SMALLINTTOK) {
              pas.Optimize.asm65("\tjsr mulSMALLINT","")}
             else if ($tmp4 === pas.Tokens.TTokenKind.INTEGERTOK) pas.Optimize.asm65("\tjsr mulINTEGER","");
          } else {
            var $tmp5 = pas.Datatypes.GetDataSize(ResultType);
            if ($tmp5 === 1) {
              pas.Optimize.asm65("\tjsr imulBYTE","")}
             else if ($tmp5 === 2) {
              pas.Optimize.asm65("\tjsr imulWORD","")}
             else if ($tmp5 === 4) pas.Optimize.asm65("\tjsr imulCARD","");
            if (pas.Datatypes.GetDataSize(ResultType) === 1) {
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            } else {
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
            };
          };
        };
      } else if (($tmp === pas.Tokens.TTokenKind.DIVTOK) || ($tmp === pas.Tokens.TTokenKind.IDIVTOK) || ($tmp === pas.Tokens.TTokenKind.MODTOK)) {
        if (ResultType in pas.Datatypes.RealTypes) {
          var $tmp6 = ResultType;
          if ($tmp6 === pas.Tokens.TTokenKind.SHORTREALTOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_DIV.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_DIV.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_DIV.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @SHORTREAL_DIV.A+1","");
            pas.Optimize.asm65("\tjsr @SHORTREAL_DIV","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          } else if ($tmp6 === pas.Tokens.TTokenKind.REALTOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.B+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.B+3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_DIV.A+3","");
            pas.Optimize.asm65("\tjsr @REAL_DIV","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          } else if ($tmp6 === pas.Tokens.TTokenKind.SINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :FP2MAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FP2MAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FP2MAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FP2MAN3","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta :FP1MAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FP1MAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FP1MAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FP1MAN3","");
            pas.Optimize.asm65("\tjsr @FDIV","");
            pas.Optimize.asm65("\tlda :FPMAN0","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :FPMAN1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :FPMAN2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :FPMAN3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
          } else if ($tmp6 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_DIV.B","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_DIV.B+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tsta @F16_DIV.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_DIV.A+1","");
            pas.Optimize.asm65("\tjsr @F16_DIV","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          };
        } else {
          if (ResultType in pas.Datatypes.SignedOrdinalTypes) {
            var $tmp7 = ResultType;
            if ($tmp7 === pas.Tokens.TTokenKind.SHORTINTTOK) {
              if (op === pas.Tokens.TTokenKind.MODTOK) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @SHORTINT.MOD.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @SHORTINT.MOD.A","");
                pas.Optimize.asm65("\tjsr @SHORTINT.MOD","");
                pas.Optimize.asm65("\tlda @SHORTINT.MOD.RESULT","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              } else {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @SHORTINT.DIV.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @SHORTINT.DIV.A","");
                pas.Optimize.asm65("\tjsr @SHORTINT.DIV","");
                pas.Optimize.asm65("\tlda :eax","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              }}
             else if ($tmp7 === pas.Tokens.TTokenKind.SMALLINTTOK) {
              if (op === pas.Tokens.TTokenKind.MODTOK) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.MOD.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.MOD.B+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.MOD.A","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.MOD.A+1","");
                pas.Optimize.asm65("\tjsr @SMALLINT.MOD","");
                pas.Optimize.asm65("\tlda @SMALLINT.MOD.RESULT","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda @SMALLINT.MOD.RESULT+1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              } else {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.DIV.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.DIV.B+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.DIV.A","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @SMALLINT.DIV.A+1","");
                pas.Optimize.asm65("\tjsr @SMALLINT.DIV","");
                pas.Optimize.asm65("\tlda :eax","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda :eax+1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              }}
             else if ($tmp7 === pas.Tokens.TTokenKind.INTEGERTOK) if (op === pas.Tokens.TTokenKind.MODTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.B+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.B+3","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.A+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.A+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @INTEGER.MOD.A+3","");
              pas.Optimize.asm65("\tjsr @INTEGER.MOD","");
              pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda @INTEGER.MOD.RESULT+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.B+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.B+3","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.A+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.A+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @INTEGER.DIV.A+3","");
              pas.Optimize.asm65("\tjsr @INTEGER.DIV","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
            };
          } else {
            var $tmp8 = ResultType;
            if ($tmp8 === pas.Tokens.TTokenKind.BYTETOK) {
              if (op === pas.Tokens.TTokenKind.MODTOK) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @BYTE.MOD.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @BYTE.MOD.A","");
                pas.Optimize.asm65("\tjsr @BYTE.MOD","");
                pas.Optimize.asm65("\tlda @BYTE.MOD.RESULT","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              } else {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @BYTE.DIV.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @BYTE.DIV.A","");
                pas.Optimize.asm65("\tjsr @BYTE.DIV","");
                pas.Optimize.asm65("\tlda :eax","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              }}
             else if ($tmp8 === pas.Tokens.TTokenKind.WORDTOK) {
              if (op === pas.Tokens.TTokenKind.MODTOK) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @WORD.MOD.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @WORD.MOD.B+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @WORD.MOD.A","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @WORD.MOD.A+1","");
                pas.Optimize.asm65("\tjsr @WORD.MOD","");
                pas.Optimize.asm65("\tlda @WORD.MOD.RESULT","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda @WORD.MOD.RESULT+1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              } else {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @WORD.DIV.B","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @WORD.DIV.B+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tsta @WORD.DIV.A","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta @WORD.DIV.A+1","");
                pas.Optimize.asm65("\tjsr @WORD.DIV","");
                pas.Optimize.asm65("\tlda :eax","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda :eax+1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              }}
             else if ($tmp8 === pas.Tokens.TTokenKind.CARDINALTOK) if (op === pas.Tokens.TTokenKind.MODTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.B+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.B+3","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.A+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.A+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.MOD.A+3","");
              pas.Optimize.asm65("\tjsr @CARDINAL.MOD","");
              pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda @CARDINAL.MOD.RESULT+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.B","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.B+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.B+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.B+3","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.A+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.A+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @CARDINAL.DIV.A+3","");
              pas.Optimize.asm65("\tjsr @CARDINAL.DIV","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
            };
          };
        };
      } else if ($tmp === pas.Tokens.TTokenKind.SHLTOK) {
        if (ResultType in pas.Datatypes.SignedOrdinalTypes) {
          var $tmp9 = pas.Datatypes.GetDataSize(ResultType);
          if ($tmp9 === 1) {
            pas.Optimize.asm65("\tjsr @expandToCARD1.SHORT","");
            $impl.a65(pas.CompilerTypes.TCode65.shlEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          } else if ($tmp9 === 2) {
            pas.Optimize.asm65("\tjsr @expandToCARD1.SMALL","");
            $impl.a65(pas.CompilerTypes.TCode65.shlEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          } else if ($tmp9 === 4) $impl.a65(pas.CompilerTypes.TCode65.shlEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else {
          var $tmp10 = pas.Datatypes.GetDataSize(ResultType);
          if ($tmp10 === 1) {
            $impl.a65(pas.CompilerTypes.TCode65.shlAL_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp10 === 2) {
            $impl.a65(pas.CompilerTypes.TCode65.shlAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp10 === 4) $impl.a65(pas.CompilerTypes.TCode65.shlEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === pas.Tokens.TTokenKind.SHRTOK) {
        if (ResultType in pas.Datatypes.SignedOrdinalTypes) {
          var $tmp11 = pas.Datatypes.GetDataSize(ResultType);
          if ($tmp11 === 1) {
            pas.Optimize.asm65("\tjsr @expandToCARD1.SHORT","");
            $impl.a65(pas.CompilerTypes.TCode65.shrEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          } else if ($tmp11 === 2) {
            pas.Optimize.asm65("\tjsr @expandToCARD1.SMALL","");
            $impl.a65(pas.CompilerTypes.TCode65.shrEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          } else if ($tmp11 === 4) $impl.a65(pas.CompilerTypes.TCode65.shrEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else {
          var $tmp12 = pas.Datatypes.GetDataSize(ResultType);
          if ($tmp12 === 1) {
            $impl.a65(pas.CompilerTypes.TCode65.shrAL_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp12 === 2) {
            $impl.a65(pas.CompilerTypes.TCode65.shrAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0)}
           else if ($tmp12 === 4) $impl.a65(pas.CompilerTypes.TCode65.shrEAX_CL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        };
      } else if ($tmp === pas.Tokens.TTokenKind.ANDTOK) {
        var $tmp13 = pas.Datatypes.GetDataSize(ResultType);
        if ($tmp13 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        } else if ($tmp13 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if ($tmp13 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tand :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        };
      } else if ($tmp === pas.Tokens.TTokenKind.ORTOK) {
        var $tmp14 = pas.Datatypes.GetDataSize(ResultType);
        if ($tmp14 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        } else if ($tmp14 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if ($tmp14 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tora :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        };
      } else if ($tmp === pas.Tokens.TTokenKind.XORTOK) {
        var $tmp15 = pas.Datatypes.GetDataSize(ResultType);
        if ($tmp15 === 1) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        } else if ($tmp15 === 2) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        } else if ($tmp15 === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\teor :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        };
      };
      $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
    };
    $impl.GenerateRelationString = function (relation, LeftValType, RightValType) {
      rtl.rc(relation,0,191);
      rtl.rc(LeftValType,0,191);
      rtl.rc(RightValType,0,191);
      $impl.Gen();
      pas.Optimize.asm65("\tldy #1","");
      $impl.Gen();
      if ((LeftValType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (RightValType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING.A+1","");
        pas.Optimize.asm65("\tjsr @cmpSTRING","");
      } else if (LeftValType === pas.Tokens.TTokenKind.CHARTOK) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @cmpCHAR2STRING.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @cmpCHAR2STRING.B+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @cmpCHAR2STRING.A","");
        pas.Optimize.asm65("\tjsr @cmpCHAR2STRING","");
      } else if (RightValType === pas.Tokens.TTokenKind.CHARTOK) {
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING2CHAR.B","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING2CHAR.A","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @cmpSTRING2CHAR.A+1","");
        pas.Optimize.asm65("\tjsr @cmpSTRING2CHAR","");
      };
      $impl.GenerateRelationOperation(relation,pas.Tokens.TTokenKind.BYTETOK);
      $impl.Gen();
      pas.Optimize.asm65("\tdey","");
      pas.Optimize.asm65("@","");
      pas.Optimize.asm65("\tsty :STACKORIGIN-1,x","");
      $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
    };
    $impl.GenerateRelation = function (relation, ValType) {
      rtl.rc(relation,0,191);
      rtl.rc(ValType,0,191);
      $impl.Gen();
      if (ValType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
        var $tmp = relation;
        if ($tmp === pas.Tokens.TTokenKind.EQTOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.A+1","");
          pas.Optimize.asm65("\tjsr @F16_EQ","");
          pas.Optimize.asm65("\tdex","");
        } else if (($tmp === pas.Tokens.TTokenKind.NETOK) || ($tmp === pas.Tokens.TTokenKind.UNTYPETOK)) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_EQ.A+1","");
          pas.Optimize.asm65("\tjsr @F16_EQ","");
          pas.Optimize.asm65("\tdex","");
          pas.Optimize.asm65("\teor #$01","");
        } else if ($tmp === pas.Tokens.TTokenKind.GTTOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_GT.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GT.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_GT.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GT.A+1","");
          pas.Optimize.asm65("\tjsr @F16_GT","");
          pas.Optimize.asm65("\tdex","");
        } else if ($tmp === pas.Tokens.TTokenKind.LTTOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_GT.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GT.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_GT.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GT.A+1","");
          pas.Optimize.asm65("\tjsr @F16_GT","");
          pas.Optimize.asm65("\tdex","");
        } else if ($tmp === pas.Tokens.TTokenKind.GETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.A+1","");
          pas.Optimize.asm65("\tjsr @F16_GTE","");
          pas.Optimize.asm65("\tdex","");
        } else if ($tmp === pas.Tokens.TTokenKind.LETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @F16_GTE.A+1","");
          pas.Optimize.asm65("\tjsr @F16_GTE","");
          pas.Optimize.asm65("\tdex","");
        };
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
      } else {
        if (ValType === pas.Tokens.TTokenKind.SINGLETOK) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tsta @FCMPL.A","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @FCMPL.A+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @FCMPL.A+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @FCMPL.A+3","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsta @FCMPL.B","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsta @FCMPL.B+1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta @FCMPL.B+2","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta @FCMPL.B+3","");
        };
        pas.Optimize.asm65("\tldy #1","");
        $impl.Gen();
        var $tmp1 = ValType;
        if (($tmp1 === pas.Tokens.TTokenKind.BYTETOK) || ($tmp1 === pas.Tokens.TTokenKind.CHARTOK) || ($tmp1 === pas.Tokens.TTokenKind.BOOLEANTOK)) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
        } else if ($tmp1 === pas.Tokens.TTokenKind.SHORTINTTOK) {
          pas.Optimize.asm65("\t.LOCAL","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tsub :STACKORIGIN,x","");
          pas.Optimize.asm65("\tbeq L5","");
          pas.Optimize.asm65("\tbvc L5","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("L5","");
          pas.Optimize.asm65("\t.ENDL","");
        } else if (($tmp1 === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp1 === pas.Tokens.TTokenKind.SHORTREALTOK)) {
          pas.Optimize.asm65("\t.LOCAL","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsub :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne L4","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
          pas.Optimize.asm65("\tbeq L5","");
          pas.Optimize.asm65("\tlda #$00","");
          pas.Optimize.asm65("\tadc #$FF","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L4\tbvc L5","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("L5","");
          pas.Optimize.asm65("\t.ENDL","");
        } else if ($tmp1 === pas.Tokens.TTokenKind.SINGLETOK) {
          pas.Optimize.asm65("\tjsr @FCMPL","")}
         else if (($tmp1 === pas.Tokens.TTokenKind.REALTOK) || ($tmp1 === pas.Tokens.TTokenKind.INTEGERTOK)) {
          pas.Optimize.asm65("\t.LOCAL","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsub :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tbne L4","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tbne L1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne L1","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
          pas.Optimize.asm65("L1\tbeq L5","");
          pas.Optimize.asm65("\tbcs L3","");
          pas.Optimize.asm65("\tlda #$FF","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L3\tlda #$01","");
          pas.Optimize.asm65("\tbne L5","");
          pas.Optimize.asm65("L4\tbvc L5","");
          pas.Optimize.asm65("\teor #$FF","");
          pas.Optimize.asm65("\tora #$01","");
          pas.Optimize.asm65("L5","");
          pas.Optimize.asm65("\t.ENDL","");
        } else if (($tmp1 === pas.Tokens.TTokenKind.WORDTOK) || ($tmp1 === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp1 === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
          pas.Optimize.asm65("@","");
        } else {
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tbne @+","");
          pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
          pas.Optimize.asm65("\tcmp :STACKORIGIN,x","");
          pas.Optimize.asm65("@","");
        };
        $impl.GenerateRelationOperation(relation,ValType);
        $impl.Gen();
        pas.Optimize.asm65("\tdey","");
        pas.Optimize.asm65("@","");
        pas.Optimize.asm65("\tsty :STACKORIGIN-1,x","");
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
      };
    };
    $impl.SafeCompileConstExpression = function (i, ConstVal, ValType, VarType, Err, War) {
      rtl.rc(i.get(),-2147483648,2147483647);
      rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
      rtl.rc(ValType.get(),0,191);
      rtl.rc(VarType,0,191);
      var Result = false;
      var j = 0;
      j = rtl.rc(i.get(),-2147483648,2147483647);
      pas.Common.isError = false;
      pas.Common.isConst = true;
      i.set(pas.Parser.CompileConstExpression(i.get(),ConstVal,ValType,VarType,Err,War));
      Result = !pas.Common.isError;
      pas.Common.isConst = false;
      pas.Common.isError = false;
      if (!Result) i.set(j);
      return Result;
    };
    $impl.CompileArrayIndex = function (i, IdentIndex, VarType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(VarType.get(),0,191);
      var Result = 0;
      var ConstVal = 0;
      var ActualParamType = 0;
      var ArrayIndexType = 0;
      var Size = 0;
      var NumAllocElements = 0;
      var NumAllocElements_ = 0;
      var j = 0;
      var yes = false;
      var ShortArrayIndex = false;
      if (pas.Common.optimize.use === false) $impl.StartOptimization(i);
      if (pas.Common.IdentifierAt(IdentIndex).isStriped) {
        Size = 1}
       else Size = rtl.rc(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),0,255);
      ShortArrayIndex = false;
      VarType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
      if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.DEREFERENCEARRAYTOK)) {
        NumAllocElements = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements & 0xFFFF,0,4294967295);
        NumAllocElements_ = rtl.rc(rtl.lw(pas.Common.IdentifierAt(IdentIndex).NestedNumAllocElements >>> 16),0,4294967295);
        if (NumAllocElements_ > 0) {
          if (((NumAllocElements * NumAllocElements_) > 1) && ((NumAllocElements * NumAllocElements_ * Size) < 256)) ShortArrayIndex = true;
        } else if ((NumAllocElements > 1) && ((NumAllocElements * Size) < 256)) ShortArrayIndex = true;
      } else {
        NumAllocElements = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements,0,4294967295);
        NumAllocElements_ = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,0,4294967295);
      };
      if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK,pas.Tokens.TTokenKind.PROCVARTOK)) NumAllocElements_ = 0;
      ActualParamType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
      j = rtl.rc(i + 2,-2147483648,2147483647);
      if ($impl.SafeCompileConstExpression({get: function () {
          return j;
        }, set: function (v) {
          rtl.rc(v,-2147483648,2147483647);
          j = v;
        }},{get: function () {
          return ConstVal;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          ConstVal = v;
        }},{get: function () {
          return ArrayIndexType;
        }, set: function (v) {
          rtl.rc(v,0,191);
          ArrayIndexType = v;
        }},ActualParamType,false,true)) {
        i = rtl.rc(j,-2147483648,2147483647);
        pas.Common.CheckArrayIndex(i,IdentIndex,ConstVal,ArrayIndexType);
        ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
        ShortArrayIndex = false;
        if (NumAllocElements_ > 0) {
          $impl.Push(ConstVal * NumAllocElements_ * Size,0,pas.Datatypes.GetDataSize(ArrayIndexType),0,0)}
         else $impl.Push(ConstVal * Size,0,pas.Datatypes.GetDataSize(ArrayIndexType),0,0);
      } else {
        i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
            return ArrayIndexType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ArrayIndexType = v;
          }},ActualParamType),-2147483648,2147483647);
        pas.Common.GetCommonType(i,ActualParamType,ArrayIndexType);
        var $tmp = ArrayIndexType;
        if ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) {
          ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.BYTETOK,0,191)}
         else if ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) {
          ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191)}
         else if ($tmp === pas.Tokens.TTokenKind.INTEGERTOK) ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.CARDINALTOK,0,191);
        if (pas.Datatypes.GetDataSize(ArrayIndexType) === 4) {
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
          pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
          pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        };
        if (pas.Datatypes.GetDataSize(ArrayIndexType) === 1) {
          $impl.ExpandParam(pas.Tokens.TTokenKind.WORDTOK,ArrayIndexType);
        } else ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
        if ((Size > 1) || (pas.Parser.Elements(IdentIndex) > 256) || (pas.Parser.Elements(IdentIndex) in rtl.createSet(0,1))) {
          ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
        };
        if (NumAllocElements_ > 0) {
          $impl.Push(rtl.rc(NumAllocElements_ * Size,-2147483648,2147483647),0,pas.Datatypes.GetDataSize(ArrayIndexType),0,0);
          $impl.GenerateBinaryOperation(pas.Tokens.TTokenKind.MULTOK,ArrayIndexType);
        } else if (pas.Common.IdentifierAt(IdentIndex).isStriped === false) $impl.GenerateIndexShift(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0);
      };
      yes = false;
      if (NumAllocElements_ > 0) {
        if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.CBRACKETTOK) && (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.OBRACKETTOK)) {
          yes = false;
          $impl.Push(0,0,pas.Datatypes.GetDataSize(ArrayIndexType),0,0);
          $impl.GenerateBinaryOperation(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.WORDTOK);
          VarType.set(pas.Tokens.TTokenKind.ARRAYTOK);
        } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.CBRACKETTOK) {
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OBRACKETTOK);
          yes = true;
        } else {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
          yes = true;
        };
      } else pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
      if (yes) {
        j = rtl.rc(i + 2,-2147483648,2147483647);
        if ($impl.SafeCompileConstExpression({get: function () {
            return j;
          }, set: function (v) {
            rtl.rc(v,-2147483648,2147483647);
            j = v;
          }},{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ArrayIndexType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ArrayIndexType = v;
          }},ActualParamType,false,true)) {
          i = rtl.rc(j,-2147483648,2147483647);
          pas.Common.CheckArrayIndex_(i,IdentIndex,ConstVal,ArrayIndexType);
          ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
          ShortArrayIndex = false;
          $impl.Push(ConstVal * Size,0,pas.Datatypes.GetDataSize(ArrayIndexType),0,0);
        } else {
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ArrayIndexType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ArrayIndexType = v;
            }},ActualParamType),-2147483648,2147483647);
          pas.Common.GetCommonType(i,ActualParamType,ArrayIndexType);
          var $tmp1 = ArrayIndexType;
          if ($tmp1 === pas.Tokens.TTokenKind.SHORTINTTOK) {
            ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.BYTETOK,0,191)}
           else if ($tmp1 === pas.Tokens.TTokenKind.SMALLINTTOK) {
            ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191)}
           else if ($tmp1 === pas.Tokens.TTokenKind.INTEGERTOK) ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.CARDINALTOK,0,191);
          if (pas.Datatypes.GetDataSize(ArrayIndexType) === 4) {
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
          if (pas.Datatypes.GetDataSize(ArrayIndexType) === 1) {
            $impl.ExpandParam(pas.Tokens.TTokenKind.WORDTOK,ArrayIndexType);
            ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
          } else ArrayIndexType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
          if (pas.Common.IdentifierAt(IdentIndex).isStriped === false) $impl.GenerateIndexShift(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0);
        };
        $impl.GenerateBinaryOperation(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.WORDTOK);
      };
      if (ShortArrayIndex) {
        pas.Optimize.asm65("\tlda #$00","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
      };
      Result = rtl.rc(i,-2147483648,2147483647);
      return Result;
    };
    $impl.CompileAddress = function (i, ValType, AllocElementType, VarPass) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ValType.get(),0,191);
      rtl.rc(AllocElementType.get(),0,191);
      var Result = 0;
      var IdentIndex = 0;
      var IdentTemp = 0;
      var j = 0;
      var Name = "";
      var svar = "";
      var lab = "";
      var NumAllocElements = 0;
      var rec = false;
      var dereference = false;
      var address = false;
      var $ir = rtl.createIntfRefs();
      try {
        Result = rtl.rc(i,-2147483648,2147483647);
        lab = "";
        rec = false;
        dereference = false;
        address = false;
        AllocElementType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) {
          if (VarPass) pas.Messages.Error$1(i + 1,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantAsignValuesToAnAddress,"Can't assign values to an address","","","","","","","","","",""]),pas.Messages.IMessage)));
          address = true;
          i += 1;
        };
        if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.PCHARTOK) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OPARTOK)) {
          j = rtl.rc($impl.CompileExpression(i + 3,ValType,pas.Tokens.TTokenKind.POINTERTOK),-2147483648,2147483647);
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (pas.Common.TokenAt(j + 2).Kind !== pas.Tokens.TTokenKind.DEREFERENCETOK) pas.Messages.Error$1(i + 3,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.CantAsignValuesToAnAddress,"Can't assign values to an address","","","","","","","","","",""]),pas.Messages.IMessage)));
          i = rtl.rc(j + 1,-2147483648,2147483647);
        } else if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
          if (IdentIndex > 0) {
            if (!(pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK,pas.Tokens.TTokenKind.ADDRESSTOK))) {
              pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected)}
             else {
              if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.CONSTTOK) if (!((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0))) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp);
              if (pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
                Name = $impl.GetLocalName(IdentIndex,"");
                if (pas.Common.IdentifierAt(IdentIndex).isOverload) Name = Name + "." + $impl.GetOverloadName(IdentIndex);
                $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                pas.Optimize.asm65("\tmva <" + Name + " :STACKORIGIN,x","");
                pas.Optimize.asm65("\tmva >" + Name + " :STACKORIGIN+STACKWIDTH,x","");
                if (pas.Common.pass === pas.CompilerTypes.TPass.CALL_DETERMINATION) $impl.AddCallGraphChild(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),pas.Common.IdentifierAt(IdentIndex).ProcAsBlock);
              } else if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) || ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK)))) {
                i += 1;
                i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,AllocElementType),-2147483648,2147483647);
                if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
                  NumAllocElements = 0}
                 else NumAllocElements = rtl.rc(pas.Parser.Elements(IdentIndex),0,4294967295);
                svar = $impl.GetLocalName(IdentIndex,"");
                if (pas.System.Pos(".",svar) > 0) {
                  lab = $impl.ExtractName(IdentIndex,svar);
                  rec = pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(lab)).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK;
                };
                if (rec) {
                  pas.Optimize.asm65("\tlda " + lab,"");
                  pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda " + lab + "+1","");
                  pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tadc #$00","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                } else if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || ((NumAllocElements * pas.Datatypes.GetDataSize(AllocElementType.get())) > 256) || (NumAllocElements in rtl.createSet(0,1))) {
                  pas.Optimize.asm65("\tlda " + svar,"");
                  pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda " + svar + "+1","");
                  pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                } else {
                  pas.Optimize.asm65("\tlda <" + $impl.GetLocalName(IdentIndex,"adr."),"");
                  pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda >" + $impl.GetLocalName(IdentIndex,"adr."),"");
                  pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                };
                pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
              } else if ((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK,pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) || (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || (VarPass && (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers))) {
                dereference = pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK;
                if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.DATAORIGINOFFSET)) {
                  $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,5,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
                } else if (dereference) {
                  svar = $impl.GetLocalName(IdentIndex,"");
                  if (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.DOTTOK)) {
                    pas.Common.CheckTok(i + 4,pas.Tokens.TTokenKind.IDENTTOK);
                    IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 4).Name),-2147483648,2147483647);
                    if (IdentTemp < 0) pas.Messages.Error$1(i + 4,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.TokenAt(i + 4).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                    AllocElementType.set(IdentTemp >>> 16);
                    IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(svar + "." + pas.Common.TokenAt(i + 4).Name),-2147483648,2147483647);
                    if (IdentTemp === 0) pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.UnknownIdentifier);
                    $impl.Push(pas.Common.IdentifierAt(IdentTemp).Value,1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentTemp,0);
                    i += 3;
                  } else {
                    AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                    if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) {
                      if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                        if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ === 0) {}
                        else pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.IllegalQualifier);
                      } else pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.IllegalQualifier);
                    };
                    if (pas.Common.IdentifierAt(IdentIndex).ObjectVariable && (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
                      $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,2,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0)}
                     else $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
                    i += 1;
                  };
                } else if (address || VarPass) {
                  if ((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK,pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)) || (VarPass && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.diffSet(pas.Datatypes.AllTypes,rtl.createSet(pas.Tokens.TTokenKind.PROCVARTOK,pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (VarPass || (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING))) || (pas.Common.IdentifierAt(IdentIndex).isAbsolute && ((Math.abs(pas.Common.IdentifierAt(IdentIndex).Value) & 0xff) === 0) && (rtl.rc(Math.abs(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 16777216)) & 0x7f,0,255) in rtl.createSet(null,1,127))) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ === 0)) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.DATAORIGINOFFSET)) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && !(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.UNTYPETOK,pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK,pas.Tokens.TTokenKind.PROCVARTOK)) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING))) {
                    $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0)}
                   else $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,0,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
                  AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                } else {
                  $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
                  AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                };
              } else {
                if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK)) {
                  AllocElementType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                  i += 1;
                  $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
                } else {
                  $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,0,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
                };
              };
              ValType.set(pas.Tokens.TTokenKind.POINTERTOK);
              Result = rtl.rc(i + 1,-2147483648,2147483647);
            };
          } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
        };
      } finally {
        $ir.free();
      };
      return Result;
    };
    $impl.NumActualParameters = function (i, IdentIndex, NumActualParams) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(NumActualParams.get(),-2147483648,2147483647);
      var Result = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
      var ActualParamType = 0;
      var AllocElementType = 0;
      var NumAllocElements = 0;
      var oldPass = 0;
      var oldCodeSize = 0;
      var IdentTemp = 0;
      oldPass = rtl.rc(pas.Common.pass,0,2);
      oldCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
      pas.Common.pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
      NumActualParams.set(0);
      ActualParamType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
      Result[0].i_ = rtl.rc(i + 1,-2147483648,2147483647);
      if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) && (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.CPARTOK)) {
        do {
          NumActualParams.set(NumActualParams.get() + 1);
          if (NumActualParams.get() > 8) pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.TooManyParameters,IdentIndex);
          rtl.rcArrR(Result,NumActualParams.get() - 1).i = rtl.rc(i,-2147483648,2147483647);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          NumAllocElements = 0;
          if ((ActualParamType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK)) && (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK)) {
            IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
            if ((pas.Common.TokenAt(i - 1).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) && !(pas.Common.IdentifierAt(IdentTemp).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {}
            else {
              AllocElementType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).AllocElementType,0,191);
              NumAllocElements = rtl.rc(pas.Common.IdentifierAt(IdentTemp).NumAllocElements,0,4294967295);
            };
            if (pas.Common.IdentifierAt(IdentTemp).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK)) {
              rtl.rcArrR(Result,NumActualParams.get() - 1).Name = pas.Common.IdentifierAt(IdentTemp).Name;
              AllocElementType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).Kind,0,191);
            };
          } else {
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
              IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
              AllocElementType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).AllocElementType,0,191);
              NumAllocElements = rtl.rc(pas.Common.IdentifierAt(IdentTemp).NumAllocElements,0,4294967295);
            } else AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          };
          rtl.rcArrR(Result,NumActualParams.get() - 1).DataType = rtl.rc(ActualParamType,0,191);
          rtl.rcArrR(Result,NumActualParams.get() - 1).AllocElementType = rtl.rc(AllocElementType,0,191);
          rtl.rcArrR(Result,NumActualParams.get() - 1).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
        } while (!(pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.COMMATOK));
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
        Result[0].i_ = rtl.rc(i,-2147483648,2147483647);
      };
      pas.Common.pass = rtl.rc(oldPass,0,2);
      pas.Common.CodeSize = rtl.rc(oldCodeSize,-2147483648,2147483647);
      return Result;
    };
    $impl.RealTypeConversion = function (ValType, RightValType, Kind) {
      rtl.rc(ValType.get(),0,191);
      rtl.rc(RightValType.get(),0,191);
      rtl.rc(Kind,0,191);
      if (((ValType.get() === pas.Tokens.TTokenKind.SINGLETOK) || (Kind === pas.Tokens.TTokenKind.SINGLETOK)) && (RightValType.get() in pas.Datatypes.IntegerTypes)) {
        $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,RightValType.get());
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta :FPMAN0","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :FPMAN1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :FPMAN2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :FPMAN3","");
        pas.Optimize.asm65("\tjsr @I2F","");
        pas.Optimize.asm65("\tlda :FPMAN0","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :FPMAN1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :FPMAN2","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :FPMAN3","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
        if ((ValType.get() !== pas.Tokens.TTokenKind.SINGLETOK) && (Kind === pas.Tokens.TTokenKind.SINGLETOK)) {
          RightValType.set(Kind)}
         else RightValType.set(ValType.get());
      };
      if ((ValType.get() in pas.Datatypes.IntegerTypes) && ((RightValType.get() === pas.Tokens.TTokenKind.SINGLETOK) || (Kind === pas.Tokens.TTokenKind.SINGLETOK))) {
        $impl.ExpandParam_m1(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta :FPMAN0","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta :FPMAN1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta :FPMAN2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta :FPMAN3","");
        pas.Optimize.asm65("\tjsr @I2F","");
        pas.Optimize.asm65("\tlda :FPMAN0","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :FPMAN1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tlda :FPMAN2","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tlda :FPMAN3","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH*3,x","");
        if ((RightValType.get() !== pas.Tokens.TTokenKind.SINGLETOK) && (Kind === pas.Tokens.TTokenKind.SINGLETOK)) {
          ValType.set(Kind)}
         else ValType.set(RightValType.get());
      };
      if (((ValType.get() === pas.Tokens.TTokenKind.HALFSINGLETOK) || (Kind === pas.Tokens.TTokenKind.HALFSINGLETOK)) && (RightValType.get() in pas.Datatypes.IntegerTypes)) {
        $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,RightValType.get());
        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
        pas.Optimize.asm65("\tjsr @F16_I2F","");
        pas.Optimize.asm65("\tlda :eax","");
        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
        pas.Optimize.asm65("\tlda :eax+1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
        if ((ValType.get() !== pas.Tokens.TTokenKind.HALFSINGLETOK) && (Kind === pas.Tokens.TTokenKind.HALFSINGLETOK)) {
          RightValType.set(Kind)}
         else RightValType.set(ValType.get());
      };
      if ((ValType.get() in pas.Datatypes.IntegerTypes) && ((RightValType.get() === pas.Tokens.TTokenKind.HALFSINGLETOK) || (Kind === pas.Tokens.TTokenKind.HALFSINGLETOK))) {
        $impl.ExpandParam_m1(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
        pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*2,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
        pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH*3,x","");
        pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
        pas.Optimize.asm65("\tjsr @F16_I2F","");
        pas.Optimize.asm65("\tlda :eax","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
        pas.Optimize.asm65("\tlda :eax+1","");
        pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
        if ((RightValType.get() !== pas.Tokens.TTokenKind.HALFSINGLETOK) && (Kind === pas.Tokens.TTokenKind.HALFSINGLETOK)) {
          ValType.set(Kind)}
         else ValType.set(RightValType.get());
      };
      if (((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK)) || (Kind in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK))) && (RightValType.get() in pas.Datatypes.IntegerTypes)) {
        $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,RightValType.get());
        pas.Optimize.asm65("\tjsr @expandToREAL","");
        if (!(ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK)) && (Kind in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK))) {
          RightValType.set(Kind)}
         else RightValType.set(ValType.get());
      };
      if ((ValType.get() in pas.Datatypes.IntegerTypes) && ((RightValType.get() in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK)) || (Kind in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK)))) {
        $impl.ExpandParam_m1(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
        pas.Optimize.asm65("\tjsr @expandToREAL1","");
        if (!(RightValType.get() in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK)) && (Kind in rtl.createSet(pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.SHORTREALTOK))) {
          ValType.set(Kind)}
         else ValType.set(RightValType.get());
      };
    };
    $impl.CompileActualParameters = function (i, IdentIndex, ProcVarIndex) {
      rtl.rc(i.get(),-2147483648,2147483647);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(ProcVarIndex,-2147483648,2147483647);
      var NumActualParams = 0;
      var IdentTemp = 0;
      var ParamIndex = 0;
      var j = 0;
      var old_i = 0;
      var old_func = 0;
      var ActualParamType = 0;
      var AllocElementType = 0;
      var svar = "";
      var lab = "";
      var yes = false;
      var Param = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
      var $ir = rtl.createIntfRefs();
      try {
        svar = "";
        lab = "";
        old_i = rtl.rc(i.get(),-2147483648,2147483647);
        if (pas.Common.IdentifierAt(IdentIndex).ProcAsBlock === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop)) pas.Common.IdentifierAt(IdentIndex).isRecursion = true;
        yes = pas.Common.IdentifierAt(IdentIndex).isRecursion || pas.Common.IdentifierAt(IdentIndex).isStdCall;
        for (var $l = pas.Common.IdentifierAt(IdentIndex).NumParams; $l >= 1; $l--) {
          ParamIndex = $l;
          if (!((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).DataType in pas.Datatypes.Pointers) && ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).NumAllocElements & 0xFFFF) in rtl.createSet(0,1))) || ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).DataType in pas.Datatypes.Pointers) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) || (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).DataType in rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes)))) {
            yes = true;
            break;
          };
        };
        if (ProcVarIndex > 0) {
          svar = $impl.GetLocalName(ProcVarIndex,"");
          if (pas.Common.TokenAt(i.get() + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
            i.set($impl.CompileArrayIndex(i.get(),ProcVarIndex,{get: function () {
                return AllocElementType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                AllocElementType = v;
              }}));
            pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
            i.set(i.get() + 1);
            if (((pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements * 2) > 256) || (pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements in rtl.createSet(0,1))) {
              pas.Optimize.asm65("\tlda " + svar,"");
              pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda " + svar + "+1","");
              pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :TMP+1","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :TMP+2","");
              pas.Optimize.asm65("\tdex","");
            } else {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tadd #$00","");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda adr." + svar + ",y","");
              pas.Optimize.asm65("\tsta :TMP+1","");
              pas.Optimize.asm65("\tlda adr." + svar + "+1,y","");
              pas.Optimize.asm65("\tsta :TMP+2","");
              pas.Optimize.asm65("\tdex","");
            };
            pas.Optimize.asm65("\tlda #$4C","");
            pas.Optimize.asm65("\tsta :TMP","");
          } else {
            if (pas.Common.IdentifierAt(ProcVarIndex).isAbsolute && (pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements === 0)) {}
            else {
              if (pas.Common.IdentifierAt(ProcVarIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
                if (pas.System.Pos(".",svar) > 0) {
                  lab = $impl.ExtractName(ProcVarIndex,svar);
                  pas.Optimize.asm65("\tmwy " + lab + " :bp2","");
                  pas.Optimize.asm65("\tldy #" + svar + "-DATAORIGIN","");
                } else {
                  pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                  pas.Optimize.asm65("\tldy #$00","");
                };
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :TMP+1","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :TMP+2","");
              } else {
                if (pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements === 0) {
                  pas.Optimize.asm65("\tlda " + svar,"");
                  pas.Optimize.asm65("\tsta :TMP+1","");
                  pas.Optimize.asm65("\tlda " + svar + "+1","");
                  pas.Optimize.asm65("\tsta :TMP+2","");
                } else if (((pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements * 2) > 256) || (pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements in rtl.createSet(1))) {
                  pas.Optimize.asm65("\tlda " + svar,"");
                  pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :bp2","");
                  pas.Optimize.asm65("\tlda " + svar + "+1","");
                  pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :bp2+1","");
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :TMP+1","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :TMP+2","");
                  pas.Optimize.asm65("\tdex","");
                } else {
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tadd #$00","");
                  pas.Optimize.asm65("\ttay","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tadc #$00","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tlda adr." + svar + ",y","");
                  pas.Optimize.asm65("\tsta :TMP+1","");
                  pas.Optimize.asm65("\tlda adr." + svar + "+1,y","");
                  pas.Optimize.asm65("\tsta :TMP+2","");
                  pas.Optimize.asm65("\tdex","");
                };
              };
              pas.Optimize.asm65("\tlda #$4C","");
              pas.Optimize.asm65("\tsta :TMP","");
            };
          };
        };
        Param = $impl.NumActualParameters(i.get(),IdentIndex,{get: function () {
            return NumActualParams;
          }, set: function (v) {
            rtl.rc(v,-2147483648,2147483647);
            NumActualParams = v;
          }});
        if (NumActualParams !== pas.Common.IdentifierAt(IdentIndex).NumParams) if (ProcVarIndex > 0) {
          pas.Messages.Error$1(i.get(),$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.IdentifierAt(ProcVarIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)))}
         else pas.Messages.Error$1(i.get(),$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.IdentifierAt(IdentIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
        ParamIndex = rtl.rc(NumActualParams,-2147483648,2147483647);
        AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
        IdentTemp = 0;
        if (pas.Common.TokenAt(i.get() + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) {
          if (pas.Common.TokenAt(i.get() + 2).Kind === pas.Tokens.TTokenKind.CPARTOK) {
            i.set(i.get() + 1)}
           else while (NumActualParams > 0) {
            i.set(rtl.rcArrR(Param,NumActualParams - 1).i);
            if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              i.set($impl.CompileAddress(i.get() + 1,{get: function () {
                  return ActualParamType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ActualParamType = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  AllocElementType = v;
                }},true));
              if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType !== pas.Tokens.TTokenKind.UNTYPETOK) && (ActualParamType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.PCHARTOK))) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              };
              if (AllocElementType === pas.Tokens.TTokenKind.ARRAYTOK) {
                AllocElementType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
              };
              if (pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name),-2147483648,2147483647)}
               else IdentTemp = 0;
              if (IdentTemp > 0) {
                if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) pas.Messages.Error$2(i.get(),pas.Messages.TErrorCode.CantAdrConstantExp);
                if (pas.Common.IdentifierAt(IdentTemp).DataType in pas.Datatypes.Pointers) if (!(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK))) {
                  if (pas.Common.IdentifierAt(IdentTemp).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                    pas.Messages.Error$1(i.get(),$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IncompatibleTypes,'Incompatible types: got "{0}" expected "^{1}".',pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name,pas.Common.GetTypeAtIndex(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements).Field[0].Name,"","","","","","","",""]),pas.Messages.IMessage)))}
                   else pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,pas.Common.IdentifierAt(IdentTemp).DataType);
                };
                if (pas.Common.IdentifierAt(IdentTemp).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements !== rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements)) {
                  if (pas.Common.IdentifierAt(IdentTemp).PassMethod !== rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).PassMethod) {
                    pas.Messages.Error$2(i.get(),pas.Messages.TErrorCode.CantAdrConstantExp)}
                   else pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.IncompatibleTypeOf,IdentTemp);
                };
                if (pas.Common.IdentifierAt(IdentTemp).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
                  pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,pas.Common.IdentifierAt(IdentTemp).DataType);
                  if (pas.Common.IdentifierAt(IdentTemp).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType !== pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType !== pas.Common.IdentifierAt(IdentTemp).DataType)) pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.IdentifierAt(IdentTemp).DataType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,false);
                } else if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in pas.Datatypes.Pointers) {
                  if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements === 0) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements === 0)) {}
                  else if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType !== pas.Common.IdentifierAt(IdentTemp).AllocElementType) {
                    if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.PCHARTOK))) {
                      if (pas.Common.IdentifierAt(IdentTemp).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {}
                      else pas.Messages.ErrorIdentifierIncompatibleTypesArray(i.get(),IdentTemp,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType);
                    } else pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.IdentifierAt(IdentTemp).AllocElementType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType,false);
                  };
                } else pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,pas.Common.IdentifierAt(IdentTemp).AllocElementType);
              } else if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType !== pas.Tokens.TTokenKind.UNTYPETOK) if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType !== AllocElementType) {
                if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) {
                  if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType !== AllocElementType) pas.Messages.ErrorIncompatibleTypes(i.get(),AllocElementType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,false);
                } else pas.Messages.ErrorIncompatibleTypes(i.get(),AllocElementType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,false);
              };
              if (IdentTemp === 0) if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (ActualParamType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType === pas.Tokens.TTokenKind.RECORDTOK)) {}
              else if ((ActualParamType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK)) {
                pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,AllocElementType)}
               else pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,ActualParamType);
            } else {
              if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements > 0) && !(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                i.set($impl.CompileAddress(i.get() + 1,{get: function () {
                    return ActualParamType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ActualParamType = v;
                  }},{get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }},false))}
               else i.set($impl.CompileExpression(i.get() + 2,{get: function () {
                  return ActualParamType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ActualParamType = v;
                }},rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType));
              if ((ActualParamType in pas.Datatypes.IntegerTypes) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in pas.Datatypes.RealTypes)) {
                AllocElementType = rtl.rc(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,0,191);
                $impl.RealTypeConversion({get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }},{get: function () {
                    return ActualParamType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ActualParamType = v;
                  }},pas.Tokens.TTokenKind.UNTYPETOK);
              };
              if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes)) && (ActualParamType in pas.Datatypes.RealTypes)) pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,ActualParamType);
              if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.POINTERTOK) pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,ActualParamType);
              if ((pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.ENUMTOK)) {
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name),-2147483648,2147483647);
                if (rtl.rcArrR(pas.Common._TypeArray,pas.Common.IdentifierAt(IdentTemp).NumAllocElements - 1).Field[0].Name !== rtl.rcArrR(pas.Common._TypeArray,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements - 1).Field[0].Name) pas.Messages.Error(i.get(),'Incompatible types: got "' + rtl.rcArrR(pas.Common._TypeArray,pas.Common.IdentifierAt(IdentTemp).NumAllocElements - 1).Field[0].Name + '" expected "' + rtl.rcArrR(pas.Common._TypeArray,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements - 1).Field[0].Name + '"');
                ActualParamType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).Kind,0,191);
              };
              if ((pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (ActualParamType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && !(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in pas.Datatypes.Pointers)) if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name)).isNestedFunction) {
                if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name)).NestedFunctionNumAllocElements !== rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.IncompatibleTypeOf,pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name));
              } else if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name)).NumAllocElements !== rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.IncompatibleTypeOf,pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name));
              if (((ActualParamType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in pas.Datatypes.Pointers)) || ((ActualParamType in pas.Datatypes.Pointers) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)))) {
                if ((ActualParamType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.IDENTTOK)) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name),-2147483648,2147483647);
                  if (pas.Common.TokenAt(i.get() - 1).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) {
                    AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191)}
                   else AllocElementType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).AllocElementType,0,191);
                  if (AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) pas.Messages.ErrorIncompatibleTypes(i.get(),ActualParamType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,false);
                } else pas.Messages.ErrorIncompatibleTypes(i.get(),ActualParamType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,false);
              } else {
                if ((ActualParamType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.IDENTTOK)) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name),-2147483648,2147483647);
                  if (pas.Common.TokenAt(i.get() - 1).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) {
                    AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191)}
                   else AllocElementType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).AllocElementType,0,191);
                  if (pas.Common.IdentifierAt(IdentTemp).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                    pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,ActualParamType)}
                   else if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType !== AllocElementType) {
                    if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements > 0)) {
                      pas.Messages.ErrorIdentifierIncompatibleTypesArray(i.get(),IdentTemp,pas.Tokens.TTokenKind.POINTERTOK)}
                     else if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType !== pas.Tokens.TTokenKind.PROCVARTOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements > 0)) pas.Messages.ErrorIncompatibleTypes(i.get(),AllocElementType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType,false);
                  };
                } else if ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK)) && (pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.IDENTTOK)) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get()).Name),-2147483648,2147483647);
                  if ((pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements !== 0) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements === 0)) if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
                    pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.IdentifierAt(IdentTemp).DataType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,false)}
                   else if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType !== pas.Tokens.TTokenKind.BYTETOK) pas.Messages.ErrorIncompatibleTypes(i.get(),pas.Common.IdentifierAt(IdentTemp).DataType,rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType,true);
                  pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,pas.Common.IdentifierAt(IdentTemp).DataType);
                } else {
                  if ((ActualParamType === pas.Tokens.TTokenKind.POINTERTOK) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) pas.Messages.ErrorIncompatibleTypes(i.get(),ActualParamType,pas.Tokens.TTokenKind.STRINGPOINTERTOK,true);
                  if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                    if ((ActualParamType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.CHARLITERALTOK)) {
                      ActualParamType = rtl.rc(pas.Tokens.TTokenKind.STRINGPOINTERTOK,0,191);
                      if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
                        pas.Common.DefineStaticString(i.get(),String.fromCharCode(pas.Common.TokenAt(i.get()).Value));
                        pas.Common.TokenAt(i.get()).Kind = rtl.rc(pas.Tokens.TTokenKind.STRINGLITERALTOK,0,191);
                        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                        pas.Optimize.asm65("\tlda <CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i.get()).StrAddress - 256,4),"");
                        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                        pas.Optimize.asm65("\tlda >CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i.get()).StrAddress - 256,4),"");
                        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                      };
                    };
                  };
                  if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType === pas.Tokens.TTokenKind.PCHARTOK) {
                    if (ActualParamType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tadd #$01","");
                      pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tadc #$00","");
                      pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                    };
                    if ((ActualParamType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Common.TokenAt(i.get()).Kind === pas.Tokens.TTokenKind.CHARLITERALTOK)) {
                      ActualParamType = rtl.rc(pas.Tokens.TTokenKind.PCHARTOK,0,191);
                      if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
                        pas.Common.DefineStaticString(i.get(),String.fromCharCode(pas.Common.TokenAt(i.get()).Value));
                        pas.Common.TokenAt(i.get()).Kind = rtl.rc(pas.Tokens.TTokenKind.STRINGLITERALTOK,0,191);
                        pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                        pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                        pas.Optimize.asm65("\tlda <CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.TokenAt(i.get()).StrAddress - 256) + 1,4),"");
                        pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                        pas.Optimize.asm65("\tlda >CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.TokenAt(i.get()).StrAddress - 256) + 1,4),"");
                        pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                      };
                    };
                  };
                };
              };
              $impl.ExpandParam(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType,ActualParamType);
            };
            if ((pas.Common.IdentifierAt(IdentIndex).isRecursion === false) && (pas.Common.IdentifierAt(IdentIndex).isStdCall === false) && (ParamIndex > 1) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers)) && ((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements & 0xFFFF) > 1)) if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
              if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
                svar = $impl.GetLocalName(IdentIndex,"") + "." + $impl.GetOverloadName(IdentIndex)}
               else svar = $impl.GetLocalName(IdentIndex,"");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              j = rtl.rc(pas.Parser.RecordSize(pas.Parser.GetIdentIndex(pas.Common.GetTypeAtIndex(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements).Field[0].Name),""),-2147483648,2147483647);
              if (j === 256) {
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tmva:rne (:bp2),y " + svar + ".adr." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).Name + ",y+","");
              } else if (j <= 128) {
                pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(j - 1,2),"");
                pas.Optimize.asm65("\tmva:rpl (:bp2),y " + svar + ".adr." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).Name + ",y-","");
              } else pas.Optimize.asm65('\t@move ":bp2" #' + svar + ".adr." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).Name + " #" + pas.StringUtilities.IntToStr(j),"");
            } else if (!(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
              if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
                svar = $impl.GetLocalName(IdentIndex,"") + "." + $impl.GetOverloadName(IdentIndex)}
               else svar = $impl.GetLocalName(IdentIndex,"");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              if (rtl.lw(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements >>> 16) !== 0) {
                j = rtl.rc((rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements & 0xFFFF) * rtl.lw(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements >>> 16),-2147483648,2147483647)}
               else j = rtl.rc(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).NumAllocElements,-2147483648,2147483647);
              j = rtl.rc(j * pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).AllocElementType),-2147483648,2147483647);
              if (j === 256) {
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tmva:rne (:bp2),y " + svar + ".adr." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).Name + ",y+","");
              } else if (j <= 128) {
                pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(j - 1,2),"");
                pas.Optimize.asm65("\tmva:rpl (:bp2),y " + svar + ".adr." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).Name + ",y-","");
              } else pas.Optimize.asm65('\t@move ":bp2" #' + svar + ".adr." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,NumActualParams - 1).Name + " #" + pas.StringUtilities.IntToStr(j),"");
            };
            NumActualParams -= 1;
          };
          i.set(Param[0].i_);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.CPARTOK);
          i.set(i.get() + 1);
        };
        NumActualParams = rtl.rc(ParamIndex,-2147483648,2147483647);
        if (pas.Common.pass === pas.CompilerTypes.TPass.CALL_DETERMINATION) if (pas.Common.IdentifierAt(IdentIndex).IsUnresolvedForward) {
          pas.Common.IdentifierAt(IdentIndex).updateResolvedForward = true}
         else $impl.AddCallGraphChild(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),pas.Common.IdentifierAt(IdentIndex).ProcAsBlock);
        if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
          svar = $impl.GetLocalName(IdentIndex,"") + "." + $impl.GetOverloadName(IdentIndex)}
         else svar = $impl.GetLocalName(IdentIndex,"");
        if (pas.Common.RCLIBRARY && pas.Common.IdentifierAt(IdentIndex).isExternal && (pas.Common.IdentifierAt(IdentIndex).Libraries > 0) && (pas.Common.IdentifierAt(IdentIndex).isStdCall === false)) {
          pas.Optimize.asm65("#lib:" + svar,"");
        };
        if ((yes === false) && (pas.Common.IdentifierAt(IdentIndex).NumParams > 0)) {
          for (var $l1 = 1, $end = NumActualParams; $l1 <= $end; $l1++) {
            ParamIndex = $l1;
            ActualParamType = rtl.rc(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).DataType,0,191);
            if (ActualParamType === pas.Tokens.TTokenKind.ENUMTOK) ActualParamType = rtl.rc(rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).AllocElementType,0,191);
            if (rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name,"");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name + "+1","");
              $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            } else if ((NumActualParams === 1) && (pas.Datatypes.GetDataSize(ActualParamType) === 1)) {
              if (pas.Common.IdentifierAt(IdentIndex).ObjectIndex > 0) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name,"");
                $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              } else {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta @PARAM?","");
                $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              };
            } else {
              var $tmp = ActualParamType;
              if (($tmp === pas.Tokens.TTokenKind.BYTETOK) || ($tmp === pas.Tokens.TTokenKind.CHARTOK) || ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK)) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name,"");
                $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              } else if (($tmp === pas.Tokens.TTokenKind.WORDTOK) || ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) || ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK) || ($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || ($tmp === pas.Tokens.TTokenKind.PCHARTOK)) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name,"");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name + "+1","");
                $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              } else if (($tmp === pas.Tokens.TTokenKind.CARDINALTOK) || ($tmp === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp === pas.Tokens.TTokenKind.REALTOK) || ($tmp === pas.Tokens.TTokenKind.SINGLETOK)) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name,"");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name + "+1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name + "+2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tsta " + svar + "." + rtl.rcArrR(pas.Common.IdentifierAt(IdentIndex).Param,ParamIndex - 1).Name + "+3","");
                $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              } else {
                pas.Messages.Error$1(i.get(),$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.Unassigned,"Unassigned: {0}",pas.Tokens.GetTokenKindName(ActualParamType),"","","","","","","","",""]),pas.Messages.IMessage)));
              };
            };
          };
          old_func = rtl.rc(pas.Common.run_func,-2147483648,2147483647);
          pas.Common.run_func = 0;
          if (pas.Common.IdentifierAt(IdentIndex).isStdCall === false) if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
            $impl.StartOptimization(i.get())}
           else $impl.StopOptimization();
          pas.Common.run_func = rtl.rc(old_func,-2147483648,2147483647);
        };
        $impl.Gen();
        if (pas.Common.IdentifierAt(IdentIndex).ObjectIndex > 0) {
          if (pas.Common.TokenAt(old_i).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
            pas.Messages.Error$2(old_i,pas.Messages.TErrorCode.IdentifierExpected)}
           else IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.System.Copy(pas.Common.TokenAt(old_i).Name,1,pas.System.Pos(".",pas.Common.TokenAt(old_i).Name) - 1)),-2147483648,2147483647);
          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,""),"");
          pas.Optimize.asm65("\tldy " + $impl.GetLocalName(IdentTemp,"") + "+1","");
        };
        if (pas.Common.IdentifierAt(IdentIndex).isInline) {
          if ((pas.Common.IdentifierAt(IdentIndex).Block > 1) && (pas.Common.IdentifierAt(IdentIndex).Block !== rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) for (var $l2 = pas.Common.NumIdent(); $l2 >= 1; $l2--) {
            IdentTemp = $l2;
            if ((pas.Common.IdentifierAt(IdentTemp).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK)) && (pas.Common.IdentifierAt(IdentTemp).ProcAsBlock === pas.Common.IdentifierAt(IdentIndex).Block)) {
              svar = pas.Common.IdentifierAt(IdentTemp).Name + "." + svar;
              break;
            };
          };
          if ((rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop) !== 1) && (pas.Common.IdentifierAt(IdentIndex).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) {
            pas.Optimize.asm65("\t.LOCAL " + svar,"")}
           else if ((pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex > 1) && (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex !== pas.Common.ActiveSourceFile.UnitIndex) && pas.Common.IdentifierAt(IdentIndex).Section) {
            pas.Optimize.asm65("\t.LOCAL +MAIN." + svar,"")}
           else if (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex > 1) {
            pas.Optimize.asm65("\t.LOCAL +MAIN." + pas.Common.IdentifierAt(IdentIndex).SourceFile.Name + "." + svar,"")}
           else pas.Optimize.asm65("\t.LOCAL +MAIN." + svar,"");
          pas.Optimize.asm65("\t" + "m@INLINE","");
          pas.Optimize.asm65("\t.ENDL","");
          pas.Optimize.ResetOpty();
        } else {
          if (ProcVarIndex > 0) {
            if (pas.Common.IdentifierAt(ProcVarIndex).isAbsolute && (pas.Common.IdentifierAt(ProcVarIndex).NumAllocElements === 0)) {
              pas.Optimize.asm65("\tjsr *+6","");
              pas.Optimize.asm65("\tjmp *+6","");
              pas.Optimize.asm65("\tjmp (" + $impl.GetLocalName(ProcVarIndex,"") + ")","");
            } else pas.Optimize.asm65("\tjsr :TMP","");
          } else if (pas.Common.RCLIBRARY && pas.Common.IdentifierAt(IdentIndex).isExternal && (pas.Common.IdentifierAt(IdentIndex).Libraries > 0) && pas.Common.IdentifierAt(IdentIndex).isStdCall) {
            pas.Optimize.asm65("\tldy <" + svar + ".@INITLIBRARY","");
            pas.Optimize.asm65("\tsty @xmsProc.ini","");
            pas.Optimize.asm65("\tldy >" + svar + ".@INITLIBRARY","");
            pas.Optimize.asm65("\tsty @xmsProc.ini+1","");
            pas.Optimize.asm65("\tldy <" + svar,"");
            pas.Optimize.asm65("\tsty @xmsProc.prc","");
            pas.Optimize.asm65("\tldy >" + svar,"");
            pas.Optimize.asm65("\tsty @xmsProc.prc+1","");
            pas.Optimize.asm65("\tldy #=" + svar,"");
            pas.Optimize.asm65("\tjsr @xmsProc","");
          } else pas.Optimize.asm65("\tjsr " + svar,"");
        };
        if ((pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) && (pas.Common.IdentifierAt(IdentIndex).isStdCall === false) && (pas.Common.IdentifierAt(IdentIndex).isRecursion === false)) {
          pas.Optimize.asm65("\tinx","");
          ActualParamType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
          if (ActualParamType === pas.Tokens.TTokenKind.ENUMTOK) ActualParamType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NestedFunctionAllocElementType,0,191);
          var $tmp1 = pas.Datatypes.GetDataSize(ActualParamType);
          if ($tmp1 === 1) {
            pas.Optimize.asm65("\tmva " + svar + ".RESULT :STACKORIGIN,x","");
          } else if ($tmp1 === 2) {
            pas.Optimize.asm65("\tmva " + svar + ".RESULT :STACKORIGIN,x","");
            pas.Optimize.asm65("\tmva " + svar + ".RESULT+1 :STACKORIGIN+STACKWIDTH,x","");
          } else if ($tmp1 === 4) {
            pas.Optimize.asm65("\tmva " + svar + ".RESULT :STACKORIGIN,x","");
            pas.Optimize.asm65("\tmva " + svar + ".RESULT+1 :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tmva " + svar + ".RESULT+2 :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tmva " + svar + ".RESULT+3 :STACKORIGIN+STACKWIDTH*3,x","");
          };
        };
        if (pas.Common.RCLIBRARY && pas.Common.IdentifierAt(IdentIndex).isExternal && (pas.Common.IdentifierAt(IdentIndex).Libraries > 0) && (pas.Common.IdentifierAt(IdentIndex).isStdCall === false)) {
          pas.Optimize.asm65("\tpla","");
          pas.Optimize.asm65("\tsta portb","");
        };
      } finally {
        $ir.free();
      };
    };
    $impl.CompileFactor = function (i, isZero, ValType, VarType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ValType.get(),0,191);
      rtl.rc(VarType,0,191);
      var Result = 0;
      var IdentTemp = 0;
      var IdentIndex = 0;
      var oldCodeSize = 0;
      var j = 0;
      var ActualParamType = 0;
      var AllocElementType = 0;
      var IndirectionLevel = 0;
      var Kind = 0;
      var oldPass = 0;
      var yes = false;
      var Value = 0;
      var ConstVal = 0;
      var svar = "";
      var lab = "";
      var Param = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
      var $ir = rtl.createIntfRefs();
      try {
        isZero.set(false);
        Result = rtl.rc(i,-2147483648,2147483647);
        ValType.set(pas.Tokens.TTokenKind.UNTYPETOK);
        ConstVal = 0;
        IdentIndex = 0;
        var $tmp = pas.Common.TokenAt(i).Kind;
        if ($tmp === pas.Tokens.TTokenKind.HIGHTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          if (pas.Common.TokenAt(i + 2).Kind in pas.Datatypes.AllTypes) {
            ValType.set(pas.Common.TokenAt(i + 2).Kind);
            j = rtl.rc(i + 2,-2147483648,2147483647);
          } else {
            oldPass = rtl.rc(pas.Common.pass,0,2);
            oldCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
            pas.Common.pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
            j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.pass = rtl.rc(oldPass,0,2);
            pas.Common.CodeSize = rtl.rc(oldCodeSize,-2147483648,2147483647);
          };
          if (ValType.get() in pas.Datatypes.Pointers) {
            IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
            if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
              Value = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ - 1,-9007199254740991,9007199254740991)}
             else if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) {
              Value = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1,-9007199254740991,9007199254740991)}
             else Value = rtl.rc(pas.Common.HighBound(j,pas.Common.IdentifierAt(IdentIndex).AllocElementType),-9007199254740991,9007199254740991);
          } else Value = rtl.rc(pas.Common.HighBound(j,ValType.get()),-9007199254740991,9007199254740991);
          ValType.set(pas.Datatypes.GetValueType(Value));
          if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
            $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentIndex,""),"");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            ValType.set(pas.Tokens.TTokenKind.BYTETOK);
          } else $impl.Push(Value,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.LOWTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          oldPass = rtl.rc(pas.Common.pass,0,2);
          oldCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
          pas.Common.pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
          i = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.pass = rtl.rc(oldPass,0,2);
          pas.Common.CodeSize = rtl.rc(oldCodeSize,-2147483648,2147483647);
          if (ValType.get() in pas.Datatypes.Pointers) {
            Value = 0;
            if (ValType.get() === pas.Tokens.TTokenKind.STRINGPOINTERTOK) Value = 1;
          } else Value = rtl.rc(pas.Common.LowBound(i,ValType.get()),-9007199254740991,9007199254740991);
          ValType.set(pas.Datatypes.GetValueType(Value));
          $impl.Push(Value,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.SIZEOFTOK) {
          Value = 0;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          if (pas.Common.TokenAt(i + 2).Kind in rtl.unionSet(rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes),rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK))) {
            Value = rtl.rc(pas.Datatypes.GetDataSize(pas.Common.TokenAt(i + 2).Kind),-9007199254740991,9007199254740991);
            ValType.set(pas.Tokens.TTokenKind.BYTETOK);
            j = rtl.rc(i + 2,-2147483648,2147483647);
          } else {
            if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
            oldPass = rtl.rc(pas.Common.pass,0,2);
            oldCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
            pas.Common.pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
            j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.pass = rtl.rc(oldPass,0,2);
            pas.Common.CodeSize = rtl.rc(oldCodeSize,-2147483648,2147483647);
            Value = rtl.rc(pas.Parser.GetSizeOf(i,ValType.get()),-9007199254740991,9007199254740991);
            ValType.set(pas.Datatypes.GetValueType(Value));
          };
          $impl.Push(Value,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.LENGTHTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          Value = 0;
          if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.CHARLITERALTOK) {
            $impl.Push(1,0,1,0,0);
            ValType.set(pas.Tokens.TTokenKind.BYTETOK);
            i += 2;
          } else if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
            $impl.Push(pas.Common.TokenAt(i + 2).StrLength,0,1,0,0);
            ValType.set(pas.Tokens.TTokenKind.BYTETOK);
            i += 2;
          } else if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
            IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
            if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
            if (pas.Common.IdentifierAt(IdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.CONSTTOK)) {
              if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.CHARTOK) {
                $impl.Push(1,0,1,0,0);
                ValType.set(pas.Tokens.TTokenKind.BYTETOK);
              } else if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                i = rtl.rc($impl.CompileArrayIndex(i + 2,IdentIndex,ValType),-2147483648,2147483647);
                pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.DOTTOK);
                pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(1,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.TokenAt(i + 3).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                if ((IdentTemp >>> 16) === pas.Tokens.TTokenKind.CHARTOK) {
                  $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                  $impl.Push(1,0,1,0,0);
                } else {
                  if ((IdentTemp >>> 16) !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.TypeMismatch);
                  $impl.Push(0,0,1,0,0);
                  $impl.Push(1,11,1,IdentIndex,IdentTemp & 0xffff);
                };
                ValType.set(pas.Tokens.TTokenKind.BYTETOK);
                i += 1;
              } else if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0))) {
                if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.CHARTOK) || ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.STRINGPOINTERTOK))) {
                  if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                    i = rtl.rc($impl.CompileArrayIndex(i + 2,IdentIndex,ValType),-2147483648,2147483647);
                    $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    svar = $impl.GetLocalName(IdentIndex,"");
                    if (((pas.Common.IdentifierAt(IdentIndex).NumAllocElements * 2) > 256) || (pas.Common.IdentifierAt(IdentIndex).NumAllocElements in rtl.createSet(0,1)) || (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
                      pas.Optimize.asm65("\tlda " + svar,"");
                      pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                      pas.Optimize.asm65("\tsta :bp2","");
                      pas.Optimize.asm65("\tlda " + svar + "+1","");
                      pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tsta :bp2+1","");
                      pas.Optimize.asm65("\tldy #$01","");
                      pas.Optimize.asm65("\tlda (:bp2),y","");
                      pas.Optimize.asm65("\tsta :bp+1","");
                      pas.Optimize.asm65("\tdey","");
                      pas.Optimize.asm65("\tlda (:bp2),y","");
                      pas.Optimize.asm65("\ttay","");
                    } else {
                      svar = $impl.GetLocalName(IdentIndex,"adr.");
                      pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
                      pas.Optimize.asm65("\tlda " + svar + "+1,y","");
                      pas.Optimize.asm65("\tsta :bp+1","");
                      pas.Optimize.asm65("\tlda " + svar + ",y","");
                      pas.Optimize.asm65("\ttay","");
                    };
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    pas.Optimize.asm65("\tlda (:bp),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                    pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                    pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.CPARTOK);
                    ValType.set(pas.Tokens.TTokenKind.BYTETOK);
                    Result = rtl.rc(i + 2,-2147483648,2147483647);
                    return Result;
                  } else if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) {
                    $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    svar = $impl.GetLocalName(IdentIndex,"");
                    if ($impl.TestName(IdentIndex,svar)) {
                      lab = $impl.ExtractName(IdentIndex,svar);
                      if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(lab)).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {
                        pas.Optimize.asm65("\tlda " + lab,"");
                        pas.Optimize.asm65("\tldy " + lab + "+1","");
                        pas.Optimize.asm65("\tadd #" + svar + "-DATAORIGIN","");
                        pas.Optimize.asm65("\tscc","");
                        pas.Optimize.asm65("\tiny","");
                      } else {
                        pas.Optimize.asm65("\tlda " + svar,"");
                        pas.Optimize.asm65("\tldy " + svar + "+1","");
                      };
                    } else {
                      pas.Optimize.asm65("\tlda " + svar,"");
                      pas.Optimize.asm65("\tldy " + svar + "+1","");
                    };
                    pas.Optimize.asm65("\tsty :bp+1","");
                    pas.Optimize.asm65("\ttay","");
                    pas.Optimize.asm65("\tlda (:bp),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  } else {
                    $impl.a65(pas.CompilerTypes.TCode65.addBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,"adr."),"");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  };
                  ValType.set(pas.Tokens.TTokenKind.BYTETOK);
                } else {
                  if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                    pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.TypeMismatch)}
                   else {
                    Value = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements,-9007199254740991,9007199254740991);
                    ValType.set(pas.Datatypes.GetValueType(Value));
                    $impl.Push(Value,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
                  };
                };
              } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.TypeMismatch);
            } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
            i += 2;
          } else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.LOTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.INTEGERTOK,ActualParamType,true);
          if (pas.Datatypes.GetDataSize(ActualParamType) > 2) pas.Messages.WarningLoHi(i);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp1 = ActualParamType;
          if (($tmp1 === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp1 === pas.Tokens.TTokenKind.BYTETOK)) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tand #$0F","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          };
          if (ActualParamType in rtl.createSet(pas.Tokens.TTokenKind.INTEGERTOK,pas.Tokens.TTokenKind.CARDINALTOK)) {
            ValType.set(pas.Tokens.TTokenKind.WORDTOK)}
           else ValType.set(pas.Tokens.TTokenKind.BYTETOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.HITOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.INTEGERTOK,ActualParamType,true);
          if (pas.Datatypes.GetDataSize(ActualParamType) > 2) pas.Messages.WarningLoHi(i);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp2 = ActualParamType;
          if (($tmp2 === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp2 === pas.Tokens.TTokenKind.BYTETOK)) {
            pas.Optimize.asm65("\tjsr @hiBYTE","")}
           else if (($tmp2 === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp2 === pas.Tokens.TTokenKind.WORDTOK)) {
            pas.Optimize.asm65("\tjsr @hiWORD","")}
           else if (($tmp2 === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp2 === pas.Tokens.TTokenKind.CARDINALTOK)) pas.Optimize.asm65("\tjsr @hiCARD","");
          if (ActualParamType in rtl.createSet(pas.Tokens.TTokenKind.INTEGERTOK,pas.Tokens.TTokenKind.CARDINALTOK)) {
            ValType.set(pas.Tokens.TTokenKind.WORDTOK)}
           else ValType.set(pas.Tokens.TTokenKind.BYTETOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.CHRTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.BYTETOK),-2147483648,2147483647);
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.INTEGERTOK,ActualParamType,true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          ValType.set(pas.Tokens.TTokenKind.CHARTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.INTTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          if (!(ActualParamType in pas.Datatypes.RealTypes)) pas.Messages.ErrorIncompatibleTypes(i + 2,ActualParamType,pas.Tokens.TTokenKind.REALTOK,false);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp3 = ActualParamType;
          if ($tmp3 === pas.Tokens.TTokenKind.SHORTREALTOK) {
            pas.Optimize.asm65("\tjsr @INT_SHORT","")}
           else if ($tmp3 === pas.Tokens.TTokenKind.REALTOK) {
            pas.Optimize.asm65("\tjsr @INT","")}
           else if ($tmp3 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_INT.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_INT.A+1","");
            pas.Optimize.asm65("\tjsr @F16_INT","");
            pas.Optimize.asm65("\tjsr @F16_I2F","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          } else if ($tmp3 === pas.Tokens.TTokenKind.SINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :FPMAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FPMAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FPMAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FPMAN3","");
            pas.Optimize.asm65("\tjsr @F2I","");
            pas.Optimize.asm65("\tjsr @I2F","");
            pas.Optimize.asm65("\tlda :FPMAN0","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :FPMAN1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :FPMAN2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :FPMAN3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
          ValType.set(ActualParamType);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.FRACTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          if (!(ActualParamType in pas.Datatypes.RealTypes)) pas.Messages.ErrorIncompatibleTypes(i + 2,ActualParamType,pas.Tokens.TTokenKind.REALTOK,false);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          var $tmp4 = ActualParamType;
          if ($tmp4 === pas.Tokens.TTokenKind.SHORTREALTOK) {
            pas.Optimize.asm65("\tjsr @SHORTREAL_FRAC","")}
           else if ($tmp4 === pas.Tokens.TTokenKind.REALTOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @REAL_FRAC.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @REAL_FRAC.A+1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta @REAL_FRAC.A+2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta @REAL_FRAC.A+3","");
            pas.Optimize.asm65("\tjsr @REAL_FRAC","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :eax+2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :eax+3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          } else if ($tmp4 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta @F16_FRAC.A","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta @F16_FRAC.A+1","");
            pas.Optimize.asm65("\tjsr @F16_FRAC","");
            pas.Optimize.asm65("\tlda :eax","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :eax+1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
          } else if ($tmp4 === pas.Tokens.TTokenKind.SINGLETOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :FPMAN0","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :FPMAN1","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tsta :FPMAN2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
            pas.Optimize.asm65("\tsta :FPMAN3","");
            pas.Optimize.asm65("\tjsr @FFRAC","");
            pas.Optimize.asm65("\tlda :FPMAN0","");
            pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            pas.Optimize.asm65("\tlda :FPMAN1","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tlda :FPMAN2","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
            pas.Optimize.asm65("\tlda :FPMAN3","");
            pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
          };
          ValType.set(ActualParamType);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.TRUNCTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (ActualParamType in pas.Datatypes.IntegerTypes) {
            ValType.set(ActualParamType)}
           else if (ActualParamType in pas.Datatypes.RealTypes) {
            ValType.set(pas.Tokens.TTokenKind.INTEGERTOK);
            var $tmp5 = ActualParamType;
            if ($tmp5 === pas.Tokens.TTokenKind.SHORTREALTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @SHORTREAL_TRUNC.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @SHORTREAL_TRUNC.A+1","");
              pas.Optimize.asm65("\tjsr @SHORTREAL_TRUNC","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              ValType.set(pas.Tokens.TTokenKind.SHORTINTTOK);
            } else if ($tmp5 === pas.Tokens.TTokenKind.REALTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @REAL_TRUNC.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @REAL_TRUNC.A+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @REAL_TRUNC.A+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @REAL_TRUNC.A+3","");
              pas.Optimize.asm65("\tjsr @REAL_TRUNC","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            } else if ($tmp5 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @F16_INT.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @F16_INT.A+1","");
              pas.Optimize.asm65("\tjsr @F16_INT","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            } else if ($tmp5 === pas.Tokens.TTokenKind.SINGLETOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :FPMAN0","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :FPMAN1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta :FPMAN2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta :FPMAN3","");
              pas.Optimize.asm65("\tjsr @F2I","");
              pas.Optimize.asm65("\tlda :FPMAN0","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :FPMAN1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :FPMAN2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :FPMAN3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            };
          } else pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.REALTOK,ActualParamType,true);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.ROUNDTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (ActualParamType in pas.Datatypes.IntegerTypes) {
            ValType.set(ActualParamType)}
           else if (ActualParamType in pas.Datatypes.RealTypes) {
            ValType.set(pas.Tokens.TTokenKind.INTEGERTOK);
            var $tmp6 = ActualParamType;
            if ($tmp6 === pas.Tokens.TTokenKind.SHORTREALTOK) {
              pas.Optimize.asm65("\tjsr @SHORTREAL_ROUND","");
              ValType.set(pas.Tokens.TTokenKind.SHORTINTTOK);
            } else if ($tmp6 === pas.Tokens.TTokenKind.REALTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @REAL_ROUND.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @REAL_ROUND.A+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @REAL_ROUND.A+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @REAL_ROUND.A+3","");
              pas.Optimize.asm65("\tjsr @REAL_ROUND","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            } else if ($tmp6 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @F16_ROUND.A","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @F16_ROUND.A+1","");
              pas.Optimize.asm65("\tjsr @F16_ROUND","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :eax+2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :eax+3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            } else if ($tmp6 === pas.Tokens.TTokenKind.SINGLETOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :FP2MAN0","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :FP2MAN1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta :FP2MAN2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta :FP2MAN3","");
              pas.Optimize.asm65("\tjsr @FROUND","");
              pas.Optimize.asm65("\tlda :FPMAN0","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :FPMAN1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda :FPMAN2","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :FPMAN3","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            };
          } else pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.REALTOK,ActualParamType,true);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.ODDTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.CARDINALTOK,ActualParamType,true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tand #$01","");
          pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
          ValType.set(pas.Tokens.TTokenKind.BOOLEANTOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.ORDTOK) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          j = rtl.rc(i + 2,-2147483648,2147483647);
          i = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.BYTETOK),-2147483648,2147483647);
          if (!(ValType.get() in rtl.unionSet(pas.Datatypes.OrdinalTypes,rtl.createSet(pas.Tokens.TTokenKind.ENUMTOK)))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          if (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.BOOLEANTOK,pas.Tokens.TTokenKind.ENUMTOK)) ValType.set(pas.Tokens.TTokenKind.BYTETOK);
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if (($tmp === pas.Tokens.TTokenKind.PREDTOK) || ($tmp === pas.Tokens.TTokenKind.SUCCTOK)) {
          Kind = rtl.rc(pas.Common.TokenAt(i).Kind,0,191);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          if (!(ValType.get() in pas.Datatypes.OrdinalTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          $impl.Push(1,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          if (Kind === pas.Tokens.TTokenKind.PREDTOK) {
            $impl.GenerateBinaryOperation(pas.Tokens.TTokenKind.MINUSTOK,ValType.get())}
           else $impl.GenerateBinaryOperation(pas.Tokens.TTokenKind.PLUSTOK,ValType.get());
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.INTOK) {
          pas.System.Writeln("IN");
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.IDENTTOK) {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
          if (IdentIndex > 0) {
            if ((pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.TYPETOK) && (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK)) {
              if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Parser.Elements(IdentIndex) > 0)) {
                i = rtl.rc($impl.CompileAddress(i + 1,{get: function () {
                    return VarType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    VarType = v;
                  }},ValType,false),-2147483648,2147483647);
                pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
                pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.OBRACKETTOK);
                i = rtl.rc($impl.CompileArrayIndex(i + 1,IdentIndex,{get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }}),-2147483648,2147483647);
                pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
                pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
                pas.Optimize.asm65("\tdex","");
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                ValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                var $tmp7 = pas.Datatypes.GetDataSize(ValType.get());
                if ($tmp7 === 1) {
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                } else if ($tmp7 === 2) {
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                } else if ($tmp7 === 4) {
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tlda (:bp2),y","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                };
                return i + 1;
              };
              j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
              if (!(ValType.get() in pas.Datatypes.AllTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.TypeMismatch);
              if ((ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) && !(pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                ValType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
                if (pas.Common.TokenAt(i + 4).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) return j + 2;
              };
              if (ValType.get() in pas.Datatypes.IntegerTypes) {
                var $tmp8 = pas.Common.IdentifierAt(IdentIndex).DataType;
                if ($tmp8 === pas.Tokens.TTokenKind.ENUMTOK) {
                  ValType.set(pas.Tokens.TTokenKind.ENUMTOK);
                } else if ($tmp8 === pas.Tokens.TTokenKind.SHORTREALTOK) {
                  $impl.ExpandParam(pas.Tokens.TTokenKind.SMALLINTTOK,ValType.get());
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tlda #$00","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  ValType.set(pas.Tokens.TTokenKind.SHORTREALTOK);
                } else if ($tmp8 === pas.Tokens.TTokenKind.REALTOK) {
                  $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tlda #$00","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  ValType.set(pas.Tokens.TTokenKind.REALTOK);
                } else if ($tmp8 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
                  $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta @F16_I2F.SV","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                  pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
                  pas.Optimize.asm65("\tjsr @F16_I2F","");
                  pas.Optimize.asm65("\tlda :eax","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda :eax+1","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  ValType.set(pas.Tokens.TTokenKind.HALFSINGLETOK);
                } else if ($tmp8 === pas.Tokens.TTokenKind.SINGLETOK) {
                  $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :FPMAN0","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :FPMAN1","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tsta :FPMAN2","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                  pas.Optimize.asm65("\tsta :FPMAN3","");
                  pas.Optimize.asm65("\tjsr @I2F","");
                  pas.Optimize.asm65("\tlda :FPMAN0","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda :FPMAN1","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tlda :FPMAN2","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                  pas.Optimize.asm65("\tlda :FPMAN3","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                  ValType.set(pas.Tokens.TTokenKind.SINGLETOK);
                };
              };
              pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
              if ((ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK)) {
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,4)),-2147483648,2147483647);
                if (pas.Common.IdentifierAt(IdentTemp).isNestedFunction === false) pas.Messages.Error$1(j,$ir.ref(2,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.VariableConstantOrFunctionExpectedButProcedureFound,"Variable, constant or function name expected but procedure {0} found.",pas.Common.IdentifierAt(IdentIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                if (pas.Common.TokenAt(j).Kind !== pas.Tokens.TTokenKind.IDENTTOK) pas.Messages.Error$2(j,pas.Messages.TErrorCode.VariableExpected);
                svar = $impl.GetLocalName(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name),"");
                pas.Optimize.asm65("\tlda " + svar,"");
                pas.Optimize.asm65("\tsta :TMP+1","");
                pas.Optimize.asm65("\tlda " + svar + "+1","");
                pas.Optimize.asm65("\tsta :TMP+2","");
                pas.Optimize.asm65("\tlda #$4C","");
                pas.Optimize.asm65("\tsta :TMP","");
                pas.Optimize.asm65("\tjsr :TMP","");
                ValType.set(pas.Common.IdentifierAt(IdentTemp).DataType);
              } else if (((ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.unionSet(rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes),rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)))) || ((ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)))) {
                yes = false;
                if ((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK)) yes = true;
                if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK)) yes = true;
                if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) || (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                  if (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) j += 1;
                  if (pas.Common.TokenAt(j + 2).Kind !== pas.Tokens.TTokenKind.DOTTOK) {
                    yes = false}
                   else if (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.DOTTOK) {
                    pas.Common.CheckTok(j + 3,pas.Tokens.TTokenKind.IDENTTOK);
                    IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(j + 3).Name),-2147483648,2147483647);
                    if (IdentTemp < 0) pas.Messages.Error$1(j + 3,$ir.ref(3,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.TokenAt(j + 3).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                    ValType.set(IdentTemp >>> 16);
                    pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tsta :bp2","");
                    pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                    pas.Optimize.asm65("\tsta :bp2+1","");
                    pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2),"");
                    j += 2;
                  };
                } else if (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) if (ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) {
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tsta :bp2","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tsta :bp2+1","");
                  pas.Optimize.asm65("\tldy #$00","");
                  ValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                  j += 1;
                } else pas.Messages.Error$2(j + 2,pas.Messages.TErrorCode.IllegalQualifier);
                if (yes) {
                  var $tmp9 = pas.Datatypes.GetDataSize(ValType.get());
                  if ($tmp9 === 1) {
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  } else if ($tmp9 === 2) {
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                  } else if ($tmp9 === 4) {
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tlda (:bp2),y","");
                    pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                  };
                };
              };
              $impl.ExpandParam(pas.Common.IdentifierAt(IdentIndex).DataType,ValType.get());
              Result = rtl.rc(j + 1,-2147483648,2147483647);
            } else if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK)) {
              IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,4)),-2147483648,2147483647);
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,ValType),-2147483648,2147483647);
                pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                i += 1;
              };
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) {
                $impl.CompileActualParameters({get: function () {
                    return i;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    i = v;
                  }},IdentTemp,IdentIndex)}
               else {
                if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) {
                  $impl.Push(0,4,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0)}
                 else $impl.Push(0,1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),IdentIndex,0);
              };
              ValType.set(pas.Tokens.TTokenKind.POINTERTOK);
              Result = rtl.rc(i,-2147483648,2147483647);
            } else if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.PROCEDURETOK) {
              pas.Messages.Error$1(i,$ir.ref(4,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.VariableConstantOrFunctionExpectedButProcedureFound,"Variable, constant or function name expected but procedure {0} found.",pas.Common.IdentifierAt(IdentIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)))}
             else if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
              Param = $impl.NumActualParameters(i,IdentIndex,{get: function () {
                  return j;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  j = v;
                }});
              IdentTemp = rtl.rc($impl.GetIdentProc(pas.Common.IdentifierAt(IdentIndex).Name,IdentIndex,pas.CompilerTypes.TParamList$clone(Param),j),-2147483648,2147483647);
              if (IdentTemp === 0) if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
                if (pas.Common.IdentifierAt(IdentIndex).NumParams !== j) pas.Messages.Error$1(i,$ir.ref(5,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.IdentifierAt(IdentIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.CantDetermine,IdentIndex);
              } else pas.Messages.Error$1(i,$ir.ref(6,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.WrongNumberOfParameters,"Wrong number of parameters specified for {0}.",pas.Common.IdentifierAt(IdentIndex).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
              IdentIndex = rtl.rc(IdentTemp,-2147483648,2147483647);
              if (pas.Common.IdentifierAt(IdentIndex).isStdCall === false) {
                $impl.StartOptimization(i)}
               else if (pas.Common.optimize.use === false) $impl.StartOptimization(i);
              pas.Common.run_func += 1;
              $impl.CompileActualParameters({get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }},IdentIndex,0);
              ValType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
              if (ValType.get() === pas.Tokens.TTokenKind.ENUMTOK) ValType.set(pas.Common.IdentifierAt(IdentIndex).NestedFunctionAllocElementType);
              pas.Common.run_func -= 1;
              Result = rtl.rc(i,-2147483648,2147483647);
            } else {
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
                if ((pas.Common.IdentifierAt(IdentIndex).Kind !== pas.Tokens.TTokenKind.VARTOK) || !(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) {
                  pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
                 else {
                  if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) {
                    ValType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK)}
                   else ValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                  if ((ValType.get() === pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK)) {
                    ValType.set(pas.Tokens.TTokenKind.POINTERTOK);
                    $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0);
                  } else if (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                    if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK) {
                      pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                      IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                      if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(7,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.TokenAt(i + 3).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                      ValType.set(IdentTemp >>> 16);
                      i += 2;
                      if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK)) {
                        i += 1;
                        ValType.set(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i).Name)).AllocElementType);
                        i = rtl.rc($impl.CompileArrayIndex(i,pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i).Name),ValType),-2147483648,2147483647);
                        $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,10,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xffff);
                      } else if (ValType.get() === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                        $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,5,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xffff)}
                       else $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,2,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xffff);
                    } else $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0);
                  } else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                    $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,1,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0)}
                   else $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,2,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0);
                  Result = rtl.rc(i + 1,-2147483648,2147483647);
                }}
               else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) {
                  pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
                 else {
                  i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,ValType),-2147483648,2147483647);
                  if (ValType.get() === pas.Tokens.TTokenKind.ARRAYTOK) {
                    ValType.set(pas.Tokens.TTokenKind.POINTERTOK);
                    $impl.Push(0,1,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0);
                  } else if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
                    $impl.Push(0,10,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0);
                    i += 1;
                  } else if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK) && (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                    pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                    pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                    IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                    if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(8,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.TokenAt(i + 3).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                    ValType.set(IdentTemp >>> 16);
                    i += 2;
                    if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK)) {
                      i += 1;
                      ValType.set(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i).Name)).AllocElementType);
                      IndirectionLevel = 10;
                      if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                        IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i).Name),-2147483648,2147483647);
                        if (IdentTemp < 0) pas.Messages.Error$1(i,$ir.ref(9,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",pas.Common.TokenAt(i).Name,"","","","","","","","",""]),pas.Messages.IMessage)));
                        ValType.set(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i).Name)).AllocElementType);
                        IndirectionLevel = 11;
                      };
                      i = rtl.rc($impl.CompileArrayIndex(i,pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i).Name),{get: function () {
                          return AllocElementType;
                        }, set: function (v) {
                          rtl.rc(v,0,191);
                          AllocElementType = v;
                        }}),-2147483648,2147483647);
                      $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,IndirectionLevel,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xffff);
                    } else if (ValType.get() === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                      $impl.Push(0,12,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xffff)}
                     else $impl.Push(0,6,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xffff);
                  } else if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) && (ValType.get() === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                    pas.Messages.Error$1(i,$ir.ref(10,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.UnderConstruction,"Under construction","","","","","","","","","",""]),pas.Messages.IMessage)));
                  } else {
                    IdentTemp = 0;
                    IndirectionLevel = 4;
                    if (pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) > 0) {
                      IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.System.Copy(pas.Common.IdentifierAt(IdentIndex).Name,1,pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) - 1)),-2147483648,2147483647);
                      if ((pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                        svar = pas.System.Copy(pas.Common.IdentifierAt(IdentIndex).Name,pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) + 1,pas.Common.IdentifierAt(IdentIndex).Name.length);
                        IdentIndex = rtl.rc(IdentTemp,-2147483648,2147483647);
                        IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,svar),-2147483648,2147483647);
                        if (IdentTemp < 0) pas.Messages.Error$1(i + 3,$ir.ref(11,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IdentifierIdentsNoMember,"Identifier idents no member '{0}'.",svar,"","","","","","","","",""]),pas.Messages.IMessage)));
                        IndirectionLevel = 10;
                      };
                    };
                    if (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                      ValType.set(pas.Tokens.TTokenKind.POINTERTOK);
                    };
                    if (VarType !== pas.Tokens.TTokenKind.UNTYPETOK) {
                      if (pas.Datatypes.GetDataSize(ValType.get()) > pas.Datatypes.GetDataSize(VarType)) ValType.set(VarType);
                    };
                    $impl.Push(pas.Common.IdentifierAt(IdentIndex).Value,IndirectionLevel,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,IdentTemp & 0xff);
                    pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                  };
                  Result = rtl.rc(i + 1,-2147483648,2147483647);
                }}
               else {
                j = rtl.rc(i,-2147483648,2147483647);
                pas.Common.isError = false;
                pas.Common.isConst = true;
                if (pas.Common.IdentifierAt(IdentIndex).isVolatile) {
                  pas.Optimize.asm65("?volatile:","");
                  pas.Optimize.ResetOpty();
                };
                i = rtl.rc(pas.Parser.CompileConstTerm(i,{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ConstVal = v;
                  }},ValType),-2147483648,2147483647);
                if (pas.Common.isError) {
                  i = rtl.rc(j,-2147483648,2147483647);
                  if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) {
                    ValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                    if (ValType.get() === pas.Tokens.TTokenKind.CHARTOK) {
                      var $tmp10 = pas.Common.IdentifierAt(IdentIndex).DataType;
                      if ($tmp10 === pas.Tokens.TTokenKind.POINTERTOK) {
                        ValType.set(pas.Tokens.TTokenKind.PCHARTOK)}
                       else if ($tmp10 === pas.Tokens.TTokenKind.STRINGPOINTERTOK) ValType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK);
                    };
                    if (ValType.get() === pas.Tokens.TTokenKind.UNTYPETOK) ValType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
                  } else ValType.set(pas.Common.IdentifierAt(IdentIndex).DataType);
                  if ((ValType.get() === pas.Tokens.TTokenKind.ENUMTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK)) ValType.set(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
                  if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
                    if (ValType.get() in pas.Datatypes.Pointers) {
                      ConstVal = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value - 256,-9007199254740991,9007199254740991)}
                     else ConstVal = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,-9007199254740991,9007199254740991);
                    if ((ValType.get() in pas.Datatypes.IntegerTypes) && (VarType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK))) ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
                    if (VarType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
                      ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991);
                    };
                    if (VarType === pas.Tokens.TTokenKind.SINGLETOK) {
                      ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
                    };
                  };
                  if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.DATAORIGINOFFSET)) {
                    $impl.Push(ConstVal,5,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0)}
                   else if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) {
                    $impl.Push(ConstVal,2,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0)}
                   else $impl.Push(ConstVal,(pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.VARTOK) + 0,pas.Datatypes.GetDataSize(ValType.get()),IdentIndex,0);
                  if (pas.Common.BlockStackTop === 1) if (!(pas.Common.IdentifierAt(IdentIndex).isInit || pas.Common.IdentifierAt(IdentIndex).isInitialized || pas.Common.IdentifierAt(IdentIndex).LoopVariable)) pas.Messages.WarningVariableNotInitialized(i,IdentIndex);
                } else {
                  if ((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) || (VarType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK))) {
                    if (ValType.get() in pas.Datatypes.IntegerTypes) ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
                    if ((VarType === pas.Tokens.TTokenKind.HALFSINGLETOK) || (ValType.get() === pas.Tokens.TTokenKind.HALFSINGLETOK)) {
                      ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991);
                      ValType.set(pas.Tokens.TTokenKind.HALFSINGLETOK);
                    } else {
                      ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
                      ValType.set(pas.Tokens.TTokenKind.SINGLETOK);
                    };
                  };
                  $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
                };
                pas.Common.isConst = false;
                pas.Common.isError = false;
                Result = rtl.rc(i,-2147483648,2147483647);
              };
            }}
           else pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
        } else if ($tmp === pas.Tokens.TTokenKind.ADDRESSTOK) {
          Result = rtl.rc($impl.CompileAddress(i - 1,ValType,{get: function () {
              return AllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              AllocElementType = v;
            }},false),-2147483648,2147483647)}
         else if ($tmp === pas.Tokens.TTokenKind.INTNUMBERTOK) {
          ConstVal = rtl.rc(pas.Common.TokenAt(i).Value,-9007199254740991,9007199254740991);
          ValType.set(pas.Datatypes.GetValueType(ConstVal));
          if (VarType in pas.Datatypes.RealTypes) {
            ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
            if (VarType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
              ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991)}
             else if (VarType === pas.Tokens.TTokenKind.SINGLETOK) ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
            ValType.set(VarType);
          };
          $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          isZero.set(ConstVal === 0);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.FRACNUMBERTOK) {
          ConstVal = rtl.rc(pas.Numbers.FromSingle(pas.Common.TokenAt(i).FracValue),-9007199254740991,9007199254740991);
          ValType.set(pas.Tokens.TTokenKind.REALTOK);
          if (VarType in pas.Datatypes.RealTypes) {
            var $tmp11 = VarType;
            if ($tmp11 === pas.Tokens.TTokenKind.SINGLETOK) {
              ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991)}
             else if ($tmp11 === pas.Tokens.TTokenKind.HALFSINGLETOK) {
              ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991)}
             else {
              ConstVal = rtl.rc(pas.Numbers.CastToReal(ConstVal),-9007199254740991,9007199254740991);
            };
            ValType.set(VarType);
          };
          $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          isZero.set(ConstVal === 0);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
          $impl.Push((pas.Common.TokenAt(i).StrAddress - 256) + pas.Common.CODEORIGIN_BASE,0,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.STRINGPOINTERTOK),0,0);
          ValType.set(pas.Tokens.TTokenKind.STRINGPOINTERTOK);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.CHARLITERALTOK) {
          $impl.Push(pas.Common.TokenAt(i).Value,0,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.CHARTOK),0,0);
          ValType.set(pas.Tokens.TTokenKind.CHARTOK);
          Result = rtl.rc(i,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.OPARTOK) {
          j = rtl.rc($impl.CompileExpression(i + 1,ValType,VarType),-2147483648,2147483647);
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.NOTTOK) {
          Result = rtl.rc($impl.CompileFactor(i + 1,isZero,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.CheckOperator(i,pas.Tokens.TTokenKind.NOTTOK,ValType.get(),pas.Tokens.TTokenKind.UNTYPETOK);
          $impl.GenerateUnaryOperation(pas.Tokens.TTokenKind.NOTTOK,ValType.get());
        } else if ($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) {
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) pas.Messages.Error$1(i,$ir.ref(12,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierNotAllowed,"Type identifier not allowed here","","","","","","","","","",""]),pas.Messages.IMessage)));
          j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
            if (ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              j += 1;
            } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
          } else {
            if (ValType.get() in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes)) {
              $impl.ExpandParam(pas.Tokens.TTokenKind.SMALLINTTOK,ValType.get());
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            } else pas.Messages.Error$1(i + 2,$ir.ref(13,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "{0}" to "{1}".',pas.Tokens.InfoAboutToken(ValType.get()),pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.SHORTREALTOK),"","","","","","","",""]),pas.Messages.IMessage)));
          };
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          ValType.set(pas.Tokens.TTokenKind.SHORTREALTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.REALTOK) {
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) pas.Messages.Error$1(i,$ir.ref(14,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierNotAllowed,"Type identifier not allowed here.","","","","","","","","","",""]),pas.Messages.IMessage)));
          j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
            if (ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
              j += 1;
            } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
          } else {
            if (ValType.get() in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes)) {
              $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tlda #$00","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            } else pas.Messages.Error$1(i + 2,$ir.ref(15,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "{0}" to "{1}".',pas.Tokens.InfoAboutToken(ValType.get()),pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.REALTOK),"","","","","","","",""]),pas.Messages.IMessage)));
          };
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          ValType.set(pas.Tokens.TTokenKind.REALTOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) pas.Messages.Error$1(i,$ir.ref(16,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.TypeIdentifierNotAllowed,"Type identifier not allowed here","","","","","","","","","",""]),pas.Messages.IMessage)));
          j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
            if (ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) {
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :bp2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :bp2+1","");
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              j += 1;
            } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
          } else {
            if (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK)) pas.Messages.Error$1(i + 2,$ir.ref(17,rtl.queryIntfT(pas.Messages.TMessage.$create("Create$1",[pas.Messages.TErrorCode.IllegalTypeConversion,'Illegal type conversion: "{0}" to "{1}".',pas.Tokens.InfoAboutToken(ValType.get()),pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.HALFSINGLETOK),"","","","","","","",""]),pas.Messages.IMessage)));
            if (ValType.get() in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes)) {
              $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
              pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta @F16_I2F.SV","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta @F16_I2F.SV+1","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tsta @F16_I2F.SV+2","");
              pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
              pas.Optimize.asm65("\tsta @F16_I2F.SV+3","");
              pas.Optimize.asm65("\tjsr @F16_I2F","");
              pas.Optimize.asm65("\tlda :eax","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tlda :eax+1","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            } else pas.Messages.Error(i + 2,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(ValType.get()) + '" to "' + pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.HALFSINGLETOK) + '"');
          };
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          ValType.set(pas.Tokens.TTokenKind.HALFSINGLETOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if ($tmp === pas.Tokens.TTokenKind.SINGLETOK) {
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) pas.Messages.Error(i,"type identifier not allowed here");
          j = rtl.rc(i + 2,-2147483648,2147483647);
          if ($impl.SafeCompileConstExpression({get: function () {
              return j;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              j = v;
            }},{get: function () {
              return ConstVal;
            }, set: function (v) {
              rtl.rc(v,-9007199254740991,9007199254740991);
              ConstVal = v;
            }},ValType,pas.Tokens.TTokenKind.SINGLETOK,false,true)) {
            if (!(ValType.get() in pas.Datatypes.RealTypes)) ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
            ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
            ValType.set(pas.Tokens.TTokenKind.SINGLETOK);
            $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
          } else {
            j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
              if (ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
                j += 1;
              } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
            } else {
              if (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK)) pas.Messages.Error(i + 2,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(ValType.get()) + '" to "' + pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.SINGLETOK) + '"');
              if (ValType.get() in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes)) {
                $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :FPMAN0","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :FPMAN1","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tsta :FPMAN2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH*3,x","");
                pas.Optimize.asm65("\tsta :FPMAN3","");
                pas.Optimize.asm65("\tjsr @I2F","");
                pas.Optimize.asm65("\tlda :FPMAN0","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                pas.Optimize.asm65("\tlda :FPMAN1","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tlda :FPMAN2","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
                pas.Optimize.asm65("\tlda :FPMAN3","");
                pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
              } else pas.Messages.Error(i + 2,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(ValType.get()) + '" to "' + pas.Tokens.InfoAboutToken(pas.Tokens.TTokenKind.SINGLETOK) + '"');
            };
          };
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          ValType.set(pas.Tokens.TTokenKind.SINGLETOK);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else if (($tmp === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) || ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp === pas.Tokens.TTokenKind.WORDTOK) || ($tmp === pas.Tokens.TTokenKind.CHARTOK) || ($tmp === pas.Tokens.TTokenKind.PCHARTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp === pas.Tokens.TTokenKind.BYTETOK) || ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK) || ($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
          if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) pas.Messages.Error(i,"type identifier not allowed here");
          j = rtl.rc($impl.CompileExpression(i + 2,ValType,pas.Common.TokenAt(i).Kind),-2147483648,2147483647);
          if ((ValType.get() in pas.Datatypes.Pointers) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.TokenAt(i + 3).Kind !== pas.Tokens.TTokenKind.OBRACKETTOK)) {
            IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
            if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.RECORDTOK)) if (((pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements in rtl.createSet(0,1))) || (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {}
            else pas.Messages.ErrorIdentifierIllegalTypeConversion(i + 2,IdentIndex,pas.Common.TokenAt(i).Kind);
          };
          if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) if (ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) {
            pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
            pas.Optimize.asm65("\tsta :bp2+1","");
            pas.Optimize.asm65("\tldy #$00","");
            var $tmp12 = pas.Datatypes.GetDataSize(pas.Common.TokenAt(i).Kind);
            if ($tmp12 === 1) {
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
            } else if ($tmp12 === 2) {
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
            } else if ($tmp12 === 4) {
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*2,x","");
              pas.Optimize.asm65("\tiny","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH*3,x","");
            };
            j += 1;
          } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
          if (!(ValType.get() in pas.Datatypes.AllTypes)) pas.Messages.Error$2(i,pas.Messages.TErrorCode.TypeMismatch);
          $impl.ExpandParam(pas.Common.TokenAt(i).Kind,ValType.get());
          pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.CPARTOK);
          ValType.set(pas.Common.TokenAt(i).Kind);
          if (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) if (ValType.get() === pas.Tokens.TTokenKind.PCHARTOK) {
            ValType.set(pas.Tokens.TTokenKind.CHARTOK);
            j += 1;
          } else pas.Messages.Error$2(j + 1,pas.Messages.TErrorCode.IllegalQualifier);
          Result = rtl.rc(j + 1,-2147483648,2147483647);
        } else {
          pas.Messages.Error$2(i,pas.Messages.TErrorCode.IdNumExpExpected);
        };
      } finally {
        $ir.free();
      };
      return Result;
    };
    $impl.ResizeType = function (ValType) {
      rtl.rc(ValType.get(),0,191);
      if (ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.BYTETOK,pas.Tokens.TTokenKind.WORDTOK,pas.Tokens.TTokenKind.SHORTINTTOK,pas.Tokens.TTokenKind.SMALLINTTOK)) ValType.set(ValType.get() + 1);
    };
    $impl.CompileTerm = function (i, ValType, VarType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ValType.get(),0,191);
      rtl.rc(VarType,0,191);
      var Result = 0;
      var j = 0;
      var k = 0;
      var oldCodeSize = 0;
      var RightValType = 0;
      var CastRealType = 0;
      var oldPass = 0;
      var isZero = false;
      oldPass = rtl.rc(pas.Common.pass,0,2);
      oldCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
      pas.Common.pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
      j = rtl.rc($impl.CompileFactor(i,{get: function () {
          return isZero;
        }, set: function (v) {
          isZero = v;
        }},ValType,VarType),-2147483648,2147483647);
      pas.Common.pass = rtl.rc(oldPass,0,2);
      pas.Common.CodeSize = rtl.rc(oldCodeSize,-2147483648,2147483647);
      if (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.MODTOK,pas.Tokens.TTokenKind.IDIVTOK,pas.Tokens.TTokenKind.SHLTOK,pas.Tokens.TTokenKind.SHRTOK,pas.Tokens.TTokenKind.ANDTOK)) {
        j = rtl.rc($impl.CompileFactor(i,{get: function () {
            return isZero;
          }, set: function (v) {
            isZero = v;
          }},ValType,pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647)}
       else {
        if (ValType.get() in pas.Datatypes.RealTypes) VarType = rtl.rc(ValType.get(),0,191);
        j = rtl.rc($impl.CompileFactor(i,{get: function () {
            return isZero;
          }, set: function (v) {
            isZero = v;
          }},ValType,VarType),-2147483648,2147483647);
      };
      while (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.MULTOK,pas.Tokens.TTokenKind.DIVTOK,pas.Tokens.TTokenKind.MODTOK,pas.Tokens.TTokenKind.IDIVTOK,pas.Tokens.TTokenKind.SHLTOK,pas.Tokens.TTokenKind.SHRTOK,pas.Tokens.TTokenKind.ANDTOK)) {
        if (ValType.get() in pas.Datatypes.RealTypes) VarType = rtl.rc(ValType.get(),0,191);
        if (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.MULTOK,pas.Tokens.TTokenKind.DIVTOK)) {
          k = rtl.rc($impl.CompileFactor(j + 2,{get: function () {
              return isZero;
            }, set: function (v) {
              isZero = v;
            }},{get: function () {
              return RightValType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              RightValType = v;
            }},VarType),-2147483648,2147483647)}
         else k = rtl.rc($impl.CompileFactor(j + 2,{get: function () {
            return isZero;
          }, set: function (v) {
            isZero = v;
          }},{get: function () {
            return RightValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightValType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
        if ((pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.MODTOK,pas.Tokens.TTokenKind.IDIVTOK)) && isZero) pas.Messages.Error(j + 1,"Division by zero");
        if (((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)) && (RightValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) || ((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK)) && (RightValType in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)))) pas.Messages.Error(j + 2,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(ValType.get()) + '" to "' + pas.Tokens.InfoAboutToken(RightValType) + '"');
        if (VarType in pas.Datatypes.RealTypes) {
          if ((ValType.get() === VarType) && (RightValType in pas.Datatypes.RealTypes)) RightValType = rtl.rc(VarType,0,191);
          if ((ValType.get() in pas.Datatypes.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
        };
        if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DIVTOK) {
          if (VarType in pas.Datatypes.RealTypes) {
            CastRealType = rtl.rc(VarType,0,191);
          } else {
            CastRealType = rtl.rc(pas.Tokens.TTokenKind.REALTOK,0,191);
          };
        } else {
          CastRealType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
        };
        $impl.RealTypeConversion(ValType,{get: function () {
            return RightValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightValType = v;
          }},CastRealType);
        ValType.set(pas.Common.GetCommonType(j + 1,ValType.get(),RightValType));
        pas.Common.CheckOperator(i,pas.Common.TokenAt(j + 1).Kind,ValType.get(),RightValType);
        if (!(pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.SHLTOK,pas.Tokens.TTokenKind.SHRTOK))) $impl.ExpandExpression(ValType,RightValType,pas.Tokens.TTokenKind.UNTYPETOK,false);
        if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.MULTOK) if ((ValType.get() in pas.Datatypes.IntegerTypes) && (VarType in pas.Datatypes.IntegerTypes)) if (pas.Datatypes.GetDataSize(ValType.get()) > pas.Datatypes.GetDataSize(VarType)) ValType.set(VarType);
        $impl.GenerateBinaryOperation(pas.Common.TokenAt(j + 1).Kind,ValType.get());
        var $tmp = pas.Common.TokenAt(j + 1).Kind;
        if ($tmp === pas.Tokens.TTokenKind.MULTOK) {
          $impl.ResizeType(ValType);
          $impl.ExpandExpression({get: function () {
              return VarType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              VarType = v;
            }},pas.Tokens.TTokenKind.UNTYPETOK,pas.Tokens.TTokenKind.UNTYPETOK,false);
        } else if ($tmp === pas.Tokens.TTokenKind.SHRTOK) {
          if ((ValType.get() in pas.Datatypes.SignedOrdinalTypes) && (pas.Datatypes.GetDataSize(ValType.get()) > 1)) {
            $impl.ResizeType(ValType);
            $impl.ResizeType(ValType);
          }}
         else if ($tmp === pas.Tokens.TTokenKind.SHLTOK) {
          $impl.ResizeType(ValType);
          $impl.ResizeType(ValType);
        };
        j = rtl.rc(k,-2147483648,2147483647);
      };
      Result = rtl.rc(j,-2147483648,2147483647);
      return Result;
    };
    $impl.CompileSimpleExpression = function (i, ValType, VarType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ValType.get(),0,191);
      rtl.rc(VarType,0,191);
      var Result = 0;
      var j = 0;
      var k = 0;
      var ConstVal = 0;
      var RightValType = 0;
      if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK)) {
        j = rtl.rc(i + 1,-2147483648,2147483647)}
       else j = rtl.rc(i,-2147483648,2147483647);
      if ($impl.SafeCompileConstExpression({get: function () {
          return j;
        }, set: function (v) {
          rtl.rc(v,-2147483648,2147483647);
          j = v;
        }},{get: function () {
          return ConstVal;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          ConstVal = v;
        }},ValType,VarType,false,true)) {
        if ((ValType.get() in pas.Datatypes.IntegerTypes) && (VarType in pas.Datatypes.RealTypes)) {
          ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
          ValType.set(VarType);
        };
        if (VarType in pas.Datatypes.RealTypes) {
          ValType.set(VarType);
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.MINUSTOK) {
          ConstVal = rtl.rc(pas.Numbers.Negate(ValType,ConstVal),-9007199254740991,9007199254740991);
        };
        if (ValType.get() === pas.Tokens.TTokenKind.SINGLETOK) {
          ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
        };
        if (ValType.get() === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991);
        };
        $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
      } else {
        j = rtl.rc($impl.CompileTerm(j,ValType,VarType),-2147483648,2147483647);
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.MINUSTOK) {
          $impl.GenerateUnaryOperation(pas.Tokens.TTokenKind.MINUSTOK,ValType.get());
          if (ValType.get() in pas.Datatypes.UnsignedOrdinalTypes) if (ValType.get() === pas.Tokens.TTokenKind.BYTETOK) {
            ValType.set(pas.Tokens.TTokenKind.SMALLINTTOK)}
           else ValType.set(pas.Tokens.TTokenKind.INTEGERTOK);
        };
      };
      while (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK,pas.Tokens.TTokenKind.ORTOK,pas.Tokens.TTokenKind.XORTOK)) {
        if (ValType.get() in pas.Datatypes.RealTypes) VarType = rtl.rc(ValType.get(),0,191);
        k = rtl.rc($impl.CompileTerm(j + 2,{get: function () {
            return RightValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightValType = v;
          }},VarType),-2147483648,2147483647);
        if (((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)) && (RightValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) || ((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK)) && (RightValType in rtl.createSet(pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)))) pas.Messages.Error(j + 2,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(ValType.get()) + '" to "' + pas.Tokens.InfoAboutToken(RightValType) + '"');
        if (VarType in pas.Datatypes.RealTypes) {
          if ((ValType.get() === VarType) && (RightValType in pas.Datatypes.RealTypes)) RightValType = rtl.rc(VarType,0,191);
          if ((ValType.get() in pas.Datatypes.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
        };
        $impl.RealTypeConversion(ValType,{get: function () {
            return RightValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightValType = v;
          }},pas.Tokens.TTokenKind.UNTYPETOK);
        if ((ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) && (RightValType in pas.Datatypes.IntegerTypes)) {
          $impl.ExpandParam(pas.Tokens.TTokenKind.WORDTOK,RightValType);
          RightValType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
        };
        if ((RightValType === pas.Tokens.TTokenKind.POINTERTOK) && (ValType.get() in pas.Datatypes.IntegerTypes)) {
          $impl.ExpandParam_m1(pas.Tokens.TTokenKind.WORDTOK,ValType.get());
          ValType.set(pas.Tokens.TTokenKind.POINTERTOK);
        };
        ValType.set(pas.Common.GetCommonType(j + 1,ValType.get(),RightValType));
        pas.Common.CheckOperator(i,pas.Common.TokenAt(j + 1).Kind,ValType.get(),RightValType);
        if (pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.PLUSTOK,pas.Tokens.TTokenKind.MINUSTOK)) {
          if ((pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.MINUSTOK) && (RightValType in pas.Datatypes.UnsignedOrdinalTypes) && (VarType in rtl.unionSet(pas.Datatypes.SignedOrdinalTypes,rtl.createSet(pas.Tokens.TTokenKind.BOOLEANTOK,pas.Tokens.TTokenKind.REALTOK,pas.Tokens.TTokenKind.HALFSINGLETOK,pas.Tokens.TTokenKind.SINGLETOK)))) {
            if ((ValType.get() === VarType) && (RightValType === VarType)) {}
            else $impl.ExpandExpression(ValType,RightValType,VarType,true);
          } else $impl.ExpandExpression(ValType,RightValType,VarType,false);
        } else $impl.ExpandExpression(ValType,RightValType,pas.Tokens.TTokenKind.UNTYPETOK,false);
        if ((ValType.get() in pas.Datatypes.IntegerTypes) && (VarType in pas.Datatypes.IntegerTypes)) if (pas.Datatypes.GetDataSize(ValType.get()) > pas.Datatypes.GetDataSize(VarType)) ValType.set(VarType);
        $impl.GenerateBinaryOperation(pas.Common.TokenAt(j + 1).Kind,ValType.get());
        j = rtl.rc(k,-2147483648,2147483647);
      };
      Result = rtl.rc(j,-2147483648,2147483647);
      return Result;
    };
    $impl.CompileExpression = function (i, ValType, VarType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ValType.get(),0,191);
      rtl.rc(VarType,0,191);
      var Result = 0;
      var j = 0;
      var k = 0;
      var RightValType = 0;
      var ConstValType = 0;
      var isZero = 0;
      var sLeft = false;
      var sRight = false;
      var cRight = false;
      var yes = false;
      var ConstVal = 0;
      var ConstValRight = 0;
      pas.Debugger.debugger.CompileExpression(i,ValType.get(),VarType);
      ConstVal = 0;
      isZero = rtl.rc(pas.Tokens.TTokenKind.INTEGERTOK,0,191);
      cRight = false;
      if ($impl.SafeCompileConstExpression({get: function () {
          return i;
        }, set: function (v) {
          rtl.rc(v,-2147483648,2147483647);
          i = v;
        }},{get: function () {
          return ConstVal;
        }, set: function (v) {
          rtl.rc(v,-9007199254740991,9007199254740991);
          ConstVal = v;
        }},ValType,VarType,false,true)) {
        if ((ValType.get() in pas.Datatypes.IntegerTypes) && (VarType in pas.Datatypes.RealTypes)) {
          ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
          ValType.set(VarType);
        };
        if (VarType in pas.Datatypes.RealTypes) ValType.set(VarType);
        if (ValType.get() === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991);
          ValType.set(pas.Tokens.TTokenKind.HALFSINGLETOK);
        };
        if (ValType.get() === pas.Tokens.TTokenKind.SINGLETOK) {
          ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
          ValType.set(pas.Tokens.TTokenKind.SINGLETOK);
        };
        $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(ValType.get()),0,0);
        Result = rtl.rc(i,-2147483648,2147483647);
        return Result;
      };
      ConstValRight = 0;
      sLeft = false;
      sRight = false;
      i = rtl.rc($impl.CompileSimpleExpression(i,ValType,VarType),-2147483648,2147483647);
      if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) || (ValType.get() === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
        sLeft = true}
       else if ((ValType.get() in pas.Datatypes.Pointers) && (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK)) if ((pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name)).AllocElementType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Parser.Elements(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name)) > 0)) sLeft = true;
      if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.INTOK) pas.System.Writeln("IN");
      if (pas.Common.TokenAt(i + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK,pas.Tokens.TTokenKind.LTTOK,pas.Tokens.TTokenKind.LETOK,pas.Tokens.TTokenKind.GTTOK,pas.Tokens.TTokenKind.GETOK)) {
        if (ValType.get() in rtl.unionSet(pas.Datatypes.RealTypes,rtl.createSet(pas.Tokens.TTokenKind.ENUMTOK))) VarType = rtl.rc(ValType.get(),0,191);
        j = rtl.rc($impl.CompileSimpleExpression(i + 2,{get: function () {
            return RightValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightValType = v;
          }},VarType),-2147483648,2147483647);
        k = rtl.rc(i + 2,-2147483648,2147483647);
        if ($impl.SafeCompileConstExpression({get: function () {
            return k;
          }, set: function (v) {
            rtl.rc(v,-2147483648,2147483647);
            k = v;
          }},{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ConstValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ConstValType = v;
          }},VarType,false,true)) if ((ConstValType in pas.Datatypes.IntegerTypes) && (VarType in rtl.unionSet(pas.Datatypes.IntegerTypes,rtl.createSet(pas.Tokens.TTokenKind.BOOLEANTOK)))) {
          if (ConstVal === 0) {
            isZero = rtl.rc(pas.Tokens.TTokenKind.BYTETOK,0,191);
            if ((ValType.get() in pas.Datatypes.SignedOrdinalTypes) && (pas.Common.TokenAt(i + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.EQTOK,pas.Tokens.TTokenKind.NETOK))) {
              var $tmp = ValType.get();
              if ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) {
                ValType.set(pas.Tokens.TTokenKind.BYTETOK)}
               else if ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) {
                ValType.set(pas.Tokens.TTokenKind.WORDTOK)}
               else if ($tmp === pas.Tokens.TTokenKind.INTEGERTOK) ValType.set(pas.Tokens.TTokenKind.CARDINALTOK);
            };
          };
          if (ConstValType in pas.Datatypes.SignedOrdinalTypes) if (ConstVal < 0) isZero = rtl.rc(pas.Tokens.TTokenKind.SHORTINTTOK,0,191);
          cRight = true;
          ConstValRight = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
          RightValType = rtl.rc(ConstValType,0,191);
        };
        if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) || (RightValType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
          sRight = true}
         else if ((RightValType in pas.Datatypes.Pointers) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.IDENTTOK)) if ((pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name)).AllocElementType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Parser.Elements(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name)) > 0)) sRight = true;
        if (VarType in pas.Datatypes.RealTypes) {
          if ((ValType.get() === VarType) && (RightValType in pas.Datatypes.RealTypes)) RightValType = rtl.rc(VarType,0,191);
          if ((ValType.get() in pas.Datatypes.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
        };
        $impl.RealTypeConversion(ValType,{get: function () {
            return RightValType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            RightValType = v;
          }},pas.Tokens.TTokenKind.UNTYPETOK);
        if (cRight && (pas.Common.TokenAt(i + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.LTTOK,pas.Tokens.TTokenKind.GTTOK)) && (ValType.get() in pas.Datatypes.IntegerTypes)) {
          yes = false;
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.LTTOK) {
            var $tmp1 = ValType.get();
            if (($tmp1 === pas.Tokens.TTokenKind.BYTETOK) || ($tmp1 === pas.Tokens.TTokenKind.WORDTOK) || ($tmp1 === pas.Tokens.TTokenKind.CARDINALTOK)) {
              yes = isZero === pas.Tokens.TTokenKind.BYTETOK}
             else if ($tmp1 === pas.Tokens.TTokenKind.SHORTINTTOK) {
              yes = ConstVal === -128}
             else if ($tmp1 === pas.Tokens.TTokenKind.SMALLINTTOK) {
              yes = ConstVal === -32768}
             else if ($tmp1 === pas.Tokens.TTokenKind.INTEGERTOK) yes = ConstVal === -2147483648;
          } else {
            var $tmp2 = ValType.get();
            if ($tmp2 === pas.Tokens.TTokenKind.BYTETOK) {
              yes = ConstVal === 255}
             else if ($tmp2 === pas.Tokens.TTokenKind.WORDTOK) {
              yes = ConstVal === 65535}
             else if ($tmp2 === pas.Tokens.TTokenKind.CARDINALTOK) {
              yes = ConstVal === 4294967295}
             else if ($tmp2 === pas.Tokens.TTokenKind.SHORTINTTOK) {
              yes = ConstVal === 127}
             else if ($tmp2 === pas.Tokens.TTokenKind.SMALLINTTOK) {
              yes = ConstVal === 32767}
             else if ($tmp2 === pas.Tokens.TTokenKind.INTEGERTOK) yes = ConstVal === 2147483647;
          };
          if (yes) {
            pas.Messages.WarningAlwaysFalse(i + 2);
            pas.Messages.WarningUnreachableCode(i + 2);
          };
        };
        if ((isZero === pas.Tokens.TTokenKind.BYTETOK) && (ValType.get() in pas.Datatypes.UnsignedOrdinalTypes)) {
          var $tmp3 = pas.Common.TokenAt(i + 1).Kind;
          if ($tmp3 === pas.Tokens.TTokenKind.GETOK) pas.Messages.WarningAlwaysTrue(i + 2);
        };
        if ((isZero === pas.Tokens.TTokenKind.SHORTINTTOK) && (ValType.get() in pas.Datatypes.UnsignedOrdinalTypes)) {
          var $tmp4 = pas.Common.TokenAt(i + 1).Kind;
          if (($tmp4 === pas.Tokens.TTokenKind.EQTOK) || ($tmp4 === pas.Tokens.TTokenKind.LTTOK) || ($tmp4 === pas.Tokens.TTokenKind.LETOK)) {
            pas.Messages.WarningAlwaysFalse(i + 2);
            pas.Messages.WarningUnreachableCode(i + 2);
          } else if (($tmp4 === pas.Tokens.TTokenKind.GTTOK) || ($tmp4 === pas.Tokens.TTokenKind.GETOK)) pas.Messages.WarningAlwaysTrue(i + 2);
        };
        if (sLeft || sRight) {}
        else pas.Common.GetCommonType(j,ValType.get(),RightValType);
        if (VarType in pas.Datatypes.RealTypes) {
          if ((ValType.get() === VarType) && (RightValType in pas.Datatypes.RealTypes)) RightValType = rtl.rc(VarType,0,191);
          if ((ValType.get() in pas.Datatypes.RealTypes) && (RightValType === VarType)) ValType.set(VarType);
        };
        if (((ValType.get() in pas.Datatypes.SignedOrdinalTypes) && (RightValType in pas.Datatypes.UnsignedOrdinalTypes)) || ((ValType.get() in pas.Datatypes.UnsignedOrdinalTypes) && (RightValType in pas.Datatypes.SignedOrdinalTypes))) if (pas.Datatypes.GetDataSize(ValType.get()) === pas.Datatypes.GetDataSize(RightValType)) {
          var $tmp5 = pas.Datatypes.GetDataSize(ValType.get());
          if ($tmp5 === 1) {
            if (cRight && (ConstValRight >= -128) && (ConstValRight <= 127)) {
              RightValType = rtl.rc(ValType.get(),0,191)}
             else {
              $impl.ExpandParam_m1(pas.Tokens.TTokenKind.SMALLINTTOK,ValType.get());
              $impl.ExpandParam(pas.Tokens.TTokenKind.SMALLINTTOK,RightValType);
              ValType.set(pas.Tokens.TTokenKind.SMALLINTTOK);
              RightValType = rtl.rc(pas.Tokens.TTokenKind.SMALLINTTOK,0,191);
            };
          } else if ($tmp5 === 2) {
            if (cRight && (ConstValRight >= -32768) && (ConstValRight <= 32767)) {
              RightValType = rtl.rc(ValType.get(),0,191)}
             else {
              $impl.ExpandParam_m1(pas.Tokens.TTokenKind.INTEGERTOK,ValType.get());
              $impl.ExpandParam(pas.Tokens.TTokenKind.INTEGERTOK,RightValType);
              ValType.set(pas.Tokens.TTokenKind.INTEGERTOK);
              RightValType = rtl.rc(pas.Tokens.TTokenKind.INTEGERTOK,0,191);
            };
          };
        };
        $impl.ExpandExpression(ValType,RightValType,pas.Tokens.TTokenKind.UNTYPETOK,false);
        if (sLeft || sRight) {
          if ((ValType.get() in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.POINTERTOK)) && (RightValType in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.POINTERTOK))) {
            if ((ValType.get() === pas.Tokens.TTokenKind.POINTERTOK) || (RightValType === pas.Tokens.TTokenKind.POINTERTOK)) pas.Messages.Error(i,"Can't determine PCHAR length, consider using COMPAREMEM");
            $impl.GenerateRelationString(pas.Common.TokenAt(i + 1).Kind,ValType.get(),RightValType);
          } else pas.Common.GetCommonType(j,ValType.get(),RightValType);
        } else $impl.GenerateRelation(pas.Common.TokenAt(i + 1).Kind,ValType.get());
        i = rtl.rc(j,-2147483648,2147483647);
        ValType.set(pas.Tokens.TTokenKind.BOOLEANTOK);
      };
      Result = rtl.rc(i,-2147483648,2147483647);
      return Result;
    };
    $impl.SaveBreakAddress = function () {
      pas.Common.BreakPosStackTop += 1;
      rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr = rtl.rc(pas.Common.CodeSize,0,65535);
      rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).brk = false;
      rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt = false;
    };
    $impl.RestoreBreakAddress = function () {
      if (rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).brk) pas.Optimize.asm65("b_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
      pas.Common.BreakPosStackTop -= 1;
      pas.Optimize.ResetOpty();
    };
    $impl.CompileBlockRead = function (i, IdentIndex, IdentBlock) {
      rtl.rc(i.get(),-2147483648,2147483647);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      rtl.rc(IdentBlock,-2147483648,2147483647);
      var Result = 0;
      var NumActualParams = 0;
      var idx = 0;
      var ActualParamType = 0;
      var AllocElementType = 0;
      NumActualParams = 0;
      AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
      do {
        NumActualParams += 1;
        $impl.StartOptimization(i.get());
        if (NumActualParams > 3) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.WrongNumberOfParameters,IdentBlock);
        if (rtl.rcArrR(pas.CompilerTypes.fBlockRead_ParamType,NumActualParams - 1) in rtl.unionSet(pas.Datatypes.Pointers,rtl.createSet(pas.Tokens.TTokenKind.UNTYPETOK))) {
          if (pas.Common.TokenAt(i.get() + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
            pas.Messages.Error$2(i.get() + 2,pas.Messages.TErrorCode.VariableExpected)}
           else {
            idx = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i.get() + 2).Name),-2147483648,2147483647);
            if (pas.Common.IdentifierAt(idx).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
              if (!(pas.Common.IdentifierAt(idx).DataType in pas.Datatypes.Pointers) || (pas.Parser.Elements(idx) === 0)) pas.Messages.Error$2(i.get() + 2,pas.Messages.TErrorCode.VariableExpected);
            } else if (pas.Common.IdentifierAt(idx).Kind !== pas.Tokens.TTokenKind.VARTOK) pas.Messages.Error$2(i.get() + 2,pas.Messages.TErrorCode.VariableExpected);
          };
          i.set($impl.CompileAddress(i.get() + 1,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},{get: function () {
              return AllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              AllocElementType = v;
            }},rtl.rcArrR(pas.CompilerTypes.fBlockRead_ParamType,NumActualParams - 1) in pas.Datatypes.Pointers));
        } else i.set($impl.CompileExpression(i.get() + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ActualParamType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK));
        pas.Common.GetCommonType(i.get(),rtl.rcArrR(pas.CompilerTypes.fBlockRead_ParamType,NumActualParams - 1),ActualParamType);
        $impl.ExpandParam(rtl.rcArrR(pas.CompilerTypes.fBlockRead_ParamType,NumActualParams - 1),ActualParamType);
        var $tmp = NumActualParams;
        if ($tmp === 1) {
          $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.buffer")}
         else if ($tmp === 2) {
          $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.nrecord")}
         else if ($tmp === 3) $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.numread");
      } while (!(pas.Common.TokenAt(i.get() + 1).Kind !== pas.Tokens.TTokenKind.COMMATOK));
      if (NumActualParams < 2) pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.WrongNumberOfParameters,IdentBlock);
      pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.CPARTOK);
      i.set(i.get() + 1);
      Result = rtl.rc(NumActualParams,-2147483648,2147483647);
      return Result;
    };
    $impl.UpdateCaseLabels = function (j, tb, lab) {
      rtl.rc(j,-2147483648,2147483647);
      var i = 0;
      for (var $l = 0, $end = rtl.length(tb.get()) - 1 - 1; $l <= $end; $l++) {
        i = $l;
        if (((lab.left >= rtl.rcArrR(tb.get(),i).left) && (lab.left <= rtl.rcArrR(tb.get(),i).right)) || ((lab.right >= rtl.rcArrR(tb.get(),i).left) && (lab.right <= rtl.rcArrR(tb.get(),i).right)) || ((rtl.rcArrR(tb.get(),i).left >= lab.left) && (rtl.rcArrR(tb.get(),i).right <= lab.right))) pas.Messages.Error(j,"Duplicate case label");
      };
      i = rtl.rc(rtl.length(tb.get()) - 1,-2147483648,2147483647);
      rtl.rcArrR(tb.get(),i).$assign(lab);
      tb.set(rtl.arraySetLength(tb.get(),pas.CompilerTypes.TCaseLabel,i + 2));
    };
    $impl.CheckAssignment = function (i, IdentIndex) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(IdentIndex,-2147483648,2147483647);
      if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING) pas.Messages.Error(i,"Can't assign values to const variable");
      if (pas.Common.IdentifierAt(IdentIndex).LoopVariable) pas.Messages.Error(i,"Illegal assignment to for-loop variable '" + pas.Common.IdentifierAt(IdentIndex).Name + "'");
    };
    $impl.CompileStatement = function (i, isAsm) {
      rtl.rc(i,-2147483648,2147483647);
      var Result = 0;
      var j = 0;
      var k = 0;
      var IdentIndex = 0;
      var IdentTemp = 0;
      var NumActualParams = 0;
      var NumCharacters = 0;
      var IfLocalCnt = 0;
      var CaseLocalCnt = 0;
      var NumCaseStatements = 0;
      var vlen = 0;
      var oldPass = 0;
      var oldCodeSize = 0;
      var Param = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
      var IndirectionLevel = 0;
      var ExpressionType = 0;
      var ActualParamType = 0;
      var ConstValType = 0;
      var VarType = 0;
      var SelectorType = 0;
      var Value = 0;
      var ConstVal = 0;
      var ConstVal2 = 0;
      var Down = false;
      var ExitLoop = false;
      var yes = false;
      var DEREFERENCE = false;
      var ADDRESS = false;
      var CaseLabelArray = [];
      var CaseLabel = pas.CompilerTypes.TCaseLabel.$new();
      var forLoop = pas.CompilerTypes.TForLoop.$new();
      var Name = "";
      var EnumName = "";
      var svar = "";
      var par1 = "";
      var par2 = "";
      var forBPL = 0;
      pas.Debugger.debugger.CompileStatement(i,isAsm);
      Result = rtl.rc(i,-2147483648,2147483647);
      Param = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
      IdentIndex = 0;
      ExpressionType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
      par1 = "";
      par2 = "";
      $impl.StopOptimization();
      var $tmp = pas.Common.TokenAt(i).Kind;
      if (($tmp === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) || ($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp === pas.Tokens.TTokenKind.WORDTOK) || ($tmp === pas.Tokens.TTokenKind.CHARTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp === pas.Tokens.TTokenKind.BYTETOK) || ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK) || ($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) || ($tmp === pas.Tokens.TTokenKind.REALTOK) || ($tmp === pas.Tokens.TTokenKind.SINGLETOK) || ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK)) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) pas.Messages.Error(i,"type identifier not allowed here");
        $impl.StartOptimization(i + 1);
        if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.VariableExpected)}
         else IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
        VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
        if (VarType !== pas.Common.TokenAt(i).Kind) pas.Messages.Error(i,"Argument cannot be assigned to");
        pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.CPARTOK);
        if (pas.Common.TokenAt(i + 4).Kind !== pas.Tokens.TTokenKind.ASSIGNTOK) pas.Messages.Error$2(i + 4,pas.Messages.TErrorCode.IllegalExpression);
        i = rtl.rc($impl.CompileExpression(i + 5,{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},VarType),-2147483648,2147483647);
        $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(VarType),IdentIndex,"","");
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.IDENTTOK) {
        IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
        if ((IdentIndex > 0) && (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) && (pas.Common.BlockStackTop > 1) && (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK)) for (var $l = pas.Common.NumIdent(); $l >= 1; $l--) {
          j = $l;
          if ((pas.Common.IdentifierAt(j).ProcAsBlock === pas.Common.NumBlocks) && (pas.Common.IdentifierAt(j).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK)) {
            if ((pas.Common.IdentifierAt(j).Name === pas.Common.IdentifierAt(IdentIndex).Name) && (pas.Common.IdentifierAt(j).SourceFile.UnitIndex === pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex)) IdentIndex = rtl.rc($impl.GetIdentResult(pas.Common.NumBlocks),-2147483648,2147483647);
            break;
          };
        };
        if (IdentIndex > 0) {
          var $tmp1 = pas.Common.IdentifierAt(IdentIndex).Kind;
          if ($tmp1 === pas.Tokens.TTokenKind.LABELTOK) {
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COLONTOK);
            if (pas.Common.IdentifierAt(IdentIndex).isInit) pas.Messages.Error(i,"Label already defined");
            pas.Common.IdentifierAt(IdentIndex).isInit = true;
            pas.Optimize.asm65(pas.Common.IdentifierAt(IdentIndex).Name,"");
            Result = rtl.rc(i,-2147483648,2147483647);
          } else if (($tmp1 === pas.Tokens.TTokenKind.VARTOK) || ($tmp1 === pas.Tokens.TTokenKind.TYPETOK)) {
            VarType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
            $impl.StartOptimization(i + 1);
            if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) && !(pas.Common.TokenAt(i + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.ASSIGNTOK,pas.Tokens.TTokenKind.OBRACKETTOK))) {
              IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,4)),-2147483648,2147483647);
              $impl.CompileActualParameters({get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }},IdentTemp,IdentIndex);
              Result = rtl.rc(i,-2147483648,2147483647);
              return Result;
            };
            if (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
              IdentTemp = rtl.rc(pas.Parser.GetIdentIndex($impl.ExtractName(IdentIndex,pas.Common.IdentifierAt(IdentIndex).Name)),-2147483648,2147483647);
              if ((pas.Common.IdentifierAt(IdentTemp).NumAllocElements_ > 0) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalQualifier);
            };
            IndirectionLevel = 2;
            if ((pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.TYPETOK) && (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK)) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected);
            if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Parser.Elements(IdentIndex) > 0)) {
              IndirectionLevel = 9;
              j = rtl.rc(i,-2147483648,2147483647);
              i = rtl.rc($impl.CompileAddress(i + 1,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ExpressionType = v;
                }},{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }},false),-2147483648,2147483647);
              if (pas.Datatypes.GetDataSize(VarType) !== (pas.Parser.Elements(IdentIndex) * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType))) if (VarType === pas.Tokens.TTokenKind.UNTYPETOK) {
                pas.Messages.Error(j + 2,'Illegal type conversion: "POINTER" to "Array[0..' + pas.StringUtilities.IntToStr(pas.Parser.Elements(IdentIndex) - 1) + "] Of " + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).AllocElementType) + '"')}
               else if (pas.Parser.Elements(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j + 2).Name)) === 0) {
                pas.Messages.Error(j + 2,'Illegal type conversion: "' + pas.Tokens.InfoAboutToken(VarType) + '" to "' + pas.Common.IdentifierAt(IdentIndex).Name + '"')}
               else pas.Messages.Error(j + 2,'Illegal type conversion: "Array[0..' + pas.StringUtilities.IntToStr(pas.Parser.Elements(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j + 2).Name)) - 1) + "] Of " + pas.Tokens.InfoAboutToken(VarType) + '" to "' + pas.Common.IdentifierAt(IdentIndex).Name + '"');
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
              i += 1;
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OBRACKETTOK);
              i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }}),-2147483648,2147483647);
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
              i += 1;
              pas.Optimize.asm65("\tlda :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1,x","");
              pas.Optimize.asm65("\tlda :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
              pas.Optimize.asm65("\tsta :STACKORIGIN-1+STACKWIDTH,x","");
              pas.Optimize.asm65("\tdex","");
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) {
              if (!(pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression);
              if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) {
                VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191)}
               else VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
              i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ExpressionType = v;
                }},pas.Tokens.TTokenKind.POINTERTOK),-2147483648,2147483647);
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
              if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK)) {
                IndirectionLevel = 9;
                pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.TokenAt(i + 3).Name + "'");
                VarType = rtl.rc(IdentTemp >>> 16,0,191);
                par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                i += 2;
              } else if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
                IndirectionLevel = 9;
                i += 1;
                if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK)) {
                  pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                  IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                  if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.TokenAt(i + 3).Name + "'");
                  VarType = rtl.rc(IdentTemp >>> 16,0,191);
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                  i += 2;
                };
              } else {
                if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK)) {
                  IndirectionLevel = 9;
                  pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                  IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                  if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.TokenAt(i + 3).Name + "'");
                  VarType = rtl.rc(IdentTemp >>> 16,0,191);
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                  i += 2;
                };
              };
              i += 1;
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
              if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) pas.Messages.ErrorForIdentifier(i + 1,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
              if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) {
                VarType = rtl.rc(pas.Tokens.TTokenKind.STRINGPOINTERTOK,0,191)}
               else VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191);
              IndirectionLevel = 2;
              if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                i += 1;
                if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) pas.Messages.ErrorForIdentifier(i + 1,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
                IndirectionLevel = 4;
                i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,{get: function () {
                    return VarType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    VarType = v;
                  }}),-2147483648,2147483647);
                pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
              } else if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK)) {
                pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.TokenAt(i + 3).Name + "'");
                if (pas.Common.TokenAt(i + 4).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                  if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                  IndirectionLevel = 10;
                  i = rtl.rc($impl.CompileArrayIndex(i + 3,pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i + 3).Name),{get: function () {
                      return VarType;
                    }, set: function (v) {
                      rtl.rc(v,0,191);
                      VarType = v;
                    }}),-2147483648,2147483647);
                  pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                } else {
                  VarType = rtl.rc(IdentTemp >>> 16,0,191);
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                  if (pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i + 3).Name) > 0) IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                  i += 2;
                };
              };
              i = rtl.rc(i + 1,-2147483648,2147483647);
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
              if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) pas.Messages.ErrorForIdentifier(i + 1,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
              IndirectionLevel = 4;
              j = rtl.rc(i,-2147483648,2147483647);
              i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }}),-2147483648,2147483647);
              if (VarType === pas.Tokens.TTokenKind.ARRAYTOK) {
                IndirectionLevel = 1;
                VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
              };
              if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
                i += 1;
                $impl.Push(0,4,pas.Datatypes.GetDataSize(VarType),IdentIndex,0);
              };
              if (pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) > 0) {
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.System.Copy(pas.Common.IdentifierAt(IdentIndex).Name,1,pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) - 1)),-2147483648,2147483647);
                if ((pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                  IndirectionLevel = 10;
                  svar = pas.System.Copy(pas.Common.IdentifierAt(IdentIndex).Name,pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) + 1,pas.Common.IdentifierAt(IdentIndex).Name.length);
                  IdentIndex = rtl.rc(IdentTemp,-2147483648,2147483647);
                  IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,svar),-2147483648,2147483647);
                  if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + svar + "'");
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                };
              };
              if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.DOTTOK)) {
                IndirectionLevel = 6;
                pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.IDENTTOK);
                IdentTemp = rtl.rc(pas.Parser.RecordSize(IdentIndex,pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                if (IdentTemp < 0) pas.Messages.Error(i + 3,"identifier idents no member '" + pas.Common.TokenAt(i + 3).Name + "'");
                if (pas.Common.TokenAt(i + 4).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
                  if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                  IndirectionLevel = 11;
                  i = rtl.rc($impl.CompileArrayIndex(i + 3,pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i + 3).Name),{get: function () {
                      return VarType;
                    }, set: function (v) {
                      rtl.rc(v,0,191);
                      VarType = v;
                    }}),-2147483648,2147483647);
                  pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
                } else {
                  VarType = rtl.rc(IdentTemp >>> 16,0,191);
                  par2 = "$" + pas.SysUtils.IntToHex(IdentTemp & 0xffff,2);
                  if (pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i + 3).Name) > 0) IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.IdentifierAt(IdentIndex).Name + "." + pas.Common.TokenAt(i + 3).Name),-2147483648,2147483647);
                  if (VarType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) IndirectionLevel = 12;
                  i += 2;
                };
              } else if (VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK,pas.Tokens.TTokenKind.PROCVARTOK)) VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
              i += 1;
            } else {
              if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
                IndirectionLevel = 2;
                if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
                  VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191)}
                 else VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191);
              } else {
                IndirectionLevel = 1;
                VarType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
              };
            };
            if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) && (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.ASSIGNTOK)) {
              IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,4)),-2147483648,2147483647);
              $impl.CompileActualParameters({get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }},IdentTemp,IdentIndex);
              if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              Result = rtl.rc(i,-2147483648,2147483647);
              return Result;
            } else pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.ASSIGNTOK);
            if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.PCHARTOK) && (IndirectionLevel === 1) && (pas.Common.TokenAt(i + 2).Kind in rtl.createSet(pas.Tokens.TTokenKind.STRINGLITERALTOK,pas.Tokens.TTokenKind.CHARLITERALTOK,pas.Tokens.TTokenKind.IDENTTOK))) {
              var $tmp2 = pas.Common.TokenAt(i + 2).Kind;
              if ($tmp2 === pas.Tokens.TTokenKind.CHARLITERALTOK) {
                pas.Common.IdentifierAt(IdentIndex).isInit = true;
                $impl.StopOptimization();
                var $tmp3 = IndirectionLevel;
                if ($tmp3 === 1) {
                  pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tlda #$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 2).Value,2),"");
                  pas.Optimize.asm65("\tsta (:bp2),y","");
                  pas.Optimize.asm65("\ttya","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tsta (:bp2),y","");
                };
                Result = rtl.rc(i + 2,-2147483648,2147483647);
              } else if ($tmp2 === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
                pas.Common.IdentifierAt(IdentIndex).isInit = true;
                $impl.StopOptimization();
                pas.Optimize.ResetOpty();
                svar = $impl.GetLocalName(IdentIndex,"");
                if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements in rtl.createSet(0,1)) {
                  NumCharacters = rtl.rc(pas.Common.TokenAt(i + 2).StrLength,-2147483648,2147483647)}
                 else NumCharacters = rtl.rc(Math.min(pas.Common.TokenAt(i + 2).StrLength,pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1),-2147483648,2147483647);
                var $tmp4 = IndirectionLevel;
                if ($tmp4 === 1) {
                  if (pas.Common.TokenAt(i + 2).StrLength === 0) {
                    pas.Optimize.asm65("\tldy " + svar + "+1","");
                    pas.Optimize.asm65("\tsty :bp+1","");
                    pas.Optimize.asm65("\tldy " + svar,"");
                    pas.Optimize.asm65("\tlda #$00","");
                    pas.Optimize.asm65("\tsta (:bp),y","");
                  } else {
                    pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                    if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) {
                      k = rtl.rc((pas.Common.TokenAt(i + 2).StrAddress - 256) + 1,-2147483648,2147483647)}
                     else k = rtl.rc(pas.Common.TokenAt(i + 2).StrAddress - 256,-2147483648,2147483647);
                    pas.Optimize.asm65("\tlda <CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4),"");
                    pas.Optimize.asm65("\tsta @move.src","");
                    pas.Optimize.asm65("\tlda >CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4),"");
                    pas.Optimize.asm65("\tsta @move.src+1","");
                    pas.Optimize.asm65("\t@moveSTRING_P " + svar,"");
                  };
                };
                Result = rtl.rc(i + 2,-2147483648,2147483647);
              } else if ($tmp2 === pas.Tokens.TTokenKind.IDENTTOK) {
                pas.Common.IdentifierAt(IdentIndex).isInit = true;
                Result = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                    return ExpressionType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ExpressionType = v;
                  }},VarType),-2147483648,2147483647);
                if (ExpressionType === pas.Tokens.TTokenKind.CHARTOK) {
                  var $tmp5 = IndirectionLevel;
                  if ($tmp5 === 1) {
                    pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tsta (:bp2),y","");
                    pas.Optimize.asm65("\ttya","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tsta (:bp2),y","");
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                  } else {
                    $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,"","");
                  };
                } else if (ExpressionType in pas.Datatypes.Pointers) {
                  pas.Common.IdentifierAt(IdentIndex).isInit = true;
                  svar = $impl.GetLocalName(IdentIndex,"");
                  var $tmp6 = IndirectionLevel;
                  if (($tmp6 === 1) || ($tmp6 === 2)) {
                    pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tsta @move.src","");
                    pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                    pas.Optimize.asm65("\tsta @move.src+1","");
                    if ((ExpressionType === pas.Tokens.TTokenKind.PCHARTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                      pas.Optimize.asm65("\t@movePCHAR " + svar + " #" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1),"")}
                     else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) {
                      pas.Optimize.asm65("\t@moveSTRING_P " + svar,"")}
                     else pas.Optimize.asm65("\t@moveSTRING " + svar + " #" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1),"");
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    $impl.StopOptimization();
                    pas.Optimize.ResetOpty();
                  } else {
                    $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,"","");
                  };
                } else pas.Messages.ErrorIncompatibleTypes(i,ExpressionType,VarType,false);
              };
            } else if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && ((IndirectionLevel in rtl.createSet(1,2)) || ((IndirectionLevel === 3) && (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING))) && (pas.Common.TokenAt(i + 2).Kind in rtl.createSet(pas.Tokens.TTokenKind.STRINGLITERALTOK,pas.Tokens.TTokenKind.CHARLITERALTOK,pas.Tokens.TTokenKind.IDENTTOK))) {
              var $tmp7 = pas.Common.TokenAt(i + 2).Kind;
              if ($tmp7 === pas.Tokens.TTokenKind.CHARLITERALTOK) {
                pas.Common.IdentifierAt(IdentIndex).isInit = true;
                $impl.StopOptimization();
                var $tmp8 = IndirectionLevel;
                if ($tmp8 === 2) {
                  pas.Optimize.asm65("\tmwy " + pas.Common.IdentifierAt(IdentIndex).Name + " :bp2","");
                  pas.Optimize.asm65("\tldy #$00","");
                  pas.Optimize.asm65("\tmva #$01 (:bp2),y","");
                  pas.Optimize.asm65("\tiny","");
                  pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 2).Value,2) + " (:bp2),y","");
                } else if ($tmp8 === 3) {
                  pas.Optimize.asm65("\tmwy " + pas.Common.IdentifierAt(IdentIndex).Name + " :bp2","");
                  pas.Optimize.asm65("\tldy :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 2).Value,2) + " (:bp2),y","");
                  $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                } else if ($tmp8 === 1) {
                  pas.Optimize.asm65("\tmva #$01 " + $impl.GetLocalName(IdentIndex,"adr."),"");
                  pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 2).Value,2) + " " + $impl.GetLocalName(IdentIndex,"adr.") + "+1","");
                };
                Result = rtl.rc(i + 2,-2147483648,2147483647);
              } else if ($tmp7 === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
                pas.Common.IdentifierAt(IdentIndex).isInit = true;
                $impl.StopOptimization();
                pas.Optimize.ResetOpty();
                if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements in rtl.createSet(0,1)) {
                  NumCharacters = rtl.rc(pas.Common.TokenAt(i + 2).StrLength,-2147483648,2147483647)}
                 else NumCharacters = rtl.rc(Math.min(pas.Common.TokenAt(i + 2).StrLength,pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1),-2147483648,2147483647);
                var $tmp9 = IndirectionLevel;
                if ($tmp9 === 2) {
                  if (pas.Common.TokenAt(i + 2).StrLength === 0) {
                    pas.Optimize.asm65("\tmwy " + pas.Common.IdentifierAt(IdentIndex).Name + " :bp2","");
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tmva #$00 (:bp2),y","");
                  } else if (pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) > 0) {
                    pas.Optimize.asm65("\tmwa #CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 2).StrAddress - 256,4) + " @move.src","");
                    pas.Optimize.asm65("\tadw " + pas.System.Copy(pas.Common.IdentifierAt(IdentIndex).Name,1,pas.System.Pos(".",pas.Common.IdentifierAt(IdentIndex).Name) - 1) + " #" + pas.Common.IdentifierAt(IdentIndex).Name + "-DATAORIGIN @move.dst","");
                    pas.Optimize.asm65("\tmwa #" + pas.StringUtilities.IntToStr(NumCharacters + 1) + " @move.cnt","");
                    pas.Optimize.asm65("\tjsr @move","");
                  } else pas.Optimize.asm65("\t@move #CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 2).StrAddress - 256,4) + " " + pas.Common.IdentifierAt(IdentIndex).Name + " #" + pas.StringUtilities.IntToStr(NumCharacters + 1),"")}
                 else if ($tmp9 === 3) {
                  pas.Common.GetCommonType(i + 1,pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.POINTERTOK)}
                 else if ($tmp9 === 1) {
                  if (pas.Common.TokenAt(i + 2).StrLength === 0) {
                    pas.Optimize.asm65("\tmva #$00 " + $impl.GetLocalName(IdentIndex,"adr."),"")}
                   else {
                    if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) {
                      k = rtl.rc((pas.Common.TokenAt(i + 2).StrAddress - 256) + 1,-2147483648,2147483647)}
                     else k = rtl.rc(pas.Common.TokenAt(i + 2).StrAddress - 256,-2147483648,2147483647);
                    vlen = rtl.rc(NumCharacters + 1,-2147483648,2147483647);
                    if (vlen <= 256) {
                      pas.Optimize.asm65("\tldy #256-" + pas.StringUtilities.IntToStr(vlen),"");
                      pas.Optimize.asm65("\tmva:rne CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4) + "+" + pas.StringUtilities.IntToStr(vlen) + "-256,y " + $impl.GetLocalName(IdentIndex,"adr.") + "+" + pas.StringUtilities.IntToStr(vlen) + "-256,y+","");
                    } else pas.Optimize.asm65("\t@move #CODEORIGIN+$" + pas.SysUtils.IntToHex(k,4) + " #" + $impl.GetLocalName(IdentIndex,"adr.") + " #" + pas.StringUtilities.IntToStr(vlen),"");
                  };
                  if ((pas.Common.TokenAt(i + 2).StrLength + 1) > pas.Common.IdentifierAt(IdentIndex).NumAllocElements) {
                    pas.Messages.WarningShortStringLength(i + 2);
                    pas.Optimize.asm65("\tmva #$" + pas.SysUtils.IntToHex(NumCharacters,2) + " " + $impl.GetLocalName(IdentIndex,"adr."),"");
                  };
                };
                Result = rtl.rc(i + 2,-2147483648,2147483647);
              } else if ($tmp7 === pas.Tokens.TTokenKind.IDENTTOK) {
                pas.Common.IdentifierAt(IdentIndex).isInit = true;
                Result = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                    return ExpressionType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ExpressionType = v;
                  }},VarType),-2147483648,2147483647);
                svar = $impl.GetLocalName(IdentIndex,"");
                if (ExpressionType === pas.Tokens.TTokenKind.CHARTOK) {
                  var $tmp10 = IndirectionLevel;
                  if ($tmp10 === 1) {
                    pas.Optimize.asm65("\tmva :STACKORIGIN,x " + $impl.GetLocalName(IdentIndex,"adr.") + "+1","");
                    pas.Optimize.asm65("\tmva #$01 " + $impl.GetLocalName(IdentIndex,"adr."),"");
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                  } else if ($tmp10 === 2) {
                    pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tmva #$01 (:bp2),y","");
                    pas.Optimize.asm65("\tiny","");
                    pas.Optimize.asm65("\tmva :STACKORIGIN,x (:bp2),y","");
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                  } else if ($tmp10 === 3) {
                    pas.Optimize.asm65("\tmwy " + svar + " :bp2","");
                    pas.Optimize.asm65("\tldy :STACKORIGIN-1,x","");
                    pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                    pas.Optimize.asm65("\tsta (:bp2),y","");
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                  } else {
                    $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,"","");
                  };
                } else if (ExpressionType in pas.Datatypes.Pointers) {
                  var $tmp11 = IndirectionLevel;
                  if (($tmp11 === 1) || ($tmp11 === 2)) {
                    if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
                      pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),"") + " :bp2","");
                      pas.Optimize.asm65("\tldy #$00","");
                      pas.Optimize.asm65("\tlda (:bp2),y","");
                      pas.Optimize.asm65("\tsta @move.src","");
                      pas.Optimize.asm65("\tiny","");
                      pas.Optimize.asm65("\tlda (:bp2),y","");
                      pas.Optimize.asm65("\tsta @move.src+1","");
                      i += 1;
                    } else {
                      pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                      pas.Optimize.asm65("\tsta @move.src","");
                      pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                      pas.Optimize.asm65("\tsta @move.src+1","");
                    };
                    if ((ExpressionType === pas.Tokens.TTokenKind.PCHARTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                      pas.Optimize.asm65("\t@movePCHAR " + svar + " #" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1),"")}
                     else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) {
                      pas.Optimize.asm65("\t@moveSTRING_P " + svar,"")}
                     else pas.Optimize.asm65("\t@moveSTRING " + svar + " #" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements - 1),"");
                    $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                    $impl.StopOptimization();
                    pas.Optimize.ResetOpty();
                  } else {
                    $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,"","");
                  };
                } else pas.Messages.ErrorIncompatibleTypes(i,ExpressionType,VarType,false);
              };
            } else {
              if (VarType === pas.Tokens.TTokenKind.UNTYPETOK) pas.Messages.Error(i,"Assignments to formal parameters and open arrays are not possible");
              Result = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ExpressionType = v;
                }},VarType),-2147483648,2147483647);
              k = rtl.rc(i + 2,-2147483648,2147483647);
              $impl.RealTypeConversion({get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }},{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ExpressionType = v;
                }},pas.Tokens.TTokenKind.UNTYPETOK);
              if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK)) && (ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) ExpressionType = rtl.rc(VarType,0,191);
              if ((VarType === pas.Tokens.TTokenKind.POINTERTOK) && (ExpressionType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.CHARTOK) {
                  pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tadd #$01","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
                  pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                  pas.Optimize.asm65("\tadc #$00","");
                  pas.Optimize.asm65("\tsta :STACKORIGIN+STACKWIDTH,x","");
                } else if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
                  pas.Messages.ErrorIncompatibleTypes(i + 1,pas.Tokens.TTokenKind.STRINGPOINTERTOK,pas.Tokens.TTokenKind.POINTERTOK,false)}
                 else pas.Common.GetCommonType(i + 1,pas.Common.IdentifierAt(IdentIndex).AllocElementType,pas.Tokens.TTokenKind.STRINGPOINTERTOK);
              };
              if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) && (VarType === pas.Tokens.TTokenKind.POINTERTOK) && (ExpressionType === pas.Tokens.TTokenKind.RECORDTOK)) {
                ExpressionType = rtl.rc(pas.Tokens.TTokenKind.RECORDTOK,0,191);
                VarType = rtl.rc(pas.Tokens.TTokenKind.RECORDTOK,0,191);
              };
              if (VarType !== ExpressionType) if ((ExpressionType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.IDENTTOK)) if ((pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name)).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name)).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK)) {
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name)).NumAllocElements_,4)),-2147483648,2147483647);
                if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).DataType,0,191);
              };
              $impl.CheckAssignment(i + 1,IdentIndex);
              if (IndirectionLevel in rtl.createSet(3,4)) {
                if ((ExpressionType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                  IndirectionLevel = 8}
                 else if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                  if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {}
                  else pas.Common.GetCommonType(i + 1,pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType);
                } else pas.Common.GetCommonType(i + 1,pas.Common.IdentifierAt(IdentIndex).AllocElementType,ExpressionType);
              } else if (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers)) {
                if ((ExpressionType in rtl.diffSet(pas.Datatypes.Pointers,rtl.createSet(pas.Tokens.TTokenKind.STRINGPOINTERTOK))) && (pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.IDENTTOK)) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name),-2147483648,2147483647);
                  if ((IdentTemp > 0) && (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK)) IdentTemp = rtl.rc($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock),-2147483648,2147483647);
                  if (pas.Common.IdentifierAt(IdentTemp).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK) {}
                  else if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType !== pas.Common.IdentifierAt(IdentIndex).AllocElementType) && (pas.Common.TokenAt(k + 1).Kind !== pas.Tokens.TTokenKind.OBRACKETTOK)) {
                    if ((pas.Common.IdentifierAt(IdentTemp).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) {
                      pas.Messages.ErrorIdentifierIncompatibleTypesArrayIdentifier(k,IdentTemp,IdentIndex)}
                     else {
                      if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements === 0)) {
                        pas.Messages.Error(k,'Incompatible types: got "^' + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentTemp).AllocElementType) + '" expected "^' + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).AllocElementType) + '"')}
                       else pas.Messages.ErrorIdentifierIncompatibleTypesArray(k,IdentTemp,ExpressionType);
                    };
                  };
                } else if (ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name),-2147483648,2147483647);
                  var $tmp12 = IndirectionLevel;
                  if ($tmp12 === 1) {
                    if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Common.IdentifierAt(IdentTemp).AllocElementType) && !(pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) pas.Messages.Error(k,'Incompatible types: got "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "^' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"')}
                   else if ($tmp12 === 2) {
                    if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Common.IdentifierAt(IdentTemp).AllocElementType) && !(pas.Common.IdentifierAt(IdentTemp).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) pas.Messages.Error(k,'Incompatible types: got "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "^' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"')}
                   else {
                    pas.Common.GetCommonType(i + 1,VarType,ExpressionType);
                  };
                } else {
                  if (((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) || ((VarType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (ExpressionType === pas.Tokens.TTokenKind.PCHARTOK))) {}
                  else if (VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                    pas.Messages.Error(i,'Incompatible types: got "' + pas.Tokens.InfoAboutToken(ExpressionType) + '" expected "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"')}
                   else pas.Common.GetCommonType(i + 1,VarType,ExpressionType);
                };
              } else if (VarType === pas.Tokens.TTokenKind.ENUMTOK) {
                if (pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name),-2147483648,2147483647)}
                 else IdentTemp = 0;
                if ((IdentTemp > 0) && (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK)) IdentTemp = rtl.rc($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock),-2147483648,2147483647);
                if ((IdentTemp > 0) && (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.TYPETOK) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.ENUMTOK)) {
                  if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements !== pas.Common.IdentifierAt(IdentTemp).NumAllocElements) pas.Messages.ErrorIncompatibleEnumIdentifiers(i,IdentTemp,IdentIndex);
                } else if ((IdentTemp > 0) && (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.ENUMTOK)) {
                  if (pas.Common.IdentifierAt(IdentTemp).NumAllocElements !== pas.Common.IdentifierAt(IdentIndex).NumAllocElements) pas.Messages.ErrorIncompatibleEnumIdentifiers(i,IdentTemp,IdentIndex);
                } else if ((IdentTemp > 0) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.ENUMTOK)) {
                  if (pas.Common.IdentifierAt(IdentTemp).NumAllocElements !== pas.Common.IdentifierAt(IdentIndex).NumAllocElements) pas.Messages.ErrorIncompatibleEnumIdentifiers(i,IdentTemp,IdentIndex);
                } else pas.Messages.ErrorIncompatibleEnumTypeIdentifier(i,ExpressionType,IdentIndex);
              } else {
                if (pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name),-2147483648,2147483647)}
                 else IdentTemp = 0;
                if ((IdentTemp > 0) && ((pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.ENUMTOK) || (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.ENUMTOK))) {
                  pas.Messages.ErrorIncompatibleEnumIdentifierType(i,IdentTemp,ExpressionType)}
                 else pas.Common.GetCommonType(i + 1,pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType);
              };
              $impl.ExpandParam(VarType,ExpressionType);
              pas.Common.IdentifierAt(IdentIndex).isInit = true;
              if ((pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (IndirectionLevel !== 9) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0) && (ExpressionType !== pas.Tokens.TTokenKind.POINTERTOK)) {
                if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType in pas.Datatypes.OrdinalTypes) && (ExpressionType in pas.Datatypes.OrdinalTypes)) {}
                else if (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK) {
                  if ((ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.PCHARTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK)) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {}
                  else pas.Messages.Error(i + 1,'Incompatible types: got "' + pas.Tokens.InfoAboutToken(ExpressionType) + '" expected "' + pas.Common.IdentifierAt(IdentIndex).Name + '"');
                } else pas.Common.GetCommonType(i + 1,pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType);
              };
              if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) || ((VarType === pas.Tokens.TTokenKind.POINTERTOK) && (ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)))) {
                ADDRESS = false;
                if (pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) {
                  k += 1;
                  ADDRESS = true;
                };
                if (pas.Common.TokenAt(k).Kind !== pas.Tokens.TTokenKind.IDENTTOK) pas.Messages.Error$2(k,pas.Messages.TErrorCode.IdentifierExpected);
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name),-2147483648,2147483647);
                if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.Common.IdentifierAt(IdentTemp).PassMethod) {
                  var $tmp13 = IndirectionLevel;
                  if ($tmp13 === 1) {
                    if ((pas.Common.TokenAt(k + 1).Kind !== pas.Tokens.TTokenKind.DEREFERENCETOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Common.IdentifierAt(IdentTemp).AllocElementType) && !(pas.Common.IdentifierAt(IdentTemp).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) pas.Messages.Error(k,'Incompatible types: got "^' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"')}
                   else if ($tmp13 === 2) {}
                  else {
                    pas.Common.GetCommonType(i + 1,VarType,ExpressionType);
                  };
                };
                if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.Common.IdentifierAt(IdentTemp).PassMethod)) {
                  if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
                    yes = pas.Common.IdentifierAt(IdentIndex).NumAllocElements !== pas.Common.IdentifierAt($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock)).NumAllocElements}
                   else yes = pas.Common.IdentifierAt(IdentIndex).NumAllocElements !== pas.Common.IdentifierAt(IdentTemp).NumAllocElements;
                  if (yes && (ADDRESS === false) && (ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) if ((pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                    pas.Messages.Error(i,'Incompatible types: got "^' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "^' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"')}
                   else pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "^' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"');
                };
                if ((ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) || ((ExpressionType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)))) {
                  svar = pas.Common.TokenAt(k).Name;
                  if ((pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType !== pas.Tokens.TTokenKind.RECORDTOK)) {
                    Name = "adr." + svar}
                   else Name = svar;
                  if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
                    svar = $impl.GetLocalName(IdentTemp,"");
                    IdentTemp = rtl.rc($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock),-2147483648,2147483647);
                    Name = svar + ".adr.result";
                    svar = svar + ".result";
                  };
                  DEREFERENCE = false;
                  if (pas.Common.TokenAt(k + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
                    k += 1;
                    DEREFERENCE = true;
                  };
                  if (pas.Common.TokenAt(k + 1).Kind === pas.Tokens.TTokenKind.DOTTOK) {
                    pas.Common.CheckTok(k + 2,pas.Tokens.TTokenKind.IDENTTOK);
                    Name = svar + "." + pas.Common.TokenAt(k + 2).Name;
                    IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(Name),-2147483648,2147483647);
                  };
                  if (IdentTemp > 0) if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements !== pas.Common.IdentifierAt(IdentTemp).NumAllocElements) if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0) {
                    pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "' + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).DataType) + '"')}
                   else pas.Messages.Error(i,'Incompatible types: got "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentTemp).NumAllocElements).Field[0].Name + '" expected "' + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements).Field[0].Name + '"');
                  $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                  $impl.StopOptimization();
                  pas.Optimize.ResetOpty();
                  if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK)) {
                    if (DEREFERENCE) {
                      pas.Optimize.asm65("\tlda :bp2","");
                      pas.Optimize.asm65("\tadd #" + Name + "-DATAORIGIN","");
                      pas.Optimize.asm65("\tsta :bp2","");
                      pas.Optimize.asm65("\tlda :bp2+1","");
                      pas.Optimize.asm65("\tadc #$00","");
                      pas.Optimize.asm65("\tsta :bp2+1","");
                    } else {
                      pas.Optimize.asm65("\tsta :bp2","");
                      pas.Optimize.asm65("\tsty :bp2+1","");
                    };
                    if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                      pas.Optimize.asm65("\tmva:rpl (:bp2),y " + $impl.GetLocalName(IdentIndex,"adr.") + ",y-","");
                    } else pas.Optimize.asm65('\t@move ":bp2" ' + $impl.GetLocalName(IdentIndex,"") + " #" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                  } else if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Parser.RecordSize(IdentIndex,"") <= 8)) {
                    if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
                      svar = $impl.GetLocalName(IdentIndex,"");
                      $impl.LoadBP2(IdentIndex,svar);
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                      pas.Optimize.asm65("\tmva:rpl " + Name + ",y (:bp2),y-","");
                    } else if (pas.Parser.RecordSize(IdentIndex,"") === 1) {
                      pas.Optimize.asm65("\t mva " + Name + " " + $impl.GetLocalName(IdentIndex,"adr."),"")}
                     else pas.Optimize.asm65("\t:" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")) + " mva " + Name + "+# " + $impl.GetLocalName(IdentIndex,"adr.") + "+#","");
                  } else if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK)) {
                    pas.Optimize.asm65("\t@move " + Name + " " + $impl.GetLocalName(IdentIndex,"") + " #" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                  } else if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.RECORDTOK) && (pas.Common.IdentifierAt(IdentTemp).DataType === pas.Tokens.TTokenKind.POINTERTOK)) {
                    if (pas.Common.IdentifierAt(IdentTemp).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
                      pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentTemp,"") + " :bp2","");
                      if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                        pas.Optimize.asm65("\tmva:rpl (:bp2),y " + $impl.GetLocalName(IdentIndex,"adr.") + ",y-","");
                      } else pas.Optimize.asm65('\t@move ":bp2" #' + $impl.GetLocalName(IdentIndex,"adr.") + " #" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                    } else if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                      pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentTemp,"") + " :bp2","");
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                      pas.Optimize.asm65("\tmva:rpl (:bp2),y " + $impl.GetLocalName(IdentIndex,"adr.") + ",y-","");
                    } else pas.Optimize.asm65("\t@move " + Name + " #" + $impl.GetLocalName(IdentIndex,"adr.") + " #" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                  } else {
                    if (pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
                      svar = $impl.GetLocalName(IdentIndex,"");
                      $impl.LoadBP2(IdentIndex,svar);
                      if (pas.Parser.RecordSize(IdentIndex,"") <= 128) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                        pas.Optimize.asm65("\tmva:rpl " + Name + ",y (:bp2),y-","");
                      } else pas.Optimize.asm65("\t@move #" + Name + ' ":bp2" #' + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                    } else if ((pas.System.Pos("adr.",Name) > 0) && (pas.Parser.RecordSize(IdentIndex,"") <= 128)) {
                      if (IndirectionLevel === 4) {
                        pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(0),"");
                        pas.Optimize.asm65("\tsta :bp2","");
                        pas.Optimize.asm65("\tlda" + $impl.GetStackVariable(1),"");
                        pas.Optimize.asm65("\tsta :bp2+1","");
                      } else pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                      pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(pas.Parser.RecordSize(IdentIndex,"") - 1,2),"");
                      pas.Optimize.asm65("\tmva:rpl " + Name + ",y (:bp2),y-","");
                    } else pas.Optimize.asm65("\t@move #" + Name + " " + $impl.GetLocalName(IdentIndex,"") + " #" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")),"");
                  };
                } else pas.Common.GetCommonType(i + 1,ExpressionType,pas.Tokens.TTokenKind.RECORDTOK);
              } else if ((VarType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (ExpressionType in pas.Datatypes.Pointers)) {
                if ((pas.Common.TokenAt(k).Kind !== pas.Tokens.TTokenKind.ADDRESSTOK) && (IndirectionLevel in rtl.createSet(3,4)) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
                  if ((pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name)).AllocElementType !== pas.Tokens.TTokenKind.UNTYPETOK)) IndirectionLevel = 7;
                  $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,"","");
                  $impl.StopOptimization();
                  pas.Optimize.ResetOpty();
                } else $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,par1,par2);
              } else if ((VarType in pas.Datatypes.Pointers) && (ExpressionType in pas.Datatypes.Pointers) && (pas.Common.TokenAt(k).Kind === pas.Tokens.TTokenKind.IDENTTOK) && !(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.unionSet(pas.Datatypes.Pointers,rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) && !(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name)).AllocElementType in rtl.unionSet(pas.Datatypes.Pointers,rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)))) {
                j = rtl.rc(pas.Parser.Elements(IdentIndex) * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),-2147483648,2147483647);
                IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(k).Name),-2147483648,2147483647);
                Name = "adr." + pas.Common.TokenAt(k).Name;
                svar = pas.Common.TokenAt(k).Name;
                if (IdentTemp > 0) {
                  if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
                    svar = $impl.GetLocalName(IdentTemp,"");
                    IdentTemp = rtl.rc($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock),-2147483648,2147483647);
                    Name = svar + ".adr.result";
                    svar = svar + ".result";
                  };
                  if ((pas.Parser.Elements(IdentIndex) > 1) && (pas.Parser.Elements(IdentTemp) > 1)) {
                    if (pas.Common.IdentifierAt(IdentTemp).AllocElementType !== pas.Tokens.TTokenKind.RECORDTOK) if (j !== rtl.rc(pas.Parser.Elements(IdentTemp) * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentTemp).AllocElementType),-2147483648,2147483647)) if ((pas.Common.IdentifierAt(IdentIndex).AllocElementType !== pas.Common.IdentifierAt(IdentTemp).AllocElementType) || ((pas.Common.IdentifierAt(IdentTemp).NumAllocElements !== pas.Common.IdentifierAt(IdentIndex).NumAllocElements_) && (pas.Common.IdentifierAt(IdentTemp).NumAllocElements_ === 0)) || ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements !== pas.Common.IdentifierAt(IdentTemp).NumAllocElements_) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ === 0))) pas.Messages.ErrorIdentifierIncompatibleTypesArrayIdentifier(i,IdentTemp,IdentIndex);
                    if (j !== rtl.rc(pas.Parser.Elements(IdentTemp) * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentTemp).AllocElementType),-2147483648,2147483647)) {
                      if ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ > 0) && ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ === pas.Common.IdentifierAt(IdentTemp).NumAllocElements) || (pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ === pas.Common.IdentifierAt(IdentTemp).NumAllocElements_))) {
                        if (pas.Common.IdentifierAt(IdentTemp).NumAllocElements_ === 0) {
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,""),"");
                          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                          pas.Optimize.asm65("\tsta @move.dst","");
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                          pas.Optimize.asm65("\tsta @move.dst+1","");
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,""),"");
                          pas.Optimize.asm65("\tsta @move.src","");
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,"") + "+1","");
                          pas.Optimize.asm65("\tsta @move.src+1","");
                        } else {
                          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,""),"");
                          pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                          pas.Optimize.asm65("\tsta @move.dst","");
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                          pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                          pas.Optimize.asm65("\tsta @move.dst+1","");
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,""),"");
                          pas.Optimize.asm65("\tadd :STACKORIGIN,x","");
                          pas.Optimize.asm65("\tsta @move.src","");
                          pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,"") + "+1","");
                          pas.Optimize.asm65("\tadc :STACKORIGIN+STACKWIDTH,x","");
                          pas.Optimize.asm65("\tsta @move.src+1","");
                        };
                        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                        $impl.StopOptimization();
                        pas.Optimize.ResetOpty();
                        pas.Optimize.asm65("\tlda <" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)),"");
                        pas.Optimize.asm65("\tsta @move.cnt","");
                        pas.Optimize.asm65("\tlda >" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)),"");
                        pas.Optimize.asm65("\tsta @move.cnt+1","");
                        pas.Optimize.asm65("\tjsr @move","");
                      } else {
                        pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,""),"");
                        pas.Optimize.asm65("\tsta @move.dst","");
                        pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                        pas.Optimize.asm65("\tsta @move.dst+1","");
                        pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,""),"");
                        pas.Optimize.asm65("\tadd :STACKORIGIN-1,x","");
                        pas.Optimize.asm65("\tsta @move.src","");
                        pas.Optimize.asm65("\tlda " + $impl.GetLocalName(IdentTemp,"") + "+1","");
                        pas.Optimize.asm65("\tadc :STACKORIGIN-1+STACKWIDTH,x","");
                        pas.Optimize.asm65("\tsta @move.src+1","");
                        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                        $impl.StopOptimization();
                        pas.Optimize.ResetOpty();
                        pas.Optimize.asm65("\tlda <" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)),"");
                        pas.Optimize.asm65("\tsta @move.cnt","");
                        pas.Optimize.asm65("\tlda >" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)),"");
                        pas.Optimize.asm65("\tsta @move.cnt+1","");
                        pas.Optimize.asm65("\tjsr @move","");
                      };
                    } else {
                      $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
                      $impl.StopOptimization();
                      pas.Optimize.ResetOpty();
                      if ((j <= 4) && (pas.Common.IdentifierAt(IdentTemp).AllocElementType !== pas.Tokens.TTokenKind.RECORDTOK)) {
                        pas.Optimize.asm65("\t:" + pas.StringUtilities.IntToStr(j) + " mva " + Name + "+# " + $impl.GetLocalName(IdentIndex,"adr.") + "+#","")}
                       else pas.Optimize.asm65("\t@move " + svar + " " + $impl.GetLocalName(IdentIndex,"") + " #" + pas.StringUtilities.IntToStr(j),"");
                    };
                  } else $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,par1,par2);
                } else pas.Messages.Error$2(k,pas.Messages.TErrorCode.UnknownIdentifier);
              } else $impl.GenerateAssignment(IndirectionLevel,pas.Datatypes.GetDataSize(VarType),IdentIndex,par1,par2);
            };
          } else if (($tmp1 === pas.Tokens.TTokenKind.PROCEDURETOK) || ($tmp1 === pas.Tokens.TTokenKind.FUNCTIONTOK) || ($tmp1 === pas.Tokens.TTokenKind.CONSTRUCTORTOK) || ($tmp1 === pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
            Param = $impl.NumActualParameters(i,IdentIndex,{get: function () {
                return j;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                j = v;
              }});
            IdentTemp = rtl.rc($impl.GetIdentProc(pas.Common.IdentifierAt(IdentIndex).Name,IdentIndex,pas.CompilerTypes.TParamList$clone(Param),j),-2147483648,2147483647);
            if (IdentTemp === 0) if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
              if (pas.Common.IdentifierAt(IdentIndex).NumParams !== j) pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.WrongNumberOfParameters,IdentIndex);
              pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.CantDetermine,IdentIndex);
            } else pas.Messages.ErrorForIdentifier(i,pas.Messages.TErrorCode.WrongNumberOfParameters,IdentIndex);
            IdentIndex = rtl.rc(IdentTemp,-2147483648,2147483647);
            if (pas.Common.IdentifierAt(IdentIndex).isStdCall === false) {
              $impl.StartOptimization(i)}
             else if (pas.Common.optimize.use === false) $impl.StartOptimization(i);
            pas.Common.run_func += 1;
            $impl.CompileActualParameters({get: function () {
                return i;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                i = v;
              }},IdentIndex,0);
            pas.Common.run_func -= 1;
            if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
              $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              $impl.StartOptimization(i);
            };
            Result = rtl.rc(i,-2147483648,2147483647);
          } else {
            pas.Messages.Error(i,"Assignment or procedure call expected but " + pas.Common.IdentifierAt(IdentIndex).Name + " found");
          };
        } else pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
      } else if ($tmp === pas.Tokens.TTokenKind.INFOTOK) {
        if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.System.Writeln("User defined: " + pas.Common.msgLists.msgUser.Get(pas.Common.TokenAt(i).Value));
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.WARNINGTOK) {
        pas.Messages.WarningUserDefined(i);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.ERRORTOK) {
        if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UserDefined);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.IOCHECKON) {
        pas.Common.IOCheck = true;
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.IOCHECKOFF) {
        pas.Common.IOCheck = false;
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.LOOPUNROLLTOK) {
        pas.Common.LoopUnroll = true;
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.NOLOOPUNROLLTOK) {
        pas.Common.LoopUnroll = false;
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.PROCALIGNTOK) {
        pas.Common.codealign.proc = rtl.rc(pas.Common.TokenAt(i).Value,-2147483648,2147483647);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.LOOPALIGNTOK) {
        pas.Common.codealign.loop = rtl.rc(pas.Common.TokenAt(i).Value,-2147483648,2147483647);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.LINKALIGNTOK) {
        pas.Common.codealign.link = rtl.rc(pas.Common.TokenAt(i).Value,-2147483648,2147483647);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.GOTOTOK) {
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.IDENTTOK);
        IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
        if (IdentIndex > 0) {
          if (pas.Common.IdentifierAt(IdentIndex).Kind !== pas.Tokens.TTokenKind.LABELTOK) pas.Messages.Error(i + 1,"Identifier isn't a label");
          pas.Optimize.asm65("\tjmp " + pas.Common.IdentifierAt(IdentIndex).Name,"");
        } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
        Result = rtl.rc(i + 1,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.BEGINTOK) {
        if (isAsm) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.ASMTOK);
        j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
        while ((pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) || ((pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.COLONTOK) && (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.IDENTTOK))) j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
        pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.ENDTOK);
        Result = rtl.rc(j + 1,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.CASETOK) {
        CaseLocalCnt = rtl.rc(pas.Common.CaseCnt,-2147483648,2147483647);
        pas.Common.CaseCnt += 1;
        pas.Optimize.ResetOpty();
        EnumName = "";
        $impl.StartOptimization(i);
        j = rtl.rc(i + 1,-2147483648,2147483647);
        i = rtl.rc($impl.CompileExpression(i + 1,{get: function () {
            return SelectorType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            SelectorType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
        if ((pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name)).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name)).DataType === pas.Tokens.TTokenKind.ENUMTOK)) {
          IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name),-2147483648,2147483647);
          SelectorType = rtl.rc(pas.Common.IdentifierAt($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock)).AllocElementType,0,191);
          EnumName = pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt($impl.GetIdentResult(pas.Common.IdentifierAt(IdentTemp).ProcAsBlock)).NumAllocElements).Field[0].Name;
        } else if ((SelectorType === pas.Tokens.TTokenKind.ENUMTOK) && (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name)).Kind === pas.Tokens.TTokenKind.TYPETOK)) {
          IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name),-2147483648,2147483647);
          EnumName = pas.Common.GetEnumName(IdentTemp);
          SelectorType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).AllocElementType,0,191);
        } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
          IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
          EnumName = pas.Common.GetEnumName(IdentTemp);
        };
        if (SelectorType !== pas.Tokens.TTokenKind.ENUMTOK) if (pas.Datatypes.GetDataSize(SelectorType) !== 1) pas.Messages.Error(i,"Expected BYTE, SHORTINT, CHAR or BOOLEAN as CASE selector");
        if (!(SelectorType in rtl.unionSet(pas.Datatypes.OrdinalTypes,rtl.createSet(pas.Tokens.TTokenKind.ENUMTOK)))) pas.Messages.Error(i,"Ordinal variable expected as 'CASE' selector");
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OFTOK);
        $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(SelectorType),0,"@CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),"");
        pas.Parser.DefineIdent(i,"@CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4),pas.Tokens.TTokenKind.VARTOK,SelectorType,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
        pas.Parser.GetIdentIndex("@CASETMP_" + pas.SysUtils.IntToHex(CaseLocalCnt,4));
        yes = true;
        NumCaseStatements = 0;
        i += 2;
        CaseLabelArray = [];
        CaseLabelArray = rtl.arraySetLength(CaseLabelArray,pas.CompilerTypes.TCaseLabel,1);
        do {
          do {
            i = rtl.rc(pas.Parser.CompileConstExpression(i,{get: function () {
                return ConstVal;
              }, set: function (v) {
                rtl.rc(v,-9007199254740991,9007199254740991);
                ConstVal = v;
              }},{get: function () {
                return ConstValType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ConstValType = v;
              }},SelectorType,false,true),-2147483648,2147483647);
            pas.Common.GetCommonType(i,ConstValType,SelectorType);
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK) if (((EnumName === "") && (pas.Common.GetEnumName(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name)) !== "")) || ((EnumName !== "") && (pas.Common.GetEnumName(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name)) !== EnumName))) pas.Messages.Error(i,"Constant and CASE types do not match");
            if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.RANGETOK) {
              i = rtl.rc(pas.Parser.CompileConstExpression(i + 2,{get: function () {
                  return ConstVal2;
                }, set: function (v) {
                  rtl.rc(v,-9007199254740991,9007199254740991);
                  ConstVal2 = v;
                }},{get: function () {
                  return ConstValType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ConstValType = v;
                }},SelectorType,false,true),-2147483648,2147483647);
              pas.Common.GetCommonType(i,ConstValType,SelectorType);
              if (ConstVal > ConstVal2) pas.Messages.Error(i,"Upper bound of case range is less than lower bound");
              $impl.GenerateCaseRangeCheck(ConstVal,ConstVal2,SelectorType,yes,CaseLocalCnt);
              yes = false;
              CaseLabel.left = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
              CaseLabel.right = rtl.rc(ConstVal2,-9007199254740991,9007199254740991);
            } else {
              $impl.GenerateCaseEqualityCheck(ConstVal,SelectorType,yes,CaseLocalCnt);
              yes = true;
              CaseLabel.left = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
              CaseLabel.right = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
            };
            $impl.UpdateCaseLabels(i,{get: function () {
                return CaseLabelArray;
              }, set: function (v) {
                CaseLabelArray = v;
              }},pas.CompilerTypes.TCaseLabel.$clone(CaseLabel));
            i += 1;
            ExitLoop = false;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) {
              i += 1}
             else ExitLoop = true;
          } while (!ExitLoop);
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
          $impl.GenerateCaseStatementProlog();
          pas.Optimize.ResetOpty();
          pas.Optimize.asm65("@","");
          j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
          i = rtl.rc(j + 1,-2147483648,2147483647);
          $impl.GenerateCaseStatementEpilog(CaseLocalCnt);
          NumCaseStatements += 1;
          ExitLoop = false;
          if (pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.SEMICOLONTOK) {
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ELSETOK) {
              j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
              while (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
              i = rtl.rc(j + 1,-2147483648,2147483647);
            };
            ExitLoop = true;
          } else {
            i += 1;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ELSETOK) {
              j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
              while (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
              i = rtl.rc(j + 1,-2147483648,2147483647);
            };
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ENDTOK) ExitLoop = true;
          };
        } while (!ExitLoop);
        pas.Common.CheckTok(i,pas.Tokens.TTokenKind.ENDTOK);
        $impl.GenerateCaseEpilog(NumCaseStatements,CaseLocalCnt);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.IFTOK) {
        IfLocalCnt = rtl.rc(pas.Common.IfCnt,-2147483648,2147483647);
        pas.Common.IfCnt += 1;
        $impl.StartOptimization(i + 1);
        j = rtl.rc($impl.CompileExpression(i + 1,{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
        pas.Common.GetCommonType(j,pas.Tokens.TTokenKind.BOOLEANTOK,ExpressionType);
        pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.THENTOK);
        $impl.SaveToSystemStack(IfLocalCnt);
        $impl.GenerateIfThenCondition();
        $impl.GenerateIfThenProlog();
        pas.Common.CodeSize += 1;
        j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
        $impl.GenerateIfThenEpilog();
        Result = rtl.rc(j,-2147483648,2147483647);
        if (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.ELSETOK) {
          $impl.RestoreFromSystemStack(IfLocalCnt);
          $impl.GenerateElseCondition();
          $impl.GenerateIfThenProlog();
          pas.Common.optyBP2 = "";
          j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
          $impl.GenerateIfThenEpilog();
          Result = rtl.rc(j,-2147483648,2147483647);
        } else $impl.RemoveFromSystemStack();
      } else if ($tmp === pas.Tokens.TTokenKind.WITHTOK) {
        pas.Common.CodeSize += 1;
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.IDENTTOK);
        IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
        if ((pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.TYPETOK) && (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {}
        else if (pas.Common.IdentifierAt(IdentIndex).Kind !== pas.Tokens.TTokenKind.VARTOK) pas.Messages.Error(i + 1,"Expression type must be object or record type");
        if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.RECORDTOK)) {}
        else if (!(pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) pas.Messages.Error(i + 1,"Expression type must be object or record type");
        pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.DOTOK);
        k = rtl.rc(rtl.length(pas.Common.WithName) - 1,-2147483648,2147483647);
        rtl.rcArrW(pas.Common.WithName,k,pas.Common.IdentifierAt(IdentIndex).Name);
        pas.Common.WithName = rtl.arraySetLength(pas.Common.WithName,"",k + 2);
        i += 2;
        j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
        pas.Common.WithName = rtl.arraySetLength(pas.Common.WithName,"",k + 1);
        Result = rtl.rc(j,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.WHILETOK) {
        pas.Common.CodeSize += 1;
        if (pas.Common.codealign.loop > 0) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tjmp @+","");
          pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.loop,4),"");
          pas.Optimize.asm65("@","");
          pas.Optimize.asm65("","");
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; --- WhileProlog","");
        pas.Optimize.ResetOpty();
        pas.Common.CodeSize += 1;
        pas.Common.CodePosStackTop += 1;
        rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
        pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop),4),"");
        pas.Common.CodeSize += 1;
        $impl.GenerateRepeatUntilProlog();
        $impl.SaveBreakAddress();
        oldPass = rtl.rc(pas.Common.pass,0,2);
        oldCodeSize = rtl.rc(pas.Common.CodeSize,-2147483648,2147483647);
        pas.Common.pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
        k = rtl.rc(i,-2147483648,2147483647);
        $impl.StartOptimization(i + 1);
        j = rtl.rc($impl.CompileExpression(i + 1,{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
        pas.Common.GetCommonType(j,pas.Tokens.TTokenKind.BOOLEANTOK,ExpressionType);
        pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.DOTOK);
        pas.Common.pass = rtl.rc(oldPass,0,2);
        pas.Common.CodeSize = rtl.rc(oldCodeSize,-2147483648,2147483647);
        pas.Common.CodePosStackTop += 1;
        rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
        j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
        if (rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
        pas.Common.CodePosStackTop -= 1;
        pas.Common.CodePosStackTop -= 1;
        $impl.GenerateAsmLabels(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop));
        $impl.StartOptimization(k + 1);
        $impl.CompileExpression(k + 1,{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK);
        pas.Optimize.asm65("; --- WhileDoCondition","");
        $impl.Gen();
        $impl.Gen();
        $impl.Gen();
        $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        pas.Optimize.asm65("\tlda :STACKORIGIN+1,x","");
        pas.Optimize.asm65("\tjne l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop + 1),4),"");
        pas.Common.CodePosStackTop -= 1;
        pas.Optimize.asm65("; --- WhileDoEpilog","");
        $impl.RestoreBreakAddress();
        Result = rtl.rc(j,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.REPEATTOK) {
        pas.Common.CodeSize += 1;
        if (pas.Common.codealign.loop > 0) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tjmp @+","");
          pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.loop,4),"");
          pas.Optimize.asm65("@","");
          pas.Optimize.asm65("","");
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; --- RepeatUntilProlog","");
        pas.Optimize.ResetOpty();
        $impl.GenerateRepeatUntilProlog();
        $impl.SaveBreakAddress();
        j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
        while (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
        pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.UNTILTOK);
        $impl.StartOptimization(j + 2);
        j = rtl.rc($impl.CompileExpression(j + 2,{get: function () {
            return ExpressionType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ExpressionType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
        pas.Common.GetCommonType(j,pas.Tokens.TTokenKind.BOOLEANTOK,ExpressionType);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; --- RepeatUntilCondition","");
        $impl.GenerateRepeatUntilCondition();
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; --- RepeatUntilEpilog","");
        if (rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
        $impl.GenerateRepeatUntilEpilog();
        $impl.RestoreBreakAddress();
        Result = rtl.rc(j,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.FORTOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
          pas.Common.CodeSize += 1;
          if (IdentIndex > 0) {
            if (!((pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.VARTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.Pointers)))) {
              pas.Messages.Error(i + 1,"Ordinal variable expected as 'FOR' loop counter")}
             else if (pas.Common.IdentifierAt(IdentIndex).isInitialized || (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VALPASSING)) {
              pas.Messages.Error(i + 1,"Simple local variable expected as FOR loop counter")}
             else {
              pas.Common.IdentifierAt(IdentIndex).LoopVariable = true;
              if (pas.Common.codealign.loop > 0) {
                pas.Optimize.asm65("","");
                pas.Optimize.asm65("\tjmp @+","");
                pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.loop,4),"");
                pas.Optimize.asm65("@","");
                pas.Optimize.asm65("","");
              };
              if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.INTOK) {
                j = rtl.rc(i + 3,-2147483648,2147483647);
                if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
                  $impl.StartOptimization(j);
                  k = rtl.rc(pas.Common.TokenAt(j).StrLength,-2147483648,2147483647);
                  if (k !== 0) {
                    pas.Optimize.asm65("\tlda #-" + pas.StringUtilities.IntToStr(k),"");
                    pas.Optimize.asm65("\tsta l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "+1","");
                  };
                  $impl.GenerateRepeatUntilProlog();
                  $impl.SaveBreakAddress();
                  pas.Optimize.asm65("; --- ForToDoCondition","");
                  $impl.StartOptimization(j);
                  pas.Optimize.ResetOpty();
                  if (k !== 0) {
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tlda $" + pas.SysUtils.IntToHex((pas.Common.TokenAt(j).StrAddress - 256) + pas.Common.CODEORIGIN_BASE + 1,4) + "+" + pas.StringUtilities.IntToStr(k) + "-256,y","");
                    pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,""),"");
                  } else pas.Optimize.asm65("\tjmp l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop) + 3,4),"");
                  pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.DOTOK);
                  pas.Common.CodePosStackTop += 1;
                  rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
                  j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
                  pas.Optimize.asm65("","");
                  pas.Optimize.asm65("; --- ForToDoEpilog","");
                  if (rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
                  if (k !== 0) {
                    pas.Optimize.asm65("\tinc l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop - 1),4) + "+1","");
                    pas.Optimize.asm65("\tseq","");
                  };
                  $impl.GenerateWhileDoEpilog();
                  $impl.RestoreBreakAddress();
                  Result = rtl.rc(j,-2147483648,2147483647);
                } else {
                  if (pas.Common.TokenAt(j).Kind !== pas.Tokens.TTokenKind.IDENTTOK) pas.Messages.Error$2(j,pas.Messages.TErrorCode.IdentifierExpected);
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name),-2147483648,2147483647);
                  ActualParamType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).DataType,0,191);
                  VarType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).AllocElementType,0,191);
                  k = rtl.rc(pas.Parser.Elements(IdentTemp),-2147483648,2147483647);
                  if ((k * pas.Datatypes.GetDataSize(VarType)) > 256) pas.Messages.Error(j,"only arrays with a maximum of 256 bytes");
                  if ((ActualParamType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) && !(pas.Common.IdentifierAt(IdentTemp).IdType in rtl.createSet(pas.Tokens.TTokenKind.ARRAYTOK,pas.Tokens.TTokenKind.STRINGTOK,pas.Tokens.TTokenKind.STRINGLITERALTOK))) pas.Messages.Error(j,"for-in statement cannot operate on collection type '" + pas.Tokens.InfoAboutToken(ActualParamType) + "'");
                  if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK)) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK)) {}
                  else pas.Common.GetCommonType(i,pas.Common.IdentifierAt(IdentIndex).DataType,VarType);
                  $impl.StartOptimization(j);
                  if (ActualParamType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                    pas.Optimize.asm65("\tlda #$00","")}
                   else pas.Optimize.asm65("\tlda #-" + pas.StringUtilities.IntToStr(k),"");
                  pas.Optimize.asm65("\tsta l_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4) + "+1","");
                  $impl.GenerateRepeatUntilProlog();
                  $impl.SaveBreakAddress();
                  pas.Optimize.asm65("; --- ForToDoCondition","");
                  $impl.StartOptimization(j);
                  pas.Optimize.ResetOpty();
                  if (ActualParamType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                    pas.Optimize.asm65("\tldy #$00","");
                    pas.Optimize.asm65("\tcpy adr." + $impl.GetLocalName(IdentTemp,""),"");
                    pas.Optimize.asm65("\tjeq l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop) + 3,4),"");
                    pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+1,y","");
                    pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,""),"");
                  } else {
                    var $tmp14 = pas.Datatypes.GetDataSize(VarType);
                    if ($tmp14 === 1) {
                      pas.Optimize.asm65("\tldy #$00","");
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,""),"");
                    } else if ($tmp14 === 2) {
                      pas.Optimize.asm65("\tlda #$00","");
                      pas.Optimize.asm65("\tasl @","");
                      pas.Optimize.asm65("\ttay","");
                      k = rtl.rc(k * 2,-2147483648,2147483647);
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,""),"");
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256+1,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                    } else if ($tmp14 === 4) {
                      pas.Optimize.asm65("\tlda #$00","");
                      pas.Optimize.asm65("\tasl @","");
                      pas.Optimize.asm65("\tasl @","");
                      pas.Optimize.asm65("\ttay","");
                      k = rtl.rc(k * 4,-2147483648,2147483647);
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,""),"");
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256+1,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256+2,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,"") + "+2","");
                      pas.Optimize.asm65("\tlda adr." + $impl.GetLocalName(IdentTemp,"") + "+" + pas.StringUtilities.IntToStr(k) + "-256+3,y","");
                      pas.Optimize.asm65("\tsta " + $impl.GetLocalName(IdentIndex,"") + "+3","");
                    };
                  };
                  pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.DOTOK);
                  pas.Common.CodePosStackTop += 1;
                  rtl.rcArrW(pas.Common.CodePosStack,pas.Common.CodePosStackTop,pas.Common.CodeSize);
                  j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
                  pas.Optimize.asm65("","");
                  pas.Optimize.asm65("; --- ForToDoEpilog","");
                  if (rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
                  pas.Optimize.asm65("\tinc l_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.CodePosStack,pas.Common.CodePosStackTop - 1),4) + "+1","");
                  pas.Optimize.asm65("\tseq","");
                  $impl.GenerateWhileDoEpilog();
                  $impl.RestoreBreakAddress();
                  Result = rtl.rc(j,-2147483648,2147483647);
                };
              } else {
                pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.ASSIGNTOK);
                j = rtl.rc(i + 3,-2147483648,2147483647);
                $impl.StartOptimization(j);
                forLoop.begin_const = false;
                forLoop.end_const = false;
                forBPL = 0;
                if ($impl.SafeCompileConstExpression({get: function () {
                    return j;
                  }, set: function (v) {
                    rtl.rc(v,-2147483648,2147483647);
                    j = v;
                  }},{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ConstVal = v;
                  }},{get: function () {
                    return ExpressionType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ExpressionType = v;
                  }},pas.Common.IdentifierAt(IdentIndex).DataType,true,true)) {
                  $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,0);
                  forLoop.begin_value = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
                  forLoop.begin_const = true;
                  forBPL = rtl.rc((ConstVal < 128) + 0,0,255);
                } else {
                  j = rtl.rc($impl.CompileExpression(j,{get: function () {
                      return ExpressionType;
                    }, set: function (v) {
                      rtl.rc(v,0,191);
                      ExpressionType = v;
                    }},pas.Common.IdentifierAt(IdentIndex).DataType),-2147483648,2147483647);
                  $impl.ExpandParam(pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType);
                };
                if (!(ExpressionType in pas.Datatypes.OrdinalTypes)) pas.Messages.Error$2(j,pas.Messages.TErrorCode.OrdinalExpectedFOR);
                ActualParamType = rtl.rc(ExpressionType,0,191);
                $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),IdentIndex,"","");
                if (!(pas.Common.TokenAt(j + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.TOTOK,pas.Tokens.TTokenKind.DOWNTOTOK))) {
                  pas.Messages.Error(j + 1,"'TO' or 'DOWNTO' expected but " + pas.Common.TokenList.GetTokenSpellingAtIndex(j + 1) + " found")}
                 else {
                  Down = pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DOWNTOTOK;
                  j += 2;
                  $impl.StartOptimization(j);
                  IdentTemp = rtl.rc(-1,-2147483648,2147483647);
                  if ($impl.SafeCompileConstExpression({get: function () {
                      return j;
                    }, set: function (v) {
                      rtl.rc(v,-2147483648,2147483647);
                      j = v;
                    }},{get: function () {
                      return ConstVal;
                    }, set: function (v) {
                      rtl.rc(v,-9007199254740991,9007199254740991);
                      ConstVal = v;
                    }},{get: function () {
                      return ExpressionType;
                    }, set: function (v) {
                      rtl.rc(v,0,191);
                      ExpressionType = v;
                    }},pas.Common.IdentifierAt(IdentIndex).DataType,true,true)) {
                    $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,0);
                    pas.Parser.DefineIdent(j,"@FORTMP_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),pas.Tokens.TTokenKind.CONSTTOK,pas.Common.IdentifierAt(IdentIndex).DataType,pas.Common.IdentifierAt(IdentIndex).NumAllocElements,pas.Common.IdentifierAt(IdentIndex).AllocElementType,ConstVal,pas.Common.TokenAt(j).Kind);
                    forLoop.end_value = rtl.rc(ConstVal,-9007199254740991,9007199254740991);
                    forLoop.end_const = true;
                    if (ConstVal > 0) forBPL = rtl.rc(forBPL | 2,0,255);
                  } else {
                    if (((pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.DOTOK)) || ((pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.OPARTOK) && (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.CPARTOK) && (pas.Common.TokenAt(j + 3).Kind === pas.Tokens.TTokenKind.DOTOK))) {
                      if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
                        IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name),-2147483648,2147483647)}
                       else IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j + 1).Name),-2147483648,2147483647);
                      j = rtl.rc($impl.CompileExpression(j,{get: function () {
                          return ExpressionType;
                        }, set: function (v) {
                          rtl.rc(v,0,191);
                          ExpressionType = v;
                        }},pas.Common.IdentifierAt(IdentIndex).DataType),-2147483648,2147483647);
                      $impl.ExpandParam(pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType);
                    } else {
                      j = rtl.rc($impl.CompileExpression(j,{get: function () {
                          return ExpressionType;
                        }, set: function (v) {
                          rtl.rc(v,0,191);
                          ExpressionType = v;
                        }},pas.Common.IdentifierAt(IdentIndex).DataType),-2147483648,2147483647);
                      $impl.ExpandParam(pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType);
                      pas.Parser.DefineIdent(j,"@FORTMP_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4),pas.Tokens.TTokenKind.VARTOK,pas.Common.IdentifierAt(IdentIndex).DataType,pas.Common.IdentifierAt(IdentIndex).NumAllocElements,pas.Common.IdentifierAt(IdentIndex).AllocElementType,1,pas.Tokens.TTokenKind.IDENTTOK);
                    };
                  };
                  if (!(ExpressionType in pas.Datatypes.OrdinalTypes)) pas.Messages.Error$2(j,pas.Messages.TErrorCode.OrdinalExpectedFOR);
                  if (((ActualParamType in pas.Datatypes.UnsignedOrdinalTypes) && (ExpressionType in pas.Datatypes.UnsignedOrdinalTypes)) || ((ActualParamType in pas.Datatypes.SignedOrdinalTypes) && (ExpressionType in pas.Datatypes.SignedOrdinalTypes))) {
                    if (pas.Datatypes.GetDataSize(ExpressionType) > pas.Datatypes.GetDataSize(ActualParamType)) ActualParamType = rtl.rc(ExpressionType,0,191);
                    if (pas.Datatypes.GetDataSize(ActualParamType) > pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType)) ActualParamType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
                  } else ActualParamType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
                  if (IdentTemp < 0) IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FORTMP_" + pas.SysUtils.IntToHex(pas.Common.CodeSize,4)),-2147483648,2147483647);
                  $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(ActualParamType),IdentTemp,"","");
                  pas.Optimize.asm65("","");
                  if (pas.Common.LoopUnroll && forLoop.begin_const && forLoop.end_const) {}
                  else $impl.GenerateRepeatUntilProlog();
                  $impl.SaveBreakAddress();
                  pas.Optimize.asm65("; --- ForToDoCondition","");
                  if ((ActualParamType === ExpressionType) && (pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentTemp).DataType) > pas.Datatypes.GetDataSize(ActualParamType))) pas.Messages.Note(j,"FOR loop counter variable type is of larger size than required");
                  $impl.StartOptimization(j);
                  pas.Optimize.ResetOpty();
                  yes = true;
                  if (pas.Common.LoopUnroll && forLoop.begin_const && forLoop.end_const) {
                    pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.DOTOK);
                    ConstVal = rtl.rc(forLoop.begin_value,-9007199254740991,9007199254740991);
                    if (((Down === false) && (forLoop.end_value >= forLoop.begin_value)) || (Down && (forLoop.end_value <= forLoop.begin_value))) {
                      while (ConstVal !== forLoop.end_value) {
                        pas.Optimize.ResetOpty();
                        $impl.CompileStatement(j + 2,false);
                        if (yes) {
                          if (Down) {
                            pas.Optimize.asm65("---unroll---","")}
                           else pas.Optimize.asm65("+++unroll+++","");
                          yes = false;
                        } else pas.Optimize.asm65("===unroll===","");
                        if (Down) {
                          ConstVal -= 1}
                         else ConstVal += 1;
                        var $tmp15 = pas.Datatypes.GetDataSize(ActualParamType);
                        if ($tmp15 === 1) {
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(ConstVal,0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,""),"");
                        } else if ($tmp15 === 2) {
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(ConstVal,0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,""),"");
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 256),0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                        } else if ($tmp15 === 4) {
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(ConstVal,0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,""),"");
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 256),0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 65536),0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+2","");
                          pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 16777216),0,255),2),"");
                          pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+3","");
                        };
                      };
                      pas.Optimize.ResetOpty();
                      j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
                      pas.Optimize.asm65("===unroll===","");
                      pas.Common.optyY = "";
                      var $tmp16 = pas.Datatypes.GetDataSize(ActualParamType);
                      if ($tmp16 === 1) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(ConstVal,0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,""),"");
                      } else if ($tmp16 === 2) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(ConstVal,0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,""),"");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 256),0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                      } else if ($tmp16 === 4) {
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(ConstVal,0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,""),"");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 256),0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+1","");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 65536),0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+2","");
                        pas.Optimize.asm65("\tldy #$" + pas.SysUtils.IntToHex(rtl.rc(Math.floor(ConstVal / 16777216),0,255),2),"");
                        pas.Optimize.asm65("\tsty " + $impl.GetLocalName(IdentIndex,"") + "+3","");
                      };
                    } else pas.Messages.Error(j,"for loop with invalid range");
                  } else {
                    $impl.Push(pas.Common.IdentifierAt(IdentTemp).Value,1,pas.Datatypes.GetDataSize(ActualParamType),IdentTemp,0);
                    $impl.GenerateForToDoCondition(ActualParamType,Down,IdentIndex);
                    pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.DOTOK);
                    $impl.GenerateForToDoProlog();
                    j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
                  };
                  pas.Optimize.asm65("","");
                  pas.Optimize.asm65("; --- ForToDoEpilog","");
                  if (rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt) pas.Optimize.asm65("c_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
                  if (pas.Common.LoopUnroll && forLoop.begin_const && forLoop.end_const) {}
                  else $impl.GenerateForToDoEpilog(ActualParamType,Down,IdentIndex,true,forBPL);
                  $impl.RestoreBreakAddress();
                  Result = rtl.rc(j,-2147483648,2147483647);
                };
              };
              pas.Common.IdentifierAt(IdentIndex).LoopVariable = false;
            }}
           else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
        };
      } else if ($tmp === pas.Tokens.TTokenKind.ASSIGNFILETOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.COMMATOK);
          $impl.StartOptimization(i + 4);
          if (pas.Common.TokenAt(i + 4).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) pas.Messages.Note(i + 4,"Only uppercase letters preceded by the drive symbol, like 'D:FILENAME.EXT' or 'S:'");
          i = rtl.rc($impl.CompileExpression(i + 4,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.POINTERTOK,ActualParamType);
          $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.pfname");
          $impl.StartOptimization(i);
          $impl.Push(0,0,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.BYTETOK),0,0);
          $impl.GenerateAssignment(2,1,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.status");
          if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.TEXTFILETOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.TEXTFILETOK)) {
            pas.Optimize.asm65("\tldy #s@file.buffer","");
            pas.Optimize.asm65("\tlda <@buf","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
            pas.Optimize.asm65("\tiny","");
            pas.Optimize.asm65("\tlda >@buf","");
            pas.Optimize.asm65("\tsta (:bp2),y","");
          };
          Result = rtl.rc(i + 1,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.RESETTOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          $impl.StartOptimization(i + 3);
          if (pas.Common.TokenAt(i + 3).Kind !== pas.Tokens.TTokenKind.COMMATOK) {
            if ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)) === 0) {
              $impl.Push(128,0,2,0,0)}
             else $impl.Push(rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),-2147483648,2147483647),0,2,0,0);
            i += 3;
          } else {
            if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.TEXTFILETOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.TEXTFILETOK)) pas.Messages.Error(i,'Call by var for arg no. 1 has to match exactly: Got "' + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).DataType) + '" expected "File"');
            i = rtl.rc($impl.CompileExpression(i + 4,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.WORDTOK,ActualParamType);
            $impl.ExpandParam(pas.Tokens.TTokenKind.WORDTOK,ActualParamType);
            i += 1;
          };
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
          $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.record");
          $impl.GenerateFileOpen(IdentIndex,pas.CompilerTypes.TIOCode.FileMode);
          Result = rtl.rc(i,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.REWRITETOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          $impl.StartOptimization(i + 3);
          if (pas.Common.TokenAt(i + 3).Kind !== pas.Tokens.TTokenKind.COMMATOK) {
            if ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType)) === 0) {
              $impl.Push(128,0,2,0,0)}
             else $impl.Push(rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),-2147483648,2147483647),0,2,0,0);
            i += 3;
          } else {
            if ((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.TEXTFILETOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.TEXTFILETOK)) pas.Messages.Error(i,'Call by var for arg no. 1 has to match exactly: Got "' + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).DataType) + '" expected "File"');
            i = rtl.rc($impl.CompileExpression(i + 4,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.WORDTOK,ActualParamType);
            $impl.ExpandParam(pas.Tokens.TTokenKind.WORDTOK,ActualParamType);
            i += 1;
          };
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
          $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.record");
          $impl.GenerateFileOpen(IdentIndex,pas.CompilerTypes.TIOCode.OpenWrite);
          Result = rtl.rc(i,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.APPENDTOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.TEXTFILETOK)) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.TEXTFILETOK)))) pas.Messages.Error(i,'Call by var for arg no. 1 has to match exactly: Got "' + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).DataType) + '" expected "Text"');
          if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.COMMATOK) pas.Messages.Error(i,"Wrong number of parameters specified for call to Append");
          $impl.StartOptimization(i + 3);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.CPARTOK);
          $impl.Push(1,0,2,0,0);
          $impl.GenerateAssignment(2,2,0,pas.Common.IdentifierAt(IdentIndex).Name,"s@file.record");
          $impl.GenerateFileOpen(IdentIndex,pas.CompilerTypes.TIOCode.Append);
          Result = rtl.rc(i + 3,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.GETRESOURCEHANDLETOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (pas.Common.IdentifierAt(IdentIndex).DataType !== pas.Tokens.TTokenKind.POINTERTOK) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.COMMATOK);
          pas.Common.CheckTok(i + 4,pas.Tokens.TTokenKind.STRINGLITERALTOK);
          svar = "";
          for (var $l1 = 1, $end = pas.Common.TokenAt(i + 4).StrLength; $l1 <= $end; $l1++) {
            k = $l1;
            svar = svar + String.fromCharCode(rtl.rcArrR(pas.Common.StaticStringData,(pas.Common.TokenAt(i + 4).StrAddress - 256) + k));
          };
          pas.Common.CheckTok(i + 5,pas.Tokens.TTokenKind.CPARTOK);
          pas.Optimize.asm65("\tlda <MAIN.@RESOURCE." + svar,"");
          pas.Optimize.asm65("\tsta " + pas.Common.TokenAt(i + 2).Name,"");
          pas.Optimize.asm65("\tlda >MAIN.@RESOURCE." + svar,"");
          pas.Optimize.asm65("\tsta " + pas.Common.TokenAt(i + 2).Name + "+1","");
          i += 5;
          Result = rtl.rc(i,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.SIZEOFRESOURCETOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.IntegerTypes)) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.COMMATOK);
          pas.Common.CheckTok(i + 4,pas.Tokens.TTokenKind.STRINGLITERALTOK);
          svar = "";
          for (var $l2 = 1, $end1 = pas.Common.TokenAt(i + 4).StrLength; $l2 <= $end1; $l2++) {
            k = $l2;
            svar = svar + String.fromCharCode(rtl.rcArrR(pas.Common.StaticStringData,(pas.Common.TokenAt(i + 4).StrAddress - 256) + k));
          };
          pas.Common.CheckTok(i + 5,pas.Tokens.TTokenKind.CPARTOK);
          pas.Optimize.asm65("\tlda <MAIN.@RESOURCE." + svar + ".end-MAIN.@RESOURCE." + svar,"");
          pas.Optimize.asm65("\tsta " + pas.Common.TokenAt(i + 2).Name,"");
          pas.Optimize.asm65("\tlda >MAIN.@RESOURCE." + svar + ".end-MAIN.@RESOURCE." + svar,"");
          pas.Optimize.asm65("\tsta " + pas.Common.TokenAt(i + 2).Name + "+1","");
          i += 5;
          Result = rtl.rc(i,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.BLOCKREADTOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.FILETOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.FILETOK))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.COMMATOK);
          i += 2;
          NumActualParams = rtl.rc($impl.CompileBlockRead({get: function () {
              return i;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              i = v;
            }},IdentIndex,pas.Parser.GetIdentIndex("BLOCKREAD")),-2147483648,2147483647);
          $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.Read,NumActualParams);
          Result = rtl.rc(i,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.BLOCKWRITETOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.FILETOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.FILETOK))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.COMMATOK);
          i += 2;
          NumActualParams = rtl.rc($impl.CompileBlockRead({get: function () {
              return i;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              i = v;
            }},IdentIndex,pas.Parser.GetIdentIndex("BLOCKWRITE")),-2147483648,2147483647);
          $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.Write,NumActualParams);
          Result = rtl.rc(i,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.CLOSEFILETOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected)}
         else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
          if (!((pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.FILETOK,pas.Tokens.TTokenKind.TEXTFILETOK)))) pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.CPARTOK);
          $impl.GenerateFileOpen(IdentIndex,pas.CompilerTypes.TIOCode.Close);
          Result = rtl.rc(i + 3,-2147483648,2147483647);
        }}
       else if ($tmp === pas.Tokens.TTokenKind.READLNTOK) {
        if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.OPARTOK) {
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) {
            $impl.GenerateRead();
            Result = rtl.rc(i,-2147483648,2147483647);
          } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.OParExpected);
        } else if (pas.Common.TokenAt(i + 2).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.IdentifierExpected)}
         else {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
          if ((IdentIndex > 0) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.TEXTFILETOK)) {
            pas.Optimize.asm65("\tlda #eol","");
            pas.Optimize.asm65("\tsta @buf","");
            $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.ReadRecord,0);
            i += 3;
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COMMATOK);
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.IDENTTOK);
            if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name)).DataType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected);
            IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
            pas.Optimize.asm65("\t@moveRECORD " + $impl.GetLocalName(IdentIndex,""),"");
            pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.CPARTOK);
            Result = rtl.rc(i + 2,-2147483648,2147483647);
          } else if (IdentIndex > 0) {
            if (pas.Common.IdentifierAt(IdentIndex).Kind !== pas.Tokens.TTokenKind.VARTOK) {
              pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex)}
             else {
              $impl.GenerateRead();
              pas.Optimize.ResetOpty();
              if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                pas.Optimize.asm65("\t@move #@buf #" + $impl.GetLocalName(IdentIndex,"adr.") + " #" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements),"");
              } else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.CHARTOK) {
                pas.Optimize.asm65("\tmva @buf+1 " + pas.Common.IdentifierAt(IdentIndex).Name,"")}
               else if (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.IntegerTypes) {
                pas.Optimize.asm65("\t@StrToInt #@buf","");
                var $tmp17 = pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType);
                if ($tmp17 === 1) {
                  pas.Optimize.asm65("\tmva :edx " + pas.Common.IdentifierAt(IdentIndex).Name,"")}
                 else if ($tmp17 === 2) {
                  pas.Optimize.asm65("\tmva :edx " + pas.Common.IdentifierAt(IdentIndex).Name,"");
                  pas.Optimize.asm65("\tmva :edx+1 " + pas.Common.IdentifierAt(IdentIndex).Name + "+1","");
                } else if ($tmp17 === 4) {
                  pas.Optimize.asm65("\tmva :edx " + pas.Common.IdentifierAt(IdentIndex).Name,"");
                  pas.Optimize.asm65("\tmva :edx+1 " + pas.Common.IdentifierAt(IdentIndex).Name + "+1","");
                  pas.Optimize.asm65("\tmva :edx+2 " + pas.Common.IdentifierAt(IdentIndex).Name + "+2","");
                  pas.Optimize.asm65("\tmva :edx+3 " + pas.Common.IdentifierAt(IdentIndex).Name + "+3","");
                };
              } else pas.Messages.ErrorForIdentifier(i + 2,pas.Messages.TErrorCode.IncompatibleTypeOf,IdentIndex);
              pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.CPARTOK);
              Result = rtl.rc(i + 3,-2147483648,2147483647);
            }}
           else pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        }}
       else if (($tmp === pas.Tokens.TTokenKind.WRITETOK) || ($tmp === pas.Tokens.TTokenKind.WRITELNTOK)) {
        $impl.StartOptimization(i);
        yes = pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.WRITELNTOK;
        if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.CPARTOK)) i += 2;
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) {}
        else {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i += 1;
          if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name)).DataType === pas.Tokens.TTokenKind.TEXTFILETOK)) {
            IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
            i += 1;
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
            i += 1;
            var $tmp18 = pas.Common.TokenAt(i + 1).Kind;
            if ($tmp18 === pas.Tokens.TTokenKind.IDENTTOK) {
              if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name)).DataType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.VariableExpected);
              pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),"") + " :bp2","");
              pas.Optimize.asm65("\tldy #$01","");
              pas.Optimize.asm65("\tmva:rne (:bp2),y @buf-1,y+","");
              pas.Optimize.asm65("\tlda (:bp2),y","");
              if (yes) {
                pas.Optimize.asm65("\ttay","");
                pas.Optimize.asm65("\tlda #eol","");
                pas.Optimize.asm65("\tsta @buf,y","");
                pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #s@file.nrecord","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda #$01","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.WriteRecord,0);
              } else {
                pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #s@file.nrecord","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.Write,0);
              };
              i += 2;
            } else if ($tmp18 === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
              pas.Optimize.asm65("\tldy #$00","");
              pas.Optimize.asm65("\tmva:rne CODEORIGIN+$" + pas.SysUtils.IntToHex((pas.Common.TokenAt(i + 1).StrAddress - 256) + 1,4) + ",y @buf,y+","");
              if (yes) {
                pas.Optimize.asm65("\tlda #eol","");
                pas.Optimize.asm65("\tldy CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 1).StrAddress - 256,4),"");
                pas.Optimize.asm65("\tsta @buf,y","");
                pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #s@file.nrecord","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda #$01","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.WriteRecord,0);
              } else {
                pas.Optimize.asm65("\tlda CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i + 1).StrAddress - 256,4),"");
                pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #s@file.nrecord","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.Write,0);
              };
              i += 2;
            } else if ($tmp18 === pas.Tokens.TTokenKind.INTNUMBERTOK) {
              pas.Optimize.asm65("\ttxa:pha","");
              $impl.Push(pas.Common.TokenAt(i + 1).Value,0,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.CARDINALTOK),0,0);
              pas.Optimize.asm65("\t@ValueToRec #@printINT","");
              pas.Optimize.asm65("\tpla:tax","");
              if (yes) {
                pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #s@file.nrecord","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda #$01","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.WriteRecord,0);
              } else {
                pas.Optimize.asm65("\ttya","");
                pas.Optimize.asm65("\tmwy " + $impl.GetLocalName(IdentIndex,"") + " :bp2","");
                pas.Optimize.asm65("\tldy #s@file.nrecord","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                pas.Optimize.asm65("\tiny","");
                pas.Optimize.asm65("\tlda #$00","");
                pas.Optimize.asm65("\tsta (:bp2),y","");
                $impl.GenerateFileRead(IdentIndex,pas.CompilerTypes.TIOCode.Write,0);
              };
              i += 2;
            };
            yes = false;
          } else do {
            var $tmp19 = pas.Common.TokenAt(i + 1).Kind;
            if ($tmp19 === pas.Tokens.TTokenKind.CHARLITERALTOK) {
              i += 1;
              do {
                pas.Optimize.asm65("\t@print #$" + pas.SysUtils.IntToHex(pas.Common.TokenAt(i).Value,2),"");
                i += 1;
              } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.CHARLITERALTOK));
            } else if ($tmp19 === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
              do {
                $impl.GenerateWriteString(pas.Common.TokenAt(i + 1).StrAddress,1,pas.Tokens.TTokenKind.INTEGERTOK);
                i += 2;
              } while (!(pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.STRINGLITERALTOK))}
             else {
              j = rtl.rc(i + 1,-2147483648,2147483647);
              i = rtl.rc($impl.CompileExpression(j,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ExpressionType = v;
                }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
              if ((ExpressionType === pas.Tokens.TTokenKind.CHARTOK) && (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) && (pas.Common.TokenAt(i - 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK)) {
                pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
                pas.Optimize.asm65("\tsta :bp2","");
                pas.Optimize.asm65("\tlda :STACKORIGIN+STACKWIDTH,x","");
                pas.Optimize.asm65("\tsta :bp2+1","");
                pas.Optimize.asm65("\tldy #$00","");
                pas.Optimize.asm65("\tlda (:bp2),y","");
                pas.Optimize.asm65("\tsta :STACKORIGIN,x","");
              };
              if (ExpressionType in pas.Datatypes.IntegerTypes) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,0,ExpressionType)}
               else if (ExpressionType === pas.Tokens.TTokenKind.BOOLEANTOK) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,7,pas.Tokens.TTokenKind.INTEGERTOK)}
               else if (ExpressionType === pas.Tokens.TTokenKind.CHARTOK) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,6,pas.Tokens.TTokenKind.INTEGERTOK)}
               else if (ExpressionType === pas.Tokens.TTokenKind.REALTOK) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,8,pas.Tokens.TTokenKind.INTEGERTOK)}
               else if (ExpressionType === pas.Tokens.TTokenKind.SHORTREALTOK) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,9,pas.Tokens.TTokenKind.INTEGERTOK)}
               else if (ExpressionType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,10,pas.Tokens.TTokenKind.INTEGERTOK)}
               else if (ExpressionType === pas.Tokens.TTokenKind.SINGLETOK) {
                $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,11,pas.Tokens.TTokenKind.INTEGERTOK)}
               else if (ExpressionType in pas.Datatypes.Pointers) {
                if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) {
                  IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j + 1).Name),-2147483648,2147483647)}
                 else if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
                  IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(j).Name),-2147483648,2147483647)}
                 else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
                if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.PROCVARTOK) {
                  IdentTemp = rtl.rc(pas.Parser.GetIdentIndex("@FN" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,4)),-2147483648,2147483647);
                  if (pas.Common.IdentifierAt(IdentTemp).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) {
                    ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentTemp).DataType,0,191)}
                   else ExpressionType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
                  if (ExpressionType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                    $impl.GenerateWriteString(pas.Common.IdentifierAt(IdentIndex).Value,2,pas.Tokens.TTokenKind.POINTERTOK)}
                   else if (ExpressionType in pas.Datatypes.IntegerTypes) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,0,ExpressionType)}
                   else if (ExpressionType === pas.Tokens.TTokenKind.BOOLEANTOK) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,7,pas.Tokens.TTokenKind.INTEGERTOK)}
                   else if (ExpressionType === pas.Tokens.TTokenKind.CHARTOK) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,6,pas.Tokens.TTokenKind.INTEGERTOK)}
                   else if (ExpressionType === pas.Tokens.TTokenKind.REALTOK) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,8,pas.Tokens.TTokenKind.INTEGERTOK)}
                   else if (ExpressionType === pas.Tokens.TTokenKind.SHORTREALTOK) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,9,pas.Tokens.TTokenKind.INTEGERTOK)}
                   else if (ExpressionType === pas.Tokens.TTokenKind.HALFSINGLETOK) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,10,pas.Tokens.TTokenKind.INTEGERTOK)}
                   else if (ExpressionType === pas.Tokens.TTokenKind.SINGLETOK) {
                    $impl.GenerateWriteString(pas.Common.TokenAt(i).Value,11,pas.Tokens.TTokenKind.INTEGERTOK)}
                   else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
                } else if ((ExpressionType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) || ((ExpressionType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.STRINGPOINTERTOK))) {
                  $impl.GenerateWriteString(pas.Common.IdentifierAt(IdentIndex).Value,2,pas.Common.IdentifierAt(IdentIndex).DataType)}
                 else if ((ExpressionType === pas.Tokens.TTokenKind.PCHARTOK) || (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.POINTERTOK))) {
                  $impl.GenerateWriteString(pas.Common.IdentifierAt(IdentIndex).Value,12,pas.Common.IdentifierAt(IdentIndex).DataType)}
                 else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
              } else pas.Messages.Error$2(i,pas.Messages.TErrorCode.CantReadWrite);
              i += 1;
            };
            j = 0;
            ActualParamType = rtl.rc(ExpressionType,0,191);
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COLONTOK) do {
              i = rtl.rc($impl.CompileExpression(i + 1,{get: function () {
                  return ExpressionType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ExpressionType = v;
                }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
              $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
              i += 1;
              j += 1;
              if (j > (2 - ((ActualParamType in pas.Datatypes.OrdinalTypes) + 0))) pas.Messages.Error(i + 1,"Illegal use of ':'");
            } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COLONTOK));
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
        };
        if (yes) $impl.a65(pas.CompilerTypes.TCode65.putEOL,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        $impl.StopOptimization();
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.ASMTOK) {
        pas.Optimize.ResetOpty();
        $impl.StopOptimization();
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("; -------------------  ASM Block " + pas.SysUtils.Format("%.8d",pas.System.VarRecs(0,pas.Common.AsmBlockIndex)) + "  -------------------","");
        pas.Optimize.asm65("","");
        if (pas.Common.isInterrupt && ((pas.System.Pos(" :bp",rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex)) > 0) || (pas.System.Pos(" :STACK",rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex)) > 0))) {
          if (pas.System.Pos(" :bp",rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex)) > 0) pas.Messages.Error(i,"Illegal instruction in INTERRUPT block ':BP'");
          if (pas.System.Pos(" :STACK",rtl.rcArrR(pas.Common.AsmBlock,pas.Common.AsmBlockIndex)) > 0) pas.Messages.Error(i,"Illegal instruction in INTERRUPT block ':STACKORIGIN'");
        };
        pas.Optimize.asm65("#asm:" + pas.StringUtilities.IntToStr(pas.Common.AsmBlockIndex),"");
        pas.Common.AsmBlockIndex += 1;
        if (isAsm && (pas.Common.TokenAt(i).Value === 0)) {
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.ENDTOK);
          i += 1;
        };
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if (($tmp === pas.Tokens.TTokenKind.INCTOK) || ($tmp === pas.Tokens.TTokenKind.DECTOK)) {
        Value = 0;
        ExpressionType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
        NumActualParams = 0;
        Down = pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.DECTOK;
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
        i += 2;
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
          IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
          $impl.CheckAssignment(i,IdentIndex);
          if (IdentIndex === 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
          if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.VARTOK) {
            ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
            if (ExpressionType === pas.Tokens.TTokenKind.CHARTOK) ExpressionType = rtl.rc(pas.Tokens.TTokenKind.BYTETOK,0,191);
            if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.REALTOK) {
              pas.Messages.Error(i,"Left side cannot be assigned to")}
             else {
              Value = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,-9007199254740991,9007199254740991);
              if (ExpressionType in pas.Datatypes.Pointers) {
                ExpressionType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
                if (pas.System.Pos("mw? " + pas.Common.TokenAt(i).Name,pas.Common.optyBP2) > 0) pas.Common.optyBP2 = "";
              };
            };
          } else pas.Messages.Error(i,"Left side cannot be assigned to");
        } else pas.Messages.Error$2(i,pas.Messages.TErrorCode.IdentifierExpected);
        $impl.StartOptimization(i);
        IndirectionLevel = 1;
        if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
          ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191)}
         else if (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) {
          ExpressionType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191)}
         else ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
        if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.REALTOK) pas.Messages.Error$2(i,pas.Messages.TErrorCode.OrdinalExpExpected);
        if (!(pas.Common.IdentifierAt(IdentIndex).IdType in rtl.createSet(pas.Tokens.TTokenKind.PCHARTOK)) && (pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) && !(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
            ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191);
            IndirectionLevel = 3;
            i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,{get: function () {
                return ExpressionType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ExpressionType = v;
              }}),-2147483648,2147483647);
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
            i += 1;
          } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) {
            pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IllegalQualifier)}
           else pas.Messages.ErrorIncompatibleTypes(i + 1,pas.Common.IdentifierAt(IdentIndex).DataType,ExpressionType,false);
        } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) {
          IndirectionLevel = 3;
          i = rtl.rc($impl.CompileArrayIndex(i,IdentIndex,{get: function () {
              return ExpressionType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ExpressionType = v;
            }}),-2147483648,2147483647);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CBRACKETTOK);
          i += 1;
        } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) if (pas.Common.IdentifierAt(IdentIndex).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp)}
         else {
          ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191);
          IndirectionLevel = 2;
          i += 1;
        };
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
          j = rtl.rc(i + 2,-2147483648,2147483647);
          yes = false;
          if ($impl.SafeCompileConstExpression({get: function () {
              return j;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              j = v;
            }},{get: function () {
              return ConstVal;
            }, set: function (v) {
              rtl.rc(v,-9007199254740991,9007199254740991);
              ConstVal = v;
            }},{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},ExpressionType,true,true)) {
            yes = true}
           else j = rtl.rc($impl.CompileExpression(j,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          i = rtl.rc(j,-2147483648,2147483647);
          pas.Common.GetCommonType(i,ExpressionType,ActualParamType);
          NumActualParams += 1;
          if (pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
            if (yes === false) $impl.ExpandParam(ExpressionType,ActualParamType);
            if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
              if (yes) {
                $impl.Push(ConstVal * pas.Parser.RecordSize(IdentIndex,""),0,2,0,0)}
               else pas.Messages.Error(i,"-- under construction --");
            } else if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in pas.Datatypes.OrdinalTypes) && (IndirectionLevel !== 2)) {
              if (yes) {
                if (IndirectionLevel === 3) {
                  $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,0)}
                 else $impl.Push(ConstVal * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),0,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,0);
              } else $impl.GenerateIndexShift(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0);
            } else if (yes) $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,0);
          } else {
            if (yes) $impl.Push(ConstVal,0,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,0);
            ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191);
            if (ExpressionType === pas.Tokens.TTokenKind.UNTYPETOK) ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
            $impl.ExpandParam(ExpressionType,ActualParamType);
          };
        } else if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.unionSet(rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.Pointers),rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))))) if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) || (IndirectionLevel === 2) || ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0) && (IndirectionLevel === 3))) {
          ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).AllocElementType,0,191);
          if (ExpressionType === pas.Tokens.TTokenKind.UNTYPETOK) ExpressionType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
          if (ExpressionType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
            $impl.Push(pas.Parser.RecordSize(IdentIndex,""),0,2,0,0)}
           else $impl.Push(1,0,pas.Datatypes.GetDataSize(ExpressionType),0,0);
          NumActualParams += 1;
        } else if (!(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.BYTETOK,pas.Tokens.TTokenKind.SHORTINTTOK))) {
          $impl.Push(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType),0,1,0,0);
          $impl.ExpandParam(ExpressionType,pas.Tokens.TTokenKind.BYTETOK);
          NumActualParams += 1;
        };
        if ((pas.Common.IdentifierAt(IdentIndex).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (IndirectionLevel !== 3)) IndirectionLevel = 2;
        if (ExpressionType === pas.Tokens.TTokenKind.UNTYPETOK) pas.Messages.Error(i,"Assignments to formal parameters and open arrays are not possible");
        if (NumActualParams === 0) {
          $impl.GenerateForToDoEpilog(ExpressionType,Down,IdentIndex,false,0);
        } else $impl.GenerateIncDec(IndirectionLevel,ExpressionType,Down,IdentIndex);
        $impl.StopOptimization();
        i += 1;
        pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.EXITTOK) {
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) {
          $impl.StartOptimization(i);
          i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
              return ActualParamType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ActualParamType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          i += 1;
          yes = false;
          for (var $l3 = 1, $end2 = pas.Common.NumIdent(); $l3 <= $end2; $l3++) {
            j = $l3;
            if ((pas.Common.IdentifierAt(j).ProcAsBlock === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop)) && (pas.Common.IdentifierAt(j).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK)) {
              IdentIndex = rtl.rc($impl.GetIdentResult(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop)),-2147483648,2147483647);
              yes = true;
              break;
            };
          };
          if (!yes) pas.Messages.Error(i,"Procedures cannot return a value");
          if ((ActualParamType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements === 0)) {
            pas.Messages.ErrorIncompatibleTypes(i,ActualParamType,pas.Tokens.TTokenKind.PCHARTOK,false)}
           else pas.Common.GetCommonConstType(i,pas.Common.IdentifierAt(IdentIndex).DataType,ActualParamType,true);
          $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType),0,"RESULT","");
        };
        pas.Optimize.asm65("\tjmp @exit","");
        pas.Optimize.ResetOpty();
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.BREAKTOK) {
        if (pas.Common.BreakPosStackTop === 0) pas.Messages.Error(i,"BREAK not allowed");
        pas.Optimize.asm65("\tjmp b_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
        rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).brk = true;
        pas.Optimize.ResetOpty();
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.CONTINUETOK) {
        if (pas.Common.BreakPosStackTop === 0) pas.Messages.Error(i,"CONTINUE not allowed");
        pas.Optimize.asm65("\tjmp c_" + pas.SysUtils.IntToHex(rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).ptr,4),"");
        rtl.rcArrR(pas.Common.BreakPosStack,pas.Common.BreakPosStackTop).cnt = true;
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.HALTTOK) {
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) {
          i = rtl.rc(pas.Parser.CompileConstExpression(i + 2,{get: function () {
              return Value;
            }, set: function (v) {
              rtl.rc(v,-9007199254740991,9007199254740991);
              Value = v;
            }},{get: function () {
              return ExpressionType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              ExpressionType = v;
            }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
          pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.BYTETOK,ExpressionType,true);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
          i += 1;
          $impl.GenerateProgramEpilog(Value);
        } else $impl.GenerateProgramEpilog(0);
        Result = rtl.rc(i,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.GETINTVECTOK) {
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
        i = rtl.rc(pas.Parser.CompileConstExpression(i + 2,{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ActualParamType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ActualParamType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
        pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.INTEGERTOK,ActualParamType);
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
        if (!(rtl.rc(ConstVal,0,255) in rtl.createSet(null,0,4))) pas.Messages.Error(i,"Interrupt Number in [0..4]");
        pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.IDENTTOK);
        IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 2).Name),-2147483648,2147483647);
        if (IdentIndex === 0) pas.Messages.Error$2(i + 2,pas.Messages.TErrorCode.UnknownIdentifier);
        if (!(pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers)) pas.Messages.ErrorIncompatibleTypes(i + 2,pas.Common.IdentifierAt(IdentIndex).DataType,pas.Tokens.TTokenKind.POINTERTOK,false);
        svar = $impl.GetLocalName(IdentIndex,"");
        i += 2;
        var $tmp20 = ConstVal;
        if ($tmp20 === pas.CompilerTypes.TInterruptCode.DLI) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda VDSLST","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda VDSLST+1","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp20 === pas.CompilerTypes.TInterruptCode.VBLI) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda VVBLKI","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda VVBLKI+1","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp20 === pas.CompilerTypes.TInterruptCode.VBLD) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda VVBLKD","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda VVBLKD+1","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp20 === pas.CompilerTypes.TInterruptCode.TIM1) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda VTIMR1","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda VTIMR1+1","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp20 === pas.CompilerTypes.TInterruptCode.TIM2) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda VTIMR2","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda VTIMR2+1","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        } else if ($tmp20 === pas.CompilerTypes.TInterruptCode.TIM4) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tlda VTIMR4","");
          pas.Optimize.asm65("\tsta " + svar,"");
          pas.Optimize.asm65("\tlda VTIMR4+1","");
          pas.Optimize.asm65("\tsta " + svar + "+1","");
        };
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
        Result = rtl.rc(i + 1,-2147483648,2147483647);
      } else if ($tmp === pas.Tokens.TTokenKind.SETINTVECTOK) {
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
        i = rtl.rc(pas.Parser.CompileConstExpression(i + 2,{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ActualParamType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ActualParamType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
        pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.INTEGERTOK,ActualParamType);
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
        $impl.StartOptimization(i + 1);
        if (!(rtl.rc(ConstVal,0,255) in rtl.createSet(null,0,4))) pas.Messages.Error(i,"Interrupt Number in [0..4]");
        i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
            return ActualParamType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ActualParamType = v;
          }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
        pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.POINTERTOK,ActualParamType);
        var $tmp21 = ConstVal;
        if ($tmp21 === pas.CompilerTypes.TInterruptCode.DLI) {
          pas.Optimize.asm65("\tmva :STACKORIGIN,x VDSLST","");
          pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VDSLST+1","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else if ($tmp21 === pas.CompilerTypes.TInterruptCode.VBLI) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tldy #5","");
          pas.Optimize.asm65("\tsta wsync","");
          pas.Optimize.asm65("\tdey","");
          pas.Optimize.asm65("\trne","");
          pas.Optimize.asm65("\tsta VVBLKI","");
          pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsty VVBLKI+1","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else if ($tmp21 === pas.CompilerTypes.TInterruptCode.VBLD) {
          pas.Optimize.asm65("\tlda :STACKORIGIN,x","");
          pas.Optimize.asm65("\tldy #5","");
          pas.Optimize.asm65("\tsta wsync","");
          pas.Optimize.asm65("\tdey","");
          pas.Optimize.asm65("\trne","");
          pas.Optimize.asm65("\tsta VVBLKD","");
          pas.Optimize.asm65("\tldy :STACKORIGIN+STACKWIDTH,x","");
          pas.Optimize.asm65("\tsty VVBLKD+1","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
        } else if ($tmp21 === pas.CompilerTypes.TInterruptCode.TIM1) {
          pas.Optimize.asm65("\tsei","");
          pas.Optimize.asm65("\tmva :STACKORIGIN,x VTIMR1","");
          pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VTIMR1+1","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
            i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.BYTETOK,ActualParamType);
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tldy #$03","");
            pas.Optimize.asm65("\tsta AUDCTL","");
            pas.Optimize.asm65("\tsta AUDC1","");
            pas.Optimize.asm65("\tsty SKCTL","");
            pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDCTL","");
            $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
            i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.BYTETOK,ActualParamType);
            pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDF1","");
            $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Optimize.asm65("\tlda irqens","");
            pas.Optimize.asm65("\tora #$01","");
            pas.Optimize.asm65("\tsta irqens","");
            pas.Optimize.asm65("\tsta irqen","");
            pas.Optimize.asm65("\tsta stimer","");
          } else {
            pas.Optimize.asm65("\tlda irqens","");
            pas.Optimize.asm65("\tand #$fe","");
            pas.Optimize.asm65("\tsta irqens","");
            pas.Optimize.asm65("\tsta irqen","");
          };
          pas.Optimize.asm65("\tcli","");
        } else if ($tmp21 === pas.CompilerTypes.TInterruptCode.TIM2) {
          pas.Optimize.asm65("\tsei","");
          pas.Optimize.asm65("\tmva :STACKORIGIN,x VTIMR2","");
          pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VTIMR2+1","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
            i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.BYTETOK,ActualParamType);
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tldy #$03","");
            pas.Optimize.asm65("\tsta AUDCTL","");
            pas.Optimize.asm65("\tsta AUDC2","");
            pas.Optimize.asm65("\tsty SKCTL","");
            pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDCTL","");
            $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
            i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.BYTETOK,ActualParamType);
            pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDF2","");
            $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Optimize.asm65("\tlda irqens","");
            pas.Optimize.asm65("\tora #$02","");
            pas.Optimize.asm65("\tsta irqens","");
            pas.Optimize.asm65("\tsta irqen","");
            pas.Optimize.asm65("\tsta stimer","");
          } else {
            pas.Optimize.asm65("\tlda irqens","");
            pas.Optimize.asm65("\tand #$fd","");
            pas.Optimize.asm65("\tsta irqens","");
            pas.Optimize.asm65("\tsta irqen","");
          };
          pas.Optimize.asm65("\tcli","");
        } else if ($tmp21 === pas.CompilerTypes.TInterruptCode.TIM4) {
          pas.Optimize.asm65("\tsei","");
          pas.Optimize.asm65("\tmva :STACKORIGIN,x VTIMR4","");
          pas.Optimize.asm65("\tmva :STACKORIGIN+STACKWIDTH,x VTIMR4+1","");
          $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) {
            i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.BYTETOK,ActualParamType);
            pas.Optimize.asm65("\tlda #$00","");
            pas.Optimize.asm65("\tldy #$03","");
            pas.Optimize.asm65("\tsta AUDCTL","");
            pas.Optimize.asm65("\tsta AUDC4","");
            pas.Optimize.asm65("\tsty SKCTL","");
            pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDCTL","");
            $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.COMMATOK);
            i = rtl.rc($impl.CompileExpression(i + 2,{get: function () {
                return ActualParamType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                ActualParamType = v;
              }},pas.Tokens.TTokenKind.INTEGERTOK),-2147483648,2147483647);
            pas.Common.GetCommonType(i,pas.Tokens.TTokenKind.BYTETOK,ActualParamType);
            pas.Optimize.asm65("\tmva :STACKORIGIN,x AUDF4","");
            $impl.a65(pas.CompilerTypes.TCode65.subBX,0,pas.Tokens.TTokenKind.CONSTTOK,4,0);
            pas.Optimize.asm65("\tlda irqens","");
            pas.Optimize.asm65("\tora #$04","");
            pas.Optimize.asm65("\tsta irqens","");
            pas.Optimize.asm65("\tsta irqen","");
            pas.Optimize.asm65("\tsta stimer","");
          } else {
            pas.Optimize.asm65("\tlda irqens","");
            pas.Optimize.asm65("\tand #$fb","");
            pas.Optimize.asm65("\tsta irqens","");
            pas.Optimize.asm65("\tsta irqen","");
          };
          pas.Optimize.asm65("\tcli","");
        };
        $impl.StopOptimization();
        pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
        Result = rtl.rc(i + 1,-2147483648,2147483647);
      } else {
        Result = rtl.rc(i - 1,-2147483648,2147483647);
      };
      return Result;
    };
    var reg = [":EDX",":ECX",":EAX"];
    $impl.GenerateProcFuncAsmLabels = function (BlockIdentIndex, VarSize) {
      rtl.rc(BlockIdentIndex,-2147483648,2147483647);
      var IdentIndex = 0;
      var size = 0;
      var emptyLine = false;
      var yes = false;
      var fnam = "";
      var txt = "";
      var svar = "";
      var varbegin = "";
      var HeaFile = null;
      function Value(dorig, brackets) {
        var Result = "";
        var v = 0;
        v = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,-9007199254740991,9007199254740991);
        var $tmp = pas.Common.IdentifierAt(IdentIndex).DataType;
        if (($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) || ($tmp === pas.Tokens.TTokenKind.REALTOK)) {
          v = rtl.rc(pas.Numbers.CastToReal(v),-9007199254740991,9007199254740991)}
         else if ($tmp === pas.Tokens.TTokenKind.SINGLETOK) {
          v = rtl.rc(pas.Numbers.CastToSingle(v),-9007199254740991,9007199254740991)}
         else if ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK) {
          v = rtl.rc(pas.Numbers.CastToHalfSingle(v),-9007199254740991,9007199254740991)}
         else {
          v = rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,-9007199254740991,9007199254740991);
        };
        if (dorig) {
          if (brackets) {
            Result = "\t= [DATAORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).Value - 32768,4) + "]"}
           else Result = "\t= DATAORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).Value - 32768,4);
        } else if (pas.Common.IdentifierAt(IdentIndex).isAbsolute && (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.VARTOK) && ((Math.abs(pas.Common.IdentifierAt(IdentIndex).Value) & 0xff) === 0) && (rtl.rc((Math.abs(pas.Common.IdentifierAt(IdentIndex).Value) >>> 24) & 0x7f,0,255) in rtl.createSet(null,1,127))) {
          var $tmp1 = rtl.rc(Math.abs(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 16777216)) & 0x7f,0,255);
          if (($tmp1 >= 1) && ($tmp1 <= 3)) {
            Result = "\t= " + rtl.rcArrR(reg,(Math.abs(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 16777216)) & 0x7f) - 1)}
           else if (($tmp1 >= 4) && ($tmp1 <= 19)) {
            Result = "\t= :STACKORIGIN-" + pas.StringUtilities.IntToStr(rtl.rc(Math.abs(Math.floor(pas.Common.IdentifierAt(IdentIndex).Value / 16777216)) & 0x7f,0,255) - 3)}
           else {
            Result = "\t= 'out of resource'";
          };
          size = 0;
        } else if (pas.Common.IdentifierAt(IdentIndex).isExternal) {
          Result = "\t= " + pas.Common.IdentifierAt(IdentIndex).Alias;
        } else if (pas.Common.IdentifierAt(IdentIndex).isAbsolute) {
          if (pas.Common.IdentifierAt(IdentIndex).Value < 0) {
            Result = "\t= DATAORIGIN+$" + pas.SysUtils.IntToHex(Math.abs(pas.Common.IdentifierAt(IdentIndex).Value),4)}
           else if (Math.abs(pas.Common.IdentifierAt(IdentIndex).Value) < 256) {
            Result = "\t= $" + pas.SysUtils.IntToHex(rtl.rc(pas.Common.IdentifierAt(IdentIndex).Value,0,255),2)}
           else Result = "\t= $" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).Value,4);
        } else if (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0) {
          Result = "\t= CODEORIGIN+$" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentIndex).Value - pas.Common.CODEORIGIN_BASE - 256,4)}
         else if (Math.abs(v) < 256) {
          Result = "\t= $" + pas.SysUtils.IntToHex(rtl.rc(v,0,255),2)}
         else Result = "\t= $" + pas.SysUtils.IntToHex(v,4);
        return Result;
      };
      function mads_data_size() {
        var Result = "";
        Result = "";
        if (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(null,pas.Tokens.TTokenKind.BYTETOK,pas.Tokens.TTokenKind.FORWARDTYPE)) {
          var $tmp = pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType);
          if ($tmp === 2) {
            Result = " .word"}
           else if ($tmp === 4) Result = " .dword";
        } else Result = " ; type unknown";
        return Result;
      };
      function SetBank() {
        var Result = false;
        var i = 0;
        var IdentTemp = 0;
        var hnam = "";
        var rnam = "";
        Result = false;
        hnam = pas.Utilities.AnsiUpperCase(pas.SysUtils.ExtractFileName(fnam));
        hnam = pas.SysUtils.ChangeFileExt(hnam,"");
        for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
          i = $l;
          rnam = pas.Utilities.AnsiUpperCase(pas.SysUtils.ExtractFileName(rtl.rcArrR(pas.Common.resArray,i).resFile));
          rnam = pas.SysUtils.ChangeFileExt(rnam,"");
          if (hnam === rnam) {
            IdentTemp = rtl.rc(pas.Parser.GetIdentIndex(rtl.rcArrR(pas.Common.resArray,i).resName),-2147483648,2147483647);
            if (IdentTemp > 0) {
              pas.Optimize.asm65("","");
              pas.Optimize.asm65("\tlmb #$" + pas.SysUtils.IntToHex(pas.Common.IdentifierAt(IdentTemp).Value + 1,2),"");
              pas.Optimize.asm65("","");
              Result = true;
              return true;
            };
          };
        };
        return Result;
      };
      function GetIdentifierDataSize(identifier) {
        var Result = 0;
        var dataSize = 0;
        dataSize = rtl.rc(pas.Datatypes.GetDataSize(identifier.AllocElementType),0,255);
        Result = rtl.rc(identifier.NumAllocElements * dataSize,-2147483648,2147483647);
        return Result;
      };
      function IncSize(bytes) {
        rtl.rc(bytes,-2147483648,2147483647);
        size += bytes;
      };
      try {
        if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
          $impl.StopOptimization();
          emptyLine = true;
          size = 0;
          varbegin = "";
          for (var $l = 1, $end = pas.Common.NumIdent(); $l <= $end; $l++) {
            IdentIndex = $l;
            if ((pas.Common.IdentifierAt(IdentIndex).Block === pas.Common.IdentifierAt(BlockIdentIndex).ProcAsBlock) && (pas.Common.IdentifierAt(IdentIndex).SourceFile.UnitIndex === pas.Common.ActiveSourceFile.UnitIndex)) {
              if (emptyLine) {
                $impl.asm65separator(true);
                pas.Optimize.asm65("","");
                emptyLine = false;
              };
              if (pas.Common.IdentifierAt(IdentIndex).isExternal && (pas.Common.IdentifierAt(IdentIndex).Libraries > 0)) {
                fnam = rtl.rcArrR(pas.Common.LinkObj,pas.Common.TokenAt(pas.Common.IdentifierAt(IdentIndex).Libraries).Value);
                if (pas.Common.RCLIBRARY) if (SetBank() === false) pas.Messages.Error(pas.Common.IdentifierAt(IdentIndex).Libraries,"Error: Bank identifier missing.");
                if (pas.SysUtils.ExtractFileExt(fnam) === "") fnam = pas.SysUtils.ChangeFileExt(fnam,".hea");
                fnam = pas.Common.FindFile(fnam,"header");
                if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
                  svar = pas.Common.IdentifierAt(IdentIndex).Alias + "." + $impl.GetOverloadName(IdentIndex)}
                 else svar = pas.Common.IdentifierAt(IdentIndex).Alias;
                yes = true;
                HeaFile = rtl.setIntfL(HeaFile,pas.FileIO.TFileSystem.CreateTextFile(),true);
                HeaFile.Assign(fnam);
                HeaFile.Reset();
                txt = "";
                while (!HeaFile.EOF()) {
                  HeaFile.ReadLn({get: function () {
                      return txt;
                    }, set: function (v) {
                      txt = v;
                    }});
                  txt = pas.Utilities.AnsiUpperCase(txt);
                  if ((txt.length > 255) || (pas.System.Pos("\x00",txt) > 0)) {
                    HeaFile.Close();
                    pas.Messages.Error(pas.Common.IdentifierAt(IdentIndex).Libraries,"Error: MADS header file '" + fnam + "' has invalid format.");
                  };
                  if ((pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                      return txt;
                    }, set: function (v) {
                      txt = v;
                    }},".@EXIT") < 0) && (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                      return txt;
                    }, set: function (v) {
                      txt = v;
                    }},".@VARDATA") < 0)) if ((pas.System.Pos("MAIN." + svar + " ",txt) === 1) || (pas.System.Pos("MAIN." + svar + "\t",txt) === 1) || (pas.System.Pos("MAIN." + svar + ".",txt) === 1)) {
                    yes = false;
                    pas.Optimize.asm65(pas.Common.IdentifierAt(IdentIndex).Name + pas.System.Copy(txt,6 + pas.Common.IdentifierAt(IdentIndex).Alias.length,txt.length),"");
                  };
                };
                if (yes) pas.Messages.ErrorForIdentifier(pas.Common.IdentifierAt(IdentIndex).Libraries,pas.Messages.TErrorCode.UnknownIdentifier,IdentIndex);
                HeaFile.Close();
                if (pas.Common.RCLIBRARY) {
                  pas.Optimize.asm65("","");
                  pas.Optimize.asm65("\trmb","");
                  pas.Optimize.asm65("","");
                };
              } else {
                var $tmp = pas.Common.IdentifierAt(IdentIndex).Kind;
                if ($tmp === pas.Tokens.TTokenKind.VARTOK) {
                  if (pas.Common.IdentifierAt(IdentIndex).isAbsolute) {
                    if ((pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers)) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) {
                      pas.Optimize.asm65("adr." + pas.Common.IdentifierAt(IdentIndex).Name + Value(false,false),"");
                      pas.Optimize.asm65(".var " + pas.Common.IdentifierAt(IdentIndex).Name + "\t= adr." + pas.Common.IdentifierAt(IdentIndex).Name + " .word","");
                      if (size === 0) varbegin = pas.Common.IdentifierAt(IdentIndex).Name;
                      IncSize(pas.Common.IdentifierAt(IdentIndex).NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType));
                    } else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.FILETOK) {
                      pas.Optimize.asm65(".var " + pas.Common.IdentifierAt(IdentIndex).Name + Value(false,false) + " .word","")}
                     else if (pas.System.Pos("@FORTMP_",pas.Common.IdentifierAt(IdentIndex).Name) === 0) pas.Optimize.asm65(pas.Common.IdentifierAt(IdentIndex).Name + Value(false,false),"");
                  } else if ((pas.Common.IdentifierAt(IdentIndex).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers)) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) {
                    if (((pas.Common.IdentifierAt(IdentIndex).IdType !== pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) || (pas.Common.IdentifierAt(IdentIndex).IdType === pas.Tokens.TTokenKind.DATAORIGINOFFSET)) {
                      pas.Optimize.asm65(pas.Common.IdentifierAt(IdentIndex).Name + Value(true,false),"")}
                     else {
                      if (pas.Common.IdentifierAt(IdentIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                        pas.Optimize.asm65("adr." + pas.Common.IdentifierAt(IdentIndex).Name + Value(true,false) + "\t; [" + pas.StringUtilities.IntToStr(pas.Parser.RecordSize(IdentIndex,"")) + "] " + pas.Tokens.InfoAboutToken(pas.Common.IdentifierAt(IdentIndex).DataType),"")}
                       else if (pas.Parser.Elements(IdentIndex) > 0) {
                        if ((pas.Common.IdentifierAt(IdentIndex).NumAllocElements_ > 0) && !(pas.Common.IdentifierAt(IdentIndex).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
                          pas.Optimize.asm65("adr." + pas.Common.IdentifierAt(IdentIndex).Name + Value(true,true) + " .array [" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements) + "] [" + pas.StringUtilities.IntToStr(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_) + "]" + mads_data_size(),"")}
                         else pas.Optimize.asm65("adr." + pas.Common.IdentifierAt(IdentIndex).Name + Value(true,true) + " .array [" + pas.StringUtilities.IntToStr(pas.Parser.Elements(IdentIndex)) + "]" + mads_data_size(),"");
                      } else pas.Optimize.asm65("adr." + pas.Common.IdentifierAt(IdentIndex).Name + Value(true,false),"");
                      pas.Optimize.asm65(".var " + pas.Common.IdentifierAt(IdentIndex).Name + "\t= adr." + pas.Common.IdentifierAt(IdentIndex).Name + " .word","");
                    };
                    if (size === 0) varbegin = pas.Common.IdentifierAt(IdentIndex).Name;
                    IncSize(GetIdentifierDataSize(pas.Common.IdentifierAt(IdentIndex)));
                  } else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.FILETOK) {
                    pas.Optimize.asm65(".var " + pas.Common.IdentifierAt(IdentIndex).Name + Value(true,false) + " .word","")}
                   else {
                    pas.Optimize.asm65(pas.Common.IdentifierAt(IdentIndex).Name + Value(true,false),"");
                    if (size === 0) varbegin = pas.Common.IdentifierAt(IdentIndex).Name;
                    if (pas.Common.IdentifierAt(IdentIndex).IdType !== pas.Tokens.TTokenKind.DATAORIGINOFFSET) if ((pas.Common.IdentifierAt(IdentIndex).Name === "RESULT") && (pas.Common.IdentifierAt(BlockIdentIndex).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK)) {}
                    else if (pas.Common.IdentifierAt(IdentIndex).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
                      IncSize(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).AllocElementType))}
                     else IncSize(pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(IdentIndex).DataType));
                  }}
                 else if ($tmp === pas.Tokens.TTokenKind.CONSTTOK) if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) {
                  pas.Optimize.asm65("adr." + pas.Common.IdentifierAt(IdentIndex).Name + Value(false,false),"");
                  pas.Optimize.asm65(".var " + pas.Common.IdentifierAt(IdentIndex).Name + "\t= adr." + pas.Common.IdentifierAt(IdentIndex).Name + " .word","");
                } else if (pas.System.Pos("@FORTMP_",pas.Common.IdentifierAt(IdentIndex).Name) === 0) pas.Optimize.asm65(pas.Common.IdentifierAt(IdentIndex).Name + Value(false,false),"");
              };
            };
          };
          if (rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop) !== 1) {
            pas.Optimize.asm65("","");
            if (pas.Common.LIBRARY_USE) pas.Optimize.asm65("@InitLibrary\t= :START","");
            if (VarSize && (size > 0)) {
              pas.Optimize.asm65("@VarData\t= " + varbegin,"");
              pas.Optimize.asm65("@VarDataSize\t= " + pas.StringUtilities.IntToStr(size),"");
              pas.Optimize.asm65("","");
            };
          };
        };
      } finally {
        rtl._Release(HeaFile);
      };
    };
    $impl.SaveToStaticDataSegment = function (ConstDataSize, ConstVal, ConstValType) {
      rtl.rc(ConstDataSize,-2147483648,2147483647);
      rtl.rc(ConstVal,-9007199254740991,9007199254740991);
      rtl.rc(ConstValType,0,191);
      if ((ConstDataSize < 0) || (ConstDataSize > 0xFFFF)) {
        pas.System.Writeln("SaveToStaticDataSegment: " + pas.StringUtilities.IntToStr(ConstDataSize));
        pas.Utilities.RaiseHaltException(pas.Utilities.THaltException.COMPILING_ABORTED);
      };
      var $tmp = ConstValType;
      if (($tmp === pas.Tokens.TTokenKind.SHORTINTTOK) || ($tmp === pas.Tokens.TTokenKind.BYTETOK) || ($tmp === pas.Tokens.TTokenKind.CHARTOK) || ($tmp === pas.Tokens.TTokenKind.BOOLEANTOK)) {
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255))}
       else if (($tmp === pas.Tokens.TTokenKind.SMALLINTTOK) || ($tmp === pas.Tokens.TTokenKind.WORDTOK) || ($tmp === pas.Tokens.TTokenKind.SHORTREALTOK) || ($tmp === pas.Tokens.TTokenKind.POINTERTOK) || ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK) || ($tmp === pas.Tokens.TTokenKind.PCHARTOK)) {
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 1,rtl.rc(Math.floor(ConstVal / 256),0,255));
      } else if ($tmp === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255) | 0x8000);
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 1,rtl.rc(Math.floor(ConstVal / 256),0,255) | 0x4000);
      } else if ($tmp === pas.Tokens.TTokenKind.CODEORIGINOFFSET) {
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255) | 0x2000);
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 1,rtl.rc(Math.floor(ConstVal / 256),0,255) | 0x1000);
      } else if (($tmp === pas.Tokens.TTokenKind.INTEGERTOK) || ($tmp === pas.Tokens.TTokenKind.CARDINALTOK) || ($tmp === pas.Tokens.TTokenKind.REALTOK)) {
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 1,rtl.rc(Math.floor(ConstVal / 256),0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 2,rtl.rc(Math.floor(ConstVal / 65536),0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 3,rtl.rc(Math.floor(ConstVal / 16777216),0,255));
      } else if ($tmp === pas.Tokens.TTokenKind.SINGLETOK) {
        ConstVal = rtl.rc(pas.Numbers.CastToSingle(ConstVal),-9007199254740991,9007199254740991);
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 1,rtl.rc(Math.floor(ConstVal / 256),0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 2,rtl.rc(Math.floor(ConstVal / 65536),0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 3,rtl.rc(Math.floor(ConstVal / 16777216),0,255));
      } else if ($tmp === pas.Tokens.TTokenKind.HALFSINGLETOK) {
        ConstVal = rtl.rc(pas.Numbers.CastToHalfSingle(ConstVal),-9007199254740991,9007199254740991);
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize,rtl.rc(ConstVal,0,255));
        rtl.rcArrW(pas.Common.StaticStringData,ConstDataSize + 1,rtl.rc(Math.floor(ConstVal / 256),0,255));
      };
    };
    $impl.ReadDataArray = function (i, ConstDataSize, ConstValType, NumAllocElements, StaticData, Add) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ConstDataSize,-2147483648,2147483647);
      rtl.rc(ConstValType,0,191);
      rtl.rc(NumAllocElements,0,4294967295);
      var Result = 0;
      var ActualParamType = 0;
      var ch = 0;
      var NumActualParams = 0;
      var NumActualParams_ = 0;
      var NumAllocElements_ = 0;
      var ConstVal = 0;
      function SaveDataSegment(DataType) {
        rtl.rc(DataType,0,191);
        if (StaticData) {
          $impl.SaveToStaticDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType)}
         else pas.Parser.SaveToDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType);
        if (DataType === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
          ConstDataSize += pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK)}
         else ConstDataSize += pas.Datatypes.GetDataSize(DataType);
      };
      function SaveData(compile) {
        if (compile) i = rtl.rc(pas.Parser.CompileConstExpression(i + 1,{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ActualParamType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ActualParamType = v;
          }},ConstValType,false,true),-2147483648,2147483647);
        if ((ConstValType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (ActualParamType === pas.Tokens.TTokenKind.CHARTOK)) {
          if (StaticData) pas.Messages.Error(i,"Memory overlap due conversion CHAR to STRING, use VAR instead CONST");
          ch = rtl.rc(pas.Common.TokenAt(i).Value,0,255);
          pas.Common.DefineStaticString(i,String.fromCharCode(ch));
          ConstVal = rtl.rc((pas.Common.TokenAt(i).StrAddress - 256) + pas.Common.CODEORIGIN_BASE,-9007199254740991,9007199254740991);
          pas.Common.TokenAt(i).Value = rtl.rc(ch,-2147483648,2147483647);
          ActualParamType = rtl.rc(pas.Tokens.TTokenKind.STRINGPOINTERTOK,0,191);
        };
        if ((ConstValType in rtl.unionSet(pas.Datatypes.StringTypes,rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK))) && (ActualParamType in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression);
        if ((ConstValType in rtl.unionSet(pas.Datatypes.StringTypes,rtl.createSet(pas.Tokens.TTokenKind.STRINGPOINTERTOK))) && (ActualParamType === pas.Tokens.TTokenKind.CHARTOK)) pas.Messages.ErrorIncompatibleTypes(i,ActualParamType,ConstValType,false);
        if ((ConstValType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (ActualParamType === pas.Tokens.TTokenKind.REALTOK)) ActualParamType = rtl.rc(ConstValType,0,191);
        if ((ConstValType in pas.Datatypes.RealTypes) && (ActualParamType in pas.Datatypes.IntegerTypes)) {
          ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
          ActualParamType = rtl.rc(ConstValType,0,191);
        };
        if ((ConstValType === pas.Tokens.TTokenKind.SHORTREALTOK) && (ActualParamType === pas.Tokens.TTokenKind.REALTOK)) ActualParamType = rtl.rc(pas.Tokens.TTokenKind.SHORTREALTOK,0,191);
        if (ActualParamType === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
          SaveDataSegment(pas.Tokens.TTokenKind.DATAORIGINOFFSET)}
         else {
          if (ConstValType in pas.Datatypes.IntegerTypes) {
            if (pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,ActualParamType in rtl.unionSet(pas.Datatypes.RealTypes,pas.Datatypes.Pointers))) pas.Messages.WarningForRangeCheckError(i,ConstVal,ConstValType);
          } else pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,true);
          SaveDataSegment(ConstValType);
        };
      };
      function DoEvaluate(evaluationContext) {
        var Result = 0;
        var s = "";
        var par1 = 0;
        var par2 = 0;
        var p1 = 0;
        var p2 = 0;
        var k = 0;
        function GetParameter() {
          var Result = 0;
          var tmp = "";
          var err = 0;
          var constantValue = 0;
          Result = 0;
          tmp = pas.StringUtilities.GetNumber(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (tmp !== "") {
            pas.System.val$6(tmp,{get: function () {
                return Result;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                Result = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                err = v;
              }});
            if (err > 0) pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
            if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
            return Result;
          };
          tmp = evaluationContext.GetConstantName(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (tmp !== "") {
            constantValue = 0;
            if (evaluationContext.GetConstantValue(tmp,{get: function () {
                return constantValue;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                constantValue = v;
              }})) {
              Result = rtl.rc(constantValue,-2147483648,2147483647)}
             else pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
            if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
            return Result;
          };
          pas.Messages.Error(i,"Identifier or number expected but '" + rtl.rcCharAt(s,k - 1) + "' found");
          return Result;
        };
        function doEvaluations(_0, _1) {
          rtl.rc(_0,-2147483648,2147483647);
          rtl.rc(_1,-2147483648,2147483647);
          var p = 0;
          var _s = "";
          var fl = 0.0;
          _s = s;
          if (_0 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":1") >= 0) {
            p = rtl.rc(pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},":1"),-2147483648,2147483647);
            pas.System.Delete({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1,2);
            pas.System.Insert(pas.StringUtilities.IntToStr(_0),{get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1);
          };
          if (_1 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":2") >= 0) {
            p = rtl.rc(pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},":2"),-2147483648,2147483647);
            pas.System.Delete({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1,2);
            pas.System.Insert(pas.StringUtilities.IntToStr(_1),{get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1);
          };
          try {
            fl = pas.MathEvaluate.Evaluate(_s,evaluationContext);
          } catch ($e) {
            if (pas.MathEvaluate.EEValuationException.isPrototypeOf($e)) {
              var e = $e;
              pas.Messages.Error(i,"Evaluation error at position " + pas.StringUtilities.IntToStr(e._index) + " of expression '" + e._expression + "'. " + e.fMessage);
            } else throw $e
          };
          ConstVal = rtl.rc(pas.Numbers.Assign(ConstValType,fl),-9007199254740991,9007199254740991);
          SaveData(false);
        };
        Result = 0;
        par1 = rtl.rc(-1,-2147483648,2147483647);
        par2 = rtl.rc(-1,-2147483648,2147483647);
        s = rtl.rcArrR(pas.Common.LinkObj,pas.Common.TokenAt(i + 1).Value);
        if (s !== "") {
          k = 1;
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (rtl.rcCharAt(s,k - 1) !== '"') {
            par1 = rtl.rc(GetParameter(),-2147483648,2147483647);
            pas.StringUtilities.SkipWhitespaces(s,{get: function () {
                return k;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                k = v;
              }});
            if (rtl.rcCharAt(s,k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + rtl.rcCharAt(s,k - 1) + "' found");
            k += 1;
          };
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (rtl.rcCharAt(s,k - 1) !== '"') {
            par2 = rtl.rc(GetParameter(),-2147483648,2147483647);
            pas.StringUtilities.SkipWhitespaces(s,{get: function () {
                return k;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                k = v;
              }});
            if (rtl.rcCharAt(s,k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + rtl.rcCharAt(s,k - 1) + "' found");
            k += 1;
          };
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (rtl.rcCharAt(s,k - 1) !== '"') pas.Messages.Error(i,'Syntax error, \'"\' expected but \'' + rtl.rcCharAt(s,k - 1) + "' found");
          s = pas.StringUtilities.GetStringUpperCase(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          ActualParamType = rtl.rc(ConstValType,0,191);
          if (par1 > 0) if (par2 > 0) {
            for (var $l = 0, $end = par2 - 1; $l <= $end; $l++) {
              p2 = $l;
              for (var $l1 = 0, $end1 = par1 - 1; $l1 <= $end1; $l1++) {
                p1 = $l1;
                doEvaluations(p1,p2);
              };
            };
            Result = rtl.rc(par1 * par2,-2147483648,2147483647);
          } else {
            for (var $l2 = 0, $end2 = par1 - 1; $l2 <= $end2; $l2++) {
              p1 = $l2;
              doEvaluations(p1,-1);
            };
            Result = rtl.rc(par1,-2147483648,2147483647);
          };
        };
        i += 1;
        return Result;
      };
      pas.Common.CheckTok(i,pas.Tokens.TTokenKind.OPARTOK);
      NumActualParams = 0;
      NumActualParams_ = 0;
      NumAllocElements_ = rtl.rc(rtl.lw(NumAllocElements >>> 16),0,4294967295);
      NumAllocElements = rtl.rc(NumAllocElements & 0xffff,0,4294967295);
      do {
        NumActualParams += 1;
        if (NumAllocElements_ > 0) {
          NumActualParams_ = 0;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.OPARTOK);
          i += 1;
          do {
            NumActualParams_ += 1;
            if (NumActualParams_ > NumAllocElements_) break;
            SaveData(true);
            i += 1;
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
        } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.EVALTOK) {
          NumActualParams = rtl.rc(DoEvaluate($impl.evaluationContext),0,4294967295)}
         else SaveData(true);
        i += 1;
      } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
      pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CPARTOK);
      if (NumActualParams > NumAllocElements) pas.Messages.Error(i,"Number of elements (" + pas.StringUtilities.IntToStr(NumActualParams) + ") differs from declaration (" + pas.StringUtilities.IntToStr(NumAllocElements) + ")");
      if (NumActualParams < NumAllocElements) pas.Messages.Error(i,"Expected another " + pas.StringUtilities.IntToStr(NumAllocElements - NumActualParams) + " array elements");
      if (NumActualParams_ < NumAllocElements_) pas.Messages.Error(i,"Expected another " + pas.StringUtilities.IntToStr(NumAllocElements_ - NumActualParams_) + " array elements");
      Result = rtl.rc(i,-2147483648,2147483647);
      return Result;
    };
    $impl.ReadDataOpenArray = function (i, ConstDataSize, ConstValType, NumAllocElements, StaticData, Add) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(ConstDataSize,-2147483648,2147483647);
      rtl.rc(ConstValType,0,191);
      rtl.rc(NumAllocElements.get(),0,4294967295);
      var Result = 0;
      var ActualParamType = 0;
      var ch = 0;
      var NumActualParams = 0;
      var ConstVal = 0;
      function SaveDataSegment(DataType) {
        rtl.rc(DataType,0,191);
        if (StaticData) {
          $impl.SaveToStaticDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType)}
         else pas.Parser.SaveToDataSegment(ConstDataSize,ConstVal + (Add + 0),DataType);
        if (DataType === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
          ConstDataSize += pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK)}
         else ConstDataSize += pas.Datatypes.GetDataSize(DataType);
      };
      function SaveData(compile) {
        if (compile) i = rtl.rc(pas.Parser.CompileConstExpression(i + 1,{get: function () {
            return ConstVal;
          }, set: function (v) {
            rtl.rc(v,-9007199254740991,9007199254740991);
            ConstVal = v;
          }},{get: function () {
            return ActualParamType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            ActualParamType = v;
          }},ConstValType,false,true),-2147483648,2147483647);
        if ((ConstValType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (ActualParamType === pas.Tokens.TTokenKind.CHARTOK)) {
          if (StaticData) pas.Messages.Error(i,"Memory overlap due conversion CHAR to STRING, use VAR instead CONST");
          ch = rtl.rc(pas.Common.TokenAt(i).Value,0,255);
          pas.Common.DefineStaticString(i,String.fromCharCode(ch));
          ConstVal = rtl.rc((pas.Common.TokenAt(i).StrAddress - 256) + pas.Common.CODEORIGIN_BASE,-9007199254740991,9007199254740991);
          pas.Common.TokenAt(i).Value = rtl.rc(ch,-2147483648,2147483647);
          ActualParamType = rtl.rc(pas.Tokens.TTokenKind.STRINGPOINTERTOK,0,191);
        };
        if ((ConstValType in rtl.unionSet(pas.Datatypes.StringTypes,rtl.createSet(pas.Tokens.TTokenKind.CHARTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK))) && (ActualParamType in rtl.unionSet(pas.Datatypes.IntegerTypes,pas.Datatypes.RealTypes))) pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression);
        if ((ConstValType in rtl.unionSet(pas.Datatypes.StringTypes,rtl.createSet(pas.Tokens.TTokenKind.STRINGPOINTERTOK))) && (ActualParamType === pas.Tokens.TTokenKind.CHARTOK)) pas.Messages.ErrorIncompatibleTypes(i,ActualParamType,ConstValType,false);
        if ((ConstValType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (ActualParamType === pas.Tokens.TTokenKind.REALTOK)) ActualParamType = rtl.rc(ConstValType,0,191);
        if ((ConstValType in pas.Datatypes.RealTypes) && (ActualParamType in pas.Datatypes.IntegerTypes)) {
          ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
          ActualParamType = rtl.rc(ConstValType,0,191);
        };
        if ((ConstValType === pas.Tokens.TTokenKind.SHORTREALTOK) && (ActualParamType === pas.Tokens.TTokenKind.REALTOK)) ActualParamType = rtl.rc(pas.Tokens.TTokenKind.SHORTREALTOK,0,191);
        if (ActualParamType === pas.Tokens.TTokenKind.DATAORIGINOFFSET) {
          SaveDataSegment(pas.Tokens.TTokenKind.DATAORIGINOFFSET)}
         else {
          if (ConstValType in pas.Datatypes.IntegerTypes) {
            if (pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,ActualParamType in rtl.unionSet(pas.Datatypes.RealTypes,pas.Datatypes.Pointers))) pas.Messages.WarningForRangeCheckError(i,ConstVal,ConstValType);
          } else pas.Common.GetCommonConstType(i,ConstValType,ActualParamType,true);
          SaveDataSegment(ConstValType);
        };
        NumActualParams += 1;
      };
      function DoEvaluate(evaluationContext) {
        var Result = 0;
        var s = "";
        var par1 = 0;
        var par2 = 0;
        var p1 = 0;
        var p2 = 0;
        var k = 0;
        function GetParameter() {
          var Result = 0;
          var tmp = "";
          var err = 0;
          var constantValue = 0;
          Result = 0;
          tmp = pas.StringUtilities.GetNumber(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (tmp !== "") {
            pas.System.val$6(tmp,{get: function () {
                return Result;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                Result = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                err = v;
              }});
            if (err > 0) pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
            if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
            return Result;
          };
          tmp = evaluationContext.GetConstantName(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (tmp !== "") {
            constantValue = 0;
            if (evaluationContext.GetConstantValue(tmp,{get: function () {
                return constantValue;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                constantValue = v;
              }})) {
              Result = rtl.rc(constantValue,-2147483648,2147483647)}
             else pas.Messages.Error(i,"Identifier or number expected but '" + tmp + "' found");
            if (Result < 0) pas.Messages.Error(i,"evaluation parameter is less than zero");
            return Result;
          };
          pas.Messages.Error(i,"Identifier or number expected but '" + rtl.rcCharAt(s,k - 1) + "' found");
          return Result;
        };
        function doEvaluations(_0, _1) {
          rtl.rc(_0,-2147483648,2147483647);
          rtl.rc(_1,-2147483648,2147483647);
          var p = 0;
          var _s = "";
          var fl = 0.0;
          _s = s;
          if (_0 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":1") >= 0) {
            p = rtl.rc(pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},":1"),-2147483648,2147483647);
            pas.System.Delete({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1,2);
            pas.System.Insert(pas.StringUtilities.IntToStr(_0),{get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1);
          };
          if (_1 >= 0) while (pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
              return _s;
            }, set: function (v) {
              _s = v;
            }},":2") >= 0) {
            p = rtl.rc(pas.SysUtils.TStringHelper.IndexOf$1.call({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},":2"),-2147483648,2147483647);
            pas.System.Delete({get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1,2);
            pas.System.Insert(pas.StringUtilities.IntToStr(_1),{get: function () {
                return _s;
              }, set: function (v) {
                _s = v;
              }},p + 1);
          };
          try {
            fl = pas.MathEvaluate.Evaluate(_s,evaluationContext);
          } catch ($e) {
            if (pas.MathEvaluate.EEValuationException.isPrototypeOf($e)) {
              var e = $e;
              pas.Messages.Error(i,"Evaluation error at position " + pas.StringUtilities.IntToStr(e._index) + " of expression '" + e._expression + "'. " + e.fMessage);
            } else throw $e
          };
          ConstVal = rtl.rc(pas.Numbers.Assign(ConstValType,fl),-9007199254740991,9007199254740991);
          SaveData(false);
        };
        Result = 0;
        par1 = rtl.rc(-1,-2147483648,2147483647);
        par2 = rtl.rc(-1,-2147483648,2147483647);
        s = rtl.rcArrR(pas.Common.LinkObj,pas.Common.TokenAt(i + 1).Value);
        if (s !== "") {
          k = 1;
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (rtl.rcCharAt(s,k - 1) !== '"') {
            par1 = rtl.rc(GetParameter(),-2147483648,2147483647);
            pas.StringUtilities.SkipWhitespaces(s,{get: function () {
                return k;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                k = v;
              }});
            if (rtl.rcCharAt(s,k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + rtl.rcCharAt(s,k - 1) + "' found");
            k += 1;
          };
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (rtl.rcCharAt(s,k - 1) !== '"') {
            par2 = rtl.rc(GetParameter(),-2147483648,2147483647);
            pas.StringUtilities.SkipWhitespaces(s,{get: function () {
                return k;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                k = v;
              }});
            if (rtl.rcCharAt(s,k - 1) !== ",") pas.Messages.Error(i,"Syntax error, ',' expected but '" + rtl.rcCharAt(s,k - 1) + "' found");
            k += 1;
          };
          pas.StringUtilities.SkipWhitespaces(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          if (rtl.rcCharAt(s,k - 1) !== '"') pas.Messages.Error(i,'Syntax error, \'"\' expected but \'' + rtl.rcCharAt(s,k - 1) + "' found");
          s = pas.StringUtilities.GetStringUpperCase(s,{get: function () {
              return k;
            }, set: function (v) {
              rtl.rc(v,-2147483648,2147483647);
              k = v;
            }});
          ActualParamType = rtl.rc(ConstValType,0,191);
          if (par1 > 0) if (par2 > 0) {
            for (var $l = 0, $end = par2 - 1; $l <= $end; $l++) {
              p2 = $l;
              for (var $l1 = 0, $end1 = par1 - 1; $l1 <= $end1; $l1++) {
                p1 = $l1;
                doEvaluations(p1,p2);
              };
            };
            Result = rtl.rc(par1 * par2,-2147483648,2147483647);
          } else {
            for (var $l2 = 0, $end2 = par1 - 1; $l2 <= $end2; $l2++) {
              p1 = $l2;
              doEvaluations(p1,-1);
            };
            Result = rtl.rc(par1,-2147483648,2147483647);
          };
        };
        i += 1;
        return Result;
      };
      pas.Common.CheckTok(i,pas.Tokens.TTokenKind.OBRACKETTOK);
      NumActualParams = 0;
      NumAllocElements.set(0);
      if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.CBRACKETTOK) {
        i += 1}
       else do {
        if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.EVALTOK) {
          DoEvaluate($impl.evaluationContext)}
         else SaveData(true);
        i += 1;
      } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
      pas.Common.CheckTok(i,pas.Tokens.TTokenKind.CBRACKETTOK);
      NumAllocElements.set(NumActualParams);
      Result = rtl.rc(i,-2147483648,2147483647);
      return Result;
    };
    $impl.GenerateLocal = function (BlockIdentIndex, IsFunction) {
      rtl.rc(BlockIdentIndex,-2147483648,2147483647);
      var info = "";
      if (IsFunction) {
        info = "; FUNCTION"}
       else info = "; PROCEDURE";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isAsm) info = info + " | ASSEMBLER";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isOverload) info = info + " | OVERLOAD";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isRegister) info = info + " | REGISTER";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isInterrupt) info = info + " | INTERRUPT";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isKeep) info = info + " | KEEP";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isPascal) info = info + " | PASCAL";
      if (pas.Common.IdentifierAt(BlockIdentIndex).isInline) info = info + " | INLINE";
      pas.Optimize.asm65("","");
      if (pas.Common.codealign.proc > 0) {
        pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.proc,4),"");
        pas.Optimize.asm65("","");
      };
      pas.Optimize.asm65(".local\t" + pas.Common.IdentifierAt(BlockIdentIndex).Name,info);
      if (pas.Common.IdentifierAt(BlockIdentIndex).isOverload) pas.Optimize.asm65(".local\t" + $impl.GetOverloadName(BlockIdentIndex),"");
      if (pas.Common.IdentifierAt(BlockIdentIndex).isInline) pas.Optimize.asm65("\r\n\t.MACRO m@INLINE","");
    };
    $impl.FormalParameterList = function (i, NumParams, Param, Status, IsNestedFunction, NestedFunctionResultType, NestedFunctionNumAllocElements, NestedFunctionAllocElementType) {
      rtl.rc(i.get(),-2147483648,2147483647);
      rtl.rc(NumParams.get(),-2147483648,2147483647);
      rtl.rc(Status.get(),0,65535);
      rtl.rc(NestedFunctionResultType.get(),0,191);
      rtl.rc(NestedFunctionNumAllocElements.get(),0,4294967295);
      rtl.rc(NestedFunctionAllocElementType.get(),0,191);
      var ListPassMethod = 0;
      var NumVarOfSameType = 0;
      var VarType = 0;
      var AllocElementType = 0;
      var NumAllocElements = 0;
      var VarOfSameTypeIndex = 0;
      var VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
      VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
      NumParams.set(0);
      if ((pas.Common.TokenAt(i.get() + 3).Kind === pas.Tokens.TTokenKind.CPARTOK) && (pas.Common.TokenAt(i.get() + 2).Kind === pas.Tokens.TTokenKind.OPARTOK)) {
        i.set(i.get() + 4)}
       else if (pas.Common.TokenAt(i.get() + 2).Kind === pas.Tokens.TTokenKind.OPARTOK) {
        i.set(i.get() + 2);
        do {
          NumVarOfSameType = 0;
          ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VALPASSING,0,3);
          if (pas.Common.TokenAt(i.get() + 1).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
            ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING,0,3);
            i.set(i.get() + 1);
          } else if (pas.Common.TokenAt(i.get() + 1).Kind === pas.Tokens.TTokenKind.VARTOK) {
            ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
            i.set(i.get() + 1);
          };
          do {
            if (pas.Common.TokenAt(i.get() + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
              pas.Messages.Error(i.get() + 1,"Formal parameter name expected but " + pas.Common.TokenList.GetTokenSpellingAtIndex(i.get() + 1) + " found")}
             else {
              NumVarOfSameType += 1;
              rtl.rcArrR(VarOfSameType,NumVarOfSameType - 1).Name = pas.Common.TokenAt(i.get() + 1).Name;
            };
            i.set(i.get() + 2);
          } while (!(pas.Common.TokenAt(i.get()).Kind !== pas.Tokens.TTokenKind.COMMATOK));
          VarType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          NumAllocElements = 0;
          AllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          if ((ListPassMethod in rtl.createSet(pas.CompilerTypes.TParameterPassingMethod.CONSTPASSING,pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) && (pas.Common.TokenAt(i.get()).Kind !== pas.Tokens.TTokenKind.COLONTOK)) {
            ListPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
            i.set(i.get() - 1);
          } else {
            pas.Common.CheckTok(i.get(),pas.Tokens.TTokenKind.COLONTOK);
            if (pas.Common.TokenAt(i.get() + 1).Kind === pas.Tokens.TTokenKind.DEREFERENCETOK) pas.Messages.Error(i.get() + 1,"Type identifier expected");
            i.set(pas.Parser.CompileType(i.get() + 1,{get: function () {
                return VarType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                VarType = v;
              }},{get: function () {
                return NumAllocElements;
              }, set: function (v) {
                rtl.rc(v,0,4294967295);
                NumAllocElements = v;
              }},{get: function () {
                return AllocElementType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                AllocElementType = v;
              }}));
            if ((VarType === pas.Tokens.TTokenKind.FILETOK) && (ListPassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) pas.Messages.Error(i.get(),"File types must be var parameters");
          };
          for (var $l = 1, $end = NumVarOfSameType; $l <= $end; $l++) {
            VarOfSameTypeIndex = $l;
            NumParams.set(NumParams.get() + 1);
            if (NumParams.get() > 8) {
              pas.Messages.ErrorForIdentifier(i.get(),pas.Messages.TErrorCode.TooManyParameters,pas.Common.NumIdent())}
             else {
              rtl.rcArrR(Param.get(),NumParams.get() - 1).DataType = rtl.rc(VarType,0,191);
              rtl.rcArrR(Param.get(),NumParams.get() - 1).Name = rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).Name;
              rtl.rcArrR(Param.get(),NumParams.get() - 1).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
              rtl.rcArrR(Param.get(),NumParams.get() - 1).AllocElementType = rtl.rc(AllocElementType,0,191);
              rtl.rcArrR(Param.get(),NumParams.get() - 1).PassMethod = rtl.rc(ListPassMethod,0,3);
            };
          };
          i.set(i.get() + 1);
        } while (!(pas.Common.TokenAt(i.get()).Kind !== pas.Tokens.TTokenKind.SEMICOLONTOK));
        pas.Common.CheckTok(i.get(),pas.Tokens.TTokenKind.CPARTOK);
        i.set(i.get() + 1);
      } else i.set(i.get() + 2);
      Status.set(0);
      if (IsNestedFunction) {
        pas.Common.CheckTok(i.get(),pas.Tokens.TTokenKind.COLONTOK);
        if (pas.Common.TokenAt(i.get() + 1).Kind === pas.Tokens.TTokenKind.ARRAYTOK) pas.Messages.Error(i.get() + 1,"Type identifier expected");
        i.set(pas.Parser.CompileType(i.get() + 1,{get: function () {
            return VarType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            VarType = v;
          }},{get: function () {
            return NumAllocElements;
          }, set: function (v) {
            rtl.rc(v,0,4294967295);
            NumAllocElements = v;
          }},{get: function () {
            return AllocElementType;
          }, set: function (v) {
            rtl.rc(v,0,191);
            AllocElementType = v;
          }}));
        NestedFunctionResultType.set(VarType);
        NestedFunctionNumAllocElements.set(NumAllocElements);
        NestedFunctionAllocElementType.set(AllocElementType);
        i.set(i.get() + 1);
      };
      pas.Common.CheckTok(i.get(),pas.Tokens.TTokenKind.SEMICOLONTOK);
      while (pas.Common.TokenAt(i.get() + 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.OVERLOADTOK,pas.Tokens.TTokenKind.ASSEMBLERTOK,pas.Tokens.TTokenKind.FORWARDTOK,pas.Tokens.TTokenKind.REGISTERTOK,pas.Tokens.TTokenKind.INTERRUPTTOK,pas.Tokens.TTokenKind.PASCALTOK,pas.Tokens.TTokenKind.STDCALLTOK,pas.Tokens.TTokenKind.INLINETOK,pas.Tokens.TTokenKind.KEEPTOK)) {
        var $tmp = pas.Common.TokenAt(i.get() + 1).Kind;
        if ($tmp === pas.Tokens.TTokenKind.OVERLOADTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mOverload,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.ASSEMBLERTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mAssembler,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.REGISTERTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mRegister,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.STDCALLTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mStdCall,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.INLINETOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mInline,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.INTERRUPTTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mInterrupt,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.PASCALTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mPascal,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        } else if ($tmp === pas.Tokens.TTokenKind.KEEPTOK) {
          pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mKeep,Status);
          i.set(i.get() + 1);
          pas.Common.CheckTok(i.get() + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
        };
        i.set(i.get() + 1);
      };
    };
    $impl.CheckForwardResolutions = function (typ) {
      var TypeIndex = 0;
      var IdentIndex = 0;
      var Name = "";
      for (var $l = 1, $end = pas.Common.NumIdent(); $l <= $end; $l++) {
        TypeIndex = $l;
        if ((pas.Common.IdentifierAt(TypeIndex).AllocElementType === pas.Tokens.TTokenKind.FORWARDTYPE) && (pas.Common.IdentifierAt(TypeIndex).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) {
          Name = pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(pas.Common.IdentifierAt(TypeIndex).NumAllocElements).Name)).Name;
          if (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(pas.Common.IdentifierAt(TypeIndex).NumAllocElements).Name)).Kind === pas.Tokens.TTokenKind.TYPETOK) for (var $l1 = 1, $end1 = pas.Common.NumIdent(); $l1 <= $end1; $l1++) {
            IdentIndex = $l1;
            if ((pas.Common.IdentifierAt(IdentIndex).Name === Name) && (pas.Common.IdentifierAt(IdentIndex).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) {
              pas.Common.IdentifierAt(TypeIndex).NumAllocElements = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements,0,4294967295);
              pas.Common.IdentifierAt(TypeIndex).NumAllocElements_ = rtl.rc(pas.Common.IdentifierAt(IdentIndex).NumAllocElements_,0,4294967295);
              pas.Common.IdentifierAt(TypeIndex).AllocElementType = rtl.rc(pas.Common.IdentifierAt(IdentIndex).DataType,0,191);
              break;
            };
          };
        };
      };
      for (var $l2 = 1, $end2 = pas.Common.NumIdent(); $l2 <= $end2; $l2++) {
        TypeIndex = $l2;
        if ((pas.Common.IdentifierAt(TypeIndex).AllocElementType === pas.Tokens.TTokenKind.FORWARDTYPE) && (pas.Common.IdentifierAt(TypeIndex).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) if (typ) {
          pas.Messages.Error(TypeIndex,"Unresolved forward reference to type " + pas.Common.IdentifierAt(TypeIndex).Name)}
         else pas.Messages.Error(TypeIndex,'Identifier not found "' + pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(pas.Common.IdentifierAt(TypeIndex).NumAllocElements).Name)).Name + '"');
      };
    };
    $impl.CompileRecordDeclaration = function (i, VarOfSameType, tmpVarDataSize, ConstVal, VarOfSameTypeIndex, VarType, AllocElementType, NumAllocElements, isAbsolute, idx) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(tmpVarDataSize.get(),-2147483648,2147483647);
      rtl.rc(ConstVal.get(),-9007199254740991,9007199254740991);
      rtl.rc(VarOfSameTypeIndex,-2147483648,2147483647);
      rtl.rc(VarType,0,191);
      rtl.rc(AllocElementType,0,191);
      rtl.rc(NumAllocElements,0,4294967295);
      rtl.rc(idx.get(),-2147483648,2147483647);
      var tmpVarDataSize_ = 0;
      var ParamIndex = 0;
      if ((VarType in pas.Datatypes.Pointers) && (AllocElementType === pas.Tokens.TTokenKind.RECORDTOK)) {
        tmpVarDataSize_ = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
        if (rtl.lw(NumAllocElements >>> 16) > 0) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(NumAllocElements & 0xFFFF,0,4294967295);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements_ = rtl.rc(rtl.lw(NumAllocElements >>> 16),0,4294967295);
          pas.Common.SetVarDataSize(i,tmpVarDataSize.get() + (rtl.lw(NumAllocElements >>> 16) * pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK)));
          tmpVarDataSize.set(pas.Common.GetVarDataSize());
          NumAllocElements = rtl.rc(NumAllocElements & 0xFFFF,0,4294967295);
        } else if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isAbsolute === false) tmpVarDataSize.set(tmpVarDataSize.get() + pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK));
        idx.set(pas.Common.IdentifierAt(pas.Common.NumIdent()).Value - 32768);
        for (var $l = 1, $end = pas.Common.GetTypeAtIndex(NumAllocElements).NumFields; $l <= $end; $l++) {
          ParamIndex = $l;
          if ((pas.Common.GetTypeAtIndex(NumAllocElements).Block === 1) || (pas.Common.GetTypeAtIndex(NumAllocElements).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) {
            pas.Parser.DefineIdent(i,rtl.rcArrR(VarOfSameType.get(),VarOfSameTypeIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).AllocElementType,0,pas.Tokens.TTokenKind.DATAORIGINOFFSET);
            pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).Value - tmpVarDataSize_,-9007199254740991,9007199254740991);
            pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
          };
        };
        pas.Common.SetVarDataSize(i,tmpVarDataSize.get());
      } else if (VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) for (var $l1 = 1, $end1 = pas.Common.GetTypeAtIndex(NumAllocElements).NumFields; $l1 <= $end1; $l1++) {
        ParamIndex = $l1;
        if ((pas.Common.GetTypeAtIndex(NumAllocElements).Block === 1) || (pas.Common.GetTypeAtIndex(NumAllocElements).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) {
          tmpVarDataSize_ = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
          pas.Parser.DefineIdent(i,rtl.rcArrR(VarOfSameType.get(),VarOfSameTypeIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).AllocElementType,(isAbsolute + 0) * ConstVal.get(),pas.Tokens.TTokenKind.IDENTTOK);
          if (isAbsolute) if (!(rtl.rcArrR(pas.Common.GetTypeAtIndex(NumAllocElements).Field,ParamIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) ConstVal.set(ConstVal.get() + (pas.Common.GetVarDataSize() - tmpVarDataSize_));
        };
      };
    };
    $impl.CompileBlock = function (i, BlockIdentIndex, NumParams, IsFunction, FunctionResultType, FunctionNumAllocElements, FunctionAllocElementType) {
      rtl.rc(i,-2147483648,2147483647);
      rtl.rc(BlockIdentIndex,-2147483648,2147483647);
      rtl.rc(NumParams,-2147483648,2147483647);
      rtl.rc(FunctionResultType,0,191);
      rtl.rc(FunctionNumAllocElements,0,4294967295);
      rtl.rc(FunctionAllocElementType,0,191);
      var Result = 0;
      var VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
      var VarPassMethod = 0;
      var Param = rtl.arraySetLength(null,pas.CompilerTypes.TParam,8);
      var j = 0;
      var idx = 0;
      var NumVarOfSameType = 0;
      var VarOfSameTypeIndex = 0;
      var tmpVarDataSize = 0;
      var ParamIndex = 0;
      var ForwardIdentIndex = 0;
      var IdentIndex = 0;
      var external_libr = 0;
      var NumAllocElements = 0;
      var NestedNumAllocElements = 0;
      var NestedFunctionNumAllocElements = 0;
      var ConstVal = 0;
      var ImplementationUse = false;
      var open_array = false;
      var iocheck_old = false;
      var isInterrupt_old = false;
      var yes = false;
      var Assignment = false;
      var IsNestedFunction = false;
      var isAbsolute = false;
      var isExternal = false;
      var isForward = false;
      var isVolatile = false;
      var isStriped = false;
      var isAsm = false;
      var isReg = false;
      var isInt = false;
      var isInl = false;
      var isOvr = false;
      var VarType = 0;
      var VarRegister = 0;
      var NestedFunctionResultType = 0;
      var ConstValType = 0;
      var AllocElementType = 0;
      var ActualParamType = 0;
      var NestedFunctionAllocElementType = 0;
      var NestedDataType = 0;
      var NestedAllocElementType = 0;
      var IdType = 0;
      var Tmp = 0;
      var TmpResult = 0;
      var external_name = "";
      var SourceFileList = [];
      pas.Optimize.ResetOpty();
      VarOfSameType = rtl.arraySetLength(null,pas.CompilerTypes.TParam,256);
      j = 0;
      ConstVal = 0;
      VarRegister = 0;
      external_libr = 0;
      external_name = "";
      NestedDataType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
      NestedAllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
      NestedNumAllocElements = 0;
      ParamIndex = 0;
      VarPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.UNDEFINED,0,3);
      ImplementationUse = false;
      Param = pas.Common.IdentifierAt(BlockIdentIndex).Param;
      isAsm = pas.Common.IdentifierAt(BlockIdentIndex).isAsm;
      isReg = pas.Common.IdentifierAt(BlockIdentIndex).isRegister;
      isInt = pas.Common.IdentifierAt(BlockIdentIndex).isInterrupt;
      isInl = pas.Common.IdentifierAt(BlockIdentIndex).isInline;
      isOvr = pas.Common.IdentifierAt(BlockIdentIndex).isOverload;
      pas.Common.isInterrupt = isInt;
      pas.Common.NumBlocks += 1;
      pas.Common.BlockStackTop += 1;
      rtl.rcArrW(pas.Common.BlockStack,pas.Common.BlockStackTop,pas.Common.NumBlocks);
      pas.Common.IdentifierAt(BlockIdentIndex).ProcAsBlock = rtl.rc(pas.Common.NumBlocks,-2147483648,2147483647);
      $impl.GenerateLocal(BlockIdentIndex,IsFunction);
      if ((rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop) !== 1) && pas.Common.IdentifierAt(BlockIdentIndex).isRecursion) {
        if (pas.Common.IdentifierAt(BlockIdentIndex).isRegister) pas.Messages.Error(i,'Calling convention directive "REGISTER" not applicable with recursion');
        if (!isInl) {
          pas.Optimize.asm65("\t.ifdef @VarData","");
          if (pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex > 0) {
            pas.Optimize.asm65("\tsta :bp2","");
            pas.Optimize.asm65("\tsty :bp2+1","");
          };
          pas.Optimize.asm65("@new\tlda <@VarData","");
          pas.Optimize.asm65("\tsta :ztmp","");
          pas.Optimize.asm65("\tlda >@VarData","");
          pas.Optimize.asm65("\tldy #@VarDataSize-1","");
          pas.Optimize.asm65("\tjsr @AllocMem","");
          if (pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex > 0) {
            pas.Optimize.asm65("\tlda :bp2","");
            pas.Optimize.asm65("\tldy :bp2+1","");
          };
          pas.Optimize.asm65("\teif","");
        };
      };
      if (pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex > 0) {
        pas.Optimize.asm65("\tsta " + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field[0].Name,"");
        pas.Optimize.asm65("\tsty " + pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field[0].Name + "+1","");
        pas.Parser.DefineIdent(i,pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field[0].Name,pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.WORDTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
        pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
        pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType = rtl.rc(pas.Tokens.TTokenKind.WORDTOK,0,191);
        NumAllocElements = 0;
        for (var $l = 1, $end = pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).NumFields; $l <= $end; $l++) {
          ParamIndex = $l;
          if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).ObjectVariable === false) {
            if (NumAllocElements > 0) if (NumAllocElements > 255) {
              pas.Optimize.asm65("\tadd <" + pas.StringUtilities.IntToStr(NumAllocElements),"");
              pas.Optimize.asm65("\tpha","");
              pas.Optimize.asm65("\ttya","");
              pas.Optimize.asm65("\tadc >" + pas.StringUtilities.IntToStr(NumAllocElements),"");
              pas.Optimize.asm65("\ttay","");
              pas.Optimize.asm65("\tpla","");
            } else {
              pas.Optimize.asm65("\tadd #" + pas.StringUtilities.IntToStr(NumAllocElements),"");
              pas.Optimize.asm65("\tscc","");
              pas.Optimize.asm65("\tiny","");
            };
            pas.Optimize.asm65("\tsta " + rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).Name,"");
            pas.Optimize.asm65("\tsty " + rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).Name + "+1","");
            if (ParamIndex !== pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).NumFields) {
              if ((rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements > 0)) {
                NumAllocElements = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements & 0xffff,0,4294967295);
                if (rtl.lw(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements >>> 16) > 0) NumAllocElements = rtl.rc(NumAllocElements * rtl.lw(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements >>> 16),0,4294967295);
                NumAllocElements = rtl.rc(NumAllocElements * pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).AllocElementType),0,4294967295);
              } else {
                var $tmp = rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType;
                if ($tmp === pas.Tokens.TTokenKind.FILETOK) {
                  NumAllocElements = 12}
                 else if ($tmp === pas.Tokens.TTokenKind.STRINGPOINTERTOK) {
                  NumAllocElements = rtl.rc(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements,0,4294967295)}
                 else if ($tmp === pas.Tokens.TTokenKind.RECORDTOK) {
                  NumAllocElements = rtl.rc(pas.Parser.ObjectRecordSize(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements),0,4294967295)}
                 else {
                  NumAllocElements = rtl.rc(pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType),0,4294967295);
                };
              };
            };
          };
        };
      };
      for (var $l1 = 1, $end1 = NumParams; $l1 <= $end1; $l1++) {
        ParamIndex = $l1;
        if (rtl.rcArrR(Param,ParamIndex - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
          if (isReg && (ParamIndex in rtl.createSet(null,1,3))) {
            tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
            pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(Param,ParamIndex - 1).DataType,rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements,rtl.rcArrR(Param,ParamIndex - 1).AllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK);
            pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).isAbsolute = true;
            pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).Value = rtl.rc(rtl.lw((rtl.rc(ParamIndex,0,255) << 24) | 0x80000000),-9007199254740991,9007199254740991);
            pas.Common.SetVarDataSize(i,tmpVarDataSize);
          } else if (rtl.rcArrR(Param,ParamIndex - 1).DataType in pas.Datatypes.Pointers) {
            pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(Param,ParamIndex - 1).DataType,0,rtl.rcArrR(Param,ParamIndex - 1).DataType,0,pas.Tokens.TTokenKind.IDENTTOK)}
           else pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.POINTERTOK,0,rtl.rcArrR(Param,ParamIndex - 1).DataType,0,pas.Tokens.TTokenKind.IDENTTOK);
          if (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
            tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
            for (var $l2 = 1, $end2 = pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).NumFields; $l2 <= $end2; $l2++) {
              j = $l2;
              pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).AllocElementType,0,pas.Tokens.TTokenKind.DATAORIGINOFFSET);
              pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).Value - tmpVarDataSize,-9007199254740991,9007199254740991);
              pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).PassMethod,0,3);
              if (pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).DataType,0,191);
            };
            pas.Common.SetVarDataSize(i,tmpVarDataSize);
          } else if (rtl.rcArrR(Param,ParamIndex - 1).DataType in pas.Datatypes.Pointers) {
            pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).AllocElementType = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).AllocElementType,0,191)}
           else pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).AllocElementType = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).DataType,0,191);
          pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).NumAllocElements = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements & 0xFFFF,0,4294967295);
          pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).NumAllocElements_ = rtl.rc(rtl.lw(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements >>> 16),0,4294967295);
        } else {
          if (isReg && (ParamIndex in rtl.createSet(null,1,3))) {
            tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
            pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(Param,ParamIndex - 1).DataType,rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements,rtl.rcArrR(Param,ParamIndex - 1).AllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK);
            pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).isAbsolute = true;
            pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).Value = rtl.rc(rtl.lw((rtl.rc(ParamIndex,0,255) << 24) | 0x80000000),-9007199254740991,9007199254740991);
            pas.Common.SetVarDataSize(i,tmpVarDataSize);
          } else pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(Param,ParamIndex - 1).DataType,rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements,rtl.rcArrR(Param,ParamIndex - 1).AllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK);
          if ((rtl.rcArrR(Param,ParamIndex - 1).DataType === pas.Tokens.TTokenKind.POINTERTOK) && (rtl.rcArrR(Param,ParamIndex - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
            tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
            for (var $l3 = 1, $end3 = pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).NumFields; $l3 <= $end3; $l3++) {
              j = $l3;
              pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).AllocElementType,0,pas.Tokens.TTokenKind.DATAORIGINOFFSET);
              pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).Value - tmpVarDataSize,-9007199254740991,9007199254740991);
              pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).PassMethod,0,3);
              if (pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).DataType,0,191);
            };
            pas.Common.SetVarDataSize(i,tmpVarDataSize);
          } else if (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) for (var $l4 = 1, $end4 = pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).NumFields; $l4 <= $end4; $l4++) {
            j = $l4;
            pas.Parser.DefineIdent(i,rtl.rcArrR(Param,ParamIndex - 1).Name + "." + rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements).Field,j).AllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK);
            pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).PassMethod,0,3);
          };
        };
        pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name)).PassMethod = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).PassMethod,0,3);
      };
      if (IsFunction) {
        tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
        pas.Parser.DefineIdent(i,"RESULT",pas.Tokens.TTokenKind.VARTOK,FunctionResultType,FunctionNumAllocElements,FunctionAllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK);
        if (isReg && (FunctionResultType in rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes))) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).isAbsolute = true;
          pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = 0x87000000;
          pas.Common.SetVarDataSize(i,tmpVarDataSize);
        };
        if (FunctionResultType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) for (var $l5 = 1, $end5 = pas.Common.GetTypeAtIndex(FunctionNumAllocElements).NumFields; $l5 <= $end5; $l5++) {
          j = $l5;
          pas.Parser.DefineIdent(i,"RESULT." + rtl.rcArrR(pas.Common.GetTypeAtIndex(FunctionNumAllocElements).Field,j).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(FunctionNumAllocElements).Field,j).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(FunctionNumAllocElements).Field,j).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(FunctionNumAllocElements).Field,j).AllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK);
        };
      };
      yes = pas.Common.IdentifierAt(BlockIdentIndex).isRecursion || pas.Common.IdentifierAt(BlockIdentIndex).isStdCall;
      for (var $l6 = NumParams; $l6 >= 1; $l6--) {
        ParamIndex = $l6;
        if (!((rtl.rcArrR(Param,ParamIndex - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) || ((rtl.rcArrR(Param,ParamIndex - 1).DataType in pas.Datatypes.Pointers) && ((rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements & 0xFFFF) in rtl.createSet(0,1))) || ((rtl.rcArrR(Param,ParamIndex - 1).DataType in pas.Datatypes.Pointers) && (rtl.rcArrR(Param,ParamIndex - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) || (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.unionSet(pas.Datatypes.OrdinalTypes,pas.Datatypes.RealTypes)))) {
          yes = true;
          break;
        };
      };
      if (pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex === 0) if (Param[0].DataType === pas.Tokens.TTokenKind.ENUMTOK) {
        if ((yes === false) && (NumParams === 1) && (pas.Datatypes.GetDataSize(Param[0].AllocElementType) === 1) && (Param[0].PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) pas.Optimize.asm65("\tsta " + Param[0].Name,"");
      } else if ((yes === false) && (NumParams === 1) && (pas.Datatypes.GetDataSize(Param[0].DataType) === 1) && (Param[0].PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) pas.Optimize.asm65("\tsta " + Param[0].Name,"");
      if (yes) {
        for (var $l7 = 1, $end6 = NumParams; $l7 <= $end6; $l7++) {
          ParamIndex = $l7;
          if (pas.Common.IdentifierAt(BlockIdentIndex).isRecursion || pas.Common.IdentifierAt(BlockIdentIndex).isStdCall || (NumParams === 1)) {
            if (rtl.rcArrR(Param,ParamIndex - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),0,rtl.rcArrR(Param,ParamIndex - 1).Name,"")}
             else {
              if (rtl.rcArrR(Param,ParamIndex - 1).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
                $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(rtl.rcArrR(Param,ParamIndex - 1).AllocElementType),0,rtl.rcArrR(Param,ParamIndex - 1).Name,"")}
               else $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(rtl.rcArrR(Param,ParamIndex - 1).DataType),0,rtl.rcArrR(Param,ParamIndex - 1).Name,"");
            };
            if ((rtl.rcArrR(Param,ParamIndex - 1).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers)) && ((rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements & 0xFFFF) > 1)) if (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
              pas.Optimize.asm65(":move","");
              pas.Optimize.asm65(rtl.rcArrR(Param,ParamIndex - 1).Name,"");
              pas.Optimize.asm65(pas.StringUtilities.IntToStr(pas.Parser.RecordSize(pas.Parser.GetIdentIndex(rtl.rcArrR(Param,ParamIndex - 1).Name),"")),"");
            } else if (!(rtl.rcArrR(Param,ParamIndex - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
              if (rtl.lw(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements >>> 16) !== 0) {
                NumAllocElements = rtl.rc((rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements & 0xFFFF) * rtl.lw(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements >>> 16),0,4294967295)}
               else NumAllocElements = rtl.rc(rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements,0,4294967295);
              pas.Optimize.asm65(":move","");
              pas.Optimize.asm65(rtl.rcArrR(Param,ParamIndex - 1).Name,"");
              pas.Optimize.asm65(pas.StringUtilities.IntToStr(rtl.rc(NumAllocElements * pas.Datatypes.GetDataSize(rtl.rcArrR(Param,ParamIndex - 1).AllocElementType),-2147483648,2147483647)),"");
            };
          } else {
            Assignment = true;
            if ((rtl.rcArrR(Param,ParamIndex - 1).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING) && (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.unionSet(rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK),pas.Datatypes.Pointers)) && ((rtl.rcArrR(Param,ParamIndex - 1).NumAllocElements & 0xFFFF) > 1)) if (rtl.rcArrR(Param,ParamIndex - 1).DataType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
              Assignment = false;
              pas.Optimize.asm65("\tdex","");
            } else if (!(rtl.rcArrR(Param,ParamIndex - 1).AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {
              Assignment = false;
              pas.Optimize.asm65("\tdex","");
            };
            if (Assignment) if (rtl.rcArrR(Param,ParamIndex - 1).PassMethod === pas.CompilerTypes.TParameterPassingMethod.VARPASSING) {
              $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK),0,rtl.rcArrR(Param,ParamIndex - 1).Name,"")}
             else {
              if (rtl.rcArrR(Param,ParamIndex - 1).DataType === pas.Tokens.TTokenKind.ENUMTOK) {
                $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(rtl.rcArrR(Param,ParamIndex - 1).AllocElementType),0,rtl.rcArrR(Param,ParamIndex - 1).Name,"")}
               else $impl.GenerateAssignment(1,pas.Datatypes.GetDataSize(rtl.rcArrR(Param,ParamIndex - 1).DataType),0,rtl.rcArrR(Param,ParamIndex - 1).Name,"");
            };
          };
          if (ParamIndex !== NumParams) pas.Optimize.asm65("\tjmi @main","");
        };
        pas.Optimize.asm65("@main","");
      };
      if (pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex > 0) for (var $l8 = 1, $end7 = pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).NumFields; $l8 <= $end7; $l8++) {
        ParamIndex = $l8;
        tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
        if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType === pas.Tokens.TTokenKind.OBJECTTOK) pas.Messages.Error(i,"-- under construction --");
        if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType === pas.Tokens.TTokenKind.RECORDTOK) ConstVal = 0;
        if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType in rtl.createSet(pas.Tokens.TTokenKind.POINTERTOK,pas.Tokens.TTokenKind.STRINGPOINTERTOK)) {
          pas.Parser.DefineIdent(i,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).Name,pas.Tokens.TTokenKind.VARTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).AllocElementType,0,pas.Tokens.TTokenKind.IDENTTOK)}
         else pas.Parser.DefineIdent(i,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).Name,pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.POINTERTOK,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).NumAllocElements,rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType,0,pas.Tokens.TTokenKind.IDENTTOK);
        pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.VARPASSING,0,3);
        pas.Common.IdentifierAt(pas.Common.NumIdent()).ObjectVariable = true;
        pas.Common.SetVarDataSize(i,tmpVarDataSize + pas.Datatypes.GetDataSize(pas.Tokens.TTokenKind.POINTERTOK));
        if (rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).ObjectVariable) {
          pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc(ConstVal + 32768,-9007199254740991,9007199254740991);
          ConstVal += pas.Datatypes.GetDataSize(rtl.rcArrR(pas.Common.GetTypeAtIndex(pas.Common.IdentifierAt(BlockIdentIndex).ObjectIndex).Field,ParamIndex).DataType);
          pas.Common.SetVarDataSize(i,tmpVarDataSize);
        };
      };
      pas.Optimize.asm65("","");
      if (!isAsm) $impl.GenerateDeclarationProlog();
      while (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.TYPETOK,pas.Tokens.TTokenKind.VARTOK,pas.Tokens.TTokenKind.LABELTOK,pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.PROGRAMTOK,pas.Tokens.TTokenKind.USESTOK,pas.Tokens.TTokenKind.LIBRARYTOK,pas.Tokens.TTokenKind.EXPORTSTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK,pas.Tokens.TTokenKind.LINKTOK,pas.Tokens.TTokenKind.UNITBEGINTOK,pas.Tokens.TTokenKind.UNITENDTOK,pas.Tokens.TTokenKind.IMPLEMENTATIONTOK,pas.Tokens.TTokenKind.INITIALIZATIONTOK,pas.Tokens.TTokenKind.IOCHECKON,pas.Tokens.TTokenKind.IOCHECKOFF,pas.Tokens.TTokenKind.LOOPUNROLLTOK,pas.Tokens.TTokenKind.NOLOOPUNROLLTOK,pas.Tokens.TTokenKind.PROCALIGNTOK,pas.Tokens.TTokenKind.LOOPALIGNTOK,pas.Tokens.TTokenKind.LINKALIGNTOK,pas.Tokens.TTokenKind.INFOTOK,pas.Tokens.TTokenKind.WARNINGTOK,pas.Tokens.TTokenKind.ERRORTOK)) {
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.LINKTOK) {
          if (pas.Common.codealign.link > 0) {
            pas.Optimize.asm65("\t.align $" + pas.SysUtils.IntToHex(pas.Common.codealign.link,4),"");
            pas.Optimize.asm65("","");
          };
          pas.Optimize.asm65("\t.link '" + rtl.rcArrR(pas.Common.LinkObj,pas.Common.TokenAt(i).Value) + "'","");
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.LOOPUNROLLTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Common.LoopUnroll = true;
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.NOLOOPUNROLLTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Common.LoopUnroll = false;
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PROCALIGNTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Common.codealign.proc = rtl.rc(pas.Common.TokenAt(i).Value,-2147483648,2147483647);
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.LOOPALIGNTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Common.codealign.loop = rtl.rc(pas.Common.TokenAt(i).Value,-2147483648,2147483647);
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.LINKALIGNTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Common.codealign.link = rtl.rc(pas.Common.TokenAt(i).Value,-2147483648,2147483647);
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.INFOTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.System.Writeln("User defined: " + pas.Common.msgLists.msgUser.Get(pas.Common.TokenAt(i).Value));
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.WARNINGTOK) {
          pas.Messages.WarningUserDefined(i);
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ERRORTOK) {
          if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UserDefined);
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IOCHECKON) {
          pas.Common.IOCheck = true;
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IOCHECKOFF) {
          pas.Common.IOCheck = false;
          i += 2;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.UNITBEGINTOK) {
          $impl.asm65separator(true);
          pas.Parser.DefineIdent(i,pas.Common.TokenAt(i).GetSourceFileName(),pas.Tokens.TTokenKind.UNITTOK,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
          pas.Common.IdentifierAt(pas.Common.NumIdent()).SourceFile = pas.Common.TokenAt(i).SourceLocation.SourceFile;
          pas.Optimize.asm65("","");
          pas.Optimize.asm65(".local\t" + pas.Common.TokenAt(i).GetSourceFileName(),"; UNIT");
          pas.Common.ActiveSourceFile = pas.Common.TokenAt(i).SourceLocation.SourceFile;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.UNITTOK);
          pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.IDENTTOK);
          if (pas.Common.TokenAt(i + 2).Name !== pas.Common.TokenAt(i).GetSourceFileName()) pas.Messages.Error(i + 2,"Illegal unit name: " + pas.Common.TokenAt(i + 2).Name);
          pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.SEMICOLONTOK);
          while (pas.Common.TokenAt(i + 4).Kind in rtl.createSet(pas.Tokens.TTokenKind.WARNINGTOK,pas.Tokens.TTokenKind.ERRORTOK,pas.Tokens.TTokenKind.INFOTOK)) i += 2;
          pas.Common.CheckTok(i + 4,pas.Tokens.TTokenKind.INTERFACETOK);
          pas.Common.INTERFACETOK_USE = true;
          pas.Common.PublicSection = true;
          ImplementationUse = false;
          i += 5;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.UNITENDTOK) {
          if (!ImplementationUse) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IMPLEMENTATIONTOK);
          $impl.GenerateProcFuncAsmLabels(BlockIdentIndex,false);
          VarRegister = 0;
          pas.Optimize.asm65("","");
          pas.Optimize.asm65(".endl","; UNIT " + pas.Common.TokenAt(i).GetSourceFileName());
          j = rtl.rc(pas.Common.NumIdent(),-2147483648,2147483647);
          while ((j > 0) && (pas.Common.IdentifierAt(j).SourceFile.UnitIndex === pas.Common.ActiveSourceFile.UnitIndex)) {
            if (pas.Common.IdentifierAt(j).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) if (pas.Common.IdentifierAt(j).IsUnresolvedForward && (pas.Common.IdentifierAt(j).isExternal === false)) pas.Messages.Error(i,"Unresolved forward declaration of " + pas.Common.IdentifierAt(j).Name);
            j -= 1;
          };
          pas.Common.ActiveSourceFile = pas.Common.SourceFileList.GetSourceFile(1);
          pas.Common.PublicSection = true;
          ImplementationUse = false;
          i += 1;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.IMPLEMENTATIONTOK) {
          pas.Common.INTERFACETOK_USE = false;
          pas.Common.PublicSection = false;
          ImplementationUse = true;
          i += 1;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.EXPORTSTOK) {
          i += 1;
          do {
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
            if (pas.Common.pass === pas.CompilerTypes.TPass.CALL_DETERMINATION) {
              IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i).Name),-2147483648,2147483647);
              if (IdentIndex === 0) pas.Messages.Error$2(i,pas.Messages.TErrorCode.UnknownIdentifier);
              if (pas.Common.IdentifierAt(IdentIndex).isInline) pas.Messages.Error(i,"INLINE is not allowed to exports");
              if (pas.Common.IdentifierAt(IdentIndex).isOverload) {
                for (var $l9 = 1, $end8 = pas.Common.NumIdent(); $l9 <= $end8; $l9++) {
                  idx = $l9;
                  if (pas.Common.IdentifierAt(idx).Name === pas.Common.IdentifierAt(IdentIndex).Name) $impl.AddCallGraphChild(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),pas.Common.IdentifierAt(idx).ProcAsBlock);
                };
              } else $impl.AddCallGraphChild(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),pas.Common.IdentifierAt(IdentIndex).ProcAsBlock);
            };
            i += 1;
            if (!(pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.COMMATOK,pas.Tokens.TTokenKind.SEMICOLONTOK))) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) i += 1;
          } while (!(pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK));
          i += 1;
        };
        if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.INITIALIZATIONTOK) || ((pas.Common.PublicSection === false) && (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.BEGINTOK))) {
          if (!ImplementationUse) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IMPLEMENTATIONTOK);
          $impl.asm65separator(true);
          $impl.asm65separator(false);
          pas.Optimize.asm65("@UnitInit","");
          j = rtl.rc($impl.CompileStatement(i + 1,false),-2147483648,2147483647);
          while (pas.Common.TokenAt(j + 1).Kind === pas.Tokens.TTokenKind.SEMICOLONTOK) j = rtl.rc($impl.CompileStatement(j + 2,false),-2147483648,2147483647);
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\trts","");
          i = rtl.rc(j + 1,-2147483648,2147483647);
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.LIBRARYTOK) {
          if (pas.Common.LIBRARYTOK_USE) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.BEGINTOK);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.IDENTTOK);
          pas.Common.LIBRARY_NAME = pas.Common.TokenAt(i + 1).Name;
          if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.COLONTOK) && (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.INTNUMBERTOK)) {
            pas.Common.CODEORIGIN_BASE = rtl.rc(pas.Common.TokenAt(i + 3).Value,-2147483648,2147483647);
            pas.Common.target.codeorigin = rtl.rc(pas.Common.CODEORIGIN_BASE,0,65535);
            i += 2;
          };
          i += 1;
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
          i += 2;
          pas.Common.LIBRARYTOK_USE = true;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PROGRAMTOK) {
          if (pas.Common.PROGRAMTOK_USE) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.BEGINTOK);
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.IDENTTOK);
          pas.Common.PROGRAM_NAME = pas.Common.TokenAt(i + 1).Name;
          i += 1;
          if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OPARTOK) {
            i += 1;
            do {
              i += 1;
              pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COMMATOK) i += 1;
            } while (!(pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.CPARTOK);
            i += 1;
          };
          if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.COLONTOK) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.INTNUMBERTOK)) {
            pas.Common.CODEORIGIN_BASE = rtl.rc(pas.Common.TokenAt(i + 2).Value,-2147483648,2147483647);
            pas.Common.target.codeorigin = rtl.rc(pas.Common.CODEORIGIN_BASE,0,65535);
            i += 2;
          };
          pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
          i += 2;
          pas.Common.PROGRAMTOK_USE = true;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.USESTOK) {
          if (pas.Common.LIBRARYTOK_USE) {
            j = rtl.rc(i - 1,-2147483648,2147483647);
            while (pas.Common.TokenAt(j).Kind in rtl.createSet(pas.Tokens.TTokenKind.SEMICOLONTOK,pas.Tokens.TTokenKind.IDENTTOK,pas.Tokens.TTokenKind.COLONTOK,pas.Tokens.TTokenKind.INTNUMBERTOK)) j -= 1;
            if (pas.Common.TokenAt(j).Kind !== pas.Tokens.TTokenKind.LIBRARYTOK) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.BEGINTOK);
          };
          if (pas.Common.PROGRAMTOK_USE) {
            j = rtl.rc(i - 1,-2147483648,2147483647);
            while (pas.Common.TokenAt(j).Kind in rtl.createSet(pas.Tokens.TTokenKind.SEMICOLONTOK,pas.Tokens.TTokenKind.CPARTOK,pas.Tokens.TTokenKind.OPARTOK,pas.Tokens.TTokenKind.IDENTTOK,pas.Tokens.TTokenKind.COMMATOK,pas.Tokens.TTokenKind.COLONTOK,pas.Tokens.TTokenKind.INTNUMBERTOK)) j -= 1;
            if (pas.Common.TokenAt(j).Kind !== pas.Tokens.TTokenKind.PROGRAMTOK) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.BEGINTOK);
          };
          if (pas.Common.INTERFACETOK_USE) if (pas.Common.TokenAt(i - 1).Kind !== pas.Tokens.TTokenKind.INTERFACETOK) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IMPLEMENTATIONTOK);
          if (ImplementationUse) if (pas.Common.TokenAt(i - 1).Kind !== pas.Tokens.TTokenKind.IMPLEMENTATIONTOK) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.BEGINTOK);
          i += 1;
          idx = rtl.rc(i,-2147483648,2147483647);
          SourceFileList = [];
          SourceFileList = rtl.arraySetLength(SourceFileList,"",1);
          do {
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
            for (var $l10 = 0, $end9 = rtl.length(SourceFileList) - 1 - 1; $l10 <= $end9; $l10++) {
              j = $l10;
              if (rtl.rcArrR(SourceFileList,j) === pas.Common.TokenAt(i).Name) pas.Messages.Error(i,"Duplicate identifier '" + pas.Common.TokenAt(i).Name + "'");
            };
            j = rtl.rc(rtl.length(SourceFileList) - 1,-2147483648,2147483647);
            rtl.rcArrW(SourceFileList,j,pas.Common.TokenAt(i).Name);
            SourceFileList = rtl.arraySetLength(SourceFileList,"",j + 2);
            i += 1;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.INTOK) {
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.STRINGLITERALTOK);
              i += 2;
            };
            if (!(pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.COMMATOK,pas.Tokens.TTokenKind.SEMICOLONTOK))) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) i += 1;
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
          i = rtl.rc(idx,-2147483648,2147483647);
          SourceFileList = rtl.arraySetLength(SourceFileList,"",0);
          do {
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
            yes = true;
            for (var $l11 = 1, $end10 = pas.Common.ActiveSourceFile.Units; $l11 <= $end10; $l11++) {
              j = $l11;
              if ((rtl.rcArrR(pas.Common.ActiveSourceFile.AllowedUnitNames,j - 1) === pas.Common.TokenAt(i).Name) || (pas.Common.TokenAt(i).Name === "SYSTEM")) yes = false;
            };
            if (yes) {
              pas.Common.ActiveSourceFile.Units += 1;
              if (pas.Common.ActiveSourceFile.Units > 256) pas.Messages.Error(i,"Out of resources, MAXALLOWEDUNITS");
              rtl.rcArrW(pas.Common.ActiveSourceFile.AllowedUnitNames,pas.Common.ActiveSourceFile.Units - 1,pas.Common.TokenAt(i).Name);
            };
            i += 1;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.INTOK) {
              pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.STRINGLITERALTOK);
              i += 2;
            };
            if (!(pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.COMMATOK,pas.Tokens.TTokenKind.SEMICOLONTOK))) pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) i += 1;
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
          i += 1;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.LABELTOK) {
          i += 1;
          do {
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.IDENTTOK);
            pas.Parser.DefineIdent(i,pas.Common.TokenAt(i).Name,pas.Tokens.TTokenKind.LABELTOK,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
            i += 1;
            if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.COMMATOK) i += 1;
          } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
          i = rtl.rc(i + 1,-2147483648,2147483647);
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
          do {
            if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
              pas.Messages.Error(i + 1,"Constant name expected but " + pas.Common.TokenList.GetTokenSpellingAtIndex(i + 1) + " found")}
             else if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.EQTOK) {
              j = rtl.rc(pas.Parser.CompileConstExpression(i + 3,{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  rtl.rc(v,-9007199254740991,9007199254740991);
                  ConstVal = v;
                }},{get: function () {
                  return ConstValType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  ConstValType = v;
                }},pas.Tokens.TTokenKind.INTEGERTOK,false,false),-2147483648,2147483647);
              if (pas.Common.TokenAt(j).Kind in pas.Datatypes.StringTypes) {
                if (pas.Common.TokenAt(j).StrLength > 255) {
                  pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.POINTERTOK,0,pas.Tokens.TTokenKind.CHARTOK,ConstVal + 256,pas.Tokens.TTokenKind.PCHARTOK)}
                 else pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,ConstValType,pas.Common.TokenAt(j).StrLength,pas.Tokens.TTokenKind.CHARTOK,ConstVal + 256,pas.Common.TokenAt(j).Kind);
              } else if (ConstValType in pas.Datatypes.Pointers) {
                pas.Messages.Error$2(j,pas.Messages.TErrorCode.IllegalExpression)}
               else pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,ConstValType,0,pas.Tokens.TTokenKind.UNTYPETOK,ConstVal,pas.Common.TokenAt(j).Kind);
              i = rtl.rc(j,-2147483648,2147483647);
            } else if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.COLONTOK) {
              open_array = false;
              if ((pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.TokenAt(i + 4).Kind === pas.Tokens.TTokenKind.OFTOK)) {
                j = rtl.rc(pas.Parser.CompileType(i + 5,{get: function () {
                    return VarType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    VarType = v;
                  }},{get: function () {
                    return NumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NumAllocElements = v;
                  }},{get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }}),-2147483648,2147483647);
                if (VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                  pas.Messages.Error(i,"Only Array of ^" + pas.Tokens.InfoAboutToken(VarType) + " supported")}
                 else if (VarType === pas.Tokens.TTokenKind.ENUMTOK) pas.Messages.Error(i,pas.Tokens.InfoAboutToken(VarType) + " arrays are not supported");
                if (VarType === pas.Tokens.TTokenKind.POINTERTOK) {
                  if (AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
                    NumAllocElements = 1;
                    AllocElementType = rtl.rc(VarType,0,191);
                  };
                } else {
                  NumAllocElements = 1;
                  AllocElementType = rtl.rc(VarType,0,191);
                  VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
                };
                if (!(AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) open_array = true;
              } else {
                j = rtl.rc(pas.Parser.CompileType(i + 3,{get: function () {
                    return VarType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    VarType = v;
                  }},{get: function () {
                    return NumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NumAllocElements = v;
                  }},{get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }}),-2147483648,2147483647);
                if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.ARRAYTOK) j = rtl.rc(pas.Parser.CompileType(j + 3,{get: function () {
                    return NestedDataType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    NestedDataType = v;
                  }},{get: function () {
                    return NestedNumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NestedNumAllocElements = v;
                  }},{get: function () {
                    return NestedAllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    NestedAllocElementType = v;
                  }}),-2147483648,2147483647);
              };
              if ((VarType in pas.Datatypes.Pointers) && (NumAllocElements === 0)) if (AllocElementType !== pas.Tokens.TTokenKind.CHARTOK) pas.Messages.Error$2(j,pas.Messages.TErrorCode.IllegalExpression);
              pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.EQTOK);
              if (pas.Common.TokenAt(i + 3).Kind in pas.Datatypes.StringTypes) {
                j = rtl.rc(pas.Parser.CompileConstExpression(j + 2,{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ConstVal = v;
                  }},{get: function () {
                    return ConstValType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ConstValType = v;
                  }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.PCHARTOK) {
                  pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.POINTERTOK,0,pas.Tokens.TTokenKind.CHARTOK,ConstVal + 256 + 1,pas.Tokens.TTokenKind.PCHARTOK)}
                 else pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,ConstValType,pas.Common.TokenAt(j).StrLength,pas.Tokens.TTokenKind.CHARTOK,ConstVal + 256,pas.Common.TokenAt(j).Kind);
              } else if (NumAllocElements > 0) {
                pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,VarType,NumAllocElements,AllocElementType,pas.Common.NumStaticStrChars + 256 + pas.Common.CODEORIGIN_BASE,pas.Tokens.TTokenKind.IDENTTOK);
                if ((pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements in rtl.createSet(0,1)) && (open_array === false)) {
                  pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression)}
                 else if (open_array) {
                  if ((pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) && (AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc(pas.Common.TokenAt(j + 2).StrAddress + pas.Common.CODEORIGIN_BASE,-9007199254740991,9007199254740991);
                    if (VarType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Common.IdentifierAt(pas.Common.NumIdent()).Value += 1;
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(pas.Common.TokenAt(j + 2).StrLength,0,4294967295);
                    j = rtl.rc(j + 2,-2147483648,2147483647);
                    NumAllocElements = 0;
                  } else {
                    j = rtl.rc($impl.ReadDataOpenArray(j + 2,pas.Common.NumStaticStrChars,AllocElementType,{get: function () {
                        return NumAllocElements;
                      }, set: function (v) {
                        rtl.rc(v,0,4294967295);
                        NumAllocElements = v;
                      }},true,pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.PCHARTOK),-2147483648,2147483647);
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
                  };
                } else {
                  if ((pas.Common.TokenAt(j + 2).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) && (AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                    if (pas.Common.TokenAt(j + 2).StrLength > NumAllocElements) pas.Messages.Error(j + 2,"String length is larger than array of char length");
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc(pas.Common.TokenAt(j + 2).StrAddress + pas.Common.CODEORIGIN_BASE,-9007199254740991,9007199254740991);
                    if (VarType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Common.IdentifierAt(pas.Common.NumIdent()).Value += 1;
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(pas.Common.TokenAt(j + 2).StrLength,0,4294967295);
                    j = rtl.rc(j + 2,-2147483648,2147483647);
                    NumAllocElements = 0;
                  } else j = rtl.rc($impl.ReadDataArray(j + 2,pas.Common.NumStaticStrChars,AllocElementType,NumAllocElements,true,pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.PCHARTOK),-2147483648,2147483647);
                };
                if (rtl.lw(NumAllocElements >>> 16) > 0) {
                  pas.Common.NumStaticStrChars += (NumAllocElements & 0xffff) * rtl.lw(NumAllocElements >>> 16) * pas.Datatypes.GetDataSize(AllocElementType)}
                 else pas.Common.NumStaticStrChars += NumAllocElements * pas.Datatypes.GetDataSize(AllocElementType);
              } else {
                j = rtl.rc(pas.Parser.CompileConstExpression(j + 2,{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ConstVal = v;
                  }},{get: function () {
                    return ConstValType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ConstValType = v;
                  }},VarType,false,true),-2147483648,2147483647);
                if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.SINGLETOK,pas.Tokens.TTokenKind.HALFSINGLETOK)) && (ConstValType in rtl.createSet(pas.Tokens.TTokenKind.SHORTREALTOK,pas.Tokens.TTokenKind.REALTOK))) ConstValType = rtl.rc(VarType,0,191);
                if ((VarType === pas.Tokens.TTokenKind.SHORTREALTOK) && (ConstValType === pas.Tokens.TTokenKind.REALTOK)) ConstValType = rtl.rc(pas.Tokens.TTokenKind.SHORTREALTOK,0,191);
                if ((VarType in pas.Datatypes.RealTypes) && (ConstValType in pas.Datatypes.IntegerTypes)) {
                  ConstVal = rtl.rc(pas.Numbers.FromInt64(ConstVal),-9007199254740991,9007199254740991);
                  ConstValType = rtl.rc(VarType,0,191);
                };
                pas.Common.GetCommonType(i + 1,VarType,ConstValType);
                pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.CONSTTOK,VarType,0,pas.Tokens.TTokenKind.UNTYPETOK,ConstVal,pas.Common.TokenAt(j).Kind);
              };
              i = rtl.rc(j,-2147483648,2147483647);
            } else pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.EQTOK);
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
            i += 1;
          } while (!(pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
          i += 1;
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.TYPETOK) {
          do {
            if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
              pas.Messages.Error(i + 1,"Type name expected but " + pas.Common.TokenList.GetTokenSpellingAtIndex(i + 1) + " found")}
             else {
              pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.EQTOK);
              if ((pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.TokenAt(i + 4).Kind !== pas.Tokens.TTokenKind.OBRACKETTOK)) {
                j = rtl.rc(pas.Parser.CompileType(i + 5,{get: function () {
                    return VarType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    VarType = v;
                  }},{get: function () {
                    return NumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NumAllocElements = v;
                  }},{get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }}),-2147483648,2147483647);
                pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.TYPETOK,VarType,NumAllocElements,AllocElementType,0,pas.Common.TokenAt(i + 3).Kind);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).Pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
              } else {
                j = rtl.rc(pas.Parser.CompileType(i + 3,{get: function () {
                    return VarType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    VarType = v;
                  }},{get: function () {
                    return NumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NumAllocElements = v;
                  }},{get: function () {
                    return AllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    AllocElementType = v;
                  }}),-2147483648,2147483647);
                if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.ARRAYTOK) j = rtl.rc(pas.Parser.CompileType(j + 3,{get: function () {
                    return NestedDataType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    NestedDataType = v;
                  }},{get: function () {
                    return NestedNumAllocElements;
                  }, set: function (v) {
                    rtl.rc(v,0,4294967295);
                    NestedNumAllocElements = v;
                  }},{get: function () {
                    return NestedAllocElementType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    NestedAllocElementType = v;
                  }}),-2147483648,2147483647);
                pas.Parser.DefineIdent(i + 1,pas.Common.TokenAt(i + 1).Name,pas.Tokens.TTokenKind.TYPETOK,VarType,NumAllocElements,AllocElementType,0,pas.Common.TokenAt(i + 3).Kind);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).Pass = rtl.rc(pas.CompilerTypes.TPass.CALL_DETERMINATION,0,2);
              };
            };
            pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
            i = rtl.rc(j + 1,-2147483648,2147483647);
          } while (!(pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
          $impl.CheckForwardResolutions(true);
          i = rtl.rc(i + 1,-2147483648,2147483647);
        };
        if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.VARTOK) {
          isVolatile = false;
          isStriped = false;
          NestedDataType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          NestedAllocElementType = rtl.rc(pas.Tokens.TTokenKind.UNTYPETOK,0,191);
          NestedNumAllocElements = 0;
          if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) && (pas.Common.TokenAt(i + 2).Kind in rtl.createSet(pas.Tokens.TTokenKind.VOLATILETOK,pas.Tokens.TTokenKind.STRIPEDTOK))) {
            pas.Common.CheckTok(i + 3,pas.Tokens.TTokenKind.CBRACKETTOK);
            if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.VOLATILETOK) {
              isVolatile = true}
             else isStriped = true;
            i += 3;
          };
          do {
            NumVarOfSameType = 0;
            do {
              if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
                pas.Messages.Error(i + 1,"Variable name expected but " + pas.Common.TokenList.GetTokenSpellingAtIndex(i + 1) + " found")}
               else {
                NumVarOfSameType += 1;
                if (NumVarOfSameType > 256) pas.Messages.Error(i,"Too many formal parameters");
                rtl.rcArrR(VarOfSameType,NumVarOfSameType - 1).Name = pas.Common.TokenAt(i + 1).Name;
              };
              i = rtl.rc(i + 2,-2147483648,2147483647);
            } while (!(pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.COMMATOK));
            pas.Common.CheckTok(i,pas.Tokens.TTokenKind.COLONTOK);
            if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.PACKEDTOK) {
              if (pas.Common.TokenAt(i + 2).Kind in rtl.createSet(pas.Tokens.TTokenKind.ARRAYTOK,pas.Tokens.TTokenKind.RECORDTOK)) {
                i += 1;
              } else pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.RECORDTOK);
            };
            IdType = rtl.rc(pas.Common.TokenAt(i + 1).Kind,0,191);
            idx = rtl.rc(i + 1,-2147483648,2147483647);
            open_array = false;
            isAbsolute = false;
            isExternal = false;
            if ((IdType === pas.Tokens.TTokenKind.ARRAYTOK) && (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OFTOK)) {
              i = rtl.rc(pas.Parser.CompileType(i + 3,{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  rtl.rc(v,0,4294967295);
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  AllocElementType = v;
                }}),-2147483648,2147483647);
              if (VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) {
                pas.Messages.Error(i,"Only Array of ^" + pas.Tokens.InfoAboutToken(VarType) + " supported")}
               else if (VarType === pas.Tokens.TTokenKind.ENUMTOK) pas.Messages.Error(i,pas.Tokens.InfoAboutToken(VarType) + " arrays are not supported");
              if (VarType === pas.Tokens.TTokenKind.POINTERTOK) {
                if (AllocElementType === pas.Tokens.TTokenKind.UNTYPETOK) {
                  NumAllocElements = 1;
                  AllocElementType = rtl.rc(VarType,0,191);
                };
              } else {
                NumAllocElements = 1;
                AllocElementType = rtl.rc(VarType,0,191);
                VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
              };
              ConstVal = 1;
              if (!(AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) open_array = true;
            } else {
              i = rtl.rc(pas.Parser.CompileType(i + 1,{get: function () {
                  return VarType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  VarType = v;
                }},{get: function () {
                  return NumAllocElements;
                }, set: function (v) {
                  rtl.rc(v,0,4294967295);
                  NumAllocElements = v;
                }},{get: function () {
                  return AllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  AllocElementType = v;
                }}),-2147483648,2147483647);
              if (IdType === pas.Tokens.TTokenKind.ARRAYTOK) i = rtl.rc(pas.Parser.CompileType(i + 3,{get: function () {
                  return NestedDataType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  NestedDataType = v;
                }},{get: function () {
                  return NestedNumAllocElements;
                }, set: function (v) {
                  rtl.rc(v,0,4294967295);
                  NestedNumAllocElements = v;
                }},{get: function () {
                  return NestedAllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  NestedAllocElementType = v;
                }}),-2147483648,2147483647);
              if ((NumAllocElements === 1) || (NumAllocElements === 0x10001)) ConstVal = 1;
            };
            if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.REGISTERTOK) {
              if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"REGISTER can only be associated to one variable");
              isAbsolute = true;
              VarRegister += pas.Datatypes.GetDataSize(VarType);
              ConstVal = rtl.rc(((VarRegister + 3) << 24) + 1,-9007199254740991,9007199254740991);
              i += 1;
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.EXTERNALTOK) {
              if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"Only one variable can be initialized");
              isAbsolute = true;
              isExternal = true;
              i += 1;
              external_libr = 0;
              if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) {
                external_name = pas.Common.TokenAt(i + 1).Name;
                if (pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
                  external_libr = rtl.rc(i + 2,-2147483648,2147483647);
                  i += 1;
                };
                i += 1;
              } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
                external_name = VarOfSameType[0].Name;
                external_libr = rtl.rc(i + 1,-2147483648,2147483647);
                i += 1;
              };
              ConstVal = 1;
            } else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.ABSOLUTETOK) {
              isAbsolute = true;
              if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"ABSOLUTE can only be associated to one variable");
              if ((VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) && (NumAllocElements === 0)) pas.Messages.Error(i + 1,"not possible in this case");
              i += 1;
              VarPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.UNDEFINED,0,3);
              if ((pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.IDENTTOK) && (pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name)).Kind === pas.Tokens.TTokenKind.VARTOK)) {
                ConstVal = rtl.rc(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name)).Value - 32768,-9007199254740991,9007199254740991);
                VarPassMethod = rtl.rc(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name)).PassMethod,0,3);
                if ((ConstVal < 0) || (ConstVal > 0xFFFFFF)) pas.Messages.Error(i,"Range check error while evaluating constants (" + pas.StringUtilities.IntToStr(ConstVal) + " must be between 0 and " + pas.StringUtilities.IntToStr(0xFFFFFF) + ")");
                ConstVal = rtl.rc(-ConstVal,-9007199254740991,9007199254740991);
                i += 1;
              } else {
                i = rtl.rc(pas.Parser.CompileConstExpression(i + 1,{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ConstVal = v;
                  }},{get: function () {
                    return ActualParamType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ActualParamType = v;
                  }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                if (VarType in pas.Datatypes.Pointers) {
                  pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.WORDTOK,ActualParamType,true)}
                 else pas.Common.GetCommonConstType(i,pas.Tokens.TTokenKind.CARDINALTOK,ActualParamType,true);
                if ((ConstVal < 0) || (ConstVal > 0xFFFFFF)) pas.Messages.Error(i,"Range check error while evaluating constants (" + pas.StringUtilities.IntToStr(ConstVal) + " must be between 0 and " + pas.StringUtilities.IntToStr(0xFFFFFF) + ")");
              };
              ConstVal += 1;
            };
            if (IdType === pas.Tokens.TTokenKind.IDENTTOK) IdType = rtl.rc(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex(pas.Common.TokenAt(idx).Name)).IdType,0,191);
            tmpVarDataSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
            for (var $l12 = 1, $end11 = NumVarOfSameType; $l12 <= $end11; $l12++) {
              VarOfSameTypeIndex = $l12;
              if (VarType === pas.Tokens.TTokenKind.DEREFERENCEARRAYTOK) {
                VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
                NestedNumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
                IdType = rtl.rc(pas.Tokens.TTokenKind.DEREFERENCEARRAYTOK,0,191);
                NumAllocElements = 1;
              };
              if (VarType === pas.Tokens.TTokenKind.ENUMTOK) {
                pas.Parser.DefineIdent(i,rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,AllocElementType,0,pas.Tokens.TTokenKind.UNTYPETOK,0,IdType);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).DataType = rtl.rc(pas.Tokens.TTokenKind.ENUMTOK,0,191);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType = rtl.rc(AllocElementType,0,191);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
              } else {
                pas.Parser.DefineIdent(i,rtl.rcArrR(VarOfSameType,VarOfSameTypeIndex - 1).Name,pas.Tokens.TTokenKind.VARTOK,VarType,NumAllocElements,AllocElementType,(isAbsolute + 0) * ConstVal,IdType);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedDataType = rtl.rc(NestedDataType,0,191);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedAllocElementType = rtl.rc(NestedAllocElementType,0,191);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).NestedNumAllocElements = rtl.rc(NestedNumAllocElements,0,4294967295);
                pas.Common.IdentifierAt(pas.Common.NumIdent()).isVolatile = isVolatile;
                if (VarPassMethod !== pas.CompilerTypes.TParameterPassingMethod.UNDEFINED) pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod = rtl.rc(VarPassMethod,0,3);
                if (isStriped && (pas.Common.IdentifierAt(pas.Common.NumIdent()).PassMethod !== pas.CompilerTypes.TParameterPassingMethod.VARPASSING)) {
                  if (rtl.lw(NumAllocElements >>> 16) > 0) {
                    yes = ((NumAllocElements & 0xFFFF) * rtl.lw(NumAllocElements >>> 16)) <= 256}
                   else yes = NumAllocElements <= 256;
                  if (yes) {
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).isStriped = true}
                   else pas.Messages.WarningStripedAllowed(i);
                };
                VarPassMethod = rtl.rc(pas.CompilerTypes.TParameterPassingMethod.UNDEFINED,0,3);
                if ((VarType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType === pas.Tokens.TTokenKind.STRINGPOINTERTOK) && (NestedNumAllocElements > 0) && (NumAllocElements > 1)) {
                  if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isAbsolute) pas.Messages.Error(i,"ABSOLUTE modifier is not available for this type of array");
                  idx = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).Value - 32768,-2147483648,2147483647);
                  if (rtl.lw(NumAllocElements >>> 16) > 0) {
                    for (var $l13 = 0, $end12 = ((NumAllocElements & 0xFFFF) * rtl.lw(NumAllocElements >>> 16)) - 1; $l13 <= $end12; $l13++) {
                      j = $l13;
                      pas.Parser.SaveToDataSegment(idx,pas.Common.GetVarDataSize(),pas.Tokens.TTokenKind.DATAORIGINOFFSET);
                      idx += 2;
                      pas.Common.IncVarDataSize(i,NestedNumAllocElements);
                    };
                  } else {
                    for (var $l14 = 0, $end13 = NumAllocElements - 1; $l14 <= $end13; $l14++) {
                      j = $l14;
                      pas.Parser.SaveToDataSegment(idx,pas.Common.GetVarDataSize(),pas.Tokens.TTokenKind.DATAORIGINOFFSET);
                      idx += 2;
                      pas.Common.IncVarDataSize(i,NestedNumAllocElements);
                    };
                  };
                };
              };
              $impl.CompileRecordDeclaration(i,{get: function () {
                  return VarOfSameType;
                }, set: function (v) {
                  VarOfSameType = v;
                }},{get: function () {
                  return tmpVarDataSize;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  tmpVarDataSize = v;
                }},{get: function () {
                  return ConstVal;
                }, set: function (v) {
                  rtl.rc(v,-9007199254740991,9007199254740991);
                  ConstVal = v;
                }},VarOfSameTypeIndex,VarType,AllocElementType,NumAllocElements,isAbsolute,{get: function () {
                  return idx;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  idx = v;
                }});
            };
            if (isExternal) {
              pas.Common.IdentifierAt(pas.Common.NumIdent()).isExternal = true;
              pas.Common.IdentifierAt(pas.Common.NumIdent()).Alias = external_name;
              pas.Common.IdentifierAt(pas.Common.NumIdent()).Libraries = rtl.rc(external_libr,-2147483648,2147483647);
            };
            if (isAbsolute && (open_array === false)) {
              pas.Common.SetVarDataSize(i,tmpVarDataSize)}
             else if (pas.Common.TokenAt(i + 1).Kind === pas.Tokens.TTokenKind.EQTOK) {
              if (pas.Common.IdentifierAt(pas.Common.NumIdent()).isStriped) pas.Messages.Error(i + 1,"Initialization for striped array not allowed");
              if (VarType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK)) pas.Messages.Error(i + 1,"Initialization for " + pas.Tokens.InfoAboutToken(VarType) + " not allowed");
              if (NumVarOfSameType > 1) pas.Messages.Error(i + 1,"Only one variable can be initialized");
              i += 1;
              if ((VarType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType in rtl.createSet(pas.Tokens.TTokenKind.RECORDTOK,pas.Tokens.TTokenKind.OBJECTTOK))) {}
              else idx = rtl.rc(pas.Common.IdentifierAt(pas.Common.NumIdent()).Value - 32768,-2147483648,2147483647);
              if (!(VarType in pas.Datatypes.Pointers)) {
                pas.Common.IdentifierAt(pas.Common.NumIdent()).isInitialized = true;
                i = rtl.rc(pas.Parser.CompileConstExpression(i + 1,{get: function () {
                    return ConstVal;
                  }, set: function (v) {
                    rtl.rc(v,-9007199254740991,9007199254740991);
                    ConstVal = v;
                  }},{get: function () {
                    return ActualParamType;
                  }, set: function (v) {
                    rtl.rc(v,0,191);
                    ActualParamType = v;
                  }},pas.Tokens.TTokenKind.INTEGERTOK,false,true),-2147483648,2147483647);
                if ((VarType in pas.Datatypes.RealTypes) && (ActualParamType === pas.Tokens.TTokenKind.REALTOK)) ActualParamType = rtl.rc(VarType,0,191);
                pas.Common.GetCommonConstType(i,VarType,ActualParamType,true);
                pas.Parser.SaveToDataSegment(idx,ConstVal,VarType);
              } else {
                pas.Common.IdentifierAt(pas.Common.NumIdent()).isInit = true;
                i += 1;
                if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.ADDRESSTOK) {
                  if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
                    pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.IdentifierExpected)}
                   else {
                    IdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
                    if (IdentIndex > 0) {
                      if (pas.Common.IdentifierAt(IdentIndex).Kind === pas.Tokens.TTokenKind.CONSTTOK) {
                        if (!((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0))) {
                          pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.CantAdrConstantExp)}
                         else pas.Parser.SaveToDataSegment(idx,pas.Common.IdentifierAt(IdentIndex).Value - 256 - pas.Common.CODEORIGIN_BASE,pas.Tokens.TTokenKind.CODEORIGINOFFSET);
                      } else pas.Parser.SaveToDataSegment(idx,pas.Common.IdentifierAt(IdentIndex).Value - 32768,pas.Tokens.TTokenKind.DATAORIGINOFFSET);
                      VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
                    } else pas.Messages.Error$2(i + 1,pas.Messages.TErrorCode.UnknownIdentifier);
                  };
                  i += 1;
                } else if (pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.CHARLITERALTOK) {
                  pas.Parser.SaveToDataSegment(idx,1,pas.Tokens.TTokenKind.BYTETOK);
                  pas.Parser.SaveToDataSegment(idx + 1,pas.Common.TokenAt(i).Value,pas.Tokens.TTokenKind.BYTETOK);
                  VarType = rtl.rc(pas.Tokens.TTokenKind.POINTERTOK,0,191);
                } else if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) && (open_array === false) && (VarType === pas.Tokens.TTokenKind.POINTERTOK) && (AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                  pas.Parser.SaveToDataSegment(idx,(pas.Common.TokenAt(i).StrAddress - 256) + 1,pas.Tokens.TTokenKind.CODEORIGINOFFSET)}
                 else if ((pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements in rtl.createSet(0,1)) && (open_array === false)) {
                  pas.Messages.Error$2(i,pas.Messages.TErrorCode.IllegalExpression)}
                 else if (open_array) {
                  if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) && (AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc((pas.Common.TokenAt(i).StrAddress - 256) + pas.Common.CODEORIGIN_BASE,-9007199254740991,9007199254740991);
                    if (VarType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Common.IdentifierAt(pas.Common.NumIdent()).Value += 1;
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(pas.Common.TokenAt(i).StrLength,0,4294967295);
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).isAbsolute = true;
                    NumAllocElements = 0;
                  } else {
                    i = rtl.rc($impl.ReadDataOpenArray(i,idx,pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType,{get: function () {
                        return NumAllocElements;
                      }, set: function (v) {
                        rtl.rc(v,0,4294967295);
                        NumAllocElements = v;
                      }},false,pas.Common.TokenAt(i - 2).Kind === pas.Tokens.TTokenKind.PCHARTOK),-2147483648,2147483647);
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(NumAllocElements,0,4294967295);
                  };
                  pas.Common.IncVarDataSize(i,NumAllocElements * pas.Datatypes.GetDataSize(pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType));
                } else {
                  if ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) && (AllocElementType === pas.Tokens.TTokenKind.CHARTOK)) {
                    if (pas.Common.TokenAt(i).StrLength > NumAllocElements) pas.Messages.Error(i,"string length is larger than array of char length");
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).Value = rtl.rc((pas.Common.TokenAt(i).StrAddress - 256) + pas.Common.CODEORIGIN_BASE,-9007199254740991,9007199254740991);
                    if (VarType !== pas.Tokens.TTokenKind.STRINGPOINTERTOK) pas.Common.IdentifierAt(pas.Common.NumIdent()).Value += 1;
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements = rtl.rc(pas.Common.TokenAt(i).StrLength,0,4294967295);
                    pas.Common.IdentifierAt(pas.Common.NumIdent()).isAbsolute = true;
                  } else i = rtl.rc($impl.ReadDataArray(i,idx,pas.Common.IdentifierAt(pas.Common.NumIdent()).AllocElementType,rtl.lw(pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements | rtl.lw(pas.Common.IdentifierAt(pas.Common.NumIdent()).NumAllocElements_ << 16)),false,pas.Common.TokenAt(i - 2).Kind === pas.Tokens.TTokenKind.PCHARTOK),-2147483648,2147483647);
                };
              };
            };
            pas.Common.CheckTok(i + 1,pas.Tokens.TTokenKind.SEMICOLONTOK);
            isVolatile = false;
            isStriped = false;
            if ((pas.Common.TokenAt(i + 2).Kind === pas.Tokens.TTokenKind.OBRACKETTOK) && (pas.Common.TokenAt(i + 3).Kind in rtl.createSet(pas.Tokens.TTokenKind.VOLATILETOK,pas.Tokens.TTokenKind.STRIPEDTOK))) {
              pas.Common.CheckTok(i + 4,pas.Tokens.TTokenKind.CBRACKETTOK);
              if (pas.Common.TokenAt(i + 3).Kind === pas.Tokens.TTokenKind.VOLATILETOK) {
                isVolatile = true}
               else isStriped = true;
              i += 3;
            };
            i = rtl.rc(i + 1,-2147483648,2147483647);
          } while (!(pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK));
          $impl.CheckForwardResolutions(false);
          i = rtl.rc(i + 1,-2147483648,2147483647);
        };
        if (pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) if (pas.Common.TokenAt(i + 1).Kind !== pas.Tokens.TTokenKind.IDENTTOK) {
          pas.Messages.Error(i + 1,"Procedure name expected but " + pas.Common.TokenList.GetTokenSpellingAtIndex(i + 1) + " found")}
         else {
          IsNestedFunction = pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK;
          if (pas.Common.INTERFACETOK_USE) {
            ForwardIdentIndex = 0}
           else ForwardIdentIndex = rtl.rc(pas.Parser.GetIdentIndex(pas.Common.TokenAt(i + 1).Name),-2147483648,2147483647);
          if ((ForwardIdentIndex !== 0) && pas.Common.IdentifierAt(ForwardIdentIndex).isOverload) {
            j = rtl.rc(i,-2147483648,2147483647);
            $impl.FormalParameterList({get: function () {
                return j;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                j = v;
              }},{get: function () {
                return ParamIndex;
              }, set: function (v) {
                rtl.rc(v,-2147483648,2147483647);
                ParamIndex = v;
              }},{get: function () {
                return Param;
              }, set: function (v) {
                Param = v;
              }},{get: function () {
                return TmpResult;
              }, set: function (v) {
                rtl.rc(v,0,65535);
                TmpResult = v;
              }},IsNestedFunction,{get: function () {
                return NestedFunctionResultType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                NestedFunctionResultType = v;
              }},{get: function () {
                return NestedFunctionNumAllocElements;
              }, set: function (v) {
                rtl.rc(v,0,4294967295);
                NestedFunctionNumAllocElements = v;
              }},{get: function () {
                return NestedFunctionAllocElementType;
              }, set: function (v) {
                rtl.rc(v,0,191);
                NestedFunctionAllocElementType = v;
              }});
            ForwardIdentIndex = rtl.rc($impl.GetIdentProc(pas.Common.IdentifierAt(ForwardIdentIndex).Name,ForwardIdentIndex,pas.CompilerTypes.TParamList$clone(Param),ParamIndex),-2147483648,2147483647);
          };
          if (ForwardIdentIndex !== 0) if (pas.Common.IdentifierAt(ForwardIdentIndex).IsUnresolvedForward && (pas.Common.IdentifierAt(ForwardIdentIndex).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) if (pas.Common.TokenAt(i).Kind !== pas.Common.IdentifierAt(ForwardIdentIndex).Kind) pas.Messages.Error(i,"Unresolved forward declaration of " + pas.Common.IdentifierAt(ForwardIdentIndex).Name);
          if (ForwardIdentIndex !== 0) if (!pas.Common.IdentifierAt(ForwardIdentIndex).IsUnresolvedForward || (pas.Common.IdentifierAt(ForwardIdentIndex).Block !== rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop)) || ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.PROCEDURETOK) && (pas.Common.IdentifierAt(ForwardIdentIndex).Kind !== pas.Tokens.TTokenKind.PROCEDURETOK)) || ((pas.Common.TokenAt(i).Kind === pas.Tokens.TTokenKind.FUNCTIONTOK) && (pas.Common.IdentifierAt(ForwardIdentIndex).Kind !== pas.Tokens.TTokenKind.FUNCTIONTOK))) ForwardIdentIndex = 0;
          if ((pas.Common.TokenAt(i).Kind in rtl.createSet(pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) && (ForwardIdentIndex === 0)) pas.Messages.Error(i,"constructors, destructors operators must be methods");
          i = rtl.rc(pas.Parser.DefineFunction(i,ForwardIdentIndex,{get: function () {
              return isForward;
            }, set: function (v) {
              isForward = v;
            }},{get: function () {
              return isInt;
            }, set: function (v) {
              isInt = v;
            }},{get: function () {
              return isInl;
            }, set: function (v) {
              isInl = v;
            }},{get: function () {
              return isOvr;
            }, set: function (v) {
              isOvr = v;
            }},{get: function () {
              return IsNestedFunction;
            }, set: function (v) {
              IsNestedFunction = v;
            }},{get: function () {
              return NestedFunctionResultType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedFunctionResultType = v;
            }},{get: function () {
              return NestedFunctionNumAllocElements;
            }, set: function (v) {
              rtl.rc(v,0,4294967295);
              NestedFunctionNumAllocElements = v;
            }},{get: function () {
              return NestedFunctionAllocElementType;
            }, set: function (v) {
              rtl.rc(v,0,191);
              NestedFunctionAllocElementType = v;
            }}),-2147483648,2147483647);
          if (((ForwardIdentIndex === 0) && isForward) || pas.Common.INTERFACETOK_USE) {
            pas.Common.IdentifierAt(pas.Common.NumIdent()).IsUnresolvedForward = true;
          } else {
            if (ForwardIdentIndex === 0) {
              $impl.TestIdentProc(i,pas.Common.IdentifierAt(pas.Common.NumIdent()).Name);
              if ((pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) && !pas.Common.IdentifierAt(pas.Common.NumIdent()).IsNotDead) {
                pas.Common.OutputDisabled = true;
              };
              iocheck_old = pas.Common.IOCheck;
              isInterrupt_old = pas.Common.isInterrupt;
              j = rtl.rc($impl.CompileBlock(i + 1,pas.Common.NumIdent(),pas.Common.IdentifierAt(pas.Common.NumIdent()).NumParams,IsNestedFunction,NestedFunctionResultType,NestedFunctionNumAllocElements,NestedFunctionAllocElementType),-2147483648,2147483647);
              pas.Common.IOCheck = iocheck_old;
              pas.Common.isInterrupt = isInterrupt_old;
              i = rtl.rc(j + 1,-2147483648,2147483647);
              $impl.GenerateReturn(IsNestedFunction,isInt,isInl,isOvr);
              if (pas.Common.OutputDisabled) pas.Common.OutputDisabled = false;
            } else {
              if ((pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) && !pas.Common.IdentifierAt(ForwardIdentIndex).IsNotDead) {
                pas.Common.OutputDisabled = true;
              };
              pas.Common.IdentifierAt(ForwardIdentIndex).Value = rtl.rc(pas.Common.CodeSize,-9007199254740991,9007199254740991);
              $impl.FormalParameterList({get: function () {
                  return i;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  i = v;
                }},{get: function () {
                  return ParamIndex;
                }, set: function (v) {
                  rtl.rc(v,-2147483648,2147483647);
                  ParamIndex = v;
                }},{get: function () {
                  return Param;
                }, set: function (v) {
                  Param = v;
                }},{get: function () {
                  return TmpResult;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  TmpResult = v;
                }},IsNestedFunction,{get: function () {
                  return NestedFunctionResultType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  NestedFunctionResultType = v;
                }},{get: function () {
                  return NestedFunctionNumAllocElements;
                }, set: function (v) {
                  rtl.rc(v,0,4294967295);
                  NestedFunctionNumAllocElements = v;
                }},{get: function () {
                  return NestedFunctionAllocElementType;
                }, set: function (v) {
                  rtl.rc(v,0,191);
                  NestedFunctionAllocElementType = v;
                }});
              i -= 2;
              if (ParamIndex > 0) {
                if (pas.Common.IdentifierAt(ForwardIdentIndex).NumParams !== ParamIndex) pas.Messages.Error(i,"Wrong number of parameters specified for call to " + "'" + pas.Common.IdentifierAt(ForwardIdentIndex).Name + "'");
                for (var $l15 = 1, $end14 = pas.Common.IdentifierAt(ForwardIdentIndex).NumParams; $l15 <= $end14; $l15++) {
                  ParamIndex = $l15;
                  if ((rtl.rcArrR(pas.Common.IdentifierAt(ForwardIdentIndex).Param,ParamIndex - 1).Name !== rtl.rcArrR(Param,ParamIndex - 1).Name) || (rtl.rcArrR(pas.Common.IdentifierAt(ForwardIdentIndex).Param,ParamIndex - 1).DataType !== rtl.rcArrR(Param,ParamIndex - 1).DataType)) pas.Messages.Error(i,"Function header '" + pas.Common.IdentifierAt(ForwardIdentIndex).Name + "' doesn't match forward : " + rtl.rcArrR(pas.Common.IdentifierAt(ForwardIdentIndex).Param,ParamIndex - 1).Name + " <> " + rtl.rcArrR(Param,ParamIndex - 1).Name);
                };
                for (var $l16 = 1, $end15 = pas.Common.IdentifierAt(ForwardIdentIndex).NumParams; $l16 <= $end15; $l16++) {
                  ParamIndex = $l16;
                  if (rtl.rcArrR(pas.Common.IdentifierAt(ForwardIdentIndex).Param,ParamIndex - 1).PassMethod !== rtl.rcArrR(Param,ParamIndex - 1).PassMethod) pas.Messages.Error(i,"Function header doesn't match the previous declaration '" + pas.Common.IdentifierAt(ForwardIdentIndex).Name + "'");
                };
              };
              Tmp = 0;
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isKeep) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mKeep,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isOverload) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mOverload,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isAsm) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mAssembler,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isRegister) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mRegister,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isInterrupt) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mInterrupt,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isPascal) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mPascal,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isStdCall) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mStdCall,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (pas.Common.IdentifierAt(ForwardIdentIndex).isInline) pas.CompilerTypes.SetModifierBit(pas.CompilerTypes.TModifierCode.mInline,{get: function () {
                  return Tmp;
                }, set: function (v) {
                  rtl.rc(v,0,65535);
                  Tmp = v;
                }});
              if (Tmp !== TmpResult) pas.Messages.Error(i,"Function header doesn't match the previous declaration '" + pas.Common.IdentifierAt(ForwardIdentIndex).Name + "'. Different modifiers.");
              if (IsNestedFunction) if ((pas.Common.IdentifierAt(ForwardIdentIndex).DataType !== NestedFunctionResultType) || (pas.Common.IdentifierAt(ForwardIdentIndex).NestedFunctionNumAllocElements !== NestedFunctionNumAllocElements) || (pas.Common.IdentifierAt(ForwardIdentIndex).NestedFunctionAllocElementType !== NestedFunctionAllocElementType)) pas.Messages.Error(i,"Function header doesn't match the previous declaration '" + pas.Common.IdentifierAt(ForwardIdentIndex).Name + "'");
              pas.Common.CheckTok(i + 2,pas.Tokens.TTokenKind.SEMICOLONTOK);
              iocheck_old = pas.Common.IOCheck;
              isInterrupt_old = pas.Common.isInterrupt;
              j = rtl.rc($impl.CompileBlock(i + 3,ForwardIdentIndex,pas.Common.IdentifierAt(ForwardIdentIndex).NumParams,IsNestedFunction,pas.Common.IdentifierAt(ForwardIdentIndex).DataType,pas.Common.IdentifierAt(ForwardIdentIndex).NestedFunctionNumAllocElements,pas.Common.IdentifierAt(ForwardIdentIndex).NestedFunctionAllocElementType),-2147483648,2147483647);
              pas.Common.IOCheck = iocheck_old;
              pas.Common.isInterrupt = isInterrupt_old;
              i = rtl.rc(j + 1,-2147483648,2147483647);
              $impl.GenerateReturn(IsNestedFunction,pas.Common.IdentifierAt(ForwardIdentIndex).isInterrupt,pas.Common.IdentifierAt(ForwardIdentIndex).isInline,pas.Common.IdentifierAt(ForwardIdentIndex).isOverload);
              if (pas.Common.OutputDisabled) pas.Common.OutputDisabled = false;
              pas.Common.IdentifierAt(ForwardIdentIndex).IsUnresolvedForward = false;
            };
          };
          pas.Common.CheckTok(i,pas.Tokens.TTokenKind.SEMICOLONTOK);
          i += 1;
        };
      };
      pas.Common.OutputDisabled = (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) && (rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop) !== 1) && !pas.Common.IdentifierAt(BlockIdentIndex).IsNotDead;
      if (!isAsm) {
        $impl.GenerateDeclarationEpilog();
        if (!(pas.Common.TokenAt(i - 1).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCALIGNTOK,pas.Tokens.TTokenKind.LOOPALIGNTOK,pas.Tokens.TTokenKind.LINKALIGNTOK))) if (pas.Common.LIBRARYTOK_USE && (pas.Common.TokenAt(i).Kind !== pas.Tokens.TTokenKind.BEGINTOK)) {
          i += 1}
         else pas.Common.CheckTok(i,pas.Tokens.TTokenKind.BEGINTOK);
      };
      Result = rtl.rc($impl.CompileStatement(i,isAsm),-2147483648,2147483647);
      j = rtl.rc(pas.Common.NumIdent(),-2147483648,2147483647);
      while ((j > 0) && (pas.Common.IdentifierAt(j).Block === rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop))) {
        if (pas.Common.IdentifierAt(j).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) if (pas.Common.IdentifierAt(j).IsUnresolvedForward && (pas.Common.IdentifierAt(j).isExternal === false)) pas.Messages.Error(i,"Unresolved forward declaration of " + pas.Common.IdentifierAt(j).Name);
        j -= 1;
      };
      if (IsFunction) {
        pas.Optimize.asm65("@exit","");
        if (pas.Common.IdentifierAt(BlockIdentIndex).isStdCall || pas.Common.IdentifierAt(BlockIdentIndex).isRecursion) {
          $impl.Push(pas.Common.IdentifierAt(pas.Parser.GetIdentIndex("RESULT")).Value,1,pas.Datatypes.GetDataSize(FunctionResultType),pas.Parser.GetIdentIndex("RESULT"),0);
          pas.Optimize.asm65("","");
          if (!isInl) {
            pas.Optimize.asm65("\t.ifdef @new","");
            pas.Optimize.asm65("\tlda <@VarData","");
            pas.Optimize.asm65("\tsta :ztmp","");
            pas.Optimize.asm65("\tlda >@VarData","");
            pas.Optimize.asm65("\tldy #@VarDataSize-1","");
            pas.Optimize.asm65("\tjmp @FreeMem","");
            pas.Optimize.asm65("\teif","");
          };
        };
      };
      if (pas.Common.IdentifierAt(BlockIdentIndex).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) {
        if (pas.Common.IdentifierAt(BlockIdentIndex).isInline) pas.Optimize.asm65("\t.ENDM","");
        $impl.GenerateProcFuncAsmLabels(BlockIdentIndex,true);
      };
      pas.Common.BlockStackTop -= 1;
      if (pas.Common.pass === pas.CompilerTypes.TPass.CALL_DETERMINATION) if (pas.Common.IdentifierAt(BlockIdentIndex).isKeep || pas.Common.IdentifierAt(BlockIdentIndex).isInterrupt || pas.Common.IdentifierAt(BlockIdentIndex).updateResolvedForward) $impl.AddCallGraphChild(rtl.rcArrR(pas.Common.BlockStack,pas.Common.BlockStackTop),pas.Common.IdentifierAt(BlockIdentIndex).ProcAsBlock);
      return Result;
    };
    $impl.CompileResources = function () {
      var i = 0;
      var j = 0;
      var a = "";
      var res = pas.CompilerTypes.TResource.$new();
      if (((rtl.length(pas.Common.resArray) - 1) > 0) && (pas.Common.target.id !== pas.Targets.TTargetID.A8)) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65(".local\tRESOURCE","");
        pas.Optimize.asm65("\ticl '" + pas.Utilities.AnsiLowerCase(pas.Common.target.Name) + "\\resource.asm'","");
        pas.Optimize.asm65("","");
        for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
          i = $l;
          if (rtl.rcArrR(pas.Common.resArray,i).resStream === false) {
            j = rtl.rc(pas.Common.NumIdent(),-2147483648,2147483647);
            while ((j > 0) && (pas.Common.IdentifierAt(j).SourceFile.UnitIndex === 1)) {
              if (pas.Common.IdentifierAt(j).Name === rtl.rcArrR(pas.Common.resArray,i).resName) {
                rtl.rcArrR(pas.Common.resArray,i).resValue = rtl.rc(pas.Common.IdentifierAt(j).Value,-2147483648,2147483647);
                break;
              };
              j -= 1;
            };
          };
        };
        for (var $l1 = 0, $end1 = rtl.length(pas.Common.resArray) - 1 - 1; $l1 <= $end1; $l1++) {
          i = $l1;
          for (var $l2 = 0, $end2 = rtl.length(pas.Common.resArray) - 1 - 1; $l2 <= $end2; $l2++) {
            j = $l2;
            if (rtl.rcArrR(pas.Common.resArray,i).resValue < rtl.rcArrR(pas.Common.resArray,j).resValue) {
              res.$assign(rtl.rcArrR(pas.Common.resArray,j));
              rtl.rcArrR(pas.Common.resArray,j).$assign(rtl.rcArrR(pas.Common.resArray,i));
              rtl.rcArrR(pas.Common.resArray,i).$assign(res);
            };
          };
        };
        for (var $l3 = 0, $end3 = rtl.length(pas.Common.resArray) - 1 - 1; $l3 <= $end3; $l3++) {
          i = $l3;
          if (rtl.rcArrR(pas.Common.resArray,i).resStream === false) {
            a = "\t" + rtl.rcArrR(pas.Common.resArray,i).resType + " '" + rtl.rcArrR(pas.Common.resArray,i).resFile + "'" + " ";
            a = a + rtl.rcArrR(pas.Common.resArray,i).resFullName;
            for (j = 1; j <= 8; j++) a = a + " " + rtl.rcArrR(rtl.rcArrR(pas.Common.resArray,i).resPar,j - 1);
            pas.Optimize.asm65(a,"");
          };
        };
        pas.Optimize.asm65(".endl","");
      };
    };
    $impl.CompileMemoryWord = function (memory, index, tmp) {
      rtl.rc(index,-2147483648,2147483647);
      var Value = 0;
      Value = rtl.rc(rtl.rcArrR(memory,index),0,65535);
      if ((Value & 0xc000) === 0x8000) {
        tmp.set(tmp.get() + " <[DATAORIGIN+$" + pas.SysUtils.IntToHex(rtl.rc(Value,0,255) | (rtl.rc(rtl.rcArrR(memory,index + 1),0,255) << 8),4) + "]")}
       else if ((Value & 0xc000) === 0x4000) {
        tmp.set(tmp.get() + " >[DATAORIGIN+$" + pas.SysUtils.IntToHex(rtl.rc(rtl.rcArrR(memory,index - 1),0,255) | (rtl.rc(Value,0,255) << 8),4) + "]")}
       else if ((Value & 0x3000) === 0x2000) {
        tmp.set(tmp.get() + " <[CODEORIGIN+$" + pas.SysUtils.IntToHex(rtl.rc(Value,0,255) | (rtl.rc(rtl.rcArrR(memory,index + 1),0,255) << 8),4) + "]")}
       else if ((Value & 0x3000) === 0x1000) {
        tmp.set(tmp.get() + " >[CODEORIGIN+$" + pas.SysUtils.IntToHex(rtl.rc(rtl.rcArrR(memory,index - 1),0,255) | (rtl.rc(Value,0,255) << 8),4) + "]")}
       else tmp.set(tmp.get() + " $" + pas.SysUtils.IntToHex(rtl.rc(Value,0,255),2));
    };
    $impl.CompileStaticData = function () {
      var i = 0;
      var tmp = "";
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".macro\tSTATICDATA","");
      tmp = "";
      for (var $l = 0, $end = pas.Common.NumStaticStrChars - 1; $l <= $end; $l++) {
        i = $l;
        if ((i % 24) === 0) {
          if (i > 0) pas.Optimize.asm65(tmp,"");
          tmp = ".by ";
        } else if ((i > 0) && ((i % 8) === 0)) tmp = tmp + " ";
        $impl.CompileMemoryWord(pas.Common.StaticStringData,i,{get: function () {
            return tmp;
          }, set: function (v) {
            tmp = v;
          }});
      };
      if (tmp !== "") pas.Optimize.asm65(tmp,"");
      pas.Optimize.asm65(".endm","");
    };
    $impl.CompileDataOrigin = function () {
      var DataSegmentSize = 0;
      var j = 0;
      var tmp = "";
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("DATAORIGIN","");
      if (pas.Common.DataSegmentUse) {
        if (pas.Common.pass === pas.CompilerTypes.TPass.CODE_GENERATION) {
          if (pas.Common.LIBRARYTOK_USE) {
            DataSegmentSize = rtl.rc(pas.Common.GetVarDataSize(),-2147483648,2147483647);
          } else {
            DataSegmentSize = 0;
            for (var $l = pas.Common.GetVarDataSize() - 1; $l >= 0; $l--) {
              j = $l;
              if (rtl.rcArrR(pas.Common._DataSegment,j) !== 0) {
                DataSegmentSize = rtl.rc(j + 1,-2147483648,2147483647);
                break;
              };
            };
          };
          tmp = "";
          for (var $l1 = 0, $end = DataSegmentSize - 1; $l1 <= $end; $l1++) {
            j = $l1;
            if ((j % 24) === 0) {
              if (tmp !== "") pas.Optimize.asm65(tmp,"");
              tmp = ".by";
            };
            if ((j % 8) === 0) tmp = tmp + " ";
            $impl.CompileMemoryWord(pas.Common._DataSegment,j,{get: function () {
                return tmp;
              }, set: function (v) {
                tmp = v;
              }});
          };
          if (tmp !== "") pas.Optimize.asm65(tmp,"");
        };
      };
      if (pas.Common.LIBRARYTOK_USE) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("PROGRAMSTACK","");
      } else {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("VARINITSIZE\t= *-DATAORIGIN","");
        pas.Optimize.asm65("VARDATASIZE\t= " + pas.StringUtilities.IntToStr(pas.Common.GetVarDataSize()),"");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("PROGRAMSTACK\t= DATAORIGIN+VARDATASIZE","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\t.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\tert DATAORIGIN<@end,'DATA memory overlap'","");
    };
    $impl.CompileProgram = function (pass) {
      rtl.rc(pass,0,2);
      var i = 0;
      var j = 0;
      var IdentIndex = 0;
      var tmp = "";
      var yes = false;
      var SourceFile = null;
      pas.System.Writeln("Pass " + pas.StringUtilities.IntToStr(pass) + ".");
      pas.Common.pass = rtl.rc(pass,0,2);
      pas.Optimize.ResetOpty();
      pas.Common.optimize.use = false;
      pas.Common.SetVarDataSize(0,0);
      tmp = "";
      pas.Common.IOCheck = true;
      pas.Common.AsmBlockIndex = 0;
      pas.Parser.DefineIdent(1,"MAIN",pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.IDENTTOK);
      $impl.GenerateProgramProlog();
      j = rtl.rc($impl.CompileBlock(1,pas.Common.NumIdent(),0,false,pas.Tokens.TTokenKind.UNTYPETOK,0,pas.Tokens.TTokenKind.UNTYPETOK),-2147483648,2147483647);
      if (pas.Common.TokenAt(j).Kind === pas.Tokens.TTokenKind.ENDTOK) {
        pas.Common.CheckTok(j + 1,pas.Tokens.TTokenKind.DOTTOK)}
       else if (pas.Common.TokenAt(pas.Common.NumTok()).Kind === pas.Tokens.TTokenKind.EOFTOK) pas.Messages.Error(pas.Common.NumTok(),"Unexpected end of file");
      j = rtl.rc(pas.Common.NumIdent(),-2147483648,2147483647);
      while ((j > 0) && (pas.Common.IdentifierAt(j).SourceFile.UnitIndex === 1)) {
        if (pas.Common.IdentifierAt(j).Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) if (pas.Common.IdentifierAt(j).IsUnresolvedForward && (pas.Common.IdentifierAt(j).isExternal === false)) pas.Messages.Error(j,"Unresolved forward declaration of " + pas.Common.IdentifierAt(j).Name);
        j -= 1;
      };
      $impl.StopOptimization();
      pas.Optimize.asm65("@exit","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("@halt\tldx #$00","");
      pas.Optimize.asm65("\ttxs","");
      if (pas.Common.LIBRARY_USE) pas.Optimize.asm65("@regX\tldx #$00","");
      if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
        if (pas.Common.LIBRARY_USE === false) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\t.ifdef MAIN.@DEFINES.ROMOFF","");
          pas.Optimize.asm65("\tinc portb","");
          pas.Optimize.asm65("\t.fi","");
        };
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\tldy #$01","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\trts","");
      $impl.asm65separator(true);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".local\t@DEFINES","");
      for (j = 1; j <= 256; j++) if ((rtl.rcArrR(pas.Common.Defines,j - 1).Name !== "") && (rtl.rcArrR(pas.Common.Defines,j - 1).Macro === "")) pas.Optimize.asm65(rtl.rcArrR(pas.Common.Defines,j - 1).Name,"");
      pas.Optimize.asm65(".endl","");
      pas.Optimize.asm65("\r\n.local\t@RESOURCE","");
      for (var $l = 0, $end = rtl.length(pas.Common.resArray) - 1 - 1; $l <= $end; $l++) {
        i = $l;
        rtl.rcArrR(pas.Common.resArray,i).resStream = false;
        yes = false;
        for (var $l1 = 1, $end1 = pas.Common.NumIdent(); $l1 <= $end1; $l1++) {
          IdentIndex = $l1;
          if ((rtl.rcArrR(pas.Common.resArray,i).resName === pas.Common.IdentifierAt(IdentIndex).Name) && (pas.Common.IdentifierAt(IdentIndex).Block === 1)) {
            if ((pas.Common.IdentifierAt(IdentIndex).DataType in pas.Datatypes.Pointers) && (pas.Common.IdentifierAt(IdentIndex).NumAllocElements > 0)) {
              tmp = $impl.GetLocalName(IdentIndex,"adr.")}
             else tmp = $impl.GetLocalName(IdentIndex,"");
            if (rtl.rcArrR(pas.Common.resArray,i).resType === "LIBRARY") pas.Common.RCLIBRARY = true;
            rtl.rcArrR(pas.Common.resArray,i).resFullName = tmp;
            pas.Common.IdentifierAt(IdentIndex).Pass = rtl.rc(pass,0,2);
            yes = true;
            break;
          };
        };
        if (!yes) if (pas.Utilities.AnsiUpperCase(rtl.rcArrR(pas.Common.resArray,i).resType) === "SAPR") {
          pas.Optimize.asm65(rtl.rcArrR(pas.Common.resArray,i).resName,"");
          pas.Optimize.asm65("\tdta a(" + rtl.rcArrR(pas.Common.resArray,i).resName + ".end-" + rtl.rcArrR(pas.Common.resArray,i).resName + "-2)","");
          pas.Optimize.asm65("\tins '" + rtl.rcArrR(pas.Common.resArray,i).resFile + "'","");
          pas.Optimize.asm65(rtl.rcArrR(pas.Common.resArray,i).resName + ".end","");
          rtl.rcArrR(pas.Common.resArray,i).resStream = true;
        } else if (pas.Utilities.AnsiUpperCase(rtl.rcArrR(pas.Common.resArray,i).resType) === "PP") {
          pas.Optimize.asm65(rtl.rcArrR(pas.Common.resArray,i).resName + '\tm@pp "\'' + rtl.rcArrR(pas.Common.resArray,i).resFile + '\'"',"");
          pas.Optimize.asm65(rtl.rcArrR(pas.Common.resArray,i).resName + ".end","");
          rtl.rcArrR(pas.Common.resArray,i).resStream = true;
        } else if (pas.Utilities.AnsiUpperCase(rtl.rcArrR(pas.Common.resArray,i).resType) === "DOSFILE") {}
        else if (pas.Utilities.AnsiUpperCase(rtl.rcArrR(pas.Common.resArray,i).resType) === "RCDATA") {
          pas.Optimize.asm65(rtl.rcArrR(pas.Common.resArray,i).resName + "\tins '" + rtl.rcArrR(pas.Common.resArray,i).resFile + "'","");
          pas.Optimize.asm65(rtl.rcArrR(pas.Common.resArray,i).resName + ".end","");
          rtl.rcArrR(pas.Common.resArray,i).resStream = true;
        } else pas.Messages.Error(pas.Common.NumTok(),"Resource identifier not found: Type = " + rtl.rcArrR(pas.Common.resArray,i).resType + ", Name = " + rtl.rcArrR(pas.Common.resArray,i).resName);
      };
      pas.Optimize.asm65(".endl","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".endl","; MAIN");
      $impl.asm65separator(true);
      $impl.asm65separator(false);
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".macro\tUNITINITIALIZATION","");
      for (var $l2 = pas.Common.SourceFileList.Size(); $l2 >= 2; $l2--) {
        j = $l2;
        SourceFile = pas.Common.SourceFileList.GetSourceFile(j);
        if (SourceFile.IsRelevant()) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\t.ifdef MAIN." + SourceFile.Name + ".@UnitInit","");
          pas.Optimize.asm65("\tjsr MAIN." + SourceFile.Name + ".@UnitInit","");
          pas.Optimize.asm65("\t.fi","");
        };
      };
      pas.Optimize.asm65(".endm","");
      $impl.asm65separator(true);
      for (var $l3 = pas.Common.SourceFileList.Size(); $l3 >= 2; $l3--) {
        j = $l3;
        SourceFile = pas.Common.SourceFileList.GetSourceFile(j);
        if (SourceFile.IsRelevant()) {
          pas.Optimize.asm65("","");
          pas.Optimize.asm65("\tift .SIZEOF(MAIN." + SourceFile.Name + ") > 0","");
          pas.Optimize.asm65("\t.print '" + SourceFile.Name + ": " + "',MAIN." + SourceFile.Name + "," + "'..'" + "," + "MAIN." + SourceFile.Name + "+.SIZEOF(MAIN." + SourceFile.Name + ")-1","");
          pas.Optimize.asm65("\teif","");
        };
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".nowarn\t.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\tift .SIZEOF(MAIN.@RESOURCE)>0","");
      pas.Optimize.asm65(".nowarn\t.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1","");
      pas.Optimize.asm65("\teif","");
      pas.Optimize.asm65("","");
      for (var $l4 = 0, $end2 = rtl.length(pas.Common.resArray) - 1 - 1; $l4 <= $end2; $l4++) {
        i = $l4;
        if (rtl.rcArrR(pas.Common.resArray,i).resStream) pas.Optimize.asm65("\t.print '$R " + rtl.rcArrR(pas.Common.resArray,i).resName + "'," + "' '" + "," + '"\'' + rtl.rcArrR(pas.Common.resArray,i).resFile + '\'"' + "," + "' '" + ",MAIN.@RESOURCE." + rtl.rcArrR(pas.Common.resArray,i).resName + "," + "'..'" + ",MAIN.@RESOURCE." + rtl.rcArrR(pas.Common.resArray,i).resName + ".end-1","");
      };
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("@end","");
      pas.Optimize.asm65("","");
      pas.Optimize.asm65(".nowarn\t.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1","");
      $impl.asm65separator(true);
      pas.Optimize.asm65("","");
      if (pas.Common.DATA_BASE > 0) {
        pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.DATA_BASE,4),"")}
       else {
        pas.Optimize.asm65("\t?adr = *","");
        pas.Optimize.asm65("\tift (?adr < ?old_adr) && (?old_adr - ?adr < $120)","");
        pas.Optimize.asm65("\t?adr = ?old_adr","");
        pas.Optimize.asm65("\teif","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg ?adr","");
        pas.Optimize.asm65("\t?old_adr = *","");
      };
      $impl.CompileDataOrigin();
      if (pas.Common.FastMul > 0) {
        $impl.asm65separator(true);
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\ticl 'common\\fmul.asm'","; fast multiplication");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\t.print 'FMUL_INIT: ',fmulinit,'..',*-1","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\torg $" + pas.SysUtils.IntToHex(pas.Common.FastMul,2) + "00","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\t.print 'FMUL_DATA: ',*,'..',*+$07FF","");
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("square1_lo\t.ds $200","");
        pas.Optimize.asm65("square1_hi\t.ds $200","");
        pas.Optimize.asm65("square2_lo\t.ds $200","");
        pas.Optimize.asm65("square2_hi\t.ds $200","");
      };
      if (pas.Common.target.id === pas.Targets.TTargetID.A8) {
        pas.Optimize.asm65("","");
        pas.Optimize.asm65("\trun START","");
      };
      $impl.asm65separator(true);
      $impl.CompileStaticData();
      $impl.CompileResources();
      pas.Optimize.asm65("","");
      pas.Optimize.asm65("\tend","");
      pas.Optimize.FlushTempBuf();
    };
    var PI_VALUE = 3;
    var NAN_VALUE = 0x11111111;
    var INFINITY_VALUE = 0x22222222;
    var NEGINFINITY_VALUE = 0x33333333;
    $impl.InitializeIdentifiers = function () {
      pas.Parser.DefineIdent(1,"BLOCKREAD",pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.INTEGERTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0x0,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"BLOCKWRITE",pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.INTEGERTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0x0,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"GETRESOURCEHANDLE",pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.INTEGERTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0x0,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"NIL",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.POINTERTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,256,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"EOL",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.CHARTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,pas.Common.target.eol,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"__BUFFER",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.WORDTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,pas.Common.target.buf,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"TRUE",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.BOOLEANTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0x1,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"FALSE",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.BOOLEANTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,0x0,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"MAXINT",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.INTEGERTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,2147483647,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"MAXSMALLINT",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.INTEGERTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,32767,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"PI",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.REALTOK,0,pas.Tokens.TTokenKind.UNTYPETOK,PI_VALUE,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"NAN",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.SINGLETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,NAN_VALUE,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"INFINITY",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.SINGLETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,INFINITY_VALUE,pas.Tokens.TTokenKind.IDENTTOK);
      pas.Parser.DefineIdent(1,"NEGINFINITY",pas.Tokens.TTokenKind.CONSTTOK,pas.Tokens.TTokenKind.SINGLETOK,0,pas.Tokens.TTokenKind.UNTYPETOK,NEGINFINITY_VALUE,pas.Tokens.TTokenKind.IDENTTOK);
    };
  };
},["SysUtils","Math","Common","CommonTypes","Console","Datatypes","Debugger","MathEvaluate","Memory","Messages","Numbers","Scanner","Optimize","Parser","StringUtilities","Targets","Tokens","Utilities"]);
rtl.module("Diagnostic",["System","CompilerTypes"],function () {
  "use strict";
  var $mod = this;
  this.Diagnostics = function (ProgramUnit) {
    var i = 0;
    var CharIndex = 0;
    var ChildIndex = 0;
    var DiagFile = null;
    var token = null;
    var identifier = null;
    var $ir = rtl.createIntfRefs();
    try {
      DiagFile = rtl.setIntfL(DiagFile,pas.FileIO.TFileSystem.CreateTextFile(),true);
      DiagFile.Assign(pas.SysUtils.ChangeFileExt(ProgramUnit.Name,".txt"));
      DiagFile.Rewrite();
      DiagFile.WriteLn();
      DiagFile.WriteLn$1("Token list: ");
      DiagFile.WriteLn();
      $ir.ref(4,$ir.ref(3,$ir.ref(2,$ir.ref(1,DiagFile.Write$1("# ",6)).Write$1("Unit",30)).Write$1("Line",6)).Write$1("Token",30)).WriteLn();
      DiagFile.WriteLn();
      for (var $l = 1, $end = pas.Common.NumTok(); $l <= $end; $l++) {
        i = $l;
        token = pas.Common.TokenAt(i);
        $ir.ref(8,$ir.ref(7,$ir.ref(6,$ir.ref(5,DiagFile.Write$2(i,6)).Write$1(token.GetSourceFileName(),30)).Write$2(token.SourceLocation.Line,6)).Write$1(token.GetSpelling(),30)).WriteLn();
        if (token.Kind === pas.Tokens.TTokenKind.INTNUMBERTOK) {
          DiagFile.WriteLn$2(" = ",pas.SysUtils.IntToStr(token.Value))}
         else if (token.Kind === pas.Tokens.TTokenKind.FRACNUMBERTOK) {
          DiagFile.WriteLn$2(" = ",pas.SysUtils.FloatToStr(token.FracValue))}
         else if (token.Kind === pas.Tokens.TTokenKind.IDENTTOK) {
          DiagFile.WriteLn$2(" = ",token.Name)}
         else if (token.Kind === pas.Tokens.TTokenKind.CHARLITERALTOK) {
          DiagFile.WriteLn$2(" = ",String.fromCharCode(token.Value))}
         else if (token.Kind === pas.Tokens.TTokenKind.STRINGLITERALTOK) {
          $ir.ref(9,DiagFile.Write(" = "));
          for (var $l1 = 1, $end1 = token.StrLength; $l1 <= $end1; $l1++) {
            CharIndex = $l1;
            $ir.ref(10,DiagFile.Write$2(rtl.rcArrR(pas.Common.StaticStringData,(token.StrAddress - 256) + (CharIndex - 1)),-1));
          };
          DiagFile.WriteLn();
        } else DiagFile.WriteLn();
      };
      DiagFile.WriteLn();
      DiagFile.WriteLn$1("Identifier list: ");
      DiagFile.WriteLn();
      $ir.ref(18,$ir.ref(17,$ir.ref(16,$ir.ref(15,$ir.ref(14,$ir.ref(13,$ir.ref(12,$ir.ref(11,DiagFile.Write$1("#",6)).Write$1("Block",6)).Write$1("Name",30)).Write$1("Kind",15)).Write$1("Type",15)).Write$1("Items/Params",15)).Write$1("Value/Addr",15)).Write$1("Dead",5)).WriteLn();
      DiagFile.WriteLn();
      for (var $l2 = 1, $end2 = pas.Common.NumIdent(); $l2 <= $end2; $l2++) {
        i = $l2;
        identifier = pas.Common.IdentifierAt(i);
        $ir.ref(22,$ir.ref(21,$ir.ref(20,$ir.ref(19,DiagFile.Write$2(i,6)).Write$2(identifier.Block,6)).Write$1(identifier.Name,30)).Write$1(pas.Tokens.GetTokenSpelling(identifier.Kind),15));
        if (identifier.DataType !== pas.Tokens.TTokenKind.UNTYPETOK) {
          $ir.ref(23,DiagFile.Write$1(pas.Tokens.GetTokenSpelling(identifier.DataType),15));
        } else {
          $ir.ref(24,DiagFile.Write$1("N/A",15));
        };
        $ir.ref(26,$ir.ref(25,DiagFile.Write$2(identifier.NumAllocElements,15)).Write$1(pas.SysUtils.IntToHex(identifier.Value,8),15));
        if ((identifier.Kind in rtl.createSet(pas.Tokens.TTokenKind.PROCEDURETOK,pas.Tokens.TTokenKind.FUNCTIONTOK,pas.Tokens.TTokenKind.CONSTRUCTORTOK,pas.Tokens.TTokenKind.DESTRUCTORTOK)) && !identifier.IsNotDead) {
          $ir.ref(27,DiagFile.Write$1("Yes",5))}
         else $ir.ref(28,DiagFile.Write$1("",5));
      };
      DiagFile.WriteLn();
      DiagFile.WriteLn();
      DiagFile.WriteLn$1("Call graph: ");
      DiagFile.WriteLn();
      for (var $l3 = 1, $end3 = pas.Common.NumBlocks; $l3 <= $end3; $l3++) {
        i = $l3;
        $ir.ref(30,$ir.ref(29,DiagFile.Write$2(i,6)).Write("  ---> "));
        for (var $l4 = 1, $end4 = rtl.rcArrR(pas.Common.CallGraph,i - 1).NumChildren; $l4 <= $end4; $l4++) {
          ChildIndex = $l4;
          $ir.ref(31,DiagFile.Write$2(rtl.rcArrR(rtl.rcArrR(pas.Common.CallGraph,i - 1).ChildBlock,ChildIndex - 1),5));
        };
        DiagFile.WriteLn();
      };
      DiagFile.WriteLn();
      DiagFile.Close();
    } finally {
      $ir.free();
      rtl._Release(DiagFile);
    };
  };
},["SysUtils","Common","Datatypes","FileIO","Tokens"]);
rtl.module("program",["System","SysUtils","browserconsole","Common","Compiler","CompilerTypes","Console","Diagnostic","FileIO","Messages","Targets","Tokens","Utilities"],function () {
  "use strict";
  var $mod = this;
  this.Syntax = function (ExitCode) {
    rtl.rc(ExitCode,0,255);
    pas.System.Writeln("");
    pas.System.Writeln("Syntax: mp <inputfile>.pas [options]");
    pas.System.Writeln("");
    pas.System.Writeln("-ipath:<folder>    Add the folder <folder> to the unit include path");
    pas.System.Writeln("-define:<symbol>   Define the symbol <symbol>");
    pas.System.Writeln("-target:<platform> Specify the target platform: a8 (default), c4p, c64, neo, raw, x16");
    pas.System.Writeln("-cpu:<cpu>         Specify the CPU mode: 6502 (default), 65c02, 65816");
    pas.System.Writeln("-code:<address>    Specify the memory start address for the code");
    pas.System.Writeln("-data:<address>    Specify the memory start address for variables and arrays");
    pas.System.Writeln("-stack:<address>   Specify the memory start address for the software stack (64 bytes required)");
    pas.System.Writeln("-zpage:<address>   Specify the memory start address of variables in the zero page (26 bytes required)");
    pas.System.Writeln("-o:<outputfile>    Specify the output file path (default <inputfile>.a65)");
    pas.System.Writeln("-diag              Activate diagnostics mode");
    pas.Utilities.RaiseHaltException(ExitCode);
  };
  this.ParameterError = function (index, message) {
    rtl.rc(index,-2147483648,2147483647);
    var i = 0;
    pas.System.Write("Options: ");
    for (var $l = 1, $end = pas.Utilities.TEnvironment.GetParameterCount(); $l <= $end; $l++) {
      i = $l;
      if (i < index) {
        pas.Console.TextColor(10);
      } else if (i === index) {
        pas.Console.TextColor(12);
      } else {
        pas.Console.NormVideo();
      };
      pas.System.Write(pas.Utilities.TEnvironment.GetParameterString(i));
      pas.System.Write(" ");
    };
    pas.System.Writeln("");
    pas.Console.TextColor(12);
    pas.System.Writeln("ERROR: Check option number " + pas.SysUtils.IntToStr(index) + ". " + message);
    pas.Console.NormVideo();
    $mod.Syntax(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
  };
  this.ParameterValueError = function (index, parameterValue, message) {
    rtl.rc(index,-2147483648,2147483647);
    $mod.ParameterError(index,"Invalid parameter value '" + parameterValue + "'. " + message);
  };
  this.ParseHexParameter = function (index, parameterValue) {
    rtl.rc(index,-2147483648,2147483647);
    var Result = 0;
    var err = 0;
    pas.System.val$6("$" + parameterValue,{get: function () {
        return Result;
      }, set: function (v) {
        rtl.rc(v,-2147483648,2147483647);
        Result = v;
      }},{get: function () {
        return err;
      }, set: function (v) {
        rtl.rc(v,-2147483648,2147483647);
        err = v;
      }});
    if (err !== 0) $mod.ParameterValueError(index,parameterValue,"Value is no hexadeciment number.");
    if ((Result < 0) || (Result > 0x10000)) $mod.ParameterValueError(index,parameterValue,"Value must be between $0000-$FFFF.");
    return Result;
  };
  this.ParseCPUParameter = function (index, parameterValue) {
    rtl.rc(index,-2147483648,2147483647);
    var Result = 0;
    Result = rtl.rc(pas.Targets.TCPU.NONE,0,3);
    if (parameterValue !== "") if (parameterValue === "6502") {
      Result = rtl.rc(pas.Targets.TCPU.CPU_6502,0,3)}
     else if (parameterValue === "65C02") {
      Result = rtl.rc(pas.Targets.TCPU.CPU_65C02,0,3)}
     else if (parameterValue === "65816") {
      Result = rtl.rc(pas.Targets.TCPU.CPU_65816,0,3)}
     else $mod.ParameterError(index,"Invalid CPU '" + parameterValue + "'. Use on of '6502, 65C02, 65816'.");
    return Result;
  };
  this.ParseTargetParameter = function (index, parameterValue) {
    rtl.rc(index,-2147483648,2147483647);
    var Result = 0;
    Result = rtl.rc(pas.Targets.TTargetID.NONE,0,6);
    if (parameterValue === "A8") {
      Result = rtl.rc(pas.Targets.TTargetID.A8,0,6)}
     else if (parameterValue === "C64") {
      Result = rtl.rc(pas.Targets.TTargetID.C64,0,6)}
     else if (parameterValue === "C4P") {
      Result = rtl.rc(pas.Targets.TTargetID.C4P,0,6)}
     else if (parameterValue === "NEO") {
      Result = rtl.rc(pas.Targets.TTargetID.NEO,0,6)}
     else if (parameterValue === "RAW") {
      Result = rtl.rc(pas.Targets.TTargetID.RAW,0,6)}
     else if (parameterValue === "X16") {
      Result = rtl.rc(pas.Targets.TTargetID.X16,0,6)}
     else $mod.ParameterError(index,"Invalid target '" + parameterValue + "'. Use on of 'A8, C64, C4P, NEO, RAW, X16'.");
    return Result;
  };
  this.Main = function () {
    var Result = 0;
    var inputFilePath = "";
    var unitPathList = null;
    var libFolderPath = "";
    var targetID = 0;
    var cpu = 0;
    var outputFilePath = "";
    var DiagMode = false;
    var StartTime = 0;
    var seconds = 0.0;
    var programUnit = null;
    function ParseParam() {
      var i = 0;
      var parameter = "";
      var parameterUpperCase = "";
      var parameterValue = "";
      inputFilePath = "";
      targetID = rtl.rc(pas.Targets.TTargetID.A8,0,6);
      cpu = rtl.rc(pas.Targets.TCPU.NONE,0,3);
      pas.Common.CODEORIGIN_BASE = rtl.rc(-1,-2147483648,2147483647);
      pas.Common.DATA_BASE = rtl.rc(-1,-2147483648,2147483647);
      pas.Common.ZPAGE_BASE = rtl.rc(-1,-2147483648,2147483647);
      pas.Common.STACK_BASE = rtl.rc(-1,-2147483648,2147483647);
      outputFilePath = "";
      i = 1;
      while (i <= pas.Utilities.TEnvironment.GetParameterCount()) {
        parameter = pas.Utilities.TEnvironment.GetParameterString(i);
        parameterUpperCase = pas.Utilities.AnsiUpperCase(parameter);
        parameterValue = "";
        if (rtl.rcCharAt(parameter,0) === "-") {
          if (parameterUpperCase === "-O") {
            i += 1;
            outputFilePath = parameter;
            if (outputFilePath === "") $mod.ParameterError(i,"Output file path is empty");
          } else if (pas.System.Pos("-O:",parameterUpperCase) === 1) {
            outputFilePath = pas.System.Copy(parameter,4,255);
            if (outputFilePath === "") $mod.ParameterError(i,"Output file path is empty");
          } else if (parameterUpperCase === "-DIAG") {
            DiagMode = true}
           else if ((parameterUpperCase === "-IPATH") || (parameterUpperCase === "-I")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
            unitPathList.AddFolder(parameterValue);
          } else if (pas.System.Pos("-IPATH:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameter,8,255);
            unitPathList.AddFolder(parameterValue);
          } else if (parameterUpperCase === "-CPU") {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterStringUpperCase(i);
            cpu = rtl.rc($mod.ParseCPUParameter(i,parameterValue),0,3);
          } else if (pas.System.Pos("-CPU:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameter,6,255);
            cpu = rtl.rc($mod.ParseCPUParameter(i,parameterValue),0,3);
          } else if ((parameterUpperCase === "-DEFINE") || (parameterUpperCase === "-DEF")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterStringUpperCase(i);
            pas.Common.AddDefine(parameterValue);
            pas.Common.AddDefines = rtl.rc(pas.Common.NumDefines,-2147483648,2147483647);
          } else if (pas.System.Pos("-DEFINE:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameterUpperCase,9,255);
            pas.Common.AddDefine(parameterValue);
            pas.Common.AddDefines = rtl.rc(pas.Common.NumDefines,-2147483648,2147483647);
          } else if ((parameterUpperCase === "-CODE") || (parameterUpperCase === "-C")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
            pas.Common.CODEORIGIN_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if (pas.System.Pos("-CODE:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameter,7,255);
            pas.Common.CODEORIGIN_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if ((parameterUpperCase === "-DATA") || (parameterUpperCase === "-D")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
            pas.Common.DATA_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if (pas.System.Pos("-DATA:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameter,7,255);
            pas.Common.DATA_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if ((parameterUpperCase === "-STACK") || (parameterUpperCase === "-S")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
            pas.Common.STACK_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if (pas.System.Pos("-STACK:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameter,8,255);
            pas.Common.STACK_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if ((parameterUpperCase === "-ZPAGE") || (parameterUpperCase === "-Z")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterString(i);
            pas.Common.ZPAGE_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if (pas.System.Pos("-ZPAGE:",parameterUpperCase) === 1) {
            parameterValue = pas.System.Copy(parameter,8,255);
            pas.Common.ZPAGE_BASE = rtl.rc($mod.ParseHexParameter(i,parameterValue),-2147483648,2147483647);
          } else if ((parameterUpperCase === "-TARGET") || (parameterUpperCase === "-T")) {
            i += 1;
            parameterValue = pas.Utilities.TEnvironment.GetParameterStringUpperCase(i);
            targetID = rtl.rc($mod.ParseTargetParameter(i,parameterValue),0,6);
          } else if (pas.System.Pos("-TARGET:",parameterUpperCase) === 1) {
            parameterValue = pas.Utilities.AnsiUpperCase(pas.System.Copy(parameter,9,255));
            targetID = rtl.rc($mod.ParseTargetParameter(i,parameterValue),0,6);
          } else $mod.ParameterError(i,"Unknown option '" + parameter + "'.");
        } else {
          inputFilePath = pas.FileIO.TFileSystem.NormalizePath(pas.Utilities.TEnvironment.GetParameterString(i));
          if (!pas.FileIO.TFileSystem.FileExists_(inputFilePath)) {
            $mod.ParameterError(i,"Error: Cannot open input file '" + pas.FileIO.TFileSystem.GetAbsolutePath(inputFilePath) + "' for reading.");
          };
        };
        i += 1;
      };
      pas.Targets.Init(targetID,pas.Common.target);
      if (pas.Common.CODEORIGIN_BASE < 0) {
        pas.Common.CODEORIGIN_BASE = rtl.rc(pas.Common.target.codeorigin,-2147483648,2147483647)}
       else pas.Common.target.codeorigin = rtl.rc(pas.Common.CODEORIGIN_BASE,0,65535);
      if (pas.Common.ZPAGE_BASE < 0) {
        pas.Common.ZPAGE_BASE = rtl.rc(pas.Common.target.zpage,-2147483648,2147483647)}
       else pas.Common.target.zpage = rtl.rc(pas.Common.ZPAGE_BASE,0,65535);
      if (cpu !== pas.Targets.TCPU.NONE) pas.Common.target.cpu = rtl.rc(cpu,0,3);
      var $tmp = pas.Common.target.cpu;
      if ($tmp === pas.Targets.TCPU.CPU_6502) {
        pas.Common.AddDefine("CPU_6502")}
       else if ($tmp === pas.Targets.TCPU.CPU_65C02) {
        pas.Common.AddDefine("CPU_65C02")}
       else if ($tmp === pas.Targets.TCPU.CPU_65816) pas.Common.AddDefine("CPU_65816");
      pas.Common.AddDefines = rtl.rc(pas.Common.NumDefines,-2147483648,2147483647);
    };
    Result = 0;
    pas.System.Writeln(pas.Compiler.CompilerTitle());
    libFolderPath = pas.SysUtils.ExtractFileDir(pas.System.ParamStr(0));
    libFolderPath = pas.SysUtils.ExtractFileDir(libFolderPath);
    libFolderPath = pas.SysUtils.ExtractFileDir(libFolderPath);
    libFolderPath = pas.SysUtils.IncludeTrailingPathDelimiter(libFolderPath) + "lib";
    unitPathList = pas.FileIO.TPathList.$create("Create$1");
    if (pas.FileIO.TFileSystem.FolderExists(libFolderPath)) {
      unitPathList.AddFolder(libFolderPath);
    };
    pas.Common.SourceFileList = pas.CompilerTypes.TSourceFileList.$create("Create$1");
    try {
      if (pas.Utilities.TEnvironment.GetParameterCount() === 0) $mod.Syntax(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
      ParseParam();
      if (inputFilePath === "") $mod.Syntax(pas.Utilities.THaltException.COMPILING_NOT_STARTED);
    } catch ($e) {
      if (pas.Utilities.THaltException.isPrototypeOf($e)) {
        var e = $e;
        Result = rtl.rc(e.GetExitCode(),-2147483648,2147483647);
        return Result;
      } else throw $e
    };
    programUnit = pas.Common.SourceFileList.AddUnit(pas.CompilerTypes.TSourceFileType.PROGRAM_FILE,pas.SysUtils.ExtractFileName(inputFilePath),inputFilePath);
    rtl.setIntfP(pas.Common,"OutFile",pas.FileIO.TFileSystem.CreateTextFile(),true);
    if (pas.SysUtils.ExtractFileName(outputFilePath) === "") {
      outputFilePath = pas.SysUtils.ChangeFileExt(programUnit.Name,".a65");
    };
    pas.Common.OutFile.Assign(outputFilePath);
    try {
      pas.Common.OutFile.Rewrite();
    } catch ($e) {
      if (pas.SysUtils.EInOutError.isPrototypeOf($e)) {
        var e = $e;
        pas.Console.TextColor(12);
        pas.System.Writeln(pas.SysUtils.Format('ERROR: Cannot open output file "%s" for writing. %s.',pas.System.VarRecs(18,pas.Common.OutFile.GetAbsoluteFilePath(),18,e.fMessage)));
        pas.Console.NormVideo();
        Result = rtl.rc(pas.Utilities.THaltException.COMPILING_NOT_STARTED,-2147483648,2147483647);
        return Result;
      } else throw $e
    };
    StartTime = rtl.rc(pas.Utilities.GetTickCount64(),0,9007199254740991);
    try {
      pas.Compiler.Main(programUnit,unitPathList);
      pas.Common.OutFile.Flush();
      pas.Common.OutFile.Close();
    } catch ($e) {
      if (pas.Utilities.THaltException.isPrototypeOf($e)) {
        var e = $e;
        Result = rtl.rc(e.GetExitCode(),-2147483648,2147483647);
        pas.Common.OutFile.Close();
        pas.Common.OutFile.Erase();
      } else throw $e
    };
    if (DiagMode) pas.Diagnostic.Diagnostics(programUnit);
    pas.Messages.WritelnMsg();
    pas.Console.TextColor(15);
    seconds = ((pas.Utilities.GetTickCount64() - StartTime) + 500) / 1000;
    pas.System.Writeln(pas.SysUtils.IntToStr(pas.Common.TokenAt(pas.Common.NumTok()).SourceLocation.Line) + " lines compiled, " + pas.SysUtils.FloatToStr(seconds) + " sec, " + pas.SysUtils.IntToStr(pas.Common.NumTok()) + " tokens        , " + pas.SysUtils.IntToStr(pas.Common.NumIdent()) + " idents, " + pas.SysUtils.IntToStr(pas.Common.NumBlocks) + " blocks, " + pas.SysUtils.IntToStr(pas.Common.NumTypes) + " types");
    pas.Compiler.Free();
    pas.Console.TextColor(7);
    if (pas.Common.msgLists.msgWarning.GetCount() > 0) pas.System.Writeln(pas.SysUtils.IntToStr(pas.Common.msgLists.msgWarning.GetCount()) + " warning(s) issued");
    if (pas.Common.msgLists.msgNote.GetCount() > 0) pas.System.Writeln(pas.SysUtils.IntToStr(pas.Common.msgLists.msgNote.GetCount()) + " note(s) issued");
    pas.Console.NormVideo();
    return Result;
  };
  this.CallMain = function () {
    var Result = 0;
    var exitCode = 0;
    var fileMap = null;
    var fileMapEntry = null;
    var content = "";
    exitCode = rtl.rc($mod.Main(),-2147483648,2147483647);
    if (exitCode !== 0) {
      pas.System.Writeln("Program ended with exit code " + pas.SysUtils.IntToStr(exitCode));
    };
    fileMap = pas.FileIO.TFileSystem.GetFileMap();
    fileMapEntry = fileMap.GetEntry("Output.a65");
    if (fileMapEntry !== null) {
      content = fileMapEntry.content;
      pas.System.Writeln(content);
    };
    Result = rtl.rc(exitCode,-2147483648,2147483647);
    return Result;
  };
  this.exitCode = 0;
  $mod.$main = function () {
    $mod.exitCode = rtl.rc($mod.CallMain(),-2147483648,2147483647);
  };
});
