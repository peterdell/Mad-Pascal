mads 2.1.7 build 10 (19 Jan 24)
Source: test.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.1 [2024/04/04] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 				fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0080			bp	.ds 2
    29 = 0082			bp2	.ds 2
    30 = 0081			bp3	= bp+1
    31
    32 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 0088			edx	.ds 4
    34 = 008C			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0090			ztmp8	.ds 1
    39 = 0091			ztmp9	.ds 1
    40 = 0092			ztmp10	.ds 1
    41 = 0093			ztmp11	.ds 1
    42
    43 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0084			ax	= eax
    49 = 0084			al	= eax
    50 = 0085			ah	= eax+1
    51
    52 = 008C			cx	= ecx
    53 = 008C			cl	= ecx
    54 = 008D			ch	= ecx+1
    55
    56 = 0088			dx	= edx
    57 = 0088			dl	= edx
    58 = 0089			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0084			FP1MAN0	.ds 1
    63 = 0085			FP1MAN1	.ds 1
    64 = 0086			FP1MAN2	.ds 1
    65 = 0087			FP1MAN3	.ds 1
    66
    67 					org ztmp8
    68
    69 = 0090			FP1SGN	.ds 1
    70 = 0091			FP1EXP	.ds 1
    71
    72 					org edx
    73
    74 = 0088			FP2MAN0	.ds 1
    75 = 0089			FP2MAN1	.ds 1
    76 = 008A			FP2MAN2	.ds 1
    77 = 008B			FP2MAN3	.ds 1
    78
    79 					org ztmp10
    80
    81 = 0092			FP2SGN	.ds 1
    82 = 0093			FP2EXP	.ds 1
    83
    84 					org ecx
    85
    86 = 008C			FPMAN0	.ds 1
    87 = 008D			FPMAN1	.ds 1
    88 = 008E			FPMAN2	.ds 1
    89 = 008F			FPMAN3	.ds 1
    90
    91 					org bp2
    92
    93 = 0082			FPSGN	.ds 1
    94 = 0083			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1296 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 2075				PP 'wins.pp' MIC 0 0 0 0 0 0 0 0
Macro: RESOURCE.PP [Source: resource.asm]
     2 = 0D20			len = .filesize('wins.pp')
     7 2075				org RESORIGIN
     9 2075 20 41 20		mcpy	jsr sys.off
    11 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    11 2080 A9 00 85 8C A9 E0 +  MWA #MAIN.MIC ECX
    11 2088 A9 20 85 84 A9 0D +  MWA #LEN EAX
    11 2090 20 00 20		 JSR RESOURCE.MEMCPY
    13 2093 4C 65 20			jmp sys.on
    15 2096			data
    16 2096				.get 'wins.pp'
    18 = 1E00			unp = .get[len-2]+.get[len-3]*256
    20  [0000] FF			.put[0] = <[unp-1]
    21  [0001] 1D			.put[1] = >[unp-1]
    23  [0002] 1C			.put[2] = <[len-4]
    24  [0003] 0D			.put[3] = >[len-4]
    32 02E2-02E3> 75 20			ini mcpy
    49 					.print '$R PP    ',main.MIC,'..',main.MIC+len+2," 'wins.pp'"
    49 				$R PP    $E000..$ED22 'wins.pp'
Source: test.a65
   119 2DB6				PP 'silents.pp' MIC2 0 0 0 0 0 0 0 0
Macro: RESOURCE.PP [Source: resource.asm]
     2 = 0CD8			len = .filesize('silents.pp')
    34 2DB6				org main.MIC2
    36 4000				.get 'silents.pp'
    38 = 1E04			unp = .get[len-2]+.get[len-3]*256
    40  [0000] 03			.put[0] = <[unp-1]
    41  [0001] 1E			.put[1] = >[unp-1]
    43  [0002] D4			.put[2] = <[len-4]
    44  [0003] 0C			.put[3] = >[len-4]
    49 					.print '$R PP    ',main.MIC2,'..',main.MIC2+len+2," 'silents.pp'"
    49 				$R PP    $4000..$4CDA 'silents.pp'
Source: test.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 4CD8				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: test.a65]
     1 2000-233A> 03 02 02 01 + .by  $03 $02 $02 $01 $01 $02 $02 $03  $03 $03 $03 $03 $03 $03 $02 $03  $28 $14 $14 $28 $50 $50 $A0 $A0
     2 2018 40 50 50 50 28 28 + .by  $40 $50 $50 $50 $28 $28 $A0 $A0  $18 $18 $0C $18 $30 $30 $60 $60  $C0 $C0 $C0 $C0 $18 $0C $C0 $C0
Source: test.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 2030			RTLIB
   131 2030				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    84 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D3
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $2030..$20D8
   138
   139 				; ------------------------------------------------------------
   140
   141 20D9			START
   142 20D9 BA				tsx
   143 20DA 8E 1F 23			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 20DD				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 20DD			.local	rominit
     5
     6 20DD 78			        sei
     7 20DE A9 00		        lda #%00000000
     8 20E0 8D 0E D4		        sta NMIEN       ;$D40E
     9 20E3 A9 FE		        lda #%11111110
    10 20E5 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 20E8 A2 05		        ldx #<nmiint
    33 20EA A0 21		        ldy #>nmiint
    34 20EC 8E FA FF		        stx NMIVEC      ;$FFFA
    35 20EF 8C FB FF		        sty NMIVEC+1
    36
    37 20F2 A2 0F		        ldx #<irqint
    38 20F4 A0 21		        ldy #>irqint
    39 20F6 8E FE FF		        stx IRQVEC      ;$FFFE
    40 20F9 8C FF FF		        sty IRQVEC+1
    41
    42 20FC A9 40		        lda #%01000000
    43 20FE 8D 0E D4		        sta NMIEN       ;$D40E
    44 2101 58			        cli
    45
    46 2102 4C 30 21			jmp skp
    47
    48
    49
    50 2105 2C 0F D4		nmiint  bit NMIST        ;$D40F
    51 2108 10 03		        spl
    52 210A 6C 00 02		        jmp (VDSLST)     ;$0200
    53
    54 210D 38			        sec
    55 210E 24			        .byte $24        ;BIT $18
    56
    57 210F 18			irqint  clc
    58
    59 				        ;wlaczenie OS ROM
    60
    61 2110 EE 01 D3		        inc PORTB       ;$D301
    62
    63 2113 48			        pha
    64 2114 8A			        txa
    65 2115 48			        pha
    66 2116 BA			        tsx
    67
    68 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    69
    70 2117 A9 21		        lda #>iret      ;adres procedury iret
    71 2119 48			        pha
    72 211A A9 29		        lda #<iret
    73 211C 48			        pha
    74 211D BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    75 2120 48			        pha
    76
    77 				        ;skok przez odpowiedni wektor przerwania
    78
    79 2121 90 03		        scc
    80 2123 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    81 2126 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    82
    83 2129 68			iret	pla
    84 212A AA				tax
    85 212B 68				pla
    86
    87 				        ;wylaczenie OS ROM
    88
    89 212C CE 01 D3		        dec PORTB       ;$D301
    90 212F 40			        rti
    91
    92 2130			skp
    93
    94 				.endl
    95
   147 					.fi
   148
   149 = 0017			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 233B			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 2130 A2 E9			ldx #256-VLEN
   158 2132 A9 00			lda #$00
   159 2134 9D 52 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 					m@init
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 213A A2 00			ldx #$00					; X = 0
   169 213C 86 80			stx bp						; BP = 0
   170
   171 213E 8E 08 D2			stx audctl					; reset POKEY
   172 2141 8E 18 D2			stx audctl+$10
   173 2144 A9 03			lda #3
   174 2146 8D 0F D2			sta skctl
   175 2149 8D 1F D2			sta skctl+$10
   176
   177 214C CA				dex						; X = 255
   178
   179 214D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: test.a65]
     3 214D 20 71 21			jsr MAIN.SYSTEM.@UnitInit
   180
   181 2150			.local	MAIN						; PROCEDURE
   182
   183 2150 4C EB 22			jmp l_0004
   184
   185 				; ------------------------------------------------------------
   186
   187 2153			.local	SYSTEM						; UNIT
   188
   189 2153			.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2153 B5 94			lda :STACKORIGIN,x
   196 2155 85 88			sta A
   197 2157 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   198 2159 85 89			sta A+1
   199 215B CA				dex
   200 215C			@main
   201
   202 				; -------------------  ASM Block 00000003  -------------------
   203
   204 215C A0 00			ldy #0
   205 215E B1 88 85 90			mva (:edx),y Result
   206 2162 C8				iny
   207 2163 B1 88 85 91			mva (:edx),y Result+1
   208
   209 2167			@exit
   210
   211 				; ------------------------------------------------------------
   212
   213 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   214 				; as Pointer
   215
   216 2167 E8				inx
   217 2168 A5 90 95 94			mva RESULT :STACKORIGIN,x
   218 216C A5 91 95 A4			mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   219
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					eif
   227
   228 				; ------------------------------------------------------------
   229
   230 = 0088			A	= :EDX
   231 = 0090			RESULT	= :STACKORIGIN-4
   232 2170 60				rts						; ret
   233 				.endl
   234
   235 				; ------------------------------------------------------------
   236 				; ------------------------------------------------------------
   237 2171			@UnitInit
   238
   239 				; -------------------  ASM Block 00000059  -------------------
   240
   241 					.ifdef @CmdLine
   242 					
   243 					ldx #$0F
   244 					mva:rpl $340,x IOCB@COPY,x-
   245 					rts
   246
   247 				IOCB@COPY	:16 brk
   248 					eif
   249
   250
   251 2171 60				rts
   252
   253 				; ------------------------------------------------------------
   254
   255 = 0101			__PORTB_BANKS	= $0101
   256 = 0648			M_PI_2	= $0648
   257 = 0192			D_PI_2	= $0192
   258 = 0004			D_PI_180	= $04
   259 = 0000			MGTIA	= $00
   260 = 0080			MVBXE	= $80
   261 = 0000			VBXE_XDLADR	= $00
   262 = 00E0			VBXE_BCBTMP	= $E0
   263 = 0100			VBXE_BCBADR	= $0100
   264 = 1000			VBXE_MAPADR	= $1000
   265 = 1000			VBXE_CHBASE	= $1000
   266 = 5000			VBXE_OVRADR	= $5000
   267 = B000			VBXE_WINDOW	= $B000
   268 = 0000			IDLI	= $00
   269 = 0001			IVBL	= $01
   270 = 0001			IVBLD	= $01
   271 = 0002			IVBLI	= $02
   272 = 0003			ITIM1	= $03
   273 = 0004			ITIM2	= $04
   274 = 0005			ITIM4	= $05
   275 = 00FE			CH_DELCHR	= $FE
   276 = 009B			CH_ENTER	= $9B
   277 = 001B			CH_ESC	= $1B
   278 = 001C			CH_CURS_UP	= $1C
   279 = 001D			CH_CURS_DOWN	= $1D
   280 = 001E			CH_CURS_LEFT	= $1E
   281 = 001F			CH_CURS_RIGHT	= $1F
   282 = 007F			CH_TAB	= $7F
   283 = 009B			CH_EOL	= $9B
   284 = 007D			CH_CLR	= $7D
   285 = 00FD			CH_BELL	= $FD
   286 = 007E			CH_DEL	= $7E
   287 = 009C			CH_DELLINE	= $9C
   288 = 009D			CH_INSLINE	= $9D
   289 = 0000			PAL_PMCOLOR0	= $00
   290 = 0001			PAL_PMCOLOR1	= $01
   291 = 0002			PAL_PMCOLOR2	= $02
   292 = 0003			PAL_PMCOLOR3	= $03
   293 = 0004			PAL_COLOR0	= $04
   294 = 0005			PAL_COLOR1	= $05
   295 = 0006			PAL_COLOR2	= $06
   296 = 0007			PAL_COLOR3	= $07
   297 = 0008			PAL_COLBAK	= $08
   298 = 0000			COLOR_BLACK	= $00
   299 = 000E			COLOR_WHITE	= $0E
   300 = 0032			COLOR_RED	= $32
   301 = 0096			COLOR_CYAN	= $96
   302 = 0068			COLOR_VIOLET	= $68
   303 = 00C4			COLOR_GREEN	= $C4
   304 = 0074			COLOR_BLUE	= $74
   305 = 00EE			COLOR_YELLOW	= $EE
   306 = 0028			COLOR_ORANGE	= $28
   307 = 00E4			COLOR_BROWN	= $E4
   308 = 003C			COLOR_LIGHTRED	= $3C
   309 = 0004			COLOR_GRAY1	= $04
   310 = 0006			COLOR_GRAY2	= $06
   311 = 000A			COLOR_GRAY3	= $0A
   312 = 00CC			COLOR_LIGHTGREEN	= $CC
   313 = 007C			COLOR_LIGHTBLUE	= $7C
   314 = 0004			FMOPENREAD	= $04
   315 = 0008			FMOPENWRITE	= $08
   316 = 0009			FMOPENAPPEND	= $09
   317 = 000C			FMOPENREADWRITE	= $0C
   318 = D20A			RND	= $D20A
   319 = 02C0			adr.PALETTE	= $02C0
   320 2172			.var PALETTE	= adr.PALETTE .word
   321 = D012			adr.HPALETTE	= $D012
   322 2172			.var HPALETTE	= adr.HPALETTE .word
   323 = 2327			DATESEPARATOR	= DATAORIGIN+$0000
   324 = 2328			FILEMODE	= DATAORIGIN+$0001
   325 = 2329			GRAPHMODE	= DATAORIGIN+$0002
   326 = 232A			IORESULT	= DATAORIGIN+$0003
   327 = 232B			EOLN	= DATAORIGIN+$0004
   328 = 232C			SCREENWIDTH	= DATAORIGIN+$0005
   329 = 232E			SCREENHEIGHT	= DATAORIGIN+$0007
   330 = 2330			RNDSEED	= DATAORIGIN+$0009
   331
   332 = 2172 C0 02		PALETTE
   332 = 2174 12 D0		HPALETTE
   332 				.endl							; UNIT SYSTEM
   333
   334 				; ------------------------------------------------------------
   335
   336 2176			.local	ATARI						; UNIT
   337
   338 				; ------------------------------------------------------------
   339
   340 = 0010			IRQENS	= $10
   341 = 0012			RTCLOK	= $12
   342 = 0012			RTCLOK1	= $12
   343 = 0013			RTCLOK2	= $13
   344 = 0014			RTCLOK3	= $14
   345 = 004D			ATRACT	= $4D
   346 = 0052			LMARGIN	= $52
   347 = 0053			RMARGIN	= $53
   348 = 0054			ROWCRS	= $54
   349 = 0055			COLCRS	= $55
   350 = 0057			DINDEX	= $57
   351 = 0058			SAVMSC	= $58
   352 = 0062			PALNTS	= $62
   353 = 006A			RAMTOP	= $6A
   354 = 0200			VDSLST	= $0200
   355 = 0230			SDLSTL	= $0230
   356 = 0290			TXTROW	= $0290
   357 = 0291			TXTCOL	= $0291
   358 = 0293			TINDEX	= $0293
   359 = 0294			TXTMSC	= $0294
   360 = 022F			SDMCTL	= $022F
   361 = 026F			GPRIOR	= $026F
   362 = 02F0			CRSINH	= $02F0
   363 = 02F3			CHACT	= $02F3
   364 = 02F4			CHBAS	= $02F4
   365 = 02FC			CH	= $02FC
   366 = 02FD			FILDAT	= $02FD
   367 = 02C0			PCOLR0	= $02C0
   368 = 02C1			PCOLR1	= $02C1
   369 = 02C2			PCOLR2	= $02C2
   370 = 02C3			PCOLR3	= $02C3
   371 = 02C4			COLOR0	= $02C4
   372 = 02C5			COLOR1	= $02C5
   373 = 02C6			COLOR2	= $02C6
   374 = 02C7			COLOR3	= $02C7
   375 = 02C8			COLOR4	= $02C8
   376 = 02C8			COLBAKS	= $02C8
   377 = D000			HPOSP0	= $D000
   378 = D001			HPOSP1	= $D001
   379 = D002			HPOSP2	= $D002
   380 = D003			HPOSP3	= $D003
   381 = D004			HPOSM0	= $D004
   382 = D005			HPOSM1	= $D005
   383 = D006			HPOSM2	= $D006
   384 = D007			HPOSM3	= $D007
   385 = D008			SIZEP0	= $D008
   386 = D009			SIZEP1	= $D009
   387 = D00A			SIZEP2	= $D00A
   388 = D00B			SIZEP3	= $D00B
   389 = D00C			SIZEM	= $D00C
   390 = D00D			GRAFP0	= $D00D
   391 = D00E			GRAFP1	= $D00E
   392 = D00F			GRAFP2	= $D00F
   393 = D010			GRAFP3	= $D010
   394 = D011			GRAFM	= $D011
   395 = D004			P0PF	= $D004
   396 = D014			PAL	= $D014
   397 = D013			TRIG3	= $D013
   398 = D012			COLPM0	= $D012
   399 = D013			COLPM1	= $D013
   400 = D014			COLPM2	= $D014
   401 = D015			COLPM3	= $D015
   402 = D016			COLPF0	= $D016
   403 = D017			COLPF1	= $D017
   404 = D018			COLPF2	= $D018
   405 = D019			COLPF3	= $D019
   406 = D01A			COLBK	= $D01A
   407 = D01B			PRIOR	= $D01B
   408 = D01D			GRACTL	= $D01D
   409 = D01E			HITCLR	= $D01E
   410 = D01F			CONSOL	= $D01F
   411 = D200			AUDF1	= $D200
   412 = D201			AUDC1	= $D201
   413 = D202			AUDF2	= $D202
   414 = D203			AUDC2	= $D203
   415 = D204			AUDF3	= $D204
   416 = D205			AUDC3	= $D205
   417 = D206			AUDF4	= $D206
   418 = D207			AUDC4	= $D207
   419 = D208			AUDCTL	= $D208
   420 = D209			KBCODE	= $D209
   421 = D20E			IRQEN	= $D20E
   422 = D20F			SKSTAT	= $D20F
   423 = D300			PORTA	= $D300
   424 = D301			PORTB	= $D301
   425 = D302			PACTL	= $D302
   426 = D400			DMACTL	= $D400
   427 = D401			CHACTL	= $D401
   428 = D402			DLISTL	= $D402
   429 = D404			HSCROL	= $D404
   430 = D405			VSCROL	= $D405
   431 = D407			PMBASE	= $D407
   432 = D409			CHBASE	= $D409
   433 = D40A			WSYNC	= $D40A
   434 = D40B			VCOUNT	= $D40B
   435 = D40C			PENH	= $D40C
   436 = D40D			PENV	= $D40D
   437 = D40E			NMIEN	= $D40E
   438 = FFFA			NMIVEC	= $FFFA
   439 = FFFC			RESETVEC	= $FFFC
   440 = FFFE			IRQVEC	= $FFFE
   441
   442 				.endl							; UNIT ATARI
   443
   444 				; ------------------------------------------------------------
   445
   446 2176			.local	CRT						; UNIT
   447
   448 2176			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   449
   450 				; -------------------  ASM Block 00000064  -------------------
   451
   452 2176 A0 00			ldy #$00	; false
   453 2178 AD FC 02			lda kbcodes
   454 217B C9 FF			cmp #$ff
   455 217D F0 01			seq
   456 217F C8				iny		; true
   457 2180 8C 33 23			sty Result
   458
   459 2183			@exit
   460
   461 				; ------------------------------------------------------------
   462
   463 = 2333			RESULT	= DATAORIGIN+$000C
   464 2183 60				rts						; ret
   465 				.endl
   466
   467 				; ------------------------------------------------------------
   468
   469 = 2332			TEXTATTR	= DATAORIGIN+$000B
   470 = D01F			CONSOL	= $D01F
   471 = 0000			CN_START_SELECT_OPTION	= $00
   472 = 0001			CN_SELECT_OPTION	= $01
   473 = 0002			CN_START_OPTION	= $02
   474 = 0003			CN_OPTION	= $03
   475 = 0004			CN_START_SELECT	= $04
   476 = 0005			CN_SELECT	= $05
   477 = 0006			CN_START	= $06
   478 = 0007			CN_NONE	= $07
   479 = 0000			BW40	= $00
   480 = 0001			CO40	= $01
   481 = 0002			BW80	= $02
   482 = 0003			CO80	= $03
   483 = 0007			MONO	= $07
   484 = 0001			C40	= $01
   485 = 0003			C80	= $03
   486 = 0000			BLACK	= $00
   487 = 000F			WHITE	= $0F
   488 = 0026			RED	= $26
   489 = 00AC			CYAN	= $AC
   490 = 0048			PURPLE	= $48
   491 = 00B6			GREEN	= $B6
   492 = 0086			BLUE	= $86
   493 = 00DC			YELLOW	= $DC
   494 = 0018			ORANGE	= $18
   495 = 00F4			BROWN	= $F4
   496 = 002A			LIGHT_RED	= $2A
   497 = 0004			DARK_GREY	= $04
   498 = 0008			GREY	= $08
   499 = 00BC			LIGHT_GREEN	= $BC
   500 = 009A			LIGHT_BLUE	= $9A
   501 = 000C			LIGHT_GREY	= $0C
   502 = 0080			BLINK	= $80
   503
   504 				.endl							; UNIT CRT
   505
   506 				; ------------------------------------------------------------
   507
   508 2184			.local	TYPES						; UNIT
   509
   510 				; ------------------------------------------------------------
   511
   512 				.endl							; UNIT TYPES
   513
   514 				; ------------------------------------------------------------
   515
   516 2184			.local	GRAPH						; UNIT
   517
   518 2184			.local	INITGRAPH					; PROCEDURE | OVERLOAD
   519 2184			.local	@010180000
   520 2184 8D 51 23			sta MODE
   521
   522 				; -------------------  ASM Block 00000071  -------------------
   523
   524 2187 8A 48			txa:pha
   525
   526 2189 AD 51 23			lda mode
   527 218C 8D 29 23			sta MAIN.SYSTEM.GraphMode
   528 218F 29 0F			and #$0f
   529 2191 A8				tay
   530
   531 2192 A2 60			ldx #$60		; 6*16
   532 2194 AD 51 23			lda mode		; %00010000 with text window
   533 2197 29 10			and #$10
   534 2199 49 10			eor #$10
   535 219B 09 02			ora #2			; read
   536
   537 					.nowarn @GRAPHICS
   537 219D 20 97 20		 JSR @GRAPHICS
   538
   539 21A0 8C 3C 23			sty GraphResult
   540
   541
   542 					.ifdef MAIN.@DEFINES.ROMOFF
   543 21A3 EE 01 D3			inc portb
   544 					.endif
   545
   546 21A6 A6 57			ldx dindex
   547 21A8 BC 00 20			ldy adr.tlshc,x
   548 21AB A9 05			lda #5
   549 21AD 0A			shift	asl @
   550 21AE 88				dey
   551 21AF D0 FC			bne shift
   552
   553 21B1 8D 4C 23			sta SCANLINE_WIDTH
   554
   555 				; Fox/TQA
   556
   557 = 0057			dindex	equ $57
   558
   559 21B4 A6 57			ldx dindex
   560 21B6 BD 10 20			lda adr.tmccn,x
   561 21B9 BC 20 20			ldy adr.tmrcn,x
   562 21BC A2 00			ldx #0
   563 21BE C9 40			cmp #<320
   564 21C0 D0 01 E8			sne:inx
   565
   566 				; X:A = horizontal resolution
   567 				; Y = vertical resolution
   568
   569 21C3 20 30 20			@SCREENSIZE
   570
   571 					.ifdef MAIN.@DEFINES.ROMOFF
   572 21C6 CE 01 D3			dec portb
   573 					.endif
   574
   575 21C9 68 AA			pla:tax
   576 				 
   577 				; optimize OK (graph_atari.inc), line = 82
   578
   579 21CB A5 58			lda ATARI.SAVMSC
   580 21CD 8D 3E 23			sta VIDEORAM
   581 21D0 A5 59			lda ATARI.SAVMSC+1
   582 21D2 8D 3F 23			sta VIDEORAM+1
   583
   584 				; ------------------------------------------------------------
   585
   586 = 2351			MODE	= DATAORIGIN+$002A
   587 = 2000			adr.TLSHC	= CODEORIGIN+$0000
   588 21D5			.var TLSHC	= adr.TLSHC .word
   589 = 2010			adr.TMCCN	= CODEORIGIN+$0010
   590 21D5			.var TMCCN	= adr.TMCCN .word
   591 = 2020			adr.TMRCN	= CODEORIGIN+$0020
   592 21D5			.var TMRCN	= adr.TMRCN .word
   593
   594 = 2351			@VarData	= MODE
   595 = 0001			@VarDataSize	= 1
   596
   597 21D5			@exit
   598 					.ifdef @new
   599 					lda <@VarData
   600 					sta :ztmp
   601 					lda >@VarData
   602 					ldy #@VarDataSize-1
   603 					jmp @FreeMem
   604 					els
   605 21D5 60				rts						; ret
   606 					eif
   607 = 21D6 00 20		TLSHC
   607 = 21D8 10 20		TMCCN
   607 = 21DA 20 20		TMRCN
   607 				.endl
   608 				.endl							; overload
   609
   610 				; ------------------------------------------------------------
   611
   612 = 0080			CURRENTDRIVER	= $80
   613 = 0000			DETECT	= $00
   614 = 0001			CGA	= $01
   615 = 0002			MCGA	= $02
   616 = 0003			EGA	= $03
   617 = 0004			EGA64	= $04
   618 = 0005			EGAMONO	= $05
   619 = 0006			LOWRES	= $06
   620 = 0007			HERCMONO	= $07
   621 = 0009			VGA	= $09
   622 = 000A			VESA	= $0A
   623 = 000B			D1BIT	= $0B
   624 = 000C			D2BIT	= $0C
   625 = 000D			D4BIT	= $0D
   626 = 000E			D6BIT	= $0E
   627 = 000F			D8BIT	= $0F
   628 = 0010			D12BIT	= $10
   629 = 0018			M640X400	= $18
   630 = 0018			M640X480	= $18
   631 = 0001			GROK	= $01
   632 = 00FF			GRNOINITGRAPH	= $FF
   633 = 00FE			GRNOTDETECTED	= $FE
   634 = 00FD			GRFILENOTFOUND	= $FD
   635 = 00FC			GRINVALIDDRIVER	= $FC
   636 = 00FB			GRNOLOADMEM	= $FB
   637 = 00FA			GRNOSCANMEM	= $FA
   638 = 00F9			GRNOFLOODMEM	= $F9
   639 = 00F8			GRFONTNOTFOUND	= $F8
   640 = 00F7			GRNOFONTMEM	= $F7
   641 = 00F6			GRINVALIDMODE	= $F6
   642 = 00F5			GRERROR	= $F5
   643 = 00F4			GRIOERROR	= $F4
   644 = 00F3			GRINVALIDFONT	= $F3
   645 = 00F2			GRINVALIDFONTNUM	= $F2
   646 = 00EE			GRINVALIDVERSION	= $EE
   647 = 0000			CGAC0	= $00
   648 = 0001			CGAC1	= $01
   649 = 0002			CGAC2	= $02
   650 = 0003			CGAC3	= $03
   651 = 0004			CGAHI	= $04
   652 = 0000			MCGAC0	= $00
   653 = 0001			MCGAC1	= $01
   654 = 0002			MCGAC2	= $02
   655 = 0003			MCGAC3	= $03
   656 = 0004			MCGAMED	= $04
   657 = 0005			MCGAHI	= $05
   658 = 0000			EGALO	= $00
   659 = 0001			EGAHI	= $01
   660 = 0000			EGA64LO	= $00
   661 = 0001			EGA64HI	= $01
   662 = 0003			EGAMONOHI	= $03
   663 = 000A			VGALO	= $0A
   664 = 001F			VGAMED	= $1F
   665 = 0018			VGAHI	= $18
   666 = 2334			WIN_LEFT	= DATAORIGIN+$000D
   667 = 2336			WIN_RIGHT	= DATAORIGIN+$000F
   668 = 2338			WIN_TOP	= DATAORIGIN+$0011
   669 = 233A			WIN_BOTTOM	= DATAORIGIN+$0013
   670 = 233C			GRAPHRESULT	= DATAORIGIN+$0015
   671 = 233D			GETCOLOR	= DATAORIGIN+$0016
   672 = 233E			VIDEORAM	= DATAORIGIN+$0017
   673 = 2340			adr.LASTARCCOORDS	= DATAORIGIN+$0019	; [12] RECORD
   674 21DC			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   675 = 2340			LASTARCCOORDS.X	= DATAORIGIN+$0019
   676 = 2342			LASTARCCOORDS.Y	= DATAORIGIN+$001B
   677 = 2344			LASTARCCOORDS.XSTART	= DATAORIGIN+$001D
   678 = 2346			LASTARCCOORDS.YSTART	= DATAORIGIN+$001F
   679 = 2348			LASTARCCOORDS.XEND	= DATAORIGIN+$0021
   680 = 234A			LASTARCCOORDS.YEND	= DATAORIGIN+$0023
   681 = 234C			SCANLINE_WIDTH	= DATAORIGIN+$0025
   682 = 234D			CURRENTX	= DATAORIGIN+$0026
   683 = 234F			CURRENTY	= DATAORIGIN+$0028
   684
   685 = 21DC 40 23		LASTARCCOORDS
   685 				.endl							; UNIT GRAPH
   686
   687 				; ------------------------------------------------------------
   688
   689 21DE			.local	PP						; UNIT
   690 21DE 8E 84 22 A0 07 A2 + 	.link 'd:\!Delphi\MadPascal\lib\pp\unpp.obx'
   691
   692 				; ------------------------------------------------------------
   693
   694 = 0084			UNPP.SRC = :EAX
   695 = 0086			UNPP.DST = :EAX+2
   696
   697 				.endl							; UNIT PP
   698 22EB			l_0004
   699
   700 				; optimize OK (test.pas), line = 13
   701
   702 22EB A9 1F			lda #$1F
   703 22ED 20 84 21			jsr GRAPH.INITGRAPH.@010180000
   704
   705 				; optimize OK (test.pas), line = 15
   706
   707 22F0 A5 58			lda $0058
   708 22F2 85 86			sta PP.UNPP.DST
   709 22F4 A5 59			lda $0058+1
   710 22F6 85 87			sta PP.UNPP.DST+1
   711 22F8 A9 00			lda #$00
   712 22FA 85 84			sta PP.UNPP.SRC
   713 22FC A9 E0			lda #$E0
   714 22FE 85 85			sta PP.UNPP.SRC+1
   715 2300 20 DE 21			jsr PP.UNPP
   716
   717 				; optimize OK (test.pas), line = 16
   718
   719 2303 A5 58			lda $0058
   720 2305 85 86			sta PP.UNPP.DST
   721 2307 A5 59			lda $0058+1
   722 2309 85 87			sta PP.UNPP.DST+1
   723 230B A9 00			lda #$00
   724 230D 85 84			sta PP.UNPP.SRC
   725 230F A9 40			lda #$40
   726 2311 85 85			sta PP.UNPP.SRC+1
   727 2313 20 DE 21			jsr PP.UNPP
   728
   729 				; --- RepeatUntilProlog
   730 2316			l_0110
   731
   732 				; optimize FAIL ('CRT.KEYPRESSED', test.pas), line = 18
   733
   734 2316 20 76 21			jsr CRT.KEYPRESSED
   735 2319 AD 33 23			lda CRT.KEYPRESSED.RESULT
   736 231C F0 F8			jeq l_0110
   737
   738 				; ------------------------------------------------------------
   739
   740 = E000			MIC	= $E000
   741 = 4000			MIC2	= $4000
   742 231E			@exit
   743
   744 231E A2 00		@halt	ldx #$00
   745 2320 9A				txs
   746
   747 					.ifdef MAIN.@DEFINES.ROMOFF
   748 2321 EE 01 D3			inc portb
   749 					.fi
   750
   751 2324 A0 01			ldy #$01
   752
   753 2326 60				rts
   754
   755 				; ------------------------------------------------------------
   756
   757 2327			.local	@DEFINES
   758 2327			ATARI
   759 2327			CPU_6502
   760 2327			ROMOFF
   761 				.endl
   762
   763 2327			.local	@RESOURCE
   764 				.endl
   765
   766 				.endl							; MAIN
   767
   768 				; ------------------------------------------------------------
   769 				; ------------------------------------------------------------
   770
   771 				.macro	UNITINITIALIZATION
   772 				
   773 					.ifdef MAIN.SYSTEM.@UnitInit
   774 					jsr MAIN.SYSTEM.@UnitInit
   775 					.fi
   776 				
   777 					.ifdef MAIN.ATARI.@UnitInit
   778 					jsr MAIN.ATARI.@UnitInit
   779 					.fi
   780 				
   781 					.ifdef MAIN.CRT.@UnitInit
   782 					jsr MAIN.CRT.@UnitInit
   783 					.fi
   784 				
   785 					.ifdef MAIN.TYPES.@UnitInit
   786 					jsr MAIN.TYPES.@UnitInit
   787 					.fi
   788 				
   789 					.ifdef MAIN.GRAPH.@UnitInit
   790 					jsr MAIN.GRAPH.@UnitInit
   791 					.fi
   792 				
   793 					.ifdef MAIN.PP.@UnitInit
   794 					jsr MAIN.PP.@UnitInit
   795 					.fi
   796 				.endm
   797
   798 				; ------------------------------------------------------------
   799
   800 					ift .SIZEOF(MAIN.SYSTEM) > 0
   801 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   801 				SYSTEM: $2153..$2175
   802 					eif
   803
   804 					ift .SIZEOF(MAIN.ATARI) > 0
   805 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   806 					eif
   807
   808 					ift .SIZEOF(MAIN.CRT) > 0
   809 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   809 				CRT: $2176..$2183
   810 					eif
   811
   812 					ift .SIZEOF(MAIN.TYPES) > 0
   813 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   814 					eif
   815
   816 					ift .SIZEOF(MAIN.GRAPH) > 0
   817 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   817 				GRAPH: $2184..$21DD
   818 					eif
   819
   820 					ift .SIZEOF(MAIN.PP) > 0
   821 					.print 'PP: ',MAIN.PP,'..',MAIN.PP+.SIZEOF(MAIN.PP)-1
   821 				PP: $21DE..$22EA
   822 					eif
   823
   824 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   824 				CODE: $2000..$2326
   825
   826 				; ------------------------------------------------------------
   827
   828 = 2327				?adr = *
   829 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
   830 					?adr = ?old_adr
   831 					eif
   832
   833 					org ?adr
   834 = 2327				?old_adr = *
   835
   836 2327			DATAORIGIN
   837 2327 2D 0C 00 00 00 28 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
   838
   839 = 0014			VARINITSIZE	= *-DATAORIGIN
   840 = 002B			VARDATASIZE	= 43
   841
   842 = 2352			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   843
   844 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   844 				DATA: $2327..$2352
   845
   846 02E0-02E1> D9 20			run START
   847
   848 				; ------------------------------------------------------------
   849
   850 				.macro	STATICDATA
   851 				.by  $03 $02 $02 $01 $01 $02 $02 $03  $03 $03 $03 $03 $03 $03 $02 $03  $28 $14 $14 $28 $50 $50 $A0 $A0
   852 				.by  $40 $50 $50 $50 $28 $28 $A0 $A0  $18 $18 $0C $18 $30 $30 $60 $60  $C0 $C0 $C0 $C0 $18 $0C $C0 $C0
   853 				.endm
   854
   855 					end
