; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/10/16] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)||.def(MAIN.@DEFINES.A_VBXE)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	.ifdef MAIN.@DEFINES.A_VBXE
	org CODEORIGIN
	.link 'atari\a_vbxe\vbxeansi_init.obx'
	ini CODEORIGIN
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0016

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_007E					; PROCEDURE | ASSEMBLER | OVERLOAD

; -------------------  ASM Block 00000035  -------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	VBXEANSI					; UNIT

.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
	sta B

; -------------------  ASM Block 00000051  -------------------

	fxs FX_MEMS b

; ------------------------------------------------------------

B	= DATAORIGIN+$000C

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CREATE			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 57

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 58

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$000D
POSITION	= DATAORIGIN+$000F
SIZE	= DATAORIGIN+$0011

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.READBUFFER			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 87

	mwy POSITION :bp2
	ldy #$01
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	lsr @
	ror :STACKORIGIN+9
	lsr @
	ror :STACKORIGIN+9
	lsr @
	ror :STACKORIGIN+9
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 88

	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 90

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 92

	lda BUFFER
	sta DST
	lda BUFFER+1
	sta DST+1

; optimize OK (vbxe_memorystream.inc), line = 94

	lda #$00
	sta I
	sta I+1
	lda COUNT
	sub #$01
	sta @FORTMP_00D2_0
	lda COUNT+1
	sbc #$00
	sta @FORTMP_00D2_1

l_00D5
; --- ForToDoCondition
	lda @FORTMP_00D2_1:#$00
	cmp I+1
	bne @+
	lda @FORTMP_00D2_0:#$00
	cmp I
@
	jcc l_00E1

; optimize OK (vbxe_memorystream.inc), line = 96

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda (:bp),y
	mvy DST+1 :bp+1
	ldy DST
	sta (:bp),y

; optimize FAIL (0, vbxe_memorystream.inc), line = 98

	inc ADR
	sne
	inc ADR+1

; optimize FAIL (0, vbxe_memorystream.inc), line = 99

	inc DST
	sne
	inc DST+1

; optimize OK (vbxe_memorystream.inc), line = 101

	lda ADR+1
	cmp #$C0
	jcc l_0100
	bne @+
	lda ADR
	jcc l_0100
@

; optimize FAIL (0, vbxe_memorystream.inc), line = 102

	inc BNK

; optimize OK (vbxe_memorystream.inc), line = 103

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 104

	lda #$00
	sta ADR
	lda #$B0
	sta ADR+1
l_0100

; --- ForToDoEpilog
	inc I
	jne l_00D5
	inc I+1
	jne l_00D5
l_00E1

; optimize OK (vbxe_memorystream.inc), line = 109

	lda #$00
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 111

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add COUNT
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc COUNT+1
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0017
BUFFER	= DATAORIGIN+$0019
COUNT	= DATAORIGIN+$001B
POSITION	= DATAORIGIN+$001D
SIZE	= DATAORIGIN+$001F
BNK	= DATAORIGIN+$0021
ADR	= DATAORIGIN+$0022
I	= DATAORIGIN+$0024
DST	= DATAORIGIN+$0026

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 17

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 124

	mwy POSITION :bp2
	ldy #$01
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	lsr @
	ror :STACKORIGIN+9
	lsr @
	ror :STACKORIGIN+9
	lsr @
	ror :STACKORIGIN+9
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 125

	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 127

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 129

	lda BUFFER
	sta SRC
	lda BUFFER+1
	sta SRC+1

; optimize OK (vbxe_memorystream.inc), line = 131

	lda #$00
	sta I
	sta I+1
	lda COUNT
	sub #$01
	sta @FORTMP_0148_0
	lda COUNT+1
	sbc #$00
	sta @FORTMP_0148_1

l_014B
; --- ForToDoCondition
	lda @FORTMP_0148_1:#$00
	cmp I+1
	bne @+
	lda @FORTMP_0148_0:#$00
	cmp I
@
	jcc l_0157

; optimize OK (vbxe_memorystream.inc), line = 133

	mwy SRC :bp2
	ldy #$00
	lda (:bp2),y
	ldy ADR+1
	sty :bp+1
	ldy ADR
	sta (:bp),y

; optimize FAIL (0, vbxe_memorystream.inc), line = 135

	inc ADR
	sne
	inc ADR+1

; optimize FAIL (0, vbxe_memorystream.inc), line = 136

	inc SRC
	sne
	inc SRC+1

; optimize OK (vbxe_memorystream.inc), line = 138

	lda ADR+1
	cmp #$C0
	jcc l_0176
	bne @+
	lda ADR
	jcc l_0176
@

; optimize FAIL (0, vbxe_memorystream.inc), line = 139

	inc BNK

; optimize OK (vbxe_memorystream.inc), line = 140

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 141

	lda #$00
	sta ADR
	lda #$B0
	sta ADR+1
l_0176

; --- ForToDoEpilog
	inc I
	jne l_014B
	inc I+1
	jne l_014B
l_0157

; optimize OK (vbxe_memorystream.inc), line = 146

	lda #$00
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 148

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add COUNT
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc COUNT+1
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$002A
BUFFER	= DATAORIGIN+$002C
COUNT	= DATAORIGIN+$002E
POSITION	= DATAORIGIN+$0030
SIZE	= DATAORIGIN+$0032
BNK	= DATAORIGIN+$0034
ADR	= DATAORIGIN+$0035
I	= DATAORIGIN+$0037
SRC	= DATAORIGIN+$0039

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 17

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETOVERLAYADDRESS				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000053  -------------------

	fxs FX_MEMS #$80

	lda a
	sta MAIN.SYSTEM.VBXE_WINDOW+VBXE_ANSIXDL+8
	lda a+1
	sta MAIN.SYSTEM.VBXE_WINDOW+VBXE_ANSIXDL+9
	lda a+2
	sta MAIN.SYSTEM.VBXE_WINDOW+VBXE_ANSIXDL+10

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= DATAORIGIN+$0059

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ANSICHAR					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000056  -------------------

	txa:pha

	fxs FX_MEMS #$ff

	lda a
	sta atachr

	jsr @ansi.process_char

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$005D

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NORMVIDEO					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000062  -------------------

  	txa:pha

	sta FX_CORE_RESET

	fxs FX_MEMC #0

        lda     #0
        ldy     #FX_MEMC
        sta     (fxptr),y

	fxsa FX_MEMS

	ldy     #FX_MEMS
        sta     (fxptr),y

	fxsa FX_VIDEO_CONTROL

        ldy     #FX_VIDEO_CONTROL
        sta     (fxptr),y

	@clrscr

	pla:tax

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000063  -------------------

   .local @ansi

	icl 'atari\a_vbxe\vbxeansi_main.asm'

   .endl
  
	rts

; ------------------------------------------------------------

VBXE_ANSIADR	= $7F100
VBXE_ANSIFRE	= $80F00
VBXE_ANSIXDL	= $0800
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
BCBLACK	= $80
BCRED	= $90
BCGREEN	= $A0
BCYELLOW	= $B0
BCBLUE	= $C0
BCMAGENTA	= $D0
BCCYAN	= $E0
BCWHITE	= $F0
ROW_SLIDE_STATUS	= DATAORIGIN+$000B

.endl							; UNIT VBXEANSI

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	NOSOUND						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000073  -------------------

	lda #0
	sta $d208
	sta $d218

	ldy #3
	sty $d20f
	sty $d21f

	ldy #8
lp	sta $d200,y
	sta $d210,y
	dey
	bpl lp

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$005E
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

.local	KEYSCAN						; PROCEDURE

	jmp l_0197

.local	GET_KEY						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000075  -------------------

key_delay = 1

	lda $d20f
	and #4
	bne @exit

	lda $d209

	cmp onKey_: #0
	bne skp

	ldy delay: #key_delay
	dey
	sty delay
	bne @exit
skp
	sta onKey
	sta onKey_

	mva #key_delay delay

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0197

; optimize FAIL ('GET_KEY', test_ansi.pas), line = 51

	jsr GET_KEY

; optimize OK (test_ansi.pas), line = 53

	lda #$00
	sta A

; optimize OK (test_ansi.pas), line = 55

	lda ONKEY
	jeq l_01AF

; optimize OK (test_ansi.pas), line = 57

	sta @CASETMP_0003
	cmp #$1C
	jne l_01BB
@

; optimize OK (test_ansi.pas), line = 58

	lda #$01
	sta STOP

	jmp a_0003
l_01BB
	cmp #$2E
	jne l_01C8
@

; optimize OK (test_ansi.pas), line = 60

	lda #$01
	sta A

	jmp a_0003
l_01C8
	cmp #$3E
	jne l_01D5
@

; optimize OK (test_ansi.pas), line = 61

	lda #$02
	sta A

l_01D5
a_0003
l_01AF

; optimize OK (test_ansi.pas), line = 66

	lda #$00
	sta ONKEY

; optimize OK (test_ansi.pas), line = 68

	lda A
	sta @CASETMP_0004
	cmp #$01
	jne l_01F1
@

; optimize OK (test_ansi.pas), line = 69

	lda VADR+3
	cmp #$00
	bne @+
	lda VADR+2
	cmp #$08
	bne @+
	lda VADR+1
	cmp #$0F
	bne @+
	lda VADR
	cmp #$01
@
	jcc l_0201
	lda VADR
	sub #$A0
	sta VADR
	lda VADR+1
	sbc #$00
	sta VADR+1
	lda VADR+2
	sbc #$00
	sta VADR+2
	lda VADR+3
	sbc #$00
	sta VADR+3
l_0201

	jmp a_0004
l_01F1
	cmp #$02
	jne l_020E
@

; optimize OK (test_ansi.pas), line = 70

	lda VADR+3
	cmp ANSIEND+3
	bne @+
	lda VADR+2
	cmp ANSIEND+2
	bne @+
	lda VADR+1
	cmp ANSIEND+1
	bne @+
	lda VADR
	cmp ANSIEND
@
	jcs l_021E
	lda VADR
	add #$A0
	sta VADR
	lda VADR+1
	adc #$00
	sta VADR+1
	lda VADR+2
	adc #$00
	sta VADR+2
	lda VADR+3
	adc #$00
	sta VADR+3
l_021E

l_020E
a_0004

; ------------------------------------------------------------

A	= DATAORIGIN+$0188
ONKEY	= DATAORIGIN+$0189
@CASETMP_0003	= DATAORIGIN+$018A
@CASETMP_0004	= DATAORIGIN+$018B

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0016

; optimize FAIL ('VBXEANSI.TVBXEMEMORYSTREAM.CREATE', test_ansi.pas), line = 79

	lda VRAM
	ldy VRAM+1
	jsr VBXEANSI.TVBXEMEMORYSTREAM.CREATE

; optimize OK (test_ansi.pas), line = 80

	lda #$00
	sta VRAM.POSITION
	lda #$0F
	sta VRAM.POSITION+1
	lda #$08
	sta VRAM.POSITION+2
	lda #$00
	sta VRAM.POSITION+3

; optimize OK (test_ansi.pas), line = 82

	sta VBXEANSI.ROW_SLIDE_STATUS
; AssignFile

; optimize OK (test_ansi.pas), line = 85

	mwy F :bp2
	ldy #s@file.pfname
	sta (:bp2),y
	iny
	lda #$20
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset
	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; --- RepeatUntilProlog
l_023F
; BlockRead

; optimize OK (test_ansi.pas), line = 89

	mwy F :bp2
	ldy #s@file.buffer
	lda BF
	sta (:bp2),y
	iny
	lda BF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$00
	sta (:bp2),y
	iny
	lda #$01
	sta (:bp2),y
	ldy #s@file.numread
	lda <NUM
	sta (:bp2),y
	iny
	lda >NUM
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #135
	pla:tax

; optimize OK (test_ansi.pas), line = 91

	lda NUM+1
	ora NUM
	jeq l_025D

; optimize OK (test_ansi.pas), line = 92

	lda #$00
	sta I
	sta I+1
	lda NUM
	sub #$01
	sta @FORTMP_0269_0
	lda NUM+1
	sbc #$00
	sta @FORTMP_0269_1

l_026C
; --- ForToDoCondition
	lda @FORTMP_0269_1:#$00
	cmp I+1
	bne @+
	lda @FORTMP_0269_0:#$00
	cmp I
@
	jcc l_0278

; optimize OK (test_ansi.pas), line = 93

	ldy I
	lda adr.BF,y
	jsr VBXEANSI.ANSICHAR

; optimize OK (test_ansi.pas), line = 96

	lda VBXEANSI.ROW_SLIDE_STATUS
	jeq l_028A

; optimize OK (test_ansi.pas), line = 98

	lda ROW0
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
	lda ROW0+1
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
	lda #$A0
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
	lda #$00
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
	lda VRAM
	ldy VRAM+1
	jsr VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER

; optimize OK (test_ansi.pas), line = 100

	lda #$00
	sta VBXEANSI.ROW_SLIDE_STATUS
l_028A

; --- ForToDoEpilog
	inc I
	jne l_026C
	inc I+1
	jne l_026C
l_0278
l_025D

; optimize OK (test_ansi.pas), line = 107

	lda NUM+1
	ora NUM
	jne l_023F
; CloseFile

	txa:pha
	sec
	@closefile F
	pla:tax

; optimize FAIL ('CRT.NOSOUND', test_ansi.pas), line = 111

	jsr CRT.NOSOUND

; optimize FAIL ('VBXEANSI.TVBXEMEMORYSTREAM.CREATE', test_ansi.pas), line = 114

	lda SRC
	ldy SRC+1
	jsr VBXEANSI.TVBXEMEMORYSTREAM.CREATE

; optimize OK (test_ansi.pas), line = 115

	lda #$00
	sta SRC.POSITION
	lda #$F1
	sta SRC.POSITION+1
	lda #$07
	sta SRC.POSITION+2
	lda #$00
	sta SRC.POSITION+3

; optimize OK (test_ansi.pas), line = 118

	sta I
	sta I+1

l_02B7
; --- ForToDoCondition
	lda I
	cmp #$18
	jcs l_02C4

; optimize OK (test_ansi.pas), line = 120

	lda BF
	sta VBXEANSI.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda BF+1
	sta VBXEANSI.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$A0
	sta VBXEANSI.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXEANSI.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda SRC
	ldy SRC+1
	jsr VBXEANSI.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (test_ansi.pas), line = 122

	lda BF
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
	lda BF+1
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
	lda #$A0
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
	lda #$00
	sta VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
	lda VRAM
	ldy VRAM+1
	jsr VBXEANSI.TVBXEMEMORYSTREAM.WRITEBUFFER

; --- ForToDoEpilog
	inc I
	jne l_02B7
l_02C4

; optimize OK (test_ansi.pas), line = 127

	lda VRAM.POSITION
	sta ANSIEND
	lda VRAM.POSITION+1
	sub #$0F
	sta ANSIEND+1
	lda VRAM.POSITION+2
	sbc #$00
	sta ANSIEND+2
	lda VRAM.POSITION+3
	sbc #$00
	sta ANSIEND+3

; optimize OK (test_ansi.pas), line = 129

	lda ANSIEND
	sta VADR
	lda ANSIEND+1
	sta VADR+1
	lda ANSIEND+2
	sta VADR+2
	lda ANSIEND+3
	sta VADR+3

; optimize OK (test_ansi.pas), line = 131

	lda #$00
	sta STOP

; --- RepeatUntilProlog
l_02E6

; optimize FAIL ('SYSTEM.PAUSE_007E', test_ansi.pas), line = 135

	jsr SYSTEM.PAUSE_007E

; optimize FAIL ('KEYSCAN', test_ansi.pas), line = 137

	jsr KEYSCAN

; optimize OK (test_ansi.pas), line = 139

	lda VADR
	sta VBXEANSI.SETOVERLAYADDRESS.A
	lda VADR+1
	sta VBXEANSI.SETOVERLAYADDRESS.A+1
	lda VADR+2
	sta VBXEANSI.SETOVERLAYADDRESS.A+2
	lda VADR+3
	sta VBXEANSI.SETOVERLAYADDRESS.A+3
	jsr VBXEANSI.SETOVERLAYADDRESS

; optimize OK (test_ansi.pas), line = 141

	lda STOP
	jeq l_02F6
	jmp b_02E6					; break
l_02F6

; optimize OK (test_ansi.pas), line = 143

	jmp l_02E6
b_02E6

; optimize FAIL ('VBXEANSI.NORMVIDEO', test_ansi.pas), line = 146

	jsr VBXEANSI.NORMVIDEO

; ------------------------------------------------------------

.var F	= DATAORIGIN+$005F .word
NUM	= DATAORIGIN+$006B
I	= DATAORIGIN+$006D
STOP	= DATAORIGIN+$006F
adr.BF	= [DATAORIGIN+$0070] .array [256]
.var BF	= adr.BF .word
adr.ROW0	= $0400
.var ROW0	= adr.ROW0 .word
adr.VRAM	= DATAORIGIN+$0170	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0170
VRAM.SIZE	= DATAORIGIN+$0174
adr.SRC	= DATAORIGIN+$0178	; [8] OBJECT
.var SRC	= adr.SRC .word
SRC.POSITION	= DATAORIGIN+$0178
SRC.SIZE	= DATAORIGIN+$017C
VADR	= DATAORIGIN+$0180
ANSIEND	= DATAORIGIN+$0184
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
A_VBXE
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.VBXEANSI.@UnitInit
	jsr MAIN.VBXEANSI.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.VBXEANSI) > 0
	.print 'VBXEANSI: ',MAIN.VBXEANSI,'..',MAIN.VBXEANSI+.SIZEOF(MAIN.VBXEANSI)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 398

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0D $44 $3A $43 $45 $53 $50 $4C  $41 $54 $2E $41 $4E $53 $00
.endm

	end
