; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2021/09/11] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.endif

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RMTPLAY 'assets\bootup.feat' RMT_PLAYER 2 0 0 0 0 0 0 0
	RMT 'assets\bootup.rmt' RMT_MODUL 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_02B3

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 017  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 018  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

; optimize FAIL ('@print', CRT), line = 150

	@print #$7D
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READKEY						; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 050  ---------------------

	m@call @GetKey
	sta Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 054  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000D

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTANTIC					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 061  ---------------------


// ANTIC PAL Test for Atari 8-bits
// (C) 2019 Guillermo Fuenzalida

antic_loop1
	lda vcount
	cmp #100
	bcc antic_loop1		// wait till scanline 200
	sta scanline
antic_loop2
	lda vcount
	cmp #10
	bmi antic_loop2_fin
	cmp scanline
	bmi antic_loop2
	sta scanline
	bpl antic_loop2

antic_loop2_fin
	ldy #$00
	lda #0
scanline equ *-1
	cmp #135
	bmi ntsc
	iny
ntsc
	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000E

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	RMT						; UNIT

.local	TRMT.INIT					; PROCEDURE | ASSEMBLER
	sta TRMT
	sty TRMT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; ---------------------  ASM Block 071  ---------------------

	txa:pha

	mwa TRMT :bp2

	ldy #0
	lda (:bp2),y
	add #3		; jsr player+3
	sta adr
	iny
	lda (:bp2),y
	adc #0
	sta adr+1

	iny
	lda (:bp2),y
	tax		; low byte of RMT module to X reg
	iny
	lda (:bp2),y
	tay		; hi byte of RMT module to Y reg

	lda a		; starting song line 0-255 to A reg
	jsr $ffff
adr	equ *-2

	pla:tax


; ------------------------------------------------------------

TRMT	= DATAORIGIN+$0010
A	= DATAORIGIN+$0012
PLAYER	= DATAORIGIN+$0013
MODUL	= DATAORIGIN+$0015

@VarData	= TRMT
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRMT.PLAY					; PROCEDURE | ASSEMBLER
	sta TRMT
	sty TRMT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; ---------------------  ASM Block 073  ---------------------

	txa:pha

	asl ntsc		; =0 PAL, =4 NTSC
	bcc skp

	lda #%00000100
	sta ntsc

	bne quit
skp
	mwa TRMT adr

	ldy #1
mov	lda $ff00,y
adr	equ *-2
	sta ptr,y
	dey
	bpl mov

	jsr $ff00		; jmp (TRMT)	6502 buggy indirect jump
ptr	equ *-2

quit	pla:tax


; ------------------------------------------------------------

TRMT	= DATAORIGIN+$001B
PLAYER	= DATAORIGIN+$001D
MODUL	= DATAORIGIN+$001F

@VarData	= TRMT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRMT.STOP					; PROCEDURE | ASSEMBLER
	sta TRMT
	sty TRMT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; ---------------------  ASM Block 074  ---------------------

	txa:pha

	mwa TRMT :bp2

	ldy #0
	lda (:bp2),y
	add #9		; jsr player+9
	sta adr
	iny
	lda (:bp2),y
	adc #0
	sta adr+1

	jsr $ffff
adr	equ *-2

	pla:tax


; ------------------------------------------------------------

TRMT	= DATAORIGIN+$0021
PLAYER	= DATAORIGIN+$0023
MODUL	= DATAORIGIN+$0025

@VarData	= TRMT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize FAIL ('MISC.DETECTANTIC', RMT), line = 183

	jsr MISC.DETECTANTIC
	dex
	lda :STACKORIGIN+1,x
	jeq l_033E

; optimize OK (RMT), line = 184

	lda #$00
	sta NTSC
	jmp l_034C
l_033E

; optimize OK (RMT), line = 186

	lda #$04
	sta NTSC
l_034C

	rts

; ------------------------------------------------------------

NTSC	= DATAORIGIN+$000F

.endl							; UNIT RMT

.local	VBL						; PROCEDURE | INTERRUPT

; optimize FAIL ('RMT.TRMT.PLAY', dli_vbl.pas), line = 44

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY

; ---------------------  ASM Block 075  ---------------------


	jmp xitvbv

	rti						; ret
.endl

.local	DLI_BS						; PROCEDURE | INTERRUPT

; ---------------------  ASM Block 076  ---------------------

	phr

	ldx #$0
lp
	stx colbak
	txa
	and #$82
	sta color2
	stx wsync
	inx
	cpx #$e0
	bne lp

	plr

	rti						; ret
.endl
l_02B3

	lda VDSLST
	sta OLD_DLI
	lda VDSLST+1
	sta OLD_DLI+1

	lda VVBLKD
	sta OLD_VBL
	lda VVBLKD+1
	sta OLD_VBL+1

; optimize OK (dli_vbl.pas), line = 79

	lda #$AC
	sta $0230
	lda #$22
	sta $0230+1

; optimize OK (dli_vbl.pas), line = 81

	lda #$00
	sta MSX.PLAYER
	lda #$A0
	sta MSX.PLAYER+1

; optimize OK (dli_vbl.pas), line = 82

	lda #$00
	sta MSX.MODUL
	lda #$40
	sta MSX.MODUL+1

; optimize OK (dli_vbl.pas), line = 84

	lda #$00
	sta RMT.TRMT.INIT.A
	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.INIT

; optimize OK (dli_vbl.pas), line = 86

	lda <VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >VBL
	sta VVBLKD+1

; optimize OK (dli_vbl.pas), line = 88

	mva <DLI_BS VDSLST
	mva >DLI_BS VDSLST+1

; optimize OK (dli_vbl.pas), line = 90

	lda #$C0
	sta $D40E

; optimize FAIL ('@print', dli_vbl.pas), line = 92

	@printSTRING #CODEORIGIN+$0000
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 93

	@printSTRING #CODEORIGIN+$0025
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 94

	@printSTRING #CODEORIGIN+$004A
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 95

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 96

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 97

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 98

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 99

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 100

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 101

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 102

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 103

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 104

	@printSTRING #CODEORIGIN+$0054
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 105

	@printSTRING #CODEORIGIN+$0077
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 106

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 107

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 108

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 109

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 110

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 111

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 112

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 113

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 114

	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 115

	@printSTRING #CODEORIGIN+$009B

; --- RepeatUntilProlog
l_037C

; optimize FAIL ('CRT.KEYPRESSED', dli_vbl.pas), line = 119

	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_037C

; optimize OK (dli_vbl.pas), line = 121

	lda OLD_VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda OLD_VBL+1
	sta VVBLKD+1

; optimize OK (dli_vbl.pas), line = 122

	mva OLD_DLI VDSLST
	mva OLD_DLI+1 VDSLST+1

; optimize FAIL ('RMT.TRMT.STOP', dli_vbl.pas), line = 124

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.STOP

; optimize FAIL ('CRT.READKEY', dli_vbl.pas), line = 126

	jsr CRT.READKEY
	dex

; optimize OK (dli_vbl.pas), line = 128

	lda #$CE
	sta $0230
	lda #$22
	sta $0230+1

; optimize OK (dli_vbl.pas), line = 131

	lda #$00
	sta $0058
	lda #$80
	sta $0058+1

; optimize FAIL ('CRT.CLRSCR', dli_vbl.pas), line = 132

	jsr CRT.CLRSCR

; optimize FAIL ('@print', dli_vbl.pas), line = 134

	@printSTRING #CODEORIGIN+$00C0
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 135

	@printSTRING #CODEORIGIN+$00E6
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 136

	@printSTRING #CODEORIGIN+$0107
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 137

	@printSTRING #CODEORIGIN+$0127
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 138

	@printSTRING #CODEORIGIN+$014A
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 139

	@printSTRING #CODEORIGIN+$015B
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 140

	@printSTRING #CODEORIGIN+$016D
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 141

	@printSTRING #CODEORIGIN+$0188
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 142

	@printSTRING #CODEORIGIN+$01AA
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 143

	@printSTRING #CODEORIGIN+$01CC
	@printEOL

; optimize OK (dli_vbl.pas), line = 146

	lda #$00
	sta $0058
	lda #$90
	sta $0058+1

; optimize OK (dli_vbl.pas), line = 149

	lda #$02
	sta $0055
	lda #$00
	sta $0055+1

; optimize OK (dli_vbl.pas), line = 150

	sta $0054

; optimize FAIL ('@print', dli_vbl.pas), line = 153

	@printSTRING #CODEORIGIN+$01E0

; optimize FAIL ('@print', dli_vbl.pas), line = 154

	@printSTRING #CODEORIGIN+$01F6

; optimize FAIL ('@print', dli_vbl.pas), line = 155

	@printSTRING #CODEORIGIN+$020A

; optimize FAIL ('@print', dli_vbl.pas), line = 156

	@printSTRING #CODEORIGIN+$01F6

; optimize FAIL ('@print', dli_vbl.pas), line = 157

	@printSTRING #CODEORIGIN+$01F6

; optimize OK (dli_vbl.pas), line = 160

	lda #$00
	sta $0058
	lda #$84
	sta $0058+1

; optimize OK (dli_vbl.pas), line = 161

	lda #$02
	sta $0055
	lda #$00
	sta $0055+1

; optimize OK (dli_vbl.pas), line = 162

	sta $0054

; optimize FAIL ('@print', dli_vbl.pas), line = 164

	@printSTRING #CODEORIGIN+$0220
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 165

	@printSTRING #CODEORIGIN+$0246
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 166

	@printSTRING #CODEORIGIN+$0266
	@printEOL

; optimize FAIL ('@print', dli_vbl.pas), line = 167

	@printSTRING #CODEORIGIN+$0286
	@printEOL

; --- RepeatUntilProlog
l_03DA

; optimize FAIL ('CRT.KEYPRESSED', dli_vbl.pas), line = 171

	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_03DA

; ------------------------------------------------------------

adr.DL	= CODEORIGIN+$02AC
.var DL	= adr.DL .word
adr.DL2	= CODEORIGIN+$02CE
.var DL2	= adr.DL2 .word
RMT_PLAYER	= $A000
RMT_MODUL	= $4000
adr.MSX	= [DATAORIGIN+$0027] .array [7]
.var MSX	= adr.MSX .word
MSX.PLAYER	= DATAORIGIN+$0027
MSX.MODUL	= DATAORIGIN+$0029
OLD_DLI	= DATAORIGIN+$002B
OLD_VBL	= DATAORIGIN+$002D
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	eif

	.ifdef MAIN.RMT.@UnitInit
	jsr MAIN.RMT.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.RMT) > 0
	.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 47

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $23 $20 $20 $20 $52 $4D $54 $2D  $44 $4C $2D $56 $42 $4C $2D $44  $4C $49 $20 $77 $69 $74 $68 $20
.by  $4D $41 $44 $20 $50 $61 $73 $63  $61 $6C $20 $20 $00 $23 $4E $54  $53 $43 $20 $2F $20 $50 $41 $4C
.by  $20 $64 $65 $74 $65 $63 $74 $20  $66 $6F $72 $20 $63 $6F $72 $72  $65 $63 $74 $20 $6D $75 $73 $69
.by  $63 $00 $08 $70 $6C $61 $79 $62  $61 $63 $6B $00 $21 $59 $6F $75  $20 $63 $61 $6E $20 $70 $75 $74
.by  $20 $74 $65 $78 $74 $20 $74 $6F  $20 $73 $63 $72 $65 $65 $6E $20  $73 $69 $6D $70 $6C $65 $00 $22
.by  $77 $72 $69 $74 $65 $20 $2F $20  $77 $72 $69 $74 $65 $6C $6E $20  $63 $6F $6D $6D $61 $6E $64 $73
.by  $20 $6F $66 $20 $50 $61 $73 $63  $61 $6C $00 $23 $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $70
.by  $72 $65 $73 $73 $20 $61 $20 $6B  $65 $79 $20 $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $00
.by  $24 $30 $20 $2D $20 $20 $20 $20  $20 $20 $64 $69 $66 $66 $65 $72  $65 $6E $74 $20 $67 $66 $78 $20
.by  $6D $6F $64 $65 $73 $20 $20 $20  $20 $20 $20 $20 $20 $00 $1F $31  $20 $2D $20 $74 $65 $6E $20 $6C
.by  $69 $6E $65 $73 $20 $6F $66 $20  $67 $66 $78 $20 $30 $20 $61 $74  $20 $24 $38 $30 $30 $30 $00 $1E
.by  $32 $20 $2D $20 $69 $6E $68 $65  $72 $69 $74 $20 $62 $79 $20 $73  $6F $6D $65 $20 $6C $69 $6E $65
.by  $73 $20 $77 $69 $74 $68 $00 $21  $33 $20 $2D $20 $67 $66 $78 $20  $31 $20 $26 $20 $32 $20 $6F $6E
.by  $20 $64 $69 $66 $66 $65 $72 $65  $6E $74 $20 $73 $63 $72 $65 $65  $6E $00 $0F $34 $20 $2D $20 $6D
.by  $65 $6D $6F $72 $79 $20 $61 $72  $65 $61 $00 $10 $35 $20 $2D $20  $28 $24 $39 $30 $30 $30 $20 $68
.by  $65 $72 $65 $29 $00 $19 $36 $20  $2D $20 $66 $69 $72 $73 $74 $20  $67 $66 $78 $30 $20 $77 $72 $69
.by  $74 $65 $20 $74 $68 $65 $6E $00  $20 $37 $20 $2D $20 $63 $68 $61  $6E $67 $65 $20 $38 $38 $20 $74
.by  $6F $20 $77 $72 $69 $74 $65 $20  $67 $66 $78 $20 $31 $20 $26 $20  $32 $00 $20 $38 $20 $2D $20 $74
.by  $68 $65 $6E $20 $73 $61 $6D $65  $20 $66 $6F $72 $20 $77 $72 $69  $74 $69 $6E $67 $20 $67 $66 $78
.by  $20 $31 $32 $00 $12 $39 $20 $2D  $20 $6E $65 $61 $74 $2C $20 $69  $73 $6E $74 $20 $69 $74 $3F $00
.by  $14 $20 $20 $20 $48 $45 $72 $65  $20 $57 $65 $20 $47 $4F $20 $20  $20 $20 $20 $20 $20 $00 $12 $20
.by  $20 $20 $48 $45 $72 $65 $20 $57  $65 $20 $47 $4F $20 $20 $20 $20  $20 $00 $14 $20 $21 $21 $48 $45
.by  $72 $65 $20 $57 $65 $20 $47 $4F  $21 $21 $20 $20 $20 $20 $20 $00  $24 $2D $2D $2D $2D $2D $2D $2D
.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D
.by  $2D $2D $2D $2D $2D $00 $1E $20  $20 $20 $20 $20 $67 $66 $78 $20  $31 $32 $20 $69 $73 $20 $68 $61
.by  $72 $64 $20 $74 $6F $20 $72 $65  $61 $64 $20 $3A $29 $00 $1E $20  $20 $20 $20 $20 $62 $65 $74 $74
.by  $65 $72 $20 $75 $73 $65 $20 $61  $20 $73 $70 $65 $63 $69 $61 $6C  $20 $66 $6F $6E $74 $00 $24 $2D
.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $4B $45 $59 $2D  $2D $45 $58 $49 $54 $53 $2D $2D
.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $00 $F0 $70 $70 $42  $40 $BC $40 $02 $02 $02 $02 $02
.by  $02 $02 $02 $02 $02 $02 $02 $02  $02 $02 $02 $02 $02 $02 $02 $02  $02 $02 $02 $41 $AC $22 $70 $70
.by  $70 $42 $00 $80 $70 $70 $70 $02  $02 $02 $02 $46 $00 $90 $06 $07  $06 $06 $42 $C8 $80 $02 $02 $02
.by  $70 $44 $00 $84 $04 $04 $04 $70  $42 $68 $81 $41 $CE $22
.endm

	end
