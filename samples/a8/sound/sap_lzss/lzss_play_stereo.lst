mads 2.1.6 build 15 (25 Sep 22)
Source: lzss_play_stereo.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/09/27] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 					org CODEORIGIN
   105
   106 				.local	MAIN.@RESOURCE
   107 				.endl
   108
   109 				.local	RESOURCE
   110 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1228 					opt l+
   111 = 0000				?EXTDETECT = 0
   112 = 0000				?VBXDETECT = 0
   113
   114 2075				SAPRPLAY '' PLAY_R 0 0 0 0 0 0 0 0
Macro: RESOURCE.SAPRPLAY [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0300			len	= .sizeof(_PLAY_R)
     8 				mcpy	ift (main.PLAY_R<$bc20) && (main.PLAY_R+len >= $bc20)
    13 2075 20 41 20			jsr sys.off
    15 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    15 2080 A9 00 85 8C A9 C0 +  MWA #MAIN.PLAY_R ECX
    15 2088 A9 00 85 84 A9 03 +  MWA #LEN EAX
    15 2090 20 00 20		 JSR RESOURCE.MEMCPY
    17 2093 4C 65 20			jmp sys.on
    18 2096			data
    25 					.print '$R SAPRPLAY ',main.PLAY_R,'..',main.PLAY_R+$c00-1
    25 				$R SAPRPLAY $C000..$CBFF
    27 02E2-02E3> 75 20			ini mcpy
Source: lzss_play_stereo.a65
   115 2396				SAPRPLAY '' PLAY_L 0 0 0 0 0 0 0 0
Macro: RESOURCE.SAPRPLAY [Source: resource.asm]
     2 2396				org RESORIGIN
     4 = 0300			len	= .sizeof(_PLAY_L)
     8 				mcpy	ift (main.PLAY_L<$bc20) && (main.PLAY_L+len >= $bc20)
    13 2075-2395> 20 41 20		jsr sys.off
    15 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    15 2080 A9 00 85 8C A9 F0 +  MWA #MAIN.PLAY_L ECX
    15 2088 A9 00 85 84 A9 03 +  MWA #LEN EAX
    15 2090 20 00 20		 JSR RESOURCE.MEMCPY
    17 2093 4C 65 20			jmp sys.on
    18 2096			data
    25 					.print '$R SAPRPLAY ',main.PLAY_L,'..',main.PLAY_L+$c00-1
    25 				$R SAPRPLAY $F000..$FBFF
    27 02E2-02E3> 75 20			ini mcpy
Source: lzss_play_stereo.a65
   116 				.endl
   117
   118 				; ------------------------------------------------------------
   119
   120 2396				org CODEORIGIN
   121
   122 2000				STATICDATA
Macro: STATICDATA [Source: lzss_play_stereo.a65]
     1 2000-59C8> 05 6D 6F 64 + .by  $05 $6D $6F $64 $5F $72 $00 $10  $6D $6F $64 $75 $6C $5F $72 $20  $6C $65 $6E $67 $74 $68 $3A $20
     2 2018 00 0C 2C 20 61 64 + .by  $00 $0C $2C $20 $61 $64 $64 $72  $65 $73 $73 $3A $20 $24 $00 $05  $6D $6F $64 $5F $6C $00 $10 $6D
     3 2030 6F 64 75 6C 5F 6C + .by  $6F $64 $75 $6C $5F $6C $20 $6C  $65 $6E $67 $74 $68 $3A $20 $00  $25 $50 $61 $73 $63 $61 $6C $20
     4 2048 53 41 50 2D 52 20 + .by  $53 $41 $50 $2D $52 $20 $4C $5A  $53 $53 $20 $38 $63 $68 $6E $20  $70 $6C $61 $79 $65 $72 $20 $65
     5 2060 78 61 6D 70 6C 65 + .by  $78 $61 $6D $70 $6C $65 $00
Source: lzss_play_stereo.a65
   123
   124 				; ------------------------------------------------------------
   125
   126 2067			RTLIB
   127 2067				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   128
   129 				.print 'ZPAGE: ',zpage,'..',zpend-1
   129 				ZPAGE: $0080..$00D3
   130
   131 				.print 'RTLIB: ',RTLIB,'..',*-1
   131 				RTLIB: $2067..$21FF
   132
   133 				; ------------------------------------------------------------
   134
   135 2200			START
   136 2200 BA				tsx
   137 2201 8E 3B 25			stx MAIN.@halt+1
   138
   139 = 0059			VLEN	= VARDATASIZE-VARINITSIZE
   140 = 59D2			VADR	= DATAORIGIN+VARINITSIZE
   141
   142 					ift VADR > $BFFF
   143 					ert 'Invalid memory address range ',VADR
   144 					eli (VLEN>0) && (VLEN<=256)
   145 2204 A2 A7			ldx #256-VLEN
   146 2206 A9 00			lda #$00
   147 2208 9D 2B 59 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   148 					eli VLEN>256
   149 					@fill #VADR #VLEN #$00
   150 					eif
   151
   152 				.ifdef :psptr
   153 					mwa #PROGRAMSTACK :psptr
   154 				.fi
   155
   156 					.ifdef MAIN.@DEFINES.ROMOFF
   157 220E				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 220E			.local	rominit
     5
     6 220E 78			        sei
     7 220F A9 00		        lda #%00000000
     8 2211 8D 0E D4		        sta NMIEN       ;$D40E
     9 2214 A9 FE		        lda #%11111110
    10 2216 8D 01 D3		        sta PORTB       ;$D301
    11
    12 2219 A2 03			ldx #3
    13 221B A0 00			ldy #0
    14 221D EE 01 D3		mv	inc portb
    15 2220 B9 00 E0		afnt0	lda $e000,y
    16 2223 CE 01 D3			dec portb
    17 2226 99 00 E0		afnt1	sta $e000,y
    18 2229 C8				iny
    19 222A D0 F1			bne mv
    20 222C EE 22 22			inc afnt0+2
    21 222F EE 28 22			inc afnt1+2
    22 2232 CA				dex
    23 2233 10 E8			bpl mv
    24
    25 2235 A2 52		        ldx #<nmiint
    26 2237 A0 22		        ldy #>nmiint
    27 2239 8E FA FF		        stx NMIVEC      ;$FFFA
    28 223C 8C FB FF		        sty NMIVEC+1
    29
    30 223F A2 5C		        ldx #<irqint
    31 2241 A0 22		        ldy #>irqint
    32 2243 8E FE FF		        stx IRQVEC      ;$FFFE
    33 2246 8C FF FF		        sty IRQVEC+1
    34
    35 2249 A9 40		        lda #%01000000
    36 224B 8D 0E D4		        sta NMIEN       ;$D40E
    37 224E 58			        cli
    38
    39 224F 4C 7D 22			jmp skp
    40
    41
    42
    43 2252 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 2255 10 03		        spl
    45 2257 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 225A 38			        sec
    48 225B 24			        .byte $24        ;BIT $18
    49
    50 225C 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 225D EE 01 D3		        inc PORTB       ;$D301
    55
    56 2260 48			        pha
    57 2261 8A			        txa
    58 2262 48			        pha
    59 2263 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 2264 A9 22		        lda #>iret      ;adres procedury iret
    64 2266 48			        pha
    65 2267 A9 76		        lda #<iret
    66 2269 48			        pha
    67 226A BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 226D 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 226E 90 03		        scc
    73 2270 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 2273 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 2276 68			iret	pla
    77 2277 AA				tax
    78 2278 68				pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 2279 CE 01 D3		        dec PORTB       ;$D301
    83 227C 40			        rti
    84
    85 227D			skp
    86
    87 				.endl
    88
   158 					.fi
   159
   160 227D A2 0F			ldx #$0F					; DOS II+/D ParamStr
   161 227F BD 40 03 9D 43 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   162
   163 2288 E8				inx						; X = 0
   164 2289 86 80			stx bp						; BP = 0
   165
   166 228B 8E 08 D2			stx audctl					; reset POKEY
   167 228E 8E 18 D2			stx audctl+$10
   168 2291 A9 03			lda #3
   169 2293 8D 0F D2			sta skctl
   170 2296 8D 1F D2			sta skctl+$10
   171
   172 2299 CA				dex						; X = 255
   173
   174 229A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: lzss_play_stereo.a65]
    15 229A 20 D9 23			jsr MAIN.SAPLZSS.@UnitInit
   175
   176 229D			.local	MAIN						; PROCEDURE
   177
   178 229D 4C DA 23			jmp l_006E
   179
   180 				; ------------------------------------------------------------
   181
   182 22A0			.local	SYSTEM						; UNIT
   183
   184 22A0			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   185
   186 				; -------------------  ASM Block 00000001  -------------------
   187
   188 22A0 20 D2 20			jsr @hexStr
   189
   190 				;	@move #@buf Result #33
   191 22A3 A0 DF			ldy #256-33
   192 22A5 B9 21 03 99 F8 58 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   193
   194 22AE			@exit
   195
   196 				; ------------------------------------------------------------
   197
   198 = 0088			VALUE	= :EDX
   199 = 008C			DIGITS	= :ECX
   200 = 59D7			adr.RESULT	= [DATAORIGIN+$000B] .array [33]
   201 22AE			.var RESULT	= adr.RESULT .word
   202
   203 = 22AF			@VarData	= RESULT
   204 = 0021			@VarDataSize	= 33
   205
   206 22AE 60				rts						; ret
   207 = 22AF D7 59		RESULT
   207 				.endl
   208
   209 22B1			.local	FILLCHAR_00AB					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   210
   211 					.MACRO m@INLINE
   212 				
   213 				; -------------------  ASM Block 00000021  -------------------
   214 				
   215 					jsr @fill
   216 				
   217 					.ENDM
   218
   219 				; ------------------------------------------------------------
   220
   221 = 0088			A	= :EDX
   222 = 008C			COUNT	= :ECX
   223 = 0084			VALUE	= :EAX
   224 22B1			@exit
   225 				.endl
   226
   227 22B1			.local	PAUSE_00CA					; PROCEDURE | ASSEMBLER | OVERLOAD
   228
   229 				; -------------------  ASM Block 00000035  -------------------
   230
   231 22B1 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   232
   233 22B7			@exit
   234 					.ifdef @new
   235 					lda <@VarData
   236 					sta :ztmp
   237 					lda >@VarData
   238 					ldy #@VarDataSize-1
   239 					jmp @FreeMem
   240 					els
   241 22B7 60				rts						; ret
   242 					eif
   243 				.endl
   244
   245 				; ------------------------------------------------------------
   246
   247 = 0101			__PORTB_BANKS	= $0101
   248 = 0648			M_PI_2	= $0648
   249 = 0192			D_PI_2	= $0192
   250 = 0004			D_PI_180	= $04
   251 = 0000			MGTIA	= $00
   252 = 0080			MVBXE	= $80
   253 = 0000			VBXE_XDLADR	= $00
   254 = 00E0			VBXE_BCBTMP	= $E0
   255 = 0100			VBXE_BCBADR	= $0100
   256 = 1000			VBXE_MAPADR	= $1000
   257 = 1000			VBXE_CHBASE	= $1000
   258 = 5000			VBXE_OVRADR	= $5000
   259 = B000			VBXE_WINDOW	= $B000
   260 = 0000			IDLI	= $00
   261 = 0001			IVBL	= $01
   262 = 0002			ITIM1	= $02
   263 = 0003			ITIM2	= $03
   264 = 0004			ITIM4	= $04
   265 = 00FE			CH_DELCHR	= $FE
   266 = 009B			CH_ENTER	= $9B
   267 = 001B			CH_ESC	= $1B
   268 = 001C			CH_CURS_UP	= $1C
   269 = 001D			CH_CURS_DOWN	= $1D
   270 = 001E			CH_CURS_LEFT	= $1E
   271 = 001F			CH_CURS_RIGHT	= $1F
   272 = 007F			CH_TAB	= $7F
   273 = 009B			CH_EOL	= $9B
   274 = 007D			CH_CLR	= $7D
   275 = 00FD			CH_BELL	= $FD
   276 = 007E			CH_DEL	= $7E
   277 = 009C			CH_DELLINE	= $9C
   278 = 009D			CH_INSLINE	= $9D
   279 = 0000			PAL_PMCOLOR0	= $00
   280 = 0001			PAL_PMCOLOR1	= $01
   281 = 0002			PAL_PMCOLOR2	= $02
   282 = 0003			PAL_PMCOLOR3	= $03
   283 = 0004			PAL_COLOR0	= $04
   284 = 0005			PAL_COLOR1	= $05
   285 = 0006			PAL_COLOR2	= $06
   286 = 0007			PAL_COLOR3	= $07
   287 = 0008			PAL_COLBAK	= $08
   288 = 0000			COLOR_BLACK	= $00
   289 = 000E			COLOR_WHITE	= $0E
   290 = 0032			COLOR_RED	= $32
   291 = 0096			COLOR_CYAN	= $96
   292 = 0068			COLOR_VIOLET	= $68
   293 = 00C4			COLOR_GREEN	= $C4
   294 = 0074			COLOR_BLUE	= $74
   295 = 00EE			COLOR_YELLOW	= $EE
   296 = 0028			COLOR_ORANGE	= $28
   297 = 00E4			COLOR_BROWN	= $E4
   298 = 003C			COLOR_LIGHTRED	= $3C
   299 = 0004			COLOR_GRAY1	= $04
   300 = 0006			COLOR_GRAY2	= $06
   301 = 000A			COLOR_GRAY3	= $0A
   302 = 00CC			COLOR_LIGHTGREEN	= $CC
   303 = 007C			COLOR_LIGHTBLUE	= $7C
   304 = 0004			FMOPENREAD	= $04
   305 = 0008			FMOPENWRITE	= $08
   306 = 0009			FMOPENAPPEND	= $09
   307 = 000C			FMOPENREADWRITE	= $0C
   308 = 59CC			SCREENWIDTH	= DATAORIGIN+$0000
   309 = 59CE			SCREENHEIGHT	= DATAORIGIN+$0002
   310 = 59D0			DATESEPARATOR	= DATAORIGIN+$0004
   311 = D20A			RND	= $D20A
   312 = 02C0			adr.PALETTE	= $02C0
   313 22B8			.var PALETTE	= adr.PALETTE .word
   314 = D012			adr.HPALETTE	= $D012
   315 22B8			.var HPALETTE	= adr.HPALETTE .word
   316 = 59D1			FILEMODE	= DATAORIGIN+$0005
   317 = 59D2			GRAPHMODE	= DATAORIGIN+$0006
   318 = 59D3			IORESULT	= DATAORIGIN+$0007
   319 = 59D4			EOLN	= DATAORIGIN+$0008
   320 = 59D5			RNDSEED	= DATAORIGIN+$0009
   321
   322 = 22B8 C0 02		PALETTE
   322 = 22BA 12 D0		HPALETTE
   322 				.endl							; UNIT SYSTEM
   323
   324 				; ------------------------------------------------------------
   325
   326 22BC			.local	ATARI						; UNIT
   327
   328 				; ------------------------------------------------------------
   329
   330 = 0010			IRQENS	= $10
   331 = 0012			RTCLOK	= $12
   332 = 0012			RTCLOK1	= $12
   333 = 0013			RTCLOK2	= $13
   334 = 0014			RTCLOK3	= $14
   335 = 004D			ATRACT	= $4D
   336 = 0052			LMARGIN	= $52
   337 = 0053			RMARGIN	= $53
   338 = 0054			ROWCRS	= $54
   339 = 0055			COLCRS	= $55
   340 = 0057			DINDEX	= $57
   341 = 0058			SAVMSC	= $58
   342 = 0062			PALNTS	= $62
   343 = 006A			RAMTOP	= $6A
   344 = 0200			VDSLST	= $0200
   345 = 0230			SDLSTL	= $0230
   346 = 0290			TXTROW	= $0290
   347 = 0291			TXTCOL	= $0291
   348 = 0293			TINDEX	= $0293
   349 = 0294			TXTMSC	= $0294
   350 = 022F			SDMCTL	= $022F
   351 = 026F			GPRIOR	= $026F
   352 = 02F0			CRSINH	= $02F0
   353 = 02F3			CHACT	= $02F3
   354 = 02F4			CHBAS	= $02F4
   355 = 02FC			CH	= $02FC
   356 = 02C0			PCOLR0	= $02C0
   357 = 02C1			PCOLR1	= $02C1
   358 = 02C2			PCOLR2	= $02C2
   359 = 02C3			PCOLR3	= $02C3
   360 = 02C4			COLOR0	= $02C4
   361 = 02C5			COLOR1	= $02C5
   362 = 02C6			COLOR2	= $02C6
   363 = 02C7			COLOR3	= $02C7
   364 = 02C8			COLOR4	= $02C8
   365 = 02C8			COLBAKS	= $02C8
   366 = D000			HPOSP0	= $D000
   367 = D001			HPOSP1	= $D001
   368 = D002			HPOSP2	= $D002
   369 = D003			HPOSP3	= $D003
   370 = D004			HPOSM0	= $D004
   371 = D005			HPOSM1	= $D005
   372 = D006			HPOSM2	= $D006
   373 = D007			HPOSM3	= $D007
   374 = D008			SIZEP0	= $D008
   375 = D009			SIZEP1	= $D009
   376 = D00A			SIZEP2	= $D00A
   377 = D00B			SIZEP3	= $D00B
   378 = D00C			SIZEM	= $D00C
   379 = D00D			GRAFP0	= $D00D
   380 = D00E			GRAFP1	= $D00E
   381 = D00F			GRAFP2	= $D00F
   382 = D010			GRAFP3	= $D010
   383 = D011			GRAFM	= $D011
   384 = D004			P0PF	= $D004
   385 = D014			PAL	= $D014
   386 = D013			TRIG3	= $D013
   387 = D012			COLPM0	= $D012
   388 = D013			COLPM1	= $D013
   389 = D014			COLPM2	= $D014
   390 = D015			COLPM3	= $D015
   391 = D016			COLPF0	= $D016
   392 = D017			COLPF1	= $D017
   393 = D018			COLPF2	= $D018
   394 = D019			COLPF3	= $D019
   395 = D01A			COLBK	= $D01A
   396 = D01B			PRIOR	= $D01B
   397 = D01D			GRACTL	= $D01D
   398 = D01E			HITCLR	= $D01E
   399 = D01F			CONSOL	= $D01F
   400 = D200			AUDF1	= $D200
   401 = D201			AUDC1	= $D201
   402 = D202			AUDF2	= $D202
   403 = D203			AUDC2	= $D203
   404 = D204			AUDF3	= $D204
   405 = D205			AUDC3	= $D205
   406 = D206			AUDF4	= $D206
   407 = D207			AUDC4	= $D207
   408 = D208			AUDCTL	= $D208
   409 = D209			KBCODE	= $D209
   410 = D20E			IRQEN	= $D20E
   411 = D20F			SKSTAT	= $D20F
   412 = D300			PORTA	= $D300
   413 = D301			PORTB	= $D301
   414 = D302			PACTL	= $D302
   415 = D400			DMACTL	= $D400
   416 = D401			CHACTL	= $D401
   417 = D402			DLISTL	= $D402
   418 = D404			HSCROL	= $D404
   419 = D405			VSCROL	= $D405
   420 = D407			PMBASE	= $D407
   421 = D409			CHBASE	= $D409
   422 = D40A			WSYNC	= $D40A
   423 = D40B			VCOUNT	= $D40B
   424 = D40C			PENH	= $D40C
   425 = D40D			PENV	= $D40D
   426 = D40E			NMIEN	= $D40E
   427 = FFFA			NMIVEC	= $FFFA
   428 = FFFC			RESETVEC	= $FFFC
   429 = FFFE			IRQVEC	= $FFFE
   430
   431 				.endl							; UNIT ATARI
   432
   433 				; ------------------------------------------------------------
   434
   435 22BC			.local	CRT						; UNIT
   436
   437 22BC			.local	READKEY						; FUNCTION | ASSEMBLER
   438
   439 				; -------------------  ASM Block 00000051  -------------------
   440
   441 22BC				m@call @GetKey
Macro: M@CALL [Source: macros.asm]
     4 22BC EE 01 D3				inc portb
     6 22BF 20 67 20				jsr @GETKEY
     8 22C2 CE 01 D3				dec portb
   442 22C5 8D F9 59			sta Result
   443
   444 22C8			@exit
   445
   446 				; ------------------------------------------------------------
   447
   448 = 59F9			RESULT	= DATAORIGIN+$002D
   449 22C8 60				rts						; ret
   450 				.endl
   451
   452 22C9			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   453
   454 				; -------------------  ASM Block 00000055  -------------------
   455
   456 22C9 A0 00			ldy #$00	; false
   457 22CB AD FC 02			lda kbcodes
   458 22CE C9 FF			cmp #$ff
   459 22D0 F0 01			seq
   460 22D2 C8				iny		; true
   461 22D3 8C FA 59			sty Result
   462
   463 22D6			@exit
   464
   465 				; ------------------------------------------------------------
   466
   467 = 59FA			RESULT	= DATAORIGIN+$002E
   468 22D6 60				rts						; ret
   469 				.endl
   470
   471 				; ------------------------------------------------------------
   472
   473 = 59F8			TEXTATTR	= DATAORIGIN+$002C
   474 = D01F			CONSOL	= $D01F
   475 = 0000			CN_START_SELECT_OPTION	= $00
   476 = 0001			CN_SELECT_OPTION	= $01
   477 = 0002			CN_START_OPTION	= $02
   478 = 0003			CN_OPTION	= $03
   479 = 0004			CN_START_SELECT	= $04
   480 = 0005			CN_SELECT	= $05
   481 = 0006			CN_START	= $06
   482 = 0007			CN_NONE	= $07
   483 = 0000			BW40	= $00
   484 = 0001			CO40	= $01
   485 = 0002			BW80	= $02
   486 = 0003			CO80	= $03
   487 = 0007			MONO	= $07
   488 = 0001			C40	= $01
   489 = 0003			C80	= $03
   490 = 0000			BLACK	= $00
   491 = 000F			WHITE	= $0F
   492 = 0026			RED	= $26
   493 = 00AC			CYAN	= $AC
   494 = 0048			PURPLE	= $48
   495 = 00B6			GREEN	= $B6
   496 = 0086			BLUE	= $86
   497 = 00DC			YELLOW	= $DC
   498 = 0018			ORANGE	= $18
   499 = 00F4			BROWN	= $F4
   500 = 002A			LIGHT_RED	= $2A
   501 = 0004			DARK_GREY	= $04
   502 = 0008			GREY	= $08
   503 = 00BC			LIGHT_GREEN	= $BC
   504 = 009A			LIGHT_BLUE	= $9A
   505 = 000C			LIGHT_GREY	= $0C
   506 = 0080			BLINK	= $80
   507
   508 				.endl							; UNIT CRT
   509
   510 				; ------------------------------------------------------------
   511
   512 22D7			.local	SAPLZSS						; UNIT
   513
   514 22D7			.local	TLZSSPLAY.INIT					; PROCEDURE | ASSEMBLER
   515 22D7 8D FB 59			sta TLZSSPLAY
   516 22DA 8C FC 59			sty TLZSSPLAY+1
   517 22DD 8D FE 59			sta JMP
   518 22E0 8C FF 59			sty JMP+1
   519 22E3 18 69 01			add #1
   520 22E6 90 01			scc
   521 22E8 C8				iny
   522 22E9 8D 00 5A			sta PLAYER
   523 22EC 8C 01 5A			sty PLAYER+1
   524 22EF 18 69 02			add #2
   525 22F2 90 01			scc
   526 22F4 C8				iny
   527 22F5 8D 02 5A			sta MODUL
   528 22F8 8C 03 5A			sty MODUL+1
   529
   530 				; -------------------  ASM Block 00000062  -------------------
   531
   532 22FB 8A 48			txa:pha
   533
   534 22FD AD FB 59 85 82 AD + 	mwa TLZSSPlay :bp2
   535
   536 2307 A0 00			ldy #0
   537 2309 A9 4C			lda #$4c	; JMP
   538 230B 91 82			sta (:bp2),y
   539
   540 230D C8				iny
   541 230E B1 82			lda (:bp2),y
   542 2310 18 69 06			add #6		; jsr player+6
   543 2313 8D 2A 23			sta adr
   544 2316 C8				iny
   545 2317 B1 82			lda (:bp2),y
   546 2319 69 00			adc #0
   547 231B 8D 2B 23			sta adr+1
   548
   549 231E A0 04			ldy #4
   550 2320 B1 82			lda (:bp2),y
   551 2322 AA				tax		; hi byte of MPT module to Y reg
   552 2323 88				dey
   553 2324 B1 82			lda (:bp2),y	; low byte of MPT module to X reg
   554
   555 2326 AC FD 59			ldy a		; POKEY: $00 | $10 | ...
   556
   557 2329 20 FF FF			jsr $ffff
   558 = 232A			adr	equ *-2
   559
   560 232C 68 AA			pla:tax
   561
   562 				; ------------------------------------------------------------
   563
   564 = 59FB			TLZSSPLAY	= DATAORIGIN+$002F
   565 = 59FD			A	= DATAORIGIN+$0031
   566 = 59FE			JMP	= DATAORIGIN+$0032
   567 = 5A00			PLAYER	= DATAORIGIN+$0034
   568 = 5A02			MODUL	= DATAORIGIN+$0036
   569
   570 = 59FB			@VarData	= TLZSSPLAY
   571 = 0009			@VarDataSize	= 9
   572
   573 232E			@exit
   574 					.ifdef @new
   575 					lda <@VarData
   576 					sta :ztmp
   577 					lda >@VarData
   578 					ldy #@VarDataSize-1
   579 					jmp @FreeMem
   580 					els
   581 232E 60				rts						; ret
   582 					eif
   583 				.endl
   584
   585 232F			.local	TLZSSPLAY.DECODE				; PROCEDURE | ASSEMBLER
   586 232F 8D 04 5A			sta TLZSSPLAY
   587 2332 8C 05 5A			sty TLZSSPLAY+1
   588 2335 8D 06 5A			sta JMP
   589 2338 8C 07 5A			sty JMP+1
   590 233B 18 69 01			add #1
   591 233E 90 01			scc
   592 2340 C8				iny
   593 2341 8D 08 5A			sta PLAYER
   594 2344 8C 09 5A			sty PLAYER+1
   595 2347 18 69 02			add #2
   596 234A 90 01			scc
   597 234C C8				iny
   598 234D 8D 0A 5A			sta MODUL
   599 2350 8C 0B 5A			sty MODUL+1
   600
   601 				; -------------------  ASM Block 00000063  -------------------
   602
   603 2353 AD 04 5A 8D 61 23 + 	mwa TLZSSPlay ptr
   604
   605 235F 18				clc
   606
   607 2360 20 00 FF			jsr $ff00		; jmp (TLZSSPlay)	6502 buggy indirect jump
   608 = 2361			ptr	equ *-2
   609
   610
   611 				; ------------------------------------------------------------
   612
   613 = 5A04			TLZSSPLAY	= DATAORIGIN+$0038
   614 = 5A06			JMP	= DATAORIGIN+$003A
   615 = 5A08			PLAYER	= DATAORIGIN+$003C
   616 = 5A0A			MODUL	= DATAORIGIN+$003E
   617
   618 = 5A04			@VarData	= TLZSSPLAY
   619 = 0008			@VarDataSize	= 8
   620
   621 2363			@exit
   622 					.ifdef @new
   623 					lda <@VarData
   624 					sta :ztmp
   625 					lda >@VarData
   626 					ldy #@VarDataSize-1
   627 					jmp @FreeMem
   628 					els
   629 2363 60				rts						; ret
   630 					eif
   631 				.endl
   632
   633 2364			.local	TLZSSPLAY.PLAY					; PROCEDURE | ASSEMBLER
   634 2364 8D 0C 5A			sta TLZSSPLAY
   635 2367 8C 0D 5A			sty TLZSSPLAY+1
   636 236A 8D 0E 5A			sta JMP
   637 236D 8C 0F 5A			sty JMP+1
   638 2370 18 69 01			add #1
   639 2373 90 01			scc
   640 2375 C8				iny
   641 2376 8D 10 5A			sta PLAYER
   642 2379 8C 11 5A			sty PLAYER+1
   643 237C 18 69 02			add #2
   644 237F 90 01			scc
   645 2381 C8				iny
   646 2382 8D 12 5A			sta MODUL
   647 2385 8C 13 5A			sty MODUL+1
   648
   649 				; -------------------  ASM Block 00000064  -------------------
   650
   651 2388 AD 0C 5A 8D 96 23 + 	mwa TLZSSPlay ptr
   652
   653 2394 38				sec
   654
   655 2395 20 00 FF			jsr $ff00		; jmp (TLZSSPlay)	6502 buggy indirect jump
   656 = 2396			ptr	equ *-2
   657
   658 				; ------------------------------------------------------------
   659
   660 = 5A0C			TLZSSPLAY	= DATAORIGIN+$0040
   661 = 5A0E			JMP	= DATAORIGIN+$0042
   662 = 5A10			PLAYER	= DATAORIGIN+$0044
   663 = 5A12			MODUL	= DATAORIGIN+$0046
   664
   665 = 5A0C			@VarData	= TLZSSPLAY
   666 = 0008			@VarDataSize	= 8
   667
   668 2398			@exit
   669 					.ifdef @new
   670 					lda <@VarData
   671 					sta :ztmp
   672 					lda >@VarData
   673 					ldy #@VarDataSize-1
   674 					jmp @FreeMem
   675 					els
   676 2398 60				rts						; ret
   677 					eif
   678 				.endl
   679
   680 2399			.local	TLZSSPLAY.STOP					; PROCEDURE | ASSEMBLER
   681 2399 8D 14 5A			sta TLZSSPLAY
   682 239C 8C 15 5A			sty TLZSSPLAY+1
   683 239F 8D 16 5A			sta JMP
   684 23A2 8C 17 5A			sty JMP+1
   685 23A5 18 69 01			add #1
   686 23A8 90 01			scc
   687 23AA C8				iny
   688 23AB 8D 18 5A			sta PLAYER
   689 23AE 8C 19 5A			sty PLAYER+1
   690 23B1 18 69 02			add #2
   691 23B4 90 01			scc
   692 23B6 C8				iny
   693 23B7 8D 1A 5A			sta MODUL
   694 23BA 8C 1B 5A			sty MODUL+1
   695
   696 				; -------------------  ASM Block 00000065  -------------------
   697
   698 23BD A9 00			lda #0
   699 23BF 8D 08 D2			sta $d208
   700 23C2 8D 18 D2			sta $d218
   701 23C5 A0 03			ldy #3
   702 23C7 8C 0F D2			sty $d20f
   703 23CA 8C 1F D2			sty $d21f
   704 23CD A0 08			ldy #8
   705 23CF 99 00 D2		clr	sta $d200,y
   706 23D2 99 10 D2			sta $d210,y
   707 23D5 88				dey
   708 23D6 10 F7			bpl clr
   709
   710 				; ------------------------------------------------------------
   711
   712 = 5A14			TLZSSPLAY	= DATAORIGIN+$0048
   713 = 5A16			JMP	= DATAORIGIN+$004A
   714 = 5A18			PLAYER	= DATAORIGIN+$004C
   715 = 5A1A			MODUL	= DATAORIGIN+$004E
   716
   717 = 5A14			@VarData	= TLZSSPLAY
   718 = 0008			@VarDataSize	= 8
   719
   720 23D8			@exit
   721 					.ifdef @new
   722 					lda <@VarData
   723 					sta :ztmp
   724 					lda >@VarData
   725 					ldy #@VarDataSize-1
   726 					jmp @FreeMem
   727 					els
   728 23D8 60				rts						; ret
   729 					eif
   730 				.endl
   731
   732 				; ------------------------------------------------------------
   733 				; ------------------------------------------------------------
   734 23D9			@UnitInit
   735
   736 23D9 60				rts
   737
   738 				; ------------------------------------------------------------
   739
   740 				.endl							; UNIT SAPLZSS
   741 23DA			l_006E
   742
   743 				; GetResourceHandle
   744 23DA A9 0E 8D 26 5A A9 + 	mwa #MAIN.@RESOURCE.mod_r.end-MAIN.@RESOURCE.mod_r LEN
   745
   746 				; GetResourceHandle
   747 23E4 A9 53 8D 28 5A A9 + 	mwa #MAIN.@RESOURCE.mod_r P
   748
   749 				; optimize FAIL ('@print', lzss_play_stereo.pas), line = 30
   750
   751 					@printSTRING #CODEORIGIN+$0007
   751 				 LDY> CODEORIGIN+$0007\ LDA< CODEORIGIN+$0007\ JSR @PRINTSTRING
   751 23EE A0 20		 LDY> CODEORIGIN+$0007
   751 23F0 A9 07		 LDA< CODEORIGIN+$0007
   751 23F2 20 3C 21		 JSR @PRINTSTRING
   752 23F5 AD 26 5A			lda LEN
   753 23F8 AC 27 5A			ldy LEN+1
   754 23FB 20 75 21			jsr @printWORD._ay
   755 					@printSTRING #CODEORIGIN+$0019
   755 				 LDY> CODEORIGIN+$0019\ LDA< CODEORIGIN+$0019\ JSR @PRINTSTRING
   755 23FE A0 20		 LDY> CODEORIGIN+$0019
   755 2400 A9 19		 LDA< CODEORIGIN+$0019
   755 2402 20 3C 21		 JSR @PRINTSTRING
   756 2405 AD 28 5A			lda P
   757 2408 85 88			sta SYSTEM.HEXSTR.VALUE
   758 240A AD 29 5A			lda P+1
   759 240D 85 89			sta SYSTEM.HEXSTR.VALUE+1
   760 240F A9 00			lda #$00
   761 2411 85 8A			sta SYSTEM.HEXSTR.VALUE+2
   762 2413 85 8B			sta SYSTEM.HEXSTR.VALUE+3
   763 2415 A9 04			lda #$04
   764 2417 85 8C			sta SYSTEM.HEXSTR.DIGITS
   765 2419 20 A0 22			jsr SYSTEM.HEXSTR
   766 					@printSTRING SYSTEM.HEXSTR.RESULT
   766 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
   766 241C AC B0 22		 LDY SYSTEM.HEXSTR.RESULT+1
   766 241F AD AF 22		 LDA SYSTEM.HEXSTR.RESULT
   766 2422 20 3C 21		 JSR @PRINTSTRING
   767 2425 20 28 21			@printEOL
   768
   769 				; optimize OK (lzss_play_stereo.pas), line = 32
   770
   771 2428 AD 28 5A			lda P
   772 242B 8D 1F 5A			sta MSX_R.MODUL
   773 242E AD 29 5A			lda P+1
   774 2431 8D 20 5A			sta MSX_R.MODUL+1
   775
   776 				; optimize OK (lzss_play_stereo.pas), line = 34
   777
   778 2434 A9 00			lda #$00
   779 2436 8D 1D 5A			sta MSX_R.PLAYER
   780 2439 A9 C0			lda #$C0
   781 243B 8D 1E 5A			sta MSX_R.PLAYER+1
   782
   783 				; GetResourceHandle
   784 243E A9 64 8D 26 5A A9 + 	mwa #MAIN.@RESOURCE.mod_l.end-MAIN.@RESOURCE.mod_l LEN
   785
   786 				; GetResourceHandle
   787 2448 A9 61 8D 28 5A A9 + 	mwa #MAIN.@RESOURCE.mod_l P
   788
   789 				; optimize FAIL ('@print', lzss_play_stereo.pas), line = 38
   790
   791 					@printSTRING #CODEORIGIN+$002E
   791 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   791 2452 A0 20		 LDY> CODEORIGIN+$002E
   791 2454 A9 2E		 LDA< CODEORIGIN+$002E
   791 2456 20 3C 21		 JSR @PRINTSTRING
   792 2459 AD 26 5A			lda LEN
   793 245C AC 27 5A			ldy LEN+1
   794 245F 20 75 21			jsr @printWORD._ay
   795 					@printSTRING #CODEORIGIN+$0019
   795 				 LDY> CODEORIGIN+$0019\ LDA< CODEORIGIN+$0019\ JSR @PRINTSTRING
   795 2462 A0 20		 LDY> CODEORIGIN+$0019
   795 2464 A9 19		 LDA< CODEORIGIN+$0019
   795 2466 20 3C 21		 JSR @PRINTSTRING
   796 2469 AD 28 5A			lda P
   797 246C 85 88			sta SYSTEM.HEXSTR.VALUE
   798 246E AD 29 5A			lda P+1
   799 2471 85 89			sta SYSTEM.HEXSTR.VALUE+1
   800 2473 A9 00			lda #$00
   801 2475 85 8A			sta SYSTEM.HEXSTR.VALUE+2
   802 2477 85 8B			sta SYSTEM.HEXSTR.VALUE+3
   803 2479 A9 04			lda #$04
   804 247B 85 8C			sta SYSTEM.HEXSTR.DIGITS
   805 247D 20 A0 22			jsr SYSTEM.HEXSTR
   806 					@printSTRING SYSTEM.HEXSTR.RESULT
   806 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
   806 2480 AC B0 22		 LDY SYSTEM.HEXSTR.RESULT+1
   806 2483 AD AF 22		 LDA SYSTEM.HEXSTR.RESULT
   806 2486 20 3C 21		 JSR @PRINTSTRING
   807 2489 20 28 21			@printEOL
   808
   809 				; optimize OK (lzss_play_stereo.pas), line = 40
   810
   811 248C AD 28 5A			lda P
   812 248F 8D 24 5A			sta MSX_L.MODUL
   813 2492 AD 29 5A			lda P+1
   814 2495 8D 25 5A			sta MSX_L.MODUL+1
   815
   816 				; optimize OK (lzss_play_stereo.pas), line = 42
   817
   818 2498 A9 00			lda #$00
   819 249A 8D 22 5A			sta MSX_L.PLAYER
   820 249D A9 F0			lda #$F0
   821 249F 8D 23 5A			sta MSX_L.PLAYER+1
   822
   823 				; optimize OK (lzss_play_stereo.pas), line = 45
   824
   825 24A2 A9 00			lda #$00
   826 24A4 85 88			sta SYSTEM.FILLCHAR_00AB.A
   827 24A6 A9 C3			lda #$C3
   828 24A8 85 89			sta SYSTEM.FILLCHAR_00AB.A+1
   829 24AA A9 00			lda #$00
   830 24AC 85 8C			sta SYSTEM.FILLCHAR_00AB.COUNT
   831 24AE A9 09			lda #$09
   832 24B0 85 8D			sta SYSTEM.FILLCHAR_00AB.COUNT+1
   833 24B2 A9 00			lda #$00
   834 24B4 85 84			sta SYSTEM.FILLCHAR_00AB.VALUE
   835 24B6				.local +MAIN.SYSTEM.FILLCHAR_00AB
   836 24B6				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00AB.M@INLINE [Source: lzss_play_stereo.a65]
     4 24B6 20 8A 20			jsr @fill
Source: lzss_play_stereo.a65
   837 					.endl
   838
   839 				; optimize OK (lzss_play_stereo.pas), line = 46
   840
   841 24B9 A9 00			lda #$00
   842 24BB 85 88			sta SYSTEM.FILLCHAR_00AB.A
   843 24BD A9 F3			lda #$F3
   844 24BF 85 89			sta SYSTEM.FILLCHAR_00AB.A+1
   845 24C1 A9 00			lda #$00
   846 24C3 85 8C			sta SYSTEM.FILLCHAR_00AB.COUNT
   847 24C5 A9 09			lda #$09
   848 24C7 85 8D			sta SYSTEM.FILLCHAR_00AB.COUNT+1
   849 24C9 A9 00			lda #$00
   850 24CB 85 84			sta SYSTEM.FILLCHAR_00AB.VALUE
   851 24CD				.local +MAIN.SYSTEM.FILLCHAR_00AB
   852 24CD				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00AB.M@INLINE [Source: lzss_play_stereo.a65]
     4 24CD 20 8A 20			jsr @fill
Source: lzss_play_stereo.a65
   853 					.endl
   854
   855 				; optimize OK (lzss_play_stereo.pas), line = 49
   856
   857 24D0 A9 00			lda #$00
   858 24D2 8D FD 59			sta SAPLZSS.TLZSSPLAY.INIT.A
   859 24D5 AD C5 59			lda MSX_R
   860 24D8 AC C6 59			ldy MSX_R+1
   861 24DB 20 D7 22			jsr SAPLZSS.TLZSSPLAY.INIT
   862
   863 				; optimize OK (lzss_play_stereo.pas), line = 50
   864
   865 24DE A9 10			lda #$10
   866 24E0 8D FD 59			sta SAPLZSS.TLZSSPLAY.INIT.A
   867 24E3 AD C7 59			lda MSX_L
   868 24E6 AC C8 59			ldy MSX_L+1
   869 24E9 20 D7 22			jsr SAPLZSS.TLZSSPLAY.INIT
   870
   871 				; optimize FAIL ('@print', lzss_play_stereo.pas), line = 52
   872
   873 24EC 20 28 21			@printEOL
   874
   875 				; optimize FAIL ('@print', lzss_play_stereo.pas), line = 53
   876
   877 					@printSTRING #CODEORIGIN+$0040
   877 				 LDY> CODEORIGIN+$0040\ LDA< CODEORIGIN+$0040\ JSR @PRINTSTRING
   877 24EF A0 20		 LDY> CODEORIGIN+$0040
   877 24F1 A9 40		 LDA< CODEORIGIN+$0040
   877 24F3 20 3C 21		 JSR @PRINTSTRING
   878 24F6 20 28 21			@printEOL
   879
   880 				; --- RepeatUntilProlog
   881 24F9			l_0134
   882
   883 				; optimize FAIL ('SYSTEM.PAUSE_00CA', lzss_play_stereo.pas), line = 56
   884
   885 24F9 20 B1 22			jsr SYSTEM.PAUSE_00CA
   886
   887 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.DECODE', lzss_play_stereo.pas), line = 58
   888
   889 24FC AD C5 59			lda MSX_R
   890 24FF AC C6 59			ldy MSX_R+1
   891 2502 20 2F 23			jsr SAPLZSS.TLZSSPLAY.DECODE
   892
   893 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.DECODE', lzss_play_stereo.pas), line = 59
   894
   895 2505 AD C7 59			lda MSX_L
   896 2508 AC C8 59			ldy MSX_L+1
   897 250B 20 2F 23			jsr SAPLZSS.TLZSSPLAY.DECODE
   898
   899 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.PLAY', lzss_play_stereo.pas), line = 61
   900
   901 250E AD C5 59			lda MSX_R
   902 2511 AC C6 59			ldy MSX_R+1
   903 2514 20 64 23			jsr SAPLZSS.TLZSSPLAY.PLAY
   904
   905 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.PLAY', lzss_play_stereo.pas), line = 62
   906
   907 2517 AD C7 59			lda MSX_L
   908 251A AC C8 59			ldy MSX_L+1
   909 251D 20 64 23			jsr SAPLZSS.TLZSSPLAY.PLAY
   910
   911 				; optimize FAIL ('CRT.KEYPRESSED', lzss_play_stereo.pas), line = 64
   912
   913 2520 20 C9 22			jsr CRT.KEYPRESSED
   914 2523 AD FA 59			lda CRT.KEYPRESSED.RESULT
   915 2526 F0 D1			jeq l_0134
   916
   917 				; optimize FAIL ('CRT.READKEY', lzss_play_stereo.pas), line = 66
   918
   919 2528 20 BC 22			jsr CRT.READKEY
   920 252B AD F9 59			lda CRT.READKEY.RESULT
   921 252E 8D 2A 5A			sta CH
   922
   923 				; optimize FAIL ('SAPLZSS.TLZSSPLAY.STOP', lzss_play_stereo.pas), line = 68
   924
   925 2531 AD C5 59			lda MSX_R
   926 2534 AC C6 59			ldy MSX_R+1
   927 2537 20 99 23			jsr SAPLZSS.TLZSSPLAY.STOP
   928
   929 				; ------------------------------------------------------------
   930
   931 = C000			PLAY_R	= $C000
   932 = F000			PLAY_L	= $F000
   933 = 5A1C			adr.MSX_R	= DATAORIGIN+$0050	; [5] OBJECT
   934 253A			.var MSX_R	= adr.MSX_R .word
   935 = 5A1C			MSX_R.JMP	= DATAORIGIN+$0050
   936 = 5A1D			MSX_R.PLAYER	= DATAORIGIN+$0051
   937 = 5A1F			MSX_R.MODUL	= DATAORIGIN+$0053
   938 = 5A21			adr.MSX_L	= DATAORIGIN+$0055	; [5] OBJECT
   939 253A			.var MSX_L	= adr.MSX_L .word
   940 = 5A21			MSX_L.JMP	= DATAORIGIN+$0055
   941 = 5A22			MSX_L.PLAYER	= DATAORIGIN+$0056
   942 = 5A24			MSX_L.MODUL	= DATAORIGIN+$0058
   943 = 5A26			LEN	= DATAORIGIN+$005A
   944 = 5A28			P	= DATAORIGIN+$005C
   945 = 5A2A			CH	= DATAORIGIN+$005E
   946 253A			@exit
   947
   948 253A A2 00		@halt	ldx #$00
   949 253C 9A				txs
   950 					.ifdef MAIN.@DEFINES.ROMOFF
   951 253D EE 01 D3			inc portb
   952 					.fi
   953
   954 2540 A0 01			ldy #$01
   955
   956 2542 60				rts
   957
   958 				; ------------------------------------------------------------
   959
   960 2543 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   961
   962 				; ------------------------------------------------------------
   963
   964 2553			.local	@DEFINES
   965 2553			ATARI
   966 2553			ROMOFF
   967 				.endl
   968
   969 2553			.local	@RESOURCE
   970 2553			MOD_R
   971 2553 0C 17			dta a(MOD_R.end-MOD_R-2)
   972 2555 19 00 AB 4C 00 00 + 	ins 'lzss\acid_r.lz16'
   973 3C61			MOD_R.end
   974 3C61			MOD_L
   975 3C61 62 1D			dta a(MOD_L.end-MOD_L-2)
   976 3C63 1A 02 00 4C 00 00 + 	ins 'lzss\acid_l.lz16'
   977 59C5			MOD_L.end
   978 				.endl
   979
   980 = 59C5 1C 5A		MSX_R
   980 = 59C7 21 5A		MSX_L
   980 				.endl							; MAIN
   981
   982 				; ------------------------------------------------------------
   983 				; ------------------------------------------------------------
   984
   985 				.macro	UNITINITIALIZATION
   986 				
   987 					.ifdef MAIN.SYSTEM.@UnitInit
   988 					jsr MAIN.SYSTEM.@UnitInit
   989 					.fi
   990 				
   991 					.ifdef MAIN.ATARI.@UnitInit
   992 					jsr MAIN.ATARI.@UnitInit
   993 					.fi
   994 				
   995 					.ifdef MAIN.CRT.@UnitInit
   996 					jsr MAIN.CRT.@UnitInit
   997 					.fi
   998 				
   999 					.ifdef MAIN.SAPLZSS.@UnitInit
  1000 					jsr MAIN.SAPLZSS.@UnitInit
  1001 					.fi
  1002 				.endm
  1003
  1004 				; ------------------------------------------------------------
  1005
  1006 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1007 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1007 				SYSTEM: $22A0..$22BB
  1008 					eif
  1009
  1010 					ift .SIZEOF(MAIN.ATARI) > 0
  1011 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1012 					eif
  1013
  1014 					ift .SIZEOF(MAIN.CRT) > 0
  1015 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1015 				CRT: $22BC..$22D6
  1016 					eif
  1017
  1018 					ift .SIZEOF(MAIN.SAPLZSS) > 0
  1019 					.print 'SAPLZSS: ',MAIN.SAPLZSS,'..',MAIN.SAPLZSS+.SIZEOF(MAIN.SAPLZSS)-1
  1019 				SAPLZSS: $22D7..$23D9
  1020 					eif
  1021
  1022 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1022 				CODE: $2000..$2552
  1023 					.print '$R MOD_R',' ',"'lzss\acid_r.lz16'",' ',MAIN.@RESOURCE.MOD_R,'..',MAIN.@RESOURCE.MOD_R.end-1
  1023 				$R MOD_R 'lzss\acid_r.lz16' $2553..$3C60
  1024 					.print '$R MOD_L',' ',"'lzss\acid_l.lz16'",' ',MAIN.@RESOURCE.MOD_L,'..',MAIN.@RESOURCE.MOD_L.end-1
  1024 				$R MOD_L 'lzss\acid_l.lz16' $3C61..$59C4
  1025
  1026 				; ------------------------------------------------------------
  1027
  1028 59C9				.align $0004
  1029
  1030 59CC			DATAORIGIN
  1031 59CC-59D1> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1032
  1033 = 0006			VARINITSIZE	= *-DATAORIGIN
  1034 = 005F			VARDATASIZE	= 95
  1035
  1036 = 5A2B			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1037
  1038 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1038 				DATA: $59CC..$5A2B
  1039
  1040 02E0-02E1> 00 22			run START
  1041
  1042 				; ------------------------------------------------------------
  1043
  1044 				.macro	STATICDATA
  1045 				.by  $05 $6D $6F $64 $5F $72 $00 $10  $6D $6F $64 $75 $6C $5F $72 $20  $6C $65 $6E $67 $74 $68 $3A $20
  1046 				.by  $00 $0C $2C $20 $61 $64 $64 $72  $65 $73 $73 $3A $20 $24 $00 $05  $6D $6F $64 $5F $6C $00 $10 $6D
  1047 				.by  $6F $64 $75 $6C $5F $6C $20 $6C  $65 $6E $67 $74 $68 $3A $20 $00  $25 $50 $61 $73 $63 $61 $6C $20
  1048 				.by  $53 $41 $50 $2D $52 $20 $4C $5A  $53 $53 $20 $38 $63 $68 $6E $20  $70 $6C $61 $79 $65 $72 $20 $65
  1049 				.by  $78 $61 $6D $70 $6C $65 $00
  1050 				.endm
  1051
  1052 					end
