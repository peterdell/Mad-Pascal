mads 2.1.0 build 8 (23 Dec 19)
Source: foxmode_2.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/06/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2						; VBXE pointer
    16 = 0082			psptr	.ds 2						; PROGRAMSTACK Pointer
    17
    18 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    19 = 0088			edx	.ds 4
    20 = 008C			ecx	.ds 4
    21 = 0090			bp	.ds 2
    22 = 0092			bp2	.ds 2
    23
    24 				ztmp
    25 = 0094			ztmp8	.ds 1
    26 = 0095			ztmp9	.ds 1
    27 = 0096			ztmp10	.ds 1
    28 = 0097			ztmp11	.ds 1
    29
    30 = 0098			TMP	.ds 2
    31
    32 = 009A			STACKORIGIN	.ds STACKWIDTH*4
    33 				zpend
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0084			ax	= eax
    38 = 0084			al	= eax
    39 = 0085			ah	= eax+1
    40
    41 = 008C			cx	= ecx
    42 = 008C			cl	= ecx
    43 = 008D			ch	= ecx+1
    44
    45 = 0088			dx	= edx
    46 = 0088			dl	= edx
    47 = 0089			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0084			FP1MAN0	.ds 1
    52 = 0085			FP1MAN1	.ds 1
    53 = 0086			FP1MAN2	.ds 1
    54 = 0087			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0094			FP1SGN	.ds 1
    59 = 0095			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0088			FP2MAN0	.ds 1
    64
    65 = 0089			FP2MAN1	.ds 1
    66 = 008A			FP2MAN2	.ds 1
    67 = 008B			FP2MAN3	.ds 1
    68
    69 					org ztmp10
    70
    71 = 0096			FP2SGN	.ds 1
    72 = 0097			FP2EXP	.ds 1
    73
    74 					org ecx
    75
    76 = 008C			FPMAN0	.ds 1
    77 = 008D			FPMAN1	.ds 1
    78 = 008E			FPMAN2	.ds 1
    79 = 008F			FPMAN3	.ds 1
    80
    81 					org bp2
    82
    83 = 0092			FPSGN	.ds 1
    84 = 0093			FPEXP	.ds 1
    85
    86 					.ifdef MAIN.@DEFINES.S_VBXE
    87 					opt h-
    88 					ins 'atari\s_vbxe\sdxld2.obx'
    89 					opt h+
    90 					.endif
    91
    92 				.local	RESOURCE
    93 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1148 					opt l+
    94 = 0000				?EXTDETECT = 0
    95 = 0000				?VBXDETECT = 0
    96
    97 2075				RCDATA 'fntdith.fnt' CHARSET_RAM_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('fntdith.fnt')
    10 2075				org RESORIGIN
    12 2075 20 41 20		mcpy	jsr sys.off
    14 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    14 2080 A9 00 85 8C A9 C0 +  MWA #MAIN.CHARSET_RAM_ADDRESS ECX
    14 2088 A9 00 85 84 A9 04 +  MWA #LEN EAX
    14 2090 20 00 20		 JSR RESOURCE.MEMCPY
    16 2093 4C 65 20			jmp sys.on
    18 2096 11 00 00 00 11 00 + data	ins 'fntdith.fnt'
    20 					.print '$R RCDATA  ',main.CHARSET_RAM_ADDRESS,'..',main.CHARSET_RAM_ADDRESS+len-1," 'fntdith.fnt'"
    20 				$R RCDATA  $C000..$C3FF 'fntdith.fnt'
    22 02E2-02E3> 75 20			ini mcpy
Source: foxmode_2.a65
    98 2496				RCDATA 'fntdith.scr' VIDEO_RAM_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0960			len = .filesize('fntdith.scr')
    10 2496				org RESORIGIN
    12 2075-29F5> 20 41 20	mcpy	jsr sys.off
    14 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    14 2080 A9 00 85 8C A9 C4 +  MWA #MAIN.VIDEO_RAM_ADDRESS ECX
    14 2088 A9 60 85 84 A9 09 +  MWA #LEN EAX
    14 2090 20 00 20		 JSR RESOURCE.MEMCPY
    16 2093 4C 65 20			jmp sys.on
    18 2096 17 0C 1A 4B 6B 46 + data	ins 'fntdith.scr'
    20 					.print '$R RCDATA  ',main.VIDEO_RAM_ADDRESS,'..',main.VIDEO_RAM_ADDRESS+len-1," 'fntdith.scr'"
    20 				$R RCDATA  $C400..$CD5F 'fntdith.scr'
    22 02E2-02E3> 75 20			ini mcpy
Source: foxmode_2.a65
    99 				.endl
   100
   101 				; ------------------------------------------------------------
   102
   103 29F6				org CODEORIGIN
   104
   105 2000				STATICDATA
Macro: STATICDATA [Source: foxmode_2.a65]
Source: foxmode_2.a65
   106
   107 				; ------------------------------------------------------------
   108
   109 2000			RTLIB
   110 2000				icl 'rtl6502.asm'
Source: rtl6502.asm
   388 					opt l+
   111
   112 				.print 'ZPAGE: ',fxptr,'..',zpend
   112 				ZPAGE: $0080..$00DA
   113
   114 				.print 'RTLIB: ',RTLIB,'..',*
   114 				RTLIB: $2000..$2014
   115
   116 				; ------------------------------------------------------------
   117
   118 2014			START
   119 2014 BA				tsx
   120 2015 8E C8 24			stx MAIN.@halt+1
   121
   122 					.ifdef fmulinit
   123 					fmulinit
   124 					eif
   125
   126 = 000B			VLEN	= VARDATASIZE-VARINITSIZE
   127 = 2510			VADR	= DATAORIGIN+VARINITSIZE
   128
   129 					ift VADR > $BFFF
   130 					ert 'Invalid memory address range ',VADR
   131 					eli (VLEN>0) && (VLEN<=256)
   132 2018 A2 F5			ldx #256-VLEN
   133 201A A9 00			lda #0
   134 201C 9D 1B 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   135 					eli VLEN>0
   136 					@fill #VADR #VLEN #0
   137 					eif
   138
   139 					.ifdef MAIN.@DEFINES.ROMOFF
   140 2022				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2022			.local	rominit
     5
     6 2022 78			        sei
     7 2023 A9 00		        lda #%00000000
     8 2025 8D 0E D4		        sta NMIEN       ;$D40E
     9 2028 A9 FE		        lda #%11111110
    10 202A 8D 01 D3		        sta PORTB       ;$D301
    11
    12 202D A2 03			ldx #3
    13 202F A0 00			ldy #0
    14 2031 EE 01 D3		mv	inc portb
    15 2034 B9 00 E0		afnt0	lda $e000,y
    16 2037 CE 01 D3			dec portb
    17 203A 99 00 E0		afnt1	sta $e000,y
    18 203D C8				iny
    19 203E D0 F1			bne mv
    20 2040 EE 36 20			inc afnt0+2
    21 2043 EE 3C 20			inc afnt1+2
    22 2046 CA				dex
    23 2047 10 E8			bpl mv
    24
    25 2049 A2 66		        ldx #<nmiint
    26 204B A0 20		        ldy #>nmiint
    27 204D 8E FA FF		        stx NMIVEC      ;$FFFA
    28 2050 8C FB FF		        sty NMIVEC+1
    29
    30 2053 A2 70		        ldx #<irqint
    31 2055 A0 20		        ldy #>irqint
    32 2057 8E FE FF		        stx IRQVEC      ;$FFFE
    33 205A 8C FF FF		        sty IRQVEC+1
    34
    35 205D A9 40		        lda #%01000000
    36 205F 8D 0E D4		        sta NMIEN       ;$D40E
    37 2062 58			        cli
    38
    39 2063 4C 91 20			jmp skp
    40
    41
    42
    43 2066 2C 0F D4		nmiint  bit NMIST        ;$D40F
    44 2069 10 03		        spl
    45 206B 6C 00 02		        jmp (VDSLST)     ;$0200
    46
    47 206E 38			        sec
    48 206F 24			        .byte $24        ;BIT $18
    49
    50 2070 18			irqint  clc
    51
    52 				        ;wlaczenie OS ROM
    53
    54 2071 EE 01 D3		        inc PORTB       ;$D301
    55
    56 2074 48			        pha
    57 2075 8A			        txa
    58 2076 48			        pha
    59 2077 BA			        tsx
    60
    61 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    62
    63 2078 A9 20		        lda #>iret      ;adres procedury iret
    64 207A 48			        pha
    65 207B A9 8A		        lda #<iret
    66 207D 48			        pha
    67 207E BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    68 2081 48			        pha
    69
    70 				        ;skok przez odpowiedni wektor przerwania
    71
    72 2082 90 03		        scc
    73 2084 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    74 2087 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    75
    76 208A 68			iret    pla
    77 208B AA			        tax
    78 208C 68			        pla
    79
    80 				        ;wylaczenie OS ROM
    81
    82 208D CE 01 D3		        dec PORTB       ;$D301
    83 2090 40			        rti
    84
    85 2091			skp
    86
    87 				.endl
    88
   141 					.endif
   142
   143 2091 A9 1B 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   144
   145 2099 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   146 209B BD 40 03 9D CE 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   147
   148 20A4 E8				inx						; X = 0
   149 20A5 86 90			stx bp						; BP = 0
   150
   151 20A7 8E 08 D2			stx audctl					; reset POKEY
   152 20AA A9 03			lda #3
   153 20AC 8D 0F D2			sta skctl
   154
   155 20AF CA				dex						; X = 255
   156
   157 20B0				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: foxmode_2.a65]
   158
   159 20B0			.local	MAIN						; PROCEDURE
   160
   161 20B0 4C 61 24			jmp l_0007
   162
   163 				; ------------------------------------------------------------
   164
   165 20B3			.local	SYSTEM						; UNIT
   166
   167 20B3			.local	PAUSE_0056					; PROCEDURE | ASSEMBLER | OVERLOAD
   168
   169 				; ---------------------  ASM Block 039  ---------------------
   170
   171 20B3 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   172
   173 20B9			@exit
   174 					.ifdef @new
   175 					lda <@VarData
   176 					sta :ztmp
   177 					lda >@VarData
   178 					ldy #@VarDataSize-1
   179 					jmp @FreeMem
   180 					eif
   181 20B9 60				rts						; ret
   182 				.endl
   183
   184 				; ------------------------------------------------------------
   185
   186 = 0101			__PORTB_BANKS	= $0101
   187 = 0648			M_PI_2	= $0648
   188 = 0192			D_PI_2	= $0192
   189 = 0004			D_PI_180	= $04
   190 = 0000			MGTIA	= $00
   191 = 0080			MVBXE	= $80
   192 = 0000			VBXE_XDLADR	= $00
   193 = 0100			VBXE_BCBADR	= $0100
   194 = 1000			VBXE_MAPADR	= $1000
   195 = 5000			VBXE_OVRADR	= $5000
   196 = B000			VBXE_WINDOW	= $B000
   197 = 0000			IDLI	= $00
   198 = 0001			IVBL	= $01
   199 = 00FE			CH_DELCHR	= $FE
   200 = 009B			CH_ENTER	= $9B
   201 = 001B			CH_ESC	= $1B
   202 = 001C			CH_CURS_UP	= $1C
   203 = 001D			CH_CURS_DOWN	= $1D
   204 = 001E			CH_CURS_LEFT	= $1E
   205 = 001F			CH_CURS_RIGHT	= $1F
   206 = 007F			CH_TAB	= $7F
   207 = 009B			CH_EOL	= $9B
   208 = 007D			CH_CLR	= $7D
   209 = 00FD			CH_BELL	= $FD
   210 = 007E			CH_DEL	= $7E
   211 = 009C			CH_DELLINE	= $9C
   212 = 009D			CH_INSLINE	= $9D
   213 = 0000			COLOR_BLACK	= $00
   214 = 000E			COLOR_WHITE	= $0E
   215 = 0032			COLOR_RED	= $32
   216 = 0096			COLOR_CYAN	= $96
   217 = 0068			COLOR_VIOLET	= $68
   218 = 00C4			COLOR_GREEN	= $C4
   219 = 0074			COLOR_BLUE	= $74
   220 = 00EE			COLOR_YELLOW	= $EE
   221 = 0028			COLOR_ORANGE	= $28
   222 = 00E4			COLOR_BROWN	= $E4
   223 = 003C			COLOR_LIGHTRED	= $3C
   224 = 0004			COLOR_GRAY1	= $04
   225 = 0006			COLOR_GRAY2	= $06
   226 = 000A			COLOR_GRAY3	= $0A
   227 = 00CC			COLOR_LIGHTGREEN	= $CC
   228 = 007C			COLOR_LIGHTBLUE	= $7C
   229 = 0004			FMOPENREAD	= $04
   230 = 0008			FMOPENWRITE	= $08
   231 = 0009			FMOPENAPPEND	= $09
   232 = 000C			FMOPENREADWRITE	= $0C
   233 = 24E6			SCREENWIDTH	= DATAORIGIN+$0000
   234 = 24E8			SCREENHEIGHT	= DATAORIGIN+$0002
   235 = 24EA			DATESEPARATOR	= DATAORIGIN+$0004
   236 = D014			TVSYSTEM	= $D014
   237 = 02C0			adr.PALETTE	= $02C0
   238 20BA			.var PALETTE	= adr.PALETTE .word
   239 = D012			adr.HPALETTE	= $D012
   240 20BA			.var HPALETTE	= adr.HPALETTE .word
   241 = 24EB			FILEMODE	= DATAORIGIN+$0005
   242 = 24EC			GRAPHMODE	= DATAORIGIN+$0006
   243 = 24ED			IORESULT	= DATAORIGIN+$0007
   244 = 24EE			EOLN	= DATAORIGIN+$0008
   245 = 24EF			RNDSEED	= DATAORIGIN+$0009
   246
   247 = 20BA C0 02		PALETTE
   247 = 20BC 12 D0		HPALETTE
   247 				.endl							; UNIT SYSTEM
   248
   249 				; ------------------------------------------------------------
   250
   251 20BE			.local	ATARI						; UNIT
   252
   253 				; ------------------------------------------------------------
   254
   255 = 0012			RTCLOK	= $12
   256 = 004D			ATRACT	= $4D
   257 = 0052			LMARGIN	= $52
   258 = 0053			RMARGIN	= $53
   259 = 0054			ROWCRS	= $54
   260 = 0055			COLCRS	= $55
   261 = 0057			DINDEX	= $57
   262 = 0058			SAVMSC	= $58
   263 = 0062			PALNTS	= $62
   264 = 006A			RAMTOP	= $6A
   265 = 0200			VDSLST	= $0200
   266 = 0230			SDLSTL	= $0230
   267 = 0290			TXTROW	= $0290
   268 = 0291			TXTCOL	= $0291
   269 = 0293			TINDEX	= $0293
   270 = 0294			TXTMSC	= $0294
   271 = 022F			SDMCTL	= $022F
   272 = 026F			GPRIOR	= $026F
   273 = 02F0			CRSINH	= $02F0
   274 = 02F3			CHACT	= $02F3
   275 = 02F4			CHBAS	= $02F4
   276 = 02FC			CH	= $02FC
   277 = 02C0			PCOLR0	= $02C0
   278 = 02C1			PCOLR1	= $02C1
   279 = 02C2			PCOLR2	= $02C2
   280 = 02C3			PCOLR3	= $02C3
   281 = 02C4			COLOR0	= $02C4
   282 = 02C5			COLOR1	= $02C5
   283 = 02C6			COLOR2	= $02C6
   284 = 02C7			COLOR3	= $02C7
   285 = 02C8			COLOR4	= $02C8
   286 = 02C8			COLBAKS	= $02C8
   287 = D000			HPOSP0	= $D000
   288 = D001			HPOSP1	= $D001
   289 = D002			HPOSP2	= $D002
   290 = D003			HPOSP3	= $D003
   291 = D004			HPOSM0	= $D004
   292 = D005			HPOSM1	= $D005
   293 = D006			HPOSM2	= $D006
   294 = D007			HPOSM3	= $D007
   295 = D008			SIZEP0	= $D008
   296 = D009			SIZEP1	= $D009
   297 = D00A			SIZEP2	= $D00A
   298 = D00B			SIZEP3	= $D00B
   299 = D00C			SIZEM	= $D00C
   300 = D00D			GRAFP0	= $D00D
   301 = D00E			GRAFP1	= $D00E
   302 = D00F			GRAFP2	= $D00F
   303 = D010			GRAFP3	= $D010
   304 = D011			GRAFM	= $D011
   305 = D004			P0PF	= $D004
   306 = D014			PAL	= $D014
   307 = D012			COLPM0	= $D012
   308 = D013			COLPM1	= $D013
   309 = D014			COLPM2	= $D014
   310 = D015			COLPM3	= $D015
   311 = D016			COLPF0	= $D016
   312 = D017			COLPF1	= $D017
   313 = D018			COLPF2	= $D018
   314 = D019			COLPF3	= $D019
   315 = D01A			COLBK	= $D01A
   316 = D01B			PRIOR	= $D01B
   317 = D01D			GRACTL	= $D01D
   318 = D01E			HITCLR	= $D01E
   319 = D200			AUDF1	= $D200
   320 = D201			AUDC1	= $D201
   321 = D202			AUDF2	= $D202
   322 = D203			AUDC2	= $D203
   323 = D204			AUDF3	= $D204
   324 = D205			AUDC3	= $D205
   325 = D206			AUDF4	= $D206
   326 = D207			AUDC4	= $D207
   327 = D208			AUDCTL	= $D208
   328 = D20F			SKSTAT	= $D20F
   329 = D301			PORTB	= $D301
   330 = D400			DMACTL	= $D400
   331 = D401			CHACTL	= $D401
   332 = D402			DLISTL	= $D402
   333 = D404			HSCROL	= $D404
   334 = D405			VSCROL	= $D405
   335 = D407			PMBASE	= $D407
   336 = D409			CHBASE	= $D409
   337 = D40A			WSYNC	= $D40A
   338 = D40B			VCOUNT	= $D40B
   339 = D40C			PENH	= $D40C
   340 = D40D			PENV	= $D40D
   341 = D40E			NMIEN	= $D40E
   342
   343 				.endl							; UNIT ATARI
   344
   345 				; ------------------------------------------------------------
   346
   347 20BE			.local	CRT						; UNIT
   348
   349 20BE			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   350
   351 				; ---------------------  ASM Block 053  ---------------------
   352
   353 20BE A0 00			ldy #$00	; false
   354 20C0 AD FC 02			lda kbcodes
   355 20C3 C9 FF			cmp #$ff
   356 20C5 F0 01			beq skp
   357 20C7 C8				iny		; true
   358
   359 				;	sty kbcodes
   360
   361 20C8 8C F2 24		skp	sty Result
   362
   363 20CB			@exit
   364
   365 				; ------------------------------------------------------------
   366
   367 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   368 				; as Pointer
   369
   370 20CB E8				inx
   371 20CC AD F2 24 95 9A		mva RESULT :STACKORIGIN,x
   372
   373 					.ifdef @new
   374 					lda <@VarData
   375 					sta :ztmp
   376 					lda >@VarData
   377 					ldy #@VarDataSize-1
   378 					jmp @FreeMem
   379 					eif
   380
   381 				; ------------------------------------------------------------
   382
   383 = 24F2			RESULT	= DATAORIGIN+$000C
   384
   385 = 24F2			@VarData	= RESULT
   386 = 0001			@VarDataSize	= 1
   387
   388 20D1 60				rts						; ret
   389 				.endl
   390
   391 				; ------------------------------------------------------------
   392
   393 = 24F1			TEXTATTR	= DATAORIGIN+$000B
   394 = D01F			CONSOL	= $D01F
   395 = 0000			CN_START_SELECT_OPTION	= $00
   396 = 0001			CN_SELECT_OPTION	= $01
   397 = 0002			CN_START_OPTION	= $02
   398 = 0003			CN_OPTION	= $03
   399 = 0004			CN_START_SELECT	= $04
   400 = 0005			CN_SELECT	= $05
   401 = 0006			CN_START	= $06
   402 = 0007			CN_NONE	= $07
   403 = 0000			BW40	= $00
   404 = 0001			CO40	= $01
   405 = 0002			BW80	= $02
   406 = 0003			CO80	= $03
   407 = 0007			MONO	= $07
   408 = 0001			C40	= $01
   409 = 0003			C80	= $03
   410 = 0000			BLACK	= $00
   411 = 0001			BLUE	= $01
   412 = 0002			GREEN	= $02
   413 = 0003			CYAN	= $03
   414 = 0004			RED	= $04
   415 = 0005			MAGENTA	= $05
   416 = 0006			BROWN	= $06
   417 = 0007			LIGHTGRAY	= $07
   418 = 0008			DARKGRAY	= $08
   419 = 0009			LIGHTBLUE	= $09
   420 = 000A			LIGHTGREEN	= $0A
   421 = 000B			LIGHTCYAN	= $0B
   422 = 000C			LIGHTRED	= $0C
   423 = 000D			LIGHTMAGENTA	= $0D
   424 = 000E			YELLOW	= $0E
   425 = 000F			WHITE	= $0F
   426 = 0080			BLINK	= $80
   427
   428 				.endl							; UNIT CRT
   429
   430 				; ------------------------------------------------------------
   431
   432 20D2			.local	GR4PP						; UNIT
   433
   434 20D2			.local	G4DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   435
   436 				; ---------------------  ASM Block 060  ---------------------
   437
   438
   439 20D2			dli 
   440 20D2 48			    pha 
   441 20D3 8D 0A D4		    sta WSYNC
   442 20D6 A9 04		    lda #4
   443 = 20D7			.def :VS_Upper = *-1
   444 20D8 8D 05 D4		    sta VSCROL
   445 20DB A9 03		    lda #3
   446 = 20DC			.def :VS_Lower = *-1
   447 20DD 8D 05 D4		    sta VSCROL
   448 20E0 68			    pla 
   449
   450 20E1 40				rti						; ret
   451 				.endl
   452
   453 20E2			.local	SETVS						; PROCEDURE | ASSEMBLER
   454
   455 				; ------------------------------------------------------------
   456
   457 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   458 				; as Pointer
   459 20E2 B5 9A 8D F6 24		mva :STACKORIGIN,x LOWER
   460 20E7 CA				dex
   461
   462 				; ------------------------------------------------------------
   463
   464 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   465 				; as Pointer
   466 20E8 B5 9A 8D F5 24		mva :STACKORIGIN,x UPPER
   467 20ED CA				dex
   468
   469 				; ---------------------  ASM Block 061  ---------------------
   470
   471
   472 20EE AD F5 24		    lda upper
   473 20F1 8D D7 20		    sta VS_Upper
   474 20F4 AD F6 24		    lda lower
   475 20F7 8D DC 20		    sta VS_Lower
   476
   477
   478 				; ------------------------------------------------------------
   479
   480 = 24F5			UPPER	= DATAORIGIN+$000F
   481 = 24F6			LOWER	= DATAORIGIN+$0010
   482
   483 = 24F5			@VarData	= UPPER
   484 = 0002			@VarDataSize	= 2
   485
   486 20FA			@exit
   487 					.ifdef @new
   488 					lda <@VarData
   489 					sta :ztmp
   490 					lda >@VarData
   491 					ldy #@VarDataSize-1
   492 					jmp @FreeMem
   493 					eif
   494 20FA 60				rts						; ret
   495 				.endl
   496
   497 20FB			.local	SETPIXELHEIGHT					; PROCEDURE
   498
   499 				; ------------------------------------------------------------
   500
   501 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   502 				; as Pointer
   503 20FB B5 9A 8D F7 24		mva :STACKORIGIN,x LINES
   504 2100 CA				dex
   505
   506 				; optimize OK (GR4PP), line = 79
   507
   508 2101 AD F7 24			lda LINES
   509 2104 C9 02			cmp #$02
   510 2106 90 1A			jcc l_0087
   511 2108 C9 07			cmp #$07
   512 210A B0 16			jcs l_0087
   513
   514 				; optimize FAIL ('SYSTEM.PAUSE_0056', GR4PP), line = 80
   515 210C 20 B3 20			jsr SYSTEM.PAUSE_0056
   516
   517 				; optimize FAIL ('SETVS', GR4PP), line = 81
   518 210F E8				inx
   519 2110 A9 08			lda #$08
   520 2112 38 ED F7 24			sub LINES
   521 2116 95 9A			sta :STACKORIGIN,x
   522 2118 E8				inx
   523 2119 AC F7 24			ldy LINES
   524 211C 88				dey
   525 211D 94 9A			sty :STACKORIGIN,x
   526 211F 20 E2 20			jsr SETVS
   527 2122			l_0087
   528
   529 				; ------------------------------------------------------------
   530
   531 = 24F7			LINES	= DATAORIGIN+$0011
   532
   533 = 24F7			@VarData	= LINES
   534 = 0001			@VarDataSize	= 1
   535
   536 2122			@exit
   537 					.ifdef @new
   538 					lda <@VarData
   539 					sta :ztmp
   540 					lda >@VarData
   541 					ldy #@VarDataSize-1
   542 					jmp @FreeMem
   543 					eif
   544 2122 60				rts						; ret
   545 				.endl
   546
   547 2123			.local	DLPOKE						; PROCEDURE
   548
   549 				; ------------------------------------------------------------
   550
   551 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   552 				; as Pointer
   553 2123 B5 9A 8D F8 24		mva :STACKORIGIN,x B
   554 2128 CA				dex
   555
   556 				; optimize OK (GR4PP), line = 87
   557
   558 2129 AC F3 24 84 92 AC + 	mwy DLIST :bp2
   559 2133 A0 00			ldy #$00
   560 2135 AD F8 24			lda B
   561 2138 91 92			sta (:bp2),y
   562
   563 				; optimize FAIL (0, GR4PP), line = 88
   564 213A EE F3 24			inc DLIST
   565 213D D0 03			sne
   566 213F EE F4 24			inc DLIST+1
   567
   568 				; ------------------------------------------------------------
   569
   570 = 24F8			B	= DATAORIGIN+$0012
   571
   572 = 24F8			@VarData	= B
   573 = 0001			@VarDataSize	= 1
   574
   575 2142			@exit
   576 					.ifdef @new
   577 					lda <@VarData
   578 					sta :ztmp
   579 					lda >@VarData
   580 					ldy #@VarDataSize-1
   581 					jmp @FreeMem
   582 					eif
   583 2142 60				rts						; ret
   584 				.endl
   585
   586 2143			.local	DLPOKEW						; PROCEDURE
   587
   588 				; ------------------------------------------------------------
   589
   590 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   591 				; as Pointer
   592 2143 B5 9A 8D F9 24		mva :STACKORIGIN,x W
   593 2148 B5 AA 8D FA 24		mva :STACKORIGIN+STACKWIDTH,x W+1
   594 214D CA				dex
   595
   596 				; optimize OK (GR4PP), line = 93
   597
   598 214E AC F3 24 84 92 AC + 	mwy DLIST :bp2
   599 2158 A0 00			ldy #$00
   600 215A AD F9 24			lda W
   601 215D 91 92			sta (:bp2),y
   602
   603 				; optimize OK (GR4PP), line = 94
   604
   605 215F AD FA 24			lda W+1
   606 2162 C8				iny
   607 2163 91 92			sta (:bp2),y
   608
   609 				; optimize OK (GR4PP), line = 95
   610
   611 2165 AD F3 24			lda DLIST
   612 2168 18 69 02			add #$02
   613 216B 8D F3 24			sta DLIST
   614 216E 90 03			scc
   615 2170 EE F4 24			inc DLIST+1
   616
   617 				; ------------------------------------------------------------
   618
   619 = 24F9			W	= DATAORIGIN+$0013
   620
   621 = 24F9			@VarData	= W
   622 = 0002			@VarDataSize	= 2
   623
   624 2173			@exit
   625 					.ifdef @new
   626 					lda <@VarData
   627 					sta :ztmp
   628 					lda >@VarData
   629 					ldy #@VarDataSize-1
   630 					jmp @FreeMem
   631 					eif
   632 2173 60				rts						; ret
   633 				.endl
   634
   635 2174			.local	BUILDDISPLAYLIST				; PROCEDURE
   636
   637 				; ------------------------------------------------------------
   638
   639 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   640 				; as Pointer
   641 2174 B5 9A 8D 00 25		mva :STACKORIGIN,x BLANKS
   642 2179 CA				dex
   643
   644 				; ------------------------------------------------------------
   645
   646 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   647 				; as Pointer
   648 217A B5 9A 8D FF 24		mva :STACKORIGIN,x LINES
   649 217F CA				dex
   650
   651 				; ------------------------------------------------------------
   652
   653 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   654 				; as Pointer
   655 2180 B5 9A 8D FD 24		mva :STACKORIGIN,x VRAMADDRESS
   656 2185 B5 AA 8D FE 24		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   657 218A CA				dex
   658
   659 				; ------------------------------------------------------------
   660
   661 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   662 				; as Pointer
   663 218B B5 9A 8D FB 24		mva :STACKORIGIN,x DLISTADDRESS
   664 2190 B5 AA 8D FC 24		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   665 2195 CA				dex
   666
   667 				; optimize OK (GR4PP), line = 100
   668
   669 2196 AD FB 24 8D F3 24		mva DLISTADDRESS DLIST
   670 219C AD FC 24 8D F4 24		mva DLISTADDRESS+1 DLIST+1
   671
   672 				; --- WhileProlog
   673 21A2 4C B0 21			jmp l_00D7
   674 21A5			l_00D8
   675
   676 				; optimize FAIL ('DLPOKE', GR4PP), line = 102
   677 21A5 E8				inx
   678 21A6 A9 70 95 9A			mva #$70 :STACKORIGIN,x
   679 21AA 20 23 21			jsr DLPOKE
   680
   681 				; optimize FAIL (0, GR4PP), line = 103
   682 21AD CE 00 25			dec BLANKS
   683 21B0			l_00D7
   684
   685 				; optimize OK (GR4PP), line = 101
   686
   687 21B0 AD 00 25			lda BLANKS
   688 21B3 D0 F0			jne l_00D8
   689
   690 				; optimize FAIL ('DLPOKE', GR4PP), line = 105
   691 21B5 E8				inx
   692 21B6 A9 E4 95 9A			mva #$E4 :STACKORIGIN,x
   693 21BA 20 23 21			jsr DLPOKE
   694
   695 				; optimize FAIL ('DLPOKEW', GR4PP), line = 106
   696 21BD E8				inx
   697 21BE AD FD 24 95 9A		mva VRAMADDRESS :STACKORIGIN,x
   698 21C3 AD FE 24 95 AA		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   699 21C8 20 43 21			jsr DLPOKEW
   700
   701 				; optimize OK (GR4PP), line = 108
   702
   703 21CB AD FF 24			lda LINES
   704 21CE 4A				lsr @
   705 21CF 38 E9 01			sub #$01
   706 21D2 8D FF 24			sta LINES
   707
   708 				; --- WhileProlog
   709 21D5 4C E7 21			jmp l_00FF
   710 21D8			l_0100
   711
   712 				; optimize FAIL ('DLPOKEW', GR4PP), line = 110
   713 21D8 E8				inx
   714 21D9 A9 84 95 9A			mva #$84 :STACKORIGIN,x
   715 21DD A9 24 95 AA			mva #$24 :STACKORIGIN+STACKWIDTH,x
   716 21E1 20 43 21			jsr DLPOKEW
   717
   718 				; optimize FAIL (0, GR4PP), line = 111
   719 21E4 CE FF 24			dec LINES
   720 21E7			l_00FF
   721
   722 				; optimize OK (GR4PP), line = 109
   723
   724 21E7 AD FF 24			lda LINES
   725 21EA D0 EC			jne l_0100
   726
   727 				; optimize FAIL ('DLPOKE', GR4PP), line = 113
   728 21EC E8				inx
   729 21ED A9 04 95 9A			mva #$04 :STACKORIGIN,x
   730 21F1 20 23 21			jsr DLPOKE
   731
   732 				; optimize FAIL ('DLPOKE', GR4PP), line = 114
   733 21F4 E8				inx
   734 21F5 A9 41 95 9A			mva #$41 :STACKORIGIN,x
   735 21F9 20 23 21			jsr DLPOKE
   736
   737 				; optimize FAIL ('DLPOKEW', GR4PP), line = 115
   738 21FC E8				inx
   739 21FD AD FB 24 95 9A		mva DLISTADDRESS :STACKORIGIN,x
   740 2202 AD FC 24 95 AA		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   741 2207 20 43 21			jsr DLPOKEW
   742
   743 				; ------------------------------------------------------------
   744
   745 = 24FB			DLISTADDRESS	= DATAORIGIN+$0015
   746 = 24FD			VRAMADDRESS	= DATAORIGIN+$0017
   747 = 24FF			LINES	= DATAORIGIN+$0019
   748 = 2500			BLANKS	= DATAORIGIN+$001A
   749
   750 = 24FB			@VarData	= DLISTADDRESS
   751 = 0006			@VarDataSize	= 6
   752
   753 220A			@exit
   754 					.ifdef @new
   755 					lda <@VarData
   756 					sta :ztmp
   757 					lda >@VarData
   758 					ldy #@VarDataSize-1
   759 					jmp @FreeMem
   760 					eif
   761 220A 60				rts						; ret
   762 				.endl
   763
   764 220B			.local	GR4INIT						; PROCEDURE
   765
   766 				; ------------------------------------------------------------
   767
   768 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   769 				; as Pointer
   770 220B B5 9A 8D 07 25		mva :STACKORIGIN,x BLANKS
   771 2210 CA				dex
   772
   773 				; ------------------------------------------------------------
   774
   775 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   776 				; as Pointer
   777 2211 B5 9A 8D 06 25		mva :STACKORIGIN,x PIXELHEIGHT
   778 2216 CA				dex
   779
   780 				; ------------------------------------------------------------
   781
   782 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   783 				; as Pointer
   784 2217 B5 9A 8D 05 25		mva :STACKORIGIN,x LINES
   785 221C CA				dex
   786
   787 				; ------------------------------------------------------------
   788
   789 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   790 				; as Pointer
   791 221D B5 9A 8D 03 25		mva :STACKORIGIN,x VRAMADDRESS
   792 2222 B5 AA 8D 04 25		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   793 2227 CA				dex
   794
   795 				; ------------------------------------------------------------
   796
   797 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   798 				; as Pointer
   799 2228 B5 9A 8D 01 25		mva :STACKORIGIN,x DLISTADDRESS
   800 222D B5 AA 8D 02 25		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   801 2232 CA				dex
   802
   803 				; optimize FAIL ('BUILDDISPLAYLIST', GR4PP), line = 120
   804 2233 E8				inx
   805 2234 AD 01 25 95 9A		mva DLISTADDRESS :STACKORIGIN,x
   806 2239 AD 02 25 95 AA		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   807 223E E8				inx
   808 223F AD 03 25 95 9A		mva VRAMADDRESS :STACKORIGIN,x
   809 2244 AD 04 25 95 AA		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   810 2249 E8				inx
   811 224A AD 05 25 95 9A		mva LINES :STACKORIGIN,x
   812 224F E8				inx
   813 2250 AD 07 25 95 9A		mva BLANKS :STACKORIGIN,x
   814 2255 20 74 21			jsr BUILDDISPLAYLIST
   815
   816 				; optimize FAIL ('SETPIXELHEIGHT', GR4PP), line = 121
   817 2258 E8				inx
   818 2259 AD 06 25 95 9A		mva PIXELHEIGHT :STACKORIGIN,x
   819 225E 20 FB 20			jsr SETPIXELHEIGHT
   820
   821 				; optimize OK (GR4PP), line = 122
   822
   823 2261 AD 01 25 8D 30 02		mva DLISTADDRESS ATARI.SDLSTL
   824 2267 AD 02 25 8D 31 02		mva DLISTADDRESS+1 ATARI.SDLSTL+1
   825
   826 				; optimize OK (GR4PP), line = 123
   827
   828 226D AD 03 25 85 58		mva VRAMADDRESS ATARI.SAVMSC
   829 2272 AD 04 25 85 59		mva VRAMADDRESS+1 ATARI.SAVMSC+1
   830
   831 				; optimize OK (GR4PP), line = 124
   832
   833 2277 A9 D2 8D 00 02		mva <G4DLI VDSLST
   834 227C A9 20 8D 01 02		mva >G4DLI VDSLST+1
   835
   836 				; optimize OK (GR4PP), line = 125
   837
   838 2281 A9 C0 8D 0E D4		mva #$C0 ATARI.NMIEN
   839
   840 				; ------------------------------------------------------------
   841
   842 = 2501			DLISTADDRESS	= DATAORIGIN+$001B
   843 = 2503			VRAMADDRESS	= DATAORIGIN+$001D
   844 = 2505			LINES	= DATAORIGIN+$001F
   845 = 2506			PIXELHEIGHT	= DATAORIGIN+$0020
   846 = 2507			BLANKS	= DATAORIGIN+$0021
   847
   848 = 2501			@VarData	= DLISTADDRESS
   849 = 0007			@VarDataSize	= 7
   850
   851 2286			@exit
   852 					.ifdef @new
   853 					lda <@VarData
   854 					sta :ztmp
   855 					lda >@VarData
   856 					ldy #@VarDataSize-1
   857 					jmp @FreeMem
   858 					eif
   859 2286 60				rts						; ret
   860 				.endl
   861
   862 				; ------------------------------------------------------------
   863
   864 = 0070			DL_BLANK8	= $70
   865 = 0080			DL_DLI	= $80
   866 = 0040			DL_LMS	= $40
   867 = 0020			DL_VSCROLL	= $20
   868 = 000F			DL_MODE_320X192G2	= $0F
   869 = 0041			DL_JVB	= $41
   870 = 24F3			DLIST	= DATAORIGIN+$000D
   871
   872 				.endl							; UNIT GR4PP
   873
   874 				; ------------------------------------------------------------
   875
   876 2287			.local	FASTMATH					; UNIT
   877
   878 2287			.local	FILLSIN						; PROCEDURE | ASSEMBLER
   879
   880 				; ------------------------------------------------------------
   881
   882 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   883 				; as Pointer
   884 2287 B5 9A 8D 0B 25		mva :STACKORIGIN,x ADD
   885 228C CA				dex
   886
   887 				; ------------------------------------------------------------
   888
   889 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   890 				; as Pointer
   891 228D B5 9A 8D 0A 25		mva :STACKORIGIN,x EOR
   892 2292 CA				dex
   893
   894 				; ------------------------------------------------------------
   895
   896 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   897 				; as Pointer
   898 2293 B5 9A 8D 08 25		mva :STACKORIGIN,x P
   899 2298 B5 AA 8D 09 25		mva :STACKORIGIN+STACKWIDTH,x P+1
   900 229D CA				dex
   901
   902 				; ---------------------  ASM Block 062  ---------------------
   903
   904
   905 229E 8A 48			txa:pha
   906
   907 22A0 AD 09 25			lda p+1
   908 22A3 8D C4 22			sta a0+2
   909 22A6 8D C7 22			sta a1+2
   910 22A9 8D CD 22			sta a2+2
   911 22AC 8D D0 22			sta a3+2
   912
   913 22AF A0 3F			ldy #$3f
   914 22B1 A2 00			ldx #$00
   915
   916 				; Accumulate the delta (normal 16-bit addition)
   917 22B3			loop
   918 22B3 A9 00			lda #0
   919 = 22B4			lvalue	equ *-1
   920 22B5 18				clc
   921 22B6 69 00			adc #0
   922 = 22B7			ldelta	equ *-1
   923 22B8 8D B4 22			sta lvalue
   924 22BB A9 00			lda #0
   925 = 22BC			hvalue	equ *-1
   926 22BD 69 00			adc #0
   927 = 22BE			hdelta	equ *-1
   928 22BF 8D BC 22			sta hvalue
   929
   930 				; Reflect the value around for a sine wave
   931 22C2 9D C0 FF		a0	sta $ffc0,x
   932 22C5 99 80 FF		a1	sta $ff80,y
   933 22C8 4D 0A 25			eor eor
   934 22CB 9D 40 FF		a2	sta $ff40,x
   935 22CE 99 00 FF		a3	sta $ff00,y
   936
   937 				; Increase the delta, which creates the "acceleration" for a parabola
   938 22D1 AD B7 22			lda ldelta
   939 22D4 6D 0B 25			adc add		; this value adds up to the proper amplitude
   940 22D7 8D B7 22			sta ldelta
   941 22DA 90 03			scc
   942 22DC EE BE 22			inc hdelta
   943
   944 				; Loop
   945 22DF E8				inx
   946 22E0 88				dey
   947 22E1 10 D0			bpl loop
   948
   949 22E3 68 AA			pla:tax
   950
   951
   952 				; ------------------------------------------------------------
   953
   954 = 2508			P	= DATAORIGIN+$0022
   955 = 250A			EOR	= DATAORIGIN+$0024
   956 = 250B			ADD	= DATAORIGIN+$0025
   957
   958 = 2508			@VarData	= P
   959 = 0004			@VarDataSize	= 4
   960
   961 22E5			@exit
   962 					.ifdef @new
   963 					lda <@VarData
   964 					sta :ztmp
   965 					lda >@VarData
   966 					ldy #@VarDataSize-1
   967 					jmp @FreeMem
   968 					eif
   969 22E5 60				rts						; ret
   970 				.endl
   971
   972 22E6			.local	FILLSINHIGH					; PROCEDURE
   973
   974 				; ------------------------------------------------------------
   975
   976 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   977 				; as Pointer
   978 22E6 B5 9A 8D 0C 25		mva :STACKORIGIN,x P
   979 22EB B5 AA 8D 0D 25		mva :STACKORIGIN+STACKWIDTH,x P+1
   980 22F0 CA				dex
   981
   982 				; optimize FAIL ('FILLSIN', FASTMATH), line = 106
   983 22F1 E8				inx
   984 22F2 AD 0C 25 95 9A		mva P :STACKORIGIN,x
   985 22F7 AD 0D 25 95 AA		mva P+1 :STACKORIGIN+STACKWIDTH,x
   986 22FC E8				inx
   987 22FD A9 FF 95 9A			mva #$FF :STACKORIGIN,x
   988 2301 E8				inx
   989 2302 A9 10 95 9A			mva #$10 :STACKORIGIN,x
   990 2306 20 87 22			jsr FILLSIN
   991
   992 				; ------------------------------------------------------------
   993
   994 = 250C			P	= DATAORIGIN+$0026
   995
   996 = 250C			@VarData	= P
   997 = 0002			@VarDataSize	= 2
   998
   999 2309			@exit
  1000 					.ifdef @new
  1001 					lda <@VarData
  1002 					sta :ztmp
  1003 					lda >@VarData
  1004 					ldy #@VarDataSize-1
  1005 					jmp @FreeMem
  1006 					eif
  1007 2309 60				rts						; ret
  1008 				.endl
  1009
  1010 				; ------------------------------------------------------------
  1011
  1012 				.endl							; UNIT FASTMATH
  1013
  1014 230A			.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT
  1015
  1016 				; ---------------------  ASM Block 063  ---------------------
  1017
  1018
  1019 230A AD D7 20			lda VS_Upper
  1020 230D 8D 05 D4			sta vscrol
  1021
  1022 2310 A9 C0 8D 09 D4		mva >CHARSET_RAM_ADDRESS	chbase
  1023
  1024 2315 4C 62 E4			jmp xitvbv
  1025
  1026 2318 40				rti						; ret
  1027 				.endl
  1028
  1029 2319			.local	INITMULDIV					; PROCEDURE
  1030
  1031 				; optimize OK (foxmode_2.pas), line = 41
  1032
  1033 2319 A9 00 8D 11 25		mva #$00 S
  1034 231E 8D 12 25			sta S+1
  1035 				; --- For
  1036
  1037 				; optimize OK (foxmode_2.pas), line = 43
  1038
  1039 2321 8D 10 25			sta X
  1040
  1041 				; optimize OK (foxmode_2.pas), line = 43
  1042
  1043 2324			l_0171
  1044 				; --- ForToDoCondition
  1045
  1046 				; optimize OK (foxmode_2.pas), line = 43
  1047
  1048 2324 AD 10 25			lda X
  1049 2327 C9 80			cmp #$80
  1050 2329 B0 2C			jcs l_017F
  1051
  1052 				; optimize OK (foxmode_2.pas), line = 44
  1053
  1054 232B AD 12 25			lda S+1
  1055 232E AC 10 25			ldy X
  1056 2331 99 00 BD			sta adr.LOOKUPDIV,y
  1057
  1058 				; optimize OK (foxmode_2.pas), line = 45
  1059
  1060 2334 A9 FF			lda #$FF
  1061 2336 38 ED 10 25			sub X
  1062 233A 85 A3			sta :STACKORIGIN+9
  1063 233C B9 00 BD			lda adr.LOOKUPDIV,y
  1064 233F A4 A3			ldy :STACKORIGIN+9
  1065 2341 99 00 BD			sta adr.LOOKUPDIV,y
  1066
  1067 				; optimize OK (foxmode_2.pas), line = 47
  1068
  1069 2344 AD 11 25			lda S
  1070 2347 18 69 16			add #$16
  1071 234A 8D 11 25			sta S
  1072 234D 90 03			scc
  1073 234F EE 12 25			inc S+1
  1074
  1075 				; --- ForToDoEpilog
  1076 2352 EE 10 25			inc X						; inc ptr byte [CounterAddress]
  1077 2355 D0 CD			jne l_0171
  1078 2357			l_017F
  1079 				; --- For
  1080
  1081 				; optimize OK (foxmode_2.pas), line = 50
  1082
  1083 2357 A9 00 8D 10 25		mva #$00 X
  1084
  1085 				; optimize OK (foxmode_2.pas), line = 50
  1086
  1087 235C			l_01AE
  1088 				; --- ForToDoCondition
  1089
  1090 				; optimize OK (foxmode_2.pas), line = 50
  1091
  1092 235C AD 10 25			lda X
  1093 235F C9 FF			cmp #$FF
  1094 2361 90 02			scc
  1095 2363 D0 1C			jne l_01BC
  1096
  1097 				; optimize OK (foxmode_2.pas), line = 50
  1098
  1099 2365 AC 10 25			ldy X
  1100 2368 B9 00 BD			lda adr.LOOKUPDIV,y
  1101 236B 85 84			sta :eax
  1102 236D A9 0B			lda #$0B
  1103 236F 85 8C			sta :ecx
  1104 					.ifdef fmulinit
  1105 					fmulu_8
  1106 					els
  1107 2371 20 00 20			imulCL
  1108 					eif
  1109 2374 A5 84			lda :eax
  1110 2376 AC 10 25			ldy X
  1111 2379 99 00 BE			sta adr.LOOKUPMUL,y
  1112
  1113 				; --- ForToDoEpilog
  1114 237C EE 10 25			inc X						; inc ptr byte [CounterAddress]
  1115 237F D0 DB			jne l_01AE
  1116 2381			l_01BC
  1117
  1118 				; ------------------------------------------------------------
  1119
  1120 = 2510			X	= DATAORIGIN+$002A
  1121 = 2511			S	= DATAORIGIN+$002B
  1122 = 007F			@FORTMP_016E	= $7F
  1123 = 00FF			@FORTMP_01AB	= $FF
  1124
  1125 = 2510			@VarData	= X
  1126 = 0003			@VarDataSize	= 3
  1127
  1128 2381			@exit
  1129 					.ifdef @new
  1130 					lda <@VarData
  1131 					sta :ztmp
  1132 					lda >@VarData
  1133 					ldy #@VarDataSize-1
  1134 					jmp @FreeMem
  1135 					eif
  1136 2381 60				rts						; ret
  1137 				.endl
  1138
  1139 2382			.local	DOPLASMA					; PROCEDURE
  1140
  1141 				; optimize OK (foxmode_2.pas), line = 60
  1142
  1143 2382 A9 98 85 E0			mva #$98 SCRN
  1144 2386 A9 C5 85 E1			mva #$C5 SCRN+1
  1145
  1146 				; optimize OK (foxmode_2.pas), line = 62
  1147
  1148 238A AD 0E 25 8D 13 25		mva C1A _C1A
  1149
  1150 				; optimize OK (foxmode_2.pas), line = 63
  1151
  1152 2390 AD 0F 25 8D 14 25		mva C1B _C1B
  1153 				; --- For
  1154
  1155 				; optimize OK (foxmode_2.pas), line = 65
  1156
  1157 2396 A9 00 8D 15 25		mva #$00 I
  1158
  1159 				; optimize OK (foxmode_2.pas), line = 65
  1160
  1161 239B			l_01EE
  1162 				; --- ForToDoCondition
  1163
  1164 				; optimize OK (foxmode_2.pas), line = 65
  1165
  1166 239B AD 15 25			lda I
  1167 239E C9 50			cmp #$50
  1168 23A0 B0 2A			jcs l_01FC
  1169
  1170 				; optimize OK (foxmode_2.pas), line = 66
  1171
  1172 23A2 AC 13 25			ldy _C1A
  1173 23A5 B9 00 BF			lda adr.SINUSTABLE,y
  1174 23A8 AC 14 25			ldy _C1B
  1175 23AB 18 79 00 BF			add adr.SINUSTABLE,y
  1176 23AF AC 15 25			ldy I
  1177 23B2 99 00 06			sta adr.XBUF,y
  1178
  1179 				; optimize OK (foxmode_2.pas), line = 67
  1180
  1181 23B5 AD 13 25			lda _C1A
  1182 23B8 18 69 03			add #$03
  1183 23BB 8D 13 25			sta _C1A
  1184
  1185 				; optimize OK (foxmode_2.pas), line = 68
  1186
  1187 23BE AD 14 25			lda _C1B
  1188 23C1 18 69 07			add #$07
  1189 23C4 8D 14 25			sta _C1B
  1190
  1191 				; --- ForToDoEpilog
  1192 23C7 EE 15 25			inc I						; inc ptr byte [CounterAddress]
  1193 23CA D0 CF			jne l_01EE
  1194 23CC			l_01FC
  1195 				; --- For
  1196
  1197 				; optimize OK (foxmode_2.pas), line = 71
  1198
  1199 23CC A9 00 8D 16 25		mva #$00 II
  1200
  1201 				; optimize OK (foxmode_2.pas), line = 71
  1202
  1203 23D1			l_0221
  1204 				; --- ForToDoCondition
  1205
  1206 				; optimize OK (foxmode_2.pas), line = 71
  1207
  1208 23D1 AD 16 25			lda II
  1209 23D4 C9 28			cmp #$28
  1210 23D6 B0 76			jcs l_022F
  1211
  1212 				; optimize OK (foxmode_2.pas), line = 73
  1213
  1214 23D8 AC 13 25			ldy _C1A
  1215 23DB B9 00 BF			lda adr.SINUSTABLE,y
  1216 23DE AC 14 25			ldy _C1B
  1217 23E1 38 F9 00 BF			sub adr.SINUSTABLE,y
  1218 23E5 8D 17 25			sta TMP
  1219
  1220 				; optimize OK (foxmode_2.pas), line = 75
  1221
  1222 23E8 AD 13 25			lda _C1A
  1223 23EB 18 69 04			add #$04
  1224 23EE 8D 13 25			sta _C1A
  1225
  1226 				; optimize OK (foxmode_2.pas), line = 76
  1227
  1228 23F1 AD 14 25			lda _C1B
  1229 23F4 18 69 09			add #$09
  1230 23F7 8D 14 25			sta _C1B
  1231
  1232 				; optimize OK (foxmode_2.pas), line = 78
  1233
  1234 23FA A9 00 8D 1A 25		mva #$00 K
  1235 				; --- For
  1236
  1237 				; optimize OK (foxmode_2.pas), line = 79
  1238
  1239 23FF 8D 15 25			sta I
  1240
  1241 				; optimize OK (foxmode_2.pas), line = 79
  1242
  1243 2402			l_0250
  1244 				; --- ForToDoCondition
  1245
  1246 				; optimize OK (foxmode_2.pas), line = 79
  1247
  1248 2402 AD 15 25			lda I
  1249 2405 C9 18			cmp #$18
  1250 2407 B0 35			jcs l_025E
  1251
  1252 				; optimize OK (foxmode_2.pas), line = 80
  1253
  1254 2409 AC 1A 25			ldy K
  1255 240C B9 00 06			lda adr.XBUF,y
  1256 240F 18 6D 17 25			add TMP
  1257 2413 A8				tay
  1258 2414 B9 00 BE			lda adr.LOOKUPMUL,y
  1259 2417 85 A4			sta :STACKORIGIN+10
  1260 2419 AC 1A 25			ldy K
  1261 241C C8				iny
  1262 241D B9 00 06			lda adr.XBUF,y
  1263 2420 18 6D 17 25			add TMP
  1264 2424 A8				tay
  1265 2425 A5 A4			lda :STACKORIGIN+10
  1266 2427 18 79 00 BD			add adr.LOOKUPDIV,y
  1267 242B AC 15 25			ldy I
  1268 242E 91 E0			sta (SCRN),y
  1269
  1270 				; optimize OK (foxmode_2.pas), line = 82
  1271
  1272 2430 AD 1A 25			lda K
  1273 2433 18 69 02			add #$02
  1274 2436 8D 1A 25			sta K
  1275
  1276 				; --- ForToDoEpilog
  1277 2439 EE 15 25			inc I						; inc ptr byte [CounterAddress]
  1278 243C D0 C4			jne l_0250
  1279 243E			l_025E
  1280
  1281 				; optimize OK (foxmode_2.pas), line = 85
  1282
  1283 243E A5 E0			lda SCRN
  1284 2440 18 69 28			add #$28
  1285 2443 85 E0			sta SCRN
  1286 2445 90 02			scc
  1287 2447 E6 E1			inc SCRN+1
  1288
  1289 				; --- ForToDoEpilog
  1290 2449 EE 16 25			inc II						; inc ptr byte [CounterAddress]
  1291 244C D0 83			jne l_0221
  1292 244E			l_022F
  1293
  1294 				; optimize OK (foxmode_2.pas), line = 88
  1295
  1296 244E AD 0E 25			lda C1A
  1297 2451 18 69 03			add #$03
  1298 2454 8D 0E 25			sta C1A
  1299
  1300 				; optimize OK (foxmode_2.pas), line = 89
  1301
  1302 2457 AD 0F 25			lda C1B
  1303 245A 38 E9 05			sub #$05
  1304 245D 8D 0F 25			sta C1B
  1305
  1306 				; ------------------------------------------------------------
  1307
  1308 = 2513			_C1A	= DATAORIGIN+$002D
  1309 = 2514			_C1B	= DATAORIGIN+$002E
  1310 = 2515			I	= DATAORIGIN+$002F
  1311 = 2516			II	= DATAORIGIN+$0030
  1312 = 2517			TMP	= DATAORIGIN+$0031
  1313 = 2518			A	= DATAORIGIN+$0032
  1314 = 2519			B	= DATAORIGIN+$0033
  1315 = 251A			K	= DATAORIGIN+$0034
  1316 = 00E0			SCRN	= $E0
  1317 = 004F			@FORTMP_01EB	= $4F
  1318 = 0027			@FORTMP_021E	= $27
  1319 = 0017			@FORTMP_024D	= $17
  1320
  1321 = 2513			@VarData	= _C1A
  1322 = 0008			@VarDataSize	= 8
  1323
  1324 2460			@exit
  1325 					.ifdef @new
  1326 					lda <@VarData
  1327 					sta :ztmp
  1328 					lda >@VarData
  1329 					ldy #@VarDataSize-1
  1330 					jmp @FreeMem
  1331 					eif
  1332 2460 60				rts						; ret
  1333 				.endl
  1334 2461			l_0007
  1335
  1336 				; optimize FAIL ('FASTMATH.FILLSINHIGH', foxmode_2.pas), line = 96
  1337 2461 E8				inx
  1338 2462 AD E2 24 95 9A		mva SINUSTABLE :STACKORIGIN,x
  1339 2467 AD E3 24 95 AA		mva SINUSTABLE+1 :STACKORIGIN+STACKWIDTH,x
  1340 246C 20 E6 22			jsr FASTMATH.FILLSINHIGH
  1341
  1342 				; optimize FAIL ('INITMULDIV', foxmode_2.pas), line = 98
  1343 246F 20 19 23			jsr INITMULDIV
  1344
  1345 				; optimize FAIL ('GR4PP.GR4INIT', foxmode_2.pas), line = 100
  1346 2472 E8				inx
  1347 2473 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1348 2477 A9 D8 95 AA			mva #$D8 :STACKORIGIN+STACKWIDTH,x
  1349 247B E8				inx
  1350 247C A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1351 2480 A9 C4 95 AA			mva #$C4 :STACKORIGIN+STACKWIDTH,x
  1352 2484 E8				inx
  1353 2485 A9 3C 95 9A			mva #$3C :STACKORIGIN,x
  1354 2489 E8				inx
  1355 248A A9 04 95 9A			mva #$04 :STACKORIGIN,x
  1356 248E E8				inx
  1357 248F A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1358 2493 20 0B 22			jsr GR4PP.GR4INIT
  1359
  1360 				; optimize OK (foxmode_2.pas), line = 102
  1361
  1362 2496 A9 0A			lda <VBL
  1363 2498 A0 05			ldy #5
  1364 249A 8D 0A D4			sta wsync
  1365 249D 88				dey
  1366 249E D0 FD			rne
  1367 24A0 8D 24 02			sta VVBLKD
  1368 24A3 A9 23			lda >VBL
  1369 24A5 8D 25 02			sta VVBLKD+1
  1370
  1371 				; optimize OK (foxmode_2.pas), line = 104
  1372
  1373 24A8 A9 00 8D 1A D0		mva #$00 ATARI.COLBK
  1374
  1375 				; optimize OK (foxmode_2.pas), line = 106
  1376
  1377 24AD A9 22 8D C4 02		mva #$22 ATARI.COLOR0
  1378
  1379 				; optimize OK (foxmode_2.pas), line = 107
  1380
  1381 24B2 A9 36 8D C5 02		mva #$36 ATARI.COLOR1
  1382
  1383 				; optimize OK (foxmode_2.pas), line = 108
  1384
  1385 24B7 A9 96 8D C6 02		mva #$96 ATARI.COLOR2
  1386
  1387 				; --- RepeatUntilProlog
  1388 24BC			l_02B3
  1389
  1390 				; optimize FAIL ('DOPLASMA', foxmode_2.pas), line = 111
  1391 24BC 20 82 23			jsr DOPLASMA
  1392
  1393 				; optimize FAIL ('CRT.KEYPRESSED', foxmode_2.pas), line = 113
  1394 24BF 20 BE 20			jsr CRT.KEYPRESSED
  1395 24C2 CA				dex
  1396 24C3 B5 9B			lda :STACKORIGIN+1,x
  1397 24C5 F0 F5			jeq l_02B3
  1398
  1399 				; ------------------------------------------------------------
  1400
  1401 = D800			DISPLAY_LIST_ADDRESS	= $D800
  1402 = C000			CHARSET_RAM_ADDRESS	= $C000
  1403 = C400			VIDEO_RAM_ADDRESS	= $C400
  1404 = BD00			adr.LOOKUPDIV	= $BD00
  1405 24C7			.var LOOKUPDIV	= adr.LOOKUPDIV .word
  1406 = BE00			adr.LOOKUPMUL	= $BE00
  1407 24C7			.var LOOKUPMUL	= adr.LOOKUPMUL .word
  1408 = BF00			adr.SINUSTABLE	= $BF00
  1409 24C7			.var SINUSTABLE	= adr.SINUSTABLE .word
  1410 = 0600			adr.XBUF	= $0600
  1411 24C7			.var XBUF	= adr.XBUF .word
  1412 = 250E			C1A	= DATAORIGIN+$0028
  1413 = 250F			C1B	= DATAORIGIN+$0029
  1414 24C7			@exit
  1415
  1416 24C7 A2 00		@halt	ldx #0
  1417 24C9 9A				txs
  1418 					.ifdef MAIN.@DEFINES.ROMOFF
  1419 24CA EE 01 D3			inc portb
  1420 					.endif
  1421
  1422 24CD 60				rts
  1423
  1424 				; ------------------------------------------------------------
  1425
  1426 24CE 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1427
  1428 				; ------------------------------------------------------------
  1429
  1430 24DE			.local	@DEFINES
  1431 24DE			ATARI
  1432 24DE			ROMOFF
  1433 				.endl
  1434
  1435 = 24DE 00 BD		LOOKUPDIV
  1435 = 24E0 00 BE		LOOKUPMUL
  1435 = 24E2 00 BF		SINUSTABLE
  1435 = 24E4 00 06		XBUF
  1435 				.endl							; MAIN
  1436
  1437 				; ------------------------------------------------------------
  1438 				; ------------------------------------------------------------
  1439
  1440 				.macro	UNITINITIALIZATION
  1441 				
  1442 					.ifdef MAIN.SYSTEM.@UnitInit
  1443 					jsr MAIN.SYSTEM.@UnitInit
  1444 					eif
  1445 				
  1446 					.ifdef MAIN.ATARI.@UnitInit
  1447 					jsr MAIN.ATARI.@UnitInit
  1448 					eif
  1449 				
  1450 					.ifdef MAIN.CRT.@UnitInit
  1451 					jsr MAIN.CRT.@UnitInit
  1452 					eif
  1453 				
  1454 					.ifdef MAIN.GR4PP.@UnitInit
  1455 					jsr MAIN.GR4PP.@UnitInit
  1456 					eif
  1457 				
  1458 					.ifdef MAIN.FASTMATH.@UnitInit
  1459 					jsr MAIN.FASTMATH.@UnitInit
  1460 					eif
  1461 				.endm
  1462
  1463 				; ------------------------------------------------------------
  1464
  1465 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1466 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1466 				SYSTEM: $20B3..$20BD
  1467 					eif
  1468
  1469 					ift .SIZEOF(MAIN.ATARI) > 0
  1470 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1471 					eif
  1472
  1473 					ift .SIZEOF(MAIN.CRT) > 0
  1474 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1474 				CRT: $20BE..$20D1
  1475 					eif
  1476
  1477 					ift .SIZEOF(MAIN.GR4PP) > 0
  1478 					.print 'GR4PP: ',MAIN.GR4PP,'..',MAIN.GR4PP+.SIZEOF(MAIN.GR4PP)-1
  1478 				GR4PP: $20D2..$2286
  1479 					eif
  1480
  1481 					ift .SIZEOF(MAIN.FASTMATH) > 0
  1482 					.print 'FASTMATH: ',MAIN.FASTMATH,'..',MAIN.FASTMATH+.SIZEOF(MAIN.FASTMATH)-1
  1482 				FASTMATH: $2287..$2309
  1483 					eif
  1484
  1485 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1485 				CODE: $2000..$24E5
  1486
  1487 				; ------------------------------------------------------------
  1488
  1489 24E6			DATAORIGIN
  1490 24E6 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1491 24FE 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $01 $05
  1492
  1493 = 002A			VARINITSIZE	= *-DATAORIGIN
  1494 = 0035			VARDATASIZE	= 53
  1495
  1496 = 251B			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1497
  1498 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1498 				DATA: $24E6..$251B
  1499
  1500 02E0-02E1> 14 20			run START
  1501
  1502 				; ------------------------------------------------------------
  1503
  1504 				.macro	STATICDATA
  1505 				.endm
  1506
  1507 					end
