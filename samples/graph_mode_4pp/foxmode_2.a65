; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1

FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'fntdith.fnt' CHARSET_RAM_ADDRESS 0 0 0 0 0 0 0 0
	RCDATA 'fntdith.scr' VIDEO_RAM_ADDRESS 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend

.print 'RTLIB: ',RTLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PAUSE_0056					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 053  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	GR4PP						; UNIT

.local	G4DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 060  ---------------------


dli 
    pha 
    sta WSYNC
    lda #4
.def :VS_Upper = *-1
    sta VSCROL
    lda #3
.def :VS_Lower = *-1
    sta VSCROL
    pla 

	rti						; ret
.endl

.local	SETVS						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LOWER
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x UPPER
	dex

; ---------------------  ASM Block 061  ---------------------


    lda upper
    sta VS_Upper
    lda lower
    sta VS_Lower


; ------------------------------------------------------------

UPPER	= DATAORIGIN+$000F
LOWER	= DATAORIGIN+$0010

@VarData	= UPPER
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETPIXELHEIGHT					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; optimize OK (GR4PP), line = 79

	lda LINES
	cmp #$02
	jcc l_0087
	cmp #$07
	jcs l_0087

; optimize FAIL ('SYSTEM.PAUSE_0056', GR4PP), line = 80
	jsr SYSTEM.PAUSE_0056

; optimize FAIL ('SETVS', GR4PP), line = 81
	inx
	lda #$08
	sub LINES
	sta :STACKORIGIN,x
	inx
	ldy LINES
	dey
	sty :STACKORIGIN,x
	jsr SETVS
l_0087

; ------------------------------------------------------------

LINES	= DATAORIGIN+$0011

@VarData	= LINES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x B
	dex

; optimize OK (GR4PP), line = 87

	mwy DLIST :bp2
	ldy #$00
	lda B
	sta (:bp2),y

; optimize FAIL (0, GR4PP), line = 88
	inc DLIST
	sne
	inc DLIST+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0012

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKEW						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x W
	mva :STACKORIGIN+STACKWIDTH,x W+1
	dex

; optimize OK (GR4PP), line = 93

	mwy DLIST :bp2
	ldy #$00
	lda W
	sta (:bp2),y

; optimize OK (GR4PP), line = 94

	lda W+1
	iny
	sta (:bp2),y

; optimize OK (GR4PP), line = 95

	lda DLIST
	add #$02
	sta DLIST
	scc
	inc DLIST+1

; ------------------------------------------------------------

W	= DATAORIGIN+$0013

@VarData	= W
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BUILDDISPLAYLIST				; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex

; optimize OK (GR4PP), line = 100

	mva DLISTADDRESS DLIST
	mva DLISTADDRESS+1 DLIST+1

; --- WhileProlog
	jmp l_00D7
l_00D8

; optimize FAIL ('DLPOKE', GR4PP), line = 102
	inx
	mva #$70 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL (0, GR4PP), line = 103
	dec BLANKS
l_00D7

; optimize OK (GR4PP), line = 101

	lda BLANKS
	jne l_00D8

; optimize FAIL ('DLPOKE', GR4PP), line = 105
	inx
	mva #$E4 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', GR4PP), line = 106
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; optimize OK (GR4PP), line = 108

	lda LINES
	lsr @
	sub #$01
	sta LINES

; --- WhileProlog
	jmp l_00FF
l_0100

; optimize FAIL ('DLPOKEW', GR4PP), line = 110
	inx
	mva #$84 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; optimize FAIL (0, GR4PP), line = 111
	dec LINES
l_00FF

; optimize OK (GR4PP), line = 109

	lda LINES
	jne l_0100

; optimize FAIL ('DLPOKE', GR4PP), line = 113
	inx
	mva #$04 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKE', GR4PP), line = 114
	inx
	mva #$41 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', GR4PP), line = 115
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$0015
VRAMADDRESS	= DATAORIGIN+$0017
LINES	= DATAORIGIN+$0019
BLANKS	= DATAORIGIN+$001A

@VarData	= DLISTADDRESS
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	GR4INIT						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x PIXELHEIGHT
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex

; optimize FAIL ('BUILDDISPLAYLIST', GR4PP), line = 120
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LINES :STACKORIGIN,x
	inx
	mva BLANKS :STACKORIGIN,x
	jsr BUILDDISPLAYLIST

; optimize FAIL ('SETPIXELHEIGHT', GR4PP), line = 121
	inx
	mva PIXELHEIGHT :STACKORIGIN,x
	jsr SETPIXELHEIGHT

; optimize OK (GR4PP), line = 122

	mva DLISTADDRESS ATARI.SDLSTL
	mva DLISTADDRESS+1 ATARI.SDLSTL+1

; optimize OK (GR4PP), line = 123

	mva VRAMADDRESS ATARI.SAVMSC
	mva VRAMADDRESS+1 ATARI.SAVMSC+1

; optimize OK (GR4PP), line = 124

	mva <G4DLI VDSLST
	mva >G4DLI VDSLST+1

; optimize OK (GR4PP), line = 125

	mva #$C0 ATARI.NMIEN

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$001B
VRAMADDRESS	= DATAORIGIN+$001D
LINES	= DATAORIGIN+$001F
PIXELHEIGHT	= DATAORIGIN+$0020
BLANKS	= DATAORIGIN+$0021

@VarData	= DLISTADDRESS
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_MODE_320X192G2	= $0F
DL_JVB	= $41
DLIST	= DATAORIGIN+$000D

.endl							; UNIT GR4PP

; ------------------------------------------------------------

.local	FASTMATH					; UNIT

.local	FILLSIN						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x ADD
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x EOR
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x P
	mva :STACKORIGIN+STACKWIDTH,x P+1
	dex

; ---------------------  ASM Block 062  ---------------------


	txa:pha

	lda p+1
	sta a0+2
	sta a1+2
	sta a2+2
	sta a3+2

	ldy #$3f
	ldx #$00

; Accumulate the delta (normal 16-bit addition)
loop
	lda #0
lvalue	equ *-1
	clc
	adc #0
ldelta	equ *-1
	sta lvalue
	lda #0
hvalue	equ *-1
	adc #0
hdelta	equ *-1
	sta hvalue

; Reflect the value around for a sine wave
a0	sta $ffc0,x
a1	sta $ff80,y
	eor eor
a2	sta $ff40,x
a3	sta $ff00,y

; Increase the delta, which creates the "acceleration" for a parabola
	lda ldelta
	adc add		; this value adds up to the proper amplitude
	sta ldelta
	scc
	inc hdelta

; Loop
	inx
	dey
	bpl loop

	pla:tax


; ------------------------------------------------------------

P	= DATAORIGIN+$0022
EOR	= DATAORIGIN+$0024
ADD	= DATAORIGIN+$0025

@VarData	= P
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	FILLSINHIGH					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x P
	mva :STACKORIGIN+STACKWIDTH,x P+1
	dex

; optimize FAIL ('FILLSIN', FASTMATH), line = 106
	inx
	mva P :STACKORIGIN,x
	mva P+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva #$10 :STACKORIGIN,x
	jsr FILLSIN

; ------------------------------------------------------------

P	= DATAORIGIN+$0026

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT FASTMATH

.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 063  ---------------------


	lda VS_Upper
	sta vscrol

	mva >CHARSET_RAM_ADDRESS	chbase

	jmp xitvbv

	rti						; ret
.endl

.local	INITMULDIV					; PROCEDURE

; optimize OK (foxmode_2.pas), line = 41

	mva #$00 S
	sta S+1
; --- For

; optimize OK (foxmode_2.pas), line = 43

	sta X

; optimize OK (foxmode_2.pas), line = 43

l_0171
; --- ForToDoCondition

; optimize OK (foxmode_2.pas), line = 43

	lda X
	cmp #$80
	jcs l_017F

; optimize OK (foxmode_2.pas), line = 44

	lda S+1
	ldy X
	sta adr.LOOKUPDIV,y

; optimize OK (foxmode_2.pas), line = 45

	lda #$FF
	sub X
	sta :STACKORIGIN+9
	lda adr.LOOKUPDIV,y
	ldy :STACKORIGIN+9
	sta adr.LOOKUPDIV,y

; optimize OK (foxmode_2.pas), line = 47

	lda S
	add #$16
	sta S
	scc
	inc S+1

; --- ForToDoEpilog
	inc X						; inc ptr byte [CounterAddress]
	jne l_0171
l_017F
; --- For

; optimize OK (foxmode_2.pas), line = 50

	mva #$00 X

; optimize OK (foxmode_2.pas), line = 50

l_01AE
; --- ForToDoCondition

; optimize OK (foxmode_2.pas), line = 50

	lda X
	cmp #$FF
	scc
	jne l_01BC

; optimize OK (foxmode_2.pas), line = 50

	ldy X
	lda adr.LOOKUPDIV,y
	sta :eax
	lda #$0B
	sta :ecx
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	ldy X
	sta adr.LOOKUPMUL,y

; --- ForToDoEpilog
	inc X						; inc ptr byte [CounterAddress]
	jne l_01AE
l_01BC

; ------------------------------------------------------------

X	= DATAORIGIN+$002A
S	= DATAORIGIN+$002B
@FORTMP_016E	= $7F
@FORTMP_01AB	= $FF

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DOPLASMA					; PROCEDURE

; optimize OK (foxmode_2.pas), line = 60

	mva #$98 SCRN
	mva #$C5 SCRN+1

; optimize OK (foxmode_2.pas), line = 62

	mva C1A _C1A

; optimize OK (foxmode_2.pas), line = 63

	mva C1B _C1B
; --- For

; optimize OK (foxmode_2.pas), line = 65

	mva #$00 I

; optimize OK (foxmode_2.pas), line = 65

l_01EE
; --- ForToDoCondition

; optimize OK (foxmode_2.pas), line = 65

	lda I
	cmp #$50
	jcs l_01FC

; optimize OK (foxmode_2.pas), line = 66

	ldy _C1A
	lda adr.SINUSTABLE,y
	ldy _C1B
	add adr.SINUSTABLE,y
	ldy I
	sta adr.XBUF,y

; optimize OK (foxmode_2.pas), line = 67

	lda _C1A
	add #$03
	sta _C1A

; optimize OK (foxmode_2.pas), line = 68

	lda _C1B
	add #$07
	sta _C1B

; --- ForToDoEpilog
	inc I						; inc ptr byte [CounterAddress]
	jne l_01EE
l_01FC
; --- For

; optimize OK (foxmode_2.pas), line = 71

	mva #$00 II

; optimize OK (foxmode_2.pas), line = 71

l_0221
; --- ForToDoCondition

; optimize OK (foxmode_2.pas), line = 71

	lda II
	cmp #$28
	jcs l_022F

; optimize OK (foxmode_2.pas), line = 73

	ldy _C1A
	lda adr.SINUSTABLE,y
	ldy _C1B
	sub adr.SINUSTABLE,y
	sta TMP

; optimize OK (foxmode_2.pas), line = 75

	lda _C1A
	add #$04
	sta _C1A

; optimize OK (foxmode_2.pas), line = 76

	lda _C1B
	add #$09
	sta _C1B

; optimize OK (foxmode_2.pas), line = 78

	mva #$00 K
; --- For

; optimize OK (foxmode_2.pas), line = 79

	sta I

; optimize OK (foxmode_2.pas), line = 79

l_0250
; --- ForToDoCondition

; optimize OK (foxmode_2.pas), line = 79

	lda I
	cmp #$18
	jcs l_025E

; optimize OK (foxmode_2.pas), line = 80

	ldy K
	lda adr.XBUF,y
	add TMP
	tay
	lda adr.LOOKUPMUL,y
	sta :STACKORIGIN+10
	ldy K
	iny
	lda adr.XBUF,y
	add TMP
	tay
	lda :STACKORIGIN+10
	add adr.LOOKUPDIV,y
	ldy I
	sta (SCRN),y

; optimize OK (foxmode_2.pas), line = 82

	lda K
	add #$02
	sta K

; --- ForToDoEpilog
	inc I						; inc ptr byte [CounterAddress]
	jne l_0250
l_025E

; optimize OK (foxmode_2.pas), line = 85

	lda SCRN
	add #$28
	sta SCRN
	scc
	inc SCRN+1

; --- ForToDoEpilog
	inc II						; inc ptr byte [CounterAddress]
	jne l_0221
l_022F

; optimize OK (foxmode_2.pas), line = 88

	lda C1A
	add #$03
	sta C1A

; optimize OK (foxmode_2.pas), line = 89

	lda C1B
	sub #$05
	sta C1B

; ------------------------------------------------------------

_C1A	= DATAORIGIN+$002D
_C1B	= DATAORIGIN+$002E
I	= DATAORIGIN+$002F
II	= DATAORIGIN+$0030
TMP	= DATAORIGIN+$0031
A	= DATAORIGIN+$0032
B	= DATAORIGIN+$0033
K	= DATAORIGIN+$0034
SCRN	= $E0
@FORTMP_01EB	= $4F
@FORTMP_021E	= $27
@FORTMP_024D	= $17

@VarData	= _C1A
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0007

; optimize FAIL ('FASTMATH.FILLSINHIGH', foxmode_2.pas), line = 96
	inx
	mva SINUSTABLE :STACKORIGIN,x
	mva SINUSTABLE+1 :STACKORIGIN+STACKWIDTH,x
	jsr FASTMATH.FILLSINHIGH

; optimize FAIL ('INITMULDIV', foxmode_2.pas), line = 98
	jsr INITMULDIV

; optimize FAIL ('GR4PP.GR4INIT', foxmode_2.pas), line = 100
	inx
	mva #$00 :STACKORIGIN,x
	mva #$D8 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$C4 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$3C :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr GR4PP.GR4INIT

; optimize OK (foxmode_2.pas), line = 102

	lda <VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >VBL
	sta VVBLKD+1

; optimize OK (foxmode_2.pas), line = 104

	mva #$00 ATARI.COLBK

; optimize OK (foxmode_2.pas), line = 106

	mva #$22 ATARI.COLOR0

; optimize OK (foxmode_2.pas), line = 107

	mva #$36 ATARI.COLOR1

; optimize OK (foxmode_2.pas), line = 108

	mva #$96 ATARI.COLOR2

; --- RepeatUntilProlog
l_02B3

; optimize FAIL ('DOPLASMA', foxmode_2.pas), line = 111
	jsr DOPLASMA

; optimize FAIL ('CRT.KEYPRESSED', foxmode_2.pas), line = 113
	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_02B3

; ------------------------------------------------------------

DISPLAY_LIST_ADDRESS	= $D800
CHARSET_RAM_ADDRESS	= $C000
VIDEO_RAM_ADDRESS	= $C400
adr.LOOKUPDIV	= $BD00
.var LOOKUPDIV	= adr.LOOKUPDIV .word
adr.LOOKUPMUL	= $BE00
.var LOOKUPMUL	= adr.LOOKUPMUL .word
adr.SINUSTABLE	= $BF00
.var SINUSTABLE	= adr.SINUSTABLE .word
adr.XBUF	= $0600
.var XBUF	= adr.XBUF .word
C1A	= DATAORIGIN+$0028
C1B	= DATAORIGIN+$0029
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
ROMOFF
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.GR4PP.@UnitInit
	jsr MAIN.GR4PP.@UnitInit
	eif

	.ifdef MAIN.FASTMATH.@UnitInit
	jsr MAIN.FASTMATH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.GR4PP) > 0
	.print 'GR4PP: ',MAIN.GR4PP,'..',MAIN.GR4PP+.SIZEOF(MAIN.GR4PP)-1
	eif

	ift .SIZEOF(MAIN.FASTMATH) > 0
	.print 'FASTMATH: ',MAIN.FASTMATH,'..',MAIN.FASTMATH+.SIZEOF(MAIN.FASTMATH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $01 $05

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 53

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
