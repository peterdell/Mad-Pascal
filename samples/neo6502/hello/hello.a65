; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.1 [2024/01/31] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $00

zpage

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------

	opt h-f+c+

	org $8000
	jmp START

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_neo.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0062

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

; -------------------  ASM Block 00000059  -------------------

	@ClrScr
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READKEY						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000060  -------------------

	@GetKey
	sta result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000B
	rts						; ret
.endl

.local	TEXTBACKGROUND					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000061  -------------------

	lda a
	add #$90
	@putchar

; ------------------------------------------------------------

A	= DATAORIGIN+$000C

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEXTCOLOR					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000062  -------------------

	lda a
	add #$80
	@putchar 

; ------------------------------------------------------------

A	= DATAORIGIN+$000D

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT
l_0062

; optimize OK (hello.pas), line = 6

	lda #$0A
	jsr CRT.TEXTBACKGROUND

; optimize OK (hello.pas), line = 7

	lda #$0F
	jsr CRT.TEXTCOLOR

; optimize FAIL ('CRT.CLRSCR', hello.pas), line = 8

	jsr CRT.CLRSCR

; optimize FAIL ('@print', hello.pas), line = 10

	@printSTRING #CODEORIGIN+$0000
	@printEOL

; optimize FAIL ('@print', hello.pas), line = 11

	@printSTRING #CODEORIGIN+$000F
	@printEOL

; optimize FAIL ('@print', hello.pas), line = 12

	@printEOL
	ldy #256-17
	mva:rne CODEORIGIN+$0028+17-256,y adr.S+17-256,y+

; optimize FAIL ('@print', hello.pas), line = 15

	@printSTRING S
	@printEOL
	@getline
	@move #@buf #adr.S #33

; optimize FAIL ('@print', hello.pas), line = 17

	@printSTRING #CODEORIGIN+$0039
	@printSTRING S
	@print #$21
	@printEOL

; optimize FAIL ('@print', hello.pas), line = 18

	@printEOL

; optimize FAIL ('@print', hello.pas), line = 19

	@printSTRING #CODEORIGIN+$003D
	@printEOL

; optimize FAIL ('CRT.READKEY', hello.pas), line = 20

	jsr CRT.READKEY

; optimize OK (hello.pas), line = 21

	lda #$00
	jsr CRT.TEXTBACKGROUND

; optimize OK (hello.pas), line = 22

	lda #$02
	jsr CRT.TEXTCOLOR

; optimize FAIL ('CRT.CLRSCR', hello.pas), line = 23

	jsr CRT.CLRSCR

; -------------------  ASM Block 00000071  -------------------

 jmp $800 
; ------------------------------------------------------------

C	= DATAORIGIN+$000E
adr.S	= [DATAORIGIN+$000F] .array [33]
.var S	= adr.S .word
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
NEO
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 48

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0E $48 $65 $6C $6C $6F $20 $4E  $65 $6F $36 $35 $30 $32 $21 $18  $54 $68 $69 $73 $20 $74 $69 $6D
.by  $65 $20 $69 $6E $20 $4D $61 $64  $2D $50 $61 $73 $63 $61 $6C $2E  $10 $45 $6E $74 $65 $72 $20 $79
.by  $6F $75 $72 $20 $6E $61 $6D $65  $3A $03 $48 $69 $20 $20 $50 $72  $65 $73 $73 $20 $61 $6E $79 $20
.by  $6B $65 $79 $20 $74 $6F $20 $72  $65 $74 $75 $72 $6E $20 $74 $6F  $20 $62 $61 $73 $69 $63
.endm

	end
