mads 2.1.7 build 4 (2 Oct 23)
    54 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTBUF: ',@buf,'..',@buf+255
   105 				RTBUF: $0200..$02FF
   106
   107 				.print 'RTLIB: ',RTLIB,'..',*-1
   107 				RTLIB: $8061..$81B3
   108
   109 				; ------------------------------------------------------------
   110
   111 81B4			START
   112 81B4 BA				tsx
   113 81B5 8E 81 82			stx MAIN.@halt+1
   114
   115 = 002A			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 828C			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN > 0) && (VLEN <= 256)
   121 81B8 A2 D6			ldx #256-VLEN
   122 81BA A9 00			lda #$00
   123 81BC 9D B6 81 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>256
   125 					m@init
   126 					eif
   127
   128 				.ifdef psptr
   129 					mwa #PROGRAMSTACK psptr
   130 				.fi
   131
   132 81C2 A2 00			ldx #$00
   133 81C4 86 00			stx bp						; BP = 0
   134
   135 81C6 CA				dex						; X = 255
   136
   137 81C7				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: hello.a65]
Source: hello.a65
   138
   139 81C7			.local	MAIN						; PROCEDURE
   140
   141 81C7 4C EF 81			jmp l_0062
   142
   143 				; ------------------------------------------------------------
   144
   145 81CA			.local	SYSTEM						; UNIT
   146
   147 				; ------------------------------------------------------------
   148
   149 = 0648			M_PI_2	= $0648
   150 = 0192			D_PI_2	= $0192
   151 = 0004			D_PI_180	= $04
   152 = 0004			FMOPENREAD	= $04
   153 = 0008			FMOPENWRITE	= $08
   154 = 0009			FMOPENAPPEND	= $09
   155 = 000C			FMOPENREADWRITE	= $0C
   156 = 8286			SCREENWIDTH	= DATAORIGIN+$0000
   157 = 8288			SCREENHEIGHT	= DATAORIGIN+$0002
   158 = 828A			DATESEPARATOR	= DATAORIGIN+$0004
   159 = 828B			FILEMODE	= DATAORIGIN+$0005
   160 = 828C			GRAPHMODE	= DATAORIGIN+$0006
   161 = 828D			IORESULT	= DATAORIGIN+$0007
   162 = 828E			EOLN	= DATAORIGIN+$0008
   163 = 828F			RNDSEED	= DATAORIGIN+$0009
   164
   165 				.endl							; UNIT SYSTEM
   166
   167 				; ------------------------------------------------------------
   168
   169 81CA			.local	CRT						; UNIT
   170
   171 81CA			.local	CLRSCR						; PROCEDURE
   172
   173 				; -------------------  ASM Block 00000059  -------------------
   174
   175 81CA 20 79 81			@ClrScr
   176 					
   177 81CD			@exit
   178 					.ifdef @new
   179 					lda <@VarData
   180 					sta :ztmp
   181 					lda >@VarData
   182 					ldy #@VarDataSize-1
   183 					jmp @FreeMem
   184 					els
   185 81CD 60				rts						; ret
   186 					eif
   187 				.endl
   188
   189 81CE			.local	READKEY						; FUNCTION | ASSEMBLER
   190
   191 				; -------------------  ASM Block 00000060  -------------------
   192
   193 81CE 20 7F 81			@GetKey
   194 81D1 8D 91 82			sta result
   195
   196 81D4			@exit
   197
   198 				; ------------------------------------------------------------
   199
   200 = 8291			RESULT	= DATAORIGIN+$000B
   201 81D4 60				rts						; ret
   202 				.endl
   203
   204 81D5			.local	TEXTBACKGROUND					; PROCEDURE | ASSEMBLER
   205 81D5 8D 92 82			sta A
   206
   207 				; -------------------  ASM Block 00000061  -------------------
   208
   209 81D8 AD 92 82			lda a
   210 81DB 18 69 90			add #$90
   211 					@putchar
   211 81DE 20 69 81		 JSR @PUTCHAR
   212
   213 				; ------------------------------------------------------------
   214
   215 = 8292			A	= DATAORIGIN+$000C
   216
   217 = 8292			@VarData	= A
   218 = 0001			@VarDataSize	= 1
   219
   220 81E1			@exit
   221 					.ifdef @new
   222 					lda <@VarData
   223 					sta :ztmp
   224 					lda >@VarData
   225 					ldy #@VarDataSize-1
   226 					jmp @FreeMem
   227 					els
   228 81E1 60				rts						; ret
   229 					eif
   230 				.endl
   231
   232 81E2			.local	TEXTCOLOR					; PROCEDURE | ASSEMBLER
   233 81E2 8D 93 82			sta A
   234
   235 				; -------------------  ASM Block 00000062  -------------------
   236
   237 81E5 AD 93 82			lda a
   238 81E8 18 69 80			add #$80
   239 					@putchar 
   239 81EB 20 69 81		 JSR @PUTCHAR
   240
   241 				; ------------------------------------------------------------
   242
   243 = 8293			A	= DATAORIGIN+$000D
   244
   245 = 8293			@VarData	= A
   246 = 0001			@VarDataSize	= 1
   247
   248 81EE			@exit
   249 					.ifdef @new
   250 					lda <@VarData
   251 					sta :ztmp
   252 					lda >@VarData
   253 					ldy #@VarDataSize-1
   254 					jmp @FreeMem
   255 					els
   256 81EE 60				rts						; ret
   257 					eif
   258 				.endl
   259
   260 				; ------------------------------------------------------------
   261
   262 = 0000			BW40	= $00
   263 = 0001			CO40	= $01
   264 = 0002			BW80	= $02
   265 = 0003			CO80	= $03
   266 = 0007			MONO	= $07
   267 = 0001			C40	= $01
   268 = 0003			C80	= $03
   269 = 0080			BLINK	= $80
   270
   271 				.endl							; UNIT CRT
   272 81EF			l_0062
   273
   274 				; optimize OK (hello.pas), line = 6
   275
   276 81EF A9 0A			lda #$0A
   277 81F1 20 D5 81			jsr CRT.TEXTBACKGROUND
   278
   279 				; optimize OK (hello.pas), line = 7
   280
   281 81F4 A9 0F			lda #$0F
   282 81F6 20 E2 81			jsr CRT.TEXTCOLOR
   283
   284 				; optimize FAIL ('CRT.CLRSCR', hello.pas), line = 8
   285
   286 81F9 20 CA 81			jsr CRT.CLRSCR
   287
   288 				; optimize FAIL ('@print', hello.pas), line = 10
   289
   290 					@printSTRING #CODEORIGIN+$0000
   290 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   290 81FC A0 80		 LDY> CODEORIGIN+$0000
   290 81FE A9 03		 LDA< CODEORIGIN+$0000
   290 8200 20 EF 80		 JSR @PRINTSTRING
   291 8203 20 E1 80			@printEOL
   292
   293 				; optimize FAIL ('@print', hello.pas), line = 11
   294
   295 					@printSTRING #CODEORIGIN+$000F
   295 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   295 8206 A0 80		 LDY> CODEORIGIN+$000F
   295 8208 A9 12		 LDA< CODEORIGIN+$000F
   295 820A 20 EF 80		 JSR @PRINTSTRING
   296 820D 20 E1 80			@printEOL
   297
   298 				; optimize FAIL ('@print', hello.pas), line = 12
   299
   300 8210 20 E1 80			@printEOL
   301 8213 A0 EF			ldy #256-17
   302 8215 B9 3C 7F 99 A6 81 + 	mva:rne CODEORIGIN+$0028+17-256,y adr.S+17-256,y+
   303
   304 				; optimize FAIL ('@print', hello.pas), line = 15
   305
   306 					@printSTRING S
   306 				 LDY S+1\ LDA S\ JSR @PRINTSTRING
   306 821E AC 85 82		 LDY S+1
   306 8221 AD 84 82		 LDA S
   306 8224 20 EF 80		 JSR @PRINTSTRING
   307 8227 20 E1 80			@printEOL
   308 822A 20 95 81			@getline
   309 					@move #@buf #adr.S #33
   309 				 MWA #@BUF @MOVE.PTR1\ MWA #ADR.S @MOVE.PTR2\ MWA #33 @MOVE.PTR3\ JSR @MOVE
   309 822D A9 00 85 08 A9 02 +  MWA #@BUF @MOVE.PTR1
   309 8235 A9 95 85 0C A9 82 +  MWA #ADR.S @MOVE.PTR2
   309 823D A9 21 85 04 A9 00 +  MWA #33 @MOVE.PTR3
   309 8245 20 8C 80		 JSR @MOVE
   310
   311 				; optimize FAIL ('@print', hello.pas), line = 17
   312
   313 					@printSTRING #CODEORIGIN+$0039
   313 				 LDY> CODEORIGIN+$0039\ LDA< CODEORIGIN+$0039\ JSR @PRINTSTRING
   313 8248 A0 80		 LDY> CODEORIGIN+$0039
   313 824A A9 3C		 LDA< CODEORIGIN+$0039
   313 824C 20 EF 80		 JSR @PRINTSTRING
   314 					@printSTRING S
   314 				 LDY S+1\ LDA S\ JSR @PRINTSTRING
   314 824F AC 85 82		 LDY S+1
   314 8252 AD 84 82		 LDA S
   314 8255 20 EF 80		 JSR @PRINTSTRING
   315 					@print #$21
   315 				 LDY# $21\ JSR @PRINT
   315 8258 A0 21		 LDY# $21
   315 825A 20 E6 80		 JSR @PRINT
   316 825D 20 E1 80			@printEOL
   317
   318 				; optimize FAIL ('@print', hello.pas), line = 18
   319
   320 8260 20 E1 80			@printEOL
   321
   322 				; optimize FAIL ('@print', hello.pas), line = 19
   323
   324 					@printSTRING #CODEORIGIN+$003D
   324 				 LDY> CODEORIGIN+$003D\ LDA< CODEORIGIN+$003D\ JSR @PRINTSTRING
   324 8263 A0 80		 LDY> CODEORIGIN+$003D
   324 8265 A9 40		 LDA< CODEORIGIN+$003D
   324 8267 20 EF 80		 JSR @PRINTSTRING
   325 826A 20 E1 80			@printEOL
   326
   327 				; optimize FAIL ('CRT.READKEY', hello.pas), line = 20
   328
   329 826D 20 CE 81			jsr CRT.READKEY
   330
   331 				; optimize OK (hello.pas), line = 21
   332
   333 8270 A9 00			lda #$00
   334 8272 20 D5 81			jsr CRT.TEXTBACKGROUND
   335
   336 				; optimize OK (hello.pas), line = 22
   337
   338 8275 A9 02			lda #$02
   339 8277 20 E2 81			jsr CRT.TEXTCOLOR
   340
   341 				; optimize FAIL ('CRT.CLRSCR', hello.pas), line = 23
   342
   343 827A 20 CA 81			jsr CRT.CLRSCR
   344
   345 				; -------------------  ASM Block 00000071  -------------------
   346
   347 827D 4C 00 08		 jmp $800 
   348 				; ------------------------------------------------------------
   349
   350 = 8294			C	= DATAORIGIN+$000E
   351 = 8295			adr.S	= [DATAORIGIN+$000F] .array [33]
   352 8280			.var S	= adr.S .word
   353 8280			@exit
   354
   355 8280 A2 00		@halt	ldx #$00
   356 8282 9A				txs
   357
   358 8283 60				rts
   359
   360 				; ------------------------------------------------------------
   361
   362 				; ------------------------------------------------------------
   363
   364 8284			.local	@DEFINES
   365 8284			NEO
   366 				.endl
   367
   368 8284			.local	@RESOURCE
   369 				.endl
   370
   371 = 8284 95 82		S
   371 				.endl							; MAIN
   372
   373 				; ------------------------------------------------------------
   374 				; ------------------------------------------------------------
   375
   376 				.macro	UNITINITIALIZATION
   377 				
   378 					.ifdef MAIN.SYSTEM.@UnitInit
   379 					jsr MAIN.SYSTEM.@UnitInit
   380 					.fi
   381 				
   382 					.ifdef MAIN.CRT.@UnitInit
   383 					jsr MAIN.CRT.@UnitInit
   384 					.fi
   385 				.endm
   386
   387 				; ------------------------------------------------------------
   388
   389 					ift .SIZEOF(MAIN.SYSTEM) > 0
   390 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   391 					eif
   392
   393 					ift .SIZEOF(MAIN.CRT) > 0
   394 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   394 				CRT: $81CA..$81EE
   395 					eif
   396
   397 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   397 				CODE: $8003..$8283
   398
   399 				; ------------------------------------------------------------
   400
   401 = 8286				?adr = *
   402 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
   403 					?adr = ?old_adr
   404 					eif
   405
   406 					org ?adr
   407 = 8286				?old_adr = *
   408
   409 8286			DATAORIGIN
   410 8286 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   411
   412 = 0006			VARINITSIZE	= *-DATAORIGIN
   413 = 0030			VARDATASIZE	= 48
   414
   415 = 82B6			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   416
   417 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   417 				DATA: $8286..$82B6
   418
   419 				; ------------------------------------------------------------
   420
   421 				.macro	STATICDATA
   422 				.by  $0E $48 $65 $6C $6C $6F $20 $4E  $65 $6F $36 $35 $30 $32 $21 $18  $54 $68 $69 $73 $20 $74 $69 $6D
   423 				.by  $65 $20 $69 $6E $20 $4D $61 $64  $2D $50 $61 $73 $63 $61 $6C $2E  $10 $45 $6E $74 $65 $72 $20 $79
   424 				.by  $6F $75 $72 $20 $6E $61 $6D $65  $3A $03 $48 $69 $20 $20 $50 $72  $65 $73 $73 $20 $61 $6E $79 $20
   425 				.by  $6B $65 $79 $20 $74 $6F $20 $72  $65 $74 $75 $72 $6E $20 $74 $6F  $20 $62 $61 $73 $69 $63
   426 				.endm
   427
   428 					end
