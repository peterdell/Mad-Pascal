mads 2.1.7 build 4 (2 Oct 23)
    54 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTBUF: ',@buf,'..',@buf+255
   105 				RTBUF: $0200..$02FF
   106
   107 				.print 'RTLIB: ',RTLIB,'..',*-1
   107 				RTLIB: $8003..$8534
   108
   109 				; ------------------------------------------------------------
   110
   111 8535			START
   112 8535 BA				tsx
   113 8536 8E CF 90			stx MAIN.@halt+1
   114
   115 = 0073			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 90FF			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN > 0) && (VLEN <= 256)
   121 8539 A2 8D			ldx #256-VLEN
   122 853B A9 00			lda #$00
   123 853D 9D 72 90 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>256
   125 					m@init
   126 					eif
   127
   128 				.ifdef psptr
   129 					mwa #PROGRAMSTACK psptr
   130 				.fi
   131
   132 8543 A2 00			ldx #$00
   133 8545 86 00			stx bp						; BP = 0
   134
   135 8547 CA				dex						; X = 255
   136
   137 8548				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: sphere.a65]
Source: sphere.a65
   138
   139 8548			.local	MAIN						; PROCEDURE
   140
   141 8548 4C BE 90			jmp l_0004
   142
   143 				; ------------------------------------------------------------
   144
   145 854B			.local	SYSTEM						; UNIT
   146
   147 854B			.local	FSINCOS						; FUNCTION
   148
   149 				; --- WhileProlog
   150 854B 4C 8D 85			jmp l_005B
   151 854E			l_005C
   152
   153 				; optimize FAIL ('@FSUB', SYSTEM), line = 1999
   154
   155 854E E8				inx
   156 854F AD DD 90 95 14		mva X :STACKORIGIN,x
   157 8554 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   158 8559 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   159 855E AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   160 8563 E8				inx
   161 8564 A9 DB 95 14			mva #$DB :STACKORIGIN,x
   162 8568 A9 0F 95 24			mva #$0F :STACKORIGIN+STACKWIDTH,x
   163 856C A9 C9 95 34			mva #$C9 :STACKORIGIN+STACKWIDTH*2,x
   164 8570 A9 40 95 44			mva #$40 :STACKORIGIN+STACKWIDTH*3,x
   165 8574 20 EB 80			jsr @FSUB
   166 8577 CA				dex
   167 8578 B5 14			lda :STACKORIGIN,x
   168 857A 8D DD 90			sta X
   169 857D B5 24			lda :STACKORIGIN+STACKWIDTH,x
   170 857F 8D DE 90			sta X+1
   171 8582 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   172 8584 8D DF 90			sta X+2
   173 8587 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   174 8589 8D E0 90			sta X+3
   175 858C CA				dex
   176 858D			l_005B
   177 858D A9 DB			lda #$DB
   178 858F 85 04			sta @FCMPL.A
   179 8591 A9 0F			lda #$0F
   180 8593 85 05			sta @FCMPL.A+1
   181 8595 A9 C9			lda #$C9
   182 8597 85 06			sta @FCMPL.A+2
   183 8599 A9 40			lda #$40
   184 859B 85 07			sta @FCMPL.A+3
   185 859D AD DD 90			lda X
   186 85A0 85 0C			sta @FCMPL.B
   187 85A2 AD DE 90			lda X+1
   188 85A5 85 0D			sta @FCMPL.B+1
   189 85A7 AD DF 90			lda X+2
   190 85AA 85 0E			sta @FCMPL.B+2
   191 85AC AD E0 90			lda X+3
   192 85AF 85 0F			sta @FCMPL.B+3
   193 85B1 20 CA 83			jsr @FCMPL
   194 85B4 30 02			smi
   195 85B6 D0 96			jne l_005C
   196
   197 				; --- WhileProlog
   198 85B8 4C FA 85			jmp l_0070
   199 85BB			l_0071
   200
   201 				; optimize FAIL ('@FSUB.FADD', SYSTEM), line = 2000
   202
   203 85BB E8				inx
   204 85BC AD DD 90 95 14		mva X :STACKORIGIN,x
   205 85C1 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   206 85C6 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   207 85CB AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   208 85D0 E8				inx
   209 85D1 A9 DB 95 14			mva #$DB :STACKORIGIN,x
   210 85D5 A9 0F 95 24			mva #$0F :STACKORIGIN+STACKWIDTH,x
   211 85D9 A9 C9 95 34			mva #$C9 :STACKORIGIN+STACKWIDTH*2,x
   212 85DD A9 40 95 44			mva #$40 :STACKORIGIN+STACKWIDTH*3,x
   213 85E1 20 EF 80			jsr @FSUB.FADD
   214 85E4 CA				dex
   215 85E5 B5 14			lda :STACKORIGIN,x
   216 85E7 8D DD 90			sta X
   217 85EA B5 24			lda :STACKORIGIN+STACKWIDTH,x
   218 85EC 8D DE 90			sta X+1
   219 85EF B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   220 85F1 8D DF 90			sta X+2
   221 85F4 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   222 85F6 8D E0 90			sta X+3
   223 85F9 CA				dex
   224 85FA			l_0070
   225 85FA AD E0 90			lda X+3
   226 85FD 30 BC			jmi l_0071
   227
   228 				; optimize FAIL ('@FMUL', SYSTEM), line = 2003
   229
   230 85FF E8				inx
   231 8600 AD DD 90 95 14		mva X :STACKORIGIN,x
   232 8605 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   233 860A AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   234 860F AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   235 8614 E8				inx
   236 8615 A9 83 95 14			mva #$83 :STACKORIGIN,x
   237 8619 A9 F9 95 24			mva #$F9 :STACKORIGIN+STACKWIDTH,x
   238 861D A9 22 95 34			mva #$22 :STACKORIGIN+STACKWIDTH*2,x
   239 8621 A9 3F 95 44			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
   240 8625 20 84 82			jsr @FMUL
   241 8628 CA				dex
   242 8629 B5 14			lda :STACKORIGIN,x
   243 862B 8D DD 90			sta X
   244 862E B5 24			lda :STACKORIGIN+STACKWIDTH,x
   245 8630 8D DE 90			sta X+1
   246 8633 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   247 8635 8D DF 90			sta X+2
   248 8638 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   249 863A 8D E0 90			sta X+3
   250
   251 				; optimize FAIL ('@F2I', SYSTEM), line = 2006
   252
   253 863D AD DD 90 95 14		mva X :STACKORIGIN,x
   254 8642 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   255 8647 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   256 864C AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   257 8651 20 16 84			jsr @F2I
   258 8654 B5 14			lda :STACKORIGIN,x
   259 8656 8D E6 90			sta I
   260 8659 CA				dex
   261
   262 				; optimize OK (SYSTEM), line = 2009
   263
   264 865A AD E0 90			lda X+3
   265 865D 10 03			jpl l_009F
   266 865F CE E6 90			dec I
   267 8662			l_009F
   268
   269 				; optimize FAIL ('@I2F', SYSTEM), line = 2012
   270
   271 8662 E8				inx
   272 8663 AD DD 90 95 14		mva X :STACKORIGIN,x
   273 8668 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   274 866D AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   275 8672 AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   276 8677 E8				inx
   277 8678 AD E6 90 95 14		mva I :STACKORIGIN,x
   278 867D 20 0F 80			jsr @expandToCARD.SHORT
   279 8680 20 A0 84			jsr @I2F
   280 8683 20 EB 80			jsr @FSUB
   281 8686 CA				dex
   282 8687 B5 14			lda :STACKORIGIN,x
   283 8689 8D DD 90			sta X
   284 868C B5 24			lda :STACKORIGIN+STACKWIDTH,x
   285 868E 8D DE 90			sta X+1
   286 8691 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   287 8693 8D DF 90			sta X+2
   288 8696 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   289 8698 8D E0 90			sta X+3
   290 869B CA				dex
   291
   292 				; optimize OK (SYSTEM), line = 2015
   293
   294 869C AD E1 90			lda SC
   295 869F F0 03			jeq l_00BC
   296 86A1 EE E6 90			inc I
   297 86A4			l_00BC
   298
   299 				; optimize OK (SYSTEM), line = 2018
   300
   301 86A4 AD E6 90			lda I
   302 86A7 29 01			and #$01
   303 86A9 D0 3D			jne l_00D9
   304 86AB E8				inx
   305 86AC A9 00 95 14			mva #$00 :STACKORIGIN,x
   306 86B0 95 24			sta :STACKORIGIN+STACKWIDTH,x
   307 86B2 A9 80 95 34			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
   308 86B6 A9 3F 95 44			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
   309 86BA E8				inx
   310 86BB AD DD 90 95 14		mva X :STACKORIGIN,x
   311 86C0 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   312 86C5 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   313 86CA AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   314 86CF 20 EB 80			jsr @FSUB
   315 86D2 CA				dex
   316 86D3 B5 14			lda :STACKORIGIN,x
   317 86D5 8D DD 90			sta X
   318 86D8 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   319 86DA 8D DE 90			sta X+1
   320 86DD B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   321 86DF 8D DF 90			sta X+2
   322 86E2 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   323 86E4 8D E0 90			sta X+3
   324 86E7 CA				dex
   325 86E8			l_00D9
   326
   327 				; optimize FAIL ('@FMUL', SYSTEM), line = 2021
   328
   329 86E8 E8				inx
   330 86E9 AD DD 90 95 14		mva X :STACKORIGIN,x
   331 86EE AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   332 86F3 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   333 86F8 AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   334 86FD E8				inx
   335 86FE AD DD 90 95 14		mva X :STACKORIGIN,x
   336 8703 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   337 8708 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   338 870D AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   339 8712 20 84 82			jsr @FMUL
   340 8715 CA				dex
   341 8716 B5 14			lda :STACKORIGIN,x
   342 8718 8D DD 90			sta X
   343 871B B5 24			lda :STACKORIGIN+STACKWIDTH,x
   344 871D 8D DE 90			sta X+1
   345 8720 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   346 8722 8D DF 90			sta X+2
   347 8725 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   348 8727 8D E0 90			sta X+3
   349
   350 				; optimize FAIL ('@FMUL', SYSTEM), line = 2022
   351
   352 872A A9 D3 95 14			mva #$D3 :STACKORIGIN,x
   353 872E A9 59 95 24			mva #$59 :STACKORIGIN+STACKWIDTH,x
   354 8732 A9 A3 95 34			mva #$A3 :STACKORIGIN+STACKWIDTH*2,x
   355 8736 A9 3C 95 44			mva #$3C :STACKORIGIN+STACKWIDTH*3,x
   356 873A E8				inx
   357 873B AD DD 90 95 14		mva X :STACKORIGIN,x
   358 8740 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   359 8745 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   360 874A AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   361 874F E8				inx
   362 8750 A9 42 95 14			mva #$42 :STACKORIGIN,x
   363 8754 A9 01 95 24			mva #$01 :STACKORIGIN+STACKWIDTH,x
   364 8758 A9 5E 95 34			mva #$5E :STACKORIGIN+STACKWIDTH*2,x
   365 875C A9 3A 95 44			mva #$3A :STACKORIGIN+STACKWIDTH*3,x
   366 8760 20 84 82			jsr @FMUL
   367 8763 CA				dex
   368 8764 20 EB 80			jsr @FSUB
   369 8767 AD DD 90 95 14		mva X :STACKORIGIN,x
   370 876C AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   371 8771 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   372 8776 AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   373 877B 20 84 82			jsr @FMUL
   374 877E A9 DE 95 14			mva #$DE :STACKORIGIN,x
   375 8782 A9 4D 95 24			mva #$4D :STACKORIGIN+STACKWIDTH,x
   376 8786 A9 6F 95 34			mva #$6F :STACKORIGIN+STACKWIDTH*2,x
   377 878A A9 3E 95 44			mva #$3E :STACKORIGIN+STACKWIDTH*3,x
   378 878E 20 EB 80			jsr @FSUB
   379 8791 AD DD 90 95 14		mva X :STACKORIGIN,x
   380 8796 AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   381 879B AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   382 87A0 AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   383 87A5 20 84 82			jsr @FMUL
   384 87A8 A9 00 95 14			mva #$00 :STACKORIGIN,x
   385 87AC 95 24			sta :STACKORIGIN+STACKWIDTH,x
   386 87AE A9 80 95 34			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
   387 87B2 A9 3F 95 44			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
   388 87B6 20 EF 80			jsr @FSUB.FADD
   389 87B9 A9 00 95 14			mva #$00 :STACKORIGIN,x
   390 87BD 95 24			sta :STACKORIGIN+STACKWIDTH,x
   391 87BF A9 80 95 34			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
   392 87C3 A9 3F 95 44			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
   393 87C7 E8				inx
   394 87C8 AD DD 90 95 14		mva X :STACKORIGIN,x
   395 87CD AD DE 90 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
   396 87D2 AD DF 90 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   397 87D7 AD E0 90 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   398 87DC 20 EB 80			jsr @FSUB
   399 87DF CA				dex
   400 87E0 20 84 82			jsr @FMUL
   401 87E3 CA				dex
   402 87E4 B5 14			lda :STACKORIGIN,x
   403 87E6 8D E2 90			sta RESULT
   404 87E9 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   405 87EB 8D E3 90			sta RESULT+1
   406 87EE B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   407 87F0 8D E4 90			sta RESULT+2
   408 87F3 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   409 87F5 8D E5 90			sta RESULT+3
   410 87F8 CA				dex
   411
   412 				; optimize OK (SYSTEM), line = 2025
   413
   414 87F9 AD E6 90			lda I
   415 87FC 29 02			and #$02
   416 87FE C9 02			cmp #$02
   417 8800 D0 08			jne l_0126
   418 8802 AD E5 90			lda RESULT+3
   419 8805 49 80			eor #$80
   420 8807 8D E5 90			sta RESULT+3
   421 880A			l_0126
   422 880A			@exit
   423
   424 				; ------------------------------------------------------------
   425
   426 = 90DD			X	= DATAORIGIN+$000B
   427 = 90E1			SC	= DATAORIGIN+$000F
   428 = 90E2			RESULT	= DATAORIGIN+$0010
   429 = 90E6			I	= DATAORIGIN+$0014
   430
   431 = 90DD			@VarData	= X
   432 = 0006			@VarDataSize	= 6
   433
   434 880A 60				rts						; ret
   435 				.endl
   436
   437 880B			.local	SIN						; FUNCTION | OVERLOAD
   438 880B			.local	@0131
   439
   440 				; optimize OK (SYSTEM), line = 2039
   441
   442 880B AD E7 90			lda X
   443 880E 8D DD 90			sta FSINCOS.X
   444 8811 AD E8 90			lda X+1
   445 8814 8D DE 90			sta FSINCOS.X+1
   446 8817 AD E9 90			lda X+2
   447 881A 8D DF 90			sta FSINCOS.X+2
   448 881D AD EA 90			lda X+3
   449 8820 8D E0 90			sta FSINCOS.X+3
   450 8823 A9 00			lda #$00
   451 8825 8D E1 90			sta FSINCOS.SC
   452 8828 20 4B 85			jsr FSINCOS
   453 882B AD E2 90			lda FSINCOS.RESULT
   454 882E 8D EB 90			sta RESULT
   455 8831 AD E3 90			lda FSINCOS.RESULT+1
   456 8834 8D EC 90			sta RESULT+1
   457 8837 AD E4 90			lda FSINCOS.RESULT+2
   458 883A 8D ED 90			sta RESULT+2
   459 883D AD E5 90			lda FSINCOS.RESULT+3
   460 8840 8D EE 90			sta RESULT+3
   461 8843			@exit
   462
   463 				; ------------------------------------------------------------
   464
   465 = 90E7			X	= DATAORIGIN+$0015
   466 = 90EB			RESULT	= DATAORIGIN+$0019
   467
   468 = 90E7			@VarData	= X
   469 = 0004			@VarDataSize	= 4
   470
   471 8843 60				rts						; ret
   472 				.endl
   473 				.endl							; overload
   474
   475 8844			.local	COS						; FUNCTION | OVERLOAD
   476 8844			.local	@013B
   477
   478 				; optimize OK (SYSTEM), line = 2053
   479
   480 8844 AD EF 90			lda X
   481 8847 8D DD 90			sta FSINCOS.X
   482 884A AD F0 90			lda X+1
   483 884D 8D DE 90			sta FSINCOS.X+1
   484 8850 AD F1 90			lda X+2
   485 8853 8D DF 90			sta FSINCOS.X+2
   486 8856 AD F2 90			lda X+3
   487 8859 8D E0 90			sta FSINCOS.X+3
   488 885C A9 01			lda #$01
   489 885E 8D E1 90			sta FSINCOS.SC
   490 8861 20 4B 85			jsr FSINCOS
   491 8864 AD E2 90			lda FSINCOS.RESULT
   492 8867 8D F3 90			sta RESULT
   493 886A AD E3 90			lda FSINCOS.RESULT+1
   494 886D 8D F4 90			sta RESULT+1
   495 8870 AD E4 90			lda FSINCOS.RESULT+2
   496 8873 8D F5 90			sta RESULT+2
   497 8876 AD E5 90			lda FSINCOS.RESULT+3
   498 8879 8D F6 90			sta RESULT+3
   499 887C			@exit
   500
   501 				; ------------------------------------------------------------
   502
   503 = 90EF			X	= DATAORIGIN+$001D
   504 = 90F3			RESULT	= DATAORIGIN+$0021
   505
   506 = 90EF			@VarData	= X
   507 = 0004			@VarDataSize	= 4
   508
   509 887C 60				rts						; ret
   510 				.endl
   511 				.endl							; overload
   512
   513 				; ------------------------------------------------------------
   514
   515 = 0648			M_PI_2	= $0648
   516 = 0192			D_PI_2	= $0192
   517 = 0004			D_PI_180	= $04
   518 = 0004			FMOPENREAD	= $04
   519 = 0008			FMOPENWRITE	= $08
   520 = 0009			FMOPENAPPEND	= $09
   521 = 000C			FMOPENREADWRITE	= $0C
   522 = 90D2			SCREENWIDTH	= DATAORIGIN+$0000
   523 = 90D4			SCREENHEIGHT	= DATAORIGIN+$0002
   524 = 90D6			DATESEPARATOR	= DATAORIGIN+$0004
   525 = 90D7			FILEMODE	= DATAORIGIN+$0005
   526 = 90D8			GRAPHMODE	= DATAORIGIN+$0006
   527 = 90D9			IORESULT	= DATAORIGIN+$0007
   528 = 90DA			EOLN	= DATAORIGIN+$0008
   529 = 90DB			RNDSEED	= DATAORIGIN+$0009
   530
   531 				.endl							; UNIT SYSTEM
   532
   533 				; ------------------------------------------------------------
   534
   535 887D			.local	CRT						; UNIT
   536
   537 887D			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   538
   539 				; -------------------  ASM Block 00000064  -------------------
   540
   541 887D 20 E7 84			@SendMessage
   542 8880 02 02			dta 2,2
   543 8882 20 17 85			@WaitMessage
   544 8885 AD 04 FF			lda DParameters
   545 8888 8D F7 90			sta result
   546
   547 888B			@exit
   548
   549 				; ------------------------------------------------------------
   550
   551 = 90F7			RESULT	= DATAORIGIN+$0025
   552 888B 60				rts						; ret
   553 				.endl
   554
   555 				; ------------------------------------------------------------
   556
   557 = 0000			BW40	= $00
   558 = 0001			CO40	= $01
   559 = 0002			BW80	= $02
   560 = 0003			CO80	= $03
   561 = 0007			MONO	= $07
   562 = 0001			C40	= $01
   563 = 0003			C80	= $03
   564 = 0080			BLINK	= $80
   565
   566 				.endl							; UNIT CRT
   567
   568 				; ------------------------------------------------------------
   569
   570 888C			.local	TYPES						; UNIT
   571
   572 				; ------------------------------------------------------------
   573
   574 				.endl							; UNIT TYPES
   575
   576 				; ------------------------------------------------------------
   577
   578 888C			.local	GRAPH						; UNIT
   579
   580 888C			.local	INITGRAPH					; PROCEDURE | OVERLOAD
   581 888C			.local	@017C
   582 888C 8D 19 91			sta MODE
   583
   584 				; optimize OK (graph_neo.inc), line = 9
   585
   586 888F A9 40			lda #$40
   587 8891 8D D2 90			sta SYSTEM.SCREENWIDTH
   588 8894 A9 01			lda #$01
   589 8896 8D D3 90			sta SYSTEM.SCREENWIDTH+1
   590
   591 				; optimize OK (graph_neo.inc), line = 10
   592
   593 8899 A9 F0			lda #$F0
   594 889B 8D D4 90			sta SYSTEM.SCREENHEIGHT
   595 889E A9 00			lda #$00
   596 88A0 8D D5 90			sta SYSTEM.SCREENHEIGHT+1
   597
   598 				; -------------------  ASM Block 00000071  -------------------
   599
   600 88A3 20 2F 85			    @ClrScr
   601 					
   602 				; ------------------------------------------------------------
   603
   604 = 9119			MODE	= DATAORIGIN+$0047
   605
   606 = 9119			@VarData	= MODE
   607 = 0001			@VarDataSize	= 1
   608
   609 88A6			@exit
   610 					.ifdef @new
   611 					lda <@VarData
   612 					sta :ztmp
   613 					lda >@VarData
   614 					ldy #@VarDataSize-1
   615 					jmp @FreeMem
   616 					els
   617 88A6 60				rts						; ret
   618 					eif
   619 				.endl
   620 				.endl							; overload
   621
   622 88A7			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   623 88A7 8D 1A 91			sta COLOR
   624
   625 				; -------------------  ASM Block 00000073  -------------------
   626
   627 88AA A9 00		    lda #0
   628 88AC 8D 04 FF		    sta	DParameters
   629 88AF 8D 06 FF		    sta DParameters+2
   630 88B2 8D 07 FF		    sta DParameters+3
   631 88B5 8D 08 FF		    sta DParameters+4
   632 88B8 AD 1A 91		    lda color
   633 88BB 8D 05 FF		    sta DParameters+1
   634 88BE 20 E7 84		    @SendMessage 				
   635 88C1 05 01			.byte 	5,1
   636
   637 				; ------------------------------------------------------------
   638
   639 = 911A			COLOR	= DATAORIGIN+$0048
   640
   641 = 911A			@VarData	= COLOR
   642 = 0001			@VarDataSize	= 1
   643
   644 88C3			@exit
   645 					.ifdef @new
   646 					lda <@VarData
   647 					sta :ztmp
   648 					lda >@VarData
   649 					ldy #@VarDataSize-1
   650 					jmp @FreeMem
   651 					els
   652 88C3 60				rts						; ret
   653 					eif
   654 				.endl
   655
   656 88C4			.local	PUTPIXEL					; PROCEDURE | ASSEMBLER | OVERLOAD
   657 88C4			.local	@0189
   658
   659 				; -------------------  ASM Block 00000074  -------------------
   660
   661 88C4 AD 1B 91		    lda x
   662 				    //sta CurrentX 
   663 88C7 8D 04 FF		    sta DParameters
   664 88CA AD 1C 91		    lda x+1
   665 				    //sta CurrentX+1
   666 88CD 8D 05 FF		    sta DParameters+1
   667 88D0 AD 1D 91		    lda y
   668 				    //sta CurrentY
   669 88D3 8D 06 FF		    sta DParameters+2
   670 88D6 AD 1E 91		    lda y+1
   671 				    //sta CurrentY+1
   672 88D9 8D 07 FF		    sta DParameters+3
   673 88DC 20 E7 84		    @SendMessage 				
   674 88DF 05 05			.byte 	5,5
   675
   676 				; ------------------------------------------------------------
   677
   678 = 911B			X	= DATAORIGIN+$0049
   679 = 911D			Y	= DATAORIGIN+$004B
   680
   681 = 911B			@VarData	= X
   682 = 0004			@VarDataSize	= 4
   683
   684 88E1			@exit
   685 					.ifdef @new
   686 					lda <@VarData
   687 					sta :ztmp
   688 					lda >@VarData
   689 					ldy #@VarDataSize-1
   690 					jmp @FreeMem
   691 					els
   692 88E1 60				rts						; ret
   693 					eif
   694 				.endl
   695 				.endl							; overload
   696
   697 88E2			.local	PUTPIXEL					; PROCEDURE | OVERLOAD
   698 88E2			.local	@018A
   699
   700 				; optimize OK (graph_neo.inc), line = 87
   701
   702 88E2 AD 23 91			lda COLOR
   703 88E5 20 A7 88			jsr SETCOLOR
   704
   705 				; optimize OK (graph_neo.inc), line = 88
   706
   707 88E8 AD 1F 91			lda X
   708 88EB 8D 1B 91			sta PUTPIXEL.@0189.X
   709 88EE AD 20 91			lda X+1
   710 88F1 8D 1C 91			sta PUTPIXEL.@0189.X+1
   711 88F4 AD 21 91			lda Y
   712 88F7 8D 1D 91			sta PUTPIXEL.@0189.Y
   713 88FA AD 22 91			lda Y+1
   714 88FD 8D 1E 91			sta PUTPIXEL.@0189.Y+1
   715 8900 20 C4 88			jsr PUTPIXEL.@0189
   716
   717 				; ------------------------------------------------------------
   718
   719 = 911F			X	= DATAORIGIN+$004D
   720 = 9121			Y	= DATAORIGIN+$004F
   721 = 9123			COLOR	= DATAORIGIN+$0051
   722
   723 = 911F			@VarData	= X
   724 = 0005			@VarDataSize	= 5
   725
   726 8903			@exit
   727 					.ifdef @new
   728 					lda <@VarData
   729 					sta :ztmp
   730 					lda >@VarData
   731 					ldy #@VarDataSize-1
   732 					jmp @FreeMem
   733 					els
   734 8903 60				rts						; ret
   735 					eif
   736 				.endl
   737 				.endl							; overload
   738
   739 				; ------------------------------------------------------------
   740
   741 = 0080			CURRENTDRIVER	= $80
   742 = 0000			DETECT	= $00
   743 = 0001			CGA	= $01
   744 = 0002			MCGA	= $02
   745 = 0003			EGA	= $03
   746 = 0004			EGA64	= $04
   747 = 0005			EGAMONO	= $05
   748 = 0006			LOWRES	= $06
   749 = 0007			HERCMONO	= $07
   750 = 0009			VGA	= $09
   751 = 000A			VESA	= $0A
   752 = 000B			D1BIT	= $0B
   753 = 000C			D2BIT	= $0C
   754 = 000D			D4BIT	= $0D
   755 = 000E			D6BIT	= $0E
   756 = 000F			D8BIT	= $0F
   757 = 0010			D12BIT	= $10
   758 = 0018			M640X400	= $18
   759 = 0018			M640X480	= $18
   760 = 0001			GROK	= $01
   761 = 00FF			GRNOINITGRAPH	= $FF
   762 = 00FE			GRNOTDETECTED	= $FE
   763 = 00FD			GRFILENOTFOUND	= $FD
   764 = 00FC			GRINVALIDDRIVER	= $FC
   765 = 00FB			GRNOLOADMEM	= $FB
   766 = 00FA			GRNOSCANMEM	= $FA
   767 = 00F9			GRNOFLOODMEM	= $F9
   768 = 00F8			GRFONTNOTFOUND	= $F8
   769 = 00F7			GRNOFONTMEM	= $F7
   770 = 00F6			GRINVALIDMODE	= $F6
   771 = 00F5			GRERROR	= $F5
   772 = 00F4			GRIOERROR	= $F4
   773 = 00F3			GRINVALIDFONT	= $F3
   774 = 00F2			GRINVALIDFONTNUM	= $F2
   775 = 00EE			GRINVALIDVERSION	= $EE
   776 = 0000			CGAC0	= $00
   777 = 0001			CGAC1	= $01
   778 = 0002			CGAC2	= $02
   779 = 0003			CGAC3	= $03
   780 = 0004			CGAHI	= $04
   781 = 0000			MCGAC0	= $00
   782 = 0001			MCGAC1	= $01
   783 = 0002			MCGAC2	= $02
   784 = 0003			MCGAC3	= $03
   785 = 0004			MCGAMED	= $04
   786 = 0005			MCGAHI	= $05
   787 = 0000			EGALO	= $00
   788 = 0001			EGAHI	= $01
   789 = 0000			EGA64LO	= $00
   790 = 0001			EGA64HI	= $01
   791 = 0003			EGAMONOHI	= $03
   792 = 000A			VGALO	= $0A
   793 = 001F			VGAMED	= $1F
   794 = 0018			VGAHI	= $18
   795 = 90F8			WIN_LEFT	= DATAORIGIN+$0026
   796 = 90FA			WIN_RIGHT	= DATAORIGIN+$0028
   797 = 90FC			WIN_TOP	= DATAORIGIN+$002A
   798 = 90FE			WIN_BOTTOM	= DATAORIGIN+$002C
   799 = 9100			GRAPHRESULT	= DATAORIGIN+$002E
   800 = 9101			GETCOLOR	= DATAORIGIN+$002F
   801 = 9102			VIDEORAM	= DATAORIGIN+$0030
   802 = 9104			adr.LASTARCCOORDS	= DATAORIGIN+$0032	; [12] RECORD
   803 8904			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   804 = 9104			LASTARCCOORDS.X	= DATAORIGIN+$0032
   805 = 9106			LASTARCCOORDS.Y	= DATAORIGIN+$0034
   806 = 9108			LASTARCCOORDS.XSTART	= DATAORIGIN+$0036
   807 = 910A			LASTARCCOORDS.YSTART	= DATAORIGIN+$0038
   808 = 910C			LASTARCCOORDS.XEND	= DATAORIGIN+$003A
   809 = 910E			LASTARCCOORDS.YEND	= DATAORIGIN+$003C
   810 = 9110			SCANLINE_WIDTH	= DATAORIGIN+$003E
   811 = 9111			CURRENTX	= DATAORIGIN+$003F
   812 = 9113			CURRENTY	= DATAORIGIN+$0041
   813 = 9115			LINEX	= DATAORIGIN+$0043
   814 = 9117			LINEY	= DATAORIGIN+$0045
   815
   816 = 8904 04 91		LASTARCCOORDS
   816 				.endl							; UNIT GRAPH
   817
   818 8906			.local	DODOTSSPHERE					; PROCEDURE
   819
   820 				; optimize OK (sphere.pas), line = 19
   821
   822 8906 A9 50			lda #$50
   823 8908 8D 28 91			sta RX
   824 890B A9 00			lda #$00
   825 890D 8D 29 91			sta RX+1
   826
   827 				; optimize FAIL ('@FSUB.FADD', sphere.pas), line = 22
   828
   829 8910 E8				inx
   830 8911 AD 24 91 95 14		mva TURN :STACKORIGIN,x
   831 8916 AD 25 91 95 24		mva TURN+1 :STACKORIGIN+STACKWIDTH,x
   832 891B AD 26 91 95 34		mva TURN+2 :STACKORIGIN+STACKWIDTH*2,x
   833 8920 AD 27 91 95 44		mva TURN+3 :STACKORIGIN+STACKWIDTH*3,x
   834 8925 E8				inx
   835 8926 A9 00 95 14			mva #$00 :STACKORIGIN,x
   836 892A 95 24			sta :STACKORIGIN+STACKWIDTH,x
   837 892C 95 34			sta :STACKORIGIN+STACKWIDTH*2,x
   838 892E A9 3E 95 44			mva #$3E :STACKORIGIN+STACKWIDTH*3,x
   839 8932 20 EF 80			jsr @FSUB.FADD
   840 8935 CA				dex
   841 8936 B5 14			lda :STACKORIGIN,x
   842 8938 8D 24 91			sta TURN
   843 893B B5 24			lda :STACKORIGIN+STACKWIDTH,x
   844 893D 8D 25 91			sta TURN+1
   845 8940 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
   846 8942 8D 26 91			sta TURN+2
   847 8945 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
   848 8947 8D 27 91			sta TURN+3
   849 894A CA				dex
   850
   851 				; optimize OK (sphere.pas), line = 23
   852
   853 894B A9 00			lda #$00
   854 894D 85 04			sta @FCMPL.A
   855 894F 85 05			sta @FCMPL.A+1
   856 8951 A9 30			lda #$30
   857 8953 85 06			sta @FCMPL.A+2
   858 8955 A9 42			lda #$42
   859 8957 85 07			sta @FCMPL.A+3
   860 8959 AD 24 91			lda TURN
   861 895C 85 0C			sta @FCMPL.B
   862 895E AD 25 91			lda TURN+1
   863 8961 85 0D			sta @FCMPL.B+1
   864 8963 AD 26 91			lda TURN+2
   865 8966 85 0E			sta @FCMPL.B+2
   866 8968 AD 27 91			lda TURN+3
   867 896B 85 0F			sta @FCMPL.B+3
   868 896D 20 CA 83			jsr @FCMPL
   869 8970 30 10			jmi l_0215
   870 8972 F0 0E			jeq l_0215
   871 8974 A9 00			lda #$00
   872 8976 8D 24 91			sta TURN
   873 8979 8D 25 91			sta TURN+1
   874 897C 8D 26 91			sta TURN+2
   875 897F 8D 27 91			sta TURN+3
   876 8982			l_0215
   877
   878 				; optimize OK (sphere.pas), line = 25
   879
   880 8982 A9 A6			lda #$A6
   881 8984 8D 2E 91			sta LATITUDE
   882 8987 A9 FF			lda #$FF
   883 8989 8D 2F 91			sta LATITUDE+1
   884
   885 898C			l_0225
   886 				; --- ForToDoCondition
   887 898C AD 2E 91			lda LATITUDE
   888 898F C9 5B			cmp #$5B
   889 8991 AD 2F 91			lda LATITUDE+1
   890 8994 E9 00			sbc #$00
   891 8996 50 02			svc
   892 8998 49 80			eor #$80
   893 899A 0A				asl @
   894 899B B0 03 4C BD 90		jcc l_0231
   895
   896 				; optimize OK (sphere.pas), line = 27
   897
   898 89A0 A9 00			lda #$00
   899 89A2 8D 30 91			sta LONGITUDE
   900 89A5 8D 31 91			sta LONGITUDE+1
   901
   902 89A8			l_023A
   903 				; --- ForToDoCondition
   904 89A8 AD 31 91			lda LONGITUDE+1
   905 89AB C9 01			cmp #$01
   906 89AD 90 11			bcc @+
   907 89AF F0 03 4C AF 90		jne l_0246
   908 89B4 AD 30 91			lda LONGITUDE
   909 89B7 C9 67			cmp #$67
   910 89B9 90 05			bcc @+
   911 89BB F0 03 4C AF 90		jne l_0246
   912 				@
   913
   914 				; optimize OK (sphere.pas), line = 30
   915
   916 89C0 A9 0C			lda #$0C
   917 89C2 85 0C			sta @SMALLINT.MOD.B
   918 89C4 A9 00			lda #$00
   919 89C6 85 0D			sta @SMALLINT.MOD.B+1
   920 89C8 AD 2E 91			lda LATITUDE
   921 89CB 85 04			sta @SMALLINT.MOD.A
   922 89CD AD 2F 91			lda LATITUDE+1
   923 89D0 85 05			sta @SMALLINT.MOD.A+1
   924 89D2 20 3D 80			jsr @SMALLINT.MOD
   925 89D5 A5 10			lda @SMALLINT.MOD.RESULT
   926 89D7 85 1D			sta :STACKORIGIN+9
   927 89D9 A0 01			ldy #1
   928 89DB A5 11			lda @SMALLINT.MOD.RESULT+1
   929 89DD 05 1D			ora :STACKORIGIN+9
   930 89DF F0 01			beq @+
   931 89E1 88				dey
   932 				@
   933 89E2 84 1D			sty :STACKORIGIN+9
   934 89E4 A9 0C			lda #$0C
   935 89E6 85 0C			sta @SMALLINT.MOD.B
   936 89E8 A9 00			lda #$00
   937 89EA 85 0D			sta @SMALLINT.MOD.B+1
   938 89EC AD 30 91			lda LONGITUDE
   939 89EF 85 04			sta @SMALLINT.MOD.A
   940 89F1 AD 31 91			lda LONGITUDE+1
   941 89F4 85 05			sta @SMALLINT.MOD.A+1
   942 89F6 20 3D 80			jsr @SMALLINT.MOD
   943 89F9 A5 10			lda @SMALLINT.MOD.RESULT
   944 89FB 85 1E			sta :STACKORIGIN+10
   945 89FD A0 01			ldy #1
   946 89FF A5 11			lda @SMALLINT.MOD.RESULT+1
   947 8A01 05 1E			ora :STACKORIGIN+10
   948 8A03 F0 01			beq @+
   949 8A05 88				dey
   950 				@
   951 8A06 98				tya
   952 8A07 25 1D			and :STACKORIGIN+9
   953 8A09 D0 03 4C 9F 90		jeq l_026A
   954
   955 				; optimize OK (sphere.pas), line = 32
   956
   957 8A0E AD 24 91			lda TURN
   958 8A11 8D EF 90			sta SYSTEM.COS.@013B.X
   959 8A14 AD 25 91			lda TURN+1
   960 8A17 8D F0 90			sta SYSTEM.COS.@013B.X+1
   961 8A1A AD 26 91			lda TURN+2
   962 8A1D 8D F1 90			sta SYSTEM.COS.@013B.X+2
   963 8A20 AD 27 91			lda TURN+3
   964 8A23 8D F2 90			sta SYSTEM.COS.@013B.X+3
   965 8A26 20 44 88			jsr SYSTEM.COS.@013B
   966 8A29 AD F3 90			lda SYSTEM.COS.@013B.RESULT
   967 8A2C 8D 32 91			sta CR1
   968 8A2F AD F4 90			lda SYSTEM.COS.@013B.RESULT+1
   969 8A32 8D 33 91			sta CR1+1
   970 8A35 AD F5 90			lda SYSTEM.COS.@013B.RESULT+2
   971 8A38 8D 34 91			sta CR1+2
   972 8A3B AD F6 90			lda SYSTEM.COS.@013B.RESULT+3
   973 8A3E 8D 35 91			sta CR1+3
   974
   975 				; optimize OK (sphere.pas), line = 33
   976
   977 8A41 AD 24 91			lda TURN
   978 8A44 8D E7 90			sta SYSTEM.SIN.@0131.X
   979 8A47 AD 25 91			lda TURN+1
   980 8A4A 8D E8 90			sta SYSTEM.SIN.@0131.X+1
   981 8A4D AD 26 91			lda TURN+2
   982 8A50 8D E9 90			sta SYSTEM.SIN.@0131.X+2
   983 8A53 AD 27 91			lda TURN+3
   984 8A56 8D EA 90			sta SYSTEM.SIN.@0131.X+3
   985 8A59 20 0B 88			jsr SYSTEM.SIN.@0131
   986 8A5C AD EB 90			lda SYSTEM.SIN.@0131.RESULT
   987 8A5F 8D 36 91			sta SR1
   988 8A62 AD EC 90			lda SYSTEM.SIN.@0131.RESULT+1
   989 8A65 8D 37 91			sta SR1+1
   990 8A68 AD ED 90			lda SYSTEM.SIN.@0131.RESULT+2
   991 8A6B 8D 38 91			sta SR1+2
   992 8A6E AD EE 90			lda SYSTEM.SIN.@0131.RESULT+3
   993 8A71 8D 39 91			sta SR1+3
   994
   995 				; optimize FAIL ('@I2F_m', sphere.pas), line = 35
   996
   997 8A74 E8				inx
   998 8A75 AD 2E 91 95 14		mva LATITUDE :STACKORIGIN,x
   999 8A7A AD 2F 91 95 24		mva LATITUDE+1 :STACKORIGIN+STACKWIDTH,x
  1000 8A7F E8				inx
  1001 8A80 A9 A7 95 14			mva #$A7 :STACKORIGIN,x
  1002 8A84 A9 E7 95 24			mva #$E7 :STACKORIGIN+STACKWIDTH,x
  1003 8A88 A9 8E 95 34			mva #$8E :STACKORIGIN+STACKWIDTH*2,x
  1004 8A8C A9 3C 95 44			mva #$3C :STACKORIGIN+STACKWIDTH*3,x
  1005 8A90 20 20 80			jsr @expandToCARD1.SMALL
  1006 8A93 20 C5 84			jsr @I2F_m
  1007 8A96 20 84 82			jsr @FMUL
  1008 8A99 CA				dex
  1009 8A9A B5 14			lda :STACKORIGIN,x
  1010 8A9C 8D 5E 91			sta LR
  1011 8A9F B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1012 8AA1 8D 5F 91			sta LR+1
  1013 8AA4 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1014 8AA6 8D 60 91			sta LR+2
  1015 8AA9 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1016 8AAB 8D 61 91			sta LR+3
  1017 8AAE CA				dex
  1018
  1019 				; optimize OK (sphere.pas), line = 36
  1020
  1021 8AAF AD 5E 91			lda LR
  1022 8AB2 8D EF 90			sta SYSTEM.COS.@013B.X
  1023 8AB5 AD 5F 91			lda LR+1
  1024 8AB8 8D F0 90			sta SYSTEM.COS.@013B.X+1
  1025 8ABB AD 60 91			lda LR+2
  1026 8ABE 8D F1 90			sta SYSTEM.COS.@013B.X+2
  1027 8AC1 AD 61 91			lda LR+3
  1028 8AC4 8D F2 90			sta SYSTEM.COS.@013B.X+3
  1029 8AC7 20 44 88			jsr SYSTEM.COS.@013B
  1030 8ACA E8				inx
  1031 8ACB AD F3 90 95 14		mva SYSTEM.COS.@013B.RESULT :STACKORIGIN,x
  1032 8AD0 AD F4 90 95 24		mva SYSTEM.COS.@013B.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1033 8AD5 AD F5 90 95 34		mva SYSTEM.COS.@013B.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  1034 8ADA AD F6 90 95 44		mva SYSTEM.COS.@013B.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  1035 8ADF E8				inx
  1036 8AE0 AD 28 91 95 14		mva RX :STACKORIGIN,x
  1037 8AE5 AD 29 91 95 24		mva RX+1 :STACKORIGIN+STACKWIDTH,x
  1038 8AEA 20 03 80			jsr @expandToCARD.SMALL
  1039 8AED 20 A0 84			jsr @I2F
  1040 8AF0 20 84 82			jsr @FMUL
  1041 8AF3 CA				dex
  1042 8AF4 B5 14			lda :STACKORIGIN,x
  1043 8AF6 8D 66 91			sta CURRENT_RADIUS
  1044 8AF9 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1045 8AFB 8D 67 91			sta CURRENT_RADIUS+1
  1046 8AFE B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1047 8B00 8D 68 91			sta CURRENT_RADIUS+2
  1048 8B03 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1049 8B05 8D 69 91			sta CURRENT_RADIUS+3
  1050 8B08 CA				dex
  1051
  1052 				; optimize OK (sphere.pas), line = 37
  1053
  1054 8B09 AD 5E 91			lda LR
  1055 8B0C 8D E7 90			sta SYSTEM.SIN.@0131.X
  1056 8B0F AD 5F 91			lda LR+1
  1057 8B12 8D E8 90			sta SYSTEM.SIN.@0131.X+1
  1058 8B15 AD 60 91			lda LR+2
  1059 8B18 8D E9 90			sta SYSTEM.SIN.@0131.X+2
  1060 8B1B AD 61 91			lda LR+3
  1061 8B1E 8D EA 90			sta SYSTEM.SIN.@0131.X+3
  1062 8B21 20 0B 88			jsr SYSTEM.SIN.@0131
  1063 8B24 E8				inx
  1064 8B25 AD EB 90 95 14		mva SYSTEM.SIN.@0131.RESULT :STACKORIGIN,x
  1065 8B2A AD EC 90 95 24		mva SYSTEM.SIN.@0131.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1066 8B2F AD ED 90 95 34		mva SYSTEM.SIN.@0131.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  1067 8B34 AD EE 90 95 44		mva SYSTEM.SIN.@0131.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  1068 8B39 E8				inx
  1069 8B3A AD 28 91 95 14		mva RX :STACKORIGIN,x
  1070 8B3F AD 29 91 95 24		mva RX+1 :STACKORIGIN+STACKWIDTH,x
  1071 8B44 20 03 80			jsr @expandToCARD.SMALL
  1072 8B47 20 A0 84			jsr @I2F
  1073 8B4A 20 84 82			jsr @FMUL
  1074 8B4D CA				dex
  1075 8B4E B5 14			lda :STACKORIGIN,x
  1076 8B50 8D 42 91			sta Z
  1077 8B53 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1078 8B55 8D 43 91			sta Z+1
  1079 8B58 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1080 8B5A 8D 44 91			sta Z+2
  1081 8B5D B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1082 8B5F 8D 45 91			sta Z+3
  1083
  1084 				; optimize FAIL ('@I2F_m', sphere.pas), line = 39
  1085
  1086 8B62 AD 30 91 95 14		mva LONGITUDE :STACKORIGIN,x
  1087 8B67 AD 31 91 95 24		mva LONGITUDE+1 :STACKORIGIN+STACKWIDTH,x
  1088 8B6C E8				inx
  1089 8B6D A9 A7 95 14			mva #$A7 :STACKORIGIN,x
  1090 8B71 A9 E7 95 24			mva #$E7 :STACKORIGIN+STACKWIDTH,x
  1091 8B75 A9 8E 95 34			mva #$8E :STACKORIGIN+STACKWIDTH*2,x
  1092 8B79 A9 3C 95 44			mva #$3C :STACKORIGIN+STACKWIDTH*3,x
  1093 8B7D 20 20 80			jsr @expandToCARD1.SMALL
  1094 8B80 20 C5 84			jsr @I2F_m
  1095 8B83 20 84 82			jsr @FMUL
  1096 8B86 CA				dex
  1097 8B87 B5 14			lda :STACKORIGIN,x
  1098 8B89 8D 62 91			sta LRX
  1099 8B8C B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1100 8B8E 8D 63 91			sta LRX+1
  1101 8B91 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1102 8B93 8D 64 91			sta LRX+2
  1103 8B96 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1104 8B98 8D 65 91			sta LRX+3
  1105 8B9B CA				dex
  1106
  1107 				; optimize OK (sphere.pas), line = 40
  1108
  1109 8B9C AD 62 91			lda LRX
  1110 8B9F 8D E7 90			sta SYSTEM.SIN.@0131.X
  1111 8BA2 AD 63 91			lda LRX+1
  1112 8BA5 8D E8 90			sta SYSTEM.SIN.@0131.X+1
  1113 8BA8 AD 64 91			lda LRX+2
  1114 8BAB 8D E9 90			sta SYSTEM.SIN.@0131.X+2
  1115 8BAE AD 65 91			lda LRX+3
  1116 8BB1 8D EA 90			sta SYSTEM.SIN.@0131.X+3
  1117 8BB4 20 0B 88			jsr SYSTEM.SIN.@0131
  1118 8BB7 E8				inx
  1119 8BB8 AD EB 90 95 14		mva SYSTEM.SIN.@0131.RESULT :STACKORIGIN,x
  1120 8BBD AD EC 90 95 24		mva SYSTEM.SIN.@0131.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1121 8BC2 AD ED 90 95 34		mva SYSTEM.SIN.@0131.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  1122 8BC7 AD EE 90 95 44		mva SYSTEM.SIN.@0131.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  1123 8BCC E8				inx
  1124 8BCD AD 66 91 95 14		mva CURRENT_RADIUS :STACKORIGIN,x
  1125 8BD2 AD 67 91 95 24		mva CURRENT_RADIUS+1 :STACKORIGIN+STACKWIDTH,x
  1126 8BD7 AD 68 91 95 34		mva CURRENT_RADIUS+2 :STACKORIGIN+STACKWIDTH*2,x
  1127 8BDC AD 69 91 95 44		mva CURRENT_RADIUS+3 :STACKORIGIN+STACKWIDTH*3,x
  1128 8BE1 20 84 82			jsr @FMUL
  1129 8BE4 CA				dex
  1130 8BE5 B5 14			lda :STACKORIGIN,x
  1131 8BE7 8D 3A 91			sta X
  1132 8BEA B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1133 8BEC 8D 3B 91			sta X+1
  1134 8BEF B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1135 8BF1 8D 3C 91			sta X+2
  1136 8BF4 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1137 8BF6 8D 3D 91			sta X+3
  1138 8BF9 CA				dex
  1139
  1140 				; optimize OK (sphere.pas), line = 41
  1141
  1142 8BFA AD 62 91			lda LRX
  1143 8BFD 8D EF 90			sta SYSTEM.COS.@013B.X
  1144 8C00 AD 63 91			lda LRX+1
  1145 8C03 8D F0 90			sta SYSTEM.COS.@013B.X+1
  1146 8C06 AD 64 91			lda LRX+2
  1147 8C09 8D F1 90			sta SYSTEM.COS.@013B.X+2
  1148 8C0C AD 65 91			lda LRX+3
  1149 8C0F 8D F2 90			sta SYSTEM.COS.@013B.X+3
  1150 8C12 20 44 88			jsr SYSTEM.COS.@013B
  1151 8C15 E8				inx
  1152 8C16 AD F3 90 95 14		mva SYSTEM.COS.@013B.RESULT :STACKORIGIN,x
  1153 8C1B AD F4 90 95 24		mva SYSTEM.COS.@013B.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1154 8C20 AD F5 90 95 34		mva SYSTEM.COS.@013B.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  1155 8C25 AD F6 90 95 44		mva SYSTEM.COS.@013B.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  1156 8C2A E8				inx
  1157 8C2B AD 66 91 95 14		mva CURRENT_RADIUS :STACKORIGIN,x
  1158 8C30 AD 67 91 95 24		mva CURRENT_RADIUS+1 :STACKORIGIN+STACKWIDTH,x
  1159 8C35 AD 68 91 95 34		mva CURRENT_RADIUS+2 :STACKORIGIN+STACKWIDTH*2,x
  1160 8C3A AD 69 91 95 44		mva CURRENT_RADIUS+3 :STACKORIGIN+STACKWIDTH*3,x
  1161 8C3F 20 84 82			jsr @FMUL
  1162 8C42 CA				dex
  1163 8C43 B5 14			lda :STACKORIGIN,x
  1164 8C45 8D 3E 91			sta Y
  1165 8C48 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1166 8C4A 8D 3F 91			sta Y+1
  1167 8C4D B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1168 8C4F 8D 40 91			sta Y+2
  1169 8C52 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1170 8C54 8D 41 91			sta Y+3
  1171
  1172 				; optimize FAIL ('@FMUL', sphere.pas), line = 43
  1173
  1174 8C57 AD 32 91 95 14		mva CR1 :STACKORIGIN,x
  1175 8C5C AD 33 91 95 24		mva CR1+1 :STACKORIGIN+STACKWIDTH,x
  1176 8C61 AD 34 91 95 34		mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1177 8C66 AD 35 91 95 44		mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1178 8C6B E8				inx
  1179 8C6C AD 3A 91 95 14		mva X :STACKORIGIN,x
  1180 8C71 AD 3B 91 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
  1181 8C76 AD 3C 91 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
  1182 8C7B AD 3D 91 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
  1183 8C80 20 84 82			jsr @FMUL
  1184 8C83 AD 36 91 95 14		mva SR1 :STACKORIGIN,x
  1185 8C88 AD 37 91 95 24		mva SR1+1 :STACKORIGIN+STACKWIDTH,x
  1186 8C8D AD 38 91 95 34		mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1187 8C92 AD 39 91 95 44		mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1188 8C97 E8				inx
  1189 8C98 AD 42 91 95 14		mva Z :STACKORIGIN,x
  1190 8C9D AD 43 91 95 24		mva Z+1 :STACKORIGIN+STACKWIDTH,x
  1191 8CA2 AD 44 91 95 34		mva Z+2 :STACKORIGIN+STACKWIDTH*2,x
  1192 8CA7 AD 45 91 95 44		mva Z+3 :STACKORIGIN+STACKWIDTH*3,x
  1193 8CAC 20 84 82			jsr @FMUL
  1194 8CAF CA				dex
  1195 8CB0 20 EB 80			jsr @FSUB
  1196 8CB3 CA				dex
  1197 8CB4 B5 14			lda :STACKORIGIN,x
  1198 8CB6 8D 46 91			sta X1
  1199 8CB9 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1200 8CBB 8D 47 91			sta X1+1
  1201 8CBE B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1202 8CC0 8D 48 91			sta X1+2
  1203 8CC3 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1204 8CC5 8D 49 91			sta X1+3
  1205
  1206 				; optimize FAIL ('@FMUL', sphere.pas), line = 44
  1207
  1208 8CC8 AD 32 91 95 14		mva CR1 :STACKORIGIN,x
  1209 8CCD AD 33 91 95 24		mva CR1+1 :STACKORIGIN+STACKWIDTH,x
  1210 8CD2 AD 34 91 95 34		mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1211 8CD7 AD 35 91 95 44		mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1212 8CDC E8				inx
  1213 8CDD AD 3E 91 95 14		mva Y :STACKORIGIN,x
  1214 8CE2 AD 3F 91 95 24		mva Y+1 :STACKORIGIN+STACKWIDTH,x
  1215 8CE7 AD 40 91 95 34		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1216 8CEC AD 41 91 95 44		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1217 8CF1 20 84 82			jsr @FMUL
  1218 8CF4 AD 36 91 95 14		mva SR1 :STACKORIGIN,x
  1219 8CF9 AD 37 91 95 24		mva SR1+1 :STACKORIGIN+STACKWIDTH,x
  1220 8CFE AD 38 91 95 34		mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1221 8D03 AD 39 91 95 44		mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1222 8D08 E8				inx
  1223 8D09 AD 46 91 95 14		mva X1 :STACKORIGIN,x
  1224 8D0E AD 47 91 95 24		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  1225 8D13 AD 48 91 95 34		mva X1+2 :STACKORIGIN+STACKWIDTH*2,x
  1226 8D18 AD 49 91 95 44		mva X1+3 :STACKORIGIN+STACKWIDTH*3,x
  1227 8D1D 20 84 82			jsr @FMUL
  1228 8D20 CA				dex
  1229 8D21 20 EB 80			jsr @FSUB
  1230 8D24 CA				dex
  1231 8D25 B5 14			lda :STACKORIGIN,x
  1232 8D27 8D 4E 91			sta Y1
  1233 8D2A B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1234 8D2C 8D 4F 91			sta Y1+1
  1235 8D2F B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1236 8D31 8D 50 91			sta Y1+2
  1237 8D34 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1238 8D36 8D 51 91			sta Y1+3
  1239
  1240 				; optimize FAIL ('@FMUL', sphere.pas), line = 45
  1241
  1242 8D39 AD 36 91 95 14		mva SR1 :STACKORIGIN,x
  1243 8D3E AD 37 91 95 24		mva SR1+1 :STACKORIGIN+STACKWIDTH,x
  1244 8D43 AD 38 91 95 34		mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1245 8D48 AD 39 91 95 44		mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1246 8D4D E8				inx
  1247 8D4E AD 3A 91 95 14		mva X :STACKORIGIN,x
  1248 8D53 AD 3B 91 95 24		mva X+1 :STACKORIGIN+STACKWIDTH,x
  1249 8D58 AD 3C 91 95 34		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
  1250 8D5D AD 3D 91 95 44		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
  1251 8D62 20 84 82			jsr @FMUL
  1252 8D65 AD 32 91 95 14		mva CR1 :STACKORIGIN,x
  1253 8D6A AD 33 91 95 24		mva CR1+1 :STACKORIGIN+STACKWIDTH,x
  1254 8D6F AD 34 91 95 34		mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1255 8D74 AD 35 91 95 44		mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1256 8D79 E8				inx
  1257 8D7A AD 42 91 95 14		mva Z :STACKORIGIN,x
  1258 8D7F AD 43 91 95 24		mva Z+1 :STACKORIGIN+STACKWIDTH,x
  1259 8D84 AD 44 91 95 34		mva Z+2 :STACKORIGIN+STACKWIDTH*2,x
  1260 8D89 AD 45 91 95 44		mva Z+3 :STACKORIGIN+STACKWIDTH*3,x
  1261 8D8E 20 84 82			jsr @FMUL
  1262 8D91 CA				dex
  1263 8D92 20 EF 80			jsr @FSUB.FADD
  1264 8D95 CA				dex
  1265 8D96 B5 14			lda :STACKORIGIN,x
  1266 8D98 8D 4A 91			sta Z1
  1267 8D9B B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1268 8D9D 8D 4B 91			sta Z1+1
  1269 8DA0 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1270 8DA2 8D 4C 91			sta Z1+2
  1271 8DA5 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1272 8DA7 8D 4D 91			sta Z1+3
  1273
  1274 				; optimize FAIL ('@FMUL', sphere.pas), line = 47
  1275
  1276 8DAA AD 32 91 95 14		mva CR1 :STACKORIGIN,x
  1277 8DAF AD 33 91 95 24		mva CR1+1 :STACKORIGIN+STACKWIDTH,x
  1278 8DB4 AD 34 91 95 34		mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1279 8DB9 AD 35 91 95 44		mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1280 8DBE E8				inx
  1281 8DBF AD 4A 91 95 14		mva Z1 :STACKORIGIN,x
  1282 8DC4 AD 4B 91 95 24		mva Z1+1 :STACKORIGIN+STACKWIDTH,x
  1283 8DC9 AD 4C 91 95 34		mva Z1+2 :STACKORIGIN+STACKWIDTH*2,x
  1284 8DCE AD 4D 91 95 44		mva Z1+3 :STACKORIGIN+STACKWIDTH*3,x
  1285 8DD3 20 84 82			jsr @FMUL
  1286 8DD6 AD 36 91 95 14		mva SR1 :STACKORIGIN,x
  1287 8DDB AD 37 91 95 24		mva SR1+1 :STACKORIGIN+STACKWIDTH,x
  1288 8DE0 AD 38 91 95 34		mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1289 8DE5 AD 39 91 95 44		mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1290 8DEA E8				inx
  1291 8DEB AD 4E 91 95 14		mva Y1 :STACKORIGIN,x
  1292 8DF0 AD 4F 91 95 24		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  1293 8DF5 AD 50 91 95 34		mva Y1+2 :STACKORIGIN+STACKWIDTH*2,x
  1294 8DFA AD 51 91 95 44		mva Y1+3 :STACKORIGIN+STACKWIDTH*3,x
  1295 8DFF 20 84 82			jsr @FMUL
  1296 8E02 CA				dex
  1297 8E03 20 EB 80			jsr @FSUB
  1298 8E06 CA				dex
  1299 8E07 B5 14			lda :STACKORIGIN,x
  1300 8E09 8D 5A 91			sta Z2
  1301 8E0C B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1302 8E0E 8D 5B 91			sta Z2+1
  1303 8E11 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1304 8E13 8D 5C 91			sta Z2+2
  1305 8E16 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1306 8E18 8D 5D 91			sta Z2+3
  1307 8E1B CA				dex
  1308
  1309 				; optimize OK (sphere.pas), line = 49
  1310
  1311 8E1C A9 00			lda #$00
  1312 8E1E 85 04			sta @FCMPL.A
  1313 8E20 85 05			sta @FCMPL.A+1
  1314 8E22 85 06			sta @FCMPL.A+2
  1315 8E24 85 07			sta @FCMPL.A+3
  1316 8E26 AD 5A 91			lda Z2
  1317 8E29 85 0C			sta @FCMPL.B
  1318 8E2B AD 5B 91			lda Z2+1
  1319 8E2E 85 0D			sta @FCMPL.B+1
  1320 8E30 AD 5C 91			lda Z2+2
  1321 8E33 85 0E			sta @FCMPL.B+2
  1322 8E35 AD 5D 91			lda Z2+3
  1323 8E38 85 0F			sta @FCMPL.B+3
  1324 8E3A 20 CA 83			jsr @FCMPL
  1325 8E3D 10 03 4C 9F 90		jmi l_02FD
  1326 8E42 D0 03 4C 9F 90		jeq l_02FD
  1327
  1328 				; optimize FAIL ('@FMUL', sphere.pas), line = 51
  1329
  1330 8E47 E8				inx
  1331 8E48 AD 32 91 95 14		mva CR1 :STACKORIGIN,x
  1332 8E4D AD 33 91 95 24		mva CR1+1 :STACKORIGIN+STACKWIDTH,x
  1333 8E52 AD 34 91 95 34		mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1334 8E57 AD 35 91 95 44		mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1335 8E5C E8				inx
  1336 8E5D AD 46 91 95 14		mva X1 :STACKORIGIN,x
  1337 8E62 AD 47 91 95 24		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  1338 8E67 AD 48 91 95 34		mva X1+2 :STACKORIGIN+STACKWIDTH*2,x
  1339 8E6C AD 49 91 95 44		mva X1+3 :STACKORIGIN+STACKWIDTH*3,x
  1340 8E71 20 84 82			jsr @FMUL
  1341 8E74 AD 36 91 95 14		mva SR1 :STACKORIGIN,x
  1342 8E79 AD 37 91 95 24		mva SR1+1 :STACKORIGIN+STACKWIDTH,x
  1343 8E7E AD 38 91 95 34		mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1344 8E83 AD 39 91 95 44		mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1345 8E88 E8				inx
  1346 8E89 AD 3E 91 95 14		mva Y :STACKORIGIN,x
  1347 8E8E AD 3F 91 95 24		mva Y+1 :STACKORIGIN+STACKWIDTH,x
  1348 8E93 AD 40 91 95 34		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1349 8E98 AD 41 91 95 44		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1350 8E9D 20 84 82			jsr @FMUL
  1351 8EA0 CA				dex
  1352 8EA1 20 EF 80			jsr @FSUB.FADD
  1353 8EA4 CA				dex
  1354 8EA5 B5 14			lda :STACKORIGIN,x
  1355 8EA7 8D 52 91			sta X2
  1356 8EAA B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1357 8EAC 8D 53 91			sta X2+1
  1358 8EAF B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1359 8EB1 8D 54 91			sta X2+2
  1360 8EB4 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1361 8EB6 8D 55 91			sta X2+3
  1362
  1363 				; optimize FAIL ('@FMUL', sphere.pas), line = 52
  1364
  1365 8EB9 AD 36 91 95 14		mva SR1 :STACKORIGIN,x
  1366 8EBE AD 37 91 95 24		mva SR1+1 :STACKORIGIN+STACKWIDTH,x
  1367 8EC3 AD 38 91 95 34		mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1368 8EC8 AD 39 91 95 44		mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1369 8ECD E8				inx
  1370 8ECE AD 4A 91 95 14		mva Z1 :STACKORIGIN,x
  1371 8ED3 AD 4B 91 95 24		mva Z1+1 :STACKORIGIN+STACKWIDTH,x
  1372 8ED8 AD 4C 91 95 34		mva Z1+2 :STACKORIGIN+STACKWIDTH*2,x
  1373 8EDD AD 4D 91 95 44		mva Z1+3 :STACKORIGIN+STACKWIDTH*3,x
  1374 8EE2 20 84 82			jsr @FMUL
  1375 8EE5 AD 32 91 95 14		mva CR1 :STACKORIGIN,x
  1376 8EEA AD 33 91 95 24		mva CR1+1 :STACKORIGIN+STACKWIDTH,x
  1377 8EEF AD 34 91 95 34		mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
  1378 8EF4 AD 35 91 95 44		mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
  1379 8EF9 E8				inx
  1380 8EFA AD 4E 91 95 14		mva Y1 :STACKORIGIN,x
  1381 8EFF AD 4F 91 95 24		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  1382 8F04 AD 50 91 95 34		mva Y1+2 :STACKORIGIN+STACKWIDTH*2,x
  1383 8F09 AD 51 91 95 44		mva Y1+3 :STACKORIGIN+STACKWIDTH*3,x
  1384 8F0E 20 84 82			jsr @FMUL
  1385 8F11 CA				dex
  1386 8F12 20 EF 80			jsr @FSUB.FADD
  1387 8F15 CA				dex
  1388 8F16 B5 14			lda :STACKORIGIN,x
  1389 8F18 8D 56 91			sta Y2
  1390 8F1B B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1391 8F1D 8D 57 91			sta Y2+1
  1392 8F20 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1393 8F22 8D 58 91			sta Y2+2
  1394 8F25 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1395 8F27 8D 59 91			sta Y2+3
  1396
  1397 				; optimize FAIL ('@FSUB', sphere.pas), line = 54
  1398
  1399 8F2A A9 00 95 14			mva #$00 :STACKORIGIN,x
  1400 8F2E 95 24			sta :STACKORIGIN+STACKWIDTH,x
  1401 8F30 A9 80 95 34			mva #$80 :STACKORIGIN+STACKWIDTH*2,x
  1402 8F34 A9 3F 95 44			mva #$3F :STACKORIGIN+STACKWIDTH*3,x
  1403 8F38 E8				inx
  1404 8F39 AD 5A 91 95 14		mva Z2 :STACKORIGIN,x
  1405 8F3E AD 5B 91 95 24		mva Z2+1 :STACKORIGIN+STACKWIDTH,x
  1406 8F43 AD 5C 91 95 34		mva Z2+2 :STACKORIGIN+STACKWIDTH*2,x
  1407 8F48 AD 5D 91 95 44		mva Z2+3 :STACKORIGIN+STACKWIDTH*3,x
  1408 8F4D E8				inx
  1409 8F4E A9 00 95 14			mva #$00 :STACKORIGIN,x
  1410 8F52 95 24			sta :STACKORIGIN+STACKWIDTH,x
  1411 8F54 A9 C8 95 34			mva #$C8 :STACKORIGIN+STACKWIDTH*2,x
  1412 8F58 A9 43 95 44			mva #$43 :STACKORIGIN+STACKWIDTH*3,x
  1413 8F5C 20 EB 80			jsr @FSUB
  1414 8F5F CA				dex
  1415 8F60 20 3B 83			jsr @FDIV
  1416 8F63 CA				dex
  1417 8F64 B5 14			lda :STACKORIGIN,x
  1418 8F66 8D 5A 91			sta Z2
  1419 8F69 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1420 8F6B 8D 5B 91			sta Z2+1
  1421 8F6E B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1422 8F70 8D 5C 91			sta Z2+2
  1423 8F73 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1424 8F75 8D 5D 91			sta Z2+3
  1425
  1426 				; optimize FAIL ('@FMUL', sphere.pas), line = 56
  1427
  1428 8F78 AD 52 91 95 14		mva X2 :STACKORIGIN,x
  1429 8F7D AD 53 91 95 24		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  1430 8F82 AD 54 91 95 34		mva X2+2 :STACKORIGIN+STACKWIDTH*2,x
  1431 8F87 AD 55 91 95 44		mva X2+3 :STACKORIGIN+STACKWIDTH*3,x
  1432 8F8C E8				inx
  1433 8F8D AD 5A 91 95 14		mva Z2 :STACKORIGIN,x
  1434 8F92 AD 5B 91 95 24		mva Z2+1 :STACKORIGIN+STACKWIDTH,x
  1435 8F97 AD 5C 91 95 34		mva Z2+2 :STACKORIGIN+STACKWIDTH*2,x
  1436 8F9C AD 5D 91 95 44		mva Z2+3 :STACKORIGIN+STACKWIDTH*3,x
  1437 8FA1 20 84 82			jsr @FMUL
  1438 8FA4 CA				dex
  1439 8FA5 B5 14			lda :STACKORIGIN,x
  1440 8FA7 8D 6A 91			sta XZ
  1441 8FAA B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1442 8FAC 8D 6B 91			sta XZ+1
  1443 8FAF B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1444 8FB1 8D 6C 91			sta XZ+2
  1445 8FB4 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1446 8FB6 8D 6D 91			sta XZ+3
  1447
  1448 				; optimize FAIL ('@FMUL', sphere.pas), line = 57
  1449
  1450 8FB9 AD 56 91 95 14		mva Y2 :STACKORIGIN,x
  1451 8FBE AD 57 91 95 24		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  1452 8FC3 AD 58 91 95 34		mva Y2+2 :STACKORIGIN+STACKWIDTH*2,x
  1453 8FC8 AD 59 91 95 44		mva Y2+3 :STACKORIGIN+STACKWIDTH*3,x
  1454 8FCD E8				inx
  1455 8FCE AD 5A 91 95 14		mva Z2 :STACKORIGIN,x
  1456 8FD3 AD 5B 91 95 24		mva Z2+1 :STACKORIGIN+STACKWIDTH,x
  1457 8FD8 AD 5C 91 95 34		mva Z2+2 :STACKORIGIN+STACKWIDTH*2,x
  1458 8FDD AD 5D 91 95 44		mva Z2+3 :STACKORIGIN+STACKWIDTH*3,x
  1459 8FE2 20 84 82			jsr @FMUL
  1460 8FE5 CA				dex
  1461 8FE6 B5 14			lda :STACKORIGIN,x
  1462 8FE8 8D 6E 91			sta YZ
  1463 8FEB B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1464 8FED 8D 6F 91			sta YZ+1
  1465 8FF0 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  1466 8FF2 8D 70 91			sta YZ+2
  1467 8FF5 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1468 8FF7 8D 71 91			sta YZ+3
  1469
  1470 				; optimize FAIL ('@I2F_m', sphere.pas), line = 59
  1471
  1472 8FFA A9 F4 95 14			mva #$F4 :STACKORIGIN,x
  1473 8FFE A9 01 95 24			mva #$01 :STACKORIGIN+STACKWIDTH,x
  1474 9002 E8				inx
  1475 9003 AD 6A 91 95 14		mva XZ :STACKORIGIN,x
  1476 9008 AD 6B 91 95 24		mva XZ+1 :STACKORIGIN+STACKWIDTH,x
  1477 900D AD 6C 91 95 34		mva XZ+2 :STACKORIGIN+STACKWIDTH*2,x
  1478 9012 AD 6D 91 95 44		mva XZ+3 :STACKORIGIN+STACKWIDTH*3,x
  1479 9017 A9 00 95 33			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1480 901B 95 43			sta :STACKORIGIN-1+STACKWIDTH*3,x
  1481 901D 20 C5 84			jsr @I2F_m
  1482 9020 20 84 82			jsr @FMUL
  1483 9023 CA				dex
  1484 9024 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1485 9026 49 80			eor #$80
  1486 9028 95 44			sta :STACKORIGIN+STACKWIDTH*3,x
  1487 902A 20 16 84			jsr @F2I
  1488 902D B5 14			lda :STACKORIGIN,x
  1489 902F 18 69 A0			add #$A0
  1490 9032 8D 2A 91			sta SX
  1491 9035 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1492 9037 69 00			adc #$00
  1493 9039 8D 2B 91			sta SX+1
  1494
  1495 				; optimize FAIL ('@I2F_m', sphere.pas), line = 60
  1496
  1497 903C A9 F4 95 14			mva #$F4 :STACKORIGIN,x
  1498 9040 A9 01 95 24			mva #$01 :STACKORIGIN+STACKWIDTH,x
  1499 9044 E8				inx
  1500 9045 AD 6E 91 95 14		mva YZ :STACKORIGIN,x
  1501 904A AD 6F 91 95 24		mva YZ+1 :STACKORIGIN+STACKWIDTH,x
  1502 904F AD 70 91 95 34		mva YZ+2 :STACKORIGIN+STACKWIDTH*2,x
  1503 9054 AD 71 91 95 44		mva YZ+3 :STACKORIGIN+STACKWIDTH*3,x
  1504 9059 A9 00 95 33			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  1505 905D 95 43			sta :STACKORIGIN-1+STACKWIDTH*3,x
  1506 905F 20 C5 84			jsr @I2F_m
  1507 9062 20 84 82			jsr @FMUL
  1508 9065 CA				dex
  1509 9066 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  1510 9068 49 80			eor #$80
  1511 906A 95 44			sta :STACKORIGIN+STACKWIDTH*3,x
  1512 906C 20 16 84			jsr @F2I
  1513 906F B5 14			lda :STACKORIGIN,x
  1514 9071 18 69 78			add #$78
  1515 9074 8D 2C 91			sta SY
  1516 9077 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  1517 9079 69 00			adc #$00
  1518 907B 8D 2D 91			sta SY+1
  1519 907E CA				dex
  1520
  1521 				; optimize OK (sphere.pas), line = 62
  1522
  1523 907F AD 2A 91			lda SX
  1524 9082 8D 1F 91			sta GRAPH.PUTPIXEL.@018A.X
  1525 9085 AD 2B 91			lda SX+1
  1526 9088 8D 20 91			sta GRAPH.PUTPIXEL.@018A.X+1
  1527 908B AD 2C 91			lda SY
  1528 908E 8D 21 91			sta GRAPH.PUTPIXEL.@018A.Y
  1529 9091 AD 2D 91			lda SY+1
  1530 9094 8D 22 91			sta GRAPH.PUTPIXEL.@018A.Y+1
  1531 9097 A9 0F			lda #$0F
  1532 9099 8D 23 91			sta GRAPH.PUTPIXEL.@018A.COLOR
  1533 909C 20 E2 88			jsr GRAPH.PUTPIXEL.@018A
  1534 909F			l_02FD
  1535 909F			l_026A
  1536
  1537 				; --- ForToDoEpilog
  1538 909F EE 30 91			inc LONGITUDE
  1539 90A2 F0 03 4C A8 89		jne l_023A
  1540 90A7 EE 31 91			inc LONGITUDE+1
  1541 90AA F0 03 4C A8 89		jne l_023A
  1542 90AF			l_0246
  1543
  1544 				; --- ForToDoEpilog
  1545 90AF EE 2E 91			inc LATITUDE
  1546 90B2 F0 03 4C 8C 89		jne l_0225
  1547 90B7 EE 2F 91			inc LATITUDE+1
  1548 90BA 4C 8C 89			jmp l_0225
  1549 90BD			l_0231
  1550
  1551 				; ------------------------------------------------------------
  1552
  1553 = 912A			SX	= DATAORIGIN+$0058
  1554 = 912C			SY	= DATAORIGIN+$005A
  1555 = 912E			LATITUDE	= DATAORIGIN+$005C
  1556 = 9130			LONGITUDE	= DATAORIGIN+$005E
  1557 = 9132			CR1	= DATAORIGIN+$0060
  1558 = 9136			SR1	= DATAORIGIN+$0064
  1559 = 913A			X	= DATAORIGIN+$0068
  1560 = 913E			Y	= DATAORIGIN+$006C
  1561 = 9142			Z	= DATAORIGIN+$0070
  1562 = 9146			X1	= DATAORIGIN+$0074
  1563 = 914A			Z1	= DATAORIGIN+$0078
  1564 = 914E			Y1	= DATAORIGIN+$007C
  1565 = 9152			X2	= DATAORIGIN+$0080
  1566 = 9156			Y2	= DATAORIGIN+$0084
  1567 = 915A			Z2	= DATAORIGIN+$0088
  1568 = 915E			LR	= DATAORIGIN+$008C
  1569 = 9162			LRX	= DATAORIGIN+$0090
  1570 = 9166			CURRENT_RADIUS	= DATAORIGIN+$0094
  1571 = 916A			XZ	= DATAORIGIN+$0098
  1572 = 916E			YZ	= DATAORIGIN+$009C
  1573
  1574 = 912A			@VarData	= SX
  1575 = 0048			@VarDataSize	= 72
  1576
  1577 90BD			@exit
  1578 					.ifdef @new
  1579 					lda <@VarData
  1580 					sta :ztmp
  1581 					lda >@VarData
  1582 					ldy #@VarDataSize-1
  1583 					jmp @FreeMem
  1584 					els
  1585 90BD 60				rts						; ret
  1586 					eif
  1587 				.endl
  1588 90BE			l_0004
  1589
  1590 				; optimize OK (sphere.pas), line = 70
  1591
  1592 90BE A9 00			lda #$00
  1593 90C0 20 8C 88			jsr GRAPH.INITGRAPH.@017C
  1594
  1595 				; optimize FAIL ('DODOTSSPHERE', sphere.pas), line = 71
  1596
  1597 90C3 20 06 89			jsr DODOTSSPHERE
  1598
  1599 				; --- RepeatUntilProlog
  1600 90C6			l_0371
  1601
  1602 				; optimize FAIL ('CRT.KEYPRESSED', sphere.pas), line = 72
  1603
  1604 90C6 20 7D 88			jsr CRT.KEYPRESSED
  1605 90C9 AD F7 90			lda CRT.KEYPRESSED.RESULT
  1606 90CC F0 F8			jeq l_0371
  1607
  1608 				; ------------------------------------------------------------
  1609
  1610 = 9124			TURN	= DATAORIGIN+$0052
  1611 = 9128			RX	= DATAORIGIN+$0056
  1612 = 0004			RADIANS	= $04
  1613 = 00A0			MIDW	= $A0
  1614 = 0078			MIDH	= $78
  1615 = 000C			STEP_ANGLE	= $0C
  1616 90CE			@exit
  1617
  1618 90CE A2 00		@halt	ldx #$00
  1619 90D0 9A				txs
  1620
  1621 90D1 60				rts
  1622
  1623 				; ------------------------------------------------------------
  1624
  1625 				; ------------------------------------------------------------
  1626
  1627 90D2			.local	@DEFINES
  1628 90D2			NEO
  1629 				.endl
  1630
  1631 90D2			.local	@RESOURCE
  1632 				.endl
  1633
  1634 				.endl							; MAIN
  1635
  1636 				; ------------------------------------------------------------
  1637 				; ------------------------------------------------------------
  1638
  1639 				.macro	UNITINITIALIZATION
  1640 				
  1641 					.ifdef MAIN.SYSTEM.@UnitInit
  1642 					jsr MAIN.SYSTEM.@UnitInit
  1643 					.fi
  1644 				
  1645 					.ifdef MAIN.CRT.@UnitInit
  1646 					jsr MAIN.CRT.@UnitInit
  1647 					.fi
  1648 				
  1649 					.ifdef MAIN.TYPES.@UnitInit
  1650 					jsr MAIN.TYPES.@UnitInit
  1651 					.fi
  1652 				
  1653 					.ifdef MAIN.GRAPH.@UnitInit
  1654 					jsr MAIN.GRAPH.@UnitInit
  1655 					.fi
  1656 				.endm
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1661 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1661 				SYSTEM: $854B..$887C
  1662 					eif
  1663
  1664 					ift .SIZEOF(MAIN.CRT) > 0
  1665 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1665 				CRT: $887D..$888B
  1666 					eif
  1667
  1668 					ift .SIZEOF(MAIN.TYPES) > 0
  1669 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1670 					eif
  1671
  1672 					ift .SIZEOF(MAIN.GRAPH) > 0
  1673 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1673 				GRAPH: $888C..$8905
  1674 					eif
  1675
  1676 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1676 				CODE: $8003..$90D1
  1677
  1678 				; ------------------------------------------------------------
  1679
  1680 = 90D2				?adr = *
  1681 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  1682 					?adr = ?old_adr
  1683 					eif
  1684
  1685 					org ?adr
  1686 = 90D2				?old_adr = *
  1687
  1688 90D2			DATAORIGIN
  1689 90D2 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1690 90EA 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17
  1691
  1692 = 002D			VARINITSIZE	= *-DATAORIGIN
  1693 = 00A0			VARDATASIZE	= 160
  1694
  1695 = 9172			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1696
  1697 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1697 				DATA: $90D2..$9172
  1698
  1699 				; ------------------------------------------------------------
  1700
  1701 				.macro	STATICDATA
  1702 				.endm
  1703
  1704 					end
