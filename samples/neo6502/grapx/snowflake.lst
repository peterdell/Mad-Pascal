mads 2.1.7 build 4 (2 Oct 23)
    54 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0055
   104
   105 				.print 'RTBUF: ',@buf,'..',@buf+255
   105 				RTBUF: $0200..$02FF
   106
   107 				.print 'RTLIB: ',RTLIB,'..',*-1
   107 				RTLIB: $8003..$828A
   108
   109 				; ------------------------------------------------------------
   110
   111 828B			START
   112 828B BA				tsx
   113 828C 8E 1B 8E			stx MAIN.@halt+1
   114
   115 = 00A2			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 8E31			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN > 0) && (VLEN <= 256)
   121 828F A2 5E			ldx #256-VLEN
   122 8291 A9 00			lda #$00
   123 8293 9D D3 8D E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>256
   125 					m@init
   126 					eif
   127
   128 				.ifdef psptr
   129 8299 A9 D3 85 00 A9 8E + 	mwa #PROGRAMSTACK psptr
   130 				.fi
   131
   132 82A1 A2 00			ldx #$00
   133 82A3 86 02			stx bp						; BP = 0
   134
   135 82A5 CA				dex						; X = 255
   136
   137 82A6				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: snowflake.a65]
Source: snowflake.a65
   138
   139 82A6			.local	MAIN						; PROCEDURE
   140
   141 82A6 4C 0A 8E			jmp l_0004
   142
   143 				; ------------------------------------------------------------
   144
   145 82A9			.local	SYSTEM						; UNIT
   146
   147 				; ------------------------------------------------------------
   148
   149 = 0648			M_PI_2	= $0648
   150 = 0192			D_PI_2	= $0192
   151 = 0004			D_PI_180	= $04
   152 = 0004			FMOPENREAD	= $04
   153 = 0008			FMOPENWRITE	= $08
   154 = 0009			FMOPENAPPEND	= $09
   155 = 000C			FMOPENREADWRITE	= $0C
   156 = 8E1E			SCREENWIDTH	= DATAORIGIN+$0000
   157 = 8E20			SCREENHEIGHT	= DATAORIGIN+$0002
   158 = 8E22			DATESEPARATOR	= DATAORIGIN+$0004
   159 = 8E23			FILEMODE	= DATAORIGIN+$0005
   160 = 8E24			GRAPHMODE	= DATAORIGIN+$0006
   161 = 8E25			IORESULT	= DATAORIGIN+$0007
   162 = 8E26			EOLN	= DATAORIGIN+$0008
   163 = 8E27			RNDSEED	= DATAORIGIN+$0009
   164
   165 				.endl							; UNIT SYSTEM
   166
   167 				; ------------------------------------------------------------
   168
   169 82A9			.local	CRT						; UNIT
   170
   171 82A9			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   172
   173 				; -------------------  ASM Block 00000064  -------------------
   174
   175 82A9 20 3D 82			@SendMessage
   176 82AC 02 02			dta 2,2
   177 82AE 20 6D 82			@WaitMessage
   178 82B1 AD 04 FF			lda DParameters
   179 82B4 8D 29 8E			sta result
   180
   181 82B7			@exit
   182
   183 				; ------------------------------------------------------------
   184
   185 = 8E29			RESULT	= DATAORIGIN+$000B
   186 82B7 60				rts						; ret
   187 				.endl
   188
   189 				; ------------------------------------------------------------
   190
   191 = 0000			BW40	= $00
   192 = 0001			CO40	= $01
   193 = 0002			BW80	= $02
   194 = 0003			CO80	= $03
   195 = 0007			MONO	= $07
   196 = 0001			C40	= $01
   197 = 0003			C80	= $03
   198 = 0080			BLINK	= $80
   199
   200 				.endl							; UNIT CRT
   201
   202 				; ------------------------------------------------------------
   203
   204 82B8			.local	TYPES						; UNIT
   205
   206 				; ------------------------------------------------------------
   207
   208 				.endl							; UNIT TYPES
   209
   210 				; ------------------------------------------------------------
   211
   212 82B8			.local	GRAPH						; UNIT
   213
   214 82B8			.local	INITGRAPH					; PROCEDURE | OVERLOAD
   215 82B8			.local	@0097
   216 82B8 8D 4B 8E			sta MODE
   217
   218 				; optimize OK (graph_neo.inc), line = 9
   219
   220 82BB A9 40			lda #$40
   221 82BD 8D 1E 8E			sta SYSTEM.SCREENWIDTH
   222 82C0 A9 01			lda #$01
   223 82C2 8D 1F 8E			sta SYSTEM.SCREENWIDTH+1
   224
   225 				; optimize OK (graph_neo.inc), line = 10
   226
   227 82C5 A9 F0			lda #$F0
   228 82C7 8D 20 8E			sta SYSTEM.SCREENHEIGHT
   229 82CA A9 00			lda #$00
   230 82CC 8D 21 8E			sta SYSTEM.SCREENHEIGHT+1
   231
   232 				; -------------------  ASM Block 00000071  -------------------
   233
   234 82CF 20 85 82			    @ClrScr
   235 					
   236 				; ------------------------------------------------------------
   237
   238 = 8E4B			MODE	= DATAORIGIN+$002D
   239
   240 = 8E4B			@VarData	= MODE
   241 = 0001			@VarDataSize	= 1
   242
   243 82D2			@exit
   244 					.ifdef @new
   245 					lda <@VarData
   246 					sta :ztmp
   247 					lda >@VarData
   248 					ldy #@VarDataSize-1
   249 					jmp @FreeMem
   250 					els
   251 82D2 60				rts						; ret
   252 					eif
   253 				.endl
   254 				.endl							; overload
   255
   256 82D3			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   257 82D3 8D 4C 8E			sta COLOR
   258
   259 				; -------------------  ASM Block 00000073  -------------------
   260
   261 82D6 A9 00		    lda #0
   262 82D8 8D 04 FF		    sta	DParameters
   263 82DB 8D 06 FF		    sta DParameters+2
   264 82DE 8D 07 FF		    sta DParameters+3
   265 82E1 8D 08 FF		    sta DParameters+4
   266 82E4 AD 4C 8E		    lda color
   267 82E7 8D 05 FF		    sta DParameters+1
   268 82EA 20 3D 82		    @SendMessage 				
   269 82ED 05 01			.byte 	5,1
   270
   271 				; ------------------------------------------------------------
   272
   273 = 8E4C			COLOR	= DATAORIGIN+$002E
   274
   275 = 8E4C			@VarData	= COLOR
   276 = 0001			@VarDataSize	= 1
   277
   278 82EF			@exit
   279 					.ifdef @new
   280 					lda <@VarData
   281 					sta :ztmp
   282 					lda >@VarData
   283 					ldy #@VarDataSize-1
   284 					jmp @FreeMem
   285 					els
   286 82EF 60				rts						; ret
   287 					eif
   288 				.endl
   289
   290 82F0			.local	LINETO						; PROCEDURE
   291
   292 				; -------------------  ASM Block 00000077  -------------------
   293
   294 82F0 AD 43 8E 8D 04 FF +         mwa CurrentX DParameters
   295 82FC AD 45 8E 8D 06 FF +         mwa CurrentY DParameters+2
   296 8308 AD 4D 8E 8D 08 FF +         mwa x DParameters+4
   297 8314 AD 4F 8E 8D 0A FF +         mwa y DParameters+6
   298 8320 20 3D 82		        @SendMessage 				
   299 8323 05 02		        .byte 	5,2
   300 				    
   301 				; optimize OK (graph_neo.inc), line = 127
   302
   303 8325 AD 4D 8E			lda X
   304 8328 8D 43 8E			sta CURRENTX
   305 832B AD 4E 8E			lda X+1
   306 832E 8D 44 8E			sta CURRENTX+1
   307
   308 				; optimize OK (graph_neo.inc), line = 128
   309
   310 8331 AD 4F 8E			lda Y
   311 8334 8D 45 8E			sta CURRENTY
   312 8337 AD 50 8E			lda Y+1
   313 833A 8D 46 8E			sta CURRENTY+1
   314
   315 				; ------------------------------------------------------------
   316
   317 = 8E4D			X	= DATAORIGIN+$002F
   318 = 8E4F			Y	= DATAORIGIN+$0031
   319
   320 = 8E4D			@VarData	= X
   321 = 0004			@VarDataSize	= 4
   322
   323 833D			@exit
   324 					.ifdef @new
   325 					lda <@VarData
   326 					sta :ztmp
   327 					lda >@VarData
   328 					ldy #@VarDataSize-1
   329 					jmp @FreeMem
   330 					els
   331 833D 60				rts						; ret
   332 					eif
   333 				.endl
   334
   335 833E			.local	MOVETO						; PROCEDURE | ASSEMBLER
   336
   337 				; -------------------  ASM Block 00000079  -------------------
   338
   339 833E AD 54 8E			lda y+1
   340 8341 10 08			bpl _0
   341
   342 8343 A9 00			lda #0
   343 8345 8D 53 8E			sta y
   344 8348 8D 54 8E			sta y+1
   345 834B			_0
   346 834B AD 52 8E			lda x+1
   347 834E 10 08			bpl _1
   348
   349 8350 A9 00			lda #0
   350 8352 8D 51 8E			sta x
   351 8355 8D 52 8E			sta x+1
   352 8358			_1
   353 8358 AD 54 8E CD 21 8E + 	cpw y main.system.ScreenHeight
   354 8366 90 11			bcc _2
   355
   356 8368 38 AD 20 8E E9 01 + 	sbw main.system.ScreenHeight #1 y
   357 8379			_2
   358 8379 AD 52 8E CD 1F 8E + 	cpw x main.system.ScreenWidth
   359 8387 90 11			bcc _3
   360
   361 8389 38 AD 1E 8E E9 01 + 	sbw main.system.ScreenWidth #1 x
   362 839A			_3
   363 839A AD 51 8E 8D 43 8E + 	mwa x CurrentX
   364 83A6 AD 53 8E 8D 45 8E + 	mwa y CurrentY
   365
   366
   367 				; ------------------------------------------------------------
   368
   369 = 8E51			X	= DATAORIGIN+$0033
   370 = 8E53			Y	= DATAORIGIN+$0035
   371
   372 = 8E51			@VarData	= X
   373 = 0004			@VarDataSize	= 4
   374
   375 83B2			@exit
   376 					.ifdef @new
   377 					lda <@VarData
   378 					sta :ztmp
   379 					lda >@VarData
   380 					ldy #@VarDataSize-1
   381 					jmp @FreeMem
   382 					els
   383 83B2 60				rts						; ret
   384 					eif
   385 				.endl
   386
   387 				; ------------------------------------------------------------
   388
   389 = 0080			CURRENTDRIVER	= $80
   390 = 0000			DETECT	= $00
   391 = 0001			CGA	= $01
   392 = 0002			MCGA	= $02
   393 = 0003			EGA	= $03
   394 = 0004			EGA64	= $04
   395 = 0005			EGAMONO	= $05
   396 = 0006			LOWRES	= $06
   397 = 0007			HERCMONO	= $07
   398 = 0009			VGA	= $09
   399 = 000A			VESA	= $0A
   400 = 000B			D1BIT	= $0B
   401 = 000C			D2BIT	= $0C
   402 = 000D			D4BIT	= $0D
   403 = 000E			D6BIT	= $0E
   404 = 000F			D8BIT	= $0F
   405 = 0010			D12BIT	= $10
   406 = 0018			M640X400	= $18
   407 = 0018			M640X480	= $18
   408 = 0001			GROK	= $01
   409 = 00FF			GRNOINITGRAPH	= $FF
   410 = 00FE			GRNOTDETECTED	= $FE
   411 = 00FD			GRFILENOTFOUND	= $FD
   412 = 00FC			GRINVALIDDRIVER	= $FC
   413 = 00FB			GRNOLOADMEM	= $FB
   414 = 00FA			GRNOSCANMEM	= $FA
   415 = 00F9			GRNOFLOODMEM	= $F9
   416 = 00F8			GRFONTNOTFOUND	= $F8
   417 = 00F7			GRNOFONTMEM	= $F7
   418 = 00F6			GRINVALIDMODE	= $F6
   419 = 00F5			GRERROR	= $F5
   420 = 00F4			GRIOERROR	= $F4
   421 = 00F3			GRINVALIDFONT	= $F3
   422 = 00F2			GRINVALIDFONTNUM	= $F2
   423 = 00EE			GRINVALIDVERSION	= $EE
   424 = 0000			CGAC0	= $00
   425 = 0001			CGAC1	= $01
   426 = 0002			CGAC2	= $02
   427 = 0003			CGAC3	= $03
   428 = 0004			CGAHI	= $04
   429 = 0000			MCGAC0	= $00
   430 = 0001			MCGAC1	= $01
   431 = 0002			MCGAC2	= $02
   432 = 0003			MCGAC3	= $03
   433 = 0004			MCGAMED	= $04
   434 = 0005			MCGAHI	= $05
   435 = 0000			EGALO	= $00
   436 = 0001			EGAHI	= $01
   437 = 0000			EGA64LO	= $00
   438 = 0001			EGA64HI	= $01
   439 = 0003			EGAMONOHI	= $03
   440 = 000A			VGALO	= $0A
   441 = 001F			VGAMED	= $1F
   442 = 0018			VGAHI	= $18
   443 = 8E2A			WIN_LEFT	= DATAORIGIN+$000C
   444 = 8E2C			WIN_RIGHT	= DATAORIGIN+$000E
   445 = 8E2E			WIN_TOP	= DATAORIGIN+$0010
   446 = 8E30			WIN_BOTTOM	= DATAORIGIN+$0012
   447 = 8E32			GRAPHRESULT	= DATAORIGIN+$0014
   448 = 8E33			GETCOLOR	= DATAORIGIN+$0015
   449 = 8E34			VIDEORAM	= DATAORIGIN+$0016
   450 = 8E36			adr.LASTARCCOORDS	= DATAORIGIN+$0018	; [12] RECORD
   451 83B3			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   452 = 8E36			LASTARCCOORDS.X	= DATAORIGIN+$0018
   453 = 8E38			LASTARCCOORDS.Y	= DATAORIGIN+$001A
   454 = 8E3A			LASTARCCOORDS.XSTART	= DATAORIGIN+$001C
   455 = 8E3C			LASTARCCOORDS.YSTART	= DATAORIGIN+$001E
   456 = 8E3E			LASTARCCOORDS.XEND	= DATAORIGIN+$0020
   457 = 8E40			LASTARCCOORDS.YEND	= DATAORIGIN+$0022
   458 = 8E42			SCANLINE_WIDTH	= DATAORIGIN+$0024
   459 = 8E43			CURRENTX	= DATAORIGIN+$0025
   460 = 8E45			CURRENTY	= DATAORIGIN+$0027
   461 = 8E47			LINEX	= DATAORIGIN+$0029
   462 = 8E49			LINEY	= DATAORIGIN+$002B
   463
   464 = 83B3 36 8E		LASTARCCOORDS
   464 				.endl							; UNIT GRAPH
   465
   466 83B5			.local	LINETO2D					; PROCEDURE
   467
   468 				; optimize OK (snowflake.pas), line = 27
   469
   470 83B5 AD 5D 8E			lda AY
   471 83B8 85 06			sta @REAL_ROUND.A
   472 83BA AD 5E 8E			lda AY+1
   473 83BD 85 07			sta @REAL_ROUND.A+1
   474 83BF AD 5F 8E			lda AY+2
   475 83C2 85 08			sta @REAL_ROUND.A+2
   476 83C4 AD 60 8E			lda AY+3
   477 83C7 85 09			sta @REAL_ROUND.A+3
   478 83C9 20 C2 81			jsr @REAL_ROUND
   479 83CC A5 06			lda :eax
   480 83CE 18 69 64			add #$64
   481 83D1 85 1F			sta :STACKORIGIN+9
   482 83D3 A5 07			lda :eax+1
   483 83D5 69 00			adc #$00
   484 83D7 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   485 83D9 AD 59 8E			lda AX
   486 83DC 85 06			sta @REAL_ROUND.A
   487 83DE AD 5A 8E			lda AX+1
   488 83E1 85 07			sta @REAL_ROUND.A+1
   489 83E3 AD 5B 8E			lda AX+2
   490 83E6 85 08			sta @REAL_ROUND.A+2
   491 83E8 AD 5C 8E			lda AX+3
   492 83EB 85 09			sta @REAL_ROUND.A+3
   493 83ED 20 C2 81			jsr @REAL_ROUND
   494 83F0 A5 06			lda :eax
   495 83F2 18 69 A0			add #$A0
   496 83F5 8D 4D 8E			sta GRAPH.LINETO.X
   497 83F8 A5 07			lda :eax+1
   498 83FA 69 00			adc #$00
   499 83FC 8D 4E 8E			sta GRAPH.LINETO.X+1
   500 83FF A5 1F			lda :STACKORIGIN+9
   501 8401 8D 4F 8E			sta GRAPH.LINETO.Y
   502 8404 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   503 8406 8D 50 8E			sta GRAPH.LINETO.Y+1
   504 8409 20 F0 82			jsr GRAPH.LINETO
   505
   506 				; ------------------------------------------------------------
   507
   508 = 8E59			AX	= DATAORIGIN+$003B
   509 = 8E5D			AY	= DATAORIGIN+$003F
   510
   511 = 8E59			@VarData	= AX
   512 = 0008			@VarDataSize	= 8
   513
   514 840C			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 840C 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 840D			.local	MOVETO2D					; PROCEDURE
   527
   528 				; optimize OK (snowflake.pas), line = 32
   529
   530 840D AD 65 8E			lda AY
   531 8410 85 06			sta @REAL_ROUND.A
   532 8412 AD 66 8E			lda AY+1
   533 8415 85 07			sta @REAL_ROUND.A+1
   534 8417 AD 67 8E			lda AY+2
   535 841A 85 08			sta @REAL_ROUND.A+2
   536 841C AD 68 8E			lda AY+3
   537 841F 85 09			sta @REAL_ROUND.A+3
   538 8421 20 C2 81			jsr @REAL_ROUND
   539 8424 A5 06			lda :eax
   540 8426 18 69 64			add #$64
   541 8429 85 1F			sta :STACKORIGIN+9
   542 842B A5 07			lda :eax+1
   543 842D 69 00			adc #$00
   544 842F 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   545 8431 AD 61 8E			lda AX
   546 8434 85 06			sta @REAL_ROUND.A
   547 8436 AD 62 8E			lda AX+1
   548 8439 85 07			sta @REAL_ROUND.A+1
   549 843B AD 63 8E			lda AX+2
   550 843E 85 08			sta @REAL_ROUND.A+2
   551 8440 AD 64 8E			lda AX+3
   552 8443 85 09			sta @REAL_ROUND.A+3
   553 8445 20 C2 81			jsr @REAL_ROUND
   554 8448 A5 06			lda :eax
   555 844A 18 69 A0			add #$A0
   556 844D 8D 51 8E			sta GRAPH.MOVETO.X
   557 8450 A5 07			lda :eax+1
   558 8452 69 00			adc #$00
   559 8454 8D 52 8E			sta GRAPH.MOVETO.X+1
   560 8457 A5 1F			lda :STACKORIGIN+9
   561 8459 8D 53 8E			sta GRAPH.MOVETO.Y
   562 845C A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   563 845E 8D 54 8E			sta GRAPH.MOVETO.Y+1
   564 8461 20 3E 83			jsr GRAPH.MOVETO
   565
   566 				; ------------------------------------------------------------
   567
   568 = 8E61			AX	= DATAORIGIN+$0043
   569 = 8E65			AY	= DATAORIGIN+$0047
   570
   571 = 8E61			@VarData	= AX
   572 = 0008			@VarDataSize	= 8
   573
   574 8464			@exit
   575 					.ifdef @new
   576 					lda <@VarData
   577 					sta :ztmp
   578 					lda >@VarData
   579 					ldy #@VarDataSize-1
   580 					jmp @FreeMem
   581 					els
   582 8464 60				rts						; ret
   583 					eif
   584 				.endl
   585
   586 8465			.local	NEXTSEGMENTS					; PROCEDURE
   587 					.ifdef @VarData
   588 8465 A9 69		@new	lda <@VarData
   589 8467 85 12			sta :ztmp
   590 8469 A9 8E			lda >@VarData
   591 846B A0 38			ldy #@VarDataSize-1
   592 846D 20 00 82			jsr @AllocMem
   593 					eif
   594
   595 				; ------------------------------------------------------------
   596
   597 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   598 				; as Pointer
   599 8470 B5 16			lda :STACKORIGIN,x
   600 8472 8D 69 8E			sta AX
   601 8475 B5 26			lda :STACKORIGIN+STACKWIDTH,x
   602 8477 8D 6A 8E			sta AX+1
   603 847A B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   604 847C 8D 6B 8E			sta AX+2
   605 847F B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   606 8481 8D 6C 8E			sta AX+3
   607 8484 CA				dex
   608 8485 30 4B			jmi @main
   609
   610 				; ------------------------------------------------------------
   611
   612 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   613 				; as Pointer
   614 8487 B5 16			lda :STACKORIGIN,x
   615 8489 8D 6D 8E			sta AY
   616 848C B5 26			lda :STACKORIGIN+STACKWIDTH,x
   617 848E 8D 6E 8E			sta AY+1
   618 8491 B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   619 8493 8D 6F 8E			sta AY+2
   620 8496 B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   621 8498 8D 70 8E			sta AY+3
   622 849B CA				dex
   623 849C 30 34			jmi @main
   624
   625 				; ------------------------------------------------------------
   626
   627 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   628 				; as Pointer
   629 849E B5 16			lda :STACKORIGIN,x
   630 84A0 8D 71 8E			sta BX
   631 84A3 B5 26			lda :STACKORIGIN+STACKWIDTH,x
   632 84A5 8D 72 8E			sta BX+1
   633 84A8 B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   634 84AA 8D 73 8E			sta BX+2
   635 84AD B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   636 84AF 8D 74 8E			sta BX+3
   637 84B2 CA				dex
   638 84B3 30 1D			jmi @main
   639
   640 				; ------------------------------------------------------------
   641
   642 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   643 				; as Pointer
   644 84B5 B5 16			lda :STACKORIGIN,x
   645 84B7 8D 75 8E			sta BY
   646 84BA B5 26			lda :STACKORIGIN+STACKWIDTH,x
   647 84BC 8D 76 8E			sta BY+1
   648 84BF B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   649 84C1 8D 77 8E			sta BY+2
   650 84C4 B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   651 84C6 8D 78 8E			sta BY+3
   652 84C9 CA				dex
   653 84CA 30 06			jmi @main
   654
   655 				; ------------------------------------------------------------
   656
   657 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   658 				; as Pointer
   659 84CC B5 16			lda :STACKORIGIN,x
   660 84CE 8D 79 8E			sta N
   661 84D1 CA				dex
   662 84D2			@main
   663
   664 				; optimize OK (snowflake.pas), line = 45
   665
   666 84D2 AD 79 8E			lda N
   667 84D5 D0 03 4C A7 8A		jeq l_0154
   668
   669 				; optimize OK (snowflake.pas), line = 48
   670
   671 84DA AD 69 8E			lda AX
   672 84DD 18 6D 69 8E			add AX
   673 84E1 85 1F			sta :STACKORIGIN+9
   674 84E3 AD 6A 8E			lda AX+1
   675 84E6 6D 6A 8E			adc AX+1
   676 84E9 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   677 84EB AD 6B 8E			lda AX+2
   678 84EE 6D 6B 8E			adc AX+2
   679 84F1 85 3F			sta :STACKORIGIN+STACKWIDTH*2+9
   680 84F3 AD 6C 8E			lda AX+3
   681 84F6 6D 6C 8E			adc AX+3
   682 84F9 85 4F			sta :STACKORIGIN+STACKWIDTH*3+9
   683 84FB A5 1F			lda :STACKORIGIN+9
   684 84FD 18 6D 71 8E			add BX
   685 8501 85 06			sta @REAL_DIV.A
   686 8503 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   687 8505 6D 72 8E			adc BX+1
   688 8508 85 07			sta @REAL_DIV.A+1
   689 850A A5 3F			lda :STACKORIGIN+STACKWIDTH*2+9
   690 850C 6D 73 8E			adc BX+2
   691 850F 85 08			sta @REAL_DIV.A+2
   692 8511 A5 4F			lda :STACKORIGIN+STACKWIDTH*3+9
   693 8513 6D 74 8E			adc BX+3
   694 8516 85 09			sta @REAL_DIV.A+3
   695 8518 A9 00			lda #$00
   696 851A 85 0E			sta @REAL_DIV.B
   697 851C A9 03			lda #$03
   698 851E 85 0F			sta @REAL_DIV.B+1
   699 8520 A9 00			lda #$00
   700 8522 85 10			sta @REAL_DIV.B+2
   701 8524 85 11			sta @REAL_DIV.B+3
   702 8526 20 38 81			jsr @REAL_DIV
   703 8529 A5 06			lda :eax
   704 852B 8D 8A 8E			sta R.X
   705 852E A5 07			lda :eax+1
   706 8530 8D 8B 8E			sta R.X+1
   707 8533 A5 08			lda :eax+2
   708 8535 8D 8C 8E			sta R.X+2
   709 8538 A5 09			lda :eax+3
   710 853A 8D 8D 8E			sta R.X+3
   711
   712 				; optimize OK (snowflake.pas), line = 49
   713
   714 853D AD 6D 8E			lda AY
   715 8540 18 6D 6D 8E			add AY
   716 8544 85 1F			sta :STACKORIGIN+9
   717 8546 AD 6E 8E			lda AY+1
   718 8549 6D 6E 8E			adc AY+1
   719 854C 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   720 854E AD 6F 8E			lda AY+2
   721 8551 6D 6F 8E			adc AY+2
   722 8554 85 3F			sta :STACKORIGIN+STACKWIDTH*2+9
   723 8556 AD 70 8E			lda AY+3
   724 8559 6D 70 8E			adc AY+3
   725 855C 85 4F			sta :STACKORIGIN+STACKWIDTH*3+9
   726 855E A5 1F			lda :STACKORIGIN+9
   727 8560 18 6D 75 8E			add BY
   728 8564 85 06			sta @REAL_DIV.A
   729 8566 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   730 8568 6D 76 8E			adc BY+1
   731 856B 85 07			sta @REAL_DIV.A+1
   732 856D A5 3F			lda :STACKORIGIN+STACKWIDTH*2+9
   733 856F 6D 77 8E			adc BY+2
   734 8572 85 08			sta @REAL_DIV.A+2
   735 8574 A5 4F			lda :STACKORIGIN+STACKWIDTH*3+9
   736 8576 6D 78 8E			adc BY+3
   737 8579 85 09			sta @REAL_DIV.A+3
   738 857B A9 00			lda #$00
   739 857D 85 0E			sta @REAL_DIV.B
   740 857F A9 03			lda #$03
   741 8581 85 0F			sta @REAL_DIV.B+1
   742 8583 A9 00			lda #$00
   743 8585 85 10			sta @REAL_DIV.B+2
   744 8587 85 11			sta @REAL_DIV.B+3
   745 8589 20 38 81			jsr @REAL_DIV
   746 858C A5 06			lda :eax
   747 858E 8D 8E 8E			sta R.Y
   748 8591 A5 07			lda :eax+1
   749 8593 8D 8F 8E			sta R.Y+1
   750 8596 A5 08			lda :eax+2
   751 8598 8D 90 8E			sta R.Y+2
   752 859B A5 09			lda :eax+3
   753 859D 8D 91 8E			sta R.Y+3
   754
   755 				; optimize OK (snowflake.pas), line = 51
   756
   757 85A0 AD 69 8E			lda AX
   758 85A3 18 6D 71 8E			add BX
   759 85A7 85 1F			sta :STACKORIGIN+9
   760 85A9 AD 6A 8E			lda AX+1
   761 85AC 6D 72 8E			adc BX+1
   762 85AF 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   763 85B1 AD 6B 8E			lda AX+2
   764 85B4 6D 73 8E			adc BX+2
   765 85B7 85 3F			sta :STACKORIGIN+STACKWIDTH*2+9
   766 85B9 AD 6C 8E			lda AX+3
   767 85BC 6D 74 8E			adc BX+3
   768 85BF 85 4F			sta :STACKORIGIN+STACKWIDTH*3+9
   769 85C1 A5 1F			lda :STACKORIGIN+9
   770 85C3 18 6D 71 8E			add BX
   771 85C7 85 06			sta @REAL_DIV.A
   772 85C9 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   773 85CB 6D 72 8E			adc BX+1
   774 85CE 85 07			sta @REAL_DIV.A+1
   775 85D0 A5 3F			lda :STACKORIGIN+STACKWIDTH*2+9
   776 85D2 6D 73 8E			adc BX+2
   777 85D5 85 08			sta @REAL_DIV.A+2
   778 85D7 A5 4F			lda :STACKORIGIN+STACKWIDTH*3+9
   779 85D9 6D 74 8E			adc BX+3
   780 85DC 85 09			sta @REAL_DIV.A+3
   781 85DE A9 00			lda #$00
   782 85E0 85 0E			sta @REAL_DIV.B
   783 85E2 A9 03			lda #$03
   784 85E4 85 0F			sta @REAL_DIV.B+1
   785 85E6 A9 00			lda #$00
   786 85E8 85 10			sta @REAL_DIV.B+2
   787 85EA 85 11			sta @REAL_DIV.B+3
   788 85EC 20 38 81			jsr @REAL_DIV
   789 85EF A5 06			lda :eax
   790 85F1 8D 9A 8E			sta T.X
   791 85F4 A5 07			lda :eax+1
   792 85F6 8D 9B 8E			sta T.X+1
   793 85F9 A5 08			lda :eax+2
   794 85FB 8D 9C 8E			sta T.X+2
   795 85FE A5 09			lda :eax+3
   796 8600 8D 9D 8E			sta T.X+3
   797
   798 				; optimize OK (snowflake.pas), line = 52
   799
   800 8603 AD 6D 8E			lda AY
   801 8606 18 6D 75 8E			add BY
   802 860A 85 1F			sta :STACKORIGIN+9
   803 860C AD 6E 8E			lda AY+1
   804 860F 6D 76 8E			adc BY+1
   805 8612 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   806 8614 AD 6F 8E			lda AY+2
   807 8617 6D 77 8E			adc BY+2
   808 861A 85 3F			sta :STACKORIGIN+STACKWIDTH*2+9
   809 861C AD 70 8E			lda AY+3
   810 861F 6D 78 8E			adc BY+3
   811 8622 85 4F			sta :STACKORIGIN+STACKWIDTH*3+9
   812 8624 A5 1F			lda :STACKORIGIN+9
   813 8626 18 6D 75 8E			add BY
   814 862A 85 06			sta @REAL_DIV.A
   815 862C A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   816 862E 6D 76 8E			adc BY+1
   817 8631 85 07			sta @REAL_DIV.A+1
   818 8633 A5 3F			lda :STACKORIGIN+STACKWIDTH*2+9
   819 8635 6D 77 8E			adc BY+2
   820 8638 85 08			sta @REAL_DIV.A+2
   821 863A A5 4F			lda :STACKORIGIN+STACKWIDTH*3+9
   822 863C 6D 78 8E			adc BY+3
   823 863F 85 09			sta @REAL_DIV.A+3
   824 8641 A9 00			lda #$00
   825 8643 85 0E			sta @REAL_DIV.B
   826 8645 A9 03			lda #$03
   827 8647 85 0F			sta @REAL_DIV.B+1
   828 8649 A9 00			lda #$00
   829 864B 85 10			sta @REAL_DIV.B+2
   830 864D 85 11			sta @REAL_DIV.B+3
   831 864F 20 38 81			jsr @REAL_DIV
   832 8652 A5 06			lda :eax
   833 8654 8D 9E 8E			sta T.Y
   834 8657 A5 07			lda :eax+1
   835 8659 8D 9F 8E			sta T.Y+1
   836 865C A5 08			lda :eax+2
   837 865E 8D A0 8E			sta T.Y+2
   838 8661 A5 09			lda :eax+3
   839 8663 8D A1 8E			sta T.Y+3
   840
   841 				; optimize OK (snowflake.pas), line = 54
   842
   843 8666 AD 69 8E			lda AX
   844 8669 18 6D 71 8E			add BX
   845 866D 85 06			sta @REAL_MUL.A
   846 866F AD 6A 8E			lda AX+1
   847 8672 6D 72 8E			adc BX+1
   848 8675 85 07			sta @REAL_MUL.A+1
   849 8677 AD 6B 8E			lda AX+2
   850 867A 6D 73 8E			adc BX+2
   851 867D 85 08			sta @REAL_MUL.A+2
   852 867F AD 6C 8E			lda AX+3
   853 8682 6D 74 8E			adc BX+3
   854 8685 85 09			sta @REAL_MUL.A+3
   855 8687 A9 80			lda #$80
   856 8689 85 0E			sta @REAL_MUL.B
   857 868B A9 00			lda #$00
   858 868D 85 0F			sta @REAL_MUL.B+1
   859 868F 85 10			sta @REAL_MUL.B+2
   860 8691 85 11			sta @REAL_MUL.B+3
   861 8693 20 43 80			jsr @REAL_MUL
   862 8696 A5 06			lda :eax
   863 8698 8D 7A 8E			sta MIDDLE.X
   864 869B A5 07			lda :eax+1
   865 869D 8D 7B 8E			sta MIDDLE.X+1
   866 86A0 A5 08			lda :eax+2
   867 86A2 8D 7C 8E			sta MIDDLE.X+2
   868 86A5 A5 09			lda :eax+3
   869 86A7 8D 7D 8E			sta MIDDLE.X+3
   870
   871 				; optimize OK (snowflake.pas), line = 55
   872
   873 86AA AD 6D 8E			lda AY
   874 86AD 18 6D 75 8E			add BY
   875 86B1 85 06			sta @REAL_MUL.A
   876 86B3 AD 6E 8E			lda AY+1
   877 86B6 6D 76 8E			adc BY+1
   878 86B9 85 07			sta @REAL_MUL.A+1
   879 86BB AD 6F 8E			lda AY+2
   880 86BE 6D 77 8E			adc BY+2
   881 86C1 85 08			sta @REAL_MUL.A+2
   882 86C3 AD 70 8E			lda AY+3
   883 86C6 6D 78 8E			adc BY+3
   884 86C9 85 09			sta @REAL_MUL.A+3
   885 86CB A9 80			lda #$80
   886 86CD 85 0E			sta @REAL_MUL.B
   887 86CF A9 00			lda #$00
   888 86D1 85 0F			sta @REAL_MUL.B+1
   889 86D3 85 10			sta @REAL_MUL.B+2
   890 86D5 85 11			sta @REAL_MUL.B+3
   891 86D7 20 43 80			jsr @REAL_MUL
   892 86DA A5 06			lda :eax
   893 86DC 8D 7E 8E			sta MIDDLE.Y
   894 86DF A5 07			lda :eax+1
   895 86E1 8D 7F 8E			sta MIDDLE.Y+1
   896 86E4 A5 08			lda :eax+2
   897 86E6 8D 80 8E			sta MIDDLE.Y+2
   898 86E9 A5 09			lda :eax+3
   899 86EB 8D 81 8E			sta MIDDLE.Y+3
   900
   901 				; optimize OK (snowflake.pas), line = 57
   902
   903 86EE AD 71 8E			lda BX
   904 86F1 38 ED 69 8E			sub AX
   905 86F5 8D 82 8E			sta XDELTA
   906 86F8 AD 72 8E			lda BX+1
   907 86FB ED 6A 8E			sbc AX+1
   908 86FE 8D 83 8E			sta XDELTA+1
   909 8701 AD 73 8E			lda BX+2
   910 8704 ED 6B 8E			sbc AX+2
   911 8707 8D 84 8E			sta XDELTA+2
   912 870A AD 74 8E			lda BX+3
   913 870D ED 6C 8E			sbc AX+3
   914 8710 8D 85 8E			sta XDELTA+3
   915
   916 				; optimize OK (snowflake.pas), line = 58
   917
   918 8713 AD 75 8E			lda BY
   919 8716 38 ED 6D 8E			sub AY
   920 871A 8D 86 8E			sta YDELTA
   921 871D AD 76 8E			lda BY+1
   922 8720 ED 6E 8E			sbc AY+1
   923 8723 8D 87 8E			sta YDELTA+1
   924 8726 AD 77 8E			lda BY+2
   925 8729 ED 6F 8E			sbc AY+2
   926 872C 8D 88 8E			sta YDELTA+2
   927 872F AD 78 8E			lda BY+3
   928 8732 ED 70 8E			sbc AY+3
   929 8735 8D 89 8E			sta YDELTA+3
   930
   931 				; optimize OK (snowflake.pas), line = 60
   932
   933 8738 AD 86 8E			lda YDELTA
   934 873B 85 0E			sta @REAL_MUL.B
   935 873D AD 87 8E			lda YDELTA+1
   936 8740 85 0F			sta @REAL_MUL.B+1
   937 8742 AD 88 8E			lda YDELTA+2
   938 8745 85 10			sta @REAL_MUL.B+2
   939 8747 AD 89 8E			lda YDELTA+3
   940 874A 85 11			sta @REAL_MUL.B+3
   941 874C A9 4A			lda #$4A
   942 874E 85 06			sta @REAL_MUL.A
   943 8750 A9 00			lda #$00
   944 8752 85 07			sta @REAL_MUL.A+1
   945 8754 85 08			sta @REAL_MUL.A+2
   946 8756 85 09			sta @REAL_MUL.A+3
   947 8758 20 43 80			jsr @REAL_MUL
   948 875B AD 7A 8E			lda MIDDLE.X
   949 875E 18 65 06			add :eax
   950 8761 8D 92 8E			sta S.X
   951 8764 AD 7B 8E			lda MIDDLE.X+1
   952 8767 65 07			adc :eax+1
   953 8769 8D 93 8E			sta S.X+1
   954 876C AD 7C 8E			lda MIDDLE.X+2
   955 876F 65 08			adc :eax+2
   956 8771 8D 94 8E			sta S.X+2
   957 8774 AD 7D 8E			lda MIDDLE.X+3
   958 8777 65 09			adc :eax+3
   959 8779 8D 95 8E			sta S.X+3
   960
   961 				; optimize OK (snowflake.pas), line = 61
   962
   963 877C AD 82 8E			lda XDELTA
   964 877F 85 0E			sta @REAL_MUL.B
   965 8781 AD 83 8E			lda XDELTA+1
   966 8784 85 0F			sta @REAL_MUL.B+1
   967 8786 AD 84 8E			lda XDELTA+2
   968 8789 85 10			sta @REAL_MUL.B+2
   969 878B AD 85 8E			lda XDELTA+3
   970 878E 85 11			sta @REAL_MUL.B+3
   971 8790 A9 4A			lda #$4A
   972 8792 85 06			sta @REAL_MUL.A
   973 8794 A9 00			lda #$00
   974 8796 85 07			sta @REAL_MUL.A+1
   975 8798 85 08			sta @REAL_MUL.A+2
   976 879A 85 09			sta @REAL_MUL.A+3
   977 879C 20 43 80			jsr @REAL_MUL
   978 879F AD 7E 8E			lda MIDDLE.Y
   979 87A2 38 E5 06			sub :eax
   980 87A5 8D 96 8E			sta S.Y
   981 87A8 AD 7F 8E			lda MIDDLE.Y+1
   982 87AB E5 07			sbc :eax+1
   983 87AD 8D 97 8E			sta S.Y+1
   984 87B0 AD 80 8E			lda MIDDLE.Y+2
   985 87B3 E5 08			sbc :eax+2
   986 87B5 8D 98 8E			sta S.Y+2
   987 87B8 AD 81 8E			lda MIDDLE.Y+3
   988 87BB E5 09			sbc :eax+3
   989 87BD 8D 99 8E			sta S.Y+3
   990
   991 				; optimize OK (snowflake.pas), line = 63
   992
   993 87C0 A9 00			lda #$00
   994 87C2 20 D3 82			jsr GRAPH.SETCOLOR
   995
   996 				; optimize OK (snowflake.pas), line = 64
   997
   998 87C5 AD 69 8E			lda AX
   999 87C8 8D 61 8E			sta MOVETO2D.AX
  1000 87CB AD 6A 8E			lda AX+1
  1001 87CE 8D 62 8E			sta MOVETO2D.AX+1
  1002 87D1 AD 6B 8E			lda AX+2
  1003 87D4 8D 63 8E			sta MOVETO2D.AX+2
  1004 87D7 AD 6C 8E			lda AX+3
  1005 87DA 8D 64 8E			sta MOVETO2D.AX+3
  1006 87DD AD 6D 8E			lda AY
  1007 87E0 8D 65 8E			sta MOVETO2D.AY
  1008 87E3 AD 6E 8E			lda AY+1
  1009 87E6 8D 66 8E			sta MOVETO2D.AY+1
  1010 87E9 AD 6F 8E			lda AY+2
  1011 87EC 8D 67 8E			sta MOVETO2D.AY+2
  1012 87EF AD 70 8E			lda AY+3
  1013 87F2 8D 68 8E			sta MOVETO2D.AY+3
  1014 87F5 20 0D 84			jsr MOVETO2D
  1015
  1016 				; optimize OK (snowflake.pas), line = 65
  1017
  1018 87F8 AD 71 8E			lda BX
  1019 87FB 8D 59 8E			sta LINETO2D.AX
  1020 87FE AD 72 8E			lda BX+1
  1021 8801 8D 5A 8E			sta LINETO2D.AX+1
  1022 8804 AD 73 8E			lda BX+2
  1023 8807 8D 5B 8E			sta LINETO2D.AX+2
  1024 880A AD 74 8E			lda BX+3
  1025 880D 8D 5C 8E			sta LINETO2D.AX+3
  1026 8810 AD 75 8E			lda BY
  1027 8813 8D 5D 8E			sta LINETO2D.AY
  1028 8816 AD 76 8E			lda BY+1
  1029 8819 8D 5E 8E			sta LINETO2D.AY+1
  1030 881C AD 77 8E			lda BY+2
  1031 881F 8D 5F 8E			sta LINETO2D.AY+2
  1032 8822 AD 78 8E			lda BY+3
  1033 8825 8D 60 8E			sta LINETO2D.AY+3
  1034 8828 20 B5 83			jsr LINETO2D
  1035
  1036 				; optimize OK (snowflake.pas), line = 67
  1037
  1038 882B A9 0F			lda #$0F
  1039 882D 20 D3 82			jsr GRAPH.SETCOLOR
  1040
  1041 				; optimize OK (snowflake.pas), line = 68
  1042
  1043 8830 AD 69 8E			lda AX
  1044 8833 8D 61 8E			sta MOVETO2D.AX
  1045 8836 AD 6A 8E			lda AX+1
  1046 8839 8D 62 8E			sta MOVETO2D.AX+1
  1047 883C AD 6B 8E			lda AX+2
  1048 883F 8D 63 8E			sta MOVETO2D.AX+2
  1049 8842 AD 6C 8E			lda AX+3
  1050 8845 8D 64 8E			sta MOVETO2D.AX+3
  1051 8848 AD 6D 8E			lda AY
  1052 884B 8D 65 8E			sta MOVETO2D.AY
  1053 884E AD 6E 8E			lda AY+1
  1054 8851 8D 66 8E			sta MOVETO2D.AY+1
  1055 8854 AD 6F 8E			lda AY+2
  1056 8857 8D 67 8E			sta MOVETO2D.AY+2
  1057 885A AD 70 8E			lda AY+3
  1058 885D 8D 68 8E			sta MOVETO2D.AY+3
  1059 8860 20 0D 84			jsr MOVETO2D
  1060
  1061 				; optimize OK (snowflake.pas), line = 69
  1062
  1063 8863 AD 8A 8E			lda R.X
  1064 8866 8D 59 8E			sta LINETO2D.AX
  1065 8869 AD 8B 8E			lda R.X+1
  1066 886C 8D 5A 8E			sta LINETO2D.AX+1
  1067 886F AD 8C 8E			lda R.X+2
  1068 8872 8D 5B 8E			sta LINETO2D.AX+2
  1069 8875 AD 8D 8E			lda R.X+3
  1070 8878 8D 5C 8E			sta LINETO2D.AX+3
  1071 887B AD 8E 8E			lda R.Y
  1072 887E 8D 5D 8E			sta LINETO2D.AY
  1073 8881 AD 8F 8E			lda R.Y+1
  1074 8884 8D 5E 8E			sta LINETO2D.AY+1
  1075 8887 AD 90 8E			lda R.Y+2
  1076 888A 8D 5F 8E			sta LINETO2D.AY+2
  1077 888D AD 91 8E			lda R.Y+3
  1078 8890 8D 60 8E			sta LINETO2D.AY+3
  1079 8893 20 B5 83			jsr LINETO2D
  1080
  1081 				; optimize OK (snowflake.pas), line = 70
  1082
  1083 8896 AD 92 8E			lda S.X
  1084 8899 8D 59 8E			sta LINETO2D.AX
  1085 889C AD 93 8E			lda S.X+1
  1086 889F 8D 5A 8E			sta LINETO2D.AX+1
  1087 88A2 AD 94 8E			lda S.X+2
  1088 88A5 8D 5B 8E			sta LINETO2D.AX+2
  1089 88A8 AD 95 8E			lda S.X+3
  1090 88AB 8D 5C 8E			sta LINETO2D.AX+3
  1091 88AE AD 96 8E			lda S.Y
  1092 88B1 8D 5D 8E			sta LINETO2D.AY
  1093 88B4 AD 97 8E			lda S.Y+1
  1094 88B7 8D 5E 8E			sta LINETO2D.AY+1
  1095 88BA AD 98 8E			lda S.Y+2
  1096 88BD 8D 5F 8E			sta LINETO2D.AY+2
  1097 88C0 AD 99 8E			lda S.Y+3
  1098 88C3 8D 60 8E			sta LINETO2D.AY+3
  1099 88C6 20 B5 83			jsr LINETO2D
  1100
  1101 				; optimize OK (snowflake.pas), line = 71
  1102
  1103 88C9 AD 9A 8E			lda T.X
  1104 88CC 8D 59 8E			sta LINETO2D.AX
  1105 88CF AD 9B 8E			lda T.X+1
  1106 88D2 8D 5A 8E			sta LINETO2D.AX+1
  1107 88D5 AD 9C 8E			lda T.X+2
  1108 88D8 8D 5B 8E			sta LINETO2D.AX+2
  1109 88DB AD 9D 8E			lda T.X+3
  1110 88DE 8D 5C 8E			sta LINETO2D.AX+3
  1111 88E1 AD 9E 8E			lda T.Y
  1112 88E4 8D 5D 8E			sta LINETO2D.AY
  1113 88E7 AD 9F 8E			lda T.Y+1
  1114 88EA 8D 5E 8E			sta LINETO2D.AY+1
  1115 88ED AD A0 8E			lda T.Y+2
  1116 88F0 8D 5F 8E			sta LINETO2D.AY+2
  1117 88F3 AD A1 8E			lda T.Y+3
  1118 88F6 8D 60 8E			sta LINETO2D.AY+3
  1119 88F9 20 B5 83			jsr LINETO2D
  1120
  1121 				; optimize OK (snowflake.pas), line = 72
  1122
  1123 88FC AD 71 8E			lda BX
  1124 88FF 8D 59 8E			sta LINETO2D.AX
  1125 8902 AD 72 8E			lda BX+1
  1126 8905 8D 5A 8E			sta LINETO2D.AX+1
  1127 8908 AD 73 8E			lda BX+2
  1128 890B 8D 5B 8E			sta LINETO2D.AX+2
  1129 890E AD 74 8E			lda BX+3
  1130 8911 8D 5C 8E			sta LINETO2D.AX+3
  1131 8914 AD 75 8E			lda BY
  1132 8917 8D 5D 8E			sta LINETO2D.AY
  1133 891A AD 76 8E			lda BY+1
  1134 891D 8D 5E 8E			sta LINETO2D.AY+1
  1135 8920 AD 77 8E			lda BY+2
  1136 8923 8D 5F 8E			sta LINETO2D.AY+2
  1137 8926 AD 78 8E			lda BY+3
  1138 8929 8D 60 8E			sta LINETO2D.AY+3
  1139 892C 20 B5 83			jsr LINETO2D
  1140
  1141 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 74
  1142
  1143 892F E8				inx
  1144 8930 AC 79 8E			ldy N
  1145 8933 88				dey
  1146 8934 94 16			sty :STACKORIGIN,x
  1147 8936 E8				inx
  1148 8937 AD 8E 8E 95 16		mva R.Y :STACKORIGIN,x
  1149 893C AD 8F 8E 95 26		mva R.Y+1 :STACKORIGIN+STACKWIDTH,x
  1150 8941 AD 90 8E 95 36		mva R.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1151 8946 AD 91 8E 95 46		mva R.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1152 894B E8				inx
  1153 894C AD 8A 8E 95 16		mva R.X :STACKORIGIN,x
  1154 8951 AD 8B 8E 95 26		mva R.X+1 :STACKORIGIN+STACKWIDTH,x
  1155 8956 AD 8C 8E 95 36		mva R.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1156 895B AD 8D 8E 95 46		mva R.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1157 8960 E8				inx
  1158 8961 AD 6D 8E 95 16		mva AY :STACKORIGIN,x
  1159 8966 AD 6E 8E 95 26		mva AY+1 :STACKORIGIN+STACKWIDTH,x
  1160 896B AD 6F 8E 95 36		mva AY+2 :STACKORIGIN+STACKWIDTH*2,x
  1161 8970 AD 70 8E 95 46		mva AY+3 :STACKORIGIN+STACKWIDTH*3,x
  1162 8975 E8				inx
  1163 8976 AD 69 8E 95 16		mva AX :STACKORIGIN,x
  1164 897B AD 6A 8E 95 26		mva AX+1 :STACKORIGIN+STACKWIDTH,x
  1165 8980 AD 6B 8E 95 36		mva AX+2 :STACKORIGIN+STACKWIDTH*2,x
  1166 8985 AD 6C 8E 95 46		mva AX+3 :STACKORIGIN+STACKWIDTH*3,x
  1167 898A 20 65 84			jsr NEXTSEGMENTS
  1168
  1169 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 75
  1170
  1171 898D E8				inx
  1172 898E AC 79 8E			ldy N
  1173 8991 88				dey
  1174 8992 94 16			sty :STACKORIGIN,x
  1175 8994 E8				inx
  1176 8995 AD 96 8E 95 16		mva S.Y :STACKORIGIN,x
  1177 899A AD 97 8E 95 26		mva S.Y+1 :STACKORIGIN+STACKWIDTH,x
  1178 899F AD 98 8E 95 36		mva S.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1179 89A4 AD 99 8E 95 46		mva S.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1180 89A9 E8				inx
  1181 89AA AD 92 8E 95 16		mva S.X :STACKORIGIN,x
  1182 89AF AD 93 8E 95 26		mva S.X+1 :STACKORIGIN+STACKWIDTH,x
  1183 89B4 AD 94 8E 95 36		mva S.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1184 89B9 AD 95 8E 95 46		mva S.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1185 89BE E8				inx
  1186 89BF AD 8E 8E 95 16		mva R.Y :STACKORIGIN,x
  1187 89C4 AD 8F 8E 95 26		mva R.Y+1 :STACKORIGIN+STACKWIDTH,x
  1188 89C9 AD 90 8E 95 36		mva R.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1189 89CE AD 91 8E 95 46		mva R.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1190 89D3 E8				inx
  1191 89D4 AD 8A 8E 95 16		mva R.X :STACKORIGIN,x
  1192 89D9 AD 8B 8E 95 26		mva R.X+1 :STACKORIGIN+STACKWIDTH,x
  1193 89DE AD 8C 8E 95 36		mva R.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1194 89E3 AD 8D 8E 95 46		mva R.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1195 89E8 20 65 84			jsr NEXTSEGMENTS
  1196
  1197 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 76
  1198
  1199 89EB E8				inx
  1200 89EC AC 79 8E			ldy N
  1201 89EF 88				dey
  1202 89F0 94 16			sty :STACKORIGIN,x
  1203 89F2 E8				inx
  1204 89F3 AD 9E 8E 95 16		mva T.Y :STACKORIGIN,x
  1205 89F8 AD 9F 8E 95 26		mva T.Y+1 :STACKORIGIN+STACKWIDTH,x
  1206 89FD AD A0 8E 95 36		mva T.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1207 8A02 AD A1 8E 95 46		mva T.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1208 8A07 E8				inx
  1209 8A08 AD 9A 8E 95 16		mva T.X :STACKORIGIN,x
  1210 8A0D AD 9B 8E 95 26		mva T.X+1 :STACKORIGIN+STACKWIDTH,x
  1211 8A12 AD 9C 8E 95 36		mva T.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1212 8A17 AD 9D 8E 95 46		mva T.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1213 8A1C E8				inx
  1214 8A1D AD 96 8E 95 16		mva S.Y :STACKORIGIN,x
  1215 8A22 AD 97 8E 95 26		mva S.Y+1 :STACKORIGIN+STACKWIDTH,x
  1216 8A27 AD 98 8E 95 36		mva S.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1217 8A2C AD 99 8E 95 46		mva S.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1218 8A31 E8				inx
  1219 8A32 AD 92 8E 95 16		mva S.X :STACKORIGIN,x
  1220 8A37 AD 93 8E 95 26		mva S.X+1 :STACKORIGIN+STACKWIDTH,x
  1221 8A3C AD 94 8E 95 36		mva S.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1222 8A41 AD 95 8E 95 46		mva S.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1223 8A46 20 65 84			jsr NEXTSEGMENTS
  1224
  1225 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 77
  1226
  1227 8A49 E8				inx
  1228 8A4A AC 79 8E			ldy N
  1229 8A4D 88				dey
  1230 8A4E 94 16			sty :STACKORIGIN,x
  1231 8A50 E8				inx
  1232 8A51 AD 75 8E 95 16		mva BY :STACKORIGIN,x
  1233 8A56 AD 76 8E 95 26		mva BY+1 :STACKORIGIN+STACKWIDTH,x
  1234 8A5B AD 77 8E 95 36		mva BY+2 :STACKORIGIN+STACKWIDTH*2,x
  1235 8A60 AD 78 8E 95 46		mva BY+3 :STACKORIGIN+STACKWIDTH*3,x
  1236 8A65 E8				inx
  1237 8A66 AD 71 8E 95 16		mva BX :STACKORIGIN,x
  1238 8A6B AD 72 8E 95 26		mva BX+1 :STACKORIGIN+STACKWIDTH,x
  1239 8A70 AD 73 8E 95 36		mva BX+2 :STACKORIGIN+STACKWIDTH*2,x
  1240 8A75 AD 74 8E 95 46		mva BX+3 :STACKORIGIN+STACKWIDTH*3,x
  1241 8A7A E8				inx
  1242 8A7B AD 9E 8E 95 16		mva T.Y :STACKORIGIN,x
  1243 8A80 AD 9F 8E 95 26		mva T.Y+1 :STACKORIGIN+STACKWIDTH,x
  1244 8A85 AD A0 8E 95 36		mva T.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1245 8A8A AD A1 8E 95 46		mva T.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1246 8A8F E8				inx
  1247 8A90 AD 9A 8E 95 16		mva T.X :STACKORIGIN,x
  1248 8A95 AD 9B 8E 95 26		mva T.X+1 :STACKORIGIN+STACKWIDTH,x
  1249 8A9A AD 9C 8E 95 36		mva T.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1250 8A9F AD 9D 8E 95 46		mva T.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1251 8AA4 20 65 84			jsr NEXTSEGMENTS
  1252 8AA7			l_0154
  1253
  1254 				; ------------------------------------------------------------
  1255
  1256 = 8E69			AX	= DATAORIGIN+$004B
  1257 = 8E6D			AY	= DATAORIGIN+$004F
  1258 = 8E71			BX	= DATAORIGIN+$0053
  1259 = 8E75			BY	= DATAORIGIN+$0057
  1260 = 8E79			N	= DATAORIGIN+$005B
  1261 = 004A			FACTOR	= $4A
  1262 = 8E7A			adr.MIDDLE	= DATAORIGIN+$005C	; [8] RECORD
  1263 8AA7			.var MIDDLE	= adr.MIDDLE .word
  1264 = 8E7A			MIDDLE.X	= DATAORIGIN+$005C
  1265 = 8E7E			MIDDLE.Y	= DATAORIGIN+$0060
  1266 = 8E82			XDELTA	= DATAORIGIN+$0064
  1267 = 8E86			YDELTA	= DATAORIGIN+$0068
  1268 = 8E8A			adr.R	= DATAORIGIN+$006C	; [8] RECORD
  1269 8AA7			.var R	= adr.R .word
  1270 = 8E8A			R.X	= DATAORIGIN+$006C
  1271 = 8E8E			R.Y	= DATAORIGIN+$0070
  1272 = 8E92			adr.S	= DATAORIGIN+$0074	; [8] RECORD
  1273 8AA7			.var S	= adr.S .word
  1274 = 8E92			S.X	= DATAORIGIN+$0074
  1275 = 8E96			S.Y	= DATAORIGIN+$0078
  1276 = 8E9A			adr.T	= DATAORIGIN+$007C	; [8] RECORD
  1277 8AA7			.var T	= adr.T .word
  1278 = 8E9A			T.X	= DATAORIGIN+$007C
  1279 = 8E9E			T.Y	= DATAORIGIN+$0080
  1280
  1281 = 8E69			@VarData	= AX
  1282 = 0039			@VarDataSize	= 57
  1283
  1284 8AA7			@exit
  1285 					.ifdef @new
  1286 8AA7 A9 69			lda <@VarData
  1287 8AA9 85 12			sta :ztmp
  1288 8AAB A9 8E			lda >@VarData
  1289 8AAD A0 38			ldy #@VarDataSize-1
  1290 8AAF 4C 1F 82			jmp @FreeMem
  1291 					els
  1292 					rts						; ret
  1293 					eif
  1294 = 8AB2 7A 8E		MIDDLE
  1294 = 8AB4 8A 8E		R
  1294 = 8AB6 92 8E		S
  1294 = 8AB8 9A 8E		T
  1294 				.endl
  1295
  1296 8ABA			.local	KOCHSNOWFLAKE					; PROCEDURE
  1297
  1298 				; ------------------------------------------------------------
  1299
  1300 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1301 				; as Pointer
  1302 8ABA B5 16			lda :STACKORIGIN,x
  1303 8ABC 85 04			sta :bp2
  1304 8ABE B5 26			lda :STACKORIGIN+STACKWIDTH,x
  1305 8AC0 85 05			sta :bp2+1
  1306 8AC2 A0 07			ldy #$07
  1307 8AC4 B1 04 99 A2 8E 88 + 	mva:rpl (:bp2),y adr.A,y-
  1308 8ACC A9 A2 8D 6C 8D A9 + 	mwa #adr.A A
  1309 8AD6 CA				dex
  1310 8AD7 30 44			jmi @main
  1311
  1312 				; ------------------------------------------------------------
  1313
  1314 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1315 				; as Pointer
  1316 8AD9 B5 16			lda :STACKORIGIN,x
  1317 8ADB 85 04			sta :bp2
  1318 8ADD B5 26			lda :STACKORIGIN+STACKWIDTH,x
  1319 8ADF 85 05			sta :bp2+1
  1320 8AE1 A0 07			ldy #$07
  1321 8AE3 B1 04 99 AA 8E 88 + 	mva:rpl (:bp2),y adr.B,y-
  1322 8AEB A9 AA 8D 6E 8D A9 + 	mwa #adr.B B
  1323 8AF5 CA				dex
  1324 8AF6 30 25			jmi @main
  1325
  1326 				; ------------------------------------------------------------
  1327
  1328 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1329 				; as Pointer
  1330 8AF8 B5 16			lda :STACKORIGIN,x
  1331 8AFA 85 04			sta :bp2
  1332 8AFC B5 26			lda :STACKORIGIN+STACKWIDTH,x
  1333 8AFE 85 05			sta :bp2+1
  1334 8B00 A0 07			ldy #$07
  1335 8B02 B1 04 99 B2 8E 88 + 	mva:rpl (:bp2),y adr.C,y-
  1336 8B0A A9 B2 8D 70 8D A9 + 	mwa #adr.C C
  1337 8B14 CA				dex
  1338 8B15 30 06			jmi @main
  1339
  1340 				; ------------------------------------------------------------
  1341
  1342 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1343 				; as Pointer
  1344 8B17 B5 16			lda :STACKORIGIN,x
  1345 8B19 8D BA 8E			sta N
  1346 8B1C CA				dex
  1347 8B1D			@main
  1348
  1349 				; optimize OK (snowflake.pas), line = 84
  1350
  1351 8B1D A9 01			lda #$01
  1352 8B1F 20 D3 82			jsr GRAPH.SETCOLOR
  1353
  1354 				; optimize OK (snowflake.pas), line = 85
  1355
  1356 8B22 AD A2 8E			lda A.X
  1357 8B25 8D 61 8E			sta MOVETO2D.AX
  1358 8B28 AD A3 8E			lda A.X+1
  1359 8B2B 8D 62 8E			sta MOVETO2D.AX+1
  1360 8B2E AD A4 8E			lda A.X+2
  1361 8B31 8D 63 8E			sta MOVETO2D.AX+2
  1362 8B34 AD A5 8E			lda A.X+3
  1363 8B37 8D 64 8E			sta MOVETO2D.AX+3
  1364 8B3A AD A6 8E			lda A.Y
  1365 8B3D 8D 65 8E			sta MOVETO2D.AY
  1366 8B40 AD A7 8E			lda A.Y+1
  1367 8B43 8D 66 8E			sta MOVETO2D.AY+1
  1368 8B46 AD A8 8E			lda A.Y+2
  1369 8B49 8D 67 8E			sta MOVETO2D.AY+2
  1370 8B4C AD A9 8E			lda A.Y+3
  1371 8B4F 8D 68 8E			sta MOVETO2D.AY+3
  1372 8B52 20 0D 84			jsr MOVETO2D
  1373
  1374 				; optimize OK (snowflake.pas), line = 86
  1375
  1376 8B55 AD AA 8E			lda B.X
  1377 8B58 8D 59 8E			sta LINETO2D.AX
  1378 8B5B AD AB 8E			lda B.X+1
  1379 8B5E 8D 5A 8E			sta LINETO2D.AX+1
  1380 8B61 AD AC 8E			lda B.X+2
  1381 8B64 8D 5B 8E			sta LINETO2D.AX+2
  1382 8B67 AD AD 8E			lda B.X+3
  1383 8B6A 8D 5C 8E			sta LINETO2D.AX+3
  1384 8B6D AD AE 8E			lda B.Y
  1385 8B70 8D 5D 8E			sta LINETO2D.AY
  1386 8B73 AD AF 8E			lda B.Y+1
  1387 8B76 8D 5E 8E			sta LINETO2D.AY+1
  1388 8B79 AD B0 8E			lda B.Y+2
  1389 8B7C 8D 5F 8E			sta LINETO2D.AY+2
  1390 8B7F AD B1 8E			lda B.Y+3
  1391 8B82 8D 60 8E			sta LINETO2D.AY+3
  1392 8B85 20 B5 83			jsr LINETO2D
  1393
  1394 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 87
  1395
  1396 8B88 E8				inx
  1397 8B89 AD BA 8E 95 16		mva N :STACKORIGIN,x
  1398 8B8E E8				inx
  1399 8B8F AD AE 8E 95 16		mva B.Y :STACKORIGIN,x
  1400 8B94 AD AF 8E 95 26		mva B.Y+1 :STACKORIGIN+STACKWIDTH,x
  1401 8B99 AD B0 8E 95 36		mva B.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1402 8B9E AD B1 8E 95 46		mva B.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1403 8BA3 E8				inx
  1404 8BA4 AD AA 8E 95 16		mva B.X :STACKORIGIN,x
  1405 8BA9 AD AB 8E 95 26		mva B.X+1 :STACKORIGIN+STACKWIDTH,x
  1406 8BAE AD AC 8E 95 36		mva B.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1407 8BB3 AD AD 8E 95 46		mva B.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1408 8BB8 E8				inx
  1409 8BB9 AD A6 8E 95 16		mva A.Y :STACKORIGIN,x
  1410 8BBE AD A7 8E 95 26		mva A.Y+1 :STACKORIGIN+STACKWIDTH,x
  1411 8BC3 AD A8 8E 95 36		mva A.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1412 8BC8 AD A9 8E 95 46		mva A.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1413 8BCD E8				inx
  1414 8BCE AD A2 8E 95 16		mva A.X :STACKORIGIN,x
  1415 8BD3 AD A3 8E 95 26		mva A.X+1 :STACKORIGIN+STACKWIDTH,x
  1416 8BD8 AD A4 8E 95 36		mva A.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1417 8BDD AD A5 8E 95 46		mva A.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1418 8BE2 20 65 84			jsr NEXTSEGMENTS
  1419
  1420 				; optimize OK (snowflake.pas), line = 89
  1421
  1422 8BE5 AD AA 8E			lda B.X
  1423 8BE8 8D 61 8E			sta MOVETO2D.AX
  1424 8BEB AD AB 8E			lda B.X+1
  1425 8BEE 8D 62 8E			sta MOVETO2D.AX+1
  1426 8BF1 AD AC 8E			lda B.X+2
  1427 8BF4 8D 63 8E			sta MOVETO2D.AX+2
  1428 8BF7 AD AD 8E			lda B.X+3
  1429 8BFA 8D 64 8E			sta MOVETO2D.AX+3
  1430 8BFD AD AE 8E			lda B.Y
  1431 8C00 8D 65 8E			sta MOVETO2D.AY
  1432 8C03 AD AF 8E			lda B.Y+1
  1433 8C06 8D 66 8E			sta MOVETO2D.AY+1
  1434 8C09 AD B0 8E			lda B.Y+2
  1435 8C0C 8D 67 8E			sta MOVETO2D.AY+2
  1436 8C0F AD B1 8E			lda B.Y+3
  1437 8C12 8D 68 8E			sta MOVETO2D.AY+3
  1438 8C15 20 0D 84			jsr MOVETO2D
  1439
  1440 				; optimize OK (snowflake.pas), line = 90
  1441
  1442 8C18 AD B2 8E			lda C.X
  1443 8C1B 8D 59 8E			sta LINETO2D.AX
  1444 8C1E AD B3 8E			lda C.X+1
  1445 8C21 8D 5A 8E			sta LINETO2D.AX+1
  1446 8C24 AD B4 8E			lda C.X+2
  1447 8C27 8D 5B 8E			sta LINETO2D.AX+2
  1448 8C2A AD B5 8E			lda C.X+3
  1449 8C2D 8D 5C 8E			sta LINETO2D.AX+3
  1450 8C30 AD B6 8E			lda C.Y
  1451 8C33 8D 5D 8E			sta LINETO2D.AY
  1452 8C36 AD B7 8E			lda C.Y+1
  1453 8C39 8D 5E 8E			sta LINETO2D.AY+1
  1454 8C3C AD B8 8E			lda C.Y+2
  1455 8C3F 8D 5F 8E			sta LINETO2D.AY+2
  1456 8C42 AD B9 8E			lda C.Y+3
  1457 8C45 8D 60 8E			sta LINETO2D.AY+3
  1458 8C48 20 B5 83			jsr LINETO2D
  1459
  1460 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 91
  1461
  1462 8C4B E8				inx
  1463 8C4C AD BA 8E 95 16		mva N :STACKORIGIN,x
  1464 8C51 E8				inx
  1465 8C52 AD B6 8E 95 16		mva C.Y :STACKORIGIN,x
  1466 8C57 AD B7 8E 95 26		mva C.Y+1 :STACKORIGIN+STACKWIDTH,x
  1467 8C5C AD B8 8E 95 36		mva C.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1468 8C61 AD B9 8E 95 46		mva C.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1469 8C66 E8				inx
  1470 8C67 AD B2 8E 95 16		mva C.X :STACKORIGIN,x
  1471 8C6C AD B3 8E 95 26		mva C.X+1 :STACKORIGIN+STACKWIDTH,x
  1472 8C71 AD B4 8E 95 36		mva C.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1473 8C76 AD B5 8E 95 46		mva C.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1474 8C7B E8				inx
  1475 8C7C AD AE 8E 95 16		mva B.Y :STACKORIGIN,x
  1476 8C81 AD AF 8E 95 26		mva B.Y+1 :STACKORIGIN+STACKWIDTH,x
  1477 8C86 AD B0 8E 95 36		mva B.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1478 8C8B AD B1 8E 95 46		mva B.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1479 8C90 E8				inx
  1480 8C91 AD AA 8E 95 16		mva B.X :STACKORIGIN,x
  1481 8C96 AD AB 8E 95 26		mva B.X+1 :STACKORIGIN+STACKWIDTH,x
  1482 8C9B AD AC 8E 95 36		mva B.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1483 8CA0 AD AD 8E 95 46		mva B.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1484 8CA5 20 65 84			jsr NEXTSEGMENTS
  1485
  1486 				; optimize OK (snowflake.pas), line = 93
  1487
  1488 8CA8 AD B2 8E			lda C.X
  1489 8CAB 8D 61 8E			sta MOVETO2D.AX
  1490 8CAE AD B3 8E			lda C.X+1
  1491 8CB1 8D 62 8E			sta MOVETO2D.AX+1
  1492 8CB4 AD B4 8E			lda C.X+2
  1493 8CB7 8D 63 8E			sta MOVETO2D.AX+2
  1494 8CBA AD B5 8E			lda C.X+3
  1495 8CBD 8D 64 8E			sta MOVETO2D.AX+3
  1496 8CC0 AD B6 8E			lda C.Y
  1497 8CC3 8D 65 8E			sta MOVETO2D.AY
  1498 8CC6 AD B7 8E			lda C.Y+1
  1499 8CC9 8D 66 8E			sta MOVETO2D.AY+1
  1500 8CCC AD B8 8E			lda C.Y+2
  1501 8CCF 8D 67 8E			sta MOVETO2D.AY+2
  1502 8CD2 AD B9 8E			lda C.Y+3
  1503 8CD5 8D 68 8E			sta MOVETO2D.AY+3
  1504 8CD8 20 0D 84			jsr MOVETO2D
  1505
  1506 				; optimize OK (snowflake.pas), line = 94
  1507
  1508 8CDB AD A2 8E			lda A.X
  1509 8CDE 8D 59 8E			sta LINETO2D.AX
  1510 8CE1 AD A3 8E			lda A.X+1
  1511 8CE4 8D 5A 8E			sta LINETO2D.AX+1
  1512 8CE7 AD A4 8E			lda A.X+2
  1513 8CEA 8D 5B 8E			sta LINETO2D.AX+2
  1514 8CED AD A5 8E			lda A.X+3
  1515 8CF0 8D 5C 8E			sta LINETO2D.AX+3
  1516 8CF3 AD A6 8E			lda A.Y
  1517 8CF6 8D 5D 8E			sta LINETO2D.AY
  1518 8CF9 AD A7 8E			lda A.Y+1
  1519 8CFC 8D 5E 8E			sta LINETO2D.AY+1
  1520 8CFF AD A8 8E			lda A.Y+2
  1521 8D02 8D 5F 8E			sta LINETO2D.AY+2
  1522 8D05 AD A9 8E			lda A.Y+3
  1523 8D08 8D 60 8E			sta LINETO2D.AY+3
  1524 8D0B 20 B5 83			jsr LINETO2D
  1525
  1526 				; optimize FAIL ('NEXTSEGMENTS', snowflake.pas), line = 95
  1527
  1528 8D0E E8				inx
  1529 8D0F AD BA 8E 95 16		mva N :STACKORIGIN,x
  1530 8D14 E8				inx
  1531 8D15 AD A6 8E 95 16		mva A.Y :STACKORIGIN,x
  1532 8D1A AD A7 8E 95 26		mva A.Y+1 :STACKORIGIN+STACKWIDTH,x
  1533 8D1F AD A8 8E 95 36		mva A.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1534 8D24 AD A9 8E 95 46		mva A.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1535 8D29 E8				inx
  1536 8D2A AD A2 8E 95 16		mva A.X :STACKORIGIN,x
  1537 8D2F AD A3 8E 95 26		mva A.X+1 :STACKORIGIN+STACKWIDTH,x
  1538 8D34 AD A4 8E 95 36		mva A.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1539 8D39 AD A5 8E 95 46		mva A.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1540 8D3E E8				inx
  1541 8D3F AD B6 8E 95 16		mva C.Y :STACKORIGIN,x
  1542 8D44 AD B7 8E 95 26		mva C.Y+1 :STACKORIGIN+STACKWIDTH,x
  1543 8D49 AD B8 8E 95 36		mva C.Y+2 :STACKORIGIN+STACKWIDTH*2,x
  1544 8D4E AD B9 8E 95 46		mva C.Y+3 :STACKORIGIN+STACKWIDTH*3,x
  1545 8D53 E8				inx
  1546 8D54 AD B2 8E 95 16		mva C.X :STACKORIGIN,x
  1547 8D59 AD B3 8E 95 26		mva C.X+1 :STACKORIGIN+STACKWIDTH,x
  1548 8D5E AD B4 8E 95 36		mva C.X+2 :STACKORIGIN+STACKWIDTH*2,x
  1549 8D63 AD B5 8E 95 46		mva C.X+3 :STACKORIGIN+STACKWIDTH*3,x
  1550 8D68 20 65 84			jsr NEXTSEGMENTS
  1551
  1552 				; ------------------------------------------------------------
  1553
  1554 = 8EA2			adr.A	= DATAORIGIN+$0084	; [8] RECORD
  1555 8D6B			.var A	= adr.A .word
  1556 = 8EA2			A.X	= DATAORIGIN+$0084
  1557 = 8EA6			A.Y	= DATAORIGIN+$0088
  1558 = 8EAA			adr.B	= DATAORIGIN+$008C	; [8] RECORD
  1559 8D6B			.var B	= adr.B .word
  1560 = 8EAA			B.X	= DATAORIGIN+$008C
  1561 = 8EAE			B.Y	= DATAORIGIN+$0090
  1562 = 8EB2			adr.C	= DATAORIGIN+$0094	; [8] RECORD
  1563 8D6B			.var C	= adr.C .word
  1564 = 8EB2			C.X	= DATAORIGIN+$0094
  1565 = 8EB6			C.Y	= DATAORIGIN+$0098
  1566 = 8EBA			N	= DATAORIGIN+$009C
  1567
  1568 = 8EA2			@VarData	= A.X
  1569 = 0019			@VarDataSize	= 25
  1570
  1571 8D6B			@exit
  1572 					.ifdef @new
  1573 					lda <@VarData
  1574 					sta :ztmp
  1575 					lda >@VarData
  1576 					ldy #@VarDataSize-1
  1577 					jmp @FreeMem
  1578 					els
  1579 8D6B 60				rts						; ret
  1580 					eif
  1581 = 8D6C A2 8E		A
  1581 = 8D6E AA 8E		B
  1581 = 8D70 B2 8E		C
  1581 				.endl
  1582
  1583 8D72			.local	CREATEKOCHSNOWFLAKE				; PROCEDURE
  1584
  1585 				; optimize OK (snowflake.pas), line = 103
  1586
  1587 8D72 A9 00			lda #$00
  1588 8D74 8D BB 8E			sta A.X
  1589 8D77 A9 BA			lda #$BA
  1590 8D79 8D BC 8E			sta A.X+1
  1591 8D7C A9 FF			lda #$FF
  1592 8D7E 8D BD 8E			sta A.X+2
  1593 8D81 8D BE 8E			sta A.X+3
  1594
  1595 				; optimize OK (snowflake.pas), line = 104
  1596
  1597 8D84 A9 61			lda #$61
  1598 8D86 8D BF 8E			sta A.Y
  1599 8D89 A9 C3			lda #$C3
  1600 8D8B 8D C0 8E			sta A.Y+1
  1601 8D8E A9 FF			lda #$FF
  1602 8D90 8D C1 8E			sta A.Y+2
  1603 8D93 8D C2 8E			sta A.Y+3
  1604
  1605 				; optimize OK (snowflake.pas), line = 105
  1606
  1607 8D96 A9 00			lda #$00
  1608 8D98 8D C3 8E			sta B.X
  1609 8D9B A9 46			lda #$46
  1610 8D9D 8D C4 8E			sta B.X+1
  1611 8DA0 A9 00			lda #$00
  1612 8DA2 8D C5 8E			sta B.X+2
  1613 8DA5 8D C6 8E			sta B.X+3
  1614
  1615 				; optimize OK (snowflake.pas), line = 106
  1616
  1617 8DA8 A9 61			lda #$61
  1618 8DAA 8D C7 8E			sta B.Y
  1619 8DAD A9 C3			lda #$C3
  1620 8DAF 8D C8 8E			sta B.Y+1
  1621 8DB2 A9 FF			lda #$FF
  1622 8DB4 8D C9 8E			sta B.Y+2
  1623 8DB7 8D CA 8E			sta B.Y+3
  1624
  1625 				; optimize OK (snowflake.pas), line = 107
  1626
  1627 8DBA A9 00			lda #$00
  1628 8DBC 8D CB 8E			sta C.X
  1629 8DBF 8D CC 8E			sta C.X+1
  1630 8DC2 8D CD 8E			sta C.X+2
  1631 8DC5 8D CE 8E			sta C.X+3
  1632
  1633 				; optimize OK (snowflake.pas), line = 108
  1634
  1635 8DC8 A9 9F			lda #$9F
  1636 8DCA 8D CF 8E			sta C.Y
  1637 8DCD A9 3C			lda #$3C
  1638 8DCF 8D D0 8E			sta C.Y+1
  1639 8DD2 A9 00			lda #$00
  1640 8DD4 8D D1 8E			sta C.Y+2
  1641 8DD7 8D D2 8E			sta C.Y+3
  1642
  1643 				; optimize FAIL ('KOCHSNOWFLAKE', snowflake.pas), line = 109
  1644
  1645 8DDA E8				inx
  1646 8DDB A9 03 95 16			mva #$03 :STACKORIGIN,x
  1647 8DDF E8				inx
  1648 8DE0 AD 08 8E 95 16		mva C :STACKORIGIN,x
  1649 8DE5 AD 09 8E 95 26		mva C+1 :STACKORIGIN+STACKWIDTH,x
  1650 8DEA E8				inx
  1651 8DEB AD 06 8E 95 16		mva B :STACKORIGIN,x
  1652 8DF0 AD 07 8E 95 26		mva B+1 :STACKORIGIN+STACKWIDTH,x
  1653 8DF5 E8				inx
  1654 8DF6 AD 04 8E 95 16		mva A :STACKORIGIN,x
  1655 8DFB AD 05 8E 95 26		mva A+1 :STACKORIGIN+STACKWIDTH,x
  1656 8E00 20 BA 8A			jsr KOCHSNOWFLAKE
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 = 8EBB			adr.A	= DATAORIGIN+$009D	; [8] RECORD
  1661 8E03			.var A	= adr.A .word
  1662 = 8EBB			A.X	= DATAORIGIN+$009D
  1663 = 8EBF			A.Y	= DATAORIGIN+$00A1
  1664 = 8EC3			adr.B	= DATAORIGIN+$00A5	; [8] RECORD
  1665 8E03			.var B	= adr.B .word
  1666 = 8EC3			B.X	= DATAORIGIN+$00A5
  1667 = 8EC7			B.Y	= DATAORIGIN+$00A9
  1668 = 8ECB			adr.C	= DATAORIGIN+$00AD	; [8] RECORD
  1669 8E03			.var C	= adr.C .word
  1670 = 8ECB			C.X	= DATAORIGIN+$00AD
  1671 = 8ECF			C.Y	= DATAORIGIN+$00B1
  1672
  1673 = 8EBB			@VarData	= A.X
  1674 = 0018			@VarDataSize	= 24
  1675
  1676 8E03			@exit
  1677 					.ifdef @new
  1678 					lda <@VarData
  1679 					sta :ztmp
  1680 					lda >@VarData
  1681 					ldy #@VarDataSize-1
  1682 					jmp @FreeMem
  1683 					els
  1684 8E03 60				rts						; ret
  1685 					eif
  1686 = 8E04 BB 8E		A
  1686 = 8E06 C3 8E		B
  1686 = 8E08 CB 8E		C
  1686 				.endl
  1687 8E0A			l_0004
  1688
  1689 				; optimize OK (snowflake.pas), line = 114
  1690
  1691 8E0A A9 00			lda #$00
  1692 8E0C 20 B8 82			jsr GRAPH.INITGRAPH.@0097
  1693
  1694 				; optimize FAIL ('CREATEKOCHSNOWFLAKE', snowflake.pas), line = 115
  1695
  1696 8E0F 20 72 8D			jsr CREATEKOCHSNOWFLAKE
  1697
  1698 				; --- RepeatUntilProlog
  1699 8E12			l_0285
  1700
  1701 				; optimize FAIL ('CRT.KEYPRESSED', snowflake.pas), line = 116
  1702
  1703 8E12 20 A9 82			jsr CRT.KEYPRESSED
  1704 8E15 AD 29 8E			lda CRT.KEYPRESSED.RESULT
  1705 8E18 F0 F8			jeq l_0285
  1706
  1707 				; ------------------------------------------------------------
  1708
  1709 = 8E55			GD	= DATAORIGIN+$0037
  1710 = 8E57			GM	= DATAORIGIN+$0039
  1711 = 00A0			CX	= $A0
  1712 = 0064			CY	= $64
  1713 = 4600			RAY0	= $4600
  1714 = 2300			RAY1	= $2300
  1715 = 01BB			SQRT3	= $01BB
  1716 = 0003			ITERATION	= $03
  1717 8E1A			@exit
  1718
  1719 8E1A A2 00		@halt	ldx #$00
  1720 8E1C 9A				txs
  1721
  1722 8E1D 60				rts
  1723
  1724 				; ------------------------------------------------------------
  1725
  1726 				; ------------------------------------------------------------
  1727
  1728 8E1E			.local	@DEFINES
  1729 8E1E			NEO
  1730 				.endl
  1731
  1732 8E1E			.local	@RESOURCE
  1733 				.endl
  1734
  1735 				.endl							; MAIN
  1736
  1737 				; ------------------------------------------------------------
  1738 				; ------------------------------------------------------------
  1739
  1740 				.macro	UNITINITIALIZATION
  1741 				
  1742 					.ifdef MAIN.SYSTEM.@UnitInit
  1743 					jsr MAIN.SYSTEM.@UnitInit
  1744 					.fi
  1745 				
  1746 					.ifdef MAIN.CRT.@UnitInit
  1747 					jsr MAIN.CRT.@UnitInit
  1748 					.fi
  1749 				
  1750 					.ifdef MAIN.TYPES.@UnitInit
  1751 					jsr MAIN.TYPES.@UnitInit
  1752 					.fi
  1753 				
  1754 					.ifdef MAIN.GRAPH.@UnitInit
  1755 					jsr MAIN.GRAPH.@UnitInit
  1756 					.fi
  1757 				.endm
  1758
  1759 				; ------------------------------------------------------------
  1760
  1761 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1762 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1763 					eif
  1764
  1765 					ift .SIZEOF(MAIN.CRT) > 0
  1766 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1766 				CRT: $82A9..$82B7
  1767 					eif
  1768
  1769 					ift .SIZEOF(MAIN.TYPES) > 0
  1770 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1771 					eif
  1772
  1773 					ift .SIZEOF(MAIN.GRAPH) > 0
  1774 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1774 				GRAPH: $82B8..$83B4
  1775 					eif
  1776
  1777 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1777 				CODE: $8003..$8E1D
  1778
  1779 				; ------------------------------------------------------------
  1780
  1781 = 8E1E				?adr = *
  1782 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  1783 					?adr = ?old_adr
  1784 					eif
  1785
  1786 					org ?adr
  1787 = 8E1E				?old_adr = *
  1788
  1789 8E1E			DATAORIGIN
  1790 8E1E 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17
  1791
  1792 = 0013			VARINITSIZE	= *-DATAORIGIN
  1793 = 00B5			VARDATASIZE	= 181
  1794
  1795 = 8ED3			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1796
  1797 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1797 				DATA: $8E1E..$8ED3
  1798
  1799 				; ------------------------------------------------------------
  1800
  1801 				.macro	STATICDATA
  1802 				.endm
  1803
  1804 					end
