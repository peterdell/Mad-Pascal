mads 2.1.7 build 4 (2 Oct 23)
    54 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0055
   104
   105 				.print 'RTBUF: ',@buf,'..',@buf+255
   105 				RTBUF: $0200..$02FF
   106
   107 				.print 'RTLIB: ',RTLIB,'..',*-1
   107 				RTLIB: $8043..$8250
   108
   109 				; ------------------------------------------------------------
   110
   111 8251			START
   112 8251 BA				tsx
   113 8252 8E 69 87			stx MAIN.@halt+1
   114
   115 = 003A			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 8783			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN > 0) && (VLEN <= 256)
   121 8255 A2 C6			ldx #256-VLEN
   122 8257 A9 00			lda #$00
   123 8259 9D BD 86 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>256
   125 					m@init
   126 					eif
   127
   128 				.ifdef psptr
   129 825F A9 BD 85 00 A9 87 + 	mwa #PROGRAMSTACK psptr
   130 				.fi
   131
   132 8267 A2 00			ldx #$00
   133 8269 86 02			stx bp						; BP = 0
   134
   135 826B CA				dex						; X = 255
   136
   137 826C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: dragon.a65]
Source: dragon.a65
   138
   139 826C			.local	MAIN						; PROCEDURE
   140
   141 826C 4C 17 87			jmp l_0004
   142
   143 				; ------------------------------------------------------------
   144
   145 826F			.local	SYSTEM						; UNIT
   146
   147 				; ------------------------------------------------------------
   148
   149 = 0648			M_PI_2	= $0648
   150 = 0192			D_PI_2	= $0192
   151 = 0004			D_PI_180	= $04
   152 = 0004			FMOPENREAD	= $04
   153 = 0008			FMOPENWRITE	= $08
   154 = 0009			FMOPENAPPEND	= $09
   155 = 000C			FMOPENREADWRITE	= $0C
   156 = 8770			SCREENWIDTH	= DATAORIGIN+$0000
   157 = 8772			SCREENHEIGHT	= DATAORIGIN+$0002
   158 = 8774			DATESEPARATOR	= DATAORIGIN+$0004
   159 = 8775			FILEMODE	= DATAORIGIN+$0005
   160 = 8776			GRAPHMODE	= DATAORIGIN+$0006
   161 = 8777			IORESULT	= DATAORIGIN+$0007
   162 = 8778			EOLN	= DATAORIGIN+$0008
   163 = 8779			RNDSEED	= DATAORIGIN+$0009
   164
   165 				.endl							; UNIT SYSTEM
   166
   167 				; ------------------------------------------------------------
   168
   169 826F			.local	CRT						; UNIT
   170
   171 826F			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   172
   173 				; -------------------  ASM Block 00000064  -------------------
   174
   175 826F 20 03 82			@SendMessage
   176 8272 02 02			dta 2,2
   177 8274 20 33 82			@WaitMessage
   178 8277 AD 04 FF			lda DParameters
   179 827A 8D 7B 87			sta result
   180
   181 827D			@exit
   182
   183 				; ------------------------------------------------------------
   184
   185 = 877B			RESULT	= DATAORIGIN+$000B
   186 827D 60				rts						; ret
   187 				.endl
   188
   189 				; ------------------------------------------------------------
   190
   191 = 0000			BW40	= $00
   192 = 0001			CO40	= $01
   193 = 0002			BW80	= $02
   194 = 0003			CO80	= $03
   195 = 0007			MONO	= $07
   196 = 0001			C40	= $01
   197 = 0003			C80	= $03
   198 = 0080			BLINK	= $80
   199
   200 				.endl							; UNIT CRT
   201
   202 				; ------------------------------------------------------------
   203
   204 827E			.local	NEO6502						; UNIT
   205
   206 				; ------------------------------------------------------------
   207
   208 = FF00			N6502MSG_ADDRESS	= $FF00
   209 = FFFF			NEO_GFX_RAM	= $FFFF
   210 = FF00			adr.NEOMESSAGE	= $FF00
   211 827E			.var NEOMESSAGE	= adr.NEOMESSAGE .word
   212 = FF00			NEOMESSAGE.GROUP	= $FF00
   213 = FF01			NEOMESSAGE.FUNC	= $FF01
   214 = FF02			NEOMESSAGE.ERROR	= $FF02
   215 = FF03			NEOMESSAGE.STATUS	= $FF03
   216 = FF04			adr.NEOMESSAGE.PARAMS	= $FF04
   217 827E			.var NEOMESSAGE.PARAMS	= adr.NEOMESSAGE.PARAMS .word
   218 = FF04			adr.WORDPARAMS	= $FF04
   219 827E			.var WORDPARAMS	= adr.WORDPARAMS .word
   220 = FF05			adr.WORDXPARAMS	= $FF05
   221 827E			.var WORDXPARAMS	= adr.WORDXPARAMS .word
   222 = FF04			adr.DWORDPARAMS	= $FF04
   223 827E			.var DWORDPARAMS	= adr.DWORDPARAMS .word
   224 = FF04			adr.SOUNDPARAMS	= $FF04
   225 827E			.var SOUNDPARAMS	= adr.SOUNDPARAMS .word
   226 = FF04			SOUNDPARAMS.CHANNEL	= $FF04
   227 = FF05			SOUNDPARAMS.FREQ	= $FF05
   228 = FF07			SOUNDPARAMS.LEN	= $FF07
   229 = FF09			SOUNDPARAMS.SLIDE	= $FF09
   230 = FF0B			SOUNDPARAMS.STYPE	= $FF0B
   231
   232 = 827E 00 FF		NEOMESSAGE
   232 = 8280 04 FF		NEOMESSAGE.PARAMS
   232 = 8282 04 FF		WORDPARAMS
   232 = 8284 05 FF		WORDXPARAMS
   232 = 8286 04 FF		DWORDPARAMS
   232 = 8288 04 FF		SOUNDPARAMS
   232 				.endl							; UNIT NEO6502
   233
   234 				; ------------------------------------------------------------
   235
   236 828A			.local	TYPES						; UNIT
   237
   238 				; ------------------------------------------------------------
   239
   240 				.endl							; UNIT TYPES
   241
   242 				; ------------------------------------------------------------
   243
   244 828A			.local	GRAPH						; UNIT
   245
   246 828A			.local	INITGRAPH					; PROCEDURE | OVERLOAD
   247 828A			.local	@0098
   248 828A 8D 9D 87			sta MODE
   249
   250 				; optimize OK (graph_neo.inc), line = 9
   251
   252 828D A9 40			lda #$40
   253 828F 8D 70 87			sta SYSTEM.SCREENWIDTH
   254 8292 A9 01			lda #$01
   255 8294 8D 71 87			sta SYSTEM.SCREENWIDTH+1
   256
   257 				; optimize OK (graph_neo.inc), line = 10
   258
   259 8297 A9 F0			lda #$F0
   260 8299 8D 72 87			sta SYSTEM.SCREENHEIGHT
   261 829C A9 00			lda #$00
   262 829E 8D 73 87			sta SYSTEM.SCREENHEIGHT+1
   263
   264 				; -------------------  ASM Block 00000072  -------------------
   265
   266 82A1 20 4B 82			    @ClrScr
   267 					
   268 				; ------------------------------------------------------------
   269
   270 = 879D			MODE	= DATAORIGIN+$002D
   271
   272 = 879D			@VarData	= MODE
   273 = 0001			@VarDataSize	= 1
   274
   275 82A4			@exit
   276 					.ifdef @new
   277 					lda <@VarData
   278 					sta :ztmp
   279 					lda >@VarData
   280 					ldy #@VarDataSize-1
   281 					jmp @FreeMem
   282 					els
   283 82A4 60				rts						; ret
   284 					eif
   285 				.endl
   286 				.endl							; overload
   287
   288 82A5			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   289 82A5 8D 9E 87			sta COLOR
   290
   291 				; -------------------  ASM Block 00000074  -------------------
   292
   293 82A8 A9 00		    lda #0
   294 82AA 8D 04 FF		    sta	DParameters
   295 82AD 8D 06 FF		    sta DParameters+2
   296 82B0 8D 07 FF		    sta DParameters+3
   297 82B3 8D 08 FF		    sta DParameters+4
   298 82B6 AD 9E 87		    lda color
   299 82B9 8D 05 FF		    sta DParameters+1
   300 82BC 20 03 82		    @SendMessage 				
   301 82BF 05 01			.byte 	5,1
   302
   303 				; ------------------------------------------------------------
   304
   305 = 879E			COLOR	= DATAORIGIN+$002E
   306
   307 = 879E			@VarData	= COLOR
   308 = 0001			@VarDataSize	= 1
   309
   310 82C1			@exit
   311 					.ifdef @new
   312 					lda <@VarData
   313 					sta :ztmp
   314 					lda >@VarData
   315 					ldy #@VarDataSize-1
   316 					jmp @FreeMem
   317 					els
   318 82C1 60				rts						; ret
   319 					eif
   320 				.endl
   321
   322 82C2			.local	LINETO						; PROCEDURE
   323
   324 				; -------------------  ASM Block 00000078  -------------------
   325
   326 82C2 AD 95 87 8D 04 FF +         mwa CurrentX DParameters
   327 82CE AD 97 87 8D 06 FF +         mwa CurrentY DParameters+2
   328 82DA AD 9F 87 8D 08 FF +         mwa x DParameters+4
   329 82E6 AD A1 87 8D 0A FF +         mwa y DParameters+6
   330 82F2 20 03 82		        @SendMessage 				
   331 82F5 05 02		        .byte 	5,2
   332 				    
   333 				; optimize OK (graph_neo.inc), line = 127
   334
   335 82F7 AD 9F 87			lda X
   336 82FA 8D 95 87			sta CURRENTX
   337 82FD AD A0 87			lda X+1
   338 8300 8D 96 87			sta CURRENTX+1
   339
   340 				; optimize OK (graph_neo.inc), line = 128
   341
   342 8303 AD A1 87			lda Y
   343 8306 8D 97 87			sta CURRENTY
   344 8309 AD A2 87			lda Y+1
   345 830C 8D 98 87			sta CURRENTY+1
   346
   347 				; ------------------------------------------------------------
   348
   349 = 879F			X	= DATAORIGIN+$002F
   350 = 87A1			Y	= DATAORIGIN+$0031
   351
   352 = 879F			@VarData	= X
   353 = 0004			@VarDataSize	= 4
   354
   355 830F			@exit
   356 					.ifdef @new
   357 					lda <@VarData
   358 					sta :ztmp
   359 					lda >@VarData
   360 					ldy #@VarDataSize-1
   361 					jmp @FreeMem
   362 					els
   363 830F 60				rts						; ret
   364 					eif
   365 				.endl
   366
   367 8310			.local	MOVETO						; PROCEDURE | ASSEMBLER
   368
   369 				; -------------------  ASM Block 00000080  -------------------
   370
   371 8310 AD A6 87			lda y+1
   372 8313 10 08			bpl _0
   373
   374 8315 A9 00			lda #0
   375 8317 8D A5 87			sta y
   376 831A 8D A6 87			sta y+1
   377 831D			_0
   378 831D AD A4 87			lda x+1
   379 8320 10 08			bpl _1
   380
   381 8322 A9 00			lda #0
   382 8324 8D A3 87			sta x
   383 8327 8D A4 87			sta x+1
   384 832A			_1
   385 832A AD A6 87 CD 73 87 + 	cpw y main.system.ScreenHeight
   386 8338 90 11			bcc _2
   387
   388 833A 38 AD 72 87 E9 01 + 	sbw main.system.ScreenHeight #1 y
   389 834B			_2
   390 834B AD A4 87 CD 71 87 + 	cpw x main.system.ScreenWidth
   391 8359 90 11			bcc _3
   392
   393 835B 38 AD 70 87 E9 01 + 	sbw main.system.ScreenWidth #1 x
   394 836C			_3
   395 836C AD A3 87 8D 95 87 + 	mwa x CurrentX
   396 8378 AD A5 87 8D 97 87 + 	mwa y CurrentY
   397
   398
   399 				; ------------------------------------------------------------
   400
   401 = 87A3			X	= DATAORIGIN+$0033
   402 = 87A5			Y	= DATAORIGIN+$0035
   403
   404 = 87A3			@VarData	= X
   405 = 0004			@VarDataSize	= 4
   406
   407 8384			@exit
   408 					.ifdef @new
   409 					lda <@VarData
   410 					sta :ztmp
   411 					lda >@VarData
   412 					ldy #@VarDataSize-1
   413 					jmp @FreeMem
   414 					els
   415 8384 60				rts						; ret
   416 					eif
   417 				.endl
   418
   419 				; ------------------------------------------------------------
   420
   421 = 0080			CURRENTDRIVER	= $80
   422 = 0000			DETECT	= $00
   423 = 0001			CGA	= $01
   424 = 0002			MCGA	= $02
   425 = 0003			EGA	= $03
   426 = 0004			EGA64	= $04
   427 = 0005			EGAMONO	= $05
   428 = 0006			LOWRES	= $06
   429 = 0007			HERCMONO	= $07
   430 = 0009			VGA	= $09
   431 = 000A			VESA	= $0A
   432 = 000B			D1BIT	= $0B
   433 = 000C			D2BIT	= $0C
   434 = 000D			D4BIT	= $0D
   435 = 000E			D6BIT	= $0E
   436 = 000F			D8BIT	= $0F
   437 = 0010			D12BIT	= $10
   438 = 0018			M640X400	= $18
   439 = 0018			M640X480	= $18
   440 = 0001			GROK	= $01
   441 = 00FF			GRNOINITGRAPH	= $FF
   442 = 00FE			GRNOTDETECTED	= $FE
   443 = 00FD			GRFILENOTFOUND	= $FD
   444 = 00FC			GRINVALIDDRIVER	= $FC
   445 = 00FB			GRNOLOADMEM	= $FB
   446 = 00FA			GRNOSCANMEM	= $FA
   447 = 00F9			GRNOFLOODMEM	= $F9
   448 = 00F8			GRFONTNOTFOUND	= $F8
   449 = 00F7			GRNOFONTMEM	= $F7
   450 = 00F6			GRINVALIDMODE	= $F6
   451 = 00F5			GRERROR	= $F5
   452 = 00F4			GRIOERROR	= $F4
   453 = 00F3			GRINVALIDFONT	= $F3
   454 = 00F2			GRINVALIDFONTNUM	= $F2
   455 = 00EE			GRINVALIDVERSION	= $EE
   456 = 0000			CGAC0	= $00
   457 = 0001			CGAC1	= $01
   458 = 0002			CGAC2	= $02
   459 = 0003			CGAC3	= $03
   460 = 0004			CGAHI	= $04
   461 = 0000			MCGAC0	= $00
   462 = 0001			MCGAC1	= $01
   463 = 0002			MCGAC2	= $02
   464 = 0003			MCGAC3	= $03
   465 = 0004			MCGAMED	= $04
   466 = 0005			MCGAHI	= $05
   467 = 0000			EGALO	= $00
   468 = 0001			EGAHI	= $01
   469 = 0000			EGA64LO	= $00
   470 = 0001			EGA64HI	= $01
   471 = 0003			EGAMONOHI	= $03
   472 = 000A			VGALO	= $0A
   473 = 001F			VGAMED	= $1F
   474 = 0018			VGAHI	= $18
   475 = 877C			WIN_LEFT	= DATAORIGIN+$000C
   476 = 877E			WIN_RIGHT	= DATAORIGIN+$000E
   477 = 8780			WIN_TOP	= DATAORIGIN+$0010
   478 = 8782			WIN_BOTTOM	= DATAORIGIN+$0012
   479 = 8784			GRAPHRESULT	= DATAORIGIN+$0014
   480 = 8785			GETCOLOR	= DATAORIGIN+$0015
   481 = 8786			VIDEORAM	= DATAORIGIN+$0016
   482 = 8788			adr.LASTARCCOORDS	= DATAORIGIN+$0018	; [12] RECORD
   483 8385			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   484 = 8788			LASTARCCOORDS.X	= DATAORIGIN+$0018
   485 = 878A			LASTARCCOORDS.Y	= DATAORIGIN+$001A
   486 = 878C			LASTARCCOORDS.XSTART	= DATAORIGIN+$001C
   487 = 878E			LASTARCCOORDS.YSTART	= DATAORIGIN+$001E
   488 = 8790			LASTARCCOORDS.XEND	= DATAORIGIN+$0020
   489 = 8792			LASTARCCOORDS.YEND	= DATAORIGIN+$0022
   490 = 8794			SCANLINE_WIDTH	= DATAORIGIN+$0024
   491 = 8795			CURRENTX	= DATAORIGIN+$0025
   492 = 8797			CURRENTY	= DATAORIGIN+$0027
   493 = 8799			LINEX	= DATAORIGIN+$0029
   494 = 879B			LINEY	= DATAORIGIN+$002B
   495
   496 = 8385 88 87		LASTARCCOORDS
   496 				.endl							; UNIT GRAPH
   497
   498 8387			.local	DRAGON						; PROCEDURE
   499 					.ifdef @VarData
   500 8387 A9 AC		@new	lda <@VarData
   501 8389 85 12			sta :ztmp
   502 838B A9 87			lda >@VarData
   503 838D A0 10			ldy #@VarDataSize-1
   504 838F 20 C6 81			jsr @AllocMem
   505 					eif
   506
   507 				; ------------------------------------------------------------
   508
   509 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   510 				; as Pointer
   511 8392 B5 16			lda :STACKORIGIN,x
   512 8394 8D AC 87			sta N
   513 8397 CA				dex
   514 8398 30 53			jmi @main
   515
   516 				; ------------------------------------------------------------
   517
   518 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   519 				; as Pointer
   520 839A B5 16			lda :STACKORIGIN,x
   521 839C 8D AD 87			sta A
   522 839F CA				dex
   523 83A0 30 4B			jmi @main
   524
   525 				; ------------------------------------------------------------
   526
   527 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   528 				; as Pointer
   529 83A2 B5 16			lda :STACKORIGIN,x
   530 83A4 8D AE 87			sta T
   531 83A7 CA				dex
   532 83A8 30 43			jmi @main
   533
   534 				; ------------------------------------------------------------
   535
   536 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   537 				; as Pointer
   538 83AA B5 16			lda :STACKORIGIN,x
   539 83AC 8D AF 87			sta D
   540 83AF B5 26			lda :STACKORIGIN+STACKWIDTH,x
   541 83B1 8D B0 87			sta D+1
   542 83B4 B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   543 83B6 8D B1 87			sta D+2
   544 83B9 B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   545 83BB 8D B2 87			sta D+3
   546 83BE CA				dex
   547 83BF 30 2C			jmi @main
   548
   549 				; ------------------------------------------------------------
   550
   551 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   552 				; as Pointer
   553 83C1 B5 16			lda :STACKORIGIN,x
   554 83C3 8D B3 87			sta X
   555 83C6 B5 26			lda :STACKORIGIN+STACKWIDTH,x
   556 83C8 8D B4 87			sta X+1
   557 83CB B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   558 83CD 8D B5 87			sta X+2
   559 83D0 B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   560 83D2 8D B6 87			sta X+3
   561 83D5 CA				dex
   562 83D6 30 15			jmi @main
   563
   564 				; ------------------------------------------------------------
   565
   566 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   567 				; as Pointer
   568 83D8 B5 16			lda :STACKORIGIN,x
   569 83DA 8D B7 87			sta Y
   570 83DD B5 26			lda :STACKORIGIN+STACKWIDTH,x
   571 83DF 8D B8 87			sta Y+1
   572 83E2 B5 36			lda :STACKORIGIN+STACKWIDTH*2,x
   573 83E4 8D B9 87			sta Y+2
   574 83E7 B5 46			lda :STACKORIGIN+STACKWIDTH*3,x
   575 83E9 8D BA 87			sta Y+3
   576 83EC CA				dex
   577 83ED			@main
   578
   579 				; optimize OK (dragon.pas), line = 18
   580
   581 83ED A9 01			lda #$01
   582 83EF CD AC 87			cmp N
   583 83F2 B0 03 4C 5C 85		jcc l_013A
   584
   585 				; optimize OK (dragon.pas), line = 20
   586
   587 83F7 AD AB 87			lda C
   588 83FA 29 0F			and #$0F
   589 83FC 20 A5 82			jsr GRAPH.SETCOLOR
   590
   591 				; optimize OK (dragon.pas), line = 21
   592
   593 83FF AD B7 87			lda Y
   594 8402 18 69 80			add #$80
   595 8405 85 06			sta @REAL_TRUNC.A
   596 8407 AD B8 87			lda Y+1
   597 840A 69 00			adc #$00
   598 840C 85 07			sta @REAL_TRUNC.A+1
   599 840E AD B9 87			lda Y+2
   600 8411 69 00			adc #$00
   601 8413 85 08			sta @REAL_TRUNC.A+2
   602 8415 AD BA 87			lda Y+3
   603 8418 69 00			adc #$00
   604 841A 85 09			sta @REAL_TRUNC.A+3
   605 841C 20 92 81			jsr @REAL_TRUNC
   606 841F A5 06			lda :eax
   607 8421 85 1F			sta :STACKORIGIN+9
   608 8423 A5 07			lda :eax+1
   609 8425 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   610 8427 AD B3 87			lda X
   611 842A 18 69 80			add #$80
   612 842D 85 06			sta @REAL_TRUNC.A
   613 842F AD B4 87			lda X+1
   614 8432 69 00			adc #$00
   615 8434 85 07			sta @REAL_TRUNC.A+1
   616 8436 AD B5 87			lda X+2
   617 8439 69 00			adc #$00
   618 843B 85 08			sta @REAL_TRUNC.A+2
   619 843D AD B6 87			lda X+3
   620 8440 69 00			adc #$00
   621 8442 85 09			sta @REAL_TRUNC.A+3
   622 8444 20 92 81			jsr @REAL_TRUNC
   623 8447 A5 06			lda :eax
   624 8449 8D A3 87			sta GRAPH.MOVETO.X
   625 844C A5 07			lda :eax+1
   626 844E 8D A4 87			sta GRAPH.MOVETO.X+1
   627 8451 A5 1F			lda :STACKORIGIN+9
   628 8453 8D A5 87			sta GRAPH.MOVETO.Y
   629 8456 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   630 8458 8D A6 87			sta GRAPH.MOVETO.Y+1
   631 845B 20 10 83			jsr GRAPH.MOVETO
   632
   633 				; optimize OK (dragon.pas), line = 22
   634
   635 845E AD AD 87			lda A
   636 8461 0A				asl @
   637 8462 0A				asl @
   638 8463 A8				tay
   639 8464 B9 03 80			lda adr._SIN,y
   640 8467 85 0E			sta @REAL_MUL.B
   641 8469 B9 04 80			lda adr._SIN+1,y
   642 846C 85 0F			sta @REAL_MUL.B+1
   643 846E B9 05 80			lda adr._SIN+2,y
   644 8471 85 10			sta @REAL_MUL.B+2
   645 8473 B9 06 80			lda adr._SIN+3,y
   646 8476 85 11			sta @REAL_MUL.B+3
   647 8478 AD AF 87			lda D
   648 847B 85 06			sta @REAL_MUL.A
   649 847D AD B0 87			lda D+1
   650 8480 85 07			sta @REAL_MUL.A+1
   651 8482 AD B1 87			lda D+2
   652 8485 85 08			sta @REAL_MUL.A+2
   653 8487 AD B2 87			lda D+3
   654 848A 85 09			sta @REAL_MUL.A+3
   655 848C 20 9D 80			jsr @REAL_MUL
   656 848F AD B7 87			lda Y
   657 8492 18 65 06			add :eax
   658 8495 85 1F			sta :STACKORIGIN+9
   659 8497 AD B8 87			lda Y+1
   660 849A 65 07			adc :eax+1
   661 849C 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   662 849E AD B9 87			lda Y+2
   663 84A1 65 08			adc :eax+2
   664 84A3 85 3F			sta :STACKORIGIN+STACKWIDTH*2+9
   665 84A5 AD BA 87			lda Y+3
   666 84A8 65 09			adc :eax+3
   667 84AA 85 4F			sta :STACKORIGIN+STACKWIDTH*3+9
   668 84AC A5 1F			lda :STACKORIGIN+9
   669 84AE 18 69 80			add #$80
   670 84B1 85 06			sta @REAL_TRUNC.A
   671 84B3 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   672 84B5 69 00			adc #$00
   673 84B7 85 07			sta @REAL_TRUNC.A+1
   674 84B9 A5 3F			lda :STACKORIGIN+STACKWIDTH*2+9
   675 84BB 69 00			adc #$00
   676 84BD 85 08			sta @REAL_TRUNC.A+2
   677 84BF A5 4F			lda :STACKORIGIN+STACKWIDTH*3+9
   678 84C1 69 00			adc #$00
   679 84C3 85 09			sta @REAL_TRUNC.A+3
   680 84C5 20 92 81			jsr @REAL_TRUNC
   681 84C8 A5 06			lda :eax
   682 84CA 85 1F			sta :STACKORIGIN+9
   683 84CC A5 07			lda :eax+1
   684 84CE 85 2F			sta :STACKORIGIN+STACKWIDTH+9
   685 84D0 A5 08			lda :eax+2
   686 84D2 85 3F			sta :STACKORIGIN+STACKWIDTH*2+9
   687 84D4 A5 09			lda :eax+3
   688 84D6 85 4F			sta :STACKORIGIN+STACKWIDTH*3+9
   689 84D8 AD AD 87			lda A
   690 84DB 0A				asl @
   691 84DC 0A				asl @
   692 84DD A8				tay
   693 84DE B9 23 80			lda adr._COS,y
   694 84E1 85 0E			sta @REAL_MUL.B
   695 84E3 B9 24 80			lda adr._COS+1,y
   696 84E6 85 0F			sta @REAL_MUL.B+1
   697 84E8 B9 25 80			lda adr._COS+2,y
   698 84EB 85 10			sta @REAL_MUL.B+2
   699 84ED B9 26 80			lda adr._COS+3,y
   700 84F0 85 11			sta @REAL_MUL.B+3
   701 84F2 AD AF 87			lda D
   702 84F5 85 06			sta @REAL_MUL.A
   703 84F7 AD B0 87			lda D+1
   704 84FA 85 07			sta @REAL_MUL.A+1
   705 84FC AD B1 87			lda D+2
   706 84FF 85 08			sta @REAL_MUL.A+2
   707 8501 AD B2 87			lda D+3
   708 8504 85 09			sta @REAL_MUL.A+3
   709 8506 20 9D 80			jsr @REAL_MUL
   710 8509 AD B3 87			lda X
   711 850C 18 65 06			add :eax
   712 850F 85 20			sta :STACKORIGIN+10
   713 8511 AD B4 87			lda X+1
   714 8514 65 07			adc :eax+1
   715 8516 85 30			sta :STACKORIGIN+STACKWIDTH+10
   716 8518 AD B5 87			lda X+2
   717 851B 65 08			adc :eax+2
   718 851D 85 40			sta :STACKORIGIN+STACKWIDTH*2+10
   719 851F AD B6 87			lda X+3
   720 8522 65 09			adc :eax+3
   721 8524 85 50			sta :STACKORIGIN+STACKWIDTH*3+10
   722 8526 A5 20			lda :STACKORIGIN+10
   723 8528 18 69 80			add #$80
   724 852B 85 06			sta @REAL_TRUNC.A
   725 852D A5 30			lda :STACKORIGIN+STACKWIDTH+10
   726 852F 69 00			adc #$00
   727 8531 85 07			sta @REAL_TRUNC.A+1
   728 8533 A5 40			lda :STACKORIGIN+STACKWIDTH*2+10
   729 8535 69 00			adc #$00
   730 8537 85 08			sta @REAL_TRUNC.A+2
   731 8539 A5 50			lda :STACKORIGIN+STACKWIDTH*3+10
   732 853B 69 00			adc #$00
   733 853D 85 09			sta @REAL_TRUNC.A+3
   734 853F 20 92 81			jsr @REAL_TRUNC
   735 8542 A5 06			lda :eax
   736 8544 8D 9F 87			sta GRAPH.LINETO.X
   737 8547 A5 07			lda :eax+1
   738 8549 8D A0 87			sta GRAPH.LINETO.X+1
   739 854C A5 1F			lda :STACKORIGIN+9
   740 854E 8D A1 87			sta GRAPH.LINETO.Y
   741 8551 A5 2F			lda :STACKORIGIN+STACKWIDTH+9
   742 8553 8D A2 87			sta GRAPH.LINETO.Y+1
   743 8556 20 C2 82			jsr GRAPH.LINETO
   744 8559 4C 0C 87			jmp @exit
   745 855C			l_013A
   746
   747 				; optimize OK (dragon.pas), line = 26
   748
   749 855C A9 B5			lda #$B5
   750 855E 85 0E			sta @REAL_MUL.B
   751 8560 A9 00			lda #$00
   752 8562 85 0F			sta @REAL_MUL.B+1
   753 8564 85 10			sta @REAL_MUL.B+2
   754 8566 85 11			sta @REAL_MUL.B+3
   755 8568 AD AF 87			lda D
   756 856B 85 06			sta @REAL_MUL.A
   757 856D AD B0 87			lda D+1
   758 8570 85 07			sta @REAL_MUL.A+1
   759 8572 AD B1 87			lda D+2
   760 8575 85 08			sta @REAL_MUL.A+2
   761 8577 AD B2 87			lda D+3
   762 857A 85 09			sta @REAL_MUL.A+3
   763 857C 20 9D 80			jsr @REAL_MUL
   764 857F A5 06			lda :eax
   765 8581 8D AF 87			sta D
   766 8584 A5 07			lda :eax+1
   767 8586 8D B0 87			sta D+1
   768 8589 A5 08			lda :eax+2
   769 858B 8D B1 87			sta D+2
   770 858E A5 09			lda :eax+3
   771 8590 8D B2 87			sta D+3
   772
   773 				; optimize OK (dragon.pas), line = 27
   774
   775 8593 AD AD 87			lda A
   776 8596 38 ED AE 87			sub T
   777 859A 29 07			and #$07
   778 859C 8D BB 87			sta A1
   779
   780 				; optimize OK (dragon.pas), line = 28
   781
   782 859F AD AD 87			lda A
   783 85A2 18 6D AE 87			add T
   784 85A6 29 07			and #$07
   785 85A8 8D BC 87			sta A2
   786
   787 				; optimize OK (dragon.pas), line = 29
   788
   789 85AB AD AB 87			lda C
   790 85AE 18 69 03			add #$03
   791 85B1 8D AB 87			sta C
   792
   793 				; optimize FAIL ('DRAGON', dragon.pas), line = 30
   794
   795 85B4 E8				inx
   796 85B5 AD B7 87 95 16		mva Y :STACKORIGIN,x
   797 85BA AD B8 87 95 26		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   798 85BF AD B9 87 95 36		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   799 85C4 AD BA 87 95 46		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   800 85C9 E8				inx
   801 85CA AD B3 87 95 16		mva X :STACKORIGIN,x
   802 85CF AD B4 87 95 26		mva X+1 :STACKORIGIN+STACKWIDTH,x
   803 85D4 AD B5 87 95 36		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   804 85D9 AD B6 87 95 46		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   805 85DE E8				inx
   806 85DF AD AF 87 95 16		mva D :STACKORIGIN,x
   807 85E4 AD B0 87 95 26		mva D+1 :STACKORIGIN+STACKWIDTH,x
   808 85E9 AD B1 87 95 36		mva D+2 :STACKORIGIN+STACKWIDTH*2,x
   809 85EE AD B2 87 95 46		mva D+3 :STACKORIGIN+STACKWIDTH*3,x
   810 85F3 E8				inx
   811 85F4 A9 01 95 16			mva #$01 :STACKORIGIN,x
   812 85F8 E8				inx
   813 85F9 AD BB 87 95 16		mva A1 :STACKORIGIN,x
   814 85FE E8				inx
   815 85FF AD AC 87			lda N
   816 8602 38 E9 01			sub #$01
   817 8605 95 16			sta :STACKORIGIN,x
   818 8607 20 87 83			jsr DRAGON
   819
   820 				; optimize FAIL ('DRAGON', dragon.pas), line = 31
   821
   822 860A E8				inx
   823 860B AD B7 87 95 16		mva Y :STACKORIGIN,x
   824 8610 AD B8 87 95 26		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   825 8615 AD B9 87 95 36		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   826 861A AD BA 87 95 46		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   827 861F E8				inx
   828 8620 AD AF 87 95 16		mva D :STACKORIGIN,x
   829 8625 AD B0 87 95 26		mva D+1 :STACKORIGIN+STACKWIDTH,x
   830 862A AD B1 87 95 36		mva D+2 :STACKORIGIN+STACKWIDTH*2,x
   831 862F AD B2 87 95 46		mva D+3 :STACKORIGIN+STACKWIDTH*3,x
   832 8634 E8				inx
   833 8635 AD BB 87			lda A1
   834 8638 0A				asl @
   835 8639 0A				asl @
   836 863A A8				tay
   837 863B B9 03 80			lda adr._SIN,y
   838 863E 85 0E			sta @REAL_MUL.B
   839 8640 B9 04 80			lda adr._SIN+1,y
   840 8643 85 0F			sta @REAL_MUL.B+1
   841 8645 B9 05 80			lda adr._SIN+2,y
   842 8648 85 10			sta @REAL_MUL.B+2
   843 864A B9 06 80			lda adr._SIN+3,y
   844 864D 85 11			sta @REAL_MUL.B+3
   845 864F B5 15			lda :STACKORIGIN-1,x
   846 8651 85 06			sta @REAL_MUL.A
   847 8653 B5 25			lda :STACKORIGIN-1+STACKWIDTH,x
   848 8655 85 07			sta @REAL_MUL.A+1
   849 8657 B5 35			lda :STACKORIGIN-1+STACKWIDTH*2,x
   850 8659 85 08			sta @REAL_MUL.A+2
   851 865B B5 45			lda :STACKORIGIN-1+STACKWIDTH*3,x
   852 865D 85 09			sta @REAL_MUL.A+3
   853 865F 20 9D 80			jsr @REAL_MUL
   854 8662 A5 06			lda :eax
   855 8664 95 15			sta :STACKORIGIN-1,x
   856 8666 A5 07			lda :eax+1
   857 8668 95 25			sta :STACKORIGIN-1+STACKWIDTH,x
   858 866A A5 08			lda :eax+2
   859 866C 95 35			sta :STACKORIGIN-1+STACKWIDTH*2,x
   860 866E A5 09			lda :eax+3
   861 8670 95 45			sta :STACKORIGIN-1+STACKWIDTH*3,x
   862 8672 CA				dex
   863 8673 20 43 80			jsr addEAX_ECX
   864 8676 AD B3 87 95 16		mva X :STACKORIGIN,x
   865 867B AD B4 87 95 26		mva X+1 :STACKORIGIN+STACKWIDTH,x
   866 8680 AD B5 87 95 36		mva X+2 :STACKORIGIN+STACKWIDTH*2,x
   867 8685 AD B6 87 95 46		mva X+3 :STACKORIGIN+STACKWIDTH*3,x
   868 868A E8				inx
   869 868B AD AF 87 95 16		mva D :STACKORIGIN,x
   870 8690 AD B0 87 95 26		mva D+1 :STACKORIGIN+STACKWIDTH,x
   871 8695 AD B1 87 95 36		mva D+2 :STACKORIGIN+STACKWIDTH*2,x
   872 869A AD B2 87 95 46		mva D+3 :STACKORIGIN+STACKWIDTH*3,x
   873 869F E8				inx
   874 86A0 AD BB 87			lda A1
   875 86A3 0A				asl @
   876 86A4 0A				asl @
   877 86A5 A8				tay
   878 86A6 B9 23 80			lda adr._COS,y
   879 86A9 85 0E			sta @REAL_MUL.B
   880 86AB B9 24 80			lda adr._COS+1,y
   881 86AE 85 0F			sta @REAL_MUL.B+1
   882 86B0 B9 25 80			lda adr._COS+2,y
   883 86B3 85 10			sta @REAL_MUL.B+2
   884 86B5 B9 26 80			lda adr._COS+3,y
   885 86B8 85 11			sta @REAL_MUL.B+3
   886 86BA B5 15			lda :STACKORIGIN-1,x
   887 86BC 85 06			sta @REAL_MUL.A
   888 86BE B5 25			lda :STACKORIGIN-1+STACKWIDTH,x
   889 86C0 85 07			sta @REAL_MUL.A+1
   890 86C2 B5 35			lda :STACKORIGIN-1+STACKWIDTH*2,x
   891 86C4 85 08			sta @REAL_MUL.A+2
   892 86C6 B5 45			lda :STACKORIGIN-1+STACKWIDTH*3,x
   893 86C8 85 09			sta @REAL_MUL.A+3
   894 86CA 20 9D 80			jsr @REAL_MUL
   895 86CD A5 06			lda :eax
   896 86CF 95 15			sta :STACKORIGIN-1,x
   897 86D1 A5 07			lda :eax+1
   898 86D3 95 25			sta :STACKORIGIN-1+STACKWIDTH,x
   899 86D5 A5 08			lda :eax+2
   900 86D7 95 35			sta :STACKORIGIN-1+STACKWIDTH*2,x
   901 86D9 A5 09			lda :eax+3
   902 86DB 95 45			sta :STACKORIGIN-1+STACKWIDTH*3,x
   903 86DD CA				dex
   904 86DE 20 43 80			jsr addEAX_ECX
   905 86E1 AD AF 87 95 16		mva D :STACKORIGIN,x
   906 86E6 AD B0 87 95 26		mva D+1 :STACKORIGIN+STACKWIDTH,x
   907 86EB AD B1 87 95 36		mva D+2 :STACKORIGIN+STACKWIDTH*2,x
   908 86F0 AD B2 87 95 46		mva D+3 :STACKORIGIN+STACKWIDTH*3,x
   909 86F5 E8				inx
   910 86F6 A9 FF 95 16			mva #$FF :STACKORIGIN,x
   911 86FA E8				inx
   912 86FB AD BC 87 95 16		mva A2 :STACKORIGIN,x
   913 8700 E8				inx
   914 8701 AD AC 87			lda N
   915 8704 38 E9 01			sub #$01
   916 8707 95 16			sta :STACKORIGIN,x
   917 8709 20 87 83			jsr DRAGON
   918
   919 				; ------------------------------------------------------------
   920
   921 = 87AC			N	= DATAORIGIN+$003C
   922 = 87AD			A	= DATAORIGIN+$003D
   923 = 87AE			T	= DATAORIGIN+$003E
   924 = 87AF			D	= DATAORIGIN+$003F
   925 = 87B3			X	= DATAORIGIN+$0043
   926 = 87B7			Y	= DATAORIGIN+$0047
   927 = 87BB			A1	= DATAORIGIN+$004B
   928 = 87BC			A2	= DATAORIGIN+$004C
   929
   930 = 87AC			@VarData	= N
   931 = 0011			@VarDataSize	= 17
   932
   933 870C			@exit
   934 					.ifdef @new
   935 870C A9 AC			lda <@VarData
   936 870E 85 12			sta :ztmp
   937 8710 A9 87			lda >@VarData
   938 8712 A0 10			ldy #@VarDataSize-1
   939 8714 4C E5 81			jmp @FreeMem
   940 					els
   941 					rts						; ret
   942 					eif
   943 				.endl
   944 8717			l_0004
   945
   946 				; optimize OK (dragon.pas), line = 35
   947
   948 8717 A9 00			lda #$00
   949 8719 20 8A 82			jsr GRAPH.INITGRAPH.@0098
   950
   951 				; optimize OK (dragon.pas), line = 36
   952
   953 871C A9 00			lda #$00
   954 871E 8D AB 87			sta C
   955
   956 				; optimize FAIL ('DRAGON', dragon.pas), line = 37
   957
   958 8721 E8				inx
   959 8722 A9 00 95 16			mva #$00 :STACKORIGIN,x
   960 8726 A9 96 95 26			mva #$96 :STACKORIGIN+STACKWIDTH,x
   961 872A A9 00 95 36			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
   962 872E 95 46			sta :STACKORIGIN+STACKWIDTH*3,x
   963 8730 E8				inx
   964 8731 A9 00 95 16			mva #$00 :STACKORIGIN,x
   965 8735 A9 5A 95 26			mva #$5A :STACKORIGIN+STACKWIDTH,x
   966 8739 A9 00 95 36			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
   967 873D 95 46			sta :STACKORIGIN+STACKWIDTH*3,x
   968 873F E8				inx
   969 8740 A9 00 95 16			mva #$00 :STACKORIGIN,x
   970 8744 A9 B4 95 26			mva #$B4 :STACKORIGIN+STACKWIDTH,x
   971 8748 A9 00 95 36			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
   972 874C 95 46			sta :STACKORIGIN+STACKWIDTH*3,x
   973 874E E8				inx
   974 874F A9 01 95 16			mva #$01 :STACKORIGIN,x
   975 8753 E8				inx
   976 8754 A9 00 95 16			mva #$00 :STACKORIGIN,x
   977 8758 E8				inx
   978 8759 A9 0E 95 16			mva #$0E :STACKORIGIN,x
   979 875D 20 87 83			jsr DRAGON
   980
   981 				; --- RepeatUntilProlog
   982 8760			l_01DD
   983
   984 				; optimize FAIL ('CRT.KEYPRESSED', dragon.pas), line = 38
   985
   986 8760 20 6F 82			jsr CRT.KEYPRESSED
   987 8763 AD 7B 87			lda CRT.KEYPRESSED.RESULT
   988 8766 F0 F8			jeq l_01DD
   989
   990 				; ------------------------------------------------------------
   991
   992 = 00B5			S	= $B5
   993 = 8003			adr._SIN	= CODEORIGIN+$0000
   994 8768			.var _SIN	= adr._SIN .word
   995 = 8023			adr._COS	= CODEORIGIN+$0020
   996 8768			.var _COS	= adr._COS .word
   997 = 00B4			SEP	= $B4
   998 = 87A7			GD	= DATAORIGIN+$0037
   999 = 87A9			GM	= DATAORIGIN+$0039
  1000 = 87AB			C	= DATAORIGIN+$003B
  1001 8768			@exit
  1002
  1003 8768 A2 00		@halt	ldx #$00
  1004 876A 9A				txs
  1005
  1006 876B 60				rts
  1007
  1008 				; ------------------------------------------------------------
  1009
  1010 				; ------------------------------------------------------------
  1011
  1012 876C			.local	@DEFINES
  1013 876C			NEO
  1014 				.endl
  1015
  1016 876C			.local	@RESOURCE
  1017 				.endl
  1018
  1019 = 876C 03 80		_SIN
  1019 = 876E 23 80		_COS
  1019 				.endl							; MAIN
  1020
  1021 				; ------------------------------------------------------------
  1022 				; ------------------------------------------------------------
  1023
  1024 				.macro	UNITINITIALIZATION
  1025 				
  1026 					.ifdef MAIN.SYSTEM.@UnitInit
  1027 					jsr MAIN.SYSTEM.@UnitInit
  1028 					.fi
  1029 				
  1030 					.ifdef MAIN.CRT.@UnitInit
  1031 					jsr MAIN.CRT.@UnitInit
  1032 					.fi
  1033 				
  1034 					.ifdef MAIN.NEO6502.@UnitInit
  1035 					jsr MAIN.NEO6502.@UnitInit
  1036 					.fi
  1037 				
  1038 					.ifdef MAIN.TYPES.@UnitInit
  1039 					jsr MAIN.TYPES.@UnitInit
  1040 					.fi
  1041 				
  1042 					.ifdef MAIN.GRAPH.@UnitInit
  1043 					jsr MAIN.GRAPH.@UnitInit
  1044 					.fi
  1045 				.endm
  1046
  1047 				; ------------------------------------------------------------
  1048
  1049 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1050 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1051 					eif
  1052
  1053 					ift .SIZEOF(MAIN.CRT) > 0
  1054 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1054 				CRT: $826F..$827D
  1055 					eif
  1056
  1057 					ift .SIZEOF(MAIN.NEO6502) > 0
  1058 					.print 'NEO6502: ',MAIN.NEO6502,'..',MAIN.NEO6502+.SIZEOF(MAIN.NEO6502)-1
  1058 				NEO6502: $827E..$8289
  1059 					eif
  1060
  1061 					ift .SIZEOF(MAIN.TYPES) > 0
  1062 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1063 					eif
  1064
  1065 					ift .SIZEOF(MAIN.GRAPH) > 0
  1066 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1066 				GRAPH: $828A..$8386
  1067 					eif
  1068
  1069 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1069 				CODE: $8003..$876B
  1070
  1071 				; ------------------------------------------------------------
  1072
  1073 = 8770				?adr = *
  1074 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  1075 					?adr = ?old_adr
  1076 					eif
  1077
  1078 					org ?adr
  1079 = 8770				?old_adr = *
  1080
  1081 8770			DATAORIGIN
  1082 8770 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17
  1083
  1084 = 0013			VARINITSIZE	= *-DATAORIGIN
  1085 = 004D			VARDATASIZE	= 77
  1086
  1087 = 87BD			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1088
  1089 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1089 				DATA: $8770..$87BD
  1090
  1091 				; ------------------------------------------------------------
  1092
  1093 				.macro	STATICDATA
  1094 				.by  $00 $00 $00 $00 $B5 $00 $00 $00  $00 $01 $00 $00 $B5 $00 $00 $00  $00 $00 $00 $00 $4B $FF $FF $FF
  1095 				.by  $00 $FF $FF $FF $4B $FF $FF $FF  $00 $01 $00 $00 $B5 $00 $00 $00  $00 $00 $00 $00 $4B $FF $FF $FF
  1096 				.by  $00 $FF $FF $FF $4B $FF $FF $FF  $00 $00 $00 $00 $B5 $00 $00 $00
  1097 				.endm
  1098
  1099 					end
