mads 2.1.7 build 4 (2 Oct 23)
    53 				  opt l+
   105
   106 				.print 'ZPAGE: ',zpage,'..',zpend-1
   106 				ZPAGE: $0000..$0055
   107
   108 				.print 'RTBUF: ',@buf,'..',@buf+255
   108 				RTBUF: $0200..$02FF
   109
   110 				.print 'RTLIB: ',RTLIB,'..',*-1
   110 				RTLIB: $8003..$80BD
   111
   112 				; ------------------------------------------------------------
   113
   114 80BE			START
   115 80BE BA				tsx
   116 80BF 8E B4 83			stx MAIN.@halt+1
   117
   118 = 002A			VLEN	= VARDATASIZE-VARINITSIZE
   119 = 83C9			VADR	= DATAORIGIN+VARINITSIZE
   120
   121 					ift (VLEN > 0) && (VLEN <= 256)
   122 80C2 A2 D6			ldx #256-VLEN
   123 80C4 A9 00			lda #$00
   124 80C6 9D F3 82 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>256
   126 					m@init
   127 					eif
   128
   129 				.ifdef psptr
   130 80CC A9 F3 85 00 A9 83 + 	mwa #PROGRAMSTACK psptr
   131 				.fi
   132
   133 80D4 A2 00			ldx #$00
   134 80D6 86 02			stx bp						; BP = 0
   135
   136 80D8 CA				dex						; X = 255
   137
   138 80D9				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: diamond.a65]
Source: diamond.a65
   139
   140 80D9			.local	MAIN						; PROCEDURE
   141
   142 80D9 4C 57 83			jmp l_0004
   143
   144 				; ------------------------------------------------------------
   145
   146 80DC			.local	SYSTEM						; UNIT
   147
   148 				; ------------------------------------------------------------
   149
   150 = 0648			M_PI_2	= $0648
   151 = 0192			D_PI_2	= $0192
   152 = 0004			D_PI_180	= $04
   153 = 0001			NEO_CURSOR_LEFT	= $01
   154 = 0004			NEO_CURSOR_RIGHT	= $04
   155 = 0005			NEO_INSERT	= $05
   156 = 0006			NEO_PAGE_DOWN	= $06
   157 = 0007			NEO_END	= $07
   158 = 0008			NEO_BACKSPACE	= $08
   159 = 0009			NEO_HTAB	= $09
   160 = 000A			NEO_LINE_FEED	= $0A
   161 = 000C			NEO_CLEAR_SCREEN	= $0C
   162 = 000D			NEO_ENTER	= $0D
   163 = 0012			NEO_PAGE_UP	= $12
   164 = 0013			NEO_CURSOR_DOWN	= $13
   165 = 0014			NEO_CURSOR_HOME	= $14
   166 = 0016			NEO_VTAB	= $16
   167 = 0017			NEO_CURSOR_UP	= $17
   168 = 0018			NEO_CURSOR_REV	= $18
   169 = 001A			NEO_DELETE	= $1A
   170 = 001B			NEO_ESCAPE	= $1B
   171 = 0080			NEO_COLOR_BLACK	= $80
   172 = 0081			NEO_COLOR_RED	= $81
   173 = 0082			NEO_COLOR_GREEN	= $82
   174 = 0083			NEO_COLOR_YELLOW	= $83
   175 = 0084			NEO_COLOR_BLUE	= $84
   176 = 0085			NEO_COLOR_MAGENTA	= $85
   177 = 0086			NEO_COLOR_CYAN	= $86
   178 = 0087			NEO_COLOR_WHITE	= $87
   179 = 0088			NEO_COLOR_ALT_BLACK	= $88
   180 = 0089			NEO_COLOR_DARK_GREY	= $89
   181 = 008A			NEO_COLOR_DARK_GREEN	= $8A
   182 = 008B			NEO_COLOR_ORANGE	= $8B
   183 = 008C			NEO_COLOR_DARK_ORANGE	= $8C
   184 = 008D			NEO_COLOR_BROWN	= $8D
   185 = 008E			NEO_COLOR_PINK	= $8E
   186 = 008F			NEO_COLOR_LIGHT_GREY	= $8F
   187 = 0004			FMOPENREAD	= $04
   188 = 0008			FMOPENWRITE	= $08
   189 = 0009			FMOPENAPPEND	= $09
   190 = 000C			FMOPENREADWRITE	= $0C
   191 = 83B7			SCREENWIDTH	= DATAORIGIN+$0000
   192 = 83B9			SCREENHEIGHT	= DATAORIGIN+$0002
   193 = 83BB			DATESEPARATOR	= DATAORIGIN+$0004
   194 = 83BC			FILEMODE	= DATAORIGIN+$0005
   195 = 83BD			GRAPHMODE	= DATAORIGIN+$0006
   196 = 83BE			IORESULT	= DATAORIGIN+$0007
   197 = 83BF			EOLN	= DATAORIGIN+$0008
   198 = 83C0			RNDSEED	= DATAORIGIN+$0009
   199
   200 				.endl							; UNIT SYSTEM
   201
   202 				; ------------------------------------------------------------
   203
   204 80DC			.local	TYPES						; UNIT
   205
   206 				; ------------------------------------------------------------
   207
   208 				.endl							; UNIT TYPES
   209
   210 				; ------------------------------------------------------------
   211
   212 80DC			.local	GRAPH						; UNIT
   213
   214 80DC			.local	INITGRAPH					; PROCEDURE | OVERLOAD
   215 80DC			.local	@0096
   216 80DC 8D E3 83			sta MODE
   217
   218 				; optimize OK (graph_neo.inc), line = 9
   219
   220 80DF A9 40			lda #$40
   221 80E1 8D B7 83			sta SYSTEM.SCREENWIDTH
   222 80E4 A9 01			lda #$01
   223 80E6 8D B8 83			sta SYSTEM.SCREENWIDTH+1
   224
   225 				; optimize OK (graph_neo.inc), line = 10
   226
   227 80E9 A9 F0			lda #$F0
   228 80EB 8D B9 83			sta SYSTEM.SCREENHEIGHT
   229 80EE A9 00			lda #$00
   230 80F0 8D BA 83			sta SYSTEM.SCREENHEIGHT+1
   231
   232 				; -------------------  ASM Block 00000059  -------------------
   233
   234 80F3 20 B8 80			    @ClrScr
   235 					
   236 				; ------------------------------------------------------------
   237
   238 = 83E3			MODE	= DATAORIGIN+$002C
   239
   240 = 83E3			@VarData	= MODE
   241 = 0001			@VarDataSize	= 1
   242
   243 80F6			@exit
   244 					.ifdef @new
   245 					lda <@VarData
   246 					sta :ztmp
   247 					lda >@VarData
   248 					ldy #@VarDataSize-1
   249 					jmp @FreeMem
   250 					els
   251 80F6 60				rts						; ret
   252 					eif
   253 				.endl
   254 				.endl							; overload
   255
   256 80F7			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   257 80F7 8D E4 83			sta COLOR
   258
   259 				; -------------------  ASM Block 00000061  -------------------
   260
   261 80FA 9C 04 FF		    stz	DParameters
   262 80FD 9C 06 FF		    stz DParameters+2
   263 8100 9C 07 FF		    stz DParameters+3
   264 8103 9C 08 FF		    stz DParameters+4
   265 8106 AD E4 83		    lda color
   266 8109 8D 05 FF		    sta DParameters+1
   267 810C 20 70 80		    @SendMessage 				
   268 810F 05 01			.byte 	5,1
   269
   270 				; ------------------------------------------------------------
   271
   272 = 83E4			COLOR	= DATAORIGIN+$002D
   273
   274 = 83E4			@VarData	= COLOR
   275 = 0001			@VarDataSize	= 1
   276
   277 8111			@exit
   278 					.ifdef @new
   279 					lda <@VarData
   280 					sta :ztmp
   281 					lda >@VarData
   282 					ldy #@VarDataSize-1
   283 					jmp @FreeMem
   284 					els
   285 8111 60				rts						; ret
   286 					eif
   287 				.endl
   288
   289 8112			.local	LINETO						; PROCEDURE
   290
   291 				; -------------------  ASM Block 00000065  -------------------
   292
   293 8112 AD DB 83 8D 04 FF +         mwa CurrentX DParameters
   294 811E AD DD 83 8D 06 FF +         mwa CurrentY DParameters+2
   295 812A AD E5 83 8D 08 FF +         mwa x DParameters+4
   296 8136 AD E7 83 8D 0A FF +         mwa y DParameters+6
   297 8142 20 70 80		        @SendMessage 				
   298 8145 05 02		        .byte 	5,2
   299 				    
   300 				; optimize OK (graph_neo.inc), line = 126
   301
   302 8147 AD E5 83			lda X
   303 814A 8D DB 83			sta CURRENTX
   304 814D AD E6 83			lda X+1
   305 8150 8D DC 83			sta CURRENTX+1
   306
   307 				; optimize OK (graph_neo.inc), line = 127
   308
   309 8153 AD E7 83			lda Y
   310 8156 8D DD 83			sta CURRENTY
   311 8159 AD E8 83			lda Y+1
   312 815C 8D DE 83			sta CURRENTY+1
   313
   314 				; ------------------------------------------------------------
   315
   316 = 83E5			X	= DATAORIGIN+$002E
   317 = 83E7			Y	= DATAORIGIN+$0030
   318
   319 = 83E5			@VarData	= X
   320 = 0004			@VarDataSize	= 4
   321
   322 815F			@exit
   323 					.ifdef @new
   324 					lda <@VarData
   325 					sta :ztmp
   326 					lda >@VarData
   327 					ldy #@VarDataSize-1
   328 					jmp @FreeMem
   329 					els
   330 815F 60				rts						; ret
   331 					eif
   332 				.endl
   333
   334 8160			.local	MOVETO						; PROCEDURE | ASSEMBLER
   335
   336 				; -------------------  ASM Block 00000067  -------------------
   337
   338 8160 AD EC 83			lda y+1
   339 8163 10 08			bpl _0
   340
   341 8165 A9 00			lda #0
   342 8167 8D EB 83			sta y
   343 816A 8D EC 83			sta y+1
   344 816D			_0
   345 816D AD EA 83			lda x+1
   346 8170 10 08			bpl _1
   347
   348 8172 A9 00			lda #0
   349 8174 8D E9 83			sta x
   350 8177 8D EA 83			sta x+1
   351 817A			_1
   352 817A AD EC 83 CD BA 83 + 	cpw y main.system.ScreenHeight
   353 8188 90 11			bcc _2
   354
   355 818A 38 AD B9 83 E9 01 + 	sbw main.system.ScreenHeight #1 y
   356 819B			_2
   357 819B AD EA 83 CD B8 83 + 	cpw x main.system.ScreenWidth
   358 81A9 90 11			bcc _3
   359
   360 81AB 38 AD B7 83 E9 01 + 	sbw main.system.ScreenWidth #1 x
   361 81BC			_3
   362 81BC AD E9 83 8D DB 83 + 	mwa x CurrentX
   363 81C8 AD EB 83 8D DD 83 + 	mwa y CurrentY
   364
   365
   366 				; ------------------------------------------------------------
   367
   368 = 83E9			X	= DATAORIGIN+$0032
   369 = 83EB			Y	= DATAORIGIN+$0034
   370
   371 = 83E9			@VarData	= X
   372 = 0004			@VarDataSize	= 4
   373
   374 81D4			@exit
   375 					.ifdef @new
   376 					lda <@VarData
   377 					sta :ztmp
   378 					lda >@VarData
   379 					ldy #@VarDataSize-1
   380 					jmp @FreeMem
   381 					els
   382 81D4 60				rts						; ret
   383 					eif
   384 				.endl
   385
   386 				; ------------------------------------------------------------
   387
   388 = 0080			CURRENTDRIVER	= $80
   389 = 0000			DETECT	= $00
   390 = 0001			CGA	= $01
   391 = 0002			MCGA	= $02
   392 = 0003			EGA	= $03
   393 = 0004			EGA64	= $04
   394 = 0005			EGAMONO	= $05
   395 = 0006			LOWRES	= $06
   396 = 0007			HERCMONO	= $07
   397 = 0009			VGA	= $09
   398 = 000A			VESA	= $0A
   399 = 000B			D1BIT	= $0B
   400 = 000C			D2BIT	= $0C
   401 = 000D			D4BIT	= $0D
   402 = 000E			D6BIT	= $0E
   403 = 000F			D8BIT	= $0F
   404 = 0010			D12BIT	= $10
   405 = 0018			M640X400	= $18
   406 = 0018			M640X480	= $18
   407 = 0001			GROK	= $01
   408 = 00FF			GRNOINITGRAPH	= $FF
   409 = 00FE			GRNOTDETECTED	= $FE
   410 = 00FD			GRFILENOTFOUND	= $FD
   411 = 00FC			GRINVALIDDRIVER	= $FC
   412 = 00FB			GRNOLOADMEM	= $FB
   413 = 00FA			GRNOSCANMEM	= $FA
   414 = 00F9			GRNOFLOODMEM	= $F9
   415 = 00F8			GRFONTNOTFOUND	= $F8
   416 = 00F7			GRNOFONTMEM	= $F7
   417 = 00F6			GRINVALIDMODE	= $F6
   418 = 00F5			GRERROR	= $F5
   419 = 00F4			GRIOERROR	= $F4
   420 = 00F3			GRINVALIDFONT	= $F3
   421 = 00F2			GRINVALIDFONTNUM	= $F2
   422 = 00EE			GRINVALIDVERSION	= $EE
   423 = 0000			CGAC0	= $00
   424 = 0001			CGAC1	= $01
   425 = 0002			CGAC2	= $02
   426 = 0003			CGAC3	= $03
   427 = 0004			CGAHI	= $04
   428 = 0000			MCGAC0	= $00
   429 = 0001			MCGAC1	= $01
   430 = 0002			MCGAC2	= $02
   431 = 0003			MCGAC3	= $03
   432 = 0004			MCGAMED	= $04
   433 = 0005			MCGAHI	= $05
   434 = 0000			EGALO	= $00
   435 = 0001			EGAHI	= $01
   436 = 0000			EGA64LO	= $00
   437 = 0001			EGA64HI	= $01
   438 = 0003			EGAMONOHI	= $03
   439 = 000A			VGALO	= $0A
   440 = 001F			VGAMED	= $1F
   441 = 0018			VGAHI	= $18
   442 = 83C2			WIN_LEFT	= DATAORIGIN+$000B
   443 = 83C4			WIN_RIGHT	= DATAORIGIN+$000D
   444 = 83C6			WIN_TOP	= DATAORIGIN+$000F
   445 = 83C8			WIN_BOTTOM	= DATAORIGIN+$0011
   446 = 83CA			GRAPHRESULT	= DATAORIGIN+$0013
   447 = 83CB			GETCOLOR	= DATAORIGIN+$0014
   448 = 83CC			VIDEORAM	= DATAORIGIN+$0015
   449 = 83CE			adr.LASTARCCOORDS	= DATAORIGIN+$0017	; [12] RECORD
   450 81D5			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   451 = 83CE			LASTARCCOORDS.X	= DATAORIGIN+$0017
   452 = 83D0			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   453 = 83D2			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   454 = 83D4			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   455 = 83D6			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   456 = 83D8			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   457 = 83DA			SCANLINE_WIDTH	= DATAORIGIN+$0023
   458 = 83DB			CURRENTX	= DATAORIGIN+$0024
   459 = 83DD			CURRENTY	= DATAORIGIN+$0026
   460 = 83DF			LINEX	= DATAORIGIN+$0028
   461 = 83E1			LINEY	= DATAORIGIN+$002A
   462
   463 = 81D5 CE 83		LASTARCCOORDS
   463 				.endl							; UNIT GRAPH
   464
   465 				; ------------------------------------------------------------
   466
   467 81D7			.local	CRT						; UNIT
   468
   469 81D7			.local	CLRSCR						; PROCEDURE
   470
   471 				; -------------------  ASM Block 00000068  -------------------
   472
   473 81D7 20 70 80				@SendMessage
   474 81DA 02 0C				dta 2,12
   475 					
   476 81DC			@exit
   477 					.ifdef @new
   478 					lda <@VarData
   479 					sta :ztmp
   480 					lda >@VarData
   481 					ldy #@VarDataSize-1
   482 					jmp @FreeMem
   483 					els
   484 81DC 60				rts						; ret
   485 					eif
   486 				.endl
   487
   488 81DD			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   489
   490 				; -------------------  ASM Block 00000075  -------------------
   491
   492 81DD 20 70 80			@SendMessage
   493 81E0 02 02			dta 2,2
   494 81E2 20 A0 80			@WaitMessage
   495 81E5 AD 04 FF			lda DParameters
   496 81E8 8D ED 83			sta result
   497
   498 81EB			@exit
   499
   500 				; ------------------------------------------------------------
   501
   502 = 83ED			RESULT	= DATAORIGIN+$0036
   503 81EB 60				rts						; ret
   504 				.endl
   505
   506 				; ------------------------------------------------------------
   507
   508 = 0000			BW40	= $00
   509 = 0001			CO40	= $01
   510 = 0002			BW80	= $02
   511 = 0003			CO80	= $03
   512 = 0007			MONO	= $07
   513 = 0001			C40	= $01
   514 = 0003			C80	= $03
   515 = 0080			BLINK	= $80
   516
   517 				.endl							; UNIT CRT
   518
   519 81EC			.local	DRAW						; PROCEDURE
   520 					.ifdef @VarData
   521 81EC A9 EF		@new	lda <@VarData
   522 81EE 85 12			sta :ztmp
   523 81F0 A9 83			lda >@VarData
   524 81F2 A0 03			ldy #@VarDataSize-1
   525 81F4 20 33 80			jsr @AllocMem
   526 					eif
   527
   528 				; ------------------------------------------------------------
   529
   530 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   531 				; as Pointer
   532 81F7 B5 16			lda :STACKORIGIN,x
   533 81F9 8D EF 83			sta X
   534 81FC B5 26			lda :STACKORIGIN+STACKWIDTH,x
   535 81FE 8D F0 83			sta X+1
   536 8201 CA				dex
   537 8202 30 0E			jmi @main
   538
   539 				; ------------------------------------------------------------
   540
   541 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   542 				; as Pointer
   543 8204 B5 16			lda :STACKORIGIN,x
   544 8206 8D F1 83			sta Y
   545 8209 CA				dex
   546 820A 30 06			jmi @main
   547
   548 				; ------------------------------------------------------------
   549
   550 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   551 				; as Pointer
   552 820C B5 16			lda :STACKORIGIN,x
   553 820E 8D F2 83			sta S
   554 8211 CA				dex
   555 8212			@main
   556
   557 				; optimize OK (diamond.pas), line = 8
   558
   559 8212 AD EE 83			lda COL
   560 8215 20 F7 80			jsr GRAPH.SETCOLOR
   561
   562 				; optimize OK (diamond.pas), line = 9
   563
   564 8218 AD F2 83			lda S
   565 821B C9 02			cmp #$02
   566 821D B0 03 4C 41 83		jcc l_0138
   567
   568 				; optimize OK (diamond.pas), line = 11
   569
   570 8222 4E F2 83			lsr S
   571
   572 				; optimize OK (diamond.pas), line = 12
   573
   574 8225 AD F1 83			lda Y
   575 8228 18 6D F2 83			add S
   576 822C 8D EB 83			sta GRAPH.MOVETO.Y
   577 822F A9 00			lda #$00
   578 8231 69 00			adc #$00
   579 8233 8D EC 83			sta GRAPH.MOVETO.Y+1
   580 8236 AD EF 83			lda X
   581 8239 8D E9 83			sta GRAPH.MOVETO.X
   582 823C AD F0 83			lda X+1
   583 823F 8D EA 83			sta GRAPH.MOVETO.X+1
   584 8242 20 60 81			jsr GRAPH.MOVETO
   585
   586 				; optimize OK (diamond.pas), line = 13
   587
   588 8245 AD EF 83			lda X
   589 8248 18 6D F2 83			add S
   590 824C 8D E5 83			sta GRAPH.LINETO.X
   591 824F AD F0 83			lda X+1
   592 8252 69 00			adc #$00
   593 8254 8D E6 83			sta GRAPH.LINETO.X+1
   594 8257 AD F1 83			lda Y
   595 825A 8D E7 83			sta GRAPH.LINETO.Y
   596 825D A9 00			lda #$00
   597 825F 8D E8 83			sta GRAPH.LINETO.Y+1
   598 8262 20 12 81			jsr GRAPH.LINETO
   599
   600 				; optimize OK (diamond.pas), line = 14
   601
   602 8265 AD F1 83			lda Y
   603 8268 38 ED F2 83			sub S
   604 826C 8D E7 83			sta GRAPH.LINETO.Y
   605 826F A9 00			lda #$00
   606 8271 E9 00			sbc #$00
   607 8273 8D E8 83			sta GRAPH.LINETO.Y+1
   608 8276 AD EF 83			lda X
   609 8279 8D E5 83			sta GRAPH.LINETO.X
   610 827C AD F0 83			lda X+1
   611 827F 8D E6 83			sta GRAPH.LINETO.X+1
   612 8282 20 12 81			jsr GRAPH.LINETO
   613
   614 				; optimize OK (diamond.pas), line = 15
   615
   616 8285 AD EF 83			lda X
   617 8288 38 ED F2 83			sub S
   618 828C 8D E5 83			sta GRAPH.LINETO.X
   619 828F AD F0 83			lda X+1
   620 8292 E9 00			sbc #$00
   621 8294 8D E6 83			sta GRAPH.LINETO.X+1
   622 8297 AD F1 83			lda Y
   623 829A 8D E7 83			sta GRAPH.LINETO.Y
   624 829D A9 00			lda #$00
   625 829F 8D E8 83			sta GRAPH.LINETO.Y+1
   626 82A2 20 12 81			jsr GRAPH.LINETO
   627
   628 				; optimize OK (diamond.pas), line = 16
   629
   630 82A5 AD F1 83			lda Y
   631 82A8 18 6D F2 83			add S
   632 82AC 8D E7 83			sta GRAPH.LINETO.Y
   633 82AF A9 00			lda #$00
   634 82B1 69 00			adc #$00
   635 82B3 8D E8 83			sta GRAPH.LINETO.Y+1
   636 82B6 AD EF 83			lda X
   637 82B9 8D E5 83			sta GRAPH.LINETO.X
   638 82BC AD F0 83			lda X+1
   639 82BF 8D E6 83			sta GRAPH.LINETO.X+1
   640 82C2 20 12 81			jsr GRAPH.LINETO
   641
   642 				; optimize FAIL ('DRAW', diamond.pas), line = 17
   643
   644 82C5 E8				inx
   645 82C6 AD F2 83 95 16		mva S :STACKORIGIN,x
   646 82CB E8				inx
   647 82CC AD F1 83 95 16		mva Y :STACKORIGIN,x
   648 82D1 E8				inx
   649 82D2 AD EF 83			lda X
   650 82D5 18 6D F2 83			add S
   651 82D9 95 16			sta :STACKORIGIN,x
   652 82DB AD F0 83			lda X+1
   653 82DE 69 00			adc #$00
   654 82E0 95 26			sta :STACKORIGIN+STACKWIDTH,x
   655 82E2 20 EC 81			jsr DRAW
   656
   657 				; optimize FAIL ('DRAW', diamond.pas), line = 18
   658
   659 82E5 E8				inx
   660 82E6 AD F2 83 95 16		mva S :STACKORIGIN,x
   661 82EB E8				inx
   662 82EC AD F1 83 95 16		mva Y :STACKORIGIN,x
   663 82F1 E8				inx
   664 82F2 AD EF 83			lda X
   665 82F5 38 ED F2 83			sub S
   666 82F9 95 16			sta :STACKORIGIN,x
   667 82FB AD F0 83			lda X+1
   668 82FE E9 00			sbc #$00
   669 8300 95 26			sta :STACKORIGIN+STACKWIDTH,x
   670 8302 20 EC 81			jsr DRAW
   671
   672 				; optimize FAIL ('DRAW', diamond.pas), line = 19
   673
   674 8305 E8				inx
   675 8306 AD F2 83 95 16		mva S :STACKORIGIN,x
   676 830B E8				inx
   677 830C AD F1 83			lda Y
   678 830F 38 ED F2 83			sub S
   679 8313 95 16			sta :STACKORIGIN,x
   680 8315 E8				inx
   681 8316 AD EF 83 95 16		mva X :STACKORIGIN,x
   682 831B AD F0 83 95 26		mva X+1 :STACKORIGIN+STACKWIDTH,x
   683 8320 20 EC 81			jsr DRAW
   684
   685 				; optimize FAIL ('DRAW', diamond.pas), line = 20
   686
   687 8323 E8				inx
   688 8324 AD F2 83 95 16		mva S :STACKORIGIN,x
   689 8329 E8				inx
   690 832A AD F1 83			lda Y
   691 832D 18 6D F2 83			add S
   692 8331 95 16			sta :STACKORIGIN,x
   693 8333 E8				inx
   694 8334 AD EF 83 95 16		mva X :STACKORIGIN,x
   695 8339 AD F0 83 95 26		mva X+1 :STACKORIGIN+STACKWIDTH,x
   696 833E 20 EC 81			jsr DRAW
   697 8341			l_0138
   698
   699 				; optimize OK (diamond.pas), line = 22
   700
   701 8341 AD EE 83			lda COL
   702 8344 18 69 01			add #$01
   703 8347 29 0F			and #$0F
   704 8349 8D EE 83			sta COL
   705
   706 				; ------------------------------------------------------------
   707
   708 = 83EF			X	= DATAORIGIN+$0038
   709 = 83F1			Y	= DATAORIGIN+$003A
   710 = 83F2			S	= DATAORIGIN+$003B
   711
   712 = 83EF			@VarData	= X
   713 = 0004			@VarDataSize	= 4
   714
   715 834C			@exit
   716 					.ifdef @new
   717 834C A9 EF			lda <@VarData
   718 834E 85 12			sta :ztmp
   719 8350 A9 83			lda >@VarData
   720 8352 A0 03			ldy #@VarDataSize-1
   721 8354 4C 52 80			jmp @FreeMem
   722 					els
   723 					rts						; ret
   724 					eif
   725 				.endl
   726 8357			l_0004
   727
   728 				; optimize OK (diamond.pas), line = 26
   729
   730 8357 A9 00			lda #$00
   731 8359 20 DC 80			jsr GRAPH.INITGRAPH.@0096
   732
   733 				; optimize OK (diamond.pas), line = 27
   734
   735 835C A9 01			lda #$01
   736 835E 8D EE 83			sta COL
   737
   738 				; optimize FAIL ('DRAW', diamond.pas), line = 28
   739
   740 8361 E8				inx
   741 8362 AD B9 83 95 16		mva SYSTEM.SCREENHEIGHT :STACKORIGIN,x
   742 8367 AD BA 83 95 26		mva SYSTEM.SCREENHEIGHT+1 :STACKORIGIN+STACKWIDTH,x
   743 836C E8				inx
   744 836D A9 01 95 16			mva #$01 :STACKORIGIN,x
   745 8371 20 16 80			jsr @expandToCARD1.SMALL
   746 8374 20 03 80			jsr shrEAX_CL
   747 8377 AD B9 83 95 16		mva SYSTEM.SCREENHEIGHT :STACKORIGIN,x
   748 837C AD BA 83 95 26		mva SYSTEM.SCREENHEIGHT+1 :STACKORIGIN+STACKWIDTH,x
   749 8381 E8				inx
   750 8382 A9 01 95 16			mva #$01 :STACKORIGIN,x
   751 8386 20 16 80			jsr @expandToCARD1.SMALL
   752 8389 20 03 80			jsr shrEAX_CL
   753 838C AD B7 83 95 16		mva SYSTEM.SCREENWIDTH :STACKORIGIN,x
   754 8391 AD B8 83 95 26		mva SYSTEM.SCREENWIDTH+1 :STACKORIGIN+STACKWIDTH,x
   755 8396 E8				inx
   756 8397 A9 01 95 16			mva #$01 :STACKORIGIN,x
   757 839B 20 16 80			jsr @expandToCARD1.SMALL
   758 839E 20 03 80			jsr shrEAX_CL
   759 83A1 CA				dex
   760 83A2 20 EC 81			jsr DRAW
   761
   762 				; --- RepeatUntilProlog
   763 83A5			l_01E6
   764
   765 				; optimize FAIL ('CRT.KEYPRESSED', diamond.pas), line = 29
   766
   767 83A5 20 DD 81			jsr CRT.KEYPRESSED
   768 83A8 AD ED 83			lda CRT.KEYPRESSED.RESULT
   769 83AB F0 F8			jeq l_01E6
   770
   771 				; optimize FAIL ('CRT.CLRSCR', diamond.pas), line = 30
   772
   773 83AD 20 D7 81			jsr CRT.CLRSCR
   774
   775 				; -------------------  ASM Block 00000082  -------------------
   776
   777 83B0 4C 00 08		 jmp $800 
   778 				; ------------------------------------------------------------
   779
   780 = 0002			M	= $02
   781 = 83EE			COL	= DATAORIGIN+$0037
   782 83B3			@exit
   783
   784 83B3 A2 00		@halt	ldx #$00
   785 83B5 9A				txs
   786
   787 83B6 60				rts
   788
   789 				; ------------------------------------------------------------
   790
   791 				; ------------------------------------------------------------
   792
   793 83B7			.local	@DEFINES
   794 83B7			NEO
   795 				.endl
   796
   797 83B7			.local	@RESOURCE
   798 				.endl
   799
   800 				.endl							; MAIN
   801
   802 				; ------------------------------------------------------------
   803 				; ------------------------------------------------------------
   804
   805 				.macro	UNITINITIALIZATION
   806 				
   807 					.ifdef MAIN.SYSTEM.@UnitInit
   808 					jsr MAIN.SYSTEM.@UnitInit
   809 					.fi
   810 				
   811 					.ifdef MAIN.TYPES.@UnitInit
   812 					jsr MAIN.TYPES.@UnitInit
   813 					.fi
   814 				
   815 					.ifdef MAIN.GRAPH.@UnitInit
   816 					jsr MAIN.GRAPH.@UnitInit
   817 					.fi
   818 				
   819 					.ifdef MAIN.CRT.@UnitInit
   820 					jsr MAIN.CRT.@UnitInit
   821 					.fi
   822 				.endm
   823
   824 				; ------------------------------------------------------------
   825
   826 					ift .SIZEOF(MAIN.SYSTEM) > 0
   827 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   828 					eif
   829
   830 					ift .SIZEOF(MAIN.TYPES) > 0
   831 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   832 					eif
   833
   834 					ift .SIZEOF(MAIN.GRAPH) > 0
   835 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   835 				GRAPH: $80DC..$81D6
   836 					eif
   837
   838 					ift .SIZEOF(MAIN.CRT) > 0
   839 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   839 				CRT: $81D7..$81EB
   840 					eif
   841
   842 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   842 				CODE: $8003..$83B6
   843
   844 				; ------------------------------------------------------------
   845
   846 = 83B7				?adr = *
   847 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
   848 					?adr = ?old_adr
   849 					eif
   850
   851 					org ?adr
   852 = 83B7				?old_adr = *
   853
   854 83B7			DATAORIGIN
   855 83B7 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $27 $00 $00  $00 $17
   856
   857 = 0012			VARINITSIZE	= *-DATAORIGIN
   858 = 003C			VARDATASIZE	= 60
   859
   860 = 83F3			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   861
   862 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   862 				DATA: $83B7..$83F3
   863
   864 				; ------------------------------------------------------------
   865
   866 				.macro	STATICDATA
   867 				.endm
   868
   869 					end
