mads 2.1.7 build 4 (2 Oct 23)
    54 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0055
   104
   105 				.print 'RTBUF: ',@buf,'..',@buf+255
   105 				RTBUF: $0200..$02FF
   106
   107 				.print 'RTLIB: ',RTLIB,'..',*-1
   107 				RTLIB: $8003..$80BD
   108
   109 				; ------------------------------------------------------------
   110
   111 80BE			START
   112 80BE BA				tsx
   113 80BF 8E B2 83			stx MAIN.@halt+1
   114
   115 = 002A			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 83C7			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN > 0) && (VLEN <= 256)
   121 80C2 A2 D6			ldx #256-VLEN
   122 80C4 A9 00			lda #$00
   123 80C6 9D F1 82 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>256
   125 					m@init
   126 					eif
   127
   128 				.ifdef psptr
   129 80CC A9 F1 85 00 A9 83 + 	mwa #PROGRAMSTACK psptr
   130 				.fi
   131
   132 80D4 A2 00			ldx #$00
   133 80D6 86 02			stx bp						; BP = 0
   134
   135 80D8 CA				dex						; X = 255
   136
   137 80D9				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: diamond.a65]
Source: diamond.a65
   138
   139 80D9			.local	MAIN						; PROCEDURE
   140
   141 80D9 4C 55 83			jmp l_0004
   142
   143 				; ------------------------------------------------------------
   144
   145 80DC			.local	SYSTEM						; UNIT
   146
   147 				; ------------------------------------------------------------
   148
   149 = 0648			M_PI_2	= $0648
   150 = 0192			D_PI_2	= $0192
   151 = 0004			D_PI_180	= $04
   152 = 0001			CH_CURSOR_LEFT	= $01
   153 = 0004			CH_CURSOR_RIGHT	= $04
   154 = 0005			CH_INSERT	= $05
   155 = 0006			CH_PAGE_DOWN	= $06
   156 = 0007			CH_END	= $07
   157 = 0008			CH_BACKSPACE	= $08
   158 = 0009			CH_HTAB	= $09
   159 = 000A			CH_LINE_FEED	= $0A
   160 = 000C			CH_CLEAR_SCREEN	= $0C
   161 = 000D			CH_ENTER	= $0D
   162 = 0012			CH_PAGE_UP	= $12
   163 = 0013			CH_CURSOR_DOWN	= $13
   164 = 0014			CH_CURSOR_HOME	= $14
   165 = 0016			CH_VTAB	= $16
   166 = 0017			CH_CURSOR_UP	= $17
   167 = 0018			CH_CURSOR_REV	= $18
   168 = 001A			CH_DELETE	= $1A
   169 = 001B			CH_ESCAPE	= $1B
   170 = 0004			FMOPENREAD	= $04
   171 = 0008			FMOPENWRITE	= $08
   172 = 0009			FMOPENAPPEND	= $09
   173 = 000C			FMOPENREADWRITE	= $0C
   174 = 83B5			SCREENWIDTH	= DATAORIGIN+$0000
   175 = 83B7			SCREENHEIGHT	= DATAORIGIN+$0002
   176 = 83B9			DATESEPARATOR	= DATAORIGIN+$0004
   177 = 83BA			FILEMODE	= DATAORIGIN+$0005
   178 = 83BB			GRAPHMODE	= DATAORIGIN+$0006
   179 = 83BC			IORESULT	= DATAORIGIN+$0007
   180 = 83BD			EOLN	= DATAORIGIN+$0008
   181 = 83BE			RNDSEED	= DATAORIGIN+$0009
   182
   183 				.endl							; UNIT SYSTEM
   184
   185 				; ------------------------------------------------------------
   186
   187 80DC			.local	TYPES						; UNIT
   188
   189 				; ------------------------------------------------------------
   190
   191 				.endl							; UNIT TYPES
   192
   193 				; ------------------------------------------------------------
   194
   195 80DC			.local	GRAPH						; UNIT
   196
   197 80DC			.local	INITGRAPH					; PROCEDURE | OVERLOAD
   198 80DC			.local	@0096
   199 80DC 8D E1 83			sta MODE
   200
   201 				; optimize OK (graph_neo.inc), line = 9
   202
   203 80DF A9 40			lda #$40
   204 80E1 8D B5 83			sta SYSTEM.SCREENWIDTH
   205 80E4 A9 01			lda #$01
   206 80E6 8D B6 83			sta SYSTEM.SCREENWIDTH+1
   207
   208 				; optimize OK (graph_neo.inc), line = 10
   209
   210 80E9 A9 F0			lda #$F0
   211 80EB 8D B7 83			sta SYSTEM.SCREENHEIGHT
   212 80EE A9 00			lda #$00
   213 80F0 8D B8 83			sta SYSTEM.SCREENHEIGHT+1
   214
   215 				; -------------------  ASM Block 00000059  -------------------
   216
   217 80F3 20 B8 80			    @ClrScr
   218 					
   219 				; ------------------------------------------------------------
   220
   221 = 83E1			MODE	= DATAORIGIN+$002C
   222
   223 = 83E1			@VarData	= MODE
   224 = 0001			@VarDataSize	= 1
   225
   226 80F6			@exit
   227 					.ifdef @new
   228 					lda <@VarData
   229 					sta :ztmp
   230 					lda >@VarData
   231 					ldy #@VarDataSize-1
   232 					jmp @FreeMem
   233 					els
   234 80F6 60				rts						; ret
   235 					eif
   236 				.endl
   237 				.endl							; overload
   238
   239 80F7			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   240 80F7 8D E2 83			sta COLOR
   241
   242 				; -------------------  ASM Block 00000061  -------------------
   243
   244 80FA 9C 04 FF		    stz	DParameters
   245 80FD 9C 06 FF		    stz DParameters+2
   246 8100 9C 07 FF		    stz DParameters+3
   247 8103 9C 08 FF		    stz DParameters+4
   248 8106 AD E2 83		    lda color
   249 8109 8D 05 FF		    sta DParameters+1
   250 810C 20 70 80		    @SendMessage 				
   251 810F 05 01			.byte 	5,1
   252
   253 				; ------------------------------------------------------------
   254
   255 = 83E2			COLOR	= DATAORIGIN+$002D
   256
   257 = 83E2			@VarData	= COLOR
   258 = 0001			@VarDataSize	= 1
   259
   260 8111			@exit
   261 					.ifdef @new
   262 					lda <@VarData
   263 					sta :ztmp
   264 					lda >@VarData
   265 					ldy #@VarDataSize-1
   266 					jmp @FreeMem
   267 					els
   268 8111 60				rts						; ret
   269 					eif
   270 				.endl
   271
   272 8112			.local	LINETO						; PROCEDURE
   273
   274 				; -------------------  ASM Block 00000065  -------------------
   275
   276 8112 AD D9 83 8D 04 FF +         mwa CurrentX DParameters
   277 811E AD DB 83 8D 06 FF +         mwa CurrentY DParameters+2
   278 812A AD E3 83 8D 08 FF +         mwa x DParameters+4
   279 8136 AD E5 83 8D 0A FF +         mwa y DParameters+6
   280 8142 20 70 80		        @SendMessage 				
   281 8145 05 02		        .byte 	5,2
   282 				    
   283 				; optimize OK (graph_neo.inc), line = 126
   284
   285 8147 AD E3 83			lda X
   286 814A 8D D9 83			sta CURRENTX
   287 814D AD E4 83			lda X+1
   288 8150 8D DA 83			sta CURRENTX+1
   289
   290 				; optimize OK (graph_neo.inc), line = 127
   291
   292 8153 AD E5 83			lda Y
   293 8156 8D DB 83			sta CURRENTY
   294 8159 AD E6 83			lda Y+1
   295 815C 8D DC 83			sta CURRENTY+1
   296
   297 				; ------------------------------------------------------------
   298
   299 = 83E3			X	= DATAORIGIN+$002E
   300 = 83E5			Y	= DATAORIGIN+$0030
   301
   302 = 83E3			@VarData	= X
   303 = 0004			@VarDataSize	= 4
   304
   305 815F			@exit
   306 					.ifdef @new
   307 					lda <@VarData
   308 					sta :ztmp
   309 					lda >@VarData
   310 					ldy #@VarDataSize-1
   311 					jmp @FreeMem
   312 					els
   313 815F 60				rts						; ret
   314 					eif
   315 				.endl
   316
   317 8160			.local	MOVETO						; PROCEDURE | ASSEMBLER
   318
   319 				; -------------------  ASM Block 00000067  -------------------
   320
   321 8160 AD EA 83			lda y+1
   322 8163 10 08			bpl _0
   323
   324 8165 A9 00			lda #0
   325 8167 8D E9 83			sta y
   326 816A 8D EA 83			sta y+1
   327 816D			_0
   328 816D AD E8 83			lda x+1
   329 8170 10 08			bpl _1
   330
   331 8172 A9 00			lda #0
   332 8174 8D E7 83			sta x
   333 8177 8D E8 83			sta x+1
   334 817A			_1
   335 817A AD EA 83 CD B8 83 + 	cpw y main.system.ScreenHeight
   336 8188 90 11			bcc _2
   337
   338 818A 38 AD B7 83 E9 01 + 	sbw main.system.ScreenHeight #1 y
   339 819B			_2
   340 819B AD E8 83 CD B6 83 + 	cpw x main.system.ScreenWidth
   341 81A9 90 11			bcc _3
   342
   343 81AB 38 AD B5 83 E9 01 + 	sbw main.system.ScreenWidth #1 x
   344 81BC			_3
   345 81BC AD E7 83 8D D9 83 + 	mwa x CurrentX
   346 81C8 AD E9 83 8D DB 83 + 	mwa y CurrentY
   347
   348
   349 				; ------------------------------------------------------------
   350
   351 = 83E7			X	= DATAORIGIN+$0032
   352 = 83E9			Y	= DATAORIGIN+$0034
   353
   354 = 83E7			@VarData	= X
   355 = 0004			@VarDataSize	= 4
   356
   357 81D4			@exit
   358 					.ifdef @new
   359 					lda <@VarData
   360 					sta :ztmp
   361 					lda >@VarData
   362 					ldy #@VarDataSize-1
   363 					jmp @FreeMem
   364 					els
   365 81D4 60				rts						; ret
   366 					eif
   367 				.endl
   368
   369 				; ------------------------------------------------------------
   370
   371 = 0080			CURRENTDRIVER	= $80
   372 = 0000			DETECT	= $00
   373 = 0001			CGA	= $01
   374 = 0002			MCGA	= $02
   375 = 0003			EGA	= $03
   376 = 0004			EGA64	= $04
   377 = 0005			EGAMONO	= $05
   378 = 0006			LOWRES	= $06
   379 = 0007			HERCMONO	= $07
   380 = 0009			VGA	= $09
   381 = 000A			VESA	= $0A
   382 = 000B			D1BIT	= $0B
   383 = 000C			D2BIT	= $0C
   384 = 000D			D4BIT	= $0D
   385 = 000E			D6BIT	= $0E
   386 = 000F			D8BIT	= $0F
   387 = 0010			D12BIT	= $10
   388 = 0018			M640X400	= $18
   389 = 0018			M640X480	= $18
   390 = 0001			GROK	= $01
   391 = 00FF			GRNOINITGRAPH	= $FF
   392 = 00FE			GRNOTDETECTED	= $FE
   393 = 00FD			GRFILENOTFOUND	= $FD
   394 = 00FC			GRINVALIDDRIVER	= $FC
   395 = 00FB			GRNOLOADMEM	= $FB
   396 = 00FA			GRNOSCANMEM	= $FA
   397 = 00F9			GRNOFLOODMEM	= $F9
   398 = 00F8			GRFONTNOTFOUND	= $F8
   399 = 00F7			GRNOFONTMEM	= $F7
   400 = 00F6			GRINVALIDMODE	= $F6
   401 = 00F5			GRERROR	= $F5
   402 = 00F4			GRIOERROR	= $F4
   403 = 00F3			GRINVALIDFONT	= $F3
   404 = 00F2			GRINVALIDFONTNUM	= $F2
   405 = 00EE			GRINVALIDVERSION	= $EE
   406 = 0000			CGAC0	= $00
   407 = 0001			CGAC1	= $01
   408 = 0002			CGAC2	= $02
   409 = 0003			CGAC3	= $03
   410 = 0004			CGAHI	= $04
   411 = 0000			MCGAC0	= $00
   412 = 0001			MCGAC1	= $01
   413 = 0002			MCGAC2	= $02
   414 = 0003			MCGAC3	= $03
   415 = 0004			MCGAMED	= $04
   416 = 0005			MCGAHI	= $05
   417 = 0000			EGALO	= $00
   418 = 0001			EGAHI	= $01
   419 = 0000			EGA64LO	= $00
   420 = 0001			EGA64HI	= $01
   421 = 0003			EGAMONOHI	= $03
   422 = 000A			VGALO	= $0A
   423 = 001F			VGAMED	= $1F
   424 = 0018			VGAHI	= $18
   425 = 83C0			WIN_LEFT	= DATAORIGIN+$000B
   426 = 83C2			WIN_RIGHT	= DATAORIGIN+$000D
   427 = 83C4			WIN_TOP	= DATAORIGIN+$000F
   428 = 83C6			WIN_BOTTOM	= DATAORIGIN+$0011
   429 = 83C8			GRAPHRESULT	= DATAORIGIN+$0013
   430 = 83C9			GETCOLOR	= DATAORIGIN+$0014
   431 = 83CA			VIDEORAM	= DATAORIGIN+$0015
   432 = 83CC			adr.LASTARCCOORDS	= DATAORIGIN+$0017	; [12] RECORD
   433 81D5			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   434 = 83CC			LASTARCCOORDS.X	= DATAORIGIN+$0017
   435 = 83CE			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   436 = 83D0			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   437 = 83D2			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   438 = 83D4			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   439 = 83D6			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   440 = 83D8			SCANLINE_WIDTH	= DATAORIGIN+$0023
   441 = 83D9			CURRENTX	= DATAORIGIN+$0024
   442 = 83DB			CURRENTY	= DATAORIGIN+$0026
   443 = 83DD			LINEX	= DATAORIGIN+$0028
   444 = 83DF			LINEY	= DATAORIGIN+$002A
   445
   446 = 81D5 CC 83		LASTARCCOORDS
   446 				.endl							; UNIT GRAPH
   447
   448 				; ------------------------------------------------------------
   449
   450 81D7			.local	CRT						; UNIT
   451
   452 81D7			.local	CLRSCR						; PROCEDURE
   453
   454 				; -------------------  ASM Block 00000068  -------------------
   455
   456 81D7 20 B8 80			@ClrScr
   457 					
   458 81DA			@exit
   459 					.ifdef @new
   460 					lda <@VarData
   461 					sta :ztmp
   462 					lda >@VarData
   463 					ldy #@VarDataSize-1
   464 					jmp @FreeMem
   465 					els
   466 81DA 60				rts						; ret
   467 					eif
   468 				.endl
   469
   470 81DB			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   471
   472 				; -------------------  ASM Block 00000073  -------------------
   473
   474 81DB 20 70 80			@SendMessage
   475 81DE 02 02			dta 2,2
   476 81E0 20 A0 80			@WaitMessage
   477 81E3 AD 04 FF			lda DParameters
   478 81E6 8D EB 83			sta result
   479
   480 81E9			@exit
   481
   482 				; ------------------------------------------------------------
   483
   484 = 83EB			RESULT	= DATAORIGIN+$0036
   485 81E9 60				rts						; ret
   486 				.endl
   487
   488 				; ------------------------------------------------------------
   489
   490 = 0000			BW40	= $00
   491 = 0001			CO40	= $01
   492 = 0002			BW80	= $02
   493 = 0003			CO80	= $03
   494 = 0007			MONO	= $07
   495 = 0001			C40	= $01
   496 = 0003			C80	= $03
   497 = 0080			BLINK	= $80
   498
   499 				.endl							; UNIT CRT
   500
   501 81EA			.local	DRAW						; PROCEDURE
   502 					.ifdef @VarData
   503 81EA A9 ED		@new	lda <@VarData
   504 81EC 85 12			sta :ztmp
   505 81EE A9 83			lda >@VarData
   506 81F0 A0 03			ldy #@VarDataSize-1
   507 81F2 20 33 80			jsr @AllocMem
   508 					eif
   509
   510 				; ------------------------------------------------------------
   511
   512 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   513 				; as Pointer
   514 81F5 B5 16			lda :STACKORIGIN,x
   515 81F7 8D ED 83			sta X
   516 81FA B5 26			lda :STACKORIGIN+STACKWIDTH,x
   517 81FC 8D EE 83			sta X+1
   518 81FF CA				dex
   519 8200 30 0E			jmi @main
   520
   521 				; ------------------------------------------------------------
   522
   523 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   524 				; as Pointer
   525 8202 B5 16			lda :STACKORIGIN,x
   526 8204 8D EF 83			sta Y
   527 8207 CA				dex
   528 8208 30 06			jmi @main
   529
   530 				; ------------------------------------------------------------
   531
   532 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   533 				; as Pointer
   534 820A B5 16			lda :STACKORIGIN,x
   535 820C 8D F0 83			sta S
   536 820F CA				dex
   537 8210			@main
   538
   539 				; optimize OK (diamond.pas), line = 8
   540
   541 8210 AD EC 83			lda COL
   542 8213 20 F7 80			jsr GRAPH.SETCOLOR
   543
   544 				; optimize OK (diamond.pas), line = 9
   545
   546 8216 AD F0 83			lda S
   547 8219 C9 02			cmp #$02
   548 821B B0 03 4C 3F 83		jcc l_0138
   549
   550 				; optimize OK (diamond.pas), line = 11
   551
   552 8220 4E F0 83			lsr S
   553
   554 				; optimize OK (diamond.pas), line = 12
   555
   556 8223 AD EF 83			lda Y
   557 8226 18 6D F0 83			add S
   558 822A 8D E9 83			sta GRAPH.MOVETO.Y
   559 822D A9 00			lda #$00
   560 822F 69 00			adc #$00
   561 8231 8D EA 83			sta GRAPH.MOVETO.Y+1
   562 8234 AD ED 83			lda X
   563 8237 8D E7 83			sta GRAPH.MOVETO.X
   564 823A AD EE 83			lda X+1
   565 823D 8D E8 83			sta GRAPH.MOVETO.X+1
   566 8240 20 60 81			jsr GRAPH.MOVETO
   567
   568 				; optimize OK (diamond.pas), line = 13
   569
   570 8243 AD ED 83			lda X
   571 8246 18 6D F0 83			add S
   572 824A 8D E3 83			sta GRAPH.LINETO.X
   573 824D AD EE 83			lda X+1
   574 8250 69 00			adc #$00
   575 8252 8D E4 83			sta GRAPH.LINETO.X+1
   576 8255 AD EF 83			lda Y
   577 8258 8D E5 83			sta GRAPH.LINETO.Y
   578 825B A9 00			lda #$00
   579 825D 8D E6 83			sta GRAPH.LINETO.Y+1
   580 8260 20 12 81			jsr GRAPH.LINETO
   581
   582 				; optimize OK (diamond.pas), line = 14
   583
   584 8263 AD EF 83			lda Y
   585 8266 38 ED F0 83			sub S
   586 826A 8D E5 83			sta GRAPH.LINETO.Y
   587 826D A9 00			lda #$00
   588 826F E9 00			sbc #$00
   589 8271 8D E6 83			sta GRAPH.LINETO.Y+1
   590 8274 AD ED 83			lda X
   591 8277 8D E3 83			sta GRAPH.LINETO.X
   592 827A AD EE 83			lda X+1
   593 827D 8D E4 83			sta GRAPH.LINETO.X+1
   594 8280 20 12 81			jsr GRAPH.LINETO
   595
   596 				; optimize OK (diamond.pas), line = 15
   597
   598 8283 AD ED 83			lda X
   599 8286 38 ED F0 83			sub S
   600 828A 8D E3 83			sta GRAPH.LINETO.X
   601 828D AD EE 83			lda X+1
   602 8290 E9 00			sbc #$00
   603 8292 8D E4 83			sta GRAPH.LINETO.X+1
   604 8295 AD EF 83			lda Y
   605 8298 8D E5 83			sta GRAPH.LINETO.Y
   606 829B A9 00			lda #$00
   607 829D 8D E6 83			sta GRAPH.LINETO.Y+1
   608 82A0 20 12 81			jsr GRAPH.LINETO
   609
   610 				; optimize OK (diamond.pas), line = 16
   611
   612 82A3 AD EF 83			lda Y
   613 82A6 18 6D F0 83			add S
   614 82AA 8D E5 83			sta GRAPH.LINETO.Y
   615 82AD A9 00			lda #$00
   616 82AF 69 00			adc #$00
   617 82B1 8D E6 83			sta GRAPH.LINETO.Y+1
   618 82B4 AD ED 83			lda X
   619 82B7 8D E3 83			sta GRAPH.LINETO.X
   620 82BA AD EE 83			lda X+1
   621 82BD 8D E4 83			sta GRAPH.LINETO.X+1
   622 82C0 20 12 81			jsr GRAPH.LINETO
   623
   624 				; optimize FAIL ('DRAW', diamond.pas), line = 17
   625
   626 82C3 E8				inx
   627 82C4 AD F0 83 95 16		mva S :STACKORIGIN,x
   628 82C9 E8				inx
   629 82CA AD EF 83 95 16		mva Y :STACKORIGIN,x
   630 82CF E8				inx
   631 82D0 AD ED 83			lda X
   632 82D3 18 6D F0 83			add S
   633 82D7 95 16			sta :STACKORIGIN,x
   634 82D9 AD EE 83			lda X+1
   635 82DC 69 00			adc #$00
   636 82DE 95 26			sta :STACKORIGIN+STACKWIDTH,x
   637 82E0 20 EA 81			jsr DRAW
   638
   639 				; optimize FAIL ('DRAW', diamond.pas), line = 18
   640
   641 82E3 E8				inx
   642 82E4 AD F0 83 95 16		mva S :STACKORIGIN,x
   643 82E9 E8				inx
   644 82EA AD EF 83 95 16		mva Y :STACKORIGIN,x
   645 82EF E8				inx
   646 82F0 AD ED 83			lda X
   647 82F3 38 ED F0 83			sub S
   648 82F7 95 16			sta :STACKORIGIN,x
   649 82F9 AD EE 83			lda X+1
   650 82FC E9 00			sbc #$00
   651 82FE 95 26			sta :STACKORIGIN+STACKWIDTH,x
   652 8300 20 EA 81			jsr DRAW
   653
   654 				; optimize FAIL ('DRAW', diamond.pas), line = 19
   655
   656 8303 E8				inx
   657 8304 AD F0 83 95 16		mva S :STACKORIGIN,x
   658 8309 E8				inx
   659 830A AD EF 83			lda Y
   660 830D 38 ED F0 83			sub S
   661 8311 95 16			sta :STACKORIGIN,x
   662 8313 E8				inx
   663 8314 AD ED 83 95 16		mva X :STACKORIGIN,x
   664 8319 AD EE 83 95 26		mva X+1 :STACKORIGIN+STACKWIDTH,x
   665 831E 20 EA 81			jsr DRAW
   666
   667 				; optimize FAIL ('DRAW', diamond.pas), line = 20
   668
   669 8321 E8				inx
   670 8322 AD F0 83 95 16		mva S :STACKORIGIN,x
   671 8327 E8				inx
   672 8328 AD EF 83			lda Y
   673 832B 18 6D F0 83			add S
   674 832F 95 16			sta :STACKORIGIN,x
   675 8331 E8				inx
   676 8332 AD ED 83 95 16		mva X :STACKORIGIN,x
   677 8337 AD EE 83 95 26		mva X+1 :STACKORIGIN+STACKWIDTH,x
   678 833C 20 EA 81			jsr DRAW
   679 833F			l_0138
   680
   681 				; optimize OK (diamond.pas), line = 22
   682
   683 833F AD EC 83			lda COL
   684 8342 18 69 01			add #$01
   685 8345 29 0F			and #$0F
   686 8347 8D EC 83			sta COL
   687
   688 				; ------------------------------------------------------------
   689
   690 = 83ED			X	= DATAORIGIN+$0038
   691 = 83EF			Y	= DATAORIGIN+$003A
   692 = 83F0			S	= DATAORIGIN+$003B
   693
   694 = 83ED			@VarData	= X
   695 = 0004			@VarDataSize	= 4
   696
   697 834A			@exit
   698 					.ifdef @new
   699 834A A9 ED			lda <@VarData
   700 834C 85 12			sta :ztmp
   701 834E A9 83			lda >@VarData
   702 8350 A0 03			ldy #@VarDataSize-1
   703 8352 4C 52 80			jmp @FreeMem
   704 					els
   705 					rts						; ret
   706 					eif
   707 				.endl
   708 8355			l_0004
   709
   710 				; optimize OK (diamond.pas), line = 26
   711
   712 8355 A9 00			lda #$00
   713 8357 20 DC 80			jsr GRAPH.INITGRAPH.@0096
   714
   715 				; optimize OK (diamond.pas), line = 27
   716
   717 835A A9 01			lda #$01
   718 835C 8D EC 83			sta COL
   719
   720 				; optimize FAIL ('DRAW', diamond.pas), line = 28
   721
   722 835F E8				inx
   723 8360 AD B7 83 95 16		mva SYSTEM.SCREENHEIGHT :STACKORIGIN,x
   724 8365 AD B8 83 95 26		mva SYSTEM.SCREENHEIGHT+1 :STACKORIGIN+STACKWIDTH,x
   725 836A E8				inx
   726 836B A9 01 95 16			mva #$01 :STACKORIGIN,x
   727 836F 20 16 80			jsr @expandToCARD1.SMALL
   728 8372 20 03 80			jsr shrEAX_CL
   729 8375 AD B7 83 95 16		mva SYSTEM.SCREENHEIGHT :STACKORIGIN,x
   730 837A AD B8 83 95 26		mva SYSTEM.SCREENHEIGHT+1 :STACKORIGIN+STACKWIDTH,x
   731 837F E8				inx
   732 8380 A9 01 95 16			mva #$01 :STACKORIGIN,x
   733 8384 20 16 80			jsr @expandToCARD1.SMALL
   734 8387 20 03 80			jsr shrEAX_CL
   735 838A AD B5 83 95 16		mva SYSTEM.SCREENWIDTH :STACKORIGIN,x
   736 838F AD B6 83 95 26		mva SYSTEM.SCREENWIDTH+1 :STACKORIGIN+STACKWIDTH,x
   737 8394 E8				inx
   738 8395 A9 01 95 16			mva #$01 :STACKORIGIN,x
   739 8399 20 16 80			jsr @expandToCARD1.SMALL
   740 839C 20 03 80			jsr shrEAX_CL
   741 839F CA				dex
   742 83A0 20 EA 81			jsr DRAW
   743
   744 				; --- RepeatUntilProlog
   745 83A3			l_01E6
   746
   747 				; optimize FAIL ('CRT.KEYPRESSED', diamond.pas), line = 29
   748
   749 83A3 20 DB 81			jsr CRT.KEYPRESSED
   750 83A6 AD EB 83			lda CRT.KEYPRESSED.RESULT
   751 83A9 F0 F8			jeq l_01E6
   752
   753 				; optimize FAIL ('CRT.CLRSCR', diamond.pas), line = 30
   754
   755 83AB 20 D7 81			jsr CRT.CLRSCR
   756
   757 				; -------------------  ASM Block 00000080  -------------------
   758
   759 83AE 4C 00 08		 jmp $800 
   760 				; ------------------------------------------------------------
   761
   762 = 0002			M	= $02
   763 = 83EC			COL	= DATAORIGIN+$0037
   764 83B1			@exit
   765
   766 83B1 A2 00		@halt	ldx #$00
   767 83B3 9A				txs
   768
   769 83B4 60				rts
   770
   771 				; ------------------------------------------------------------
   772
   773 				; ------------------------------------------------------------
   774
   775 83B5			.local	@DEFINES
   776 83B5			NEO
   777 				.endl
   778
   779 83B5			.local	@RESOURCE
   780 				.endl
   781
   782 				.endl							; MAIN
   783
   784 				; ------------------------------------------------------------
   785 				; ------------------------------------------------------------
   786
   787 				.macro	UNITINITIALIZATION
   788 				
   789 					.ifdef MAIN.SYSTEM.@UnitInit
   790 					jsr MAIN.SYSTEM.@UnitInit
   791 					.fi
   792 				
   793 					.ifdef MAIN.TYPES.@UnitInit
   794 					jsr MAIN.TYPES.@UnitInit
   795 					.fi
   796 				
   797 					.ifdef MAIN.GRAPH.@UnitInit
   798 					jsr MAIN.GRAPH.@UnitInit
   799 					.fi
   800 				
   801 					.ifdef MAIN.CRT.@UnitInit
   802 					jsr MAIN.CRT.@UnitInit
   803 					.fi
   804 				.endm
   805
   806 				; ------------------------------------------------------------
   807
   808 					ift .SIZEOF(MAIN.SYSTEM) > 0
   809 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   810 					eif
   811
   812 					ift .SIZEOF(MAIN.TYPES) > 0
   813 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   814 					eif
   815
   816 					ift .SIZEOF(MAIN.GRAPH) > 0
   817 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   817 				GRAPH: $80DC..$81D6
   818 					eif
   819
   820 					ift .SIZEOF(MAIN.CRT) > 0
   821 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   821 				CRT: $81D7..$81E9
   822 					eif
   823
   824 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   824 				CODE: $8003..$83B4
   825
   826 				; ------------------------------------------------------------
   827
   828 = 83B5				?adr = *
   829 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
   830 					?adr = ?old_adr
   831 					eif
   832
   833 					org ?adr
   834 = 83B5				?old_adr = *
   835
   836 83B5			DATAORIGIN
   837 83B5 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $27 $00 $00  $00 $17
   838
   839 = 0012			VARINITSIZE	= *-DATAORIGIN
   840 = 003C			VARDATASIZE	= 60
   841
   842 = 83F1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   843
   844 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   844 				DATA: $83B5..$83F1
   845
   846 				; ------------------------------------------------------------
   847
   848 				.macro	STATICDATA
   849 				.endm
   850
   851 					end
