; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.1 [2024/01/31] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $00

zpage

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------

	opt h-f+c+

	org $8000
	jmp START

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_neo.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0004

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FSINCOS						; FUNCTION

; --- WhileProlog
	jmp l_005B
l_005C

; optimize FAIL ('@FSUB', SYSTEM), line = 1999

	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$DB :STACKORIGIN,x
	mva #$0F :STACKORIGIN+STACKWIDTH,x
	mva #$C9 :STACKORIGIN+STACKWIDTH*2,x
	mva #$40 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3
	dex
l_005B
	lda #$DB
	sta @FCMPL.A
	lda #$0F
	sta @FCMPL.A+1
	lda #$C9
	sta @FCMPL.A+2
	lda #$40
	sta @FCMPL.A+3
	lda X
	sta @FCMPL.B
	lda X+1
	sta @FCMPL.B+1
	lda X+2
	sta @FCMPL.B+2
	lda X+3
	sta @FCMPL.B+3
	jsr @FCMPL
	smi
	jne l_005C

; --- WhileProlog
	jmp l_0070
l_0071

; optimize FAIL ('@FSUB.FADD', SYSTEM), line = 2000

	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$DB :STACKORIGIN,x
	mva #$0F :STACKORIGIN+STACKWIDTH,x
	mva #$C9 :STACKORIGIN+STACKWIDTH*2,x
	mva #$40 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB.FADD
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3
	dex
l_0070
	lda X+3
	jmi l_0071

; optimize FAIL ('@FMUL', SYSTEM), line = 2003

	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$83 :STACKORIGIN,x
	mva #$F9 :STACKORIGIN+STACKWIDTH,x
	mva #$22 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3

; optimize FAIL ('@F2I', SYSTEM), line = 2006

	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	lda :STACKORIGIN,x
	sta I
	dex

; optimize OK (SYSTEM), line = 2009

	lda X+3
	jpl l_009F
	dec I
l_009F

; optimize FAIL ('@I2F', SYSTEM), line = 2012

	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva I :STACKORIGIN,x
	jsr @expandToCARD.SHORT
	jsr @I2F
	jsr @FSUB
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3
	dex

; optimize OK (SYSTEM), line = 2015

	lda SC
	jeq l_00BC
	inc I
l_00BC

; optimize OK (SYSTEM), line = 2018

	lda I
	and #$01
	jne l_00D9
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3
	dex
l_00D9

; optimize FAIL ('@FMUL', SYSTEM), line = 2021

	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3

; optimize FAIL ('@FMUL', SYSTEM), line = 2022

	mva #$D3 :STACKORIGIN,x
	mva #$59 :STACKORIGIN+STACKWIDTH,x
	mva #$A3 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3C :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$42 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$5E :STACKORIGIN+STACKWIDTH*2,x
	mva #$3A :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva #$DE :STACKORIGIN,x
	mva #$4D :STACKORIGIN+STACKWIDTH,x
	mva #$6F :STACKORIGIN+STACKWIDTH*2,x
	mva #$3E :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB.FADD
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB
	dex
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta RESULT
	lda :STACKORIGIN+STACKWIDTH,x
	sta RESULT+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta RESULT+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta RESULT+3
	dex

; optimize OK (SYSTEM), line = 2025

	lda I
	and #$02
	cmp #$02
	jne l_0126
	lda RESULT+3
	eor #$80
	sta RESULT+3
l_0126
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$000B
SC	= DATAORIGIN+$000F
RESULT	= DATAORIGIN+$0010
I	= DATAORIGIN+$0014

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	SIN						; FUNCTION | OVERLOAD
.local	@0131

; optimize OK (SYSTEM), line = 2039

	lda X
	sta FSINCOS.X
	lda X+1
	sta FSINCOS.X+1
	lda X+2
	sta FSINCOS.X+2
	lda X+3
	sta FSINCOS.X+3
	lda #$00
	sta FSINCOS.SC
	jsr FSINCOS
	lda FSINCOS.RESULT
	sta RESULT
	lda FSINCOS.RESULT+1
	sta RESULT+1
	lda FSINCOS.RESULT+2
	sta RESULT+2
	lda FSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0015
RESULT	= DATAORIGIN+$0019

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	COS						; FUNCTION | OVERLOAD
.local	@013B

; optimize OK (SYSTEM), line = 2053

	lda X
	sta FSINCOS.X
	lda X+1
	sta FSINCOS.X+1
	lda X+2
	sta FSINCOS.X+2
	lda X+3
	sta FSINCOS.X+3
	lda #$01
	sta FSINCOS.SC
	jsr FSINCOS
	lda FSINCOS.RESULT
	sta RESULT
	lda FSINCOS.RESULT+1
	sta RESULT+1
	lda FSINCOS.RESULT+2
	sta RESULT+2
	lda FSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$001D
RESULT	= DATAORIGIN+$0021

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000064  -------------------

	@SendMessage
	dta 2,2
	@WaitMessage
	lda DParameters
	sta result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0025
	rts						; ret
.endl

; ------------------------------------------------------------

BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH					; PROCEDURE | OVERLOAD
.local	@017C
	sta MODE

; optimize OK (graph_neo.inc), line = 9

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (graph_neo.inc), line = 10

	lda #$F0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; -------------------  ASM Block 00000071  -------------------

	    @ClrScr
	
; ------------------------------------------------------------

MODE	= DATAORIGIN+$0047

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETCOLOR					; PROCEDURE | ASSEMBLER
	sta COLOR

; -------------------  ASM Block 00000073  -------------------

    lda #0
    sta	DParameters
    sta DParameters+2
    sta DParameters+3
    sta DParameters+4
    lda color
    sta DParameters+1
    @SendMessage 				
	.byte 	5,1

; ------------------------------------------------------------

COLOR	= DATAORIGIN+$0048

@VarData	= COLOR
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTPIXEL					; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@0189

; -------------------  ASM Block 00000074  -------------------

    lda x
    //sta CurrentX 
    sta DParameters
    lda x+1
    //sta CurrentX+1
    sta DParameters+1
    lda y
    //sta CurrentY
    sta DParameters+2
    lda y+1
    //sta CurrentY+1
    sta DParameters+3
    @SendMessage 				
	.byte 	5,5

; ------------------------------------------------------------

X	= DATAORIGIN+$0049
Y	= DATAORIGIN+$004B

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	PUTPIXEL					; PROCEDURE | OVERLOAD
.local	@018A

; optimize OK (graph_neo.inc), line = 87

	lda COLOR
	jsr SETCOLOR

; optimize OK (graph_neo.inc), line = 88

	lda X
	sta PUTPIXEL.@0189.X
	lda X+1
	sta PUTPIXEL.@0189.X+1
	lda Y
	sta PUTPIXEL.@0189.Y
	lda Y+1
	sta PUTPIXEL.@0189.Y+1
	jsr PUTPIXEL.@0189

; ------------------------------------------------------------

X	= DATAORIGIN+$004D
Y	= DATAORIGIN+$004F
COLOR	= DATAORIGIN+$0051

@VarData	= X
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$0026
WIN_RIGHT	= DATAORIGIN+$0028
WIN_TOP	= DATAORIGIN+$002A
WIN_BOTTOM	= DATAORIGIN+$002C
GRAPHRESULT	= DATAORIGIN+$002E
GETCOLOR	= DATAORIGIN+$002F
VIDEORAM	= DATAORIGIN+$0030
adr.LASTARCCOORDS	= DATAORIGIN+$0032	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0032
LASTARCCOORDS.Y	= DATAORIGIN+$0034
LASTARCCOORDS.XSTART	= DATAORIGIN+$0036
LASTARCCOORDS.YSTART	= DATAORIGIN+$0038
LASTARCCOORDS.XEND	= DATAORIGIN+$003A
LASTARCCOORDS.YEND	= DATAORIGIN+$003C
SCANLINE_WIDTH	= DATAORIGIN+$003E
CURRENTX	= DATAORIGIN+$003F
CURRENTY	= DATAORIGIN+$0041
LINEX	= DATAORIGIN+$0043
LINEY	= DATAORIGIN+$0045

.endl							; UNIT GRAPH

.local	DODOTSSPHERE					; PROCEDURE

; optimize OK (sphere.pas), line = 19

	lda #$50
	sta RX
	lda #$00
	sta RX+1

; optimize FAIL ('@FSUB.FADD', sphere.pas), line = 22

	inx
	mva TURN :STACKORIGIN,x
	mva TURN+1 :STACKORIGIN+STACKWIDTH,x
	mva TURN+2 :STACKORIGIN+STACKWIDTH*2,x
	mva TURN+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	mva #$3E :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB.FADD
	dex
	lda :STACKORIGIN,x
	sta TURN
	lda :STACKORIGIN+STACKWIDTH,x
	sta TURN+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta TURN+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta TURN+3
	dex

; optimize OK (sphere.pas), line = 23

	lda #$00
	sta @FCMPL.A
	sta @FCMPL.A+1
	lda #$30
	sta @FCMPL.A+2
	lda #$42
	sta @FCMPL.A+3
	lda TURN
	sta @FCMPL.B
	lda TURN+1
	sta @FCMPL.B+1
	lda TURN+2
	sta @FCMPL.B+2
	lda TURN+3
	sta @FCMPL.B+3
	jsr @FCMPL
	jmi l_0215
	jeq l_0215
	lda #$00
	sta TURN
	sta TURN+1
	sta TURN+2
	sta TURN+3
l_0215

; optimize OK (sphere.pas), line = 25

	lda #$A6
	sta LATITUDE
	lda #$FF
	sta LATITUDE+1

l_0225
; --- ForToDoCondition
	lda LATITUDE
	cmp #$5B
	lda LATITUDE+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_0231

; optimize OK (sphere.pas), line = 27

	lda #$00
	sta LONGITUDE
	sta LONGITUDE+1

l_023A
; --- ForToDoCondition
	lda LONGITUDE+1
	cmp #$01
	bcc @+
	jne l_0246
	lda LONGITUDE
	cmp #$67
	bcc @+
	jne l_0246
@

; optimize OK (sphere.pas), line = 30

	lda #$0C
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda LATITUDE
	sta @SMALLINT.MOD.A
	lda LATITUDE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta :STACKORIGIN+9
	ldy #1
	lda @SMALLINT.MOD.RESULT+1
	ora :STACKORIGIN+9
	beq @+
	dey
@
	sty :STACKORIGIN+9
	lda #$0C
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda LONGITUDE
	sta @SMALLINT.MOD.A
	lda LONGITUDE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta :STACKORIGIN+10
	ldy #1
	lda @SMALLINT.MOD.RESULT+1
	ora :STACKORIGIN+10
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_026A

; optimize OK (sphere.pas), line = 32

	lda TURN
	sta SYSTEM.COS.@013B.X
	lda TURN+1
	sta SYSTEM.COS.@013B.X+1
	lda TURN+2
	sta SYSTEM.COS.@013B.X+2
	lda TURN+3
	sta SYSTEM.COS.@013B.X+3
	jsr SYSTEM.COS.@013B
	lda SYSTEM.COS.@013B.RESULT
	sta CR1
	lda SYSTEM.COS.@013B.RESULT+1
	sta CR1+1
	lda SYSTEM.COS.@013B.RESULT+2
	sta CR1+2
	lda SYSTEM.COS.@013B.RESULT+3
	sta CR1+3

; optimize OK (sphere.pas), line = 33

	lda TURN
	sta SYSTEM.SIN.@0131.X
	lda TURN+1
	sta SYSTEM.SIN.@0131.X+1
	lda TURN+2
	sta SYSTEM.SIN.@0131.X+2
	lda TURN+3
	sta SYSTEM.SIN.@0131.X+3
	jsr SYSTEM.SIN.@0131
	lda SYSTEM.SIN.@0131.RESULT
	sta SR1
	lda SYSTEM.SIN.@0131.RESULT+1
	sta SR1+1
	lda SYSTEM.SIN.@0131.RESULT+2
	sta SR1+2
	lda SYSTEM.SIN.@0131.RESULT+3
	sta SR1+3

; optimize FAIL ('@I2F_m', sphere.pas), line = 35

	inx
	mva LATITUDE :STACKORIGIN,x
	mva LATITUDE+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$A7 :STACKORIGIN,x
	mva #$E7 :STACKORIGIN+STACKWIDTH,x
	mva #$8E :STACKORIGIN+STACKWIDTH*2,x
	mva #$3C :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToCARD1.SMALL
	jsr @I2F_m
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta LR
	lda :STACKORIGIN+STACKWIDTH,x
	sta LR+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta LR+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta LR+3
	dex

; optimize OK (sphere.pas), line = 36

	lda LR
	sta SYSTEM.COS.@013B.X
	lda LR+1
	sta SYSTEM.COS.@013B.X+1
	lda LR+2
	sta SYSTEM.COS.@013B.X+2
	lda LR+3
	sta SYSTEM.COS.@013B.X+3
	jsr SYSTEM.COS.@013B
	inx
	mva SYSTEM.COS.@013B.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@013B.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@013B.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@013B.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva RX :STACKORIGIN,x
	mva RX+1 :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.SMALL
	jsr @I2F
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta CURRENT_RADIUS
	lda :STACKORIGIN+STACKWIDTH,x
	sta CURRENT_RADIUS+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta CURRENT_RADIUS+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta CURRENT_RADIUS+3
	dex

; optimize OK (sphere.pas), line = 37

	lda LR
	sta SYSTEM.SIN.@0131.X
	lda LR+1
	sta SYSTEM.SIN.@0131.X+1
	lda LR+2
	sta SYSTEM.SIN.@0131.X+2
	lda LR+3
	sta SYSTEM.SIN.@0131.X+3
	jsr SYSTEM.SIN.@0131
	inx
	mva SYSTEM.SIN.@0131.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@0131.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@0131.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@0131.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva RX :STACKORIGIN,x
	mva RX+1 :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.SMALL
	jsr @I2F
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta Z
	lda :STACKORIGIN+STACKWIDTH,x
	sta Z+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Z+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Z+3

; optimize FAIL ('@I2F_m', sphere.pas), line = 39

	mva LONGITUDE :STACKORIGIN,x
	mva LONGITUDE+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$A7 :STACKORIGIN,x
	mva #$E7 :STACKORIGIN+STACKWIDTH,x
	mva #$8E :STACKORIGIN+STACKWIDTH*2,x
	mva #$3C :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToCARD1.SMALL
	jsr @I2F_m
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta LRX
	lda :STACKORIGIN+STACKWIDTH,x
	sta LRX+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta LRX+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta LRX+3
	dex

; optimize OK (sphere.pas), line = 40

	lda LRX
	sta SYSTEM.SIN.@0131.X
	lda LRX+1
	sta SYSTEM.SIN.@0131.X+1
	lda LRX+2
	sta SYSTEM.SIN.@0131.X+2
	lda LRX+3
	sta SYSTEM.SIN.@0131.X+3
	jsr SYSTEM.SIN.@0131
	inx
	mva SYSTEM.SIN.@0131.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@0131.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@0131.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@0131.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva CURRENT_RADIUS :STACKORIGIN,x
	mva CURRENT_RADIUS+1 :STACKORIGIN+STACKWIDTH,x
	mva CURRENT_RADIUS+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CURRENT_RADIUS+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta X
	lda :STACKORIGIN+STACKWIDTH,x
	sta X+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X+3
	dex

; optimize OK (sphere.pas), line = 41

	lda LRX
	sta SYSTEM.COS.@013B.X
	lda LRX+1
	sta SYSTEM.COS.@013B.X+1
	lda LRX+2
	sta SYSTEM.COS.@013B.X+2
	lda LRX+3
	sta SYSTEM.COS.@013B.X+3
	jsr SYSTEM.COS.@013B
	inx
	mva SYSTEM.COS.@013B.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@013B.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@013B.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@013B.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva CURRENT_RADIUS :STACKORIGIN,x
	mva CURRENT_RADIUS+1 :STACKORIGIN+STACKWIDTH,x
	mva CURRENT_RADIUS+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CURRENT_RADIUS+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta Y+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Y+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Y+3

; optimize FAIL ('@FMUL', sphere.pas), line = 43

	mva CR1 :STACKORIGIN,x
	mva CR1+1 :STACKORIGIN+STACKWIDTH,x
	mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva SR1 :STACKORIGIN,x
	mva SR1+1 :STACKORIGIN+STACKWIDTH,x
	mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z :STACKORIGIN,x
	mva Z+1 :STACKORIGIN+STACKWIDTH,x
	mva Z+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB
	dex
	lda :STACKORIGIN,x
	sta X1
	lda :STACKORIGIN+STACKWIDTH,x
	sta X1+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X1+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X1+3

; optimize FAIL ('@FMUL', sphere.pas), line = 44

	mva CR1 :STACKORIGIN,x
	mva CR1+1 :STACKORIGIN+STACKWIDTH,x
	mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Y :STACKORIGIN,x
	mva Y+1 :STACKORIGIN+STACKWIDTH,x
	mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva SR1 :STACKORIGIN,x
	mva SR1+1 :STACKORIGIN+STACKWIDTH,x
	mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	mva X1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X1+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB
	dex
	lda :STACKORIGIN,x
	sta Y1
	lda :STACKORIGIN+STACKWIDTH,x
	sta Y1+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Y1+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Y1+3

; optimize FAIL ('@FMUL', sphere.pas), line = 45

	mva SR1 :STACKORIGIN,x
	mva SR1+1 :STACKORIGIN+STACKWIDTH,x
	mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X :STACKORIGIN,x
	mva X+1 :STACKORIGIN+STACKWIDTH,x
	mva X+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva CR1 :STACKORIGIN,x
	mva CR1+1 :STACKORIGIN+STACKWIDTH,x
	mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z :STACKORIGIN,x
	mva Z+1 :STACKORIGIN+STACKWIDTH,x
	mva Z+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB.FADD
	dex
	lda :STACKORIGIN,x
	sta Z1
	lda :STACKORIGIN+STACKWIDTH,x
	sta Z1+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Z1+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Z1+3

; optimize FAIL ('@FMUL', sphere.pas), line = 47

	mva CR1 :STACKORIGIN,x
	mva CR1+1 :STACKORIGIN+STACKWIDTH,x
	mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z1 :STACKORIGIN,x
	mva Z1+1 :STACKORIGIN+STACKWIDTH,x
	mva Z1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z1+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva SR1 :STACKORIGIN,x
	mva SR1+1 :STACKORIGIN+STACKWIDTH,x
	mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	mva Y1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Y1+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB
	dex
	lda :STACKORIGIN,x
	sta Z2
	lda :STACKORIGIN+STACKWIDTH,x
	sta Z2+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Z2+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Z2+3
	dex

; optimize OK (sphere.pas), line = 49

	lda #$00
	sta @FCMPL.A
	sta @FCMPL.A+1
	sta @FCMPL.A+2
	sta @FCMPL.A+3
	lda Z2
	sta @FCMPL.B
	lda Z2+1
	sta @FCMPL.B+1
	lda Z2+2
	sta @FCMPL.B+2
	lda Z2+3
	sta @FCMPL.B+3
	jsr @FCMPL
	jmi l_02FD
	jeq l_02FD

; optimize FAIL ('@FMUL', sphere.pas), line = 51

	inx
	mva CR1 :STACKORIGIN,x
	mva CR1+1 :STACKORIGIN+STACKWIDTH,x
	mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	mva X1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X1+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva SR1 :STACKORIGIN,x
	mva SR1+1 :STACKORIGIN+STACKWIDTH,x
	mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Y :STACKORIGIN,x
	mva Y+1 :STACKORIGIN+STACKWIDTH,x
	mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB.FADD
	dex
	lda :STACKORIGIN,x
	sta X2
	lda :STACKORIGIN+STACKWIDTH,x
	sta X2+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta X2+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta X2+3

; optimize FAIL ('@FMUL', sphere.pas), line = 52

	mva SR1 :STACKORIGIN,x
	mva SR1+1 :STACKORIGIN+STACKWIDTH,x
	mva SR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z1 :STACKORIGIN,x
	mva Z1+1 :STACKORIGIN+STACKWIDTH,x
	mva Z1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z1+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	mva CR1 :STACKORIGIN,x
	mva CR1+1 :STACKORIGIN+STACKWIDTH,x
	mva CR1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva CR1+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	mva Y1+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Y1+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	jsr @FSUB.FADD
	dex
	lda :STACKORIGIN,x
	sta Y2
	lda :STACKORIGIN+STACKWIDTH,x
	sta Y2+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Y2+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Y2+3

; optimize FAIL ('@FSUB', sphere.pas), line = 54

	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	mva #$80 :STACKORIGIN+STACKWIDTH*2,x
	mva #$3F :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z2 :STACKORIGIN,x
	mva Z2+1 :STACKORIGIN+STACKWIDTH,x
	mva Z2+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z2+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	mva #$C8 :STACKORIGIN+STACKWIDTH*2,x
	mva #$43 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FSUB
	dex
	jsr @FDIV
	dex
	lda :STACKORIGIN,x
	sta Z2
	lda :STACKORIGIN+STACKWIDTH,x
	sta Z2+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta Z2+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta Z2+3

; optimize FAIL ('@FMUL', sphere.pas), line = 56

	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	mva X2+2 :STACKORIGIN+STACKWIDTH*2,x
	mva X2+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z2 :STACKORIGIN,x
	mva Z2+1 :STACKORIGIN+STACKWIDTH,x
	mva Z2+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z2+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta XZ
	lda :STACKORIGIN+STACKWIDTH,x
	sta XZ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta XZ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta XZ+3

; optimize FAIL ('@FMUL', sphere.pas), line = 57

	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	mva Y2+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Y2+3 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva Z2 :STACKORIGIN,x
	mva Z2+1 :STACKORIGIN+STACKWIDTH,x
	mva Z2+2 :STACKORIGIN+STACKWIDTH*2,x
	mva Z2+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @FMUL
	dex
	lda :STACKORIGIN,x
	sta YZ
	lda :STACKORIGIN+STACKWIDTH,x
	sta YZ+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta YZ+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta YZ+3

; optimize FAIL ('@I2F_m', sphere.pas), line = 59

	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	inx
	mva XZ :STACKORIGIN,x
	mva XZ+1 :STACKORIGIN+STACKWIDTH,x
	mva XZ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva XZ+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FMUL
	dex
	lda :STACKORIGIN+STACKWIDTH*3,x
	eor #$80
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	lda :STACKORIGIN,x
	add #$A0
	sta SX
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta SX+1

; optimize FAIL ('@I2F_m', sphere.pas), line = 60

	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	inx
	mva YZ :STACKORIGIN,x
	mva YZ+1 :STACKORIGIN+STACKWIDTH,x
	mva YZ+2 :STACKORIGIN+STACKWIDTH*2,x
	mva YZ+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @I2F_m
	jsr @FMUL
	dex
	lda :STACKORIGIN+STACKWIDTH*3,x
	eor #$80
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr @F2I
	lda :STACKORIGIN,x
	add #$78
	sta SY
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta SY+1
	dex

; optimize OK (sphere.pas), line = 62

	lda SX
	sta GRAPH.PUTPIXEL.@018A.X
	lda SX+1
	sta GRAPH.PUTPIXEL.@018A.X+1
	lda SY
	sta GRAPH.PUTPIXEL.@018A.Y
	lda SY+1
	sta GRAPH.PUTPIXEL.@018A.Y+1
	lda #$0F
	sta GRAPH.PUTPIXEL.@018A.COLOR
	jsr GRAPH.PUTPIXEL.@018A
l_02FD
l_026A

; --- ForToDoEpilog
	inc LONGITUDE
	jne l_023A
	inc LONGITUDE+1
	jne l_023A
l_0246

; --- ForToDoEpilog
	inc LATITUDE
	jne l_0225
	inc LATITUDE+1
	jmp l_0225
l_0231

; ------------------------------------------------------------

SX	= DATAORIGIN+$0058
SY	= DATAORIGIN+$005A
LATITUDE	= DATAORIGIN+$005C
LONGITUDE	= DATAORIGIN+$005E
CR1	= DATAORIGIN+$0060
SR1	= DATAORIGIN+$0064
X	= DATAORIGIN+$0068
Y	= DATAORIGIN+$006C
Z	= DATAORIGIN+$0070
X1	= DATAORIGIN+$0074
Z1	= DATAORIGIN+$0078
Y1	= DATAORIGIN+$007C
X2	= DATAORIGIN+$0080
Y2	= DATAORIGIN+$0084
Z2	= DATAORIGIN+$0088
LR	= DATAORIGIN+$008C
LRX	= DATAORIGIN+$0090
CURRENT_RADIUS	= DATAORIGIN+$0094
XZ	= DATAORIGIN+$0098
YZ	= DATAORIGIN+$009C

@VarData	= SX
@VarDataSize	= 72

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0004

; optimize OK (sphere.pas), line = 70

	lda #$00
	jsr GRAPH.INITGRAPH.@017C

; optimize FAIL ('DODOTSSPHERE', sphere.pas), line = 71

	jsr DODOTSSPHERE

; --- RepeatUntilProlog
l_0371

; optimize FAIL ('CRT.KEYPRESSED', sphere.pas), line = 72

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_0371

; ------------------------------------------------------------

TURN	= DATAORIGIN+$0052
RX	= DATAORIGIN+$0056
RADIANS	= $04
MIDW	= $A0
MIDH	= $78
STEP_ANGLE	= $0C
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
NEO
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 160

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
