; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.1 [2024/01/31] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $00

zpage

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------

	opt h-f+c+

	org $8000
	jmp START

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_neo.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0004

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@006A

; -------------------  ASM Block 00000042  -------------------

	@SendMessage
	dta 1,1
	@WaitMessage
	mva DParameters last
@	
	@SendMessage
	dta 1,1
	@WaitMessage
	lda DParameters 
    cmp #0 
last = *-1
	beq @-
	rts 

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@006B

; -------------------  ASM Block 00000043  -------------------

	@SendMessage
	dta 1,1
	@WaitMessage
	mwa DParameters last
	adw last n last
@	
	@SendMessage
	dta 1,1
	@WaitMessage
	cpw DParameters last
	bmi @-
	rts 
last 
	dta a(0)

; ------------------------------------------------------------

N	= DATAORIGIN+$000B

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	NEO6502						; UNIT

.local	NEOWAITMESSAGE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000059  -------------------

   @WaitMessage 

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEOSENDMESSAGE					; FUNCTION

; optimize FAIL ('NEOWAITMESSAGE', NEO6502), line = 432

	jsr NEOWAITMESSAGE

; optimize OK (NEO6502), line = 433

	lda FUNC
	sta NEOMESSAGE.FUNC

; optimize OK (NEO6502), line = 434

	lda GROUP
	sta NEOMESSAGE.GROUP

; --- RepeatUntilProlog
l_0095

; optimize OK (NEO6502), line = 435

	lda NEOMESSAGE.GROUP
	jne l_0095

; optimize OK (NEO6502), line = 436

	lda adr.NEOMESSAGE.PARAMS
	sta RESULT
@exit

; ------------------------------------------------------------

GROUP	= DATAORIGIN+$000D
FUNC	= DATAORIGIN+$000E
RESULT	= DATAORIGIN+$000F

@VarData	= GROUP
@VarDataSize	= 2

	rts						; ret
.endl

.local	NEOSETPALETTE					; PROCEDURE

; optimize OK (NEO6502), line = 622

	lda COL
	sta adr.NEOMESSAGE.PARAMS

; optimize OK (NEO6502), line = 623

	lda R
	sta adr.NEOMESSAGE.PARAMS+$01

; optimize OK (NEO6502), line = 624

	lda G
	sta adr.NEOMESSAGE.PARAMS+$02

; optimize OK (NEO6502), line = 625

	lda B
	sta adr.NEOMESSAGE.PARAMS+$03

; optimize OK (NEO6502), line = 626

	lda #$05
	sta NEOSENDMESSAGE.GROUP
	lda #$20
	sta NEOSENDMESSAGE.FUNC
	jsr NEOSENDMESSAGE

; ------------------------------------------------------------

COL	= DATAORIGIN+$0010
R	= DATAORIGIN+$0011
G	= DATAORIGIN+$0012
B	= DATAORIGIN+$0013

@VarData	= COL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TURTLEINIT					; PROCEDURE
	sta S0

; optimize OK (NEO6502), line = 689

	sta adr.NEOMESSAGE.PARAMS

; optimize OK (NEO6502), line = 690

	lda #$09
	sta NEOSENDMESSAGE.GROUP
	lda #$01
	sta NEOSENDMESSAGE.FUNC
	jsr NEOSENDMESSAGE

; ------------------------------------------------------------

S0	= DATAORIGIN+$0014

@VarData	= S0
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TURTLERIGHT					; PROCEDURE

; optimize OK (NEO6502), line = 695

	lda DEG
	sta adr.WORDPARAMS
	lda DEG+1
	sta adr.WORDPARAMS+1

; optimize OK (NEO6502), line = 696

	lda #$09
	sta NEOSENDMESSAGE.GROUP
	lda #$02
	sta NEOSENDMESSAGE.FUNC
	jsr NEOSENDMESSAGE

; ------------------------------------------------------------

DEG	= DATAORIGIN+$0015

@VarData	= DEG
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TURTLEMOVE					; PROCEDURE

; optimize OK (NEO6502), line = 701

	lda DIST
	sta adr.WORDPARAMS
	lda DIST+1
	sta adr.WORDPARAMS+1

; optimize OK (NEO6502), line = 702

	lda COL
	sta adr.NEOMESSAGE.PARAMS+$02

; optimize OK (NEO6502), line = 703

	lda DRAWING
	sta adr.NEOMESSAGE.PARAMS+$03

; optimize OK (NEO6502), line = 704

	lda #$09
	sta NEOSENDMESSAGE.GROUP
	lda #$03
	sta NEOSENDMESSAGE.FUNC
	jsr NEOSENDMESSAGE

; ------------------------------------------------------------

DIST	= DATAORIGIN+$0017
COL	= DATAORIGIN+$0019
DRAWING	= DATAORIGIN+$001A

@VarData	= DIST
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TURTLEHOME					; PROCEDURE

; optimize OK (NEO6502), line = 714

	lda #$09
	sta NEOSENDMESSAGE.GROUP
	lda #$05
	sta NEOSENDMESSAGE.FUNC
	jsr NEOSENDMESSAGE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

N6502MSG_ADDRESS	= $FF00
NEO_GFX_RAM	= $FFFF
adr.NEOMESSAGE	= $FF00
.var NEOMESSAGE	= adr.NEOMESSAGE .word
NEOMESSAGE.GROUP	= $FF00
NEOMESSAGE.FUNC	= $FF01
NEOMESSAGE.ERROR	= $FF02
NEOMESSAGE.STATUS	= $FF03
adr.NEOMESSAGE.PARAMS	= $FF04
.var NEOMESSAGE.PARAMS	= adr.NEOMESSAGE.PARAMS .word
adr.WORDPARAMS	= $FF04
.var WORDPARAMS	= adr.WORDPARAMS .word
adr.DWORDPARAMS	= $FF04
.var DWORDPARAMS	= adr.DWORDPARAMS .word
adr.WORDXPARAMS	= $FF05
.var WORDXPARAMS	= adr.WORDXPARAMS .word
adr.SOUNDPARAMS	= $FF04
.var SOUNDPARAMS	= adr.SOUNDPARAMS .word
SOUNDPARAMS.CHANNEL	= $FF04
SOUNDPARAMS.FREQ	= $FF05
SOUNDPARAMS.LEN	= $FF07
SOUNDPARAMS.SLIDE	= $FF09
SOUNDPARAMS.STYPE	= $FF0B

.endl							; UNIT NEO6502

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$001B
WIN_RIGHT	= DATAORIGIN+$001D
WIN_TOP	= DATAORIGIN+$001F
WIN_BOTTOM	= DATAORIGIN+$0021
GRAPHRESULT	= DATAORIGIN+$0023
GETCOLOR	= DATAORIGIN+$0024
VIDEORAM	= DATAORIGIN+$0025
adr.LASTARCCOORDS	= DATAORIGIN+$0027	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0027
LASTARCCOORDS.Y	= DATAORIGIN+$0029
LASTARCCOORDS.XSTART	= DATAORIGIN+$002B
LASTARCCOORDS.YSTART	= DATAORIGIN+$002D
LASTARCCOORDS.XEND	= DATAORIGIN+$002F
LASTARCCOORDS.YEND	= DATAORIGIN+$0031
SCANLINE_WIDTH	= DATAORIGIN+$0033
CURRENTX	= DATAORIGIN+$0034
CURRENTY	= DATAORIGIN+$0036
LINEX	= DATAORIGIN+$0038
LINEY	= DATAORIGIN+$003A

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

; -------------------  ASM Block 00000069  -------------------

	@ClrScr
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000074  -------------------

	@SendMessage
	dta 2,2
	@WaitMessage
	lda DParameters
	sta result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$003C
	rts						; ret
.endl

; ------------------------------------------------------------

BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT
l_0004

; optimize OK (turtle.pas), line = 9

	lda #$01
	sta B

l_018C
; --- ForToDoCondition
	lda B
	cmp #$10
	jcs l_019A
	sta NEO6502.NEOSETPALETTE.COL
	lda #$0A
	sta NEO6502.NEOSETPALETTE.R
	lda #$C8
	sta NEO6502.NEOSETPALETTE.G
	lda #$FA
	sta NEO6502.NEOSETPALETTE.B
	jsr NEO6502.NEOSETPALETTE

; --- ForToDoEpilog
	inc B
	jne l_018C
l_019A

; optimize FAIL ('CRT.CLRSCR', turtle.pas), line = 10

	jsr CRT.CLRSCR

; optimize OK (turtle.pas), line = 11

	lda #$00
	jsr NEO6502.TURTLEINIT

; optimize OK (turtle.pas), line = 12

	lda #$5A
	sta NEO6502.TURTLERIGHT.DEG
	lda #$00
	sta NEO6502.TURTLERIGHT.DEG+1
	jsr NEO6502.TURTLERIGHT

; optimize OK (turtle.pas), line = 13

	lda #$01
	sta C

; optimize OK (turtle.pas), line = 14

	lda #$00
	sta B

l_01B8
; --- ForToDoCondition
	lda B
	cmp #$24
	jcs l_01C6

; optimize OK (turtle.pas), line = 15

	lda #$00
	sta W
	sta W+1

l_01CF
; --- ForToDoCondition
	lda W
	cmp #$24
	jcs l_01DD

; optimize OK (turtle.pas), line = 16

	lda #$0A
	sta NEO6502.TURTLEMOVE.DIST
	lda #$00
	sta NEO6502.TURTLEMOVE.DIST+1
	lda C
	sta NEO6502.TURTLEMOVE.COL
	lda #$01
	sta NEO6502.TURTLEMOVE.DRAWING
	jsr NEO6502.TURTLEMOVE

; optimize OK (turtle.pas), line = 17

	lda #$0A
	sta NEO6502.TURTLERIGHT.DEG
	lda #$00
	sta NEO6502.TURTLERIGHT.DEG+1
	jsr NEO6502.TURTLERIGHT

; --- ForToDoEpilog
	inc W
	jne l_01CF
l_01DD

; optimize FAIL ('SYSTEM.PAUSE.@006A', turtle.pas), line = 19

	jsr SYSTEM.PAUSE.@006A

; optimize OK (turtle.pas), line = 20

	lda #$0A
	sta NEO6502.TURTLERIGHT.DEG
	lda #$00
	sta NEO6502.TURTLERIGHT.DEG+1
	jsr NEO6502.TURTLERIGHT

; optimize FAIL (0, turtle.pas), line = 21

	inc C

; optimize OK (turtle.pas), line = 22

	lda C
	cmp #$10
	jne l_0203
	lda #$01
	sta C
l_0203

; --- ForToDoEpilog
	inc B
	jne l_01B8
l_01C6

; optimize FAIL ('NEO6502.TURTLEHOME', turtle.pas), line = 24

	jsr NEO6502.TURTLEHOME

; optimize OK (turtle.pas), line = 25

	lda #$00
	sta O

; --- RepeatUntilProlog
l_0215

; optimize OK (turtle.pas), line = 27

	lda #$01
	add O
	sta C

; optimize OK (turtle.pas), line = 28

	lda #$00
	sta B

l_0228
; --- ForToDoCondition
	lda B
	cmp #$0F
	jcs l_0236

; optimize OK (turtle.pas), line = 29

	lda C
	cmp #$10
	jcc l_0248
	lda #$01
	sta C
l_0248

; optimize OK (turtle.pas), line = 30

	lda B
	sta :ecx
	lda #$12
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta W+1
	lda :eax
	sta W

; optimize OK (turtle.pas), line = 31

	lda C
	sta NEO6502.NEOSETPALETTE.COL
	lda W
	sta NEO6502.NEOSETPALETTE.R
	sta NEO6502.NEOSETPALETTE.G
	sta NEO6502.NEOSETPALETTE.B
	jsr NEO6502.NEOSETPALETTE

; optimize FAIL (0, turtle.pas), line = 32

	inc C

; --- ForToDoEpilog
	inc B
	jne l_0228
l_0236

; optimize FAIL (0, turtle.pas), line = 34

	inc O

; optimize OK (turtle.pas), line = 35

	lda O
	cmp #$0F
	jcc l_0282
	lda #$00
	sta O
l_0282

; optimize OK (turtle.pas), line = 36

	lda #$05
	sta SYSTEM.PAUSE.@006B.N
	lda #$00
	sta SYSTEM.PAUSE.@006B.N+1
	jsr SYSTEM.PAUSE.@006B

; optimize FAIL ('CRT.KEYPRESSED', turtle.pas), line = 37

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_0215

; ------------------------------------------------------------

B	= DATAORIGIN+$003D
C	= DATAORIGIN+$003E
O	= DATAORIGIN+$003F
W	= DATAORIGIN+$0040
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
NEO
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.NEO6502.@UnitInit
	jsr MAIN.NEO6502.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.NEO6502) > 0
	.print 'NEO6502: ',MAIN.NEO6502,'..',MAIN.NEO6502+.SIZEOF(MAIN.NEO6502)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $27 $00 $00  $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 66

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
