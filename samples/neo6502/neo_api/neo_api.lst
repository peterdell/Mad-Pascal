mads 2.1.7 build 4 (2 Oct 23)
    54 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTBUF: ',@buf,'..',@buf+255
   105 				RTBUF: $0200..$02FF
   106
   107 				.print 'RTLIB: ',RTLIB,'..',*-1
   107 				RTLIB: $71EC..$7903
   108
   109 				; ------------------------------------------------------------
   110
   111 7904			START
   112 7904 BA				tsx
   113 7905 8E B5 89			stx MAIN.@halt+1
   114
   115 = 0004			VLEN	= VARDATASIZE-VARINITSIZE
   116 = 8BC2			VADR	= DATAORIGIN+VARINITSIZE
   117
   118 					ift VADR > $BFFF
   119 					ert 'Invalid memory address range ',VADR
   120 					eli (VLEN > 0) && (VLEN <= 256)
   121 7908 A2 FC			ldx #256-VLEN
   122 790A A9 00			lda #$00
   123 790C 9D C6 8A E8 D0 FA		sta:rne VADR+VLEN-256,x+
   124 					eli VLEN>256
   125 					m@init
   126 					eif
   127
   128 				.ifdef psptr
   129 					mwa #PROGRAMSTACK psptr
   130 				.fi
   131
   132 7912 A2 00			ldx #$00
   133 7914 86 00			stx bp						; BP = 0
   134
   135 7916 CA				dex						; X = 255
   136
   137 7917				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: neo_api.a65]
Source: neo_api.a65
   138
   139 7917			.local	MAIN						; PROCEDURE
   140
   141 7917 4C 2F 81			jmp l_01ED
   142
   143 				; ------------------------------------------------------------
   144
   145 791A			.local	SYSTEM						; UNIT
   146
   147 791A			.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   148 791A			.local	@022B
   149
   150 					.MACRO m@INLINE
   151 				
   152 				; -------------------  ASM Block 00000033  -------------------
   153 				
   154 					jsr @move
   155 				
   156 					.ENDM
   157
   158 				; ------------------------------------------------------------
   159
   160 = 0008			SOURCE	= :EDX
   161 = 000C			DEST	= :ECX
   162 = 0004			COUNT	= :EAX
   163 791A			@exit
   164 				.endl
   165 				.endl							; overload
   166
   167 791A			.local	RSINCOS						; FUNCTION
   168
   169 				; --- WhileProlog
   170 791A 4C 3E 79			jmp l_0231
   171 791D			l_0232
   172
   173 				; optimize OK (SYSTEM), line = 1866
   174
   175 791D AD CB 89			lda X
   176 7920 38 E9 48			sub #$48
   177 7923 8D CB 89			sta X
   178 7926 AD CC 89			lda X+1
   179 7929 E9 06			sbc #$06
   180 792B 8D CC 89			sta X+1
   181 792E AD CD 89			lda X+2
   182 7931 E9 00			sbc #$00
   183 7933 8D CD 89			sta X+2
   184 7936 AD CE 89			lda X+3
   185 7939 E9 00			sbc #$00
   186 793B 8D CE 89			sta X+3
   187 793E			l_0231
   188 793E				.LOCAL
   189 793E AD CE 89			lda X+3
   190 7941 38 E9 00			sub #$00
   191 7944 D0 1F			bne L4
   192 7946 AD CD 89			lda X+2
   193 7949 C9 00			cmp #$00
   194 794B D0 0C			bne L1
   195 794D AD CC 89			lda X+1
   196 7950 C9 06			cmp #$06
   197 7952 D0 05			bne L1
   198 7954 AD CB 89			lda X
   199 7957 C9 48			cmp #$48
   200 7959 F0 10		L1	beq L5
   201 795B B0 04			bcs L3
   202 795D A9 FF			lda #$FF
   203 795F D0 0A			bne L5
   204 7961 A9 01		L3	lda #$01
   205 7963 D0 06			bne L5
   206 7965 50 04		L4	bvc L5
   207 7967 49 FF			eor #$FF
   208 7969 09 01			ora #$01
   209 796B			L5
   210 					.ENDL
   211 796B 30 02			smi
   212 796D D0 AE			jne l_0232
   213
   214 				; --- WhileProlog
   215 796F 4C 93 79			jmp l_0246
   216 7972			l_0247
   217
   218 				; optimize OK (SYSTEM), line = 1867
   219
   220 7972 AD CB 89			lda X
   221 7975 18 69 48			add #$48
   222 7978 8D CB 89			sta X
   223 797B AD CC 89			lda X+1
   224 797E 69 06			adc #$06
   225 7980 8D CC 89			sta X+1
   226 7983 AD CD 89			lda X+2
   227 7986 69 00			adc #$00
   228 7988 8D CD 89			sta X+2
   229 798B AD CE 89			lda X+3
   230 798E 69 00			adc #$00
   231 7990 8D CE 89			sta X+3
   232 7993			l_0246
   233 7993 AD CE 89			lda X+3
   234 7996 30 DA			jmi l_0247
   235
   236 				; optimize OK (SYSTEM), line = 1870
   237
   238 7998 A9 A3			lda #$A3
   239 799A 85 0C			sta @REAL_MUL.B
   240 799C A9 00			lda #$00
   241 799E 85 0D			sta @REAL_MUL.B+1
   242 79A0 85 0E			sta @REAL_MUL.B+2
   243 79A2 85 0F			sta @REAL_MUL.B+3
   244 79A4 AD CB 89			lda X
   245 79A7 85 04			sta @REAL_MUL.A
   246 79A9 AD CC 89			lda X+1
   247 79AC 85 05			sta @REAL_MUL.A+1
   248 79AE AD CD 89			lda X+2
   249 79B1 85 06			sta @REAL_MUL.A+2
   250 79B3 AD CE 89			lda X+3
   251 79B6 85 07			sta @REAL_MUL.A+3
   252 79B8 20 95 73			jsr @REAL_MUL
   253 79BB A5 04			lda :eax
   254 79BD 8D CB 89			sta X
   255 79C0 A5 05			lda :eax+1
   256 79C2 8D CC 89			sta X+1
   257 79C5 A5 06			lda :eax+2
   258 79C7 8D CD 89			sta X+2
   259 79CA A5 07			lda :eax+3
   260 79CC 8D CE 89			sta X+3
   261
   262 				; optimize OK (SYSTEM), line = 1873
   263
   264 79CF AD CB 89			lda X
   265 79D2 85 04			sta @REAL_TRUNC.A
   266 79D4 AD CC 89			lda X+1
   267 79D7 85 05			sta @REAL_TRUNC.A+1
   268 79D9 AD CD 89			lda X+2
   269 79DC 85 06			sta @REAL_TRUNC.A+2
   270 79DE AD CE 89			lda X+3
   271 79E1 85 07			sta @REAL_TRUNC.A+3
   272 79E3 20 8A 74			jsr @REAL_TRUNC
   273 79E6 A5 04			lda :eax
   274 79E8 8D D4 89			sta I
   275
   276 				; optimize OK (SYSTEM), line = 1876
   277
   278 79EB AD CE 89			lda X+3
   279 79EE 10 03			jpl l_0275
   280 79F0 CE D4 89			dec I
   281 79F3			l_0275
   282
   283 				; optimize OK (SYSTEM), line = 1879
   284
   285 79F3 A0 00			ldy #$00
   286 79F5 AD D4 89			lda I
   287 79F8 10 01			spl
   288 79FA 88				dey
   289 79FB 85 2E			sta :STACKORIGIN+STACKWIDTH+10
   290 79FD 84 3E			sty :STACKORIGIN+STACKWIDTH*2+10
   291 79FF 84 4E			sty :STACKORIGIN+STACKWIDTH*3+10
   292 7A01 AD CC 89			lda X+1
   293 7A04 38 E5 2E			sub :STACKORIGIN+STACKWIDTH+10
   294 7A07 8D CC 89			sta X+1
   295 7A0A AD CD 89			lda X+2
   296 7A0D E5 3E			sbc :STACKORIGIN+STACKWIDTH*2+10
   297 7A0F 8D CD 89			sta X+2
   298 7A12 AD CE 89			lda X+3
   299 7A15 E5 4E			sbc :STACKORIGIN+STACKWIDTH*3+10
   300 7A17 8D CE 89			sta X+3
   301
   302 				; optimize OK (SYSTEM), line = 1882
   303
   304 7A1A AD CF 89			lda SC
   305 7A1D F0 03			jeq l_0292
   306 7A1F EE D4 89			inc I
   307 7A22			l_0292
   308
   309 				; optimize OK (SYSTEM), line = 1885
   310
   311 7A22 AD D4 89			lda I
   312 7A25 29 01			and #$01
   313 7A27 D0 21			jne l_02AF
   314 7A29 A9 00			lda #$00
   315 7A2B 38 ED CB 89			sub X
   316 7A2F 8D CB 89			sta X
   317 7A32 A9 01			lda #$01
   318 7A34 ED CC 89			sbc X+1
   319 7A37 8D CC 89			sta X+1
   320 7A3A A9 00			lda #$00
   321 7A3C ED CD 89			sbc X+2
   322 7A3F 8D CD 89			sta X+2
   323 7A42 A9 00			lda #$00
   324 7A44 ED CE 89			sbc X+3
   325 7A47 8D CE 89			sta X+3
   326 7A4A			l_02AF
   327
   328 				; optimize OK (SYSTEM), line = 1888
   329
   330 7A4A AD CB 89			lda X
   331 7A4D 85 0C			sta @REAL_MUL.B
   332 7A4F AD CC 89			lda X+1
   333 7A52 85 0D			sta @REAL_MUL.B+1
   334 7A54 AD CD 89			lda X+2
   335 7A57 85 0E			sta @REAL_MUL.B+2
   336 7A59 AD CE 89			lda X+3
   337 7A5C 85 0F			sta @REAL_MUL.B+3
   338 7A5E AD CB 89			lda X
   339 7A61 85 04			sta @REAL_MUL.A
   340 7A63 AD CC 89			lda X+1
   341 7A66 85 05			sta @REAL_MUL.A+1
   342 7A68 AD CD 89			lda X+2
   343 7A6B 85 06			sta @REAL_MUL.A+2
   344 7A6D AD CE 89			lda X+3
   345 7A70 85 07			sta @REAL_MUL.A+3
   346 7A72 20 95 73			jsr @REAL_MUL
   347 7A75 A5 04			lda :eax
   348 7A77 8D CB 89			sta X
   349 7A7A A5 05			lda :eax+1
   350 7A7C 8D CC 89			sta X+1
   351 7A7F A5 06			lda :eax+2
   352 7A81 8D CD 89			sta X+2
   353 7A84 A5 07			lda :eax+3
   354 7A86 8D CE 89			sta X+3
   355
   356 				; optimize OK (SYSTEM), line = 1889
   357
   358 7A89 AD CB 89			lda X
   359 7A8C 85 0C			sta @REAL_MUL.B
   360 7A8E AD CC 89			lda X+1
   361 7A91 85 0D			sta @REAL_MUL.B+1
   362 7A93 AD CD 89			lda X+2
   363 7A96 85 0E			sta @REAL_MUL.B+2
   364 7A98 AD CE 89			lda X+3
   365 7A9B 85 0F			sta @REAL_MUL.B+3
   366 7A9D A9 05			lda #$05
   367 7A9F 85 04			sta @REAL_MUL.A
   368 7AA1 A9 00			lda #$00
   369 7AA3 85 05			sta @REAL_MUL.A+1
   370 7AA5 85 06			sta @REAL_MUL.A+2
   371 7AA7 85 07			sta @REAL_MUL.A+3
   372 7AA9 20 95 73			jsr @REAL_MUL
   373 7AAC A5 04			lda :eax
   374 7AAE 38 E9 3C			sub #$3C
   375 7AB1 85 04			sta @REAL_MUL.A
   376 7AB3 A5 05			lda :eax+1
   377 7AB5 E9 00			sbc #$00
   378 7AB7 85 05			sta @REAL_MUL.A+1
   379 7AB9 A5 06			lda :eax+2
   380 7ABB E9 00			sbc #$00
   381 7ABD 85 06			sta @REAL_MUL.A+2
   382 7ABF A5 07			lda :eax+3
   383 7AC1 E9 00			sbc #$00
   384 7AC3 85 07			sta @REAL_MUL.A+3
   385 7AC5 AD CB 89			lda X
   386 7AC8 85 0C			sta @REAL_MUL.B
   387 7ACA AD CC 89			lda X+1
   388 7ACD 85 0D			sta @REAL_MUL.B+1
   389 7ACF AD CD 89			lda X+2
   390 7AD2 85 0E			sta @REAL_MUL.B+2
   391 7AD4 AD CE 89			lda X+3
   392 7AD7 85 0F			sta @REAL_MUL.B+3
   393 7AD9 20 95 73			jsr @REAL_MUL
   394 7ADC A5 05			lda :eax+1
   395 7ADE 18 69 01			add #$01
   396 7AE1 85 05			sta @REAL_MUL.A+1
   397 7AE3 A5 06			lda :eax+2
   398 7AE5 69 00			adc #$00
   399 7AE7 85 06			sta @REAL_MUL.A+2
   400 7AE9 A5 07			lda :eax+3
   401 7AEB 69 00			adc #$00
   402 7AED 85 07			sta @REAL_MUL.A+3
   403 7AEF A9 00			lda #$00
   404 7AF1 38 ED CB 89			sub X
   405 7AF5 85 0C			sta @REAL_MUL.B
   406 7AF7 A9 01			lda #$01
   407 7AF9 ED CC 89			sbc X+1
   408 7AFC 85 0D			sta @REAL_MUL.B+1
   409 7AFE A9 00			lda #$00
   410 7B00 ED CD 89			sbc X+2
   411 7B03 85 0E			sta @REAL_MUL.B+2
   412 7B05 A9 00			lda #$00
   413 7B07 ED CE 89			sbc X+3
   414 7B0A 85 0F			sta @REAL_MUL.B+3
   415 7B0C 20 95 73			jsr @REAL_MUL
   416 7B0F A5 04			lda :eax
   417 7B11 8D D0 89			sta RESULT
   418 7B14 A5 05			lda :eax+1
   419 7B16 8D D1 89			sta RESULT+1
   420 7B19 A5 06			lda :eax+2
   421 7B1B 8D D2 89			sta RESULT+2
   422 7B1E A5 07			lda :eax+3
   423 7B20 8D D3 89			sta RESULT+3
   424
   425 				; optimize OK (SYSTEM), line = 1892
   426
   427 7B23 AD D4 89			lda I
   428 7B26 29 02			and #$02
   429 7B28 C9 02			cmp #$02
   430 7B2A D0 21			jne l_02F4
   431 7B2C A9 00			lda #$00
   432 7B2E 38 ED D0 89			sub RESULT
   433 7B32 8D D0 89			sta RESULT
   434 7B35 A9 00			lda #$00
   435 7B37 ED D1 89			sbc RESULT+1
   436 7B3A 8D D1 89			sta RESULT+1
   437 7B3D A9 00			lda #$00
   438 7B3F ED D2 89			sbc RESULT+2
   439 7B42 8D D2 89			sta RESULT+2
   440 7B45 A9 00			lda #$00
   441 7B47 ED D3 89			sbc RESULT+3
   442 7B4A 8D D3 89			sta RESULT+3
   443 7B4D			l_02F4
   444 7B4D			@exit
   445
   446 				; ------------------------------------------------------------
   447
   448 = 89CB			X	= DATAORIGIN+$000B
   449 = 89CF			SC	= DATAORIGIN+$000F
   450 = 89D0			RESULT	= DATAORIGIN+$0010
   451 = 89D4			I	= DATAORIGIN+$0014
   452
   453 = 89CB			@VarData	= X
   454 = 0006			@VarDataSize	= 6
   455
   456 7B4D 60				rts						; ret
   457 				.endl
   458
   459 7B4E			.local	SIN						; FUNCTION | OVERLOAD
   460 7B4E			.local	@02FF
   461
   462 				; optimize OK (SYSTEM), line = 1907
   463
   464 7B4E AD D5 89			lda X
   465 7B51 8D CB 89			sta RSINCOS.X
   466 7B54 AD D6 89			lda X+1
   467 7B57 8D CC 89			sta RSINCOS.X+1
   468 7B5A AD D7 89			lda X+2
   469 7B5D 8D CD 89			sta RSINCOS.X+2
   470 7B60 AD D8 89			lda X+3
   471 7B63 8D CE 89			sta RSINCOS.X+3
   472 7B66 A9 00			lda #$00
   473 7B68 8D CF 89			sta RSINCOS.SC
   474 7B6B 20 1A 79			jsr RSINCOS
   475 7B6E AD D0 89			lda RSINCOS.RESULT
   476 7B71 8D D9 89			sta RESULT
   477 7B74 AD D1 89			lda RSINCOS.RESULT+1
   478 7B77 8D DA 89			sta RESULT+1
   479 7B7A AD D2 89			lda RSINCOS.RESULT+2
   480 7B7D 8D DB 89			sta RESULT+2
   481 7B80 AD D3 89			lda RSINCOS.RESULT+3
   482 7B83 8D DC 89			sta RESULT+3
   483 7B86			@exit
   484
   485 				; ------------------------------------------------------------
   486
   487 = 89D5			X	= DATAORIGIN+$0015
   488 = 89D9			RESULT	= DATAORIGIN+$0019
   489
   490 = 89D5			@VarData	= X
   491 = 0004			@VarDataSize	= 4
   492
   493 7B86 60				rts						; ret
   494 				.endl
   495 				.endl							; overload
   496
   497 7B87			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
   498 7B87			.local	@0327
   499
   500 				; -------------------  ASM Block 00000042  -------------------
   501
   502 7B87 20 5D 78			@SendMessage
   503 7B8A 01 01			dta 1,1
   504 7B8C 20 A0 78			@WaitMessage
   505 7B8F AD 04 FF 8D A1 7B		mva DParameters last
   506 				@	
   507 7B95 20 5D 78			@SendMessage
   508 7B98 01 01			dta 1,1
   509 7B9A 20 A0 78			@WaitMessage
   510 7B9D AD 04 FF			lda DParameters 
   511 7BA0 C9 00		    cmp #0 
   512 = 7BA1			last = *-1
   513 7BA2 F0 F1			beq @-
   514 7BA4 60				rts 
   515
   516 7BA5			@exit
   517 					.ifdef @new
   518 					lda <@VarData
   519 					sta :ztmp
   520 					lda >@VarData
   521 					ldy #@VarDataSize-1
   522 					jmp @FreeMem
   523 					els
   524 7BA5 60				rts						; ret
   525 					eif
   526 				.endl
   527 				.endl							; overload
   528
   529 7BA6			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
   530 7BA6			.local	@0328
   531
   532 				; -------------------  ASM Block 00000043  -------------------
   533
   534 7BA6 20 5D 78			@SendMessage
   535 7BA9 01 01			dta 1,1
   536 7BAB 20 A0 78			@WaitMessage
   537 7BAE AD 04 FF 8D E6 7B + 	mwa DParameters last
   538 7BBA 18 AD E6 7B 6D DD + 	adw last n last
   539 				@	
   540 7BCD 20 5D 78			@SendMessage
   541 7BD0 01 01			dta 1,1
   542 7BD2 20 A0 78			@WaitMessage
   543 7BD5 AD 05 FF CD E7 7B + 	cpw DParameters last
   544 7BE3 30 E8			bmi @-
   545 7BE5 60				rts 
   546 7BE6			last 
   547 7BE6 00 00			dta a(0)
   548
   549 				; ------------------------------------------------------------
   550
   551 = 89DD			N	= DATAORIGIN+$001D
   552
   553 = 89DD			@VarData	= N
   554 = 0002			@VarDataSize	= 2
   555
   556 7BE8			@exit
   557 					.ifdef @new
   558 					lda <@VarData
   559 					sta :ztmp
   560 					lda >@VarData
   561 					ldy #@VarDataSize-1
   562 					jmp @FreeMem
   563 					els
   564 7BE8 60				rts						; ret
   565 					eif
   566 				.endl
   567 				.endl							; overload
   568
   569 7BE9			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
   570
   571 				; -------------------  ASM Block 00000044  -------------------
   572
   573 7BE9 A9 2D		    lda #$2d 
   574 7BEB 8D D6 78		    sta randv0
   575 7BEE A9 10		    lda #$10
   576 7BF0 8D D7 78		    sta randv1
   577 7BF3 20 A8 78		    @ShuffleLFSR
   578 7BF6 AD D6 78		    lda randv0
   579 7BF9 4D D7 78		    eor randv1 
   580 7BFC 8D C9 89		    sta RndSeed
   581 7BFF A9 00 8D CA 89	    mva #$00 RndSeed+1
   582
   583 7C04			@exit
   584 					.ifdef @new
   585 					lda <@VarData
   586 					sta :ztmp
   587 					lda >@VarData
   588 					ldy #@VarDataSize-1
   589 					jmp @FreeMem
   590 					els
   591 7C04 60				rts						; ret
   592 					eif
   593 				.endl
   594
   595 7C05			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
   596 7C05			.local	@032A
   597 7C05 8D DF 89			sta RANGE
   598
   599 				; -------------------  ASM Block 00000048  -------------------
   600
   601 7C08 20 A8 78		  @ShuffleLFSR
   602 				  //lda randv0   ; RANDOM
   603 7C0B AD D7 78		  lda randv1
   604 7C0E A8			  tay
   605
   606 7C0F AD DF 89		  lda range
   607 7C12 F0 08		  beq stop
   608
   609 7C14 85 0C		  sta :ecx
   610 7C16 84 04		  sty :eax
   611
   612 7C18 20 E4 72		  jsr imulCL
   613 7C1B A8			  tay
   614
   615 7C1C 8C E0 89		stop  sty Result
   616
   617 7C1F			@exit
   618
   619 				; ------------------------------------------------------------
   620
   621 = 89DF			RANGE	= DATAORIGIN+$001F
   622 = 89E0			RESULT	= DATAORIGIN+$0020
   623
   624 = 89DF			@VarData	= RANGE
   625 = 0001			@VarDataSize	= 1
   626
   627 7C1F 60				rts						; ret
   628 				.endl
   629 				.endl							; overload
   630
   631 7C20			.local	RANDOM						; FUNCTION | OVERLOAD
   632 7C20			.local	@032B
   633
   634 				; optimize OK (system_neo.inc), line = 186
   635
   636 7C20 AD E2 89			lda RANGE+1
   637 7C23 0D E1 89			ora RANGE
   638 7C26 D0 0B			jne l_033F
   639
   640 				; optimize OK (system_neo.inc), line = 187
   641
   642 7C28 A9 00			lda #$00
   643 7C2A 8D E3 89			sta RESULT
   644 7C2D 8D E4 89			sta RESULT+1
   645 7C30 4C 95 7C			jmp l_034D
   646 7C33			l_033F
   647
   648 				; optimize OK (system_neo.inc), line = 190
   649
   650 7C33 AD C9 89			lda RNDSEED
   651 7C36 85 0C			sta :ecx
   652 7C38 AD CA 89			lda RNDSEED+1
   653 7C3B 85 0D			sta :ecx+1
   654 7C3D A9 95			lda #$95
   655 7C3F 85 04			sta :eax
   656 7C41 A9 45			lda #$45
   657 7C43 85 05			sta :eax+1
   658 					.ifdef fmulinit
   659 					fmulu_16
   660 					els
   661 7C45 20 FC 72			imulCX
   662 					eif
   663 7C48 A5 04			lda :eax
   664 7C4A 8D C9 89			sta RNDSEED
   665 7C4D A5 05			lda :eax+1
   666 7C4F 8D CA 89			sta RNDSEED+1
   667
   668 				; optimize OK (system_neo.inc), line = 191
   669
   670 7C52 AD E1 89			lda RANGE
   671 7C55 85 0C			sta @SMALLINT.MOD.B
   672 7C57 AD E2 89			lda RANGE+1
   673 7C5A 85 0D			sta @SMALLINT.MOD.B+1
   674 7C5C AD C9 89			lda RNDSEED
   675 7C5F 85 04			sta @SMALLINT.MOD.A
   676 7C61 AD CA 89			lda RNDSEED+1
   677 7C64 85 05			sta @SMALLINT.MOD.A+1
   678 7C66 20 A9 72			jsr @SMALLINT.MOD
   679 7C69 A5 10			lda @SMALLINT.MOD.RESULT
   680 7C6B 8D E3 89			sta RESULT
   681 7C6E A5 11			lda @SMALLINT.MOD.RESULT+1
   682 7C70 8D E4 89			sta RESULT+1
   683
   684 				; -------------------  ASM Block 00000049  -------------------
   685
   686 7C73 AD E2 89			lda range+1
   687 7C76 10 07			bpl plus
   688
   689 7C78 AD E4 89			lda Result+1
   690 7C7B 30 18			bmi ok
   691 7C7D 10 05			bpl sign
   692
   693 7C7F AD E4 89		plus	lda Result+1
   694 7C82 10 11			bpl ok
   695
   696 7C84 A9 00		sign 	lda #0
   697 7C86 38 ED E3 89			sub Result
   698 7C8A 8D E3 89			sta Result
   699
   700 7C8D A9 00			lda #0
   701 7C8F ED E4 89			sbc Result+1
   702 7C92 8D E4 89			sta Result+1
   703 7C95			ok
   704
   705 7C95			l_034D
   706 7C95			@exit
   707
   708 				; ------------------------------------------------------------
   709
   710 = 89E1			RANGE	= DATAORIGIN+$0021
   711 = 89E3			RESULT	= DATAORIGIN+$0023
   712
   713 = 89E1			@VarData	= RANGE
   714 = 0002			@VarDataSize	= 2
   715
   716 7C95 60				rts						; ret
   717 				.endl
   718 				.endl							; overload
   719
   720 7C96			.local	CONCAT						; FUNCTION | ASSEMBLER | OVERLOAD
   721 7C96			.local	@036D
   722
   723 				; -------------------  ASM Block 00000052  -------------------
   724
   725 7C96 AD E6 89 C9 02 D0 + 	cpw a #@buf
   726 7CA2 F0 0E			beq skp
   727
   728 7CA4 A9 00 8D 00 02		mva #0 @buf
   729 					@addString a
   729 				 LDY A+1\ LDA A\ JSR @ADDSTRING
   729 7CA9 AC E6 89		 LDY A+1
   729 7CAC AD E5 89		 LDA A
   729 7CAF 20 7C 72		 JSR @ADDSTRING
   730 7CB2			skp
   731 					@addString b
   731 				 LDY B+1\ LDA B\ JSR @ADDSTRING
   731 7CB2 AC E8 89		 LDY B+1
   731 7CB5 AD E7 89		 LDA B
   731 7CB8 20 7C 72		 JSR @ADDSTRING
   732
   733 7CBB A0 00			ldy #0
   734 7CBD B9 00 02 99 E9 89 + 	mva:rne @buf,y adr.Result,y+
   735
   736 7CC6			@exit
   737
   738 				; ------------------------------------------------------------
   739
   740 = 89E5			A	= DATAORIGIN+$0025
   741 = 89E7			B	= DATAORIGIN+$0027
   742 = 89E9			adr.RESULT	= [DATAORIGIN+$0029] .array [256]
   743 7CC6			.var RESULT	= adr.RESULT .word
   744
   745 = 89E5			@VarData	= A
   746 = 0104			@VarDataSize	= 260
   747
   748 7CC6 60				rts						; ret
   749 = 7CC7 E9 89		RESULT
   749 				.endl
   750 				.endl							; overload
   751
   752 				; ------------------------------------------------------------
   753
   754 = 0648			M_PI_2	= $0648
   755 = 0192			D_PI_2	= $0192
   756 = 0004			D_PI_180	= $04
   757 = 0004			FMOPENREAD	= $04
   758 = 0008			FMOPENWRITE	= $08
   759 = 0009			FMOPENAPPEND	= $09
   760 = 000C			FMOPENREADWRITE	= $0C
   761 = 89C0			SCREENWIDTH	= DATAORIGIN+$0000
   762 = 89C2			SCREENHEIGHT	= DATAORIGIN+$0002
   763 = 89C4			DATESEPARATOR	= DATAORIGIN+$0004
   764 = 89C5			FILEMODE	= DATAORIGIN+$0005
   765 = 89C6			GRAPHMODE	= DATAORIGIN+$0006
   766 = 89C7			IORESULT	= DATAORIGIN+$0007
   767 = 89C8			EOLN	= DATAORIGIN+$0008
   768 = 89C9			RNDSEED	= DATAORIGIN+$0009
   769
   770 				.endl							; UNIT SYSTEM
   771
   772 				; ------------------------------------------------------------
   773
   774 7CC9			.local	NEO6502						; UNIT
   775
   776 7CC9			.local	NEOWAITMESSAGE					; PROCEDURE | ASSEMBLER
   777
   778 				; -------------------  ASM Block 00000059  -------------------
   779
   780 7CC9 20 A0 78		   @WaitMessage 
   781
   782 7CCC			@exit
   783 					.ifdef @new
   784 					lda <@VarData
   785 					sta :ztmp
   786 					lda >@VarData
   787 					ldy #@VarDataSize-1
   788 					jmp @FreeMem
   789 					els
   790 7CCC 60				rts						; ret
   791 					eif
   792 				.endl
   793
   794 7CCD			.local	NEOSENDMESSAGE					; FUNCTION
   795
   796 				; optimize FAIL ('NEOWAITMESSAGE', NEO6502), line = 101
   797
   798 7CCD 20 C9 7C			jsr NEOWAITMESSAGE
   799
   800 				; optimize OK (NEO6502), line = 102
   801
   802 7CD0 AD EA 8A			lda FUNC
   803 7CD3 8D 01 FF			sta NEOMESSAGE.FUNC
   804
   805 				; optimize OK (NEO6502), line = 103
   806
   807 7CD6 AD E9 8A			lda GROUP
   808 7CD9 8D 00 FF			sta NEOMESSAGE.GROUP
   809
   810 				; --- RepeatUntilProlog
   811 7CDC			l_038A
   812
   813 				; optimize OK (NEO6502), line = 104
   814
   815 7CDC AD 00 FF			lda NEOMESSAGE.GROUP
   816 7CDF D0 FB			jne l_038A
   817
   818 				; optimize OK (NEO6502), line = 105
   819
   820 7CE1 AD 04 FF			lda adr.NEOMESSAGE.PARAMS
   821 7CE4 8D EB 8A			sta RESULT
   822 7CE7			@exit
   823
   824 				; ------------------------------------------------------------
   825
   826 = 8AE9			GROUP	= DATAORIGIN+$0129
   827 = 8AEA			FUNC	= DATAORIGIN+$012A
   828 = 8AEB			RESULT	= DATAORIGIN+$012B
   829
   830 = 8AE9			@VarData	= GROUP
   831 = 0002			@VarDataSize	= 2
   832
   833 7CE7 60				rts						; ret
   834 				.endl
   835
   836 7CE8			.local	NEOGETTIMER					; FUNCTION
   837
   838 				; optimize OK (NEO6502), line = 115
   839
   840 7CE8 A9 01			lda #$01
   841 7CEA 8D E9 8A			sta NEOSENDMESSAGE.GROUP
   842 7CED 8D EA 8A			sta NEOSENDMESSAGE.FUNC
   843 7CF0 20 CD 7C			jsr NEOSENDMESSAGE
   844
   845 				; optimize OK (NEO6502), line = 116
   846
   847 7CF3 AD 04 FF			lda adr.DWORDPARAMS
   848 7CF6 8D EC 8A			sta RESULT
   849 7CF9 AD 05 FF			lda adr.DWORDPARAMS+1
   850 7CFC 8D ED 8A			sta RESULT+1
   851 7CFF AD 06 FF			lda adr.DWORDPARAMS+2
   852 7D02 8D EE 8A			sta RESULT+2
   853 7D05 AD 07 FF			lda adr.DWORDPARAMS+3
   854 7D08 8D EF 8A			sta RESULT+3
   855 7D0B			@exit
   856
   857 				; ------------------------------------------------------------
   858
   859 = 8AEC			RESULT	= DATAORIGIN+$012C
   860 7D0B 60				rts						; ret
   861 				.endl
   862
   863 7D0C			.local	NEOCREDITS					; PROCEDURE
   864
   865 				; optimize OK (NEO6502), line = 132
   866
   867 7D0C A9 01			lda #$01
   868 7D0E 8D E9 8A			sta NEOSENDMESSAGE.GROUP
   869 7D11 A9 04			lda #$04
   870 7D13 8D EA 8A			sta NEOSENDMESSAGE.FUNC
   871 7D16 20 CD 7C			jsr NEOSENDMESSAGE
   872 7D19			@exit
   873 					.ifdef @new
   874 					lda <@VarData
   875 					sta :ztmp
   876 					lda >@VarData
   877 					ldy #@VarDataSize-1
   878 					jmp @FreeMem
   879 					els
   880 7D19 60				rts						; ret
   881 					eif
   882 				.endl
   883
   884 7D1A			.local	NEOSETCHAR					; PROCEDURE
   885
   886 				; optimize OK (NEO6502), line = 144
   887
   888 7D1A AD F0 8A			lda C
   889 7D1D 8D 04 FF			sta adr.NEOMESSAGE.PARAMS
   890
   891 				; optimize OK (NEO6502), line = 145
   892
   893 7D20 AD F1 8A			lda DATA
   894 7D23 85 02			sta :bp2
   895 7D25 AD F2 8A			lda DATA+1
   896 7D28 85 03			sta :bp2+1
   897 7D2A A0 06			ldy #$06
   898 7D2C B1 02 99 05 FF 88 + 	mva:rpl (:bp2),y $FF05,y-
   899
   900 				; optimize OK (NEO6502), line = 146
   901
   902 7D34 A9 02			lda #$02
   903 7D36 8D E9 8A			sta NEOSENDMESSAGE.GROUP
   904 7D39 A9 05			lda #$05
   905 7D3B 8D EA 8A			sta NEOSENDMESSAGE.FUNC
   906 7D3E 20 CD 7C			jsr NEOSENDMESSAGE
   907
   908 				; ------------------------------------------------------------
   909
   910 = 8AF0			C	= DATAORIGIN+$0130
   911 = 8AF1			DATA	= DATAORIGIN+$0131
   912
   913 = 8AF0			@VarData	= C
   914 = 0003			@VarDataSize	= 3
   915
   916 7D41			@exit
   917 					.ifdef @new
   918 					lda <@VarData
   919 					sta :ztmp
   920 					lda >@VarData
   921 					ldy #@VarDataSize-1
   922 					jmp @FreeMem
   923 					els
   924 7D41 60				rts						; ret
   925 					eif
   926 				.endl
   927
   928 7D42			.local	NEOLOAD						; FUNCTION
   929
   930 				; ------------------------------------------------------------
   931
   932 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   933 				; as Pointer
   934 7D42 B5 14			lda :STACKORIGIN,x
   935 7D44 85 02			sta :bp2
   936 7D46 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   937 7D48 85 03			sta :bp2+1
   938 7D4A A0 20			ldy #$20
   939 7D4C B1 02 99 F3 8A 88 + 	mva:rpl (:bp2),y adr.NAME,y-
   940 7D54 A9 F3 8D 9B 7D A9 + 	mwa #adr.NAME NAME
   941 7D5E CA				dex
   942 7D5F 30 0B			jmi @main
   943
   944 				; ------------------------------------------------------------
   945
   946 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   947 				; as Pointer
   948 7D61 B5 14			lda :STACKORIGIN,x
   949 7D63 8D 14 8B			sta DEST
   950 7D66 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   951 7D68 8D 15 8B			sta DEST+1
   952 7D6B CA				dex
   953 7D6C			@main
   954
   955 				; optimize OK (NEO6502), line = 158
   956
   957 7D6C AD 9B 7D			lda NAME
   958 7D6F 8D 04 FF			sta adr.WORDPARAMS
   959 7D72 AD 9C 7D			lda NAME+1
   960 7D75 8D 05 FF			sta adr.WORDPARAMS+1
   961
   962 				; optimize OK (NEO6502), line = 159
   963
   964 7D78 AD 14 8B			lda DEST
   965 7D7B 8D 06 FF			sta adr.WORDPARAMS+$02
   966 7D7E AD 15 8B			lda DEST+1
   967 7D81 8D 07 FF			sta adr.WORDPARAMS+1+$02
   968
   969 				; optimize OK (NEO6502), line = 160
   970
   971 7D84 A9 03			lda #$03
   972 7D86 8D E9 8A			sta NEOSENDMESSAGE.GROUP
   973 7D89 A9 02			lda #$02
   974 7D8B 8D EA 8A			sta NEOSENDMESSAGE.FUNC
   975 7D8E 20 CD 7C			jsr NEOSENDMESSAGE
   976
   977 				; optimize FAIL ('NEOWAITMESSAGE', NEO6502), line = 161
   978
   979 7D91 20 C9 7C			jsr NEOWAITMESSAGE
   980
   981 				; optimize OK (NEO6502), line = 162
   982
   983 7D94 AD 04 FF			lda adr.NEOMESSAGE.PARAMS
   984 7D97 8D 16 8B			sta RESULT
   985 7D9A			@exit
   986
   987 				; ------------------------------------------------------------
   988
   989 = 8AF3			adr.NAME	= [DATAORIGIN+$0133] .array [33]
   990 7D9A			.var NAME	= adr.NAME .word
   991 = 8B14			DEST	= DATAORIGIN+$0154
   992 = 8B16			RESULT	= DATAORIGIN+$0156
   993
   994 = 7D9B			@VarData	= NAME
   995 = 0023			@VarDataSize	= 35
   996
   997 7D9A 60				rts						; ret
   998 = 7D9B F3 8A		NAME
   998 				.endl
   999
  1000 7D9D			.local	NEOGETJOY					; FUNCTION
  1001 7D9D 8D 17 8B			sta PLAYER
  1002
  1003 				; optimize OK (NEO6502), line = 184
  1004
  1005 7DA0 A9 07			lda #$07
  1006 7DA2 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1007 7DA5 AD 17 8B			lda PLAYER
  1008 7DA8 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1009 7DAB 20 CD 7C			jsr NEOSENDMESSAGE
  1010 7DAE AD EB 8A			lda NEOSENDMESSAGE.RESULT
  1011 7DB1 8D 18 8B			sta RESULT
  1012 7DB4			@exit
  1013
  1014 				; ------------------------------------------------------------
  1015
  1016 = 8B17			PLAYER	= DATAORIGIN+$0157
  1017 = 8B18			RESULT	= DATAORIGIN+$0158
  1018
  1019 = 8B17			@VarData	= PLAYER
  1020 = 0001			@VarDataSize	= 1
  1021
  1022 7DB4 60				rts						; ret
  1023 				.endl
  1024
  1025 7DB5			.local	NEOSETCOLOR					; PROCEDURE
  1026
  1027 				; optimize OK (NEO6502), line = 232
  1028
  1029 7DB5 AD 19 8B			lda ACOL
  1030 7DB8 8D 04 FF			sta adr.NEOMESSAGE.PARAMS
  1031
  1032 				; optimize OK (NEO6502), line = 233
  1033
  1034 7DBB AD 1A 8B			lda XCOL
  1035 7DBE 8D 05 FF			sta adr.NEOMESSAGE.PARAMS+$01
  1036
  1037 				; optimize OK (NEO6502), line = 234
  1038
  1039 7DC1 AD 1B 8B			lda SOLID
  1040 7DC4 8D 06 FF			sta adr.NEOMESSAGE.PARAMS+$02
  1041
  1042 				; optimize OK (NEO6502), line = 235
  1043
  1044 7DC7 AD 1C 8B			lda SIZE
  1045 7DCA 8D 07 FF			sta adr.NEOMESSAGE.PARAMS+$03
  1046
  1047 				; optimize OK (NEO6502), line = 236
  1048
  1049 7DCD AD 1D 8B			lda FLIP
  1050 7DD0 8D 08 FF			sta adr.NEOMESSAGE.PARAMS+$04
  1051
  1052 				; optimize OK (NEO6502), line = 237
  1053
  1054 7DD3 A9 05			lda #$05
  1055 7DD5 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1056 7DD8 A9 01			lda #$01
  1057 7DDA 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1058 7DDD 20 CD 7C			jsr NEOSENDMESSAGE
  1059
  1060 				; ------------------------------------------------------------
  1061
  1062 = 8B19			ACOL	= DATAORIGIN+$0159
  1063 = 8B1A			XCOL	= DATAORIGIN+$015A
  1064 = 8B1B			SOLID	= DATAORIGIN+$015B
  1065 = 8B1C			SIZE	= DATAORIGIN+$015C
  1066 = 8B1D			FLIP	= DATAORIGIN+$015D
  1067
  1068 = 8B19			@VarData	= ACOL
  1069 = 0005			@VarDataSize	= 5
  1070
  1071 7DE0			@exit
  1072 					.ifdef @new
  1073 					lda <@VarData
  1074 					sta :ztmp
  1075 					lda >@VarData
  1076 					ldy #@VarDataSize-1
  1077 					jmp @FreeMem
  1078 					els
  1079 7DE0 60				rts						; ret
  1080 					eif
  1081 				.endl
  1082
  1083 7DE1			.local	NEODRAWLINE					; PROCEDURE
  1084
  1085 				; optimize OK (NEO6502), line = 242
  1086
  1087 7DE1 AD 1E 8B			lda X0
  1088 7DE4 8D 04 FF			sta adr.WORDPARAMS
  1089 7DE7 AD 1F 8B			lda X0+1
  1090 7DEA 8D 05 FF			sta adr.WORDPARAMS+1
  1091
  1092 				; optimize OK (NEO6502), line = 243
  1093
  1094 7DED AD 20 8B			lda Y0
  1095 7DF0 8D 06 FF			sta adr.WORDPARAMS+$02
  1096 7DF3 AD 21 8B			lda Y0+1
  1097 7DF6 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1098
  1099 				; optimize OK (NEO6502), line = 244
  1100
  1101 7DF9 AD 22 8B			lda X1
  1102 7DFC 8D 08 FF			sta adr.WORDPARAMS+$04
  1103 7DFF AD 23 8B			lda X1+1
  1104 7E02 8D 09 FF			sta adr.WORDPARAMS+1+$04
  1105
  1106 				; optimize OK (NEO6502), line = 245
  1107
  1108 7E05 AD 24 8B			lda Y1
  1109 7E08 8D 0A FF			sta adr.WORDPARAMS+$06
  1110 7E0B AD 25 8B			lda Y1+1
  1111 7E0E 8D 0B FF			sta adr.WORDPARAMS+1+$06
  1112
  1113 				; optimize OK (NEO6502), line = 246
  1114
  1115 7E11 A9 05			lda #$05
  1116 7E13 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1117 7E16 A9 02			lda #$02
  1118 7E18 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1119 7E1B 20 CD 7C			jsr NEOSENDMESSAGE
  1120
  1121 				; ------------------------------------------------------------
  1122
  1123 = 8B1E			X0	= DATAORIGIN+$015E
  1124 = 8B20			Y0	= DATAORIGIN+$0160
  1125 = 8B22			X1	= DATAORIGIN+$0162
  1126 = 8B24			Y1	= DATAORIGIN+$0164
  1127
  1128 = 8B1E			@VarData	= X0
  1129 = 0008			@VarDataSize	= 8
  1130
  1131 7E1E			@exit
  1132 					.ifdef @new
  1133 					lda <@VarData
  1134 					sta :ztmp
  1135 					lda >@VarData
  1136 					ldy #@VarDataSize-1
  1137 					jmp @FreeMem
  1138 					els
  1139 7E1E 60				rts						; ret
  1140 					eif
  1141 				.endl
  1142
  1143 7E1F			.local	NEODRAWRECT					; PROCEDURE
  1144
  1145 				; optimize OK (NEO6502), line = 251
  1146
  1147 7E1F AD 26 8B			lda X0
  1148 7E22 8D 04 FF			sta adr.WORDPARAMS
  1149 7E25 AD 27 8B			lda X0+1
  1150 7E28 8D 05 FF			sta adr.WORDPARAMS+1
  1151
  1152 				; optimize OK (NEO6502), line = 252
  1153
  1154 7E2B AD 28 8B			lda Y0
  1155 7E2E 8D 06 FF			sta adr.WORDPARAMS+$02
  1156 7E31 AD 29 8B			lda Y0+1
  1157 7E34 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1158
  1159 				; optimize OK (NEO6502), line = 253
  1160
  1161 7E37 AD 2A 8B			lda X1
  1162 7E3A 8D 08 FF			sta adr.WORDPARAMS+$04
  1163 7E3D AD 2B 8B			lda X1+1
  1164 7E40 8D 09 FF			sta adr.WORDPARAMS+1+$04
  1165
  1166 				; optimize OK (NEO6502), line = 254
  1167
  1168 7E43 AD 2C 8B			lda Y1
  1169 7E46 8D 0A FF			sta adr.WORDPARAMS+$06
  1170 7E49 AD 2D 8B			lda Y1+1
  1171 7E4C 8D 0B FF			sta adr.WORDPARAMS+1+$06
  1172
  1173 				; optimize OK (NEO6502), line = 255
  1174
  1175 7E4F A9 05			lda #$05
  1176 7E51 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1177 7E54 A9 03			lda #$03
  1178 7E56 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1179 7E59 20 CD 7C			jsr NEOSENDMESSAGE
  1180
  1181 				; ------------------------------------------------------------
  1182
  1183 = 8B26			X0	= DATAORIGIN+$0166
  1184 = 8B28			Y0	= DATAORIGIN+$0168
  1185 = 8B2A			X1	= DATAORIGIN+$016A
  1186 = 8B2C			Y1	= DATAORIGIN+$016C
  1187
  1188 = 8B26			@VarData	= X0
  1189 = 0008			@VarDataSize	= 8
  1190
  1191 7E5C			@exit
  1192 					.ifdef @new
  1193 					lda <@VarData
  1194 					sta :ztmp
  1195 					lda >@VarData
  1196 					ldy #@VarDataSize-1
  1197 					jmp @FreeMem
  1198 					els
  1199 7E5C 60				rts						; ret
  1200 					eif
  1201 				.endl
  1202
  1203 7E5D			.local	NEODRAWELLIPSE					; PROCEDURE
  1204
  1205 				; optimize OK (NEO6502), line = 260
  1206
  1207 7E5D AD 2E 8B			lda X0
  1208 7E60 8D 04 FF			sta adr.WORDPARAMS
  1209 7E63 AD 2F 8B			lda X0+1
  1210 7E66 8D 05 FF			sta adr.WORDPARAMS+1
  1211
  1212 				; optimize OK (NEO6502), line = 261
  1213
  1214 7E69 AD 30 8B			lda Y0
  1215 7E6C 8D 06 FF			sta adr.WORDPARAMS+$02
  1216 7E6F AD 31 8B			lda Y0+1
  1217 7E72 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1218
  1219 				; optimize OK (NEO6502), line = 262
  1220
  1221 7E75 AD 32 8B			lda X1
  1222 7E78 8D 08 FF			sta adr.WORDPARAMS+$04
  1223 7E7B AD 33 8B			lda X1+1
  1224 7E7E 8D 09 FF			sta adr.WORDPARAMS+1+$04
  1225
  1226 				; optimize OK (NEO6502), line = 263
  1227
  1228 7E81 AD 34 8B			lda Y1
  1229 7E84 8D 0A FF			sta adr.WORDPARAMS+$06
  1230 7E87 AD 35 8B			lda Y1+1
  1231 7E8A 8D 0B FF			sta adr.WORDPARAMS+1+$06
  1232
  1233 				; optimize OK (NEO6502), line = 264
  1234
  1235 7E8D A9 05			lda #$05
  1236 7E8F 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1237 7E92 A9 04			lda #$04
  1238 7E94 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1239 7E97 20 CD 7C			jsr NEOSENDMESSAGE
  1240
  1241 				; ------------------------------------------------------------
  1242
  1243 = 8B2E			X0	= DATAORIGIN+$016E
  1244 = 8B30			Y0	= DATAORIGIN+$0170
  1245 = 8B32			X1	= DATAORIGIN+$0172
  1246 = 8B34			Y1	= DATAORIGIN+$0174
  1247
  1248 = 8B2E			@VarData	= X0
  1249 = 0008			@VarDataSize	= 8
  1250
  1251 7E9A			@exit
  1252 					.ifdef @new
  1253 					lda <@VarData
  1254 					sta :ztmp
  1255 					lda >@VarData
  1256 					ldy #@VarDataSize-1
  1257 					jmp @FreeMem
  1258 					els
  1259 7E9A 60				rts						; ret
  1260 					eif
  1261 				.endl
  1262
  1263 7E9B			.local	NEODRAWSTRING					; PROCEDURE
  1264
  1265 				; optimize OK (NEO6502), line = 276
  1266
  1267 7E9B AD 36 8B			lda X0
  1268 7E9E 8D 04 FF			sta adr.WORDPARAMS
  1269 7EA1 AD 37 8B			lda X0+1
  1270 7EA4 8D 05 FF			sta adr.WORDPARAMS+1
  1271
  1272 				; optimize OK (NEO6502), line = 277
  1273
  1274 7EA7 AD 38 8B			lda Y0
  1275 7EAA 8D 06 FF			sta adr.WORDPARAMS+$02
  1276 7EAD AD 39 8B			lda Y0+1
  1277 7EB0 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1278
  1279 				; optimize OK (NEO6502), line = 278
  1280
  1281 7EB3 AD 3A 8B			lda S
  1282 7EB6 8D 08 FF			sta adr.WORDPARAMS+$04
  1283 7EB9 AD 3B 8B			lda S+1
  1284 7EBC 8D 09 FF			sta adr.WORDPARAMS+1+$04
  1285
  1286 				; optimize OK (NEO6502), line = 279
  1287
  1288 7EBF A9 05			lda #$05
  1289 7EC1 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1290 7EC4 A9 06			lda #$06
  1291 7EC6 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1292 7EC9 20 CD 7C			jsr NEOSENDMESSAGE
  1293
  1294 				; ------------------------------------------------------------
  1295
  1296 = 8B36			X0	= DATAORIGIN+$0176
  1297 = 8B38			Y0	= DATAORIGIN+$0178
  1298 = 8B3A			S	= DATAORIGIN+$017A
  1299
  1300 = 8B36			@VarData	= X0
  1301 = 0006			@VarDataSize	= 6
  1302
  1303 7ECC			@exit
  1304 					.ifdef @new
  1305 					lda <@VarData
  1306 					sta :ztmp
  1307 					lda >@VarData
  1308 					ldy #@VarDataSize-1
  1309 					jmp @FreeMem
  1310 					els
  1311 7ECC 60				rts						; ret
  1312 					eif
  1313 				.endl
  1314
  1315 7ECD			.local	NEODRAWIMAGE					; PROCEDURE
  1316
  1317 				; optimize OK (NEO6502), line = 284
  1318
  1319 7ECD AD 3C 8B			lda X0
  1320 7ED0 8D 04 FF			sta adr.WORDPARAMS
  1321 7ED3 AD 3D 8B			lda X0+1
  1322 7ED6 8D 05 FF			sta adr.WORDPARAMS+1
  1323
  1324 				; optimize OK (NEO6502), line = 285
  1325
  1326 7ED9 AD 3E 8B			lda Y0
  1327 7EDC 8D 06 FF			sta adr.WORDPARAMS+$02
  1328 7EDF AD 3F 8B			lda Y0+1
  1329 7EE2 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1330
  1331 				; optimize OK (NEO6502), line = 286
  1332
  1333 7EE5 AD 40 8B			lda ID
  1334 7EE8 8D 08 FF			sta adr.NEOMESSAGE.PARAMS+$04
  1335
  1336 				; optimize OK (NEO6502), line = 287
  1337
  1338 7EEB A9 05			lda #$05
  1339 7EED 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1340 7EF0 A9 07			lda #$07
  1341 7EF2 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1342 7EF5 20 CD 7C			jsr NEOSENDMESSAGE
  1343
  1344 				; ------------------------------------------------------------
  1345
  1346 = 8B3C			X0	= DATAORIGIN+$017C
  1347 = 8B3E			Y0	= DATAORIGIN+$017E
  1348 = 8B40			ID	= DATAORIGIN+$0180
  1349
  1350 = 8B3C			@VarData	= X0
  1351 = 0005			@VarDataSize	= 5
  1352
  1353 7EF8			@exit
  1354 					.ifdef @new
  1355 					lda <@VarData
  1356 					sta :ztmp
  1357 					lda >@VarData
  1358 					ldy #@VarDataSize-1
  1359 					jmp @FreeMem
  1360 					els
  1361 7EF8 60				rts						; ret
  1362 					eif
  1363 				.endl
  1364
  1365 7EF9			.local	NEODRAWTILEMAP					; PROCEDURE
  1366
  1367 				; optimize OK (NEO6502), line = 292
  1368
  1369 7EF9 AD 41 8B			lda X0
  1370 7EFC 8D 04 FF			sta adr.WORDPARAMS
  1371 7EFF AD 42 8B			lda X0+1
  1372 7F02 8D 05 FF			sta adr.WORDPARAMS+1
  1373
  1374 				; optimize OK (NEO6502), line = 293
  1375
  1376 7F05 AD 43 8B			lda Y0
  1377 7F08 8D 06 FF			sta adr.WORDPARAMS+$02
  1378 7F0B AD 44 8B			lda Y0+1
  1379 7F0E 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1380
  1381 				; optimize OK (NEO6502), line = 294
  1382
  1383 7F11 AD 45 8B			lda X1
  1384 7F14 8D 08 FF			sta adr.WORDPARAMS+$04
  1385 7F17 AD 46 8B			lda X1+1
  1386 7F1A 8D 09 FF			sta adr.WORDPARAMS+1+$04
  1387
  1388 				; optimize OK (NEO6502), line = 295
  1389
  1390 7F1D AD 47 8B			lda Y1
  1391 7F20 8D 0A FF			sta adr.WORDPARAMS+$06
  1392 7F23 AD 48 8B			lda Y1+1
  1393 7F26 8D 0B FF			sta adr.WORDPARAMS+1+$06
  1394
  1395 				; optimize OK (NEO6502), line = 296
  1396
  1397 7F29 A9 05			lda #$05
  1398 7F2B 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1399 7F2E A9 08			lda #$08
  1400 7F30 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1401 7F33 20 CD 7C			jsr NEOSENDMESSAGE
  1402
  1403 				; ------------------------------------------------------------
  1404
  1405 = 8B41			X0	= DATAORIGIN+$0181
  1406 = 8B43			Y0	= DATAORIGIN+$0183
  1407 = 8B45			X1	= DATAORIGIN+$0185
  1408 = 8B47			Y1	= DATAORIGIN+$0187
  1409
  1410 = 8B41			@VarData	= X0
  1411 = 0008			@VarDataSize	= 8
  1412
  1413 7F36			@exit
  1414 					.ifdef @new
  1415 					lda <@VarData
  1416 					sta :ztmp
  1417 					lda >@VarData
  1418 					ldy #@VarDataSize-1
  1419 					jmp @FreeMem
  1420 					els
  1421 7F36 60				rts						; ret
  1422 					eif
  1423 				.endl
  1424
  1425 7F37			.local	NEOSELECTTILEMAP				; PROCEDURE
  1426
  1427 				; optimize OK (NEO6502), line = 322
  1428
  1429 7F37 AD 49 8B			lda MEM
  1430 7F3A 8D 04 FF			sta adr.WORDPARAMS
  1431 7F3D AD 4A 8B			lda MEM+1
  1432 7F40 8D 05 FF			sta adr.WORDPARAMS+1
  1433
  1434 				; optimize OK (NEO6502), line = 323
  1435
  1436 7F43 AD 4B 8B			lda XOFFSET
  1437 7F46 8D 06 FF			sta adr.WORDPARAMS+$02
  1438 7F49 AD 4C 8B			lda XOFFSET+1
  1439 7F4C 8D 07 FF			sta adr.WORDPARAMS+1+$02
  1440
  1441 				; optimize OK (NEO6502), line = 324
  1442
  1443 7F4F AD 4D 8B			lda YOFFSET
  1444 7F52 8D 08 FF			sta adr.WORDPARAMS+$04
  1445 7F55 AD 4E 8B			lda YOFFSET+1
  1446 7F58 8D 09 FF			sta adr.WORDPARAMS+1+$04
  1447
  1448 				; optimize OK (NEO6502), line = 325
  1449
  1450 7F5B A9 05			lda #$05
  1451 7F5D 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1452 7F60 A9 23			lda #$23
  1453 7F62 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1454 7F65 20 CD 7C			jsr NEOSENDMESSAGE
  1455
  1456 				; ------------------------------------------------------------
  1457
  1458 = 8B49			MEM	= DATAORIGIN+$0189
  1459 = 8B4B			XOFFSET	= DATAORIGIN+$018B
  1460 = 8B4D			YOFFSET	= DATAORIGIN+$018D
  1461
  1462 = 8B49			@VarData	= MEM
  1463 = 0006			@VarDataSize	= 6
  1464
  1465 7F68			@exit
  1466 					.ifdef @new
  1467 					lda <@VarData
  1468 					sta :ztmp
  1469 					lda >@VarData
  1470 					ldy #@VarDataSize-1
  1471 					jmp @FreeMem
  1472 					els
  1473 7F68 60				rts						; ret
  1474 					eif
  1475 				.endl
  1476
  1477 7F69			.local	NEOUPDATESPRITE					; PROCEDURE
  1478
  1479 				; optimize OK (NEO6502), line = 336
  1480
  1481 7F69 AD 4F 8B			lda S0
  1482 7F6C 8D 04 FF			sta adr.NEOMESSAGE.PARAMS
  1483
  1484 				; optimize OK (NEO6502), line = 337
  1485
  1486 7F6F AD 50 8B			lda X
  1487 7F72 8D 05 FF			sta adr.WORDXPARAMS
  1488 7F75 AD 51 8B			lda X+1
  1489 7F78 8D 06 FF			sta adr.WORDXPARAMS+1
  1490
  1491 				; optimize OK (NEO6502), line = 338
  1492
  1493 7F7B AD 52 8B			lda Y
  1494 7F7E 8D 07 FF			sta adr.WORDXPARAMS+$02
  1495 7F81 AD 53 8B			lda Y+1
  1496 7F84 8D 08 FF			sta adr.WORDXPARAMS+1+$02
  1497
  1498 				; optimize OK (NEO6502), line = 339
  1499
  1500 7F87 AD 54 8B			lda IMAGE
  1501 7F8A 8D 09 FF			sta adr.NEOMESSAGE.PARAMS+$05
  1502
  1503 				; optimize OK (NEO6502), line = 340
  1504
  1505 7F8D AD 55 8B			lda FLIP
  1506 7F90 8D 0A FF			sta adr.NEOMESSAGE.PARAMS+$06
  1507
  1508 				; optimize OK (NEO6502), line = 341
  1509
  1510 7F93 AD 56 8B			lda ANCHOR
  1511 7F96 8D 0B FF			sta adr.NEOMESSAGE.PARAMS+$07
  1512
  1513 				; optimize OK (NEO6502), line = 342
  1514
  1515 7F99 A9 06			lda #$06
  1516 7F9B 8D E9 8A			sta NEOSENDMESSAGE.GROUP
  1517 7F9E A9 02			lda #$02
  1518 7FA0 8D EA 8A			sta NEOSENDMESSAGE.FUNC
  1519 7FA3 20 CD 7C			jsr NEOSENDMESSAGE
  1520
  1521 				; ------------------------------------------------------------
  1522
  1523 = 8B4F			S0	= DATAORIGIN+$018F
  1524 = 8B50			X	= DATAORIGIN+$0190
  1525 = 8B52			Y	= DATAORIGIN+$0192
  1526 = 8B54			IMAGE	= DATAORIGIN+$0194
  1527 = 8B55			FLIP	= DATAORIGIN+$0195
  1528 = 8B56			ANCHOR	= DATAORIGIN+$0196
  1529
  1530 = 8B4F			@VarData	= S0
  1531 = 0008			@VarDataSize	= 8
  1532
  1533 7FA6			@exit
  1534 					.ifdef @new
  1535 					lda <@VarData
  1536 					sta :ztmp
  1537 					lda >@VarData
  1538 					ldy #@VarDataSize-1
  1539 					jmp @FreeMem
  1540 					els
  1541 7FA6 60				rts						; ret
  1542 					eif
  1543 				.endl
  1544
  1545 				; ------------------------------------------------------------
  1546
  1547 = FF00			N6502MSG_ADDRESS	= $FF00
  1548 = FFFF			NEO_GFX_RAM	= $FFFF
  1549 = FF00			adr.NEOMESSAGE	= $FF00
  1550 7FA7			.var NEOMESSAGE	= adr.NEOMESSAGE .word
  1551 = FF00			NEOMESSAGE.GROUP	= $FF00
  1552 = FF01			NEOMESSAGE.FUNC	= $FF01
  1553 = FF02			NEOMESSAGE.ERROR	= $FF02
  1554 = FF03			NEOMESSAGE.STATUS	= $FF03
  1555 = FF04			adr.NEOMESSAGE.PARAMS	= $FF04
  1556 7FA7			.var NEOMESSAGE.PARAMS	= adr.NEOMESSAGE.PARAMS .word
  1557 = FF04			adr.WORDPARAMS	= $FF04
  1558 7FA7			.var WORDPARAMS	= adr.WORDPARAMS .word
  1559 = FF05			adr.WORDXPARAMS	= $FF05
  1560 7FA7			.var WORDXPARAMS	= adr.WORDXPARAMS .word
  1561 = FF04			adr.DWORDPARAMS	= $FF04
  1562 7FA7			.var DWORDPARAMS	= adr.DWORDPARAMS .word
  1563 = FF04			adr.SOUNDPARAMS	= $FF04
  1564 7FA7			.var SOUNDPARAMS	= adr.SOUNDPARAMS .word
  1565 = FF04			SOUNDPARAMS.CHANNEL	= $FF04
  1566 = FF05			SOUNDPARAMS.FREQ	= $FF05
  1567 = FF07			SOUNDPARAMS.LEN	= $FF07
  1568 = FF09			SOUNDPARAMS.SLIDE	= $FF09
  1569 = FF0B			SOUNDPARAMS.STYPE	= $FF0B
  1570
  1571 = 7FA7 00 FF		NEOMESSAGE
  1571 = 7FA9 04 FF		NEOMESSAGE.PARAMS
  1571 = 7FAB 04 FF		WORDPARAMS
  1571 = 7FAD 05 FF		WORDXPARAMS
  1571 = 7FAF 04 FF		DWORDPARAMS
  1571 = 7FB1 04 FF		SOUNDPARAMS
  1571 				.endl							; UNIT NEO6502
  1572
  1573 				; ------------------------------------------------------------
  1574
  1575 7FB3			.local	TYPES						; UNIT
  1576
  1577 				; ------------------------------------------------------------
  1578
  1579 				.endl							; UNIT TYPES
  1580
  1581 				; ------------------------------------------------------------
  1582
  1583 7FB3			.local	GRAPH						; UNIT
  1584
  1585 7FB3			.local	INITGRAPH					; PROCEDURE | OVERLOAD
  1586 7FB3			.local	@0528
  1587 7FB3 8D 78 8B			sta MODE
  1588
  1589 				; optimize OK (graph_neo.inc), line = 9
  1590
  1591 7FB6 A9 40			lda #$40
  1592 7FB8 8D C0 89			sta SYSTEM.SCREENWIDTH
  1593 7FBB A9 01			lda #$01
  1594 7FBD 8D C1 89			sta SYSTEM.SCREENWIDTH+1
  1595
  1596 				; optimize OK (graph_neo.inc), line = 10
  1597
  1598 7FC0 A9 F0			lda #$F0
  1599 7FC2 8D C2 89			sta SYSTEM.SCREENHEIGHT
  1600 7FC5 A9 00			lda #$00
  1601 7FC7 8D C3 89			sta SYSTEM.SCREENHEIGHT+1
  1602
  1603 				; -------------------  ASM Block 00000060  -------------------
  1604
  1605 7FCA 20 E8 78			    @ClrScr
  1606 					
  1607 				; ------------------------------------------------------------
  1608
  1609 = 8B78			MODE	= DATAORIGIN+$01B8
  1610
  1611 = 8B78			@VarData	= MODE
  1612 = 0001			@VarDataSize	= 1
  1613
  1614 7FCD			@exit
  1615 					.ifdef @new
  1616 					lda <@VarData
  1617 					sta :ztmp
  1618 					lda >@VarData
  1619 					ldy #@VarDataSize-1
  1620 					jmp @FreeMem
  1621 					els
  1622 7FCD 60				rts						; ret
  1623 					eif
  1624 				.endl
  1625 				.endl							; overload
  1626
  1627 				; ------------------------------------------------------------
  1628
  1629 = 0080			CURRENTDRIVER	= $80
  1630 = 0000			DETECT	= $00
  1631 = 0001			CGA	= $01
  1632 = 0002			MCGA	= $02
  1633 = 0003			EGA	= $03
  1634 = 0004			EGA64	= $04
  1635 = 0005			EGAMONO	= $05
  1636 = 0006			LOWRES	= $06
  1637 = 0007			HERCMONO	= $07
  1638 = 0009			VGA	= $09
  1639 = 000A			VESA	= $0A
  1640 = 000B			D1BIT	= $0B
  1641 = 000C			D2BIT	= $0C
  1642 = 000D			D4BIT	= $0D
  1643 = 000E			D6BIT	= $0E
  1644 = 000F			D8BIT	= $0F
  1645 = 0010			D12BIT	= $10
  1646 = 0018			M640X400	= $18
  1647 = 0018			M640X480	= $18
  1648 = 0001			GROK	= $01
  1649 = 00FF			GRNOINITGRAPH	= $FF
  1650 = 00FE			GRNOTDETECTED	= $FE
  1651 = 00FD			GRFILENOTFOUND	= $FD
  1652 = 00FC			GRINVALIDDRIVER	= $FC
  1653 = 00FB			GRNOLOADMEM	= $FB
  1654 = 00FA			GRNOSCANMEM	= $FA
  1655 = 00F9			GRNOFLOODMEM	= $F9
  1656 = 00F8			GRFONTNOTFOUND	= $F8
  1657 = 00F7			GRNOFONTMEM	= $F7
  1658 = 00F6			GRINVALIDMODE	= $F6
  1659 = 00F5			GRERROR	= $F5
  1660 = 00F4			GRIOERROR	= $F4
  1661 = 00F3			GRINVALIDFONT	= $F3
  1662 = 00F2			GRINVALIDFONTNUM	= $F2
  1663 = 00EE			GRINVALIDVERSION	= $EE
  1664 = 0000			CGAC0	= $00
  1665 = 0001			CGAC1	= $01
  1666 = 0002			CGAC2	= $02
  1667 = 0003			CGAC3	= $03
  1668 = 0004			CGAHI	= $04
  1669 = 0000			MCGAC0	= $00
  1670 = 0001			MCGAC1	= $01
  1671 = 0002			MCGAC2	= $02
  1672 = 0003			MCGAC3	= $03
  1673 = 0004			MCGAMED	= $04
  1674 = 0005			MCGAHI	= $05
  1675 = 0000			EGALO	= $00
  1676 = 0001			EGAHI	= $01
  1677 = 0000			EGA64LO	= $00
  1678 = 0001			EGA64HI	= $01
  1679 = 0003			EGAMONOHI	= $03
  1680 = 000A			VGALO	= $0A
  1681 = 001F			VGAMED	= $1F
  1682 = 0018			VGAHI	= $18
  1683 = 8B57			WIN_LEFT	= DATAORIGIN+$0197
  1684 = 8B59			WIN_RIGHT	= DATAORIGIN+$0199
  1685 = 8B5B			WIN_TOP	= DATAORIGIN+$019B
  1686 = 8B5D			WIN_BOTTOM	= DATAORIGIN+$019D
  1687 = 8B5F			GRAPHRESULT	= DATAORIGIN+$019F
  1688 = 8B60			GETCOLOR	= DATAORIGIN+$01A0
  1689 = 8B61			VIDEORAM	= DATAORIGIN+$01A1
  1690 = 8B63			adr.LASTARCCOORDS	= DATAORIGIN+$01A3	; [12] RECORD
  1691 7FCE			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1692 = 8B63			LASTARCCOORDS.X	= DATAORIGIN+$01A3
  1693 = 8B65			LASTARCCOORDS.Y	= DATAORIGIN+$01A5
  1694 = 8B67			LASTARCCOORDS.XSTART	= DATAORIGIN+$01A7
  1695 = 8B69			LASTARCCOORDS.YSTART	= DATAORIGIN+$01A9
  1696 = 8B6B			LASTARCCOORDS.XEND	= DATAORIGIN+$01AB
  1697 = 8B6D			LASTARCCOORDS.YEND	= DATAORIGIN+$01AD
  1698 = 8B6F			SCANLINE_WIDTH	= DATAORIGIN+$01AF
  1699 = 8B70			CURRENTX	= DATAORIGIN+$01B0
  1700 = 8B72			CURRENTY	= DATAORIGIN+$01B2
  1701 = 8B74			LINEX	= DATAORIGIN+$01B4
  1702 = 8B76			LINEY	= DATAORIGIN+$01B6
  1703
  1704 = 7FCE 63 8B		LASTARCCOORDS
  1704 				.endl							; UNIT GRAPH
  1705
  1706 				; ------------------------------------------------------------
  1707
  1708 7FD0			.local	CRT						; UNIT
  1709
  1710 7FD0			.local	CLRSCR						; PROCEDURE
  1711
  1712 				; -------------------  ASM Block 00000069  -------------------
  1713
  1714 7FD0 20 E8 78			@ClrScr
  1715 					
  1716 7FD3			@exit
  1717 					.ifdef @new
  1718 					lda <@VarData
  1719 					sta :ztmp
  1720 					lda >@VarData
  1721 					ldy #@VarDataSize-1
  1722 					jmp @FreeMem
  1723 					els
  1724 7FD3 60				rts						; ret
  1725 					eif
  1726 				.endl
  1727
  1728 7FD4			.local	READKEY						; FUNCTION | ASSEMBLER
  1729
  1730 				; -------------------  ASM Block 00000070  -------------------
  1731
  1732 7FD4 20 EE 78			@GetKey
  1733 7FD7 8D 79 8B			sta result
  1734
  1735 7FDA			@exit
  1736
  1737 				; ------------------------------------------------------------
  1738
  1739 = 8B79			RESULT	= DATAORIGIN+$01B9
  1740 7FDA 60				rts						; ret
  1741 				.endl
  1742
  1743 7FDB			.local	TEXTCOLOR					; PROCEDURE | ASSEMBLER
  1744 7FDB 8D 7A 8B			sta A
  1745
  1746 				; -------------------  ASM Block 00000072  -------------------
  1747
  1748 7FDE AD 7A 8B			lda a
  1749 7FE1 18 69 80			add #$80
  1750 					@putchar 
  1750 7FE4 20 D8 78		 JSR @PUTCHAR
  1751
  1752 				; ------------------------------------------------------------
  1753
  1754 = 8B7A			A	= DATAORIGIN+$01BA
  1755
  1756 = 8B7A			@VarData	= A
  1757 = 0001			@VarDataSize	= 1
  1758
  1759 7FE7			@exit
  1760 					.ifdef @new
  1761 					lda <@VarData
  1762 					sta :ztmp
  1763 					lda >@VarData
  1764 					ldy #@VarDataSize-1
  1765 					jmp @FreeMem
  1766 					els
  1767 7FE7 60				rts						; ret
  1768 					eif
  1769 				.endl
  1770
  1771 7FE8			.local	DELAY						; PROCEDURE | ASSEMBLER
  1772
  1773 				; -------------------  ASM Block 00000073  -------------------
  1774
  1775 7FE8 20 5D 78			@SendMessage
  1776 7FEB 01 01			dta 1,1
  1777 7FED 20 A0 78			@WaitMessage
  1778 7FF0 AD 04 FF 8D 28 80 + 	mwa DParameters last
  1779 7FFC 18 AD 28 80 6D 7B + 	adw last count last
  1780 				@	
  1781 800F 20 5D 78			@SendMessage
  1782 8012 01 01			dta 1,1
  1783 8014 20 A0 78			@WaitMessage
  1784 8017 AD 05 FF CD 29 80 + 	cpw DParameters last
  1785 8025 30 E8			bmi @-
  1786 8027 60				rts 
  1787 8028			last 
  1788 8028 00 00			dta a(0)
  1789
  1790 				; ------------------------------------------------------------
  1791
  1792 = 8B7B			COUNT	= DATAORIGIN+$01BB
  1793
  1794 = 8B7B			@VarData	= COUNT
  1795 = 0002			@VarDataSize	= 2
  1796
  1797 802A			@exit
  1798 					.ifdef @new
  1799 					lda <@VarData
  1800 					sta :ztmp
  1801 					lda >@VarData
  1802 					ldy #@VarDataSize-1
  1803 					jmp @FreeMem
  1804 					els
  1805 802A 60				rts						; ret
  1806 					eif
  1807 				.endl
  1808
  1809 802B			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
  1810
  1811 				; -------------------  ASM Block 00000074  -------------------
  1812
  1813 802B 20 5D 78			@SendMessage
  1814 802E 02 02			dta 2,2
  1815 8030 20 A0 78			@WaitMessage
  1816 8033 AD 04 FF			lda DParameters
  1817 8036 8D 7D 8B			sta result
  1818
  1819 8039			@exit
  1820
  1821 				; ------------------------------------------------------------
  1822
  1823 = 8B7D			RESULT	= DATAORIGIN+$01BD
  1824 8039 60				rts						; ret
  1825 				.endl
  1826
  1827 803A			.local	TEXTMODE					; PROCEDURE | ASSEMBLER
  1828 803A 8D 7E 8B			sta MODE
  1829
  1830 				; -------------------  ASM Block 00000078  -------------------
  1831
  1832 803D A9 90			lda #$90 // background to 0
  1833 					@putchar
  1833 803F 20 D8 78		 JSR @PUTCHAR
  1834 8042 A9 82			lda #$82 // text color to 2
  1835 					@putchar
  1835 8044 20 D8 78		 JSR @PUTCHAR
  1836 8047 20 E8 78			@clrscr;
  1837
  1838 				; ------------------------------------------------------------
  1839
  1840 = 8B7E			MODE	= DATAORIGIN+$01BE
  1841
  1842 = 8B7E			@VarData	= MODE
  1843 = 0001			@VarDataSize	= 1
  1844
  1845 804A			@exit
  1846 					.ifdef @new
  1847 					lda <@VarData
  1848 					sta :ztmp
  1849 					lda >@VarData
  1850 					ldy #@VarDataSize-1
  1851 					jmp @FreeMem
  1852 					els
  1853 804A 60				rts						; ret
  1854 					eif
  1855 				.endl
  1856
  1857 				; ------------------------------------------------------------
  1858
  1859 = 0000			BW40	= $00
  1860 = 0001			CO40	= $01
  1861 = 0002			BW80	= $02
  1862 = 0003			CO80	= $03
  1863 = 0007			MONO	= $07
  1864 = 0001			C40	= $01
  1865 = 0003			C80	= $03
  1866 = 0080			BLINK	= $80
  1867
  1868 				.endl							; UNIT CRT
  1869
  1870 804B			.local	WAITFORANYKEYANDCLEAR				; PROCEDURE
  1871
  1872 				; optimize FAIL ('@print', neo_api.pas), line = 39
  1873
  1874 804B 20 93 77			@printEOL
  1875
  1876 				; optimize FAIL ('@print', neo_api.pas), line = 40
  1877
  1878 					@printSTRING #CODEORIGIN+$0000
  1878 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1878 804E A0 70		 LDY> CODEORIGIN+$0000
  1878 8050 A9 03		 LDA< CODEORIGIN+$0000
  1878 8052 20 A1 77		 JSR @PRINTSTRING
  1879 8055 20 93 77			@printEOL
  1880
  1881 				; optimize FAIL ('CRT.READKEY', neo_api.pas), line = 41
  1882
  1883 8058 20 D4 7F			jsr CRT.READKEY
  1884
  1885 				; optimize FAIL ('CRT.CLRSCR', neo_api.pas), line = 42
  1886
  1887 805B 20 D0 7F			jsr CRT.CLRSCR
  1888 805E			@exit
  1889 					.ifdef @new
  1890 					lda <@VarData
  1891 					sta :ztmp
  1892 					lda >@VarData
  1893 					ldy #@VarDataSize-1
  1894 					jmp @FreeMem
  1895 					els
  1896 805E 60				rts						; ret
  1897 					eif
  1898 				.endl
  1899
  1900 805F			.local	DRAWBALL					; PROCEDURE
  1901
  1902 				; optimize OK (neo_api.pas), line = 47
  1903
  1904 805F AD C4 8B			lda F
  1905 8062 0A				asl @
  1906 8063 0A				asl @
  1907 8064 18 69 40			add #$40
  1908 8067 8D C4 8B			sta F
  1909
  1910 				; optimize OK (neo_api.pas), line = 48
  1911
  1912 806A 8D 54 8B			sta NEO6502.NEOUPDATESPRITE.IMAGE
  1913 806D A9 00			lda #$00
  1914 806F 8D 4F 8B			sta NEO6502.NEOUPDATESPRITE.S0
  1915 8072 AD C2 8B			lda X
  1916 8075 8D 50 8B			sta NEO6502.NEOUPDATESPRITE.X
  1917 8078 A9 00			lda #$00
  1918 807A 8D 51 8B			sta NEO6502.NEOUPDATESPRITE.X+1
  1919 807D AD C3 8B			lda Y
  1920 8080 8D 52 8B			sta NEO6502.NEOUPDATESPRITE.Y
  1921 8083 A9 00			lda #$00
  1922 8085 8D 53 8B			sta NEO6502.NEOUPDATESPRITE.Y+1
  1923 8088 8D 55 8B			sta NEO6502.NEOUPDATESPRITE.FLIP
  1924 808B 8D 56 8B			sta NEO6502.NEOUPDATESPRITE.ANCHOR
  1925 808E 20 69 7F			jsr NEO6502.NEOUPDATESPRITE
  1926
  1927 				; optimize OK (neo_api.pas), line = 49
  1928
  1929 8091 AD C4 8B			lda F
  1930 8094 18 69 01			add #$01
  1931 8097 8D 54 8B			sta NEO6502.NEOUPDATESPRITE.IMAGE
  1932 809A AD C2 8B			lda X
  1933 809D 18 69 20			add #$20
  1934 80A0 8D 50 8B			sta NEO6502.NEOUPDATESPRITE.X
  1935 80A3 A9 00			lda #$00
  1936 80A5 69 00			adc #$00
  1937 80A7 8D 51 8B			sta NEO6502.NEOUPDATESPRITE.X+1
  1938 80AA A9 01			lda #$01
  1939 80AC 8D 4F 8B			sta NEO6502.NEOUPDATESPRITE.S0
  1940 80AF AD C3 8B			lda Y
  1941 80B2 8D 52 8B			sta NEO6502.NEOUPDATESPRITE.Y
  1942 80B5 A9 00			lda #$00
  1943 80B7 8D 53 8B			sta NEO6502.NEOUPDATESPRITE.Y+1
  1944 80BA 8D 55 8B			sta NEO6502.NEOUPDATESPRITE.FLIP
  1945 80BD 8D 56 8B			sta NEO6502.NEOUPDATESPRITE.ANCHOR
  1946 80C0 20 69 7F			jsr NEO6502.NEOUPDATESPRITE
  1947
  1948 				; optimize OK (neo_api.pas), line = 50
  1949
  1950 80C3 AD C4 8B			lda F
  1951 80C6 18 69 02			add #$02
  1952 80C9 8D 54 8B			sta NEO6502.NEOUPDATESPRITE.IMAGE
  1953 80CC AD C3 8B			lda Y
  1954 80CF 18 69 20			add #$20
  1955 80D2 8D 52 8B			sta NEO6502.NEOUPDATESPRITE.Y
  1956 80D5 A9 00			lda #$00
  1957 80D7 69 00			adc #$00
  1958 80D9 8D 53 8B			sta NEO6502.NEOUPDATESPRITE.Y+1
  1959 80DC A9 02			lda #$02
  1960 80DE 8D 4F 8B			sta NEO6502.NEOUPDATESPRITE.S0
  1961 80E1 AD C2 8B			lda X
  1962 80E4 8D 50 8B			sta NEO6502.NEOUPDATESPRITE.X
  1963 80E7 A9 00			lda #$00
  1964 80E9 8D 51 8B			sta NEO6502.NEOUPDATESPRITE.X+1
  1965 80EC 8D 55 8B			sta NEO6502.NEOUPDATESPRITE.FLIP
  1966 80EF 8D 56 8B			sta NEO6502.NEOUPDATESPRITE.ANCHOR
  1967 80F2 20 69 7F			jsr NEO6502.NEOUPDATESPRITE
  1968
  1969 				; optimize OK (neo_api.pas), line = 51
  1970
  1971 80F5 AD C4 8B			lda F
  1972 80F8 18 69 03			add #$03
  1973 80FB 8D 54 8B			sta NEO6502.NEOUPDATESPRITE.IMAGE
  1974 80FE AD C3 8B			lda Y
  1975 8101 18 69 20			add #$20
  1976 8104 8D 52 8B			sta NEO6502.NEOUPDATESPRITE.Y
  1977 8107 A9 00			lda #$00
  1978 8109 69 00			adc #$00
  1979 810B 8D 53 8B			sta NEO6502.NEOUPDATESPRITE.Y+1
  1980 810E AD C2 8B			lda X
  1981 8111 18 69 20			add #$20
  1982 8114 8D 50 8B			sta NEO6502.NEOUPDATESPRITE.X
  1983 8117 A9 00			lda #$00
  1984 8119 69 00			adc #$00
  1985 811B 8D 51 8B			sta NEO6502.NEOUPDATESPRITE.X+1
  1986 811E A9 03			lda #$03
  1987 8120 8D 4F 8B			sta NEO6502.NEOUPDATESPRITE.S0
  1988 8123 A9 00			lda #$00
  1989 8125 8D 55 8B			sta NEO6502.NEOUPDATESPRITE.FLIP
  1990 8128 8D 56 8B			sta NEO6502.NEOUPDATESPRITE.ANCHOR
  1991 812B 20 69 7F			jsr NEO6502.NEOUPDATESPRITE
  1992
  1993 				; ------------------------------------------------------------
  1994
  1995 = 8BC2			X	= DATAORIGIN+$0202
  1996 = 8BC3			Y	= DATAORIGIN+$0203
  1997 = 8BC4			F	= DATAORIGIN+$0204
  1998
  1999 = 8BC2			@VarData	= X
  2000 = 0003			@VarDataSize	= 3
  2001
  2002 812E			@exit
  2003 					.ifdef @new
  2004 					lda <@VarData
  2005 					sta :ztmp
  2006 					lda >@VarData
  2007 					ldy #@VarDataSize-1
  2008 					jmp @FreeMem
  2009 					els
  2010 812E 60				rts						; ret
  2011 					eif
  2012 				.endl
  2013 812F			l_01ED
  2014
  2015 				; optimize FAIL ('NEO6502.NEOLOAD', neo_api.pas), line = 55
  2016
  2017 812F E8				inx
  2018 8130 A9 FF 95 14			mva #$FF :STACKORIGIN,x
  2019 8134 95 24			sta :STACKORIGIN+STACKWIDTH,x
  2020 8136 E8				inx
  2021 8137 A9 1E 95 14			mva #$1E :STACKORIGIN,x
  2022 813B A9 70 95 24			mva #$70 :STACKORIGIN+STACKWIDTH,x
  2023 813F 20 42 7D			jsr NEO6502.NEOLOAD
  2024
  2025 				; optimize OK (neo_api.pas), line = 56
  2026
  2027 8142 A9 00			lda #$00
  2028 8144 20 3A 80			jsr CRT.TEXTMODE
  2029
  2030 				; optimize FAIL ('@print', neo_api.pas), line = 59
  2031
  2032 					@printSTRING #CODEORIGIN+$0027
  2032 				 LDY> CODEORIGIN+$0027\ LDA< CODEORIGIN+$0027\ JSR @PRINTSTRING
  2032 8147 A0 70		 LDY> CODEORIGIN+$0027
  2032 8149 A9 2A		 LDA< CODEORIGIN+$0027
  2032 814B 20 A1 77		 JSR @PRINTSTRING
  2033 814E 20 93 77			@printEOL
  2034
  2035 				; optimize FAIL ('@print', neo_api.pas), line = 60
  2036
  2037 					@printSTRING #CODEORIGIN+$0036
  2037 				 LDY> CODEORIGIN+$0036\ LDA< CODEORIGIN+$0036\ JSR @PRINTSTRING
  2037 8151 A0 70		 LDY> CODEORIGIN+$0036
  2037 8153 A9 39		 LDA< CODEORIGIN+$0036
  2037 8155 20 A1 77		 JSR @PRINTSTRING
  2038 8158 20 93 77			@printEOL
  2039
  2040 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 61
  2041
  2042 815B 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2043
  2044 				; optimize FAIL ('@print', neo_api.pas), line = 63
  2045
  2046 					@printSTRING #CODEORIGIN+$0053
  2046 				 LDY> CODEORIGIN+$0053\ LDA< CODEORIGIN+$0053\ JSR @PRINTSTRING
  2046 815E A0 70		 LDY> CODEORIGIN+$0053
  2046 8160 A9 56		 LDA< CODEORIGIN+$0053
  2046 8162 20 A1 77		 JSR @PRINTSTRING
  2047 8165 20 93 77			@printEOL
  2048
  2049 				; optimize FAIL ('@print', neo_api.pas), line = 64
  2050
  2051 					@printSTRING #CODEORIGIN+$0068
  2051 				 LDY> CODEORIGIN+$0068\ LDA< CODEORIGIN+$0068\ JSR @PRINTSTRING
  2051 8168 A0 70		 LDY> CODEORIGIN+$0068
  2051 816A A9 6B		 LDA< CODEORIGIN+$0068
  2051 816C 20 A1 77		 JSR @PRINTSTRING
  2052 816F 20 E8 7C			jsr NEO6502.NEOGETTIMER
  2053 8172 AD EC 8A 85 08		mva NEO6502.NEOGETTIMER.RESULT :dx
  2054 8177 AD ED 8A 85 09		mva NEO6502.NEOGETTIMER.RESULT+1 :dx+1
  2055 817C AD EE 8A 85 0A		mva NEO6502.NEOGETTIMER.RESULT+2 :dx+2
  2056 8181 AD EF 8A 85 0B		mva NEO6502.NEOGETTIMER.RESULT+3 :dx+3
  2057 8186 20 DF 77			@printVALUE
  2058 8189 20 93 77			@printEOL
  2059
  2060 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 65
  2061
  2062 818C 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2063
  2064 				; optimize FAIL ('@print', neo_api.pas), line = 67
  2065
  2066 					@printSTRING #CODEORIGIN+$0077
  2066 				 LDY> CODEORIGIN+$0077\ LDA< CODEORIGIN+$0077\ JSR @PRINTSTRING
  2066 818F A0 70		 LDY> CODEORIGIN+$0077
  2066 8191 A9 7A		 LDA< CODEORIGIN+$0077
  2066 8193 20 A1 77		 JSR @PRINTSTRING
  2067 8196 20 93 77			@printEOL
  2068
  2069 				; optimize FAIL ('@print', neo_api.pas), line = 68
  2070
  2071 					@printSTRING #CODEORIGIN+$008C
  2071 				 LDY> CODEORIGIN+$008C\ LDA< CODEORIGIN+$008C\ JSR @PRINTSTRING
  2071 8199 A0 70		 LDY> CODEORIGIN+$008C
  2071 819B A9 8F		 LDA< CODEORIGIN+$008C
  2071 819D 20 A1 77		 JSR @PRINTSTRING
  2072 81A0 20 93 77			@printEOL
  2073
  2074 				; optimize FAIL ('NEO6502.NEOCREDITS', neo_api.pas), line = 69
  2075
  2076 81A3 20 0C 7D			jsr NEO6502.NEOCREDITS
  2077
  2078 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 70
  2079
  2080 81A6 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2081
  2082 				; optimize FAIL ('@print', neo_api.pas), line = 72
  2083
  2084 					@printSTRING #CODEORIGIN+$0096
  2084 				 LDY> CODEORIGIN+$0096\ LDA< CODEORIGIN+$0096\ JSR @PRINTSTRING
  2084 81A9 A0 70		 LDY> CODEORIGIN+$0096
  2084 81AB A9 99		 LDA< CODEORIGIN+$0096
  2084 81AD 20 A1 77		 JSR @PRINTSTRING
  2085 81B0 20 93 77			@printEOL
  2086
  2087 				; optimize FAIL ('@print', neo_api.pas), line = 73
  2088
  2089 					@printSTRING #CODEORIGIN+$00AB
  2089 				 LDY> CODEORIGIN+$00AB\ LDA< CODEORIGIN+$00AB\ JSR @PRINTSTRING
  2089 81B3 A0 70		 LDY> CODEORIGIN+$00AB
  2089 81B5 A9 AE		 LDA< CODEORIGIN+$00AB
  2089 81B7 20 A1 77		 JSR @PRINTSTRING
  2090 81BA 20 93 77			@printEOL
  2091
  2092 				; optimize OK (neo_api.pas), line = 75
  2093
  2094 81BD A9 C0			lda #$C0
  2095 81BF 8D F0 8A			sta NEO6502.NEOSETCHAR.C
  2096 81C2 AD BA 89			lda CHAR1
  2097 81C5 8D F1 8A			sta NEO6502.NEOSETCHAR.DATA
  2098 81C8 AD BB 89			lda CHAR1+1
  2099 81CB 8D F2 8A			sta NEO6502.NEOSETCHAR.DATA+1
  2100 81CE 20 1A 7D			jsr NEO6502.NEOSETCHAR
  2101
  2102 				; optimize OK (neo_api.pas), line = 76
  2103
  2104 81D1 A9 C1			lda #$C1
  2105 81D3 8D F0 8A			sta NEO6502.NEOSETCHAR.C
  2106 81D6 AD BC 89			lda CHAR2
  2107 81D9 8D F1 8A			sta NEO6502.NEOSETCHAR.DATA
  2108 81DC AD BD 89			lda CHAR2+1
  2109 81DF 8D F2 8A			sta NEO6502.NEOSETCHAR.DATA+1
  2110 81E2 20 1A 7D			jsr NEO6502.NEOSETCHAR
  2111
  2112 				; optimize FAIL ('@print', neo_api.pas), line = 77
  2113
  2114 					@printSTRING #CODEORIGIN+$00BC
  2114 				 LDY> CODEORIGIN+$00BC\ LDA< CODEORIGIN+$00BC\ JSR @PRINTSTRING
  2114 81E5 A0 70		 LDY> CODEORIGIN+$00BC
  2114 81E7 A9 BF		 LDA< CODEORIGIN+$00BC
  2114 81E9 20 A1 77		 JSR @PRINTSTRING
  2115 81EC 20 93 77			@printEOL
  2116
  2117 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 78
  2118
  2119 81EF 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2120
  2121 				; optimize FAIL ('@print', neo_api.pas), line = 80
  2122
  2123 					@printSTRING #CODEORIGIN+$00C6
  2123 				 LDY> CODEORIGIN+$00C6\ LDA< CODEORIGIN+$00C6\ JSR @PRINTSTRING
  2123 81F2 A0 70		 LDY> CODEORIGIN+$00C6
  2123 81F4 A9 C9		 LDA< CODEORIGIN+$00C6
  2123 81F6 20 A1 77		 JSR @PRINTSTRING
  2124 81F9 20 93 77			@printEOL
  2125
  2126 				; optimize FAIL ('@print', neo_api.pas), line = 81
  2127
  2128 					@printSTRING #CODEORIGIN+$00DB
  2128 				 LDY> CODEORIGIN+$00DB\ LDA< CODEORIGIN+$00DB\ JSR @PRINTSTRING
  2128 81FC A0 70		 LDY> CODEORIGIN+$00DB
  2128 81FE A9 DE		 LDA< CODEORIGIN+$00DB
  2128 8200 20 A1 77		 JSR @PRINTSTRING
  2129 8203 20 93 77			@printEOL
  2130
  2131 				; optimize FAIL ('@print', neo_api.pas), line = 82
  2132
  2133 8206 20 93 77			@printEOL
  2134
  2135 				; optimize FAIL ('@print', neo_api.pas), line = 83
  2136
  2137 					@printSTRING #CODEORIGIN+$00ED
  2137 				 LDY> CODEORIGIN+$00ED\ LDA< CODEORIGIN+$00ED\ JSR @PRINTSTRING
  2137 8209 A0 70		 LDY> CODEORIGIN+$00ED
  2137 820B A9 F0		 LDA< CODEORIGIN+$00ED
  2137 820D 20 A1 77		 JSR @PRINTSTRING
  2138 8210 20 93 77			@printEOL
  2139
  2140 				; --- RepeatUntilProlog
  2141 8213			l_061C
  2142
  2143 				; optimize OK (neo_api.pas), line = 85
  2144
  2145 8213 A9 00			lda #$00
  2146 8215 8D 92 8B			sta K
  2147
  2148 				; optimize FAIL ('CRT.KEYPRESSED', neo_api.pas), line = 86
  2149
  2150 8218 20 2B 80			jsr CRT.KEYPRESSED
  2151 821B AD 7D 8B			lda CRT.KEYPRESSED.RESULT
  2152 821E F0 09			jeq l_062A
  2153 8220 20 D4 7F			jsr CRT.READKEY
  2154 8223 AD 79 8B			lda CRT.READKEY.RESULT
  2155 8226 8D 92 8B			sta K
  2156 8229			l_062A
  2157
  2158 				; optimize OK (neo_api.pas), line = 87
  2159
  2160 8229 A9 01			lda #$01
  2161 822B 20 9D 7D			jsr NEO6502.NEOGETJOY
  2162 822E AD 18 8B			lda NEO6502.NEOGETJOY.RESULT
  2163 8231 8D 7F 8B			sta B
  2164 8234 A9 00 8D 93 8B		mva #$00 adr.S
  2165
  2166 				; optimize OK (neo_api.pas), line = 89
  2167
  2168 8239 AD 7F 8B			lda B
  2169 823C 29 01			and #$01
  2170 823E F0 3A			jeq l_064C
  2171 8240 AD B8 89			lda S
  2172 8243 8D E5 89			sta SYSTEM.CONCAT.@036D.A
  2173 8246 AD B9 89			lda S+1
  2174 8249 8D E6 89			sta SYSTEM.CONCAT.@036D.A+1
  2175 824C A9 20			lda #$20
  2176 824E 8D E7 89			sta SYSTEM.CONCAT.@036D.B
  2177 8251 A9 71			lda #$71
  2178 8253 8D E8 89			sta SYSTEM.CONCAT.@036D.B+1
  2179 8256 20 96 7C			jsr SYSTEM.CONCAT.@036D
  2180 8259 E8				inx
  2181 825A AD C7 7C			lda SYSTEM.CONCAT.@036D.RESULT
  2182 825D 85 08			sta @move.src
  2183 825F AD C8 7C			lda SYSTEM.CONCAT.@036D.RESULT+1
  2184 8262 85 09			sta @move.src+1
  2185 					@moveSTRING S #33
  2185 				 MWA S @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2185 8264 AD B8 89 85 0C AD +  MWA S @MOVE.DST
  2185 826E A9 21 85 04 A9 00 +  MWA #33 @MOVE.CNT
  2185 8276 20 6C 72		 JSR @MOVESTRING
  2186 8279 CA				dex
  2187 827A			l_064C
  2188
  2189 				; optimize OK (neo_api.pas), line = 90
  2190
  2191 827A AD 7F 8B			lda B
  2192 827D 29 02			and #$02
  2193 827F F0 3A			jeq l_0669
  2194 8281 AD B8 89			lda S
  2195 8284 8D E5 89			sta SYSTEM.CONCAT.@036D.A
  2196 8287 AD B9 89			lda S+1
  2197 828A 8D E6 89			sta SYSTEM.CONCAT.@036D.A+1
  2198 828D A9 26			lda #$26
  2199 828F 8D E7 89			sta SYSTEM.CONCAT.@036D.B
  2200 8292 A9 71			lda #$71
  2201 8294 8D E8 89			sta SYSTEM.CONCAT.@036D.B+1
  2202 8297 20 96 7C			jsr SYSTEM.CONCAT.@036D
  2203 829A E8				inx
  2204 829B AD C7 7C			lda SYSTEM.CONCAT.@036D.RESULT
  2205 829E 85 08			sta @move.src
  2206 82A0 AD C8 7C			lda SYSTEM.CONCAT.@036D.RESULT+1
  2207 82A3 85 09			sta @move.src+1
  2208 					@moveSTRING S #33
  2208 				 MWA S @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2208 82A5 AD B8 89 85 0C AD +  MWA S @MOVE.DST
  2208 82AF A9 21 85 04 A9 00 +  MWA #33 @MOVE.CNT
  2208 82B7 20 6C 72		 JSR @MOVESTRING
  2209 82BA CA				dex
  2210 82BB			l_0669
  2211
  2212 				; optimize OK (neo_api.pas), line = 91
  2213
  2214 82BB AD 7F 8B			lda B
  2215 82BE 29 04			and #$04
  2216 82C0 F0 3A			jeq l_0686
  2217 82C2 AD B8 89			lda S
  2218 82C5 8D E5 89			sta SYSTEM.CONCAT.@036D.A
  2219 82C8 AD B9 89			lda S+1
  2220 82CB 8D E6 89			sta SYSTEM.CONCAT.@036D.A+1
  2221 82CE A9 2D			lda #$2D
  2222 82D0 8D E7 89			sta SYSTEM.CONCAT.@036D.B
  2223 82D3 A9 71			lda #$71
  2224 82D5 8D E8 89			sta SYSTEM.CONCAT.@036D.B+1
  2225 82D8 20 96 7C			jsr SYSTEM.CONCAT.@036D
  2226 82DB E8				inx
  2227 82DC AD C7 7C			lda SYSTEM.CONCAT.@036D.RESULT
  2228 82DF 85 08			sta @move.src
  2229 82E1 AD C8 7C			lda SYSTEM.CONCAT.@036D.RESULT+1
  2230 82E4 85 09			sta @move.src+1
  2231 					@moveSTRING S #33
  2231 				 MWA S @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2231 82E6 AD B8 89 85 0C AD +  MWA S @MOVE.DST
  2231 82F0 A9 21 85 04 A9 00 +  MWA #33 @MOVE.CNT
  2231 82F8 20 6C 72		 JSR @MOVESTRING
  2232 82FB CA				dex
  2233 82FC			l_0686
  2234
  2235 				; optimize OK (neo_api.pas), line = 92
  2236
  2237 82FC AD 7F 8B			lda B
  2238 82FF 29 08			and #$08
  2239 8301 F0 3A			jeq l_06A3
  2240 8303 AD B8 89			lda S
  2241 8306 8D E5 89			sta SYSTEM.CONCAT.@036D.A
  2242 8309 AD B9 89			lda S+1
  2243 830C 8D E6 89			sta SYSTEM.CONCAT.@036D.A+1
  2244 830F A9 31			lda #$31
  2245 8311 8D E7 89			sta SYSTEM.CONCAT.@036D.B
  2246 8314 A9 71			lda #$71
  2247 8316 8D E8 89			sta SYSTEM.CONCAT.@036D.B+1
  2248 8319 20 96 7C			jsr SYSTEM.CONCAT.@036D
  2249 831C E8				inx
  2250 831D AD C7 7C			lda SYSTEM.CONCAT.@036D.RESULT
  2251 8320 85 08			sta @move.src
  2252 8322 AD C8 7C			lda SYSTEM.CONCAT.@036D.RESULT+1
  2253 8325 85 09			sta @move.src+1
  2254 					@moveSTRING S #33
  2254 				 MWA S @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2254 8327 AD B8 89 85 0C AD +  MWA S @MOVE.DST
  2254 8331 A9 21 85 04 A9 00 +  MWA #33 @MOVE.CNT
  2254 8339 20 6C 72		 JSR @MOVESTRING
  2255 833C CA				dex
  2256 833D			l_06A3
  2257
  2258 				; optimize OK (neo_api.pas), line = 93
  2259
  2260 833D AD 7F 8B			lda B
  2261 8340 29 10			and #$10
  2262 8342 F0 3A			jeq l_06C0
  2263 8344 AD B8 89			lda S
  2264 8347 8D E5 89			sta SYSTEM.CONCAT.@036D.A
  2265 834A AD B9 89			lda S+1
  2266 834D 8D E6 89			sta SYSTEM.CONCAT.@036D.A+1
  2267 8350 A9 37			lda #$37
  2268 8352 8D E7 89			sta SYSTEM.CONCAT.@036D.B
  2269 8355 A9 71			lda #$71
  2270 8357 8D E8 89			sta SYSTEM.CONCAT.@036D.B+1
  2271 835A 20 96 7C			jsr SYSTEM.CONCAT.@036D
  2272 835D E8				inx
  2273 835E AD C7 7C			lda SYSTEM.CONCAT.@036D.RESULT
  2274 8361 85 08			sta @move.src
  2275 8363 AD C8 7C			lda SYSTEM.CONCAT.@036D.RESULT+1
  2276 8366 85 09			sta @move.src+1
  2277 					@moveSTRING S #33
  2277 				 MWA S @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2277 8368 AD B8 89 85 0C AD +  MWA S @MOVE.DST
  2277 8372 A9 21 85 04 A9 00 +  MWA #33 @MOVE.CNT
  2277 837A 20 6C 72		 JSR @MOVESTRING
  2278 837D CA				dex
  2279 837E			l_06C0
  2280
  2281 				; optimize OK (neo_api.pas), line = 94
  2282
  2283 837E AD 7F 8B			lda B
  2284 8381 29 20			and #$20
  2285 8383 F0 3A			jeq l_06DD
  2286 8385 AD B8 89			lda S
  2287 8388 8D E5 89			sta SYSTEM.CONCAT.@036D.A
  2288 838B AD B9 89			lda S+1
  2289 838E 8D E6 89			sta SYSTEM.CONCAT.@036D.A+1
  2290 8391 A9 3D			lda #$3D
  2291 8393 8D E7 89			sta SYSTEM.CONCAT.@036D.B
  2292 8396 A9 71			lda #$71
  2293 8398 8D E8 89			sta SYSTEM.CONCAT.@036D.B+1
  2294 839B 20 96 7C			jsr SYSTEM.CONCAT.@036D
  2295 839E E8				inx
  2296 839F AD C7 7C			lda SYSTEM.CONCAT.@036D.RESULT
  2297 83A2 85 08			sta @move.src
  2298 83A4 AD C8 7C			lda SYSTEM.CONCAT.@036D.RESULT+1
  2299 83A7 85 09			sta @move.src+1
  2300 					@moveSTRING S #33
  2300 				 MWA S @MOVE.DST\ MWA #33 @MOVE.CNT\ JSR @MOVESTRING
  2300 83A9 AD B8 89 85 0C AD +  MWA S @MOVE.DST
  2300 83B3 A9 21 85 04 A9 00 +  MWA #33 @MOVE.CNT
  2300 83BB 20 6C 72		 JSR @MOVESTRING
  2301 83BE CA				dex
  2302 83BF			l_06DD
  2303
  2304 				; optimize FAIL ('@print', neo_api.pas), line = 95
  2305
  2306 					@printSTRING #CODEORIGIN+$0140
  2306 				 LDY> CODEORIGIN+$0140\ LDA< CODEORIGIN+$0140\ JSR @PRINTSTRING
  2306 83BF A0 71		 LDY> CODEORIGIN+$0140
  2306 83C1 A9 43		 LDA< CODEORIGIN+$0140
  2306 83C3 20 A1 77		 JSR @PRINTSTRING
  2307
  2308 				; optimize FAIL ('@print', neo_api.pas), line = 96
  2309
  2310 					@printSTRING S
  2310 				 LDY S+1\ LDA S\ JSR @PRINTSTRING
  2310 83C6 AC B9 89		 LDY S+1
  2310 83C9 AD B8 89		 LDA S
  2310 83CC 20 A1 77		 JSR @PRINTSTRING
  2311 					@printSTRING #CODEORIGIN+$0154
  2311 				 LDY> CODEORIGIN+$0154\ LDA< CODEORIGIN+$0154\ JSR @PRINTSTRING
  2311 83CF A0 71		 LDY> CODEORIGIN+$0154
  2311 83D1 A9 57		 LDA< CODEORIGIN+$0154
  2311 83D3 20 A1 77		 JSR @PRINTSTRING
  2312
  2313 				; optimize OK (neo_api.pas), line = 97
  2314
  2315 83D6 A9 03			lda #$03
  2316 83D8 8D 7B 8B			sta CRT.DELAY.COUNT
  2317 83DB A9 00			lda #$00
  2318 83DD 8D 7C 8B			sta CRT.DELAY.COUNT+1
  2319 83E0 20 E8 7F			jsr CRT.DELAY
  2320
  2321 				; optimize OK (neo_api.pas), line = 98
  2322
  2323 83E3 AD 92 8B			lda K
  2324 83E6 C9 20			cmp #$20
  2325 83E8 F0 03 4C 13 82		jne l_061C
  2326
  2327 				; optimize FAIL ('CRT.CLRSCR', neo_api.pas), line = 99
  2328
  2329 83ED 20 D0 7F			jsr CRT.CLRSCR
  2330
  2331 				; optimize FAIL ('@print', neo_api.pas), line = 101
  2332
  2333 					@printSTRING #CODEORIGIN+$0169
  2333 				 LDY> CODEORIGIN+$0169\ LDA< CODEORIGIN+$0169\ JSR @PRINTSTRING
  2333 83F0 A0 71		 LDY> CODEORIGIN+$0169
  2333 83F2 A9 6C		 LDA< CODEORIGIN+$0169
  2333 83F4 20 A1 77		 JSR @PRINTSTRING
  2334 83F7 20 93 77			@printEOL
  2335
  2336 				; optimize FAIL ('@print', neo_api.pas), line = 102
  2337
  2338 					@printSTRING #CODEORIGIN+$0172
  2338 				 LDY> CODEORIGIN+$0172\ LDA< CODEORIGIN+$0172\ JSR @PRINTSTRING
  2338 83FA A0 71		 LDY> CODEORIGIN+$0172
  2338 83FC A9 75		 LDA< CODEORIGIN+$0172
  2338 83FE 20 A1 77		 JSR @PRINTSTRING
  2339 8401 20 93 77			@printEOL
  2340
  2341 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 103
  2342
  2343 8404 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2344
  2345 				; optimize FAIL ('SYSTEM.RANDOMIZE', neo_api.pas), line = 104
  2346
  2347 8407 20 E9 7B			jsr SYSTEM.RANDOMIZE
  2348
  2349 				; optimize OK (neo_api.pas), line = 105
  2350
  2351 840A A9 00			lda #$00
  2352 840C 20 B3 7F			jsr GRAPH.INITGRAPH.@0528
  2353 840F A0 F8			ldy #256-8
  2354 8411 B9 98 70 99 9B 8A + 	mva:rne CODEORIGIN+$018D+8-256,y adr.S+8-256,y+
  2355
  2356 				; optimize OK (neo_api.pas), line = 108
  2357
  2358 841A A9 00			lda #$00
  2359 841C 8D 82 8B			sta J
  2360
  2361 841F			l_0703
  2362 				; --- ForToDoCondition
  2363 841F AD 82 8B			lda J
  2364 8422 C9 05			cmp #$05
  2365 8424 90 03 4C 01 86		jcs l_0711
  2366
  2367 				; optimize OK (neo_api.pas), line = 110
  2368
  2369 8429 A9 00			lda #$00
  2370 842B 8D 81 8B			sta I
  2371
  2372 842E			l_071A
  2373 				; --- ForToDoCondition
  2374 842E AD 81 8B			lda I
  2375 8431 C9 33			cmp #$33
  2376 8433 90 03 4C F9 85		jcs l_0728
  2377
  2378 				; optimize OK (neo_api.pas), line = 112
  2379
  2380 8438 A9 0E			lda #$0E
  2381 843A 8D E1 89			sta SYSTEM.RANDOM.@032B.RANGE
  2382 843D A9 01			lda #$01
  2383 843F 8D E2 89			sta SYSTEM.RANDOM.@032B.RANGE+1
  2384 8442 20 20 7C			jsr SYSTEM.RANDOM.@032B
  2385 8445 E8				inx
  2386 8446 AD E3 89			lda SYSTEM.RANDOM.@032B.RESULT
  2387 8449 18 69 0A			add #$0A
  2388 844C 8D 90 8B			sta X
  2389 844F AD E4 89			lda SYSTEM.RANDOM.@032B.RESULT+1
  2390 8452 69 00			adc #$00
  2391 8454 8D 91 8B			sta X+1
  2392 8457 CA				dex
  2393
  2394 				; optimize OK (neo_api.pas), line = 113
  2395
  2396 8458 A9 C8			lda #$C8
  2397 845A 20 05 7C			jsr SYSTEM.RANDOM.@032A
  2398 845D AD E0 89			lda SYSTEM.RANDOM.@032A.RESULT
  2399 8460 18 69 0A			add #$0A
  2400 8463 8D 83 8B			sta Y
  2401
  2402 				; optimize OK (neo_api.pas), line = 114
  2403
  2404 8466 A9 1E			lda #$1E
  2405 8468 20 05 7C			jsr SYSTEM.RANDOM.@032A
  2406 846B AD E0 89			lda SYSTEM.RANDOM.@032A.RESULT
  2407 846E 18 69 14			add #$14
  2408 8471 8D 84 8B			sta W
  2409
  2410 				; optimize OK (neo_api.pas), line = 115
  2411
  2412 8474 A9 1E			lda #$1E
  2413 8476 20 05 7C			jsr SYSTEM.RANDOM.@032A
  2414 8479 AD E0 89			lda SYSTEM.RANDOM.@032A.RESULT
  2415 847C 18 69 0A			add #$0A
  2416 847F 8D 85 8B			sta H
  2417
  2418 				; optimize OK (neo_api.pas), line = 116
  2419
  2420 8482 A9 10			lda #$10
  2421 8484 20 05 7C			jsr SYSTEM.RANDOM.@032A
  2422 8487 AD E0 89			lda SYSTEM.RANDOM.@032A.RESULT
  2423 848A 8D 80 8B			sta C
  2424
  2425 				; optimize FAIL (2, neo_api.pas), line = 117
  2426
  2427 848D E8				inx
  2428 848E A9 00 95 14			mva #$00 :STACKORIGIN,x
  2429 8492 E8				inx
  2430 8493 A9 01 95 14			mva #$01 :STACKORIGIN,x
  2431 8497 A9 02			lda #$02
  2432 8499 20 05 7C			jsr SYSTEM.RANDOM.@032A
  2433 849C E8				inx
  2434 849D AD E0 89 95 14		mva SYSTEM.RANDOM.@032A.RESULT :STACKORIGIN,x
  2435 84A2 A9 00			lda #$00
  2436 84A4 8D 19 8B			sta NEO6502.NEOSETCOLOR.ACOL
  2437 84A7 AD 80 8B			lda C
  2438 84AA 8D 1A 8B			sta NEO6502.NEOSETCOLOR.XCOL
  2439 84AD B5 14			lda :STACKORIGIN,x
  2440 84AF 8D 1B 8B			sta NEO6502.NEOSETCOLOR.SOLID
  2441 84B2 CA				dex
  2442 84B3 B5 14			lda :STACKORIGIN,x
  2443 84B5 8D 1C 8B			sta NEO6502.NEOSETCOLOR.SIZE
  2444 84B8 CA				dex
  2445 84B9 B5 14			lda :STACKORIGIN,x
  2446 84BB 8D 1D 8B			sta NEO6502.NEOSETCOLOR.FLIP
  2447 84BE CA				dex
  2448 84BF 20 B5 7D			jsr NEO6502.NEOSETCOLOR
  2449
  2450 				; optimize OK (neo_api.pas), line = 118
  2451
  2452 84C2 AD 82 8B			lda J
  2453 84C5 8D C5 8B			sta @CASETMP_0005
  2454 84C8 D0 40			jne l_0765
  2455 				@
  2456
  2457 				; optimize OK (neo_api.pas), line = 119
  2458
  2459 84CA AD 83 8B			lda Y
  2460 84CD 18 6D 85 8B			add H
  2461 84D1 8D 24 8B			sta NEO6502.NEODRAWLINE.Y1
  2462 84D4 A9 00			lda #$00
  2463 84D6 69 00			adc #$00
  2464 84D8 8D 25 8B			sta NEO6502.NEODRAWLINE.Y1+1
  2465 84DB AD 90 8B			lda X
  2466 84DE 18 6D 84 8B			add W
  2467 84E2 8D 22 8B			sta NEO6502.NEODRAWLINE.X1
  2468 84E5 AD 91 8B			lda X+1
  2469 84E8 69 00			adc #$00
  2470 84EA 8D 23 8B			sta NEO6502.NEODRAWLINE.X1+1
  2471 84ED AD 90 8B			lda X
  2472 84F0 8D 1E 8B			sta NEO6502.NEODRAWLINE.X0
  2473 84F3 AD 91 8B			lda X+1
  2474 84F6 8D 1F 8B			sta NEO6502.NEODRAWLINE.X0+1
  2475 84F9 AD 83 8B			lda Y
  2476 84FC 8D 20 8B			sta NEO6502.NEODRAWLINE.Y0
  2477 84FF A9 00			lda #$00
  2478 8501 8D 21 8B			sta NEO6502.NEODRAWLINE.Y0+1
  2479 8504 20 E1 7D			jsr NEO6502.NEODRAWLINE
  2480 8507 4C EE 85			jmp a_0005
  2481 850A			l_0765
  2482 850A C9 01			cmp #$01
  2483 850C D0 40			jne l_0783
  2484
  2485 				; optimize OK (neo_api.pas), line = 120
  2486
  2487 850E AD 83 8B			lda Y
  2488 8511 18 6D 85 8B			add H
  2489 8515 8D 2C 8B			sta NEO6502.NEODRAWRECT.Y1
  2490 8518 A9 00			lda #$00
  2491 851A 69 00			adc #$00
  2492 851C 8D 2D 8B			sta NEO6502.NEODRAWRECT.Y1+1
  2493 851F AD 90 8B			lda X
  2494 8522 18 6D 84 8B			add W
  2495 8526 8D 2A 8B			sta NEO6502.NEODRAWRECT.X1
  2496 8529 AD 91 8B			lda X+1
  2497 852C 69 00			adc #$00
  2498 852E 8D 2B 8B			sta NEO6502.NEODRAWRECT.X1+1
  2499 8531 AD 90 8B			lda X
  2500 8534 8D 26 8B			sta NEO6502.NEODRAWRECT.X0
  2501 8537 AD 91 8B			lda X+1
  2502 853A 8D 27 8B			sta NEO6502.NEODRAWRECT.X0+1
  2503 853D AD 83 8B			lda Y
  2504 8540 8D 28 8B			sta NEO6502.NEODRAWRECT.Y0
  2505 8543 A9 00			lda #$00
  2506 8545 8D 29 8B			sta NEO6502.NEODRAWRECT.Y0+1
  2507 8548 20 1F 7E			jsr NEO6502.NEODRAWRECT
  2508 854B 4C EE 85			jmp a_0005
  2509 854E			l_0783
  2510 854E C9 02			cmp #$02
  2511 8550 D0 40			jne l_07A1
  2512
  2513 				; optimize OK (neo_api.pas), line = 121
  2514
  2515 8552 AD 83 8B			lda Y
  2516 8555 18 6D 85 8B			add H
  2517 8559 8D 34 8B			sta NEO6502.NEODRAWELLIPSE.Y1
  2518 855C A9 00			lda #$00
  2519 855E 69 00			adc #$00
  2520 8560 8D 35 8B			sta NEO6502.NEODRAWELLIPSE.Y1+1
  2521 8563 AD 90 8B			lda X
  2522 8566 18 6D 84 8B			add W
  2523 856A 8D 32 8B			sta NEO6502.NEODRAWELLIPSE.X1
  2524 856D AD 91 8B			lda X+1
  2525 8570 69 00			adc #$00
  2526 8572 8D 33 8B			sta NEO6502.NEODRAWELLIPSE.X1+1
  2527 8575 AD 90 8B			lda X
  2528 8578 8D 2E 8B			sta NEO6502.NEODRAWELLIPSE.X0
  2529 857B AD 91 8B			lda X+1
  2530 857E 8D 2F 8B			sta NEO6502.NEODRAWELLIPSE.X0+1
  2531 8581 AD 83 8B			lda Y
  2532 8584 8D 30 8B			sta NEO6502.NEODRAWELLIPSE.Y0
  2533 8587 A9 00			lda #$00
  2534 8589 8D 31 8B			sta NEO6502.NEODRAWELLIPSE.Y0+1
  2535 858C 20 5D 7E			jsr NEO6502.NEODRAWELLIPSE
  2536 858F 4C EE 85			jmp a_0005
  2537 8592			l_07A1
  2538 8592 C9 03			cmp #$03
  2539 8594 D0 29			jne l_07BF
  2540
  2541 				; optimize OK (neo_api.pas), line = 122
  2542
  2543 8596 AD 90 8B			lda X
  2544 8599 8D 36 8B			sta NEO6502.NEODRAWSTRING.X0
  2545 859C AD 91 8B			lda X+1
  2546 859F 8D 37 8B			sta NEO6502.NEODRAWSTRING.X0+1
  2547 85A2 AD 83 8B			lda Y
  2548 85A5 8D 38 8B			sta NEO6502.NEODRAWSTRING.Y0
  2549 85A8 A9 00			lda #$00
  2550 85AA 8D 39 8B			sta NEO6502.NEODRAWSTRING.Y0+1
  2551 85AD AD B8 89			lda S
  2552 85B0 8D 3A 8B			sta NEO6502.NEODRAWSTRING.S
  2553 85B3 AD B9 89			lda S+1
  2554 85B6 8D 3B 8B			sta NEO6502.NEODRAWSTRING.S+1
  2555 85B9 20 9B 7E			jsr NEO6502.NEODRAWSTRING
  2556 85BC 4C EE 85			jmp a_0005
  2557 85BF			l_07BF
  2558 85BF C9 04			cmp #$04
  2559 85C1 D0 2B			jne l_07CE
  2560
  2561 				; optimize OK (neo_api.pas), line = 123
  2562
  2563 85C3 A9 04			lda #$04
  2564 85C5 20 05 7C			jsr SYSTEM.RANDOM.@032A
  2565 85C8 E8				inx
  2566 85C9 AD E0 89 95 14		mva SYSTEM.RANDOM.@032A.RESULT :STACKORIGIN,x
  2567 85CE AD 90 8B			lda X
  2568 85D1 8D 3C 8B			sta NEO6502.NEODRAWIMAGE.X0
  2569 85D4 AD 91 8B			lda X+1
  2570 85D7 8D 3D 8B			sta NEO6502.NEODRAWIMAGE.X0+1
  2571 85DA AD 83 8B			lda Y
  2572 85DD 8D 3E 8B			sta NEO6502.NEODRAWIMAGE.Y0
  2573 85E0 A9 00			lda #$00
  2574 85E2 8D 3F 8B			sta NEO6502.NEODRAWIMAGE.Y0+1
  2575 85E5 B5 14			lda :STACKORIGIN,x
  2576 85E7 8D 40 8B			sta NEO6502.NEODRAWIMAGE.ID
  2577 85EA CA				dex
  2578 85EB 20 CD 7E			jsr NEO6502.NEODRAWIMAGE
  2579 85EE			l_07CE
  2580 85EE			a_0005
  2581
  2582 				; optimize FAIL ('SYSTEM.PAUSE.@0327', neo_api.pas), line = 125
  2583
  2584 85EE 20 87 7B			jsr SYSTEM.PAUSE.@0327
  2585
  2586 				; --- ForToDoEpilog
  2587 85F1 EE 81 8B			inc I
  2588 85F4 F0 03 4C 2E 84		jne l_071A
  2589 85F9			l_0728
  2590
  2591 				; --- ForToDoEpilog
  2592 85F9 EE 82 8B			inc J
  2593 85FC F0 03 4C 1F 84		jne l_0703
  2594 8601			l_0711
  2595
  2596 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 128
  2597
  2598 8601 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2599
  2600 				; optimize FAIL ('@print', neo_api.pas), line = 131
  2601
  2602 					@printSTRING #CODEORIGIN+$0195
  2602 				 LDY> CODEORIGIN+$0195\ LDA< CODEORIGIN+$0195\ JSR @PRINTSTRING
  2602 8604 A0 71		 LDY> CODEORIGIN+$0195
  2602 8606 A9 98		 LDA< CODEORIGIN+$0195
  2602 8608 20 A1 77		 JSR @PRINTSTRING
  2603 860B 20 93 77			@printEOL
  2604
  2605 				; optimize FAIL ('@print', neo_api.pas), line = 132
  2606
  2607 					@printSTRING #CODEORIGIN+$019E
  2607 				 LDY> CODEORIGIN+$019E\ LDA< CODEORIGIN+$019E\ JSR @PRINTSTRING
  2607 860E A0 71		 LDY> CODEORIGIN+$019E
  2607 8610 A9 A1		 LDA< CODEORIGIN+$019E
  2607 8612 20 A1 77		 JSR @PRINTSTRING
  2608 8615 20 93 77			@printEOL
  2609
  2610 				; optimize FAIL ('@print', neo_api.pas), line = 133
  2611
  2612 8618 20 93 77			@printEOL
  2613
  2614 				; optimize FAIL ('@print', neo_api.pas), line = 134
  2615
  2616 					@printSTRING #CODEORIGIN+$01A9
  2616 				 LDY> CODEORIGIN+$01A9\ LDA< CODEORIGIN+$01A9\ JSR @PRINTSTRING
  2616 861B A0 71		 LDY> CODEORIGIN+$01A9
  2616 861D A9 AC		 LDA< CODEORIGIN+$01A9
  2616 861F 20 A1 77		 JSR @PRINTSTRING
  2617 8622 AD 01 90			lda TMAP.WIDTH
  2618 8625 20 D2 77			jsr @printBYTE._a
  2619 					@printSTRING #CODEORIGIN+$01BB
  2619 				 LDY> CODEORIGIN+$01BB\ LDA< CODEORIGIN+$01BB\ JSR @PRINTSTRING
  2619 8628 A0 71		 LDY> CODEORIGIN+$01BB
  2619 862A A9 BE		 LDA< CODEORIGIN+$01BB
  2619 862C 20 A1 77		 JSR @PRINTSTRING
  2620 862F AD 02 90			lda TMAP.HEIGHT
  2621 8632 20 D2 77			jsr @printBYTE._a
  2622 8635 20 93 77			@printEOL
  2623
  2624 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 135
  2625
  2626 8638 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2627
  2628 				; optimize OK (neo_api.pas), line = 137
  2629
  2630 863B A9 00			lda #$00
  2631 863D 8D 90 8B			sta X
  2632 8640 8D 91 8B			sta X+1
  2633
  2634 				; --- RepeatUntilProlog
  2635 8643			l_07F5
  2636
  2637 				; optimize OK (neo_api.pas), line = 139
  2638
  2639 8643 A9 00			lda #$00
  2640 8645 85 07			sta @REAL_MUL.A+3
  2641 8647 AD 91 8B			lda X+1
  2642 864A 85 06			sta @REAL_MUL.A+2
  2643 864C AD 90 8B			lda X
  2644 864F 85 05			sta @REAL_MUL.A+1
  2645 8651 A9 00			lda #$00
  2646 8653 85 04			sta @REAL_MUL.A
  2647 8655 A9 0D			lda #$0D
  2648 8657 85 0C			sta @REAL_MUL.B
  2649 8659 A9 00			lda #$00
  2650 865B 85 0D			sta @REAL_MUL.B+1
  2651 865D 85 0E			sta @REAL_MUL.B+2
  2652 865F 85 0F			sta @REAL_MUL.B+3
  2653 8661 20 95 73			jsr @REAL_MUL
  2654 8664 A5 04			lda :eax
  2655 8666 8D D5 89			sta SYSTEM.SIN.@02FF.X
  2656 8669 A5 05			lda :eax+1
  2657 866B 8D D6 89			sta SYSTEM.SIN.@02FF.X+1
  2658 866E A5 06			lda :eax+2
  2659 8670 8D D7 89			sta SYSTEM.SIN.@02FF.X+2
  2660 8673 A5 07			lda :eax+3
  2661 8675 8D D8 89			sta SYSTEM.SIN.@02FF.X+3
  2662 8678 20 4E 7B			jsr SYSTEM.SIN.@02FF
  2663 867B E8				inx
  2664 867C E8				inx
  2665 867D A9 00			lda #$00
  2666 867F 85 0C			sta @REAL_MUL.B
  2667 8681 A9 14			lda #$14
  2668 8683 85 0D			sta @REAL_MUL.B+1
  2669 8685 A9 00			lda #$00
  2670 8687 85 0E			sta @REAL_MUL.B+2
  2671 8689 A9 00			lda #$00
  2672 868B 85 0F			sta @REAL_MUL.B+3
  2673 868D AD D9 89			lda SYSTEM.SIN.@02FF.RESULT
  2674 8690 85 04			sta @REAL_MUL.A
  2675 8692 AD DA 89			lda SYSTEM.SIN.@02FF.RESULT+1
  2676 8695 85 05			sta @REAL_MUL.A+1
  2677 8697 AD DB 89			lda SYSTEM.SIN.@02FF.RESULT+2
  2678 869A 85 06			sta @REAL_MUL.A+2
  2679 869C AD DC 89			lda SYSTEM.SIN.@02FF.RESULT+3
  2680 869F 85 07			sta @REAL_MUL.A+3
  2681 86A1 20 95 73			jsr @REAL_MUL
  2682 86A4 CA				dex
  2683 86A5 20 8A 74			jsr @REAL_TRUNC
  2684 86A8 A5 04			lda :eax
  2685 86AA 95 14			sta :STACKORIGIN,x
  2686 86AC A5 05			lda :eax+1
  2687 86AE 95 24			sta :STACKORIGIN+STACKWIDTH,x
  2688 86B0 A5 06			lda :eax+2
  2689 86B2 95 34			sta :STACKORIGIN+STACKWIDTH*2,x
  2690 86B4 A5 07			lda :eax+3
  2691 86B6 95 44			sta :STACKORIGIN+STACKWIDTH*3,x
  2692 86B8 E8				inx
  2693 86B9 A9 1E 95 14			mva #$1E :STACKORIGIN,x
  2694 86BD A9 00 95 24			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2695 86C1 95 34			sta :STACKORIGIN+STACKWIDTH*2,x
  2696 86C3 95 44			sta :STACKORIGIN+STACKWIDTH*3,x
  2697 86C5 B5 13			lda :STACKORIGIN-1,x
  2698 86C7 18 75 14			add :STACKORIGIN,x
  2699 86CA 8D 83 8B			sta Y
  2700 86CD CA				dex
  2701 86CE CA				dex
  2702
  2703 				; optimize FAIL ('CRT.CLRSCR', neo_api.pas), line = 140
  2704
  2705 86CF 20 D0 7F			jsr CRT.CLRSCR
  2706
  2707 				; optimize OK (neo_api.pas), line = 141
  2708
  2709 86D2 AD 91 8B			lda X+1
  2710 86D5 C9 01			cmp #$01
  2711 86D7 D0 05			bne @+
  2712 86D9 AD 90 8B			lda X
  2713 86DC C9 41			cmp #$41
  2714 				@
  2715 86DE 90 3E			jcc l_0819
  2716
  2717 				; optimize OK (neo_api.pas), line = 142
  2718
  2719 86E0 AD 90 8B			lda X
  2720 86E3 38 E9 40			sub #$40
  2721 86E6 8D 4B 8B			sta NEO6502.NEOSELECTTILEMAP.XOFFSET
  2722 86E9 AD 91 8B			lda X+1
  2723 86EC E9 01			sbc #$01
  2724 86EE 8D 4C 8B			sta NEO6502.NEOSELECTTILEMAP.XOFFSET+1
  2725 86F1 A9 00			lda #$00
  2726 86F3 8D 49 8B			sta NEO6502.NEOSELECTTILEMAP.MEM
  2727 86F6 A9 90			lda #$90
  2728 86F8 8D 4A 8B			sta NEO6502.NEOSELECTTILEMAP.MEM+1
  2729 86FB A9 00			lda #$00
  2730 86FD 8D 4D 8B			sta NEO6502.NEOSELECTTILEMAP.YOFFSET
  2731 8700 8D 4E 8B			sta NEO6502.NEOSELECTTILEMAP.YOFFSET+1
  2732 8703 20 37 7F			jsr NEO6502.NEOSELECTTILEMAP
  2733
  2734 				; optimize OK (neo_api.pas), line = 143
  2735
  2736 8706 A9 A0			lda #$A0
  2737 8708 18 6D 83 8B			add Y
  2738 870C 8D 47 8B			sta NEO6502.NEODRAWTILEMAP.Y1
  2739 870F A9 00			lda #$00
  2740 8711 69 00			adc #$00
  2741 8713 8D 48 8B			sta NEO6502.NEODRAWTILEMAP.Y1+1
  2742 8716 A9 00			lda #$00
  2743 8718 8D 41 8B			sta NEO6502.NEODRAWTILEMAP.X0
  2744 871B 4C 57 87			jmp l_0839
  2745 871E			l_0819
  2746
  2747 				; optimize OK (neo_api.pas), line = 145
  2748
  2749 871E A9 00			lda #$00
  2750 8720 8D 49 8B			sta NEO6502.NEOSELECTTILEMAP.MEM
  2751 8723 A9 90			lda #$90
  2752 8725 8D 4A 8B			sta NEO6502.NEOSELECTTILEMAP.MEM+1
  2753 8728 A9 00			lda #$00
  2754 872A 8D 4B 8B			sta NEO6502.NEOSELECTTILEMAP.XOFFSET
  2755 872D 8D 4C 8B			sta NEO6502.NEOSELECTTILEMAP.XOFFSET+1
  2756 8730 8D 4D 8B			sta NEO6502.NEOSELECTTILEMAP.YOFFSET
  2757 8733 8D 4E 8B			sta NEO6502.NEOSELECTTILEMAP.YOFFSET+1
  2758 8736 20 37 7F			jsr NEO6502.NEOSELECTTILEMAP
  2759
  2760 				; optimize OK (neo_api.pas), line = 146
  2761
  2762 8739 A9 A0			lda #$A0
  2763 873B 18 6D 83 8B			add Y
  2764 873F 8D 47 8B			sta NEO6502.NEODRAWTILEMAP.Y1
  2765 8742 A9 00			lda #$00
  2766 8744 69 00			adc #$00
  2767 8746 8D 48 8B			sta NEO6502.NEODRAWTILEMAP.Y1+1
  2768 8749 A9 40			lda #$40
  2769 874B 38 ED 90 8B			sub X
  2770 874F 8D 41 8B			sta NEO6502.NEODRAWTILEMAP.X0
  2771 8752 A9 01			lda #$01
  2772 8754 ED 91 8B			sbc X+1
  2773 8757			l_0839
  2774 8757 8D 42 8B			sta NEO6502.NEODRAWTILEMAP.X0+1
  2775 875A AD 83 8B			lda Y
  2776 875D 8D 43 8B			sta NEO6502.NEODRAWTILEMAP.Y0
  2777 8760 A9 00			lda #$00
  2778 8762 8D 44 8B			sta NEO6502.NEODRAWTILEMAP.Y0+1
  2779 8765 A9 40			lda #$40
  2780 8767 8D 45 8B			sta NEO6502.NEODRAWTILEMAP.X1
  2781 876A A9 01			lda #$01
  2782 876C 8D 46 8B			sta NEO6502.NEODRAWTILEMAP.X1+1
  2783 876F 20 F9 7E			jsr NEO6502.NEODRAWTILEMAP
  2784
  2785 				; optimize FAIL ('SYSTEM.PAUSE.@0327', neo_api.pas), line = 148
  2786
  2787 8772 20 87 7B			jsr SYSTEM.PAUSE.@0327
  2788
  2789 				; optimize OK (neo_api.pas), line = 149
  2790
  2791 8775 EE 90 8B			inc X
  2792 8778 D0 03			sne
  2793 877A EE 91 8B			inc X+1
  2794
  2795 				; optimize OK (neo_api.pas), line = 150
  2796
  2797 877D AD 91 8B			lda X+1
  2798 8780 C9 03			cmp #$03
  2799 8782 D0 05			bne @+
  2800 8784 AD 90 8B			lda X
  2801 8787 C9 D5			cmp #$D5
  2802 				@
  2803 8789 90 08			jcc l_0862
  2804 878B A9 00			lda #$00
  2805 878D 8D 90 8B			sta X
  2806 8790 8D 91 8B			sta X+1
  2807 8793			l_0862
  2808
  2809 				; optimize FAIL ('CRT.KEYPRESSED', neo_api.pas), line = 151
  2810
  2811 8793 20 2B 80			jsr CRT.KEYPRESSED
  2812 8796 AD 7D 8B			lda CRT.KEYPRESSED.RESULT
  2813 8799 D0 03 4C 43 86		jeq l_07F5
  2814
  2815 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 152
  2816
  2817 879E 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  2818
  2819 				; optimize FAIL ('@print', neo_api.pas), line = 154
  2820
  2821 					@printSTRING #CODEORIGIN+$01C5
  2821 				 LDY> CODEORIGIN+$01C5\ LDA< CODEORIGIN+$01C5\ JSR @PRINTSTRING
  2821 87A1 A0 71		 LDY> CODEORIGIN+$01C5
  2821 87A3 A9 C8		 LDA< CODEORIGIN+$01C5
  2821 87A5 20 A1 77		 JSR @PRINTSTRING
  2822 87A8 20 93 77			@printEOL
  2823
  2824 				; optimize FAIL ('@print', neo_api.pas), line = 155
  2825
  2826 					@printSTRING #CODEORIGIN+$01CE
  2826 				 LDY> CODEORIGIN+$01CE\ LDA< CODEORIGIN+$01CE\ JSR @PRINTSTRING
  2826 87AB A0 71		 LDY> CODEORIGIN+$01CE
  2826 87AD A9 D1		 LDA< CODEORIGIN+$01CE
  2826 87AF 20 A1 77		 JSR @PRINTSTRING
  2827 87B2 20 93 77			@printEOL
  2828
  2829 				; optimize OK (neo_api.pas), line = 157
  2830
  2831 87B5 A9 00			lda #$00
  2832 87B7 8D 7F 8B			sta B
  2833
  2834 				; optimize OK (neo_api.pas), line = 158
  2835
  2836 87BA A9 64			lda #$64
  2837 87BC 8D 90 8B			sta X
  2838 87BF A9 00			lda #$00
  2839 87C1 8D 91 8B			sta X+1
  2840
  2841 				; optimize OK (neo_api.pas), line = 159
  2842
  2843 87C4 8D 87 8B			sta BY
  2844 87C7 8D 88 8B			sta BY+1
  2845 87CA A9 A0			lda #$A0
  2846 87CC 8D 89 8B			sta BY+2
  2847 87CF A9 42			lda #$42
  2848 87D1 8D 8A 8B			sta BY+3
  2849
  2850 				; optimize OK (neo_api.pas), line = 160
  2851
  2852 87D4 A9 00			lda #$00
  2853 87D6 8D 8B 8B			sta DY
  2854 87D9 8D 8C 8B			sta DY+1
  2855 87DC 8D 8D 8B			sta DY+2
  2856 87DF 8D 8E 8B			sta DY+3
  2857
  2858 				; optimize OK (neo_api.pas), line = 161
  2859
  2860 87E2 A9 02			lda #$02
  2861 87E4 8D 86 8B			sta DX
  2862
  2863 				; optimize OK (neo_api.pas), line = 162
  2864
  2865 87E7 A9 01			lda #$01
  2866 87E9 8D 8F 8B			sta XACC
  2867
  2868 				; --- RepeatUntilProlog
  2869 87EC			l_0888
  2870
  2871 				; optimize FAIL ('@FROUND', neo_api.pas), line = 165
  2872
  2873 87EC E8				inx
  2874 87ED AD 7F 8B 95 14		mva B :STACKORIGIN,x
  2875 87F2 E8				inx
  2876 87F3 AD 87 8B 95 14		mva BY :STACKORIGIN,x
  2877 87F8 AD 88 8B 95 24		mva BY+1 :STACKORIGIN+STACKWIDTH,x
  2878 87FD AD 89 8B 95 34		mva BY+2 :STACKORIGIN+STACKWIDTH*2,x
  2879 8802 AD 8A 8B 95 44		mva BY+3 :STACKORIGIN+STACKWIDTH*3,x
  2880 8807 20 D8 74			jsr @FROUND
  2881 880A 20 04 77			jsr @F2I
  2882 880D AD 90 8B			lda X
  2883 8810 8D C2 8B			sta DRAWBALL.X
  2884 8813 B5 14			lda :STACKORIGIN,x
  2885 8815 8D C3 8B			sta DRAWBALL.Y
  2886 8818 CA				dex
  2887 8819 B5 14			lda :STACKORIGIN,x
  2888 881B 8D C4 8B			sta DRAWBALL.F
  2889 881E CA				dex
  2890 881F 20 5F 80			jsr DRAWBALL
  2891
  2892 				; optimize FAIL ('@FSUB.FADD', neo_api.pas), line = 167
  2893
  2894 8822 E8				inx
  2895 8823 AD 8B 8B 95 14		mva DY :STACKORIGIN,x
  2896 8828 AD 8C 8B 95 24		mva DY+1 :STACKORIGIN+STACKWIDTH,x
  2897 882D AD 8D 8B 95 34		mva DY+2 :STACKORIGIN+STACKWIDTH*2,x
  2898 8832 AD 8E 8B 95 44		mva DY+3 :STACKORIGIN+STACKWIDTH*3,x
  2899 8837 E8				inx
  2900 8838 A9 CD 95 14			mva #$CD :STACKORIGIN,x
  2901 883C A9 CC 95 24			mva #$CC :STACKORIGIN+STACKWIDTH,x
  2902 8840 95 34			sta :STACKORIGIN+STACKWIDTH*2,x
  2903 8842 A9 3D 95 44			mva #$3D :STACKORIGIN+STACKWIDTH*3,x
  2904 8846 20 23 75			jsr @FSUB.FADD
  2905 8849 CA				dex
  2906 884A B5 14			lda :STACKORIGIN,x
  2907 884C 8D 8B 8B			sta DY
  2908 884F B5 24			lda :STACKORIGIN+STACKWIDTH,x
  2909 8851 8D 8C 8B			sta DY+1
  2910 8854 B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  2911 8856 8D 8D 8B			sta DY+2
  2912 8859 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  2913 885B 8D 8E 8B			sta DY+3
  2914 885E CA				dex
  2915
  2916 				; optimize OK (neo_api.pas), line = 168
  2917
  2918 885F A0 00			ldy #$00
  2919 8861 AD 86 8B			lda DX
  2920 8864 10 01			spl
  2921 8866 88				dey
  2922 8867 18 6D 90 8B			add X
  2923 886B 8D 90 8B			sta X
  2924 886E 98				tya
  2925 886F 6D 91 8B			adc X+1
  2926 8872 8D 91 8B			sta X+1
  2927
  2928 				; optimize FAIL ('@FSUB.FADD', neo_api.pas), line = 169
  2929
  2930 8875 E8				inx
  2931 8876 AD 87 8B 95 14		mva BY :STACKORIGIN,x
  2932 887B AD 88 8B 95 24		mva BY+1 :STACKORIGIN+STACKWIDTH,x
  2933 8880 AD 89 8B 95 34		mva BY+2 :STACKORIGIN+STACKWIDTH*2,x
  2934 8885 AD 8A 8B 95 44		mva BY+3 :STACKORIGIN+STACKWIDTH*3,x
  2935 888A E8				inx
  2936 888B AD 8B 8B 95 14		mva DY :STACKORIGIN,x
  2937 8890 AD 8C 8B 95 24		mva DY+1 :STACKORIGIN+STACKWIDTH,x
  2938 8895 AD 8D 8B 95 34		mva DY+2 :STACKORIGIN+STACKWIDTH*2,x
  2939 889A AD 8E 8B 95 44		mva DY+3 :STACKORIGIN+STACKWIDTH*3,x
  2940 889F 20 23 75			jsr @FSUB.FADD
  2941 88A2 CA				dex
  2942 88A3 B5 14			lda :STACKORIGIN,x
  2943 88A5 8D 87 8B			sta BY
  2944 88A8 B5 24			lda :STACKORIGIN+STACKWIDTH,x
  2945 88AA 8D 88 8B			sta BY+1
  2946 88AD B5 34			lda :STACKORIGIN+STACKWIDTH*2,x
  2947 88AF 8D 89 8B			sta BY+2
  2948 88B2 B5 44			lda :STACKORIGIN+STACKWIDTH*3,x
  2949 88B4 8D 8A 8B			sta BY+3
  2950 88B7 CA				dex
  2951
  2952 				; optimize OK (neo_api.pas), line = 170
  2953
  2954 88B8 AD 91 8B			lda X+1
  2955 88BB D0 15			jne l_08C6x
  2956 88BD AD 90 8B			lda X
  2957 88C0 C9 FA			cmp #$FA
  2958 88C2 B0 0E			jcs l_08C6x
  2959 88C4 AD 91 8B			lda X+1
  2960 88C7 C9 00			cmp #$00
  2961 88C9 D0 05			bne @+
  2962 88CB AD 90 8B			lda X
  2963 88CE C9 29			cmp #$29
  2964 				@
  2965 88D0 B0 09			jcs l_08C6
  2966 				@
  2967 88D2			l_08C6x
  2968 88D2 A9 00			lda #$00
  2969 88D4 38 ED 86 8B			sub DX
  2970 88D8 8D 86 8B			sta DX
  2971 88DB			l_08C6
  2972
  2973 				; optimize OK (neo_api.pas), line = 171
  2974
  2975 88DB A9 00			lda #$00
  2976 88DD 85 04			sta @FCMPL.A
  2977 88DF 85 05			sta @FCMPL.A+1
  2978 88E1 A9 2A			lda #$2A
  2979 88E3 85 06			sta @FCMPL.A+2
  2980 88E5 A9 43			lda #$43
  2981 88E7 85 07			sta @FCMPL.A+3
  2982 88E9 AD 87 8B			lda BY
  2983 88EC 85 0C			sta @FCMPL.B
  2984 88EE AD 88 8B			lda BY+1
  2985 88F1 85 0D			sta @FCMPL.B+1
  2986 88F3 AD 89 8B			lda BY+2
  2987 88F6 85 0E			sta @FCMPL.B+2
  2988 88F8 AD 8A 8B			lda BY+3
  2989 88FB 85 0F			sta @FCMPL.B+3
  2990 88FD 20 B8 76			jsr @FCMPL
  2991 8900 30 2F			jmi l_08EC
  2992 8902 F0 2D			jeq l_08EC
  2993 8904 A9 00			lda #$00
  2994 8906 85 04			sta @FCMPL.A
  2995 8908 85 05			sta @FCMPL.A+1
  2996 890A 85 06			sta @FCMPL.A+2
  2997 890C 85 07			sta @FCMPL.A+3
  2998 890E AD 8B 8B			lda DY
  2999 8911 85 0C			sta @FCMPL.B
  3000 8913 AD 8C 8B			lda DY+1
  3001 8916 85 0D			sta @FCMPL.B+1
  3002 8918 AD 8D 8B			lda DY+2
  3003 891B 85 0E			sta @FCMPL.B+2
  3004 891D AD 8E 8B			lda DY+3
  3005 8920 85 0F			sta @FCMPL.B+3
  3006 8922 20 B8 76			jsr @FCMPL
  3007 8925 30 0A			jmi l_08EC
  3008 8927 F0 08			jeq l_08EC
  3009 8929 AD 8E 8B			lda DY+3
  3010 892C 49 80			eor #$80
  3011 892E 8D 8E 8B			sta DY+3
  3012 8931			l_08EC
  3013
  3014 				; optimize OK (neo_api.pas), line = 172
  3015
  3016 8931 AD 7F 8B			lda B
  3017 8934 18 69 01			add #$01
  3018 8937 29 03			and #$03
  3019 8939 8D 7F 8B			sta B
  3020
  3021 				; optimize OK (neo_api.pas), line = 173
  3022
  3023 893C A9 05			lda #$05
  3024 893E 8D DD 89			sta SYSTEM.PAUSE.@0328.N
  3025 8941 A9 00			lda #$00
  3026 8943 8D DE 89			sta SYSTEM.PAUSE.@0328.N+1
  3027 8946 20 A6 7B			jsr SYSTEM.PAUSE.@0328
  3028
  3029 				; optimize FAIL ('CRT.KEYPRESSED', neo_api.pas), line = 175
  3030
  3031 8949 20 2B 80			jsr CRT.KEYPRESSED
  3032 894C AD 7D 8B			lda CRT.KEYPRESSED.RESULT
  3033 894F D0 03 4C EC 87		jeq l_0888
  3034
  3035 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 176
  3036
  3037 8954 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  3038 8957 A0 EF			ldy #256-17
  3039 8959 B9 EC 70 99 A4 8A + 	mva:rne CODEORIGIN+$01D8+17-256,y adr.S+17-256,y+
  3040
  3041 				; optimize OK (neo_api.pas), line = 180
  3042
  3043 8962 A9 00			lda #$00
  3044 8964 8D 7F 8B			sta B
  3045
  3046 				; optimize OK (neo_api.pas), line = 181
  3047
  3048 8967 8D 80 8B			sta C
  3049
  3050 				; --- RepeatUntilProlog
  3051 896A			l_0915
  3052
  3053 				; optimize OK (neo_api.pas), line = 183
  3054
  3055 896A AD 7F 8B			lda B
  3056 896D 18 6D 80 8B			add C
  3057 8971 29 0F			and #$0F
  3058 8973 20 DB 7F			jsr CRT.TEXTCOLOR
  3059
  3060 				; optimize FAIL ('@print', neo_api.pas), line = 184
  3061
  3062 8976 E8				inx
  3063 8977 AC 7F 8B			ldy B
  3064 897A C8				iny
  3065 897B B9 93 8B			lda adr.S,y
  3066 897E 95 14			sta :STACKORIGIN,x
  3067 8980 20 8E 77			@printCHAR
  3068 8983 CA				dex
  3069
  3070 				; optimize FAIL (0, neo_api.pas), line = 185
  3071
  3072 8984 EE 7F 8B			inc B
  3073
  3074 				; optimize OK (neo_api.pas), line = 186
  3075
  3076 8987 AD 7F 8B			lda B
  3077 898A CD 93 8B			cmp adr.S
  3078 898D D0 1A			jne l_0942
  3079
  3080 				; optimize OK (neo_api.pas), line = 188
  3081
  3082 898F A9 0A			lda #$0A
  3083 8991 8D 7B 8B			sta CRT.DELAY.COUNT
  3084 8994 A9 00			lda #$00
  3085 8996 8D 7C 8B			sta CRT.DELAY.COUNT+1
  3086 8999 20 E8 7F			jsr CRT.DELAY
  3087
  3088 				; optimize OK (neo_api.pas), line = 189
  3089
  3090 899C A9 00			lda #$00
  3091 899E 8D 7F 8B			sta B
  3092
  3093 				; optimize FAIL ('@print', neo_api.pas), line = 190
  3094
  3095 					@print #$14
  3095 				 LDY# $14\ JSR @PRINT
  3095 89A1 A0 14		 LDY# $14
  3095 89A3 20 98 77		 JSR @PRINT
  3096
  3097 				; optimize FAIL (0, neo_api.pas), line = 191
  3098
  3099 89A6 EE 80 8B			inc C
  3100 89A9			l_0942
  3101
  3102 				; optimize FAIL ('CRT.KEYPRESSED', neo_api.pas), line = 193
  3103
  3104 89A9 20 2B 80			jsr CRT.KEYPRESSED
  3105 89AC AD 7D 8B			lda CRT.KEYPRESSED.RESULT
  3106 89AF F0 B9			jeq l_0915
  3107
  3108 				; optimize FAIL ('WAITFORANYKEYANDCLEAR', neo_api.pas), line = 194
  3109
  3110 89B1 20 4B 80			jsr WAITFORANYKEYANDCLEAR
  3111
  3112 				; ------------------------------------------------------------
  3113
  3114 = 9000			TILE_MAP_ADDRESS	= $9000
  3115 = 8B7F			B	= DATAORIGIN+$01BF
  3116 = 8B80			C	= DATAORIGIN+$01C0
  3117 = 8B81			I	= DATAORIGIN+$01C1
  3118 = 8B82			J	= DATAORIGIN+$01C2
  3119 = 8B83			Y	= DATAORIGIN+$01C3
  3120 = 8B84			W	= DATAORIGIN+$01C4
  3121 = 8B85			H	= DATAORIGIN+$01C5
  3122 = 8B86			DX	= DATAORIGIN+$01C6
  3123 = 8B87			BY	= DATAORIGIN+$01C7
  3124 = 8B8B			DY	= DATAORIGIN+$01CB
  3125 = 8B8F			XACC	= DATAORIGIN+$01CF
  3126 = 8B90			X	= DATAORIGIN+$01D0
  3127 = 8B92			K	= DATAORIGIN+$01D2
  3128 = 8B93			adr.S	= [DATAORIGIN+$01D3] .array [33]
  3129 89B4			.var S	= adr.S .word
  3130 = 8BB4			adr.CHAR1	= [DATAORIGIN+$01F4] .array [7]
  3131 89B4			.var CHAR1	= adr.CHAR1 .word
  3132 = 8BBB			adr.CHAR2	= [DATAORIGIN+$01FB] .array [7]
  3133 89B4			.var CHAR2	= adr.CHAR2 .word
  3134 = 9000			adr.TMAP	= $9000
  3135 89B4			.var TMAP	= adr.TMAP .word
  3136 = 9000			TMAP.FORMAT	= $9000
  3137 = 9001			TMAP.WIDTH	= $9001
  3138 = 9002			TMAP.HEIGHT	= $9002
  3139 = 8BC5			@CASETMP_0005	= DATAORIGIN+$0205
  3140 89B4			@exit
  3141
  3142 89B4 A2 00		@halt	ldx #$00
  3143 89B6 9A				txs
  3144
  3145 89B7 60				rts
  3146
  3147 				; ------------------------------------------------------------
  3148
  3149 				; ------------------------------------------------------------
  3150
  3151 89B8			.local	@DEFINES
  3152 89B8			NEO
  3153 				.endl
  3154
  3155 89B8			.local	@RESOURCE
  3156 				.endl
  3157
  3158 = 89B8 93 8B		S
  3158 = 89BA B4 8B		CHAR1
  3158 = 89BC BB 8B		CHAR2
  3158 = 89BE 00 90		TMAP
  3158 				.endl							; MAIN
  3159
  3160 				; ------------------------------------------------------------
  3161 				; ------------------------------------------------------------
  3162
  3163 				.macro	UNITINITIALIZATION
  3164 				
  3165 					.ifdef MAIN.SYSTEM.@UnitInit
  3166 					jsr MAIN.SYSTEM.@UnitInit
  3167 					.fi
  3168 				
  3169 					.ifdef MAIN.NEO6502.@UnitInit
  3170 					jsr MAIN.NEO6502.@UnitInit
  3171 					.fi
  3172 				
  3173 					.ifdef MAIN.TYPES.@UnitInit
  3174 					jsr MAIN.TYPES.@UnitInit
  3175 					.fi
  3176 				
  3177 					.ifdef MAIN.GRAPH.@UnitInit
  3178 					jsr MAIN.GRAPH.@UnitInit
  3179 					.fi
  3180 				
  3181 					.ifdef MAIN.CRT.@UnitInit
  3182 					jsr MAIN.CRT.@UnitInit
  3183 					.fi
  3184 				.endm
  3185
  3186 				; ------------------------------------------------------------
  3187
  3188 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3189 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3189 				SYSTEM: $791A..$7CC8
  3190 					eif
  3191
  3192 					ift .SIZEOF(MAIN.NEO6502) > 0
  3193 					.print 'NEO6502: ',MAIN.NEO6502,'..',MAIN.NEO6502+.SIZEOF(MAIN.NEO6502)-1
  3193 				NEO6502: $7CC9..$7FB2
  3194 					eif
  3195
  3196 					ift .SIZEOF(MAIN.TYPES) > 0
  3197 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  3198 					eif
  3199
  3200 					ift .SIZEOF(MAIN.GRAPH) > 0
  3201 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  3201 				GRAPH: $7FB3..$7FCF
  3202 					eif
  3203
  3204 					ift .SIZEOF(MAIN.CRT) > 0
  3205 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  3205 				CRT: $7FD0..$804A
  3206 					eif
  3207
  3208 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3208 				CODE: $7003..$89B7
  3209
  3210 				; ------------------------------------------------------------
  3211
  3212 = 89C0				?adr = *
  3213 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  3214 					?adr = ?old_adr
  3215 					eif
  3216
  3217 					org ?adr
  3218 = 89C0				?old_adr = *
  3219
  3220 89C0			DATAORIGIN
  3221 89C0 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3222 89D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3223 89F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3224 8A08 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3225 8A20 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3226 8A38 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3227 8A50 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3228 8A68 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3229 8A80 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3230 8A98 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3231 8AB0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3232 8AC8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3233 8AE0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3234 8AF8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3235 8B10 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3236 8B28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3237 8B40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3238 8B58 00 27 00 00 00 17 + .by  $00 $27 $00 $00 $00 $17 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3239 8B70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3240 8B88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3241 8BA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $3C $40 $90 $80
  3242 8BB8 9C 40 3C E0 10 48 + .by  $9C $40 $3C $E0 $10 $48 $08 $C8  $10 $E0
  3243
  3244 = 0202			VARINITSIZE	= *-DATAORIGIN
  3245 = 0206			VARDATASIZE	= 518
  3246
  3247 = 8BC6			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3248
  3249 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3249 				DATA: $89C0..$8BC6
  3250
  3251 				; ------------------------------------------------------------
  3252
  3253 				.macro	STATICDATA
  3254 				.by  $1A $50 $72 $65 $73 $73 $20 $61  $6E $79 $20 $6B $65 $79 $20 $74  $6F $20 $63 $6F $6E $74 $69 $6E
  3255 				.by  $75 $65 $2E $0B $6E $65 $6F $5F  $61 $70 $69 $2E $67 $66 $78 $0E  $48 $65 $6C $6C $6F $20 $4E $65
  3256 				.by  $6F $36 $35 $30 $32 $21 $1C $4C  $65 $74 $27 $73 $20 $74 $72 $79  $20 $73 $6F $6D $65 $20 $41 $50
  3257 				.by  $49 $20 $72 $6F $75 $74 $69 $6E  $65 $73 $2E $14 $47 $72 $6F $75  $70 $3A $20 $31 $20 $46 $75 $6E
  3258 				.by  $63 $74 $69 $6F $6E $3A $20 $31  $0E $53 $79 $73 $74 $65 $6D $20  $54 $69 $6D $65 $72 $3A $20 $14
  3259 				.by  $47 $72 $6F $75 $70 $3A $20 $31  $20 $46 $75 $6E $63 $74 $69 $6F  $6E $3A $20 $34 $09 $43 $72 $65
  3260 				.by  $64 $69 $74 $73 $3A $20 $14 $47  $72 $6F $75 $70 $3A $20 $32 $20  $46 $75 $6E $63 $74 $69 $6F $6E
  3261 				.by  $3A $20 $35 $10 $44 $65 $66 $69  $6E $65 $20 $6E $65 $77 $20 $66  $6F $6E $74 $2E $09 $C0 $C1 $20
  3262 				.by  $C0 $C1 $20 $C0 $C1 $20 $14 $47  $72 $6F $75 $70 $3A $20 $37 $20  $46 $75 $6E $63 $74 $69 $6F $6E
  3263 				.by  $3A $20 $31 $11 $43 $6F $6E $74  $72 $6F $6C $6C $65 $72 $20 $74  $65 $73 $74 $3A $20 $2E $4D $6F
  3264 				.by  $76 $65 $20 $59 $6F $75 $72 $20  $63 $6F $6E $74 $72 $6F $6C $6C  $65 $72 $20 $6F $72 $20 $70 $72
  3265 				.by  $65 $73 $73 $20 $53 $70 $61 $63  $65 $20 $74 $6F $20 $66 $69 $6E  $69 $73 $68 $2E $00 $05 $6C $65
  3266 				.by  $66 $74 $20 $06 $72 $69 $67 $68  $74 $20 $03 $75 $70 $20 $05 $64  $6F $77 $6E $20 $05 $62 $75 $74
  3267 				.by  $41 $20 $05 $62 $75 $74 $42 $20  $13 $14 $13 $04 $04 $04 $04 $04  $04 $04 $04 $04 $04 $04 $04 $04
  3268 				.by  $04 $04 $04 $04 $14 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20
  3269 				.by  $20 $08 $47 $72 $6F $75 $70 $3A  $20 $35 $1A $56 $61 $72 $69 $6F  $75 $73 $20 $67 $72 $61 $70 $68
  3270 				.by  $69 $63 $73 $20 $72 $6F $75 $74  $69 $6E $65 $73 $20 $07 $4E $65  $6F $36 $35 $30 $32 $08 $47 $72
  3271 				.by  $6F $75 $70 $3A $20 $35 $0A $54  $69 $6C $65 $6D $61 $70 $73 $3A  $20 $11 $54 $69 $6C $65 $6D $61
  3272 				.by  $70 $20 $2D $20 $77 $69 $64 $74  $68 $3A $20 $09 $20 $68 $65 $69  $67 $68 $74 $3A $20 $08 $47 $72
  3273 				.by  $6F $75 $70 $3A $20 $36 $09 $53  $70 $72 $69 $74 $65 $73 $3A $20  $10 $54 $68 $61 $74 $27 $73 $20
  3274 				.by  $61 $6C $6C $20 $46 $6F $6C $6B  $73
  3275 				.endm
  3276
  3277 8BC2			.local	RESOURCE
  3278 8BC2				icl 'neo\resource.asm'
Source: resource.asm
     1
    48 					opt l+
  3279
  3280 8BC2				RCASM 'tilemap.asm' TILE_MAP_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     6 8BC2				org main.TILE_MAP_ADDRESS
     7 9000			len_
Source: tilemap.asm
     1 9000 01			    dta 1 ; tilemap format
     2 9001 28 0A		    dta 40,10 ; width, height
     4 9003 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,2,2,2,2,4,2,4,4,4,4,4,2,4,4,4,4,4,4,2,2,2,4,4,4,1,4,4,1,4,4,1,4,4
     5 902B 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
     6 9053 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
     7 907B 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
     8 90A3 02 02 02 02 02 04 +     dta 2,2,2,2,2,4,2,2,2,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
     9 90CB 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
    10 90F3 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
    11 911B 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4
    12 9143 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,4,4,2,4,4,4,2,4,4,1,4,4,1,4,4,1,4,4
    13 916B 02 04 04 04 02 04 +     dta 2,4,4,4,2,4,2,2,2,2,2,4,2,2,2,2,2,4,2,2,2,2,2,4,4,2,2,2,4,4,4,1,4,4,1,4,4,1,4,4
    11 = 0193			len = * - len_
    13 					.print '$R RCASM   ',main.TILE_MAP_ADDRESS,'..',main.TILE_MAP_ADDRESS+len-1," 'tilemap.asm'"
    13 				$R RCASM   $9000..$9192 'tilemap.asm'
Source: neo_api.a65
  3281 				.endl
  3282
  3283 					end
