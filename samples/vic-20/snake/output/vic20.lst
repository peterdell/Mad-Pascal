mads 2.1.5
    57 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTLIB: ',RTLIB,'..',*-1
   105 				RTLIB: $A07C..$A113
   106
   107 				; ------------------------------------------------------------
   108
   109 A114			START
   110 A114 BA				tsx
   111 A115 8E 97 A9			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					.fi
   116
   117 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   118 = A9AC			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 A118 A2 F2			ldx #256-VLEN
   124 A11A A9 00			lda #$00
   125 A11C 9D BA A8 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>256
   127 					@fill #VADR #VLEN #$00
   128 					eif
   129
   130 				.ifdef :psptr
   131 					mwa #PROGRAMSTACK :psptr
   132 				.fi
   133
   134 A122 A2 00			ldx #$00
   135 A124 86 00			stx bp						; BP = 0
   136
   137 A126 CA				dex						; X = 255
   138
   139 A127				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: vic20.a65]
     7 A127 20 FA A2			jsr MAIN.SYS_VIC20.@UnitInit
Source: vic20.a65
   140
   141 A12A			.local	MAIN						; PROCEDURE
   142
   143 A12A 4C 1E A9			jmp l_0067
   144
   145 				; ------------------------------------------------------------
   146
   147 A12D			.local	SYSTEM						; UNIT
   148
   149 A12D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   150
   151 				; ------------------------------------------------------------
   152
   153 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   154 				; as Pointer
   155 A12D B5 14			lda :STACKORIGIN,x
   156 A12F 85 08			sta A
   157 A131 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   158 A133 85 09			sta A+1
   159 A135 CA				dex
   160 A136			@main
   161
   162 				; -------------------  ASM Block 00000002  -------------------
   163
   164 A136 A0 00			ldy #0
   165 A138 B1 08 8D AE A9		mva (:edx),y Result
   166
   167 A13D			@exit
   168
   169 				; ------------------------------------------------------------
   170
   171 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   172 				; as Pointer
   173
   174 A13D E8				inx
   175 A13E AD AE A9 95 14		mva RESULT :STACKORIGIN,x
   176
   177 					.ifdef @new
   178 					lda <@VarData
   179 					sta :ztmp
   180 					lda >@VarData
   181 					ldy #@VarDataSize-1
   182 					jmp @FreeMem
   183 					eif
   184
   185 				; ------------------------------------------------------------
   186
   187 = 0008			A	= :EDX
   188 = A9AE			RESULT	= DATAORIGIN+$0002
   189 A143 60				rts						; ret
   190 				.endl
   191
   192 A144			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   193
   194 				; ------------------------------------------------------------
   195
   196 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   197 				; as Pointer
   198 A144 B5 14			lda :STACKORIGIN,x
   199 A146 85 08			sta A
   200 A148 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   201 A14A 85 09			sta A+1
   202 A14C CA				dex
   203 A14D 30 05			jmi @main
   204
   205 				; ------------------------------------------------------------
   206
   207 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   208 				; as Pointer
   209 A14F B5 14			lda :STACKORIGIN,x
   210 A151 85 0C			sta VALUE
   211 A153 CA				dex
   212 A154			@main
   213
   214 				; -------------------  ASM Block 00000018  -------------------
   215
   216 A154 A0 00			ldy #0
   217 A156 A5 0C 91 08			mva value (:edx),y
   218
   219 				; ------------------------------------------------------------
   220
   221 = 0008			A	= :EDX
   222 = 000C			VALUE	= :ECX
   223 A15A			@exit
   224 					.ifdef @new
   225 					lda <@VarData
   226 					sta :ztmp
   227 					lda >@VarData
   228 					ldy #@VarDataSize-1
   229 					jmp @FreeMem
   230 					els
   231 A15A 60				rts						; ret
   232 					eif
   233 				.endl
   234
   235 A15B			.local	MOVE_00B1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   236
   237 					.MACRO m@INLINE
   238 				
   239 				; -------------------  ASM Block 00000028  -------------------
   240 				
   241 					jsr @move
   242 				
   243 					.ENDM
   244
   245 				; ------------------------------------------------------------
   246
   247 = 0008			SOURCE	= :EDX
   248 = 000C			DEST	= :ECX
   249 = 0004			COUNT	= :EAX
   250 A15B			@exit
   251 				.endl
   252
   253 				; ------------------------------------------------------------
   254
   255 = 0648			M_PI_2	= $0648
   256 = 0192			D_PI_2	= $0192
   257 = 0004			D_PI_180	= $04
   258 = A9AC			RNDSEED	= DATAORIGIN+$0000
   259
   260 				.endl							; UNIT SYSTEM
   261
   262 				; ------------------------------------------------------------
   263
   264 A15B			.local	SYS_VIC20					; UNIT
   265
   266 A15B			.local	SYS_VBI						; PROCEDURE | ASSEMBLER | INTERRUPT
   267
   268 				; -------------------  ASM Block 00000048  -------------------
   269
   270 A15B E6 60		      inc RTCLOCK
   271
   272 A15D AE 13 91		      ldx VIA1DDRA
   273 A160 AC 22 91		      ldy VIA2DDRB
   274 A163 A9 C3 8D 13 91	      mva #%11000011 VIA1DDRA
   275 A168 AD 11 91		      lda VIA1PA
   276 A16B 8E 13 91		      stx VIA1DDRA
   277 A16E 29 3C		      and #%00111100                  // up, down, left, fire
   278 A170 85 61		      sta JOY
   279 A172 A9 7F 8D 22 91	      mva #%01111111 VIA2DDRB
   280 A177 AD 20 91		      lda VIA2PB
   281 A17A 8C 22 91		      sty VIA2DDRB
   282 A17D 29 80		      and #%10000000                  // right
   283 A17F 05 61		      ora JOY
   284 A181 49 BC		      eor #%10111100                  // inverse values
   285 A183 85 61		      sta JOY
   286
   287 A185 20 C8 A8		      jsr VBI
   288
   289 A188 A9 40 8D 2D 91	      mva #%01000000 VIA2IFR
   290 A18D 68 A8 68 AA 68	      plr
   291
   292 A192 40				rti						; ret
   293 				.endl
   294
   295 A193			.local	SYS_INIT					; PROCEDURE | ASSEMBLER
   296
   297 				; -------------------  ASM Block 00000049  -------------------
   298
   299 A193 78			      sei
   300
   301 A194 A9 7F 8D 1E 91	      mva #%01111111 VIA1IER          // disable all NMI
   302 A199 A9 C0 8D 2E 91	      mva #%11000000 VIA2IER          // enable IRQ via2/timer1
   303 A19E A9 40 8D 2B 91	      mva #%01000000 VIA2ACR          // put via2/timer1 in continuous free-running mode
   304
   305 A1A3 A9 5B 8D 14 03 A9 +       mwa #SYS_VBI CINV               // register IRQ procedure
   306
   307 A1AD A9 00 85 60		      mva #0 RTCLOCK                  // reset raster
   308
   309 A1B1 A9 92		      lda #VBI_START                  // wait for 130 raster line
   310 A1B3 CD 04 90		@     cmp VICCR4
   311 A1B6 D0 FB		      bne @-
   312
   313 A1B8 A9 86 8D 24 91 A9 +       mwa #PAL_TIMER1 VIA2T1CL        // set via2/timer1; 1/50 sec.
   314
   315 A1C2 A0 0F		      ldy #15
   316 A1C4 B9 6C A0 99 00 90 +       mva:rpl adr.VIC_DEF,y VICCR0,y- // init VIC registers
   317
   318 A1CD 58			      cli
   319
   320 A1CE			@exit
   321 					.ifdef @new
   322 					lda <@VarData
   323 					sta :ztmp
   324 					lda >@VarData
   325 					ldy #@VarDataSize-1
   326 					jmp @FreeMem
   327 					els
   328 A1CE 60				rts						; ret
   329 					eif
   330 				.endl
   331
   332 A1CF			.local	WAIT_00DC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   333 A1CF 85 08			sta N
   334
   335 				; -------------------  ASM Block 00000052  -------------------
   336
   337 A1D1 A5 08		      lda n
   338 A1D3 18 65 60		      add RTCLOCK
   339 A1D6 C5 60		@     cmp RTCLOCK
   340 A1D8 D0 FC		      bne @-
   341
   342 				; ------------------------------------------------------------
   343
   344 = 0008			N	= :EDX
   345 A1DA			@exit
   346 					.ifdef @new
   347 					lda <@VarData
   348 					sta :ztmp
   349 					lda >@VarData
   350 					ldy #@VarDataSize-1
   351 					jmp @FreeMem
   352 					els
   353 A1DA 60				rts						; ret
   354 					eif
   355 				.endl
   356
   357 A1DB			.local	CLRSCR						; PROCEDURE | ASSEMBLER | REGISTER
   358 A1DB 85 08			sta V
   359
   360 				; -------------------  ASM Block 00000053  -------------------
   361
   362 A1DD A0 00		      ldy #0
   363 A1DF A5 08		      lda v
   364 A1E1 99 00 1C		@     sta SCREEN_ADR,y
   365 A1E4 99 00 1D		      sta SCREEN_ADR + $100,y
   366 A1E7 99 00 1E		      sta SCREEN_ADR + $200,y
   367 A1EA C8			      iny
   368 A1EB D0 F4		      bne @-
   369
   370 				; ------------------------------------------------------------
   371
   372 = 0008			V	= :EDX
   373 A1ED			@exit
   374 					.ifdef @new
   375 					lda <@VarData
   376 					sta :ztmp
   377 					lda >@VarData
   378 					ldy #@VarDataSize-1
   379 					jmp @FreeMem
   380 					els
   381 A1ED 60				rts						; ret
   382 					eif
   383 				.endl
   384
   385 A1EE			.local	CLRCOL						; PROCEDURE | ASSEMBLER | REGISTER
   386 A1EE 85 08			sta C
   387
   388 				; -------------------  ASM Block 00000054  -------------------
   389
   390 A1F0 A0 00		      ldy #0
   391 A1F2 A5 08		      lda c
   392 A1F4 99 00 94		@     sta COLORMAP_ADR,y
   393 A1F7 99 00 95		      sta COLORMAP_ADR + $100,y
   394 A1FA 99 00 96		      sta COLORMAP_ADR + $200,y
   395 A1FD C8			      iny
   396 A1FE D0 F4		      bne @-
   397
   398 				; ------------------------------------------------------------
   399
   400 = 0008			C	= :EDX
   401 A200			@exit
   402 					.ifdef @new
   403 					lda <@VarData
   404 					sta :ztmp
   405 					lda >@VarData
   406 					ldy #@VarDataSize-1
   407 					jmp @FreeMem
   408 					els
   409 A200 60				rts						; ret
   410 					eif
   411 				.endl
   412
   413 A201			.local	SET_XY						; PROCEDURE | REGISTER
   414
   415 				; optimize OK (SYS_VIC20), line = 434
   416
   417 A201 A5 08			lda X
   418 A203 85 54			sta T0B
   419 A205 A5 0C			lda Y
   420 A207 85 55			sta T1B
   421
   422 				; optimize OK (SYS_VIC20), line = 435
   423
   424 A209 A9 19			lda #$19
   425 A20B 85 0C			sta :ecx
   426 A20D A5 55			lda T1B
   427 A20F 85 04			sta :eax
   428 					.ifdef fmulinit
   429 					fmulu_8
   430 					els
   431 A211 20 FC A0			imulCL
   432 					eif
   433 A214 A5 04			lda :eax
   434 A216 85 5A			sta TMP
   435 A218 A5 05			lda :eax+1
   436 A21A 85 5B			sta TMP+1
   437 A21C A5 5A			lda TMP
   438 A21E 18 65 54			add T0B
   439 A221 85 5A			sta TMP
   440 A223 90 02			scc
   441 A225 E6 5B			inc TMP+1
   442
   443 				; optimize OK (SYS_VIC20), line = 437
   444
   445 A227 85 56			sta SCR
   446 A229 A5 5B			lda TMP+1
   447 A22B 18 69 1C			add #$1C
   448 A22E 85 57			sta SCR+1
   449
   450 				; optimize OK (SYS_VIC20), line = 438
   451
   452 A230 A5 5A			lda TMP
   453 A232 85 58			sta COLMAP
   454 A234 A5 5B			lda TMP+1
   455 A236 18 69 94			add #$94
   456 A239 85 59			sta COLMAP+1
   457
   458 				; ------------------------------------------------------------
   459
   460 = 0008			X	= :EDX
   461 = 000C			Y	= :ECX
   462 A23B			@exit
   463 					.ifdef @new
   464 					lda <@VarData
   465 					sta :ztmp
   466 					lda >@VarData
   467 					ldy #@VarDataSize-1
   468 					jmp @FreeMem
   469 					els
   470 A23B 60				rts						; ret
   471 					eif
   472 				.endl
   473
   474 A23C			.local	PRINT						; PROCEDURE | ASSEMBLER | REGISTER
   475
   476 				; -------------------  ASM Block 00000055  -------------------
   477
   478 A23C A0 00		      ldy #0
   479 A23E B1 0C 85 54		      mva (s),y ZP_0_B
   480 A242 A8 88 E6 0C		      tay:dey:inc s
   481 A246 B1 0C 91 56		@     mva (s),y (scr),y
   482 A24A A5 08 91 58		      mva col (colmap),y
   483 A24E 88			      dey
   484 A24F 10 F5		      bpl @-
   485
   486 				; ------------------------------------------------------------
   487
   488 = 0008			COL	= :EDX
   489 = 000C			S	= :ECX
   490 A251			@exit
   491 					.ifdef @new
   492 					lda <@VarData
   493 					sta :ztmp
   494 					lda >@VarData
   495 					ldy #@VarDataSize-1
   496 					jmp @FreeMem
   497 					els
   498 A251 60				rts						; ret
   499 					eif
   500 				.endl
   501
   502 A252			.local	PUT_CHAR					; PROCEDURE | ASSEMBLER | REGISTER
   503
   504 				; -------------------  ASM Block 00000056  -------------------
   505
   506 A252 A0 00		      ldy #0
   507 A254 A5 0C 91 56		      mva c (scr),y
   508 A258 A5 08 91 58		      mva col (colmap),y
   509
   510 				; ------------------------------------------------------------
   511
   512 = 0008			COL	= :EDX
   513 = 000C			C	= :ECX
   514 A25C			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 A25C 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 A25D			.local	UPDATE_COUNTER_2				; PROCEDURE | ASSEMBLER | REGISTER
   527
   528 				; -------------------  ASM Block 00000057  -------------------
   529
   530 A25D F8			      sed
   531
   532 A25E A0 00		      ldy #0
   533 A260 B1 0C		      lda (counter),y
   534 A262 18 65 08		      add v
   535 A265 91 0C		      sta (counter),y
   536
   537 A267 D8			      cld
   538
   539 A268 A0 00		      ldy #0
   540 A26A B1 0C		      lda (counter),y
   541 A26C 48			      pha
   542 A26D 29 0F		      and #%00001111
   543 A26F 09 30		      ora #%00110000
   544 A271 A0 03		      ldy #3
   545 A273 91 04		      sta (scr_counter),y
   546 A275 68			      pla
   547 A276 4A 4A 4A 4A		:4    lsr
   548 A27A 09 30		      ora #%00110000
   549 A27C 88			      dey
   550 A27D 91 04		      sta (scr_counter),y
   551
   552 				; ------------------------------------------------------------
   553
   554 = 0008			V	= :EDX
   555 = 000C			COUNTER	= :ECX
   556 = 0004			SCR_COUNTER	= :EAX
   557 A27F			@exit
   558 					.ifdef @new
   559 					lda <@VarData
   560 					sta :ztmp
   561 					lda >@VarData
   562 					ldy #@VarDataSize-1
   563 					jmp @FreeMem
   564 					els
   565 A27F 60				rts						; ret
   566 					eif
   567 				.endl
   568
   569 A280			.local	UPDATE_COUNTER_4				; PROCEDURE | ASSEMBLER | REGISTER
   570
   571 				; -------------------  ASM Block 00000058  -------------------
   572
   573 A280 F8			      sed
   574
   575 A281 A0 00		      ldy #0
   576 A283 B1 0C		      lda (counter),y
   577 A285 18 65 08		      add v
   578 A288 91 0C		      sta (counter),y
   579 A28A 90 08		      bcc @+
   580 A28C C8			      iny
   581 A28D B1 0C		      lda (counter),y
   582 A28F 18 69 01		      add #1
   583 A292 91 0C		      sta (counter),y
   584
   585 A294 D8			@     cld
   586
   587 A295 A0 00		      ldy #0
   588 A297 B1 0C		      lda (counter),y
   589 A299 48			      pha
   590 A29A 29 0F		      and #%00001111
   591 A29C 09 30		      ora #%00110000
   592 A29E A0 03		      ldy #3
   593 A2A0 91 04		      sta (scr_counter),y
   594 A2A2 68			      pla
   595 A2A3 4A 4A 4A 4A		:4    lsr
   596 A2A7 09 30		      ora #%00110000
   597 A2A9 88			      dey
   598 A2AA 91 04		      sta (scr_counter),y
   599
   600 A2AC 88			      dey
   601 A2AD B1 0C		      lda (counter),y
   602 A2AF 29 0F		      and #%00001111
   603 A2B1 09 30		      ora #%00110000
   604 A2B3 91 04		      sta (scr_counter),y
   605 A2B5 B1 0C		      lda (counter),y
   606 A2B7 4A 4A 4A 4A		:4    lsr
   607 A2BB 09 30		      ora #%00110000
   608 A2BD 88			      dey
   609 A2BE 91 04		      sta (scr_counter),y
   610
   611 				; ------------------------------------------------------------
   612
   613 = 0008			V	= :EDX
   614 = 000C			COUNTER	= :ECX
   615 = 0004			SCR_COUNTER	= :EAX
   616 A2C0			@exit
   617 					.ifdef @new
   618 					lda <@VarData
   619 					sta :ztmp
   620 					lda >@VarData
   621 					ldy #@VarDataSize-1
   622 					jmp @FreeMem
   623 					els
   624 A2C0 60				rts						; ret
   625 					eif
   626 				.endl
   627
   628 A2C1			.local	PRND_0112					; PROCEDURE | ASSEMBLER | OVERLOAD
   629
   630 				; -------------------  ASM Block 00000059  -------------------
   631
   632 A2C1 AD 04 90		      lda VICCR4
   633 A2C4 65 60		      adc RTCLOCK
   634 A2C6 4D 27 91		      eor VIA2T1LH
   635 A2C9 4D 26 91		      eor VIA2T1LL
   636 A2CC 4D 14 91		      eor VIA1T1CL
   637 A2CF 4D 15 91		      eor VIA1T1CH
   638 A2D2 85 62		      sta RND
   639
   640 A2D4			@exit
   641 					.ifdef @new
   642 					lda <@VarData
   643 					sta :ztmp
   644 					lda >@VarData
   645 					ldy #@VarDataSize-1
   646 					jmp @FreeMem
   647 					els
   648 A2D4 60				rts						; ret
   649 					eif
   650 				.endl
   651
   652 A2D5			.local	PRND_0113					; PROCEDURE | OVERLOAD | REGISTER
   653
   654 				; optimize FAIL ('PRND_0112', SYS_VIC20), line = 555
   655
   656 A2D5 20 C1 A2			jsr PRND_0112
   657
   658 				; optimize OK (SYS_VIC20), line = 557
   659
   660 A2D8 A5 62			lda RND
   661 A2DA 25 04			and MASK
   662 A2DC 85 54			sta T0B
   663
   664 				; optimize OK (SYS_VIC20), line = 559
   665
   666 A2DE C5 08			cmp A
   667 A2E0 B0 05			jcs l_0137
   668 A2E2 18 65 08			add A
   669 A2E5 85 54			sta T0B
   670 A2E7			l_0137
   671
   672 				; optimize OK (SYS_VIC20), line = 560
   673
   674 A2E7 A5 0C			lda B
   675 A2E9 C5 54			cmp T0B
   676 A2EB B0 08			jcs l_0151
   677
   678 				; --- RepeatUntilProlog
   679 A2ED			l_0153
   680
   681 				; optimize OK (SYS_VIC20), line = 561
   682
   683 A2ED 46 54			lsr T0B
   684
   685 				; optimize OK (SYS_VIC20), line = 562
   686
   687 A2EF A5 0C			lda B
   688 A2F1 C5 54			cmp T0B
   689 A2F3 90 F8			jcc l_0153
   690 A2F5			l_0151
   691
   692 				; optimize OK (SYS_VIC20), line = 564
   693
   694 A2F5 A5 54			lda T0B
   695 A2F7 85 62			sta RND
   696
   697 				; ------------------------------------------------------------
   698
   699 = 0008			A	= :EDX
   700 = 000C			B	= :ECX
   701 = 0004			MASK	= :EAX
   702 A2F9			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					els
   710 A2F9 60				rts						; ret
   711 					eif
   712 				.endl
   713
   714 				; ------------------------------------------------------------
   715 				; ------------------------------------------------------------
   716 A2FA			@UnitInit
   717
   718 				; optimize OK (SYS_VIC20), line = 571
   719
   720 A2FA A9 00			lda #$00
   721 A2FC 85 56			sta SCR
   722 A2FE A9 1C			lda #$1C
   723 A300 85 57			sta SCR+1
   724
   725 				; optimize OK (SYS_VIC20), line = 572
   726
   727 A302 A9 00			lda #$00
   728 A304 85 58			sta COLMAP
   729 A306 A9 94			lda #$94
   730 A308 85 59			sta COLMAP+1
   731
   732 A30A 60				rts
   733
   734 				; ------------------------------------------------------------
   735
   736 = 0000			BLACK	= $00
   737 = 0001			WHITE	= $01
   738 = 0002			RED	= $02
   739 = 0003			CYAN	= $03
   740 = 0004			PURPLE	= $04
   741 = 0005			GREEN	= $05
   742 = 0006			BLUE	= $06
   743 = 0007			YELLOW	= $07
   744 = 0008			ORANGE	= $08
   745 = 0009			LIGHT_ORANGE	= $09
   746 = 000A			LIGHT_RED	= $0A
   747 = 000B			LIGHT_CYAN	= $0B
   748 = 000C			LIGHT_PURPLE	= $0C
   749 = 000D			LIGHT_GREEN	= $0D
   750 = 000E			LIGHT_BLUE	= $0E
   751 = 000F			LIGHT_YELLOW	= $0F
   752 = 1000			CHARSET_ADR	= $1000
   753 = 1C00			SCREEN_ADR	= $1C00
   754 = 9400			COLORMAP_ADR	= $9400
   755 = 0019			ROW_SIZE	= $19
   756 = 001E			COL_SIZE	= $1E
   757 = 001F			ROW_MASK	= $1F
   758 = 001F			COL_MASK	= $1F
   759 = 02EE			SCREEN_SIZE	= $02EE
   760 = 0400			CHARSET_SIZE	= $0400
   761 = A000			CART_ADR	= $A000
   762 = 2000			CART_SIZE	= $2000
   763 = 0004			JOY_UP	= $04
   764 = 0008			JOY_DOWN	= $08
   765 = 0010			JOY_LEFT	= $10
   766 = 0080			JOY_RIGHT	= $80
   767 = 0020			JOY_FIRE	= $20
   768 = 10011100		JOY_DIR_MASK	= $10011100
   769 = 0060			RTCLOCK	= $60
   770 = 0061			JOY	= $61
   771 = 0062			RND	= $62
   772 = 0054			ZP_0_B	= $54
   773 = 0055			ZP_1_B	= $55
   774 = 0056			ZP_0_W	= $56
   775 = 0058			ZP_1_W	= $58
   776 = 005A			ZP_2_W	= $5A
   777 = 005C			ZP_3_W	= $5C
   778 = 005E			ZP_0_P	= $5E
   779 = A06C			adr.VIC_DEF	= CODEORIGIN+$0060
   780 A30B			.var VIC_DEF	= adr.VIC_DEF .word
   781 = 5686			PAL_TIMER1	= $5686
   782 = 0092			VBI_START	= $92
   783 = 0314			CINV	= $0314
   784 = 0316			CBINV	= $0316
   785 = 0318			NMINV	= $0318
   786 = 9000			VICCR0	= $9000
   787 = 9001			VICCR1	= $9001
   788 = 9002			VICCR2	= $9002
   789 = 9003			VICCR3	= $9003
   790 = 9004			VICCR4	= $9004
   791 = 9005			VICCR5	= $9005
   792 = 9006			VICCR6	= $9006
   793 = 9007			VICCR7	= $9007
   794 = 9008			VICCR8	= $9008
   795 = 9009			VICCR9	= $9009
   796 = 900A			VICCRA	= $900A
   797 = 900B			VICCRB	= $900B
   798 = 900C			VICCRC	= $900C
   799 = 900D			VICCRD	= $900D
   800 = 900E			VICCRE	= $900E
   801 = 900F			VICCRF	= $900F
   802 = 9110			VIA1PB	= $9110
   803 = 9111			VIA1PA	= $9111
   804 = 9112			VIA1DDRB	= $9112
   805 = 9113			VIA1DDRA	= $9113
   806 = 9114			VIA1T1CL	= $9114
   807 = 9115			VIA1T1CH	= $9115
   808 = 9116			VIA1T1LL	= $9116
   809 = 9117			VIA1T1LH	= $9117
   810 = 9118			VIA1T2CL	= $9118
   811 = 9119			VIA1T2CH	= $9119
   812 = 911A			VIA1SR	= $911A
   813 = 911B			VIA1ACR	= $911B
   814 = 911C			VIA1PCR	= $911C
   815 = 911D			VIA1IFR	= $911D
   816 = 911E			VIA1IER	= $911E
   817 = 911F			VIA1PA2	= $911F
   818 = 9120			VIA2PB	= $9120
   819 = 9121			VIA2PA	= $9121
   820 = 9122			VIA2DDRB	= $9122
   821 = 9123			VIA2DDRA	= $9123
   822 = 9124			VIA2T1CL	= $9124
   823 = 9125			VIA2T1CH	= $9125
   824 = 9126			VIA2T1LL	= $9126
   825 = 9127			VIA2T1LH	= $9127
   826 = 9128			VIA2T2CL	= $9128
   827 = 9129			VIA2T2CH	= $9129
   828 = 912A			VIA2SR	= $912A
   829 = 912B			VIA2ACR	= $912B
   830 = 912C			VIA2PCR	= $912C
   831 = 912D			VIA2IFR	= $912D
   832 = 912E			VIA2IER	= $912E
   833 = 912F			VIA2PA2	= $912F
   834 = 0056			SCR	= $56
   835 = 0058			COLMAP	= $58
   836 = 005A			TMP	= $5A
   837 = 005E			GAME_VBI	= $5E
   838 = 0054			T0B	= $54
   839 = 0055			T1B	= $55
   840
   841 = A30B 6C A0		VIC_DEF
   841 				.endl							; UNIT SYS_VIC20
   842
   843 A30D			.local	WELCOME_SCR					; PROCEDURE | INLINE
   844
   845 					.MACRO m@INLINE
   846 				
   847 				; optimize OK (game.inc), line = 82
   848 				
   849 					lda #$01
   850 					jsr SYS_VIC20.CLRCOL
   851 				
   852 				; optimize OK (game.inc), line = 84
   853 				
   854 					lda #$0C
   855 					sta T0B
   856 					sta T2B
   857 				
   858 				; optimize OK (game.inc), line = 86
   859 				
   860 					lda adr.TXT_INFO
   861 					lsr @
   862 					sta T1B
   863 					lda T0B
   864 					sub T1B
   865 					sta T0B
   866 				
   867 				; optimize OK (game.inc), line = 87
   868 				
   869 					sta SYS_VIC20.SET_XY.X
   870 					lda #$02
   871 					sta SYS_VIC20.SET_XY.Y
   872 					jsr SYS_VIC20.SET_XY
   873 				
   874 				; optimize OK (game.inc), line = 88
   875 				
   876 					lda #$07
   877 					sta SYS_VIC20.PRINT.COL
   878 					lda #$53
   879 					sta SYS_VIC20.PRINT.S
   880 					lda #$A0
   881 					sta SYS_VIC20.PRINT.S+1
   882 					jsr SYS_VIC20.PRINT
   883 				
   884 				; optimize OK (game.inc), line = 90
   885 				
   886 					lda adr.TXT_TURBO
   887 					lsr @
   888 					sta T1B
   889 					lda T2B
   890 					sub T1B
   891 					sta T2B
   892 				
   893 				; optimize OK (game.inc), line = 91
   894 				
   895 					sta SYS_VIC20.SET_XY.X
   896 					lda #$19
   897 					sta SYS_VIC20.SET_XY.Y
   898 					jsr SYS_VIC20.SET_XY
   899 				
   900 				; optimize OK (game.inc), line = 92
   901 				
   902 					lda #$07
   903 					sta SYS_VIC20.PRINT.COL
   904 					lda #$3E
   905 					sta SYS_VIC20.PRINT.S
   906 					lda #$A0
   907 					sta SYS_VIC20.PRINT.S+1
   908 					jsr SYS_VIC20.PRINT
   909 				
   910 				; --- RepeatUntilProlog
   911 				l_01AF
   912 				
   913 				; optimize OK (game.inc), line = 94
   914 				
   915 					lda SYS_VIC20.JOY
   916 					and #$20
   917 					jeq l_01AF
   918 					.ENDM
   919 A30D			@exit
   920 				.endl
   921
   922 A30D			.local	DRAW_FRAME					; PROCEDURE
   923
   924 				; optimize OK (game.inc), line = 103
   925
   926 A30D A9 19			lda #$19
   927 A30F 85 73			sta T0W
   928 A311 A9 1C			lda #$1C
   929 A313 85 74			sta T0W+1
   930 A315 A9 19			lda #$19
   931 A317 85 75			sta T1W
   932 A319 A9 94			lda #$94
   933 A31B 85 76			sta T1W+1
   934
   935 				; optimize OK (game.inc), line = 104
   936
   937 A31D A9 1A			lda #$1A
   938 A31F 85 70			sta I
   939
   940 A321			l_01D5
   941 				; --- ForToDoCondition
   942
   943 				; optimize OK (game.inc), line = 105
   944
   945 A321 A4 74			ldy T0W+1
   946 A323 84 01			sty :bp+1
   947 A325 A4 73			ldy T0W
   948 A327 A9 43			lda #$43
   949 A329 91 00			sta (:bp),y
   950
   951 				; optimize OK (game.inc), line = 106
   952
   953 A32B A4 73 84 02 A4 74 + 	mwy T0W :bp2
   954 A333 A0 18			ldy #$18
   955 A335 A9 42			lda #$42
   956 A337 91 02			sta (:bp2),y
   957
   958 				; optimize OK (game.inc), line = 107
   959
   960 A339 A4 76			ldy T1W+1
   961 A33B 84 01			sty :bp+1
   962 A33D A4 75			ldy T1W
   963 A33F A9 07			lda #$07
   964 A341 91 00			sta (:bp),y
   965
   966 				; optimize OK (game.inc), line = 108
   967
   968 A343 A4 75 84 02 A4 76 + 	mwy T1W :bp2
   969 A34B A0 18			ldy #$18
   970 A34D 91 02			sta (:bp2),y
   971
   972 				; optimize OK (game.inc), line = 109
   973
   974 A34F A5 73			lda T0W
   975 A351 18 69 19			add #$19
   976 A354 85 73			sta T0W
   977 A356 90 02			scc
   978 A358 E6 74			inc T0W+1
   979
   980 				; optimize OK (game.inc), line = 110
   981
   982 A35A A5 75			lda T1W
   983 A35C 18 69 19			add #$19
   984 A35F 85 75			sta T1W
   985 A361 90 02			scc
   986 A363 E6 76			inc T1W+1
   987
   988 				; --- ForToDoEpilog
   989 A365 C6 70			dec I
   990 A367 10 B8			jpl l_01D5
   991 A369			l_01E3
   992
   993 				; optimize OK (game.inc), line = 113
   994
   995 A369 A9 18			lda #$18
   996 A36B 85 70			sta I
   997
   998 A36D			l_020B
   999 				; --- ForToDoCondition
  1000
  1001 				; optimize OK (game.inc), line = 114
  1002
  1003 A36D A4 70			ldy I
  1004 A36F A9 41			lda #$41
  1005 A371 99 00 1C			sta $1C00,y
  1006
  1007 				; optimize OK (game.inc), line = 115
  1008
  1009 A374 99 BC 1E			sta $1EBC,y
  1010
  1011 				; optimize OK (game.inc), line = 116
  1012
  1013 A377 A9 07			lda #$07
  1014 A379 99 00 94			sta $9400,y
  1015
  1016 				; optimize OK (game.inc), line = 117
  1017
  1018 A37C 99 BC 96			sta $96BC,y
  1019
  1020 				; --- ForToDoEpilog
  1021 A37F C6 70			dec I
  1022 A381 10 EA			jpl l_020B
  1023 A383			l_0219
  1024
  1025 				; ------------------------------------------------------------
  1026
  1027 = 0070			I	= $70
  1028 A383			@exit
  1029 					.ifdef @new
  1030 					lda <@VarData
  1031 					sta :ztmp
  1032 					lda >@VarData
  1033 					ldy #@VarDataSize-1
  1034 					jmp @FreeMem
  1035 					els
  1036 A383 60				rts						; ret
  1037 					eif
  1038 				.endl
  1039
  1040 A384			.local	PRESS_FIRE					; PROCEDURE
  1041
  1042 				; optimize OK (game.inc), line = 125
  1043
  1044 A384 A9 19			lda #$19
  1045 A386 38 ED 32 A0			sub adr.TXT_FIRE
  1046 A38A 38 E9 02			sub #$02
  1047 A38D 85 08			sta SYS_VIC20.SET_XY.X
  1048 A38F A9 00			lda #$00
  1049 A391 85 0C			sta SYS_VIC20.SET_XY.Y
  1050 A393 20 01 A2			jsr SYS_VIC20.SET_XY
  1051
  1052 				; optimize OK (game.inc), line = 126
  1053
  1054 A396 A9 01			lda #$01
  1055 A398 85 08			sta SYS_VIC20.PRINT.COL
  1056 A39A A9 32			lda #$32
  1057 A39C 85 0C			sta SYS_VIC20.PRINT.S
  1058 A39E A9 A0			lda #$A0
  1059 A3A0 85 0D			sta SYS_VIC20.PRINT.S+1
  1060 A3A2 20 3C A2			jsr SYS_VIC20.PRINT
  1061
  1062 				; --- RepeatUntilProlog
  1063 A3A5			l_0254
  1064
  1065 				; optimize OK (game.inc), line = 128
  1066
  1067 A3A5 A5 61			lda SYS_VIC20.JOY
  1068 A3A7 29 20			and #$20
  1069 A3A9 F0 FA			jeq l_0254
  1070 A3AB			@exit
  1071 					.ifdef @new
  1072 					lda <@VarData
  1073 					sta :ztmp
  1074 					lda >@VarData
  1075 					ldy #@VarDataSize-1
  1076 					jmp @FreeMem
  1077 					els
  1078 A3AB 60				rts						; ret
  1079 					eif
  1080 				.endl
  1081
  1082 A3AC			.local	PUT_SNAKE					; PROCEDURE
  1083
  1084 				; optimize OK (game.inc), line = 135
  1085
  1086 A3AC A9 44			lda #$44
  1087 A3AE 85 7A			sta HEAD_DIR
  1088
  1089 				; optimize OK (game.inc), line = 136
  1090
  1091 A3B0 85 79			sta TAIL_DIR
  1092
  1093 				; optimize OK (game.inc), line = 137
  1094
  1095 A3B2 A9 83			lda #$83
  1096 A3B4 85 84			sta HEAD_POS
  1097 A3B6 A9 1D			lda #$1D
  1098 A3B8 85 85			sta HEAD_POS+1
  1099
  1100 				; optimize OK (game.inc), line = 138
  1101
  1102 A3BA A9 83			lda #$83
  1103 A3BC 85 86			sta HEAD_POS_COL
  1104 A3BE A9 95			lda #$95
  1105 A3C0 85 87			sta HEAD_POS_COL+1
  1106
  1107 				; optimize OK (game.inc), line = 140
  1108
  1109 A3C2 A4 85			ldy HEAD_POS+1
  1110 A3C4 84 01			sty :bp+1
  1111 A3C6 A4 84			ldy HEAD_POS
  1112 A3C8 A9 48			lda #$48
  1113 A3CA 91 00			sta (:bp),y
  1114 A3CC A4 87			ldy HEAD_POS_COL+1
  1115 A3CE 84 01			sty :bp+1
  1116 A3D0 A4 86			ldy HEAD_POS_COL
  1117 A3D2 A9 01			lda #$01
  1118 A3D4 91 00			sta (:bp),y
  1119
  1120 				; optimize OK (game.inc), line = 142
  1121
  1122 A3D6 A5 84			lda HEAD_POS
  1123 A3D8 85 73			sta T0W
  1124 A3DA A5 85			lda HEAD_POS+1
  1125 A3DC 85 74			sta T0W+1
  1126 A3DE A5 86			lda HEAD_POS_COL
  1127 A3E0 85 75			sta T1W
  1128 A3E2 A5 87			lda HEAD_POS_COL+1
  1129 A3E4 85 76			sta T1W+1
  1130
  1131 				; optimize OK (game.inc), line = 143
  1132
  1133 A3E6 A9 00			lda #$00
  1134 A3E8 85 70			sta T0B
  1135
  1136 A3EA			l_0294
  1137 				; --- ForToDoCondition
  1138
  1139 				; optimize OK (game.inc), line = 144
  1140
  1141 A3EA A5 73			lda T0W
  1142 A3EC 18 69 19			add #$19
  1143 A3EF 85 73			sta T0W
  1144 A3F1 90 02			scc
  1145 A3F3 E6 74			inc T0W+1
  1146 A3F5 A5 75			lda T1W
  1147 A3F7 18 69 19			add #$19
  1148 A3FA 85 75			sta T1W
  1149 A3FC 90 02			scc
  1150 A3FE E6 76			inc T1W+1
  1151
  1152 				; optimize OK (game.inc), line = 145
  1153
  1154 A400 A4 74			ldy T0W+1
  1155 A402 84 01			sty :bp+1
  1156 A404 A4 73			ldy T0W
  1157 A406 A9 4C			lda #$4C
  1158 A408 91 00			sta (:bp),y
  1159 A40A A4 76			ldy T1W+1
  1160 A40C 84 01			sty :bp+1
  1161 A40E A4 75			ldy T1W
  1162 A410 A9 01			lda #$01
  1163 A412 91 00			sta (:bp),y
  1164
  1165 				; --- ForToDoEpilog
  1166 A414 C6 70			dec T0B
  1167 A416 10 D2			jpl l_0294
  1168 A418			l_02A2
  1169
  1170 				; optimize OK (game.inc), line = 148
  1171
  1172 A418 A5 73			lda T0W
  1173 A41A 18 69 19			add #$19
  1174 A41D 85 73			sta T0W
  1175 A41F 90 02			scc
  1176 A421 E6 74			inc T0W+1
  1177 A423 A5 75			lda T1W
  1178 A425 18 69 19			add #$19
  1179 A428 85 75			sta T1W
  1180 A42A 90 02			scc
  1181 A42C E6 76			inc T1W+1
  1182 A42E A5 73			lda T0W
  1183 A430 85 88			sta TAIL_POS
  1184 A432 A5 74			lda T0W+1
  1185 A434 85 89			sta TAIL_POS+1
  1186
  1187 				; optimize OK (game.inc), line = 149
  1188
  1189 A436 85 01			sta :bp+1
  1190 A438 A4 88			ldy TAIL_POS
  1191 A43A A9 44			lda #$44
  1192 A43C 91 00			sta (:bp),y
  1193 A43E A4 76			ldy T1W+1
  1194 A440 84 01			sty :bp+1
  1195 A442 A4 75			ldy T1W
  1196 A444 A9 01			lda #$01
  1197 A446 91 00			sta (:bp),y
  1198
  1199 				; ------------------------------------------------------------
  1200
  1201 A448			@exit
  1202 					.ifdef @new
  1203 					lda <@VarData
  1204 					sta :ztmp
  1205 					lda >@VarData
  1206 					ldy #@VarDataSize-1
  1207 					jmp @FreeMem
  1208 					els
  1209 A448 60				rts						; ret
  1210 					eif
  1211 				.endl
  1212
  1213 A449			.local	DRAW_BOTTOM_LINE				; PROCEDURE
  1214
  1215 				; optimize OK (game.inc), line = 156
  1216
  1217 A449 A9 00			lda #$00
  1218 A44B 85 08			sta SYS_VIC20.SET_XY.X
  1219 A44D A9 1D			lda #$1D
  1220 A44F 85 0C			sta SYS_VIC20.SET_XY.Y
  1221 A451 20 01 A2			jsr SYS_VIC20.SET_XY
  1222
  1223 				; optimize OK (game.inc), line = 157
  1224
  1225 A454 A9 01			lda #$01
  1226 A456 85 08			sta SYS_VIC20.PRINT.COL
  1227 A458 A9 0C			lda #$0C
  1228 A45A 85 0C			sta SYS_VIC20.PRINT.S
  1229 A45C A9 A0			lda #$A0
  1230 A45E 85 0D			sta SYS_VIC20.PRINT.S+1
  1231 A460 20 3C A2			jsr SYS_VIC20.PRINT
  1232
  1233 				; optimize OK (game.inc), line = 159
  1234
  1235 A463 AD 0C A0			lda adr.TXT_LEVEL
  1236 A466 18 69 01			add #$01
  1237 A469 85 08			sta SYS_VIC20.SET_XY.X
  1238 A46B A9 1D			lda #$1D
  1239 A46D 85 0C			sta SYS_VIC20.SET_XY.Y
  1240 A46F 20 01 A2			jsr SYS_VIC20.SET_XY
  1241
  1242 				; optimize OK (game.inc), line = 160
  1243
  1244 A472 A9 01			lda #$01
  1245 A474 85 08			sta SYS_VIC20.PRINT.COL
  1246 A476 A9 23			lda #$23
  1247 A478 85 0C			sta SYS_VIC20.PRINT.S
  1248 A47A A9 A0			lda #$A0
  1249 A47C 85 0D			sta SYS_VIC20.PRINT.S+1
  1250 A47E 20 3C A2			jsr SYS_VIC20.PRINT
  1251
  1252 				; optimize OK (game.inc), line = 162
  1253
  1254 A481 A9 19			lda #$19
  1255 A483 38 ED 16 A0			sub adr.TXT_POINTS
  1256 A487 85 08			sta SYS_VIC20.SET_XY.X
  1257 A489 A9 1D			lda #$1D
  1258 A48B 85 0C			sta SYS_VIC20.SET_XY.Y
  1259 A48D 20 01 A2			jsr SYS_VIC20.SET_XY
  1260
  1261 				; optimize OK (game.inc), line = 163
  1262
  1263 A490 A9 01			lda #$01
  1264 A492 85 08			sta SYS_VIC20.PRINT.COL
  1265 A494 A9 16			lda #$16
  1266 A496 85 0C			sta SYS_VIC20.PRINT.S
  1267 A498 A9 A0			lda #$A0
  1268 A49A 85 0D			sta SYS_VIC20.PRINT.S+1
  1269 A49C 20 3C A2			jsr SYS_VIC20.PRINT
  1270 A49F			@exit
  1271 					.ifdef @new
  1272 					lda <@VarData
  1273 					sta :ztmp
  1274 					lda >@VarData
  1275 					ldy #@VarDataSize-1
  1276 					jmp @FreeMem
  1277 					els
  1278 A49F 60				rts						; ret
  1279 					eif
  1280 				.endl
  1281
  1282 A4A0			.local	PRINT_HI_SCORE					; PROCEDURE
  1283
  1284 				; optimize OK (game.inc), line = 170
  1285
  1286 A4A0 A9 02			lda #$02
  1287 A4A2 85 08			sta SYS_VIC20.SET_XY.X
  1288 A4A4 A9 00			lda #$00
  1289 A4A6 85 0C			sta SYS_VIC20.SET_XY.Y
  1290 A4A8 20 01 A2			jsr SYS_VIC20.SET_XY
  1291
  1292 				; optimize OK (game.inc), line = 171
  1293
  1294 A4AB A9 01			lda #$01
  1295 A4AD 85 08			sta SYS_VIC20.PRINT.COL
  1296 A4AF A9 29			lda #$29
  1297 A4B1 85 0C			sta SYS_VIC20.PRINT.S
  1298 A4B3 A9 A0			lda #$A0
  1299 A4B5 85 0D			sta SYS_VIC20.PRINT.S+1
  1300 A4B7 20 3C A2			jsr SYS_VIC20.PRINT
  1301
  1302 				; optimize OK (game.inc), line = 172
  1303
  1304 A4BA A9 00			lda #$00
  1305 A4BC 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1306 A4BE A9 82			lda #$82
  1307 A4C0 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1308 A4C2 A9 00			lda #$00
  1309 A4C4 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1310 A4C6 A9 05			lda #$05
  1311 A4C8 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1312 A4CA A9 1C			lda #$1C
  1313 A4CC 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1314 A4CE 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1315 A4D1			@exit
  1316 					.ifdef @new
  1317 					lda <@VarData
  1318 					sta :ztmp
  1319 					lda >@VarData
  1320 					ldy #@VarDataSize-1
  1321 					jmp @FreeMem
  1322 					els
  1323 A4D1 60				rts						; ret
  1324 					eif
  1325 				.endl
  1326
  1327 A4D2			.local	HALL_OF_FAME					; PROCEDURE
  1328
  1329 				; optimize OK (game.inc), line = 179
  1330
  1331 A4D2 A5 83			lda HI_SCORE_BCD+1
  1332 A4D4 C5 81			cmp SCORE_BCD+1
  1333 A4D6 D0 04			bne @+
  1334 A4D8 A5 82			lda HI_SCORE_BCD
  1335 A4DA C5 80			cmp SCORE_BCD
  1336 				@
  1337 A4DC B0 08			jcs l_0300
  1338 A4DE A5 80			lda SCORE_BCD
  1339 A4E0 85 82			sta HI_SCORE_BCD
  1340 A4E2 A5 81			lda SCORE_BCD+1
  1341 A4E4 85 83			sta HI_SCORE_BCD+1
  1342 A4E6			l_0300
  1343
  1344 				; optimize FAIL ('PRINT_HI_SCORE', game.inc), line = 180
  1345
  1346 A4E6 20 A0 A4			jsr PRINT_HI_SCORE
  1347 A4E9			@exit
  1348 					.ifdef @new
  1349 					lda <@VarData
  1350 					sta :ztmp
  1351 					lda >@VarData
  1352 					ldy #@VarDataSize-1
  1353 					jmp @FreeMem
  1354 					els
  1355 A4E9 60				rts						; ret
  1356 					eif
  1357 				.endl
  1358
  1359 A4EA			.local	MOVE_TAIL					; PROCEDURE
  1360
  1361 				; optimize OK (game.inc), line = 187
  1362
  1363 A4EA A4 89			ldy TAIL_POS+1
  1364 A4EC 84 01			sty :bp+1
  1365 A4EE A4 88			ldy TAIL_POS
  1366 A4F0 A9 20			lda #$20
  1367 A4F2 91 00			sta (:bp),y
  1368
  1369 				; optimize OK (game.inc), line = 189
  1370
  1371 A4F4 A5 79			lda TAIL_DIR
  1372 A4F6 8D AF A9			sta @CASETMP_0003
  1373 A4F9 C9 44			cmp #$44
  1374 A4FB D0 0E			jne l_031C
  1375 				@
  1376
  1377 				; optimize OK (game.inc), line = 190
  1378
  1379 A4FD A5 88			lda TAIL_POS
  1380 A4FF 38 E9 19			sub #$19
  1381 A502 85 88			sta TAIL_POS
  1382 A504 B0 02			scs
  1383 A506 C6 89			dec TAIL_POS+1
  1384
  1385 A508 4C 36 A5			jmp a_0003
  1386 A50B			l_031C
  1387 A50B C9 45			cmp #$45
  1388 A50D D0 0E			jne l_0326
  1389 				@
  1390
  1391 				; optimize OK (game.inc), line = 191
  1392
  1393 A50F A5 88			lda TAIL_POS
  1394 A511 18 69 19			add #$19
  1395 A514 85 88			sta TAIL_POS
  1396 A516 90 02			scc
  1397 A518 E6 89			inc TAIL_POS+1
  1398
  1399 A51A 4C 36 A5			jmp a_0003
  1400 A51D			l_0326
  1401 A51D C9 46			cmp #$46
  1402 A51F D0 09			jne l_0330
  1403 				@
  1404
  1405 				; optimize FAIL (0, game.inc), line = 192
  1406
  1407 A521 E6 88			inc TAIL_POS
  1408 A523 D0 02			sne
  1409 A525 E6 89			inc TAIL_POS+1
  1410
  1411 A527 4C 36 A5			jmp a_0003
  1412 A52A			l_0330
  1413 A52A C9 47			cmp #$47
  1414 A52C D0 08			jne l_033D
  1415 				@
  1416
  1417 				; optimize FAIL (0, game.inc), line = 193
  1418
  1419 A52E A5 88			lda TAIL_POS
  1420 A530 D0 02			bne @+
  1421 A532 C6 89			dec TAIL_POS+1
  1422 				@
  1423 A534 C6 88			dec TAIL_POS
  1424
  1425 A536			l_033D
  1426 A536			a_0003
  1427
  1428 				; optimize OK (game.inc), line = 196
  1429
  1430 A536 A4 89			ldy TAIL_POS+1
  1431 A538 84 01			sty :bp+1
  1432 A53A A4 88			ldy TAIL_POS
  1433 A53C B1 00			lda (:bp),y
  1434 A53E 85 70			sta T0B
  1435
  1436 				; optimize OK (game.inc), line = 198
  1437
  1438 A540 A5 79			lda TAIL_DIR
  1439 A542 8D B0 A9			sta @CASETMP_0004
  1440 A545 C9 44			cmp #$44
  1441 A547 F0 04			beq @+
  1442 A549 C9 45			cmp #$45
  1443 A54B D0 23			jne l_035C
  1444 				@
  1445
  1446 				; optimize OK (game.inc), line = 200
  1447
  1448 A54D A5 70			lda T0B
  1449 A54F 8D B1 A9			sta @CASETMP_0005
  1450 A552 C9 50			cmp #$50
  1451 A554 F0 04			beq @+
  1452 A556 C9 4E			cmp #$4E
  1453 A558 D0 07			jne l_0369
  1454 				@
  1455
  1456 				; optimize OK (game.inc), line = 201
  1457
  1458 A55A A9 47			lda #$47
  1459 A55C 85 79			sta TAIL_DIR
  1460
  1461 A55E 4C 6D A5			jmp a_0005
  1462 A561			l_0369
  1463 A561 C9 51			cmp #$51
  1464 A563 F0 04			beq @+
  1465 A565 C9 4F			cmp #$4F
  1466 A567 D0 04			jne l_0378
  1467 				@
  1468
  1469 				; optimize OK (game.inc), line = 202
  1470
  1471 A569 A9 46			lda #$46
  1472 A56B 85 79			sta TAIL_DIR
  1473
  1474 A56D			l_0378
  1475 A56D			a_0005
  1476
  1477 A56D 4C 98 A5			jmp a_0004
  1478 A570			l_035C
  1479 A570 C9 46			cmp #$46
  1480 A572 F0 04			beq @+
  1481 A574 C9 47			cmp #$47
  1482 A576 D0 20			jne l_038D
  1483 				@
  1484
  1485 				; optimize OK (game.inc), line = 206
  1486
  1487 A578 A5 70			lda T0B
  1488 A57A 8D B2 A9			sta @CASETMP_0006
  1489 A57D C9 4E			cmp #$4E
  1490 A57F F0 04			beq @+
  1491 A581 C9 4F			cmp #$4F
  1492 A583 D0 07			jne l_039A
  1493 				@
  1494
  1495 				; optimize OK (game.inc), line = 207
  1496
  1497 A585 A9 44			lda #$44
  1498 A587 85 79			sta TAIL_DIR
  1499
  1500 A589 4C 98 A5			jmp a_0006
  1501 A58C			l_039A
  1502 A58C C9 50			cmp #$50
  1503 A58E F0 04			beq @+
  1504 A590 C9 51			cmp #$51
  1505 A592 D0 04			jne l_03A9
  1506 				@
  1507
  1508 				; optimize OK (game.inc), line = 208
  1509
  1510 A594 A9 45			lda #$45
  1511 A596 85 79			sta TAIL_DIR
  1512
  1513 A598			l_03A9
  1514 A598			a_0006
  1515
  1516 A598			l_038D
  1517 A598			a_0004
  1518
  1519 				; optimize OK (game.inc), line = 213
  1520
  1521 A598 A4 89			ldy TAIL_POS+1
  1522 A59A 84 01			sty :bp+1
  1523 A59C A4 88			ldy TAIL_POS
  1524 A59E A5 79			lda TAIL_DIR
  1525 A5A0 91 00			sta (:bp),y
  1526
  1527 				; ------------------------------------------------------------
  1528
  1529 = A9AF			@CASETMP_0003	= DATAORIGIN+$0003
  1530 = A9B0			@CASETMP_0004	= DATAORIGIN+$0004
  1531 = A9B1			@CASETMP_0005	= DATAORIGIN+$0005
  1532 = A9B2			@CASETMP_0006	= DATAORIGIN+$0006
  1533
  1534 = A9AF			@VarData	= @CASETMP_0003
  1535 = 0004			@VarDataSize	= 4
  1536
  1537 A5A2			@exit
  1538 					.ifdef @new
  1539 					lda <@VarData
  1540 					sta :ztmp
  1541 					lda >@VarData
  1542 					ldy #@VarDataSize-1
  1543 					jmp @FreeMem
  1544 					els
  1545 A5A2 60				rts						; ret
  1546 					eif
  1547 				.endl
  1548
  1549 A5A3			.local	UPDATE_SNAKE					; PROCEDURE | REGISTER
  1550 A5A3 85 08			sta S
  1551
  1552 				; optimize OK (game.inc), line = 220
  1553
  1554 A5A5 29 3F			and #$3F
  1555 A5A7 8D B3 A9			sta @CASETMP_0007
  1556 A5AA C9 01			cmp #$01
  1557 A5AC D0 07			jne l_03D2
  1558 				@
  1559
  1560 				; optimize OK (game.inc), line = 221
  1561
  1562 A5AE A9 4F			lda #$4F
  1563 A5B0 85 8C			sta SNAKE.BODY
  1564
  1565 A5B2 4C E9 A5			jmp a_0007
  1566 A5B5			l_03D2
  1567 A5B5 C9 02			cmp #$02
  1568 A5B7 D0 07			jne l_03DF
  1569 				@
  1570
  1571 				; optimize OK (game.inc), line = 222
  1572
  1573 A5B9 A9 4E			lda #$4E
  1574 A5BB 85 8C			sta SNAKE.BODY
  1575
  1576 A5BD 4C E9 A5			jmp a_0007
  1577 A5C0			l_03DF
  1578 A5C0 C9 04			cmp #$04
  1579 A5C2 D0 07			jne l_03EC
  1580 				@
  1581
  1582 				; optimize OK (game.inc), line = 223
  1583
  1584 A5C4 A9 51			lda #$51
  1585 A5C6 85 8C			sta SNAKE.BODY
  1586
  1587 A5C8 4C E9 A5			jmp a_0007
  1588 A5CB			l_03EC
  1589 A5CB C9 08			cmp #$08
  1590 A5CD D0 07			jne l_03F9
  1591 				@
  1592
  1593 				; optimize OK (game.inc), line = 224
  1594
  1595 A5CF A9 50			lda #$50
  1596 A5D1 85 8C			sta SNAKE.BODY
  1597
  1598 A5D3 4C E9 A5			jmp a_0007
  1599 A5D6			l_03F9
  1600 A5D6 C9 10			cmp #$10
  1601 A5D8 D0 07			jne l_0406
  1602 				@
  1603
  1604 				; optimize OK (game.inc), line = 225
  1605
  1606 A5DA A9 4C			lda #$4C
  1607 A5DC 85 8C			sta SNAKE.BODY
  1608
  1609 A5DE 4C E9 A5			jmp a_0007
  1610 A5E1			l_0406
  1611 A5E1 C9 20			cmp #$20
  1612 A5E3 D0 04			jne l_0413
  1613 				@
  1614
  1615 				; optimize OK (game.inc), line = 226
  1616
  1617 A5E5 A9 4D			lda #$4D
  1618 A5E7 85 8C			sta SNAKE.BODY
  1619
  1620 A5E9			l_0413
  1621 A5E9			a_0007
  1622
  1623 				; optimize OK (game.inc), line = 229
  1624
  1625 A5E9 A5 08			lda S
  1626 A5EB 29 C0			and #$C0
  1627 A5ED 8D B4 A9			sta @CASETMP_0008
  1628 A5F0 C9 00			cmp #$00
  1629 A5F2 D0 0B			jne l_0430
  1630 				@
  1631
  1632 				; optimize OK (game.inc), line = 230
  1633
  1634 A5F4 A9 48			lda #$48
  1635 A5F6 85 8B			sta SNAKE.HEAD
  1636 A5F8 A9 E7			lda #$E7
  1637 A5FA 85 8D			sta SNAKE.M
  1638
  1639 A5FC 4C 29 A6			jmp a_0008
  1640 A5FF			l_0430
  1641 A5FF C9 40			cmp #$40
  1642 A601 D0 0B			jne l_0441
  1643 				@
  1644
  1645 				; optimize OK (game.inc), line = 231
  1646
  1647 A603 A9 49			lda #$49
  1648 A605 85 8B			sta SNAKE.HEAD
  1649 A607 A9 19			lda #$19
  1650 A609 85 8D			sta SNAKE.M
  1651
  1652 A60B 4C 29 A6			jmp a_0008
  1653 A60E			l_0441
  1654 A60E C9 80			cmp #$80
  1655 A610 D0 0B			jne l_0452
  1656 				@
  1657
  1658 				; optimize OK (game.inc), line = 232
  1659
  1660 A612 A9 4B			lda #$4B
  1661 A614 85 8B			sta SNAKE.HEAD
  1662 A616 A9 01			lda #$01
  1663 A618 85 8D			sta SNAKE.M
  1664
  1665 A61A 4C 29 A6			jmp a_0008
  1666 A61D			l_0452
  1667 A61D C9 C0			cmp #$C0
  1668 A61F D0 08			jne l_0463
  1669 				@
  1670
  1671 				; optimize OK (game.inc), line = 233
  1672
  1673 A621 A9 4A			lda #$4A
  1674 A623 85 8B			sta SNAKE.HEAD
  1675 A625 A9 FF			lda #$FF
  1676 A627 85 8D			sta SNAKE.M
  1677
  1678 A629			l_0463
  1679 A629			a_0008
  1680
  1681 				; optimize OK (game.inc), line = 236
  1682
  1683 A629 A0 00			ldy #$00
  1684 A62B A5 8D			lda SNAKE.M
  1685 A62D 10 01			spl
  1686 A62F 88				dey
  1687 A630 18 65 84			add HEAD_POS
  1688 A633 85 73			sta T0W
  1689 A635 98				tya
  1690 A636 65 85			adc HEAD_POS+1
  1691 A638 85 74			sta T0W+1
  1692
  1693 				; optimize OK (game.inc), line = 237
  1694
  1695 A63A 85 01			sta :bp+1
  1696 A63C A4 73			ldy T0W
  1697 A63E B1 00			lda (:bp),y
  1698 A640 85 75			sta T1W
  1699 A642 A9 00			lda #$00
  1700 A644 85 76			sta T1W+1
  1701
  1702 				; optimize OK (game.inc), line = 239
  1703
  1704 A646 D0 04			bne @+
  1705 A648 A5 75			lda T1W
  1706 A64A C9 20			cmp #$20
  1707 				@
  1708 A64C F0 0D			jeq l_04A0x
  1709 A64E A5 76			lda T1W+1
  1710 A650 D0 04			bne @+
  1711 A652 A5 75			lda T1W
  1712 A654 C9 40			cmp #$40
  1713 				@
  1714 A656 F0 03 4C E1 A6		jne l_04A0
  1715 A65B			l_04A0x
  1716
  1717 				; optimize OK (game.inc), line = 241
  1718
  1719 A65B A5 76			lda T1W+1
  1720 A65D D0 04			bne @+
  1721 A65F A5 75			lda T1W
  1722 A661 C9 40			cmp #$40
  1723 				@
  1724 A663 D0 3F			jne l_04B2
  1725
  1726 				; optimize OK (game.inc), line = 242
  1727
  1728 A665 A9 00			lda #$00
  1729 A667 85 8A			sta FRUIT_ON_BOARD
  1730
  1731 				; optimize OK (game.inc), line = 244
  1732
  1733 A669 A9 10			lda #$10
  1734 A66B 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1735 A66D A9 80			lda #$80
  1736 A66F 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1737 A671 A9 00			lda #$00
  1738 A673 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1739 A675 A9 EA			lda #$EA
  1740 A677 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1741 A679 A9 1E			lda #$1E
  1742 A67B 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1743 A67D 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1744
  1745 				; optimize FAIL (0, game.inc), line = 246
  1746
  1747 A680 C6 7B			dec LEVEL_UP
  1748
  1749 				; optimize OK (game.inc), line = 247
  1750
  1751 A682 D0 1D			jne l_04D1
  1752
  1753 				; optimize FAIL (0, game.inc), line = 248
  1754
  1755 A684 E6 7F			inc LEVEL
  1756
  1757 				; optimize OK (game.inc), line = 249
  1758
  1759 A686 A9 01			lda #$01
  1760 A688 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  1761 A68A A9 7E			lda #$7E
  1762 A68C 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  1763 A68E A9 00			lda #$00
  1764 A690 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  1765 A692 A9 D9			lda #$D9
  1766 A694 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  1767 A696 A9 1E			lda #$1E
  1768 A698 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  1769 A69A 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  1770
  1771 				; optimize OK (game.inc), line = 250
  1772
  1773 A69D A9 0A			lda #$0A
  1774 A69F 85 7B			sta LEVEL_UP
  1775 A6A1			l_04D1
  1776 A6A1 4C A7 A6			jmp l_04E9
  1777 A6A4			l_04B2
  1778
  1779 				; optimize FAIL ('MOVE_TAIL', game.inc), line = 254
  1780
  1781 A6A4 20 EA A4			jsr MOVE_TAIL
  1782 A6A7			l_04E9
  1783
  1784 				; optimize OK (game.inc), line = 256
  1785
  1786 A6A7 A4 85			ldy HEAD_POS+1
  1787 A6A9 84 01			sty :bp+1
  1788 A6AB A4 84			ldy HEAD_POS
  1789 A6AD A5 8C			lda SNAKE.BODY
  1790 A6AF 91 00			sta (:bp),y
  1791
  1792 				; optimize OK (game.inc), line = 258
  1793
  1794 A6B1 A0 00			ldy #$00
  1795 A6B3 A5 8D			lda SNAKE.M
  1796 A6B5 10 01			spl
  1797 A6B7 88				dey
  1798 A6B8 18 65 86			add HEAD_POS_COL
  1799 A6BB 85 86			sta HEAD_POS_COL
  1800 A6BD 98				tya
  1801 A6BE 65 87			adc HEAD_POS_COL+1
  1802 A6C0 85 87			sta HEAD_POS_COL+1
  1803
  1804 				; optimize OK (game.inc), line = 259
  1805
  1806 A6C2 A4 74			ldy T0W+1
  1807 A6C4 84 01			sty :bp+1
  1808 A6C6 A4 73			ldy T0W
  1809 A6C8 A5 8B			lda SNAKE.HEAD
  1810 A6CA 91 00			sta (:bp),y
  1811
  1812 				; optimize OK (game.inc), line = 260
  1813
  1814 A6CC A4 87			ldy HEAD_POS_COL+1
  1815 A6CE 84 01			sty :bp+1
  1816 A6D0 A4 86			ldy HEAD_POS_COL
  1817 A6D2 A9 01			lda #$01
  1818 A6D4 91 00			sta (:bp),y
  1819
  1820 				; optimize OK (game.inc), line = 261
  1821
  1822 A6D6 A5 73			lda T0W
  1823 A6D8 85 84			sta HEAD_POS
  1824 A6DA A5 74			lda T0W+1
  1825 A6DC 85 85			sta HEAD_POS+1
  1826 A6DE 4C E5 A6			jmp l_0513
  1827 A6E1			l_04A0
  1828
  1829 				; optimize OK (game.inc), line = 264
  1830
  1831 A6E1 A9 01			lda #$01
  1832 A6E3 85 FB			sta GAME_OVER
  1833 A6E5			l_0513
  1834
  1835 				; ------------------------------------------------------------
  1836
  1837 = 0008			S	= :EDX
  1838 = A9B3			@CASETMP_0007	= DATAORIGIN+$0007
  1839 = A9B4			@CASETMP_0008	= DATAORIGIN+$0008
  1840
  1841 = A9B3			@VarData	= @CASETMP_0007
  1842 = 0002			@VarDataSize	= 2
  1843
  1844 A6E5			@exit
  1845 					.ifdef @new
  1846 					lda <@VarData
  1847 					sta :ztmp
  1848 					lda >@VarData
  1849 					ldy #@VarDataSize-1
  1850 					jmp @FreeMem
  1851 					els
  1852 A6E5 60				rts						; ret
  1853 					eif
  1854 				.endl
  1855
  1856 A6E6			.local	MOVE_SNAKE					; PROCEDURE
  1857
  1858 				; optimize OK (game.inc), line = 270
  1859
  1860 A6E6 A5 7A			lda HEAD_DIR
  1861 A6E8 8D B5 A9			sta @CASETMP_0009
  1862 A6EB C9 44			cmp #$44
  1863 A6ED D0 07			jne l_0526
  1864 				@
  1865
  1866 				; optimize OK (game.inc), line = 271
  1867
  1868 A6EF A9 10			lda #$10
  1869 A6F1 85 70			sta T0B
  1870
  1871 A6F3 4C 14 A7			jmp a_0009
  1872 A6F6			l_0526
  1873 A6F6 C9 45			cmp #$45
  1874 A6F8 D0 07			jne l_0533
  1875 				@
  1876
  1877 				; optimize OK (game.inc), line = 272
  1878
  1879 A6FA A9 50			lda #$50
  1880 A6FC 85 70			sta T0B
  1881
  1882 A6FE 4C 14 A7			jmp a_0009
  1883 A701			l_0533
  1884 A701 C9 46			cmp #$46
  1885 A703 D0 07			jne l_0540
  1886 				@
  1887
  1888 				; optimize OK (game.inc), line = 273
  1889
  1890 A705 A9 A0			lda #$A0
  1891 A707 85 70			sta T0B
  1892
  1893 A709 4C 14 A7			jmp a_0009
  1894 A70C			l_0540
  1895 A70C C9 47			cmp #$47
  1896 A70E D0 04			jne l_054D
  1897 				@
  1898
  1899 				; optimize OK (game.inc), line = 274
  1900
  1901 A710 A9 E0			lda #$E0
  1902 A712 85 70			sta T0B
  1903
  1904 A714			l_054D
  1905 A714			a_0009
  1906
  1907 				; optimize OK (game.inc), line = 277
  1908
  1909 A714 A5 70			lda T0B
  1910 A716 20 A3 A5			jsr UPDATE_SNAKE
  1911
  1912 				; ------------------------------------------------------------
  1913
  1914 = A9B5			@CASETMP_0009	= DATAORIGIN+$0009
  1915
  1916 = A9B5			@VarData	= @CASETMP_0009
  1917 = 0001			@VarDataSize	= 1
  1918
  1919 A719			@exit
  1920 					.ifdef @new
  1921 					lda <@VarData
  1922 					sta :ztmp
  1923 					lda >@VarData
  1924 					ldy #@VarDataSize-1
  1925 					jmp @FreeMem
  1926 					els
  1927 A719 60				rts						; ret
  1928 					eif
  1929 				.endl
  1930
  1931 A71A			.local	JOY_HANDLER					; PROCEDURE
  1932
  1933 				; optimize OK (game.inc), line = 284
  1934
  1935 A71A A9 00			lda #$00
  1936 A71C 85 70			sta T0B
  1937
  1938 				; optimize OK (game.inc), line = 286
  1939
  1940 A71E A5 61			lda SYS_VIC20.JOY
  1941 A720 29 04			and #$04
  1942 A722 F0 23			jeq l_0587
  1943 A724 A5 7A			lda HEAD_DIR
  1944 A726 C9 45			cmp #$45
  1945 A728 F0 1D			jeq l_0587
  1946
  1947 				; optimize OK (game.inc), line = 287
  1948
  1949 A72A 8D B6 A9			sta @CASETMP_000A
  1950 A72D C9 47			cmp #$47
  1951 A72F D0 07			jne l_0593
  1952 				@
  1953
  1954 				; optimize OK (game.inc), line = 288
  1955
  1956 A731 A9 01			lda #$01
  1957 A733 85 70			sta T0B
  1958
  1959 A735 4C 40 A7			jmp a_000A
  1960 A738			l_0593
  1961 A738 C9 46			cmp #$46
  1962 A73A D0 04			jne l_05A0
  1963 				@
  1964
  1965 				; optimize OK (game.inc), line = 289
  1966
  1967 A73C A9 02			lda #$02
  1968 A73E 85 70			sta T0B
  1969
  1970 A740			l_05A0
  1971 A740			a_000A
  1972
  1973 				; optimize OK (game.inc), line = 291
  1974
  1975 A740 A9 44			lda #$44
  1976 A742 85 7A			sta HEAD_DIR
  1977 A744 4C BD A7			jmp l_05B7
  1978 A747			l_0587
  1979
  1980 				; optimize OK (game.inc), line = 293
  1981
  1982 A747 A5 61			lda SYS_VIC20.JOY
  1983 A749 29 08			and #$08
  1984 A74B F0 23			jeq l_05D9
  1985 A74D A5 7A			lda HEAD_DIR
  1986 A74F C9 44			cmp #$44
  1987 A751 F0 1D			jeq l_05D9
  1988
  1989 				; optimize OK (game.inc), line = 294
  1990
  1991 A753 8D B7 A9			sta @CASETMP_000B
  1992 A756 C9 47			cmp #$47
  1993 A758 D0 07			jne l_05E5
  1994 				@
  1995
  1996 				; optimize OK (game.inc), line = 295
  1997
  1998 A75A A9 44			lda #$44
  1999 A75C 85 70			sta T0B
  2000
  2001 A75E 4C 69 A7			jmp a_000B
  2002 A761			l_05E5
  2003 A761 C9 46			cmp #$46
  2004 A763 D0 04			jne l_05F2
  2005 				@
  2006
  2007 				; optimize OK (game.inc), line = 296
  2008
  2009 A765 A9 48			lda #$48
  2010 A767 85 70			sta T0B
  2011
  2012 A769			l_05F2
  2013 A769			a_000B
  2014
  2015 				; optimize OK (game.inc), line = 298
  2016
  2017 A769 A9 45			lda #$45
  2018 A76B 85 7A			sta HEAD_DIR
  2019 A76D 4C BD A7			jmp l_0609
  2020 A770			l_05D9
  2021
  2022 				; optimize OK (game.inc), line = 300
  2023
  2024 A770 A5 61			lda SYS_VIC20.JOY
  2025 A772 10 23			jpl l_062B
  2026 A774 A5 7A			lda HEAD_DIR
  2027 A776 C9 47			cmp #$47
  2028 A778 F0 1D			jeq l_062B
  2029
  2030 				; optimize OK (game.inc), line = 301
  2031
  2032 A77A 8D B8 A9			sta @CASETMP_000C
  2033 A77D C9 44			cmp #$44
  2034 A77F D0 07			jne l_0637
  2035 				@
  2036
  2037 				; optimize OK (game.inc), line = 302
  2038
  2039 A781 A9 84			lda #$84
  2040 A783 85 70			sta T0B
  2041
  2042 A785 4C 90 A7			jmp a_000C
  2043 A788			l_0637
  2044 A788 C9 45			cmp #$45
  2045 A78A D0 04			jne l_0644
  2046 				@
  2047
  2048 				; optimize OK (game.inc), line = 303
  2049
  2050 A78C A9 81			lda #$81
  2051 A78E 85 70			sta T0B
  2052
  2053 A790			l_0644
  2054 A790			a_000C
  2055
  2056 				; optimize OK (game.inc), line = 305
  2057
  2058 A790 A9 46			lda #$46
  2059 A792 85 7A			sta HEAD_DIR
  2060 A794 4C BD A7			jmp l_065B
  2061 A797			l_062B
  2062
  2063 				; optimize OK (game.inc), line = 307
  2064
  2065 A797 A5 61			lda SYS_VIC20.JOY
  2066 A799 29 10			and #$10
  2067 A79B F0 20			jeq l_067D
  2068 A79D A5 7A			lda HEAD_DIR
  2069 A79F C9 46			cmp #$46
  2070 A7A1 F0 1A			jeq l_067D
  2071
  2072 				; optimize OK (game.inc), line = 308
  2073
  2074 A7A3 8D B9 A9			sta @CASETMP_000D
  2075 A7A6 C9 44			cmp #$44
  2076 A7A8 D0 07			jne l_0689
  2077 				@
  2078
  2079 				; optimize OK (game.inc), line = 309
  2080
  2081 A7AA A9 C8			lda #$C8
  2082 A7AC 85 70			sta T0B
  2083
  2084 A7AE 4C B9 A7			jmp a_000D
  2085 A7B1			l_0689
  2086 A7B1 C9 45			cmp #$45
  2087 A7B3 D0 04			jne l_0696
  2088 				@
  2089
  2090 				; optimize OK (game.inc), line = 310
  2091
  2092 A7B5 A9 C2			lda #$C2
  2093 A7B7 85 70			sta T0B
  2094
  2095 A7B9			l_0696
  2096 A7B9			a_000D
  2097
  2098 				; optimize OK (game.inc), line = 312
  2099
  2100 A7B9 A9 47			lda #$47
  2101 A7BB 85 7A			sta HEAD_DIR
  2102 A7BD			l_067D
  2103 A7BD			l_065B
  2104 A7BD			l_0609
  2105 A7BD			l_05B7
  2106
  2107 				; optimize OK (game.inc), line = 314
  2108
  2109 A7BD A5 61			lda SYS_VIC20.JOY
  2110 A7BF 29 20			and #$20
  2111 A7C1 F0 06			jeq l_06BC
  2112 A7C3 A5 77			lda SNAKE_SPEED
  2113 A7C5 4A				lsr @
  2114 A7C6 4A				lsr @
  2115 A7C7 85 77			sta SNAKE_SPEED
  2116 A7C9			l_06BC
  2117
  2118 				; optimize OK (game.inc), line = 316
  2119
  2120 A7C9 A5 70			lda T0B
  2121 A7CB F0 09			jeq l_06DB
  2122
  2123 				; optimize OK (game.inc), line = 317
  2124
  2125 A7CD A5 77			lda SNAKE_SPEED
  2126 A7CF 85 78			sta SNAKE_SPD_C
  2127
  2128 				; optimize OK (game.inc), line = 318
  2129
  2130 A7D1 A5 70			lda T0B
  2131 A7D3 20 A3 A5			jsr UPDATE_SNAKE
  2132 A7D6			l_06DB
  2133
  2134 				; ------------------------------------------------------------
  2135
  2136 = A9B6			@CASETMP_000A	= DATAORIGIN+$000A
  2137 = A9B7			@CASETMP_000B	= DATAORIGIN+$000B
  2138 = A9B8			@CASETMP_000C	= DATAORIGIN+$000C
  2139 = A9B9			@CASETMP_000D	= DATAORIGIN+$000D
  2140
  2141 = A9B6			@VarData	= @CASETMP_000A
  2142 = 0004			@VarDataSize	= 4
  2143
  2144 A7D6			@exit
  2145 					.ifdef @new
  2146 					lda <@VarData
  2147 					sta :ztmp
  2148 					lda >@VarData
  2149 					ldy #@VarDataSize-1
  2150 					jmp @FreeMem
  2151 					els
  2152 A7D6 60				rts						; ret
  2153 					eif
  2154 				.endl
  2155
  2156 A7D7			.local	PUT_FRUIT					; PROCEDURE
  2157
  2158 				; optimize OK (game.inc), line = 326
  2159
  2160 A7D7 A9 01			lda #$01
  2161 A7D9 85 08			sta SYS_VIC20.PRND_0113.A
  2162 A7DB A9 18			lda #$18
  2163 A7DD 85 0C			sta SYS_VIC20.PRND_0113.B
  2164 A7DF A9 1F			lda #$1F
  2165 A7E1 85 04			sta SYS_VIC20.PRND_0113.MASK
  2166 A7E3 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2167 A7E6 A5 62			lda SYS_VIC20.RND
  2168 A7E8 85 70			sta T0B
  2169
  2170 				; optimize OK (game.inc), line = 327
  2171
  2172 A7EA A9 01			lda #$01
  2173 A7EC 85 08			sta SYS_VIC20.PRND_0113.A
  2174 A7EE A9 1B			lda #$1B
  2175 A7F0 85 0C			sta SYS_VIC20.PRND_0113.B
  2176 A7F2 A9 1F			lda #$1F
  2177 A7F4 85 04			sta SYS_VIC20.PRND_0113.MASK
  2178 A7F6 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2179 A7F9 A5 62			lda SYS_VIC20.RND
  2180 A7FB 85 71			sta T1B
  2181
  2182 				; optimize OK (game.inc), line = 329
  2183
  2184 A7FD 85 0C			sta :ecx
  2185 A7FF A9 19			lda #$19
  2186 A801 85 04			sta :eax
  2187 					.ifdef fmulinit
  2188 					fmulu_8
  2189 					els
  2190 A803 20 FC A0			imulCL
  2191 					eif
  2192 A806 A5 04			lda :eax
  2193 A808 85 73			sta T0W
  2194 A80A A5 05			lda :eax+1
  2195 A80C 85 74			sta T0W+1
  2196 A80E 18 69 1C			add #$1C
  2197 A811 85 74			sta T0W+1
  2198 A813 A5 73			lda T0W
  2199 A815 18 65 70			add T0B
  2200 A818 85 73			sta T0W
  2201 A81A 90 02			scc
  2202 A81C E6 74			inc T0W+1
  2203
  2204 				; optimize OK (game.inc), line = 331
  2205
  2206 A81E A4 74			ldy T0W+1
  2207 A820 84 01			sty :bp+1
  2208 A822 A4 73			ldy T0W
  2209 A824 B1 00			lda (:bp),y
  2210 A826 C9 20			cmp #$20
  2211 A828 D0 1A			jne l_0720
  2212
  2213 				; optimize OK (game.inc), line = 332
  2214
  2215 A82A A5 70			lda T0B
  2216 A82C 85 08			sta SYS_VIC20.SET_XY.X
  2217 A82E A5 71			lda T1B
  2218 A830 85 0C			sta SYS_VIC20.SET_XY.Y
  2219 A832 20 01 A2			jsr SYS_VIC20.SET_XY
  2220 A835 A9 05			lda #$05
  2221 A837 85 08			sta SYS_VIC20.PUT_CHAR.COL
  2222 A839 A9 40			lda #$40
  2223 A83B 85 0C			sta SYS_VIC20.PUT_CHAR.C
  2224 A83D 20 52 A2			jsr SYS_VIC20.PUT_CHAR
  2225
  2226 				; optimize OK (game.inc), line = 333
  2227
  2228 A840 A9 01			lda #$01
  2229 A842 85 8A			sta FRUIT_ON_BOARD
  2230 A844			l_0720
  2231 A844			@exit
  2232 					.ifdef @new
  2233 					lda <@VarData
  2234 					sta :ztmp
  2235 					lda >@VarData
  2236 					ldy #@VarDataSize-1
  2237 					jmp @FreeMem
  2238 					els
  2239 A844 60				rts						; ret
  2240 					eif
  2241 				.endl
  2242
  2243 A845			.local	UPDATE_TIME					; PROCEDURE
  2244
  2245 				; optimize FAIL (0, game.inc), line = 341
  2246
  2247 A845 C6 7C			dec TIME_ENTITY
  2248
  2249 				; optimize OK (game.inc), line = 342
  2250
  2251 A847 D0 1B			jne l_074B
  2252
  2253 				; optimize OK (game.inc), line = 343
  2254
  2255 A849 A9 C8			lda #$C8
  2256 A84B 85 7C			sta TIME_ENTITY
  2257
  2258 				; optimize OK (game.inc), line = 344
  2259
  2260 A84D A9 01			lda #$01
  2261 A84F 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  2262 A851 A9 7D			lda #$7D
  2263 A853 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  2264 A855 A9 00			lda #$00
  2265 A857 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  2266 A859 A9 DE			lda #$DE
  2267 A85B 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  2268 A85D A9 1E			lda #$1E
  2269 A85F 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  2270 A861 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  2271 A864			l_074B
  2272 A864			@exit
  2273 					.ifdef @new
  2274 					lda <@VarData
  2275 					sta :ztmp
  2276 					lda >@VarData
  2277 					ldy #@VarDataSize-1
  2278 					jmp @FreeMem
  2279 					els
  2280 A864 60				rts						; ret
  2281 					eif
  2282 				.endl
  2283
  2284 A865			.local	SNAKE_STEP					; PROCEDURE
  2285
  2286 				; optimize OK (game.inc), line = 352
  2287
  2288 A865 A9 0E			lda #$0E
  2289 A867 38 E5 7F			sub LEVEL
  2290 A86A 85 77			sta SNAKE_SPEED
  2291
  2292 				; optimize OK (game.inc), line = 353
  2293
  2294 A86C C9 02			cmp #$02
  2295 A86E B0 04			jcs l_0776
  2296 A870 A9 02			lda #$02
  2297 A872 85 77			sta SNAKE_SPEED
  2298 A874			l_0776
  2299
  2300 				; optimize FAIL ('JOY_HANDLER', game.inc), line = 355
  2301
  2302 A874 20 1A A7			jsr JOY_HANDLER
  2303
  2304 				; optimize OK (game.inc), line = 357
  2305
  2306 A877 A5 78			lda SNAKE_SPD_C
  2307 A879 D0 0A			jne l_0790
  2308
  2309 				; optimize FAIL ('MOVE_SNAKE', game.inc), line = 358
  2310
  2311 A87B 20 E6 A6			jsr MOVE_SNAKE
  2312
  2313 				; optimize OK (game.inc), line = 359
  2314
  2315 A87E A5 77			lda SNAKE_SPEED
  2316 A880 85 78			sta SNAKE_SPD_C
  2317 A882 4C 87 A8			jmp l_07A1
  2318 A885			l_0790
  2319
  2320 				; optimize FAIL (0, game.inc), line = 361
  2321
  2322 A885 C6 78			dec SNAKE_SPD_C
  2323 A887			l_07A1
  2324 A887			@exit
  2325 					.ifdef @new
  2326 					lda <@VarData
  2327 					sta :ztmp
  2328 					lda >@VarData
  2329 					ldy #@VarDataSize-1
  2330 					jmp @FreeMem
  2331 					els
  2332 A887 60				rts						; ret
  2333 					eif
  2334 				.endl
  2335
  2336 A888			.local	SET_GAME					; PROCEDURE
  2337
  2338 				; optimize OK (game.inc), line = 368
  2339
  2340 A888 A9 20			lda #$20
  2341 A88A 20 DB A1			jsr SYS_VIC20.CLRSCR
  2342 A88D 20 0D A3			jsr DRAW_FRAME
  2343 A890 20 49 A4			jsr DRAW_BOTTOM_LINE
  2344 A893 20 AC A3			jsr PUT_SNAKE
  2345 A896 20 A0 A4			jsr PRINT_HI_SCORE
  2346
  2347 				; optimize OK (game.inc), line = 370
  2348
  2349 A899 A9 C8			lda #$C8
  2350 A89B 85 7C			sta TIME_ENTITY
  2351
  2352 				; optimize OK (game.inc), line = 371
  2353
  2354 A89D A9 0A			lda #$0A
  2355 A89F 85 7B			sta LEVEL_UP
  2356
  2357 				; optimize OK (game.inc), line = 372
  2358
  2359 A8A1 A9 00			lda #$00
  2360 A8A3 85 80			sta SCORE_BCD
  2361 A8A5 85 81			sta SCORE_BCD+1
  2362
  2363 				; optimize OK (game.inc), line = 373
  2364
  2365 A8A7 85 7D			sta TIME_BCD
  2366
  2367 				; optimize OK (game.inc), line = 374
  2368
  2369 A8A9 85 7E			sta LEVEL_BCD
  2370
  2371 				; optimize OK (game.inc), line = 375
  2372
  2373 A8AB 85 7F			sta LEVEL
  2374
  2375 				; optimize OK (game.inc), line = 376
  2376
  2377 A8AD 85 78			sta SNAKE_SPD_C
  2378
  2379 				; optimize OK (game.inc), line = 377
  2380
  2381 A8AF 85 8A			sta FRUIT_ON_BOARD
  2382
  2383 				; optimize OK (game.inc), line = 378
  2384
  2385 A8B1 85 FB			sta GAME_OVER
  2386
  2387 				; optimize OK (game.inc), line = 380
  2388
  2389 A8B3 A9 01			lda #$01
  2390 A8B5 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2391 A8B8			@exit
  2392 					.ifdef @new
  2393 					lda <@VarData
  2394 					sta :ztmp
  2395 					lda >@VarData
  2396 					ldy #@VarDataSize-1
  2397 					jmp @FreeMem
  2398 					els
  2399 A8B8 60				rts						; ret
  2400 					eif
  2401 				.endl
  2402
  2403 A8B9			.local	RESTART_GAME					; PROCEDURE
  2404
  2405 				; optimize FAIL ('HALL_OF_FAME', game.inc), line = 387
  2406
  2407 A8B9 20 D2 A4			jsr HALL_OF_FAME
  2408
  2409 				; optimize OK (game.inc), line = 388
  2410
  2411 A8BC A9 19			lda #$19
  2412 A8BE 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2413
  2414 				; optimize FAIL ('PRESS_FIRE', game.inc), line = 389
  2415
  2416 A8C1 20 84 A3			jsr PRESS_FIRE
  2417
  2418 				; optimize FAIL ('SET_GAME', game.inc), line = 390
  2419
  2420 A8C4 20 88 A8			jsr SET_GAME
  2421 A8C7			@exit
  2422 					.ifdef @new
  2423 					lda <@VarData
  2424 					sta :ztmp
  2425 					lda >@VarData
  2426 					ldy #@VarDataSize-1
  2427 					jmp @FreeMem
  2428 					els
  2429 A8C7 60				rts						; ret
  2430 					eif
  2431 				.endl
  2432
  2433 A8C8			.local	VBI						; PROCEDURE
  2434
  2435 				; optimize OK (game.inc), line = 397
  2436
  2437 A8C8 A5 FB			lda GAME_OVER
  2438 A8CA D0 17			jne l_07F1
  2439
  2440 				; optimize FAIL ('UPDATE_TIME', game.inc), line = 398
  2441
  2442 A8CC 20 45 A8			jsr UPDATE_TIME
  2443
  2444 				; optimize FAIL ('SNAKE_STEP', game.inc), line = 399
  2445
  2446 A8CF 20 65 A8			jsr SNAKE_STEP
  2447
  2448 				; optimize OK (game.inc), line = 400
  2449
  2450 A8D2 A5 8A			lda FRUIT_ON_BOARD
  2451 A8D4 D0 03			jne l_0803
  2452 A8D6 20 D7 A7			jsr PUT_FRUIT
  2453 A8D9			l_0803
  2454
  2455 				; optimize OK (game.inc), line = 401
  2456
  2457 A8D9 A5 7D			lda TIME_BCD
  2458 A8DB C9 99			cmp #$99
  2459 A8DD D0 04			jne l_0819
  2460 A8DF A9 01			lda #$01
  2461 A8E1 85 FB			sta GAME_OVER
  2462 A8E3			l_0819
  2463 A8E3			l_07F1
  2464 A8E3			@exit
  2465 					.ifdef @new
  2466 					lda <@VarData
  2467 					sta :ztmp
  2468 					lda >@VarData
  2469 					ldy #@VarDataSize-1
  2470 					jmp @FreeMem
  2471 					els
  2472 A8E3 60				rts						; ret
  2473 					eif
  2474 				.endl
  2475
  2476 A8E4			.local	PREPARE						; PROCEDURE
  2477
  2478 				; optimize OK (game.inc), line = 409
  2479
  2480 A8E4 A9 00			lda #$00
  2481 A8E6 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2482 A8E8 A9 BC			lda #$BC
  2483 A8EA 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2484 A8EC A9 00			lda #$00
  2485 A8EE 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2486 A8F0 A9 10			lda #$10
  2487 A8F2 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2488 A8F4 A9 00			lda #$00
  2489 A8F6 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2490 A8F8 A9 04			lda #$04
  2491 A8FA 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2492 A8FC				.local +MAIN.SYSTEM.MOVE_00B1
  2493 A8FC				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A8FC 20 A7 A0			jsr @move
Source: vic20.a65
  2494 					.endl
  2495
  2496 				; optimize OK (game.inc), line = 410
  2497
  2498 A8FF A9 12			lda #$12
  2499 A901 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2500 A903 A9 B9			lda #$B9
  2501 A905 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2502 A907 A9 00			lda #$00
  2503 A909 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2504 A90B A9 1C			lda #$1C
  2505 A90D 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2506 A90F A9 EE			lda #$EE
  2507 A911 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2508 A913 A9 02			lda #$02
  2509 A915 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2510 A917				.local +MAIN.SYSTEM.MOVE_00B1
  2511 A917				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A917 20 A7 A0			jsr @move
Source: vic20.a65
  2512 					.endl
  2513
  2514 				; optimize FAIL ('VBI', game.inc), line = 416
  2515
  2516 A91A 20 C8 A8			jsr VBI
  2517 A91D			@exit
  2518 					.ifdef @new
  2519 					lda <@VarData
  2520 					sta :ztmp
  2521 					lda >@VarData
  2522 					ldy #@VarDataSize-1
  2523 					jmp @FreeMem
  2524 					els
  2525 A91D 60				rts						; ret
  2526 					eif
  2527 				.endl
  2528 A91E			l_0067
  2529
  2530 				; optimize OK (game.inc), line = 422
  2531
  2532 A91E A9 01			lda #$01
  2533 A920 85 FB			sta GAME_OVER
  2534
  2535 				; optimize FAIL ('PREPARE', game.inc), line = 424
  2536
  2537 A922 20 E4 A8			jsr PREPARE
  2538 A925 20 93 A1			jsr SYS_VIC20.SYS_INIT
  2539 A928				.local +MAIN.WELCOME_SCR
  2540 A928				m@INLINE
Macro: MAIN.WELCOME_SCR.M@INLINE [Source: vic20.a65]
     4 A928 A9 01			lda #$01
     5 A92A 20 EE A1			jsr SYS_VIC20.CLRCOL
     9 A92D A9 0C			lda #$0C
    10 A92F 85 70			sta T0B
    11 A931 85 72			sta T2B
    15 A933 AD 53 A0			lda adr.TXT_INFO
    16 A936 4A				lsr @
    17 A937 85 71			sta T1B
    18 A939 A5 70			lda T0B
    19 A93B 38 E5 71			sub T1B
    20 A93E 85 70			sta T0B
    24 A940 85 08			sta SYS_VIC20.SET_XY.X
    25 A942 A9 02			lda #$02
    26 A944 85 0C			sta SYS_VIC20.SET_XY.Y
    27 A946 20 01 A2			jsr SYS_VIC20.SET_XY
    31 A949 A9 07			lda #$07
    32 A94B 85 08			sta SYS_VIC20.PRINT.COL
    33 A94D A9 53			lda #$53
    34 A94F 85 0C			sta SYS_VIC20.PRINT.S
    35 A951 A9 A0			lda #$A0
    36 A953 85 0D			sta SYS_VIC20.PRINT.S+1
    37 A955 20 3C A2			jsr SYS_VIC20.PRINT
    41 A958 AD 3E A0			lda adr.TXT_TURBO
    42 A95B 4A				lsr @
    43 A95C 85 71			sta T1B
    44 A95E A5 72			lda T2B
    45 A960 38 E5 71			sub T1B
    46 A963 85 72			sta T2B
    50 A965 85 08			sta SYS_VIC20.SET_XY.X
    51 A967 A9 19			lda #$19
    52 A969 85 0C			sta SYS_VIC20.SET_XY.Y
    53 A96B 20 01 A2			jsr SYS_VIC20.SET_XY
    57 A96E A9 07			lda #$07
    58 A970 85 08			sta SYS_VIC20.PRINT.COL
    59 A972 A9 3E			lda #$3E
    60 A974 85 0C			sta SYS_VIC20.PRINT.S
    61 A976 A9 A0			lda #$A0
    62 A978 85 0D			sta SYS_VIC20.PRINT.S+1
    63 A97A 20 3C A2			jsr SYS_VIC20.PRINT
    66 A97D			l_01AF
    70 A97D A5 61			lda SYS_VIC20.JOY
    71 A97F 29 20			and #$20
    72 A981 F0 FA			jeq l_01AF
Source: vic20.a65
  2541 					.endl
  2542
  2543 				; optimize OK (game.inc), line = 426
  2544
  2545 A983 A9 00			lda #$00
  2546 A985 85 82			sta HI_SCORE_BCD
  2547 A987 85 83			sta HI_SCORE_BCD+1
  2548 A989 20 88 A8			jsr SET_GAME
  2549
  2550 				; --- RepeatUntilProlog
  2551 A98C			l_083D
  2552
  2553 				; optimize OK (game.inc), line = 429
  2554
  2555 A98C A5 FB			lda GAME_OVER
  2556 A98E F0 03			jeq l_0849
  2557 A990 20 B9 A8			jsr RESTART_GAME
  2558 A993			l_0849
  2559
  2560 				; optimize OK (game.inc), line = 430
  2561
  2562 A993 4C 8C A9			jmp l_083D
  2563
  2564 				; ------------------------------------------------------------
  2565
  2566 = BC00			CRT_CHARS_ADR	= $BC00
  2567 = B912			CRT_TITLE_ADR	= $B912
  2568 = 0000			GAME_BLACK	= $00
  2569 = 0001			GAME_WHITE	= $01
  2570 = 0002			GAME_RED	= $02
  2571 = 0003			GAME_CYAN	= $03
  2572 = 0004			GAME_PURPLE	= $04
  2573 = 0005			GAME_GREEN	= $05
  2574 = 0006			GAME_BLUE	= $06
  2575 = 0007			GAME_YELLOW	= $07
  2576 = 0008			GAME_ORANGE	= $08
  2577 = 0020			C_SPACE	= $20
  2578 = 0040			C_FRUIT	= $40
  2579 = 0041			C_WALL_H	= $41
  2580 = 0042			C_WALL_VE	= $42
  2581 = 0043			C_WALL_VW	= $43
  2582 = 0044			C_TAIL_UP	= $44
  2583 = 0045			C_TAIL_DOWN	= $45
  2584 = 0046			C_TAIL_RIGHT	= $46
  2585 = 0047			C_TAIL_LEFT	= $47
  2586 = 0048			C_HEAD_UP	= $48
  2587 = 0049			C_HEAD_DOWN	= $49
  2588 = 004A			C_HEAD_LEFT	= $4A
  2589 = 004B			C_HEAD_RIGHT	= $4B
  2590 = 004C			C_BODY_V	= $4C
  2591 = 004D			C_BODY_H	= $4D
  2592 = 004E			C_BODY_SW	= $4E
  2593 = 004F			C_BODY_SE	= $4F
  2594 = 0050			C_BODY_NW	= $50
  2595 = 0051			C_BODY_NE	= $51
  2596 = A00C			adr.TXT_LEVEL	= CODEORIGIN+$0000
  2597 A996			.var TXT_LEVEL	= adr.TXT_LEVEL .word
  2598 = A016			adr.TXT_POINTS	= CODEORIGIN+$000A
  2599 A996			.var TXT_POINTS	= adr.TXT_POINTS .word
  2600 = A023			adr.TXT_TIME	= CODEORIGIN+$0017
  2601 A996			.var TXT_TIME	= adr.TXT_TIME .word
  2602 = A029			adr.TXT_HSCORE	= CODEORIGIN+$001D
  2603 A996			.var TXT_HSCORE	= adr.TXT_HSCORE .word
  2604 = A032			adr.TXT_FIRE	= CODEORIGIN+$0026
  2605 A996			.var TXT_FIRE	= adr.TXT_FIRE .word
  2606 = A03E			adr.TXT_TURBO	= CODEORIGIN+$0032
  2607 A996			.var TXT_TURBO	= adr.TXT_TURBO .word
  2608 = A053			adr.TXT_INFO	= CODEORIGIN+$0047
  2609 A996			.var TXT_INFO	= adr.TXT_INFO .word
  2610 = 0002			SNAKE_SIZE	= $02
  2611 = 000E			GAME_SPEED	= $0E
  2612 = 000A			LEVEL_THOLD	= $0A
  2613 = 0002			SPEED_THOLD	= $02
  2614 = 00C8			TIME_E_SET	= $C8
  2615 = 0099			TIME_THOLD	= $99
  2616 = 0044			UP	= $44
  2617 = 0045			DOWN	= $45
  2618 = 0047			LEFT	= $47
  2619 = 0046			RIGHT	= $46
  2620 = 00E7			MOVE_UP	= $E7
  2621 = 0019			MOVE_DOWN	= $19
  2622 = 00FF			MOVE_LEFT	= $FF
  2623 = 0001			MOVE_RIGHT	= $01
  2624 = 0070			T0B	= $70
  2625 = 0071			T1B	= $71
  2626 = 0072			T2B	= $72
  2627 = 0073			T0W	= $73
  2628 = 0075			T1W	= $75
  2629 = 0077			SNAKE_SPEED	= $77
  2630 = 0078			SNAKE_SPD_C	= $78
  2631 = 0079			TAIL_DIR	= $79
  2632 = 007A			HEAD_DIR	= $7A
  2633 = 007B			LEVEL_UP	= $7B
  2634 = 007C			TIME_ENTITY	= $7C
  2635 = 007D			TIME_BCD	= $7D
  2636 = 007E			LEVEL_BCD	= $7E
  2637 = 007F			LEVEL	= $7F
  2638 = 0080			SCORE_BCD	= $80
  2639 = 0082			HI_SCORE_BCD	= $82
  2640 = 0084			HEAD_POS	= $84
  2641 = 0086			HEAD_POS_COL	= $86
  2642 = 0088			TAIL_POS	= $88
  2643 = 008A			FRUIT_ON_BOARD	= $8A
  2644 = 008B			adr.SNAKE	= $8B
  2645 A996			.var SNAKE	= adr.SNAKE .word
  2646 = 008B			SNAKE.HEAD	= $8B
  2647 = 008C			SNAKE.BODY	= $8C
  2648 = 008D			SNAKE.M	= $8D
  2649 = 00FB			GAME_OVER	= $FB
  2650 = 00FB			SF0B	= $FB
  2651 = 00FC			SF1B	= $FC
  2652 = 1C05			HI_SCR_SCORE	= $1C05
  2653 = 1EEA			SCR_SCORE	= $1EEA
  2654 = 1ED9			SCR_LEVEL	= $1ED9
  2655 = 1EDE			SCR_TIME	= $1EDE
  2656 A996			@exit
  2657
  2658 A996 A2 00		@halt	ldx #$00
  2659 A998 9A				txs
  2660
  2661 A999 60				rts
  2662
  2663 				; ------------------------------------------------------------
  2664
  2665 				; ------------------------------------------------------------
  2666
  2667 A99A			.local	@DEFINES
  2668 A99A			RAW
  2669 				.endl
  2670
  2671 A99A			.local	@RESOURCE
  2672 				.endl
  2673
  2674 = A99A 0C A0		TXT_LEVEL
  2674 = A99C 16 A0		TXT_POINTS
  2674 = A99E 23 A0		TXT_TIME
  2674 = A9A0 29 A0		TXT_HSCORE
  2674 = A9A2 32 A0		TXT_FIRE
  2674 = A9A4 3E A0		TXT_TURBO
  2674 = A9A6 53 A0		TXT_INFO
  2674 = A9A8 8B 00		SNAKE
  2674 				.endl							; MAIN
  2675
  2676 				; ------------------------------------------------------------
  2677 				; ------------------------------------------------------------
  2678
  2679 				.macro	UNITINITIALIZATION
  2680 				
  2681 					.ifdef MAIN.SYSTEM.@UnitInit
  2682 					jsr MAIN.SYSTEM.@UnitInit
  2683 					.fi
  2684 				
  2685 					.ifdef MAIN.SYS_VIC20.@UnitInit
  2686 					jsr MAIN.SYS_VIC20.@UnitInit
  2687 					.fi
  2688 				.endm
  2689
  2690 				; ------------------------------------------------------------
  2691
  2692 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2693 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2693 				SYSTEM: $A12D..$A15A
  2694 					eif
  2695
  2696 					ift .SIZEOF(MAIN.SYS_VIC20) > 0
  2697 					.print 'SYS_VIC20: ',MAIN.SYS_VIC20,'..',MAIN.SYS_VIC20+.SIZEOF(MAIN.SYS_VIC20)-1
  2697 				SYS_VIC20: $A15B..$A30C
  2698 					eif
  2699
  2700 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2700 				CODE: $A00C..$A999
  2701
  2702 				; ------------------------------------------------------------
  2703
  2704 A9AA				.align $0004
  2705
  2706 A9AC			DATAORIGIN
  2707
  2708 = 0000			VARINITSIZE	= *-DATAORIGIN
  2709 = 000E			VARDATASIZE	= 14
  2710
  2711 = A9BA			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2712
  2713 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2713 				DATA: $A9AC..$A9BA
  2714
  2715 				; ------------------------------------------------------------
  2716
  2717 				.macro	STATICDATA
  2718 				.by  $08 $0C $05 $16 $05 $0C $20 $30  $30 $00 $0B $10 $0F $09 $0E $14  $13 $20 $30 $30 $30 $30 $00 $04
  2719 				.by  $14 $3A $30 $30 $00 $07 $08 $09  $3A $30 $30 $30 $30 $00 $0A $10  $12 $05 $13 $13 $20 $06 $09 $12
  2720 				.by  $05 $00 $13 $08 $0F $0C $04 $20  $06 $09 $12 $05 $20 $06 $0F $12  $20 $14 $15 $12 $02 $0F $00 $17
  2721 				.by  $13 $03 $0F $12 $05 $20 $10 $0F  $09 $0E $14 $13 $20 $15 $0E $14  $09 $0C $20 $14 $3A $39 $39 $00
  2722 				.by  $09 $1A $19 $3C $00 $FC $00 $00  $FF $FF $00 $00 $00 $00 $00 $6E
  2723 				.endm
  2724
  2725 A9AC			.local	RESOURCE
  2726 A9AC				icl 'raw\resource.asm'
Source: resource.asm
     1
    48 					opt l+
  2727
  2728 A9AC				RCDATA 'res/title_cbm.scr' CRT_TITLE_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 A9AC				org main.CRT_TITLE_ADR
     8 B912 20 20 20 20 20 20 + 	ins 'res/title_cbm.scr',0
    10 					.print '$R RCDATA  ',main.CRT_TITLE_ADR,'..',*-1," 'res/title_cbm.scr'"
    10 				$R RCDATA  $B912..$BBFF 'res/title_cbm.scr'
Source: vic20.a65
  2729 BC00				RCDATA 'res/snake_cbm.fnt' CRT_CHARS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 BC00				org main.CRT_CHARS_ADR
     8 BC00 00 3C 66 6E 6E 60 + 	ins 'res/snake_cbm.fnt',0
    10 					.print '$R RCDATA  ',main.CRT_CHARS_ADR,'..',*-1," 'res/snake_cbm.fnt'"
    10 				$R RCDATA  $BC00..$BFFF 'res/snake_cbm.fnt'
Source: vic20.a65
  2730 				.endl
  2731
  2732 					end
