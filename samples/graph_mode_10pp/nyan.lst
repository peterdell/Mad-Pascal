mads 2.1.0 build 8 (23 Dec 19)
Source: nyan.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/03/01] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2						; VBXE pointer
    16 = 0082			psptr	.ds 2						; PROGRAMSTACK Pointer
    17
    18 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    19 = 0088			edx	.ds 4
    20 = 008C			ecx	.ds 4
    21 = 0090			bp	.ds 2
    22 = 0092			bp2	.ds 2
    23
    24 				ztmp
    25 = 0094			ztmp8	.ds 1
    26 = 0095			ztmp9	.ds 1
    27 = 0096			ztmp10	.ds 1
    28 = 0097			ztmp11	.ds 1
    29
    30 = 0098			TMP	.ds 2
    31
    32 = 009A			STACKORIGIN	.ds STACKWIDTH*4
    33 				zpend
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0084			ax	= eax
    38 = 0084			al	= eax
    39 = 0085			ah	= eax+1
    40
    41 = 008C			cx	= ecx
    42 = 008C			cl	= ecx
    43 = 008D			ch	= ecx+1
    44
    45 = 0088			dx	= edx
    46 = 0088			dl	= edx
    47 = 0089			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0084			FP1MAN0	.ds 1
    52 = 0085			FP1MAN1	.ds 1
    53 = 0086			FP1MAN2	.ds 1
    54 = 0087			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0094			FP1SGN	.ds 1
    59 = 0095			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0088			FP2MAN0	.ds 1
    64 = 0089			FP2MAN1	.ds 1
    65 = 008A			FP2MAN2	.ds 1
    66 = 008B			FP2MAN3	.ds 1
    67
    68 					org ztmp10
    69
    70 = 0096			FP2SGN	.ds 1
    71 = 0097			FP2EXP	.ds 1
    72
    73 					org ecx
    74
    75 = 008C			FPMAN0	.ds 1
    76 = 008D			FPMAN1	.ds 1
    77 = 008E			FPMAN2	.ds 1
    78 = 008F			FPMAN3	.ds 1
    79
    80 					org bp2
    81
    82 = 0092			FPSGN	.ds 1
    83 = 0093			FPEXP	.ds 1
    84
    85 				.local	RESOURCE
    86 					icl 'res6502.asm'
Source: res6502.asm
     1
  1149 					opt l+
    87 = 0000				?EXTDETECT = 0
    88 = 0000				?VBXDETECT = 0
    89
    90 2000				RCDATA 'nyan5x.g10' BITMAP_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: res6502.asm]
     2 = 09A6			len = .filesize('nyan5x.g10')
    28 					org main.BITMAP_ADDRESS
    30 FFFF> 8000-89A5> 33 33 + 	ins 'nyan5x.g10'
    32 					.print '$R RCDATA  ',main.BITMAP_ADDRESS,'..',*-1," 'nyan5x.g10'"
    32 				$R RCDATA  $8000..$89A5 'nyan5x.g10'
Source: nyan.a65
    91 				.endl
    92
    93 				; ------------------------------------------------------------
    94
    95 89A6				org CODEORIGIN
    96
    97 2000				STATICDATA
Macro: STATICDATA [Source: nyan.a65]
Source: nyan.a65
    98
    99 				; ------------------------------------------------------------
   100
   101 2000			RUNLIB
   102 2000				icl 'cpu6502.asm'
Source: cpu6502.asm
  3624 					opt l+
   103
   104 				.print 'ZPAGE: ',fxptr,'..',zpend
   104 				ZPAGE: $0080..$00DA
   105
   106 				.print 'RUNLIB: ',RUNLIB,'..',*
   106 				RUNLIB: $2000..$2100
   107
   108 				; ------------------------------------------------------------
   109
   110 2100			START
   111 2100 BA				tsx
   112 2101 8E FF 24			stx MAIN.@halt+1
   113
   114 					.ifdef fmulinit
   115 					fmulinit
   116 					eif
   117
   118 = 0021			VLEN	= VARDATASIZE-VARINITSIZE
   119 = 254F			VADR	= DATAORIGIN+VARINITSIZE
   120
   121 					ift VADR > $BFFF
   122 					ert 'Invalid memory address range ',VADR
   123 					eli (VLEN>0) && (VLEN<=256)
   124 2104 A2 DF			ldx #256-VLEN
   125 2106 A9 00			lda #0
   126 2108 9D 70 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   127 					eli VLEN>0
   128 					@fill #VADR #VLEN #0
   129 					eif
   130
   131 210E A9 6F 85 82 A9 25 + 	mwa #PROGRAMSTACK-1 psptr
   132
   133 2116 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   134 2118 BD 40 03 9D 02 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   135
   136 2121 E8				inx						; X = 0
   137 2122 86 90			stx bp						; BP = 0
   138
   139 2124 8E 08 D2			stx audctl					; reset POKEY
   140 2127 A9 03			lda #3
   141 2129 8D 0F D2			sta skctl
   142
   143 212C CA				dex						; X = 255
   144
   145 212D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: nyan.a65]
    15 212D 20 99 21			jsr MAIN.RMT.@UnitInit
   146
   147 2130			.local	MAIN						; PROCEDURE
   148
   149 2130 4C 4A 24			jmp l_0007
   150
   151 				; ------------------------------------------------------------
   152
   153 2133			.local	SYSTEM						; UNIT
   154
   155 2133			.local	MOVE_0033					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   156
   157 				; ------------------------------------------------------------
   158
   159 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   160 				; as Pointer
   161 2133 B5 9A 85 84			mva :STACKORIGIN,x COUNT
   162 2137 B5 AA 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   163 213B CA				dex						; sub bx, 1
   164
   165 				; ------------------------------------------------------------
   166
   167 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   168 				; as Pointer
   169 213C B5 9A 85 8C			mva :STACKORIGIN,x DEST
   170 2140 B5 AA 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   171 2144 CA				dex						; sub bx, 1
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   176 				; as Pointer
   177 2145 B5 9A 85 88			mva :STACKORIGIN,x SOURCE
   178 2149 B5 AA 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   179 214D CA				dex						; sub bx, 1
   180
   181 				; ---------------------  ASM Block 032  ---------------------
   182
   183 214E 20 8A 20			jsr @move
   184
   185
   186 				; ------------------------------------------------------------
   187
   188 = 0088			SOURCE	= edx
   189 = 008C			DEST	= ecx
   190 = 0084			COUNT	= eax
   191 2151			@exit
   192 					.ifdef @new
   193 					@FreeMem #@VarData-1 #@VarDataSize
   194 					eif
   195 2151 60				rts						; ret
   196 				.endl
   197
   198 2152			.local	PAUSE_0051					; PROCEDURE | ASSEMBLER | OVERLOAD
   199
   200 				; ---------------------  ASM Block 040  ---------------------
   201
   202 2152 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   203
   204 2158			@exit
   205 					.ifdef @new
   206 					@FreeMem #@VarData-1 #@VarDataSize
   207 					eif
   208 2158 60				rts						; ret
   209 				.endl
   210
   211 2159			.local	PAUSE_0052					; PROCEDURE | ASSEMBLER | OVERLOAD
   212
   213 				; ------------------------------------------------------------
   214
   215 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   216 				; as Pointer
   217 2159 B5 9A 8D 1D 25		mva :STACKORIGIN,x N
   218 215E B5 AA 8D 1E 25		mva :STACKORIGIN+STACKWIDTH,x N+1
   219 2163 CA				dex						; sub bx, 1
   220
   221 				; ---------------------  ASM Block 041  ---------------------
   222
   223
   224 2164 AD 1D 25		loop	lda n
   225 2167 0D 1E 25			ora n+1
   226 216A F0 14			beq stop
   227
   228 216C A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   229
   230 2172 AD 1D 25 D0 03 CE + 	dew n
   231
   232 217D 4C 64 21			jmp loop
   233 2180			stop
   234
   235
   236 				; ------------------------------------------------------------
   237
   238 = 251D			N	= DATAORIGIN+$000B
   239
   240 = 251D			@VarData	= N
   241 = 0002			@VarDataSize	= 2
   242
   243 2180			@exit
   244 					.ifdef @new
   245 					@FreeMem #@VarData-1 #@VarDataSize
   246 					eif
   247 2180 60				rts						; ret
   248 				.endl
   249
   250 				; ------------------------------------------------------------
   251
   252 = 0648			M_PI_2	= $0648
   253 = 0192			D_PI_2	= $0192
   254 = 0004			D_PI_180	= $0004
   255 = 0000			MGTIA	= $0000
   256 = 0080			MVBXE	= $0080
   257 = 0000			VBXE_XDLADR	= $0000
   258 = 0100			VBXE_BCBADR	= $0100
   259 = 1000			VBXE_MAPADR	= $1000
   260 = 5000			VBXE_OVRADR	= $5000
   261 = B000			VBXE_WINDOW	= $B000
   262 = 0000			IDLI	= $0000
   263 = 0001			IVBL	= $0001
   264 = 00FE			CH_DELCHR	= $00FE
   265 = 009B			CH_ENTER	= $009B
   266 = 001B			CH_ESC	= $001B
   267 = 001C			CH_CURS_UP	= $001C
   268 = 001D			CH_CURS_DOWN	= $001D
   269 = 001E			CH_CURS_LEFT	= $001E
   270 = 001F			CH_CURS_RIGHT	= $001F
   271 = 007F			CH_TAB	= $007F
   272 = 009B			CH_EOL	= $009B
   273 = 007D			CH_CLR	= $007D
   274 = 00FD			CH_BELL	= $00FD
   275 = 007E			CH_DEL	= $007E
   276 = 009C			CH_DELLINE	= $009C
   277 = 009D			CH_INSLINE	= $009D
   278 = 0000			COLOR_BLACK	= $0000
   279 = 000E			COLOR_WHITE	= $000E
   280 = 0032			COLOR_RED	= $0032
   281 = 0096			COLOR_CYAN	= $0096
   282 = 0068			COLOR_VIOLET	= $0068
   283 = 00C4			COLOR_GREEN	= $00C4
   284 = 0074			COLOR_BLUE	= $0074
   285 = 00EE			COLOR_YELLOW	= $00EE
   286 = 0028			COLOR_ORANGE	= $0028
   287 = 00E4			COLOR_BROWN	= $00E4
   288 = 003C			COLOR_LIGHTRED	= $003C
   289 = 0004			COLOR_GRAY1	= $0004
   290 = 0006			COLOR_GRAY2	= $0006
   291 = 000A			COLOR_GRAY3	= $000A
   292 = 00CC			COLOR_LIGHTGREEN	= $00CC
   293 = 007C			COLOR_LIGHTBLUE	= $007C
   294 = 0004			FMOPENREAD	= $0004
   295 = 0008			FMOPENWRITE	= $0008
   296 = 0009			FMOPENAPPEND	= $0009
   297 = 000C			FMOPENREADWRITE	= $000C
   298 = 2512			SCREENWIDTH	= DATAORIGIN+$0000
   299 = 2514			SCREENHEIGHT	= DATAORIGIN+$0002
   300 = 2516			DATESEPARATOR	= DATAORIGIN+$0004
   301 = D014			TVSYSTEM	= $D014
   302 = 02C0			adr.PALETTE	= $02C0
   303 2181			.var PALETTE	= adr.PALETTE .word
   304 = D012			adr.HPALETTE	= $D012
   305 2181			.var HPALETTE	= adr.HPALETTE .word
   306 = 2517			FILEMODE	= DATAORIGIN+$0005
   307 = 2518			SCREENMODE	= DATAORIGIN+$0006
   308 = 2519			IORESULT	= DATAORIGIN+$0007
   309 = 251A			EOLN	= DATAORIGIN+$0008
   310 = 251B			RNDSEED	= DATAORIGIN+$0009
   311
   312 = 2181 C0 02		PALETTE
   312 = 2183 12 D0		HPALETTE
   312 				.endl							; UNIT SYSTEM
   313
   314 				; ------------------------------------------------------------
   315
   316 2185			.local	ATARI						; UNIT
   317
   318 				; ------------------------------------------------------------
   319
   320 = 0012			RTCLOK	= $0012
   321 = 004D			ATRACT	= $004D
   322 = 0052			LMARGIN	= $0052
   323 = 0053			RMARGIN	= $0053
   324 = 0054			ROWCRS	= $0054
   325 = 0055			COLCRS	= $0055
   326 = 0057			DINDEX	= $0057
   327 = 0058			SAVMSC	= $0058
   328 = 0062			PALNTS	= $0062
   329 = 006A			RAMTOP	= $006A
   330 = 0200			VDSLST	= $0200
   331 = 0230			SDLSTL	= $0230
   332 = 0290			TXTROW	= $0290
   333 = 0291			TXTCOL	= $0291
   334 = 0293			TINDEX	= $0293
   335 = 0294			TXTMSC	= $0294
   336 = 022F			SDMCTL	= $022F
   337 = 026F			GPRIOR	= $026F
   338 = 02F0			CRSINH	= $02F0
   339 = 02F3			CHACT	= $02F3
   340 = 02F4			CHBAS	= $02F4
   341 = 02FC			CH	= $02FC
   342 = 02C0			PCOLR0	= $02C0
   343 = 02C1			PCOLR1	= $02C1
   344 = 02C2			PCOLR2	= $02C2
   345 = 02C3			PCOLR3	= $02C3
   346 = 02C4			COLOR0	= $02C4
   347 = 02C5			COLOR1	= $02C5
   348 = 02C6			COLOR2	= $02C6
   349 = 02C7			COLOR3	= $02C7
   350 = 02C8			COLOR4	= $02C8
   351 = 02C8			COLBAKS	= $02C8
   352 = D000			HPOSP0	= $D000
   353 = D001			HPOSP1	= $D001
   354 = D002			HPOSP2	= $D002
   355 = D003			HPOSP3	= $D003
   356 = D004			HPOSM0	= $D004
   357 = D005			HPOSM1	= $D005
   358 = D006			HPOSM2	= $D006
   359 = D007			HPOSM3	= $D007
   360 = D008			SIZEP0	= $D008
   361 = D009			SIZEP1	= $D009
   362 = D00A			SIZEP2	= $D00A
   363 = D00B			SIZEP3	= $D00B
   364 = D00C			SIZEM	= $D00C
   365 = D00D			GRAFP0	= $D00D
   366 = D00E			GRAFP1	= $D00E
   367 = D00F			GRAFP2	= $D00F
   368 = D010			GRAFP3	= $D010
   369 = D011			GRAFM	= $D011
   370 = D004			P0PF	= $D004
   371 = D014			PAL	= $D014
   372 = D012			COLPM0	= $D012
   373 = D013			COLPM1	= $D013
   374 = D014			COLPM2	= $D014
   375 = D015			COLPM3	= $D015
   376 = D016			COLPF0	= $D016
   377 = D017			COLPF1	= $D017
   378 = D018			COLPF2	= $D018
   379 = D019			COLPF3	= $D019
   380 = D01A			COLBK	= $D01A
   381 = D01B			PRIOR	= $D01B
   382 = D01D			GRACTL	= $D01D
   383 = D01E			HITCLR	= $D01E
   384 = D200			AUDF1	= $D200
   385 = D201			AUDC1	= $D201
   386 = D202			AUDF2	= $D202
   387 = D203			AUDC2	= $D203
   388 = D204			AUDF3	= $D204
   389 = D205			AUDC3	= $D205
   390 = D206			AUDF4	= $D206
   391 = D207			AUDC4	= $D207
   392 = D208			AUDCTL	= $D208
   393 = D20F			SKSTAT	= $D20F
   394 = D301			PORTB	= $D301
   395 = D400			DMACTL	= $D400
   396 = D401			CHACTL	= $D401
   397 = D402			DLISTL	= $D402
   398 = D404			HSCROL	= $D404
   399 = D405			VSCROL	= $D405
   400 = D407			PMBASE	= $D407
   401 = D409			CHBASE	= $D409
   402 = D40A			WSYNC	= $D40A
   403 = D40B			VCOUNT	= $D40B
   404 = D40C			PENH	= $D40C
   405 = D40D			PENV	= $D40D
   406 = D40E			NMIEN	= $D40E
   407
   408 				.endl							; UNIT ATARI
   409
   410 				; ------------------------------------------------------------
   411
   412 2185			.local	CRT						; UNIT
   413
   414 2185			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   415
   416 				; ---------------------  ASM Block 052  ---------------------
   417
   418 2185 A0 00			ldy #$00	; false
   419 2187 AD FC 02			lda kbcodes
   420 218A C9 FF			cmp #$ff
   421 218C F0 01			beq skp
   422 218E C8				iny		; true
   423
   424 				;	sty kbcodes
   425
   426 218F 8C 20 25		skp	sty Result
   427
   428 2192			@exit
   429
   430 				; ------------------------------------------------------------
   431
   432 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   433 				; as Pointer
   434
   435 2192 E8				inx						; add bx, 1
   436 2193 AD 20 25 95 9A		mva RESULT :STACKORIGIN,x
   437
   438 					.ifdef @new
   439 					@FreeMem #@VarData-1 #@VarDataSize
   440 					eif
   441
   442 				; ------------------------------------------------------------
   443
   444 = 2520			RESULT	= DATAORIGIN+$000E
   445
   446 = 2520			@VarData	= RESULT
   447 = 0001			@VarDataSize	= 1
   448
   449 2198 60				rts						; ret
   450 				.endl
   451
   452 				; ------------------------------------------------------------
   453
   454 = 251F			TEXTATTR	= DATAORIGIN+$000D
   455 = D01F			CONSOL	= $D01F
   456 = 0000			CN_START_SELECT_OPTION	= $0000
   457 = 0001			CN_SELECT_OPTION	= $0001
   458 = 0002			CN_START_OPTION	= $0002
   459 = 0003			CN_OPTION	= $0003
   460 = 0004			CN_START_SELECT	= $0004
   461 = 0005			CN_SELECT	= $0005
   462 = 0006			CN_START	= $0006
   463 = 0007			CN_NONE	= $0007
   464 = 0000			BW40	= $0000
   465 = 0001			CO40	= $0001
   466 = 0002			BW80	= $0002
   467 = 0003			CO80	= $0003
   468 = 0007			MONO	= $0007
   469 = 0001			C40	= $0001
   470 = 0003			C80	= $0003
   471 = 0000			BLACK	= $0000
   472 = 0001			BLUE	= $0001
   473 = 0002			GREEN	= $0002
   474 = 0003			CYAN	= $0003
   475 = 0004			RED	= $0004
   476 = 0005			MAGENTA	= $0005
   477 = 0006			BROWN	= $0006
   478 = 0007			LIGHTGRAY	= $0007
   479 = 0008			DARKGRAY	= $0008
   480 = 0009			LIGHTBLUE	= $0009
   481 = 000A			LIGHTGREEN	= $000A
   482 = 000B			LIGHTCYAN	= $000B
   483 = 000C			LIGHTRED	= $000C
   484 = 000D			LIGHTMAGENTA	= $000D
   485 = 000E			YELLOW	= $000E
   486 = 000F			WHITE	= $000F
   487 = 0080			BLINK	= $0080
   488
   489 				.endl							; UNIT CRT
   490
   491 				; ------------------------------------------------------------
   492
   493 2199			.local	RMT						; UNIT
   494
   495 				; ------------------------------------------------------------
   496 				; ------------------------------------------------------------
   497 2199			@UnitInit
   498
   499 				; ---------------------  ASM Block 063  ---------------------
   500
   501
   502 2199 A9 00			lda #0
   503 219B AE 14 D0			ldx SYSTEM.TVSystem
   504 219E E0 0F			cpx #15
   505 21A0 D0 02			sne
   506 21A2 A9 04			lda #4
   507
   508 21A4 8D 21 25			sta ntsc
   509
   510
   511 21A7 60				rts
   512
   513 				; ------------------------------------------------------------
   514
   515 = 2521			NTSC	= DATAORIGIN+$000F
   516
   517 				.endl							; UNIT RMT
   518
   519 				; ------------------------------------------------------------
   520
   521 21A8			.local	GR10PP						; UNIT
   522
   523 21A8			.local	G10DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   524
   525 				; ---------------------  ASM Block 064  ---------------------
   526
   527
   528 21A8			dli 
   529 21A8 48			    pha 
   530 21A9 8D 0A D4		    sta WSYNC  ;($d40a) 
   531 21AC A9 0D		    lda #13 
   532 = 21AD			.def :VS_Upper = *-1
   533 21AE 8D 05 D4		    sta VSCROL ;($d405) 
   534 21B1 A9 03		    lda #3
   535 = 21B2			.def :VS_Lower = *-1
   536 21B3 8D 05 D4		    sta VSCROL ;($d405) 
   537 21B6 68			    pla 
   538
   539 21B7 40				rti						; ret
   540 				.endl
   541
   542 21B8			.local	SETVS						; PROCEDURE | ASSEMBLER
   543
   544 				; ------------------------------------------------------------
   545
   546 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   547 				; as Pointer
   548 21B8 B5 9A 8D 36 25		mva :STACKORIGIN,x LOWER
   549 21BD CA				dex						; sub bx, 1
   550
   551 				; ------------------------------------------------------------
   552
   553 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   554 				; as Pointer
   555 21BE B5 9A 8D 35 25		mva :STACKORIGIN,x UPPER
   556 21C3 CA				dex						; sub bx, 1
   557
   558 				; ---------------------  ASM Block 065  ---------------------
   559
   560
   561 21C4 AD 35 25		    lda upper
   562 21C7 8D AD 21		    sta VS_Upper
   563 21CA AD 36 25		    lda lower
   564 21CD 8D B2 21		    sta VS_Lower
   565
   566
   567 				; ------------------------------------------------------------
   568
   569 = 2535			UPPER	= DATAORIGIN+$0023
   570 = 2536			LOWER	= DATAORIGIN+$0024
   571
   572 = 2535			@VarData	= UPPER
   573 = 0002			@VarDataSize	= 2
   574
   575 21D0			@exit
   576 					.ifdef @new
   577 					@FreeMem #@VarData-1 #@VarDataSize
   578 					eif
   579 21D0 60				rts						; ret
   580 				.endl
   581
   582 21D1			.local	SETPIXELHEIGHT					; PROCEDURE
   583
   584 				; ------------------------------------------------------------
   585
   586 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   587 				; as Pointer
   588 21D1 B5 9A 8D 37 25		mva :STACKORIGIN,x LINES
   589 21D6 CA				dex						; sub bx, 1
   590
   591 				; optimize OK (GR10PP), line = 83
   592
   593 21D7 A0 01			ldy #1
   594 21D9 AD 37 25			lda LINES
   595 21DC C9 02			cmp #$02
   596 21DE B0 01			bcs @+
   597 21E0 88				dey
   598 21E1			@
   599 21E1 84 A3			sty :STACKORIGIN+9
   600 21E3 A0 01			ldy #1
   601 21E5 AD 37 25			lda LINES
   602 21E8 C9 11			cmp #$11
   603 21EA 90 01			bcc @+
   604 21EC 88				dey
   605 21ED			@
   606 21ED 98				tya
   607 21EE 25 A3			and :STACKORIGIN+9
   608 21F0 F0 16			jeq l_0086
   609
   610 				; optimize FAIL ('SYSTEM.PAUSE_0051', GR10PP), line = 84
   611 21F2 20 52 21			jsr SYSTEM.PAUSE_0051
   612
   613 				; optimize FAIL ('SETVS', GR10PP), line = 85
   614 21F5 E8				inx
   615 21F6 A9 11			lda #$11
   616 21F8 38 ED 37 25			sub LINES
   617 21FC 95 9A			sta :STACKORIGIN,x
   618 21FE E8				inx
   619 21FF AC 37 25			ldy LINES
   620 2202 88				dey
   621 2203 94 9A			sty :STACKORIGIN,x
   622 2205 20 B8 21			jsr SETVS
   623 2208			l_0086
   624
   625 				; ------------------------------------------------------------
   626
   627 = 2537			LINES	= DATAORIGIN+$0025
   628
   629 = 2537			@VarData	= LINES
   630 = 0001			@VarDataSize	= 1
   631
   632 2208			@exit
   633 					.ifdef @new
   634 					@FreeMem #@VarData-1 #@VarDataSize
   635 					eif
   636 2208 60				rts						; ret
   637 				.endl
   638
   639 2209			.local	DLPOKE						; PROCEDURE
   640
   641 				; ------------------------------------------------------------
   642
   643 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   644 				; as Pointer
   645 2209 B5 9A 8D 38 25		mva :STACKORIGIN,x B
   646 220E CA				dex						; sub bx, 1
   647
   648 				; optimize OK (GR10PP), line = 91
   649
   650 220F AD AE 23			lda DLIST
   651 2212 18 6D 33 25			add DLPTR
   652 2216 A8				tay
   653 2217 AD AF 23			lda DLIST+1
   654 221A 6D 34 25			adc DLPTR+1
   655 221D 85 91			sta :bp+1
   656 221F AD 38 25			lda B
   657 2222 91 90			sta (:bp),y
   658
   659 				; optimize FAIL (0, GR10PP), line = 92
   660 2224 EE 33 25			inc DLPTR
   661 2227 D0 03			sne
   662 2229 EE 34 25			inc DLPTR+1
   663
   664 				; ------------------------------------------------------------
   665
   666 = 2538			B	= DATAORIGIN+$0026
   667
   668 = 2538			@VarData	= B
   669 = 0001			@VarDataSize	= 1
   670
   671 222C			@exit
   672 					.ifdef @new
   673 					@FreeMem #@VarData-1 #@VarDataSize
   674 					eif
   675 222C 60				rts						; ret
   676 				.endl
   677
   678 222D			.local	DLPOKEW						; PROCEDURE
   679
   680 				; ------------------------------------------------------------
   681
   682 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   683 				; as Pointer
   684 222D B5 9A 8D 39 25		mva :STACKORIGIN,x W
   685 2232 B5 AA 8D 3A 25		mva :STACKORIGIN+STACKWIDTH,x W+1
   686 2237 CA				dex						; sub bx, 1
   687
   688 				; optimize OK (GR10PP), line = 97
   689
   690 2238 AD AE 23			lda DLIST
   691 223B 18 6D 33 25			add DLPTR
   692 223F A8				tay
   693 2240 AD AF 23			lda DLIST+1
   694 2243 6D 34 25			adc DLPTR+1
   695 2246 85 91			sta :bp+1
   696 2248 AD 39 25			lda W
   697 224B 91 90			sta (:bp),y
   698
   699 				; optimize FAIL (0, GR10PP), line = 98
   700 224D EE 33 25			inc DLPTR
   701 2250 D0 03			sne
   702 2252 EE 34 25			inc DLPTR+1
   703
   704 				; optimize OK (GR10PP), line = 99
   705
   706 2255 AD 3A 25			lda W+1
   707 2258 85 A4			sta :STACKORIGIN+10
   708 225A AD AE 23			lda DLIST
   709 225D 18 6D 33 25			add DLPTR
   710 2261 A8				tay
   711 2262 AD AF 23			lda DLIST+1
   712 2265 6D 34 25			adc DLPTR+1
   713 2268 85 91			sta :bp+1
   714 226A A5 A4			lda :STACKORIGIN+10
   715 226C 91 90			sta (:bp),y
   716
   717 				; optimize FAIL (0, GR10PP), line = 100
   718 226E EE 33 25			inc DLPTR
   719 2271 D0 03			sne
   720 2273 EE 34 25			inc DLPTR+1
   721
   722 				; ------------------------------------------------------------
   723
   724 = 2539			W	= DATAORIGIN+$0027
   725
   726 = 2539			@VarData	= W
   727 = 0002			@VarDataSize	= 2
   728
   729 2276			@exit
   730 					.ifdef @new
   731 					@FreeMem #@VarData-1 #@VarDataSize
   732 					eif
   733 2276 60				rts						; ret
   734 				.endl
   735
   736 2277			.local	BUILDDISPLAYLIST				; PROCEDURE
   737
   738 				; ------------------------------------------------------------
   739
   740 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   741 				; as Pointer
   742 2277 B5 9A 8D 40 25		mva :STACKORIGIN,x BLANKS
   743 227C CA				dex						; sub bx, 1
   744
   745 				; ------------------------------------------------------------
   746
   747 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   748 				; as Pointer
   749 227D B5 9A 8D 3F 25		mva :STACKORIGIN,x LINES
   750 2282 CA				dex						; sub bx, 1
   751
   752 				; ------------------------------------------------------------
   753
   754 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   755 				; as Pointer
   756 2283 B5 9A 8D 3D 25		mva :STACKORIGIN,x VRAMADDRESS
   757 2288 B5 AA 8D 3E 25		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   758 228D CA				dex						; sub bx, 1
   759
   760 				; ------------------------------------------------------------
   761
   762 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   763 				; as Pointer
   764 228E B5 9A 8D 3B 25		mva :STACKORIGIN,x DLISTADDRESS
   765 2293 B5 AA 8D 3C 25		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   766 2298 CA				dex						; sub bx, 1
   767
   768 				; optimize OK (GR10PP), line = 105
   769
   770 2299 AD 3B 25 8D AE 23		mva DLISTADDRESS DLIST
   771 229F AD 3C 25 8D AF 23		mva DLISTADDRESS+1 DLIST+1
   772
   773 				; optimize OK (GR10PP), line = 106
   774
   775 22A5 A9 00 8D 33 25		mva #$00 DLPTR
   776 22AA 8D 34 25			sta DLPTR+1
   777
   778 				; --- WhileProlog
   779 22AD 4C CD 22			jmp l_00E4
   780 22B0			l_00E5
   781
   782 				; optimize OK (GR10PP), line = 108
   783
   784 22B0 AD 40 25			lda BLANKS
   785 22B3 C9 01			cmp #$01
   786 22B5 D0 0B			jne l_00F7
   787
   788 				; optimize FAIL ('DLPOKE', GR10PP), line = 108
   789 22B7 E8				inx
   790 22B8 A9 F0 95 9A			mva #$F0 :STACKORIGIN,x
   791 22BC 20 09 22			jsr DLPOKE
   792 22BF 4C CA 22			jmp l_0103
   793 22C2			l_00F7
   794
   795 				; optimize FAIL ('DLPOKE', GR10PP), line = 109
   796 22C2 E8				inx
   797 22C3 A9 70 95 9A			mva #$70 :STACKORIGIN,x
   798 22C7 20 09 22			jsr DLPOKE
   799 22CA			l_0103
   800
   801 				; optimize FAIL (0, GR10PP), line = 110
   802 22CA CE 40 25			dec BLANKS
   803 22CD			l_00E4
   804
   805 				; optimize OK (GR10PP), line = 107
   806
   807 22CD AD 40 25			lda BLANKS
   808 22D0 D0 DE			jne l_00E5
   809
   810 				; optimize FAIL ('DLPOKE', GR10PP), line = 112
   811 22D2 E8				inx
   812 22D3 A9 6F 95 9A			mva #$6F :STACKORIGIN,x
   813 22D7 20 09 22			jsr DLPOKE
   814
   815 				; optimize FAIL ('DLPOKEW', GR10PP), line = 113
   816 22DA E8				inx
   817 22DB AD 3D 25 95 9A		mva VRAMADDRESS :STACKORIGIN,x
   818 22E0 AD 3E 25 95 AA		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   819 22E5 20 2D 22			jsr DLPOKEW
   820
   821 				; optimize FAIL ('DLPOKE', GR10PP), line = 114
   822 22E8 E8				inx
   823 22E9 A9 8F 95 9A			mva #$8F :STACKORIGIN,x
   824 22ED 20 09 22			jsr DLPOKE
   825
   826 				; optimize FAIL (0, GR10PP), line = 115
   827 22F0 CE 3F 25			dec LINES
   828
   829 				; --- WhileProlog
   830 22F3 4C 09 23			jmp l_0122
   831 22F6			l_0123
   832
   833 				; optimize FAIL ('DLPOKE', GR10PP), line = 117
   834 22F6 E8				inx
   835 22F7 A9 2F 95 9A			mva #$2F :STACKORIGIN,x
   836 22FB 20 09 22			jsr DLPOKE
   837
   838 				; optimize FAIL ('DLPOKE', GR10PP), line = 118
   839 22FE E8				inx
   840 22FF A9 8F 95 9A			mva #$8F :STACKORIGIN,x
   841 2303 20 09 22			jsr DLPOKE
   842
   843 				; optimize FAIL (0, GR10PP), line = 119
   844 2306 CE 3F 25			dec LINES
   845 2309			l_0122
   846
   847 				; optimize OK (GR10PP), line = 116
   848
   849 2309 AD 3F 25			lda LINES
   850 230C D0 E8			jne l_0123
   851
   852 				; optimize FAIL ('DLPOKE', GR10PP), line = 121
   853 230E E8				inx
   854 230F A9 70 95 9A			mva #$70 :STACKORIGIN,x
   855 2313 20 09 22			jsr DLPOKE
   856
   857 				; optimize FAIL ('DLPOKE', GR10PP), line = 122
   858 2316 E8				inx
   859 2317 A9 41 95 9A			mva #$41 :STACKORIGIN,x
   860 231B 20 09 22			jsr DLPOKE
   861
   862 				; optimize FAIL ('DLPOKEW', GR10PP), line = 123
   863 231E E8				inx
   864 231F AD 3B 25 95 9A		mva DLISTADDRESS :STACKORIGIN,x
   865 2324 AD 3C 25 95 AA		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   866 2329 20 2D 22			jsr DLPOKEW
   867
   868 				; ------------------------------------------------------------
   869
   870 = 253B			DLISTADDRESS	= DATAORIGIN+$0029
   871 = 253D			VRAMADDRESS	= DATAORIGIN+$002B
   872 = 253F			LINES	= DATAORIGIN+$002D
   873 = 2540			BLANKS	= DATAORIGIN+$002E
   874
   875 = 253B			@VarData	= DLISTADDRESS
   876 = 0006			@VarDataSize	= 6
   877
   878 232C			@exit
   879 					.ifdef @new
   880 					@FreeMem #@VarData-1 #@VarDataSize
   881 					eif
   882 232C 60				rts						; ret
   883 				.endl
   884
   885 232D			.local	GR10INIT					; PROCEDURE
   886
   887 				; ------------------------------------------------------------
   888
   889 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   890 				; as Pointer
   891 232D B5 9A 8D 47 25		mva :STACKORIGIN,x BLANKS
   892 2332 CA				dex						; sub bx, 1
   893
   894 				; ------------------------------------------------------------
   895
   896 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   897 				; as Pointer
   898 2333 B5 9A 8D 46 25		mva :STACKORIGIN,x PIXELHEIGHT
   899 2338 CA				dex						; sub bx, 1
   900
   901 				; ------------------------------------------------------------
   902
   903 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   904 				; as Pointer
   905 2339 B5 9A 8D 45 25		mva :STACKORIGIN,x LINES
   906 233E CA				dex						; sub bx, 1
   907
   908 				; ------------------------------------------------------------
   909
   910 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   911 				; as Pointer
   912 233F B5 9A 8D 43 25		mva :STACKORIGIN,x VRAMADDRESS
   913 2344 B5 AA 8D 44 25		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   914 2349 CA				dex						; sub bx, 1
   915
   916 				; ------------------------------------------------------------
   917
   918 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   919 				; as Pointer
   920 234A B5 9A 8D 41 25		mva :STACKORIGIN,x DLISTADDRESS
   921 234F B5 AA 8D 42 25		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   922 2354 CA				dex						; sub bx, 1
   923
   924 				; optimize FAIL ('BUILDDISPLAYLIST', GR10PP), line = 128
   925 2355 E8				inx
   926 2356 AD 41 25 95 9A		mva DLISTADDRESS :STACKORIGIN,x
   927 235B AD 42 25 95 AA		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   928 2360 E8				inx
   929 2361 AD 43 25 95 9A		mva VRAMADDRESS :STACKORIGIN,x
   930 2366 AD 44 25 95 AA		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   931 236B E8				inx
   932 236C AD 45 25 95 9A		mva LINES :STACKORIGIN,x
   933 2371 E8				inx
   934 2372 AD 47 25 95 9A		mva BLANKS :STACKORIGIN,x
   935 2377 20 77 22			jsr BUILDDISPLAYLIST
   936
   937 				; optimize FAIL ('SETPIXELHEIGHT', GR10PP), line = 129
   938 237A E8				inx
   939 237B AD 46 25 95 9A		mva PIXELHEIGHT :STACKORIGIN,x
   940 2380 20 D1 21			jsr SETPIXELHEIGHT
   941
   942 				; optimize OK (GR10PP), line = 130
   943
   944 2383 AD 41 25 8D 30 02		mva DLISTADDRESS ATARI.SDLSTL
   945 2389 AD 42 25 8D 31 02		mva DLISTADDRESS+1 ATARI.SDLSTL+1
   946
   947 				; optimize OK (GR10PP), line = 131
   948
   949 238F AD 43 25 85 58		mva VRAMADDRESS ATARI.SAVMSC
   950 2394 AD 44 25 85 59		mva VRAMADDRESS+1 ATARI.SAVMSC+1
   951
   952 				; optimize OK (GR10PP), line = 132
   953
   954 2399 A9 A8 8D 00 02		mva <G10DLI VDSLST
   955 239E A9 21 8D 01 02		mva >G10DLI VDSLST+1
   956
   957 				; optimize OK (GR10PP), line = 133
   958
   959 23A3 A9 C0 8D 0E D4		mva #$C0 ATARI.NMIEN
   960
   961 				; optimize OK (GR10PP), line = 134
   962
   963 23A8 A9 81 8D 6F 02		mva #$81 ATARI.GPRIOR
   964
   965 				; ------------------------------------------------------------
   966
   967 = 2541			DLISTADDRESS	= DATAORIGIN+$002F
   968 = 2543			VRAMADDRESS	= DATAORIGIN+$0031
   969 = 2545			LINES	= DATAORIGIN+$0033
   970 = 2546			PIXELHEIGHT	= DATAORIGIN+$0034
   971 = 2547			BLANKS	= DATAORIGIN+$0035
   972
   973 = 2541			@VarData	= DLISTADDRESS
   974 = 0007			@VarDataSize	= 7
   975
   976 23AD			@exit
   977 					.ifdef @new
   978 					@FreeMem #@VarData-1 #@VarDataSize
   979 					eif
   980 23AD 60				rts						; ret
   981 				.endl
   982
   983 				; ------------------------------------------------------------
   984
   985 = 0070			DL_BLANK8	= $0070
   986 = 0080			DL_DLI	= $0080
   987 = 0040			DL_LMS	= $0040
   988 = 0020			DL_VSCROLL	= $0020
   989 = 000F			DL_MODE_320X192G2	= $000F
   990 = 0041			DL_JVB	= $0041
   991 = 2532			adr.DLIST	= DATAORIGIN+$0020
   992 23AE			.var DLIST	= adr.DLIST .word
   993 = 2533			DLPTR	= DATAORIGIN+$0021
   994
   995 = 23AE 32 25		DLIST
   995 				.endl							; UNIT GR10PP
   996
   997 				; ------------------------------------------------------------
   998
   999 23B0			.local	TYPES						; UNIT
  1000
  1001 				; ------------------------------------------------------------
  1002
  1003 				.endl							; UNIT TYPES
  1004
  1005 				; ------------------------------------------------------------
  1006
  1007 23B0			.local	GRAPH						; UNIT
  1008
  1009 				; ------------------------------------------------------------
  1010
  1011 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
  1012 = 0000			DETECT	= $0000
  1013 = 0001			CGA	= $0001
  1014 = 0002			MCGA	= $0002
  1015 = 0003			EGA	= $0003
  1016 = 0004			EGA64	= $0004
  1017 = 0005			EGAMONO	= $0005
  1018 = 0006			LOWRES	= $0006
  1019 = 0007			HERCMONO	= $0007
  1020 = 0009			VGA	= $0009
  1021 = 000A			VESA	= $000A
  1022 = 000B			D1BIT	= $000B
  1023 = 000C			D2BIT	= $000C
  1024 = 000D			D4BIT	= $000D
  1025 = 000E			D6BIT	= $000E
  1026 = 000F			D8BIT	= $000F
  1027 = 0010			D12BIT	= $0010
  1028 = 0018			M640X400	= $0018
  1029 = 0018			M640X480	= $0018
  1030 = 0000			GROK	= $0000
  1031 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
  1032 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
  1033 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
  1034 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
  1035 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
  1036 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
  1037 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
  1038 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
  1039 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
  1040 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
  1041 = FFFFFFF5		GRERROR	= $FFFFFFF5
  1042 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
  1043 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
  1044 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
  1045 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
  1046 = 0000			CGAC0	= $0000
  1047 = 0001			CGAC1	= $0001
  1048 = 0002			CGAC2	= $0002
  1049 = 0003			CGAC3	= $0003
  1050 = 0004			CGAHI	= $0004
  1051 = 0000			MCGAC0	= $0000
  1052 = 0001			MCGAC1	= $0001
  1053 = 0002			MCGAC2	= $0002
  1054 = 0003			MCGAC3	= $0003
  1055 = 0004			MCGAMED	= $0004
  1056 = 0005			MCGAHI	= $0005
  1057 = 0000			EGALO	= $0000
  1058 = 0001			EGAHI	= $0001
  1059 = 0000			EGA64LO	= $0000
  1060 = 0001			EGA64HI	= $0001
  1061 = 0003			EGAMONOHI	= $0003
  1062 = 000A			VGALO	= $000A
  1063 = 001F			VGAMED	= $001F
  1064 = 0018			VGAHI	= $0018
  1065 = 2548			WIN_LEFT	= DATAORIGIN+$0036
  1066 = 254A			WIN_RIGHT	= DATAORIGIN+$0038
  1067 = 254C			WIN_TOP	= DATAORIGIN+$003A
  1068 = 254E			WIN_BOTTOM	= DATAORIGIN+$003C
  1069 = 2550			GRAPHRESULT	= DATAORIGIN+$003E
  1070 = 2551			GETCOLOR	= DATAORIGIN+$003F
  1071 = 2552			adr.LASTARCCOORDS	= DATAORIGIN+$0040
  1072 23B0			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1073 = 2552			LASTARCCOORDS.X	= DATAORIGIN+$0040
  1074 = 2554			LASTARCCOORDS.Y	= DATAORIGIN+$0042
  1075 = 2556			LASTARCCOORDS.XSTART	= DATAORIGIN+$0044
  1076 = 2558			LASTARCCOORDS.YSTART	= DATAORIGIN+$0046
  1077 = 255A			LASTARCCOORDS.XEND	= DATAORIGIN+$0048
  1078 = 255C			LASTARCCOORDS.YEND	= DATAORIGIN+$004A
  1079 = 255E			CURRENTX	= DATAORIGIN+$004C
  1080 = 2560			CURRENTY	= DATAORIGIN+$004E
  1081 = 2562			VIDEORAM	= DATAORIGIN+$0050
  1082 = 2564			SCANLINE_WIDTH	= DATAORIGIN+$0052
  1083
  1084 = 23B0 52 25		LASTARCCOORDS
  1084 				.endl							; UNIT GRAPH
  1085
  1086 23B2			.local	PUTTILE						; PROCEDURE
  1087
  1088 				; ------------------------------------------------------------
  1089
  1090 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1091 				; as Pointer
  1092 23B2 B5 9A 8D 69 25		mva :STACKORIGIN,x TILE
  1093 23B7 B5 AA 8D 6A 25		mva :STACKORIGIN+STACKWIDTH,x TILE+1
  1094 23BC CA				dex						; sub bx, 1
  1095
  1096 				; ------------------------------------------------------------
  1097
  1098 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1099 				; as Pointer
  1100 23BD B5 9A 8D 68 25		mva :STACKORIGIN,x H
  1101 23C2 CA				dex						; sub bx, 1
  1102
  1103 				; ------------------------------------------------------------
  1104
  1105 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1106 				; as Pointer
  1107 23C3 B5 9A 8D 67 25		mva :STACKORIGIN,x W
  1108 23C8 CA				dex						; sub bx, 1
  1109
  1110 				; ------------------------------------------------------------
  1111
  1112 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1113 				; as Pointer
  1114 23C9 B5 9A 8D 66 25		mva :STACKORIGIN,x Y
  1115 23CE CA				dex						; sub bx, 1
  1116
  1117 				; ------------------------------------------------------------
  1118
  1119 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1120 				; as Pointer
  1121 23CF B5 9A 8D 65 25		mva :STACKORIGIN,x X
  1122 23D4 CA				dex						; sub bx, 1
  1123
  1124 				; optimize OK (nyan.pas), line = 15
  1125
  1126 23D5 AD 66 25			lda Y
  1127 23D8 20 DF 20			jsr @mul40
  1128 23DB A9 60			lda #$60
  1129 23DD 18 65 85			add :eax+1
  1130 23E0 8D 6C 25			sta VOFFSET+1
  1131 23E3 A5 84			lda :eax
  1132 23E5 18 6D 65 25			add X
  1133 23E9 8D 6B 25			sta VOFFSET
  1134 23EC 90 03			scc
  1135 23EE EE 6C 25			inc VOFFSET+1
  1136 				; --- For
  1137
  1138 				; optimize OK (nyan.pas), line = 16
  1139
  1140 23F1 A9 00 8D 6D 25		mva #$00 B
  1141
  1142 				; optimize OK (nyan.pas), line = 16
  1143
  1144 23F6 AC 68 25			ldy H
  1145 23F9 88				dey
  1146 23FA 8C 6E 25			sty @FORTMP_01FD
  1147 				; --- To
  1148 23FD			l_0200
  1149
  1150 				; --- ForToDoCondition
  1151
  1152 				; optimize OK (nyan.pas), line = 16
  1153
  1154 23FD AD 6D 25			lda B
  1155 2400 CD 6E 25			cmp @FORTMP_01FD
  1156 2403 90 02			scc
  1157 2405 D0 42			jne l_020E
  1158
  1159 				; optimize OK (nyan.pas), line = 17
  1160
  1161 2407 AD 69 25			lda TILE
  1162 240A 85 88			sta :edx
  1163 240C AD 6A 25			lda TILE+1
  1164 240F 85 89			sta :edx+1
  1165 2411 AD 6B 25			lda VOFFSET
  1166 2414 85 8C			sta :ecx
  1167 2416 AD 6C 25			lda VOFFSET+1
  1168 2419 85 8D			sta :ecx+1
  1169 241B AD 67 25			lda W
  1170 241E 85 84			sta :eax
  1171 2420 A9 00			lda #$00
  1172 2422 85 85			sta :eax+1
  1173 2424 20 8A 20			jsr @move
  1174
  1175 				; optimize OK (nyan.pas), line = 18
  1176
  1177 2427 AD 69 25			lda TILE
  1178 242A 18 6D 67 25			add W
  1179 242E 8D 69 25			sta TILE
  1180 2431 90 03			scc
  1181 2433 EE 6A 25			inc TILE+1
  1182
  1183 				; optimize OK (nyan.pas), line = 19
  1184
  1185 2436 AD 6B 25			lda VOFFSET
  1186 2439 18 69 28			add #$28
  1187 243C 8D 6B 25			sta VOFFSET
  1188 243F 90 03			scc
  1189 2441 EE 6C 25			inc VOFFSET+1
  1190
  1191 				; --- ForToDoEpilog
  1192 2444 EE 6D 25			inc B						; inc ptr byte [CounterAddress]
  1193 2447 D0 B4			jne l_0200
  1194 2449			l_020E
  1195
  1196 				; ------------------------------------------------------------
  1197
  1198 = 2565			X	= DATAORIGIN+$0053
  1199 = 2566			Y	= DATAORIGIN+$0054
  1200 = 2567			W	= DATAORIGIN+$0055
  1201 = 2568			H	= DATAORIGIN+$0056
  1202 = 2569			TILE	= DATAORIGIN+$0057
  1203 = 256B			VOFFSET	= DATAORIGIN+$0059
  1204 = 256D			B	= DATAORIGIN+$005B
  1205 = 256E			@FORTMP_01FD	= DATAORIGIN+$005C
  1206
  1207 = 2565			@VarData	= X
  1208 = 000A			@VarDataSize	= 10
  1209
  1210 2449			@exit
  1211 					.ifdef @new
  1212 					@FreeMem #@VarData-1 #@VarDataSize
  1213 					eif
  1214 2449 60				rts						; ret
  1215 				.endl
  1216 244A			l_0007
  1217
  1218 				; optimize FAIL ('GR10PP.GR10INIT', nyan.pas), line = 26
  1219 244A E8				inx
  1220 244B A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1221 244F A9 50 95 AA			mva #$50 :STACKORIGIN+STACKWIDTH,x
  1222 2453 E8				inx
  1223 2454 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1224 2458 A9 60 95 AA			mva #$60 :STACKORIGIN+STACKWIDTH,x
  1225 245C E8				inx
  1226 245D A9 30 95 9A			mva #$30 :STACKORIGIN,x
  1227 2461 E8				inx
  1228 2462 A9 04 95 9A			mva #$04 :STACKORIGIN,x
  1229 2466 E8				inx
  1230 2467 A9 02 95 9A			mva #$02 :STACKORIGIN,x
  1231 246B 20 2D 23			jsr GR10PP.GR10INIT
  1232
  1233 				; optimize OK (nyan.pas), line = 28
  1234
  1235 246E A9 00 8D C0 02		mva #$00 ATARI.PCOLR0
  1236
  1237 				; optimize OK (nyan.pas), line = 29
  1238
  1239 2473 A9 24 8D C3 02		mva #$24 ATARI.PCOLR3
  1240
  1241 				; optimize OK (nyan.pas), line = 30
  1242
  1243 2478 A9 18 8D C1 02		mva #$18 ATARI.PCOLR1
  1244
  1245 				; optimize OK (nyan.pas), line = 31
  1246
  1247 247D A9 1C 8D C6 02		mva #$1C ATARI.COLOR2
  1248
  1249 				; optimize OK (nyan.pas), line = 32
  1250
  1251 2482 A9 BA 8D C2 02		mva #$BA ATARI.PCOLR2
  1252
  1253 				; optimize OK (nyan.pas), line = 33
  1254
  1255 2487 A9 74 8D C5 02		mva #$74 ATARI.COLOR1
  1256
  1257 				; optimize OK (nyan.pas), line = 34
  1258
  1259 248C A9 54 8D C4 02		mva #$54 ATARI.COLOR0
  1260
  1261 				; optimize OK (nyan.pas), line = 35
  1262
  1263 2491 A9 3C 8D C8 02		mva #$3C ATARI.COLOR4
  1264
  1265 				; optimize OK (nyan.pas), line = 36
  1266
  1267 2496 A9 0A 8D C7 02		mva #$0A ATARI.COLOR3
  1268
  1269 				; --- RepeatUntilProlog
  1270 249B			l_024B
  1271 				; --- For
  1272
  1273 				; optimize OK (nyan.pas), line = 39
  1274
  1275 249B A9 00 8D 6F 25		mva #$00 FRAME
  1276
  1277 				; optimize OK (nyan.pas), line = 39
  1278
  1279 				; --- To
  1280 24A0			l_0254
  1281
  1282 				; --- ForToDoCondition
  1283
  1284 				; optimize OK (nyan.pas), line = 39
  1285
  1286 24A0 AD 6F 25			lda FRAME
  1287 24A3 C9 05			cmp #$05
  1288 24A5 B0 4F			jcs l_0262
  1289
  1290 				; optimize FAIL ('SYSTEM.PAUSE_0052', nyan.pas), line = 40
  1291 24A7 E8				inx
  1292 24A8 A9 05 95 9A			mva #$05 :STACKORIGIN,x
  1293 24AC A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1294 24B0 20 59 21			jsr SYSTEM.PAUSE_0052
  1295
  1296 				; optimize FAIL ('PUTTILE', nyan.pas), line = 41
  1297 24B3 E8				inx
  1298 24B4 A9 07 95 9A			mva #$07 :STACKORIGIN,x
  1299 24B8 E8				inx
  1300 24B9 A9 0C 95 9A			mva #$0C :STACKORIGIN,x
  1301 24BD E8				inx
  1302 24BE A9 1A 95 9A			mva #$1A :STACKORIGIN,x
  1303 24C2 E8				inx
  1304 24C3 A9 13 95 9A			mva #$13 :STACKORIGIN,x
  1305 24C7 E8				inx
  1306 24C8 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1307 24CC A9 80 95 AA			mva #$80 :STACKORIGIN+STACKWIDTH,x
  1308 24D0 E8				inx
  1309 24D1 AD 6F 25 95 9A		mva FRAME :STACKORIGIN,x
  1310 24D6 E8				inx
  1311 24D7 A9 EE 95 9A			mva #$EE :STACKORIGIN,x
  1312 24DB A9 01 95 AA			mva #$01 :STACKORIGIN+STACKWIDTH,x
  1313 24DF A9 00 95 A9			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1314 24E3 20 4C 20			jsr imulWORD
  1315 24E6 20 00 20			jsr movaBX_EAX
  1316 24E9 CA				dex
  1317 24EA 20 11 20			jsr addAX_CX
  1318 24ED CA				dex
  1319 24EE 20 B2 23			jsr PUTTILE
  1320
  1321 				; --- ForToDoEpilog
  1322 24F1 EE 6F 25			inc FRAME					; inc ptr byte [CounterAddress]
  1323 24F4 D0 AA			jne l_0254
  1324 24F6			l_0262
  1325
  1326 				; optimize FAIL ('CRT.KEYPRESSED', nyan.pas), line = 43
  1327 24F6 20 85 21			jsr CRT.KEYPRESSED
  1328 24F9 CA				dex
  1329 24FA B5 9B			lda :STACKORIGIN+1,x
  1330 24FC F0 9D			jeq l_024B
  1331
  1332 				; ------------------------------------------------------------
  1333
  1334 = 5000			DISPLAY_LIST_ADDRESS	= $5000
  1335 = 6000			VIDEO_RAM_ADDRESS	= $6000
  1336 = 8000			BITMAP_ADDRESS	= $8000
  1337 = 01EE			FRAME_SIZE	= $01EE
  1338 = 256F			FRAME	= DATAORIGIN+$005D
  1339 = 0004			@FORTMP_0251	= $0004
  1340 24FE			@exit
  1341
  1342 24FE A2 00		@halt	ldx #0
  1343 2500 9A				txs
  1344
  1345 2501 60				rts
  1346
  1347 				; ------------------------------------------------------------
  1348
  1349 2502 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1350
  1351 				; ------------------------------------------------------------
  1352
  1353 2512			.local	@DEFINES
  1354 2512			ATARI
  1355 				.endl
  1356
  1357 				.endl							; MAIN
  1358
  1359 				; ------------------------------------------------------------
  1360 				; ------------------------------------------------------------
  1361
  1362 				.macro	UNITINITIALIZATION
  1363 				
  1364 					.ifdef MAIN.SYSTEM.@UnitInit
  1365 					jsr MAIN.SYSTEM.@UnitInit
  1366 					eif
  1367 				
  1368 					.ifdef MAIN.ATARI.@UnitInit
  1369 					jsr MAIN.ATARI.@UnitInit
  1370 					eif
  1371 				
  1372 					.ifdef MAIN.CRT.@UnitInit
  1373 					jsr MAIN.CRT.@UnitInit
  1374 					eif
  1375 				
  1376 					.ifdef MAIN.RMT.@UnitInit
  1377 					jsr MAIN.RMT.@UnitInit
  1378 					eif
  1379 				
  1380 					.ifdef MAIN.GR10PP.@UnitInit
  1381 					jsr MAIN.GR10PP.@UnitInit
  1382 					eif
  1383 				
  1384 					.ifdef MAIN.TYPES.@UnitInit
  1385 					jsr MAIN.TYPES.@UnitInit
  1386 					eif
  1387 				
  1388 					.ifdef MAIN.GRAPH.@UnitInit
  1389 					jsr MAIN.GRAPH.@UnitInit
  1390 					eif
  1391 				.endm
  1392
  1393 				; ------------------------------------------------------------
  1394
  1395 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1396 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1396 				SYSTEM: $2133..$2184
  1397 					eif
  1398
  1399 					ift .SIZEOF(MAIN.ATARI) > 0
  1400 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1401 					eif
  1402
  1403 					ift .SIZEOF(MAIN.CRT) > 0
  1404 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1404 				CRT: $2185..$2198
  1405 					eif
  1406
  1407 					ift .SIZEOF(MAIN.RMT) > 0
  1408 					.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
  1408 				RMT: $2199..$21A7
  1409 					eif
  1410
  1411 					ift .SIZEOF(MAIN.GR10PP) > 0
  1412 					.print 'GR10PP: ',MAIN.GR10PP,'..',MAIN.GR10PP+.SIZEOF(MAIN.GR10PP)-1
  1412 				GR10PP: $21A8..$23AF
  1413 					eif
  1414
  1415 					ift .SIZEOF(MAIN.TYPES) > 0
  1416 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1417 					eif
  1418
  1419 					ift .SIZEOF(MAIN.GRAPH) > 0
  1420 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1420 				GRAPH: $23B0..$23B1
  1421 					eif
  1422
  1423 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1423 				CODE: $2000..$2511
  1424
  1425 				; ------------------------------------------------------------
  1426
  1427 2512			DATAORIGIN
  1428 2512 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1429 252A 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1430 2542 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17
  1431
  1432 = 003D			VARINITSIZE	= *-DATAORIGIN
  1433 = 005E			VARDATASIZE	= 94
  1434
  1435 = 2570			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1436
  1437 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1437 				DATA: $2512..$2570
  1438
  1439 02E0-02E1> 00 21			run START
  1440
  1441 				; ------------------------------------------------------------
  1442
  1443 				.macro	STATICDATA
  1444 				.endm
  1445
  1446 					end
