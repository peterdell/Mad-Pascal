mads 2.1.0 build 8 (23 Dec 19)
Source: nyan_2.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/06/06] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2						; VBXE pointer
    16 = 0082			psptr	.ds 2						; PROGRAMSTACK Pointer
    17
    18 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    19 = 0088			edx	.ds 4
    20 = 008C			ecx	.ds 4
    21 = 0090			bp	.ds 2
    22 = 0092			bp2	.ds 2
    23
    24 				ztmp
    25 = 0094			ztmp8	.ds 1
    26 = 0095			ztmp9	.ds 1
    27 = 0096			ztmp10	.ds 1
    28 = 0097			ztmp11	.ds 1
    29
    30 = 0098			TMP	.ds 2
    31
    32 = 009A			STACKORIGIN	.ds STACKWIDTH*4
    33 				zpend
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0084			ax	= eax
    38 = 0084			al	= eax
    39 = 0085			ah	= eax+1
    40
    41 = 008C			cx	= ecx
    42 = 008C			cl	= ecx
    43 = 008D			ch	= ecx+1
    44
    45 = 0088			dx	= edx
    46 = 0088			dl	= edx
    47 = 0089			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0084			FP1MAN0	.ds 1
    52 = 0085			FP1MAN1	.ds 1
    53 = 0086			FP1MAN2	.ds 1
    54 = 0087			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0094			FP1SGN	.ds 1
    59 = 0095			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0088			FP2MAN0	.ds 1
    64
    65 = 0089			FP2MAN1	.ds 1
    66 = 008A			FP2MAN2	.ds 1
    67 = 008B			FP2MAN3	.ds 1
    68
    69 					org ztmp10
    70
    71 = 0096			FP2SGN	.ds 1
    72 = 0097			FP2EXP	.ds 1
    73
    74 					org ecx
    75
    76 = 008C			FPMAN0	.ds 1
    77 = 008D			FPMAN1	.ds 1
    78 = 008E			FPMAN2	.ds 1
    79 = 008F			FPMAN3	.ds 1
    80
    81 					org bp2
    82
    83 = 0092			FPSGN	.ds 1
    84 = 0093			FPEXP	.ds 1
    85
    86 					.ifdef MAIN.@DEFINES.S_VBXE
    87 					opt h-
    88 					ins 'atari\s_vbxe\sdxld2.obx'
    89 					opt h+
    90 					.endif
    91
    92 				.local	RESOURCE
    93 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1148 					opt l+
    94 = 0000				?EXTDETECT = 0
    95 = 0000				?VBXDETECT = 0
    96
    97 2000				RCDATA 'nyan5x.g10' BITMAP_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 09A6			len = .filesize('nyan5x.g10')
    28 					org main.BITMAP_ADDRESS
    30 FFFF> 8000-89A5> 33 33 + 	ins 'nyan5x.g10'
    32 					.print '$R RCDATA  ',main.BITMAP_ADDRESS,'..',*-1," 'nyan5x.g10'"
    32 				$R RCDATA  $8000..$89A5 'nyan5x.g10'
Source: nyan_2.a65
    98 				.endl
    99
   100 				; ------------------------------------------------------------
   101
   102 89A6				org CODEORIGIN
   103
   104 2000				STATICDATA
Macro: STATICDATA [Source: nyan_2.a65]
Source: nyan_2.a65
   105
   106 				; ------------------------------------------------------------
   107
   108 2000			RTLIB
   109 2000				icl 'rtl6502.asm'
Source: rtl6502.asm
   388 					opt l+
   110
   111 				.print 'ZPAGE: ',fxptr,'..',zpend
   111 				ZPAGE: $0080..$00DA
   112
   113 				.print 'RTLIB: ',RTLIB,'..',*
   113 				RTLIB: $2000..$219D
   114
   115 				; ------------------------------------------------------------
   116
   117 219D			START
   118 219D BA				tsx
   119 219E 8E E3 27			stx MAIN.@halt+1
   120
   121 					.ifdef fmulinit
   122 					fmulinit
   123 					eif
   124
   125 = 0037			VLEN	= VARDATASIZE-VARINITSIZE
   126 = 2833			VADR	= DATAORIGIN+VARINITSIZE
   127
   128 					ift VADR > $BFFF
   129 					ert 'Invalid memory address range ',VADR
   130 					eli (VLEN>0) && (VLEN<=256)
   131 21A1 A2 C9			ldx #256-VLEN
   132 21A3 A9 00			lda #0
   133 21A5 9D 6A 27 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   134 					eli VLEN>0
   135 					@fill #VADR #VLEN #0
   136 					eif
   137
   138 					.ifdef MAIN.@DEFINES.ROMOFF
   139 					icl 'atari\romoff.asm'
   140 					.endif
   141
   142 21AB A9 6A 85 82 A9 28 + 	mwa #PROGRAMSTACK psptr
   143
   144 21B3 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   145 21B5 BD 40 03 9D E6 27 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   146
   147 21BE E8				inx						; X = 0
   148 21BF 86 90			stx bp						; BP = 0
   149
   150 21C1 8E 08 D2			stx audctl					; reset POKEY
   151 21C4 A9 03			lda #3
   152 21C6 8D 0F D2			sta skctl
   153
   154 21C9 CA				dex						; X = 255
   155
   156 21CA				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: nyan_2.a65]
    15 21CA 20 36 22			jsr MAIN.RMT.@UnitInit
   157
   158 21CD			.local	MAIN						; PROCEDURE
   159
   160 21CD 4C FB 26			jmp l_0007
   161
   162 				; ------------------------------------------------------------
   163
   164 21D0			.local	SYSTEM						; UNIT
   165
   166 21D0			.local	MOVE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   167
   168 				; ------------------------------------------------------------
   169
   170 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   171 				; as Pointer
   172 21D0 B5 9A 85 84			mva :STACKORIGIN,x COUNT
   173 21D4 B5 AA 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   174 21D8 CA				dex
   175
   176 				; ------------------------------------------------------------
   177
   178 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   179 				; as Pointer
   180 21D9 B5 9A 85 8C			mva :STACKORIGIN,x DEST
   181 21DD B5 AA 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   182 21E1 CA				dex
   183
   184 				; ------------------------------------------------------------
   185
   186 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   187 				; as Pointer
   188 21E2 B5 9A 85 88			mva :STACKORIGIN,x SOURCE
   189 21E6 B5 AA 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   190 21EA CA				dex
   191
   192 				; ---------------------  ASM Block 031  ---------------------
   193
   194 21EB 20 EC 20			jsr @move
   195
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0088			SOURCE	= edx
   200 = 008C			DEST	= ecx
   201 = 0084			COUNT	= eax
   202 21EE			@exit
   203 					.ifdef @new
   204 					lda <@VarData
   205 					sta :ztmp
   206 					lda >@VarData
   207 					ldy #@VarDataSize-1
   208 					jmp @FreeMem
   209 					eif
   210 21EE 60				rts						; ret
   211 				.endl
   212
   213 21EF			.local	PAUSE_0060					; PROCEDURE | ASSEMBLER | OVERLOAD
   214
   215 				; ---------------------  ASM Block 039  ---------------------
   216
   217 21EF A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   218
   219 21F5			@exit
   220 					.ifdef @new
   221 					lda <@VarData
   222 					sta :ztmp
   223 					lda >@VarData
   224 					ldy #@VarDataSize-1
   225 					jmp @FreeMem
   226 					eif
   227 21F5 60				rts						; ret
   228 				.endl
   229
   230 21F6			.local	PAUSE_0061					; PROCEDURE | ASSEMBLER | OVERLOAD
   231
   232 				; ------------------------------------------------------------
   233
   234 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   235 				; as Pointer
   236 21F6 B5 9A 8D 01 28		mva :STACKORIGIN,x N
   237 21FB B5 AA 8D 02 28		mva :STACKORIGIN+STACKWIDTH,x N+1
   238 2200 CA				dex
   239
   240 				; ---------------------  ASM Block 040  ---------------------
   241
   242
   243 2201 AD 01 28		loop	lda n
   244 2204 0D 02 28			ora n+1
   245 2207 F0 14			beq stop
   246
   247 2209 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   248
   249 220F AD 01 28 D0 03 CE + 	dew n
   250
   251 221A 4C 01 22			jmp loop
   252 221D			stop
   253
   254
   255 				; ------------------------------------------------------------
   256
   257 = 2801			N	= DATAORIGIN+$000B
   258
   259 = 2801			@VarData	= N
   260 = 0002			@VarDataSize	= 2
   261
   262 221D			@exit
   263 					.ifdef @new
   264 					lda <@VarData
   265 					sta :ztmp
   266 					lda >@VarData
   267 					ldy #@VarDataSize-1
   268 					jmp @FreeMem
   269 					eif
   270 221D 60				rts						; ret
   271 				.endl
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0101			__PORTB_BANKS	= $0101
   276 = 0648			M_PI_2	= $0648
   277 = 0192			D_PI_2	= $0192
   278 = 0004			D_PI_180	= $04
   279 = 0000			MGTIA	= $00
   280 = 0080			MVBXE	= $80
   281 = 0000			VBXE_XDLADR	= $00
   282 = 0100			VBXE_BCBADR	= $0100
   283 = 1000			VBXE_MAPADR	= $1000
   284 = 5000			VBXE_OVRADR	= $5000
   285 = B000			VBXE_WINDOW	= $B000
   286 = 0000			IDLI	= $00
   287 = 0001			IVBL	= $01
   288 = 00FE			CH_DELCHR	= $FE
   289 = 009B			CH_ENTER	= $9B
   290 = 001B			CH_ESC	= $1B
   291 = 001C			CH_CURS_UP	= $1C
   292 = 001D			CH_CURS_DOWN	= $1D
   293 = 001E			CH_CURS_LEFT	= $1E
   294 = 001F			CH_CURS_RIGHT	= $1F
   295 = 007F			CH_TAB	= $7F
   296 = 009B			CH_EOL	= $9B
   297 = 007D			CH_CLR	= $7D
   298 = 00FD			CH_BELL	= $FD
   299 = 007E			CH_DEL	= $7E
   300 = 009C			CH_DELLINE	= $9C
   301 = 009D			CH_INSLINE	= $9D
   302 = 0000			COLOR_BLACK	= $00
   303 = 000E			COLOR_WHITE	= $0E
   304 = 0032			COLOR_RED	= $32
   305 = 0096			COLOR_CYAN	= $96
   306 = 0068			COLOR_VIOLET	= $68
   307 = 00C4			COLOR_GREEN	= $C4
   308 = 0074			COLOR_BLUE	= $74
   309 = 00EE			COLOR_YELLOW	= $EE
   310 = 0028			COLOR_ORANGE	= $28
   311 = 00E4			COLOR_BROWN	= $E4
   312 = 003C			COLOR_LIGHTRED	= $3C
   313 = 0004			COLOR_GRAY1	= $04
   314 = 0006			COLOR_GRAY2	= $06
   315 = 000A			COLOR_GRAY3	= $0A
   316 = 00CC			COLOR_LIGHTGREEN	= $CC
   317 = 007C			COLOR_LIGHTBLUE	= $7C
   318 = 0004			FMOPENREAD	= $04
   319 = 0008			FMOPENWRITE	= $08
   320 = 0009			FMOPENAPPEND	= $09
   321 = 000C			FMOPENREADWRITE	= $0C
   322 = 27F6			SCREENWIDTH	= DATAORIGIN+$0000
   323 = 27F8			SCREENHEIGHT	= DATAORIGIN+$0002
   324 = 27FA			DATESEPARATOR	= DATAORIGIN+$0004
   325 = D014			TVSYSTEM	= $D014
   326 = 02C0			adr.PALETTE	= $02C0
   327 221E			.var PALETTE	= adr.PALETTE .word
   328 = D012			adr.HPALETTE	= $D012
   329 221E			.var HPALETTE	= adr.HPALETTE .word
   330 = 27FB			FILEMODE	= DATAORIGIN+$0005
   331 = 27FC			GRAPHMODE	= DATAORIGIN+$0006
   332 = 27FD			IORESULT	= DATAORIGIN+$0007
   333 = 27FE			EOLN	= DATAORIGIN+$0008
   334 = 27FF			RNDSEED	= DATAORIGIN+$0009
   335
   336 = 221E C0 02		PALETTE
   336 = 2220 12 D0		HPALETTE
   336 				.endl							; UNIT SYSTEM
   337
   338 				; ------------------------------------------------------------
   339
   340 2222			.local	ATARI						; UNIT
   341
   342 				; ------------------------------------------------------------
   343
   344 = 0012			RTCLOK	= $12
   345 = 004D			ATRACT	= $4D
   346 = 0052			LMARGIN	= $52
   347 = 0053			RMARGIN	= $53
   348 = 0054			ROWCRS	= $54
   349 = 0055			COLCRS	= $55
   350 = 0057			DINDEX	= $57
   351 = 0058			SAVMSC	= $58
   352 = 0062			PALNTS	= $62
   353 = 006A			RAMTOP	= $6A
   354 = 0200			VDSLST	= $0200
   355 = 0230			SDLSTL	= $0230
   356 = 0290			TXTROW	= $0290
   357 = 0291			TXTCOL	= $0291
   358 = 0293			TINDEX	= $0293
   359 = 0294			TXTMSC	= $0294
   360 = 022F			SDMCTL	= $022F
   361 = 026F			GPRIOR	= $026F
   362 = 02F0			CRSINH	= $02F0
   363 = 02F3			CHACT	= $02F3
   364 = 02F4			CHBAS	= $02F4
   365 = 02FC			CH	= $02FC
   366 = 02C0			PCOLR0	= $02C0
   367 = 02C1			PCOLR1	= $02C1
   368 = 02C2			PCOLR2	= $02C2
   369 = 02C3			PCOLR3	= $02C3
   370 = 02C4			COLOR0	= $02C4
   371 = 02C5			COLOR1	= $02C5
   372 = 02C6			COLOR2	= $02C6
   373 = 02C7			COLOR3	= $02C7
   374 = 02C8			COLOR4	= $02C8
   375 = 02C8			COLBAKS	= $02C8
   376 = D000			HPOSP0	= $D000
   377 = D001			HPOSP1	= $D001
   378 = D002			HPOSP2	= $D002
   379 = D003			HPOSP3	= $D003
   380 = D004			HPOSM0	= $D004
   381 = D005			HPOSM1	= $D005
   382 = D006			HPOSM2	= $D006
   383 = D007			HPOSM3	= $D007
   384 = D008			SIZEP0	= $D008
   385 = D009			SIZEP1	= $D009
   386 = D00A			SIZEP2	= $D00A
   387 = D00B			SIZEP3	= $D00B
   388 = D00C			SIZEM	= $D00C
   389 = D00D			GRAFP0	= $D00D
   390 = D00E			GRAFP1	= $D00E
   391 = D00F			GRAFP2	= $D00F
   392 = D010			GRAFP3	= $D010
   393 = D011			GRAFM	= $D011
   394 = D004			P0PF	= $D004
   395 = D014			PAL	= $D014
   396 = D012			COLPM0	= $D012
   397 = D013			COLPM1	= $D013
   398 = D014			COLPM2	= $D014
   399 = D015			COLPM3	= $D015
   400 = D016			COLPF0	= $D016
   401 = D017			COLPF1	= $D017
   402 = D018			COLPF2	= $D018
   403 = D019			COLPF3	= $D019
   404 = D01A			COLBK	= $D01A
   405 = D01B			PRIOR	= $D01B
   406 = D01D			GRACTL	= $D01D
   407 = D01E			HITCLR	= $D01E
   408 = D200			AUDF1	= $D200
   409 = D201			AUDC1	= $D201
   410 = D202			AUDF2	= $D202
   411 = D203			AUDC2	= $D203
   412 = D204			AUDF3	= $D204
   413 = D205			AUDC3	= $D205
   414 = D206			AUDF4	= $D206
   415 = D207			AUDC4	= $D207
   416 = D208			AUDCTL	= $D208
   417 = D20F			SKSTAT	= $D20F
   418 = D301			PORTB	= $D301
   419 = D400			DMACTL	= $D400
   420 = D401			CHACTL	= $D401
   421 = D402			DLISTL	= $D402
   422 = D404			HSCROL	= $D404
   423 = D405			VSCROL	= $D405
   424 = D407			PMBASE	= $D407
   425 = D409			CHBASE	= $D409
   426 = D40A			WSYNC	= $D40A
   427 = D40B			VCOUNT	= $D40B
   428 = D40C			PENH	= $D40C
   429 = D40D			PENV	= $D40D
   430 = D40E			NMIEN	= $D40E
   431
   432 				.endl							; UNIT ATARI
   433
   434 				; ------------------------------------------------------------
   435
   436 2222			.local	CRT						; UNIT
   437
   438 2222			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   439
   440 				; ---------------------  ASM Block 053  ---------------------
   441
   442 2222 A0 00			ldy #$00	; false
   443 2224 AD FC 02			lda kbcodes
   444 2227 C9 FF			cmp #$ff
   445 2229 F0 01			beq skp
   446 222B C8				iny		; true
   447
   448 				;	sty kbcodes
   449
   450 222C 8C 04 28		skp	sty Result
   451
   452 222F			@exit
   453
   454 				; ------------------------------------------------------------
   455
   456 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   457 				; as Pointer
   458
   459 222F E8				inx
   460 2230 AD 04 28 95 9A		mva RESULT :STACKORIGIN,x
   461
   462 					.ifdef @new
   463 					lda <@VarData
   464 					sta :ztmp
   465 					lda >@VarData
   466 					ldy #@VarDataSize-1
   467 					jmp @FreeMem
   468 					eif
   469
   470 				; ------------------------------------------------------------
   471
   472 = 2804			RESULT	= DATAORIGIN+$000E
   473
   474 = 2804			@VarData	= RESULT
   475 = 0001			@VarDataSize	= 1
   476
   477 2235 60				rts						; ret
   478 				.endl
   479
   480 				; ------------------------------------------------------------
   481
   482 = 2803			TEXTATTR	= DATAORIGIN+$000D
   483 = D01F			CONSOL	= $D01F
   484 = 0000			CN_START_SELECT_OPTION	= $00
   485 = 0001			CN_SELECT_OPTION	= $01
   486 = 0002			CN_START_OPTION	= $02
   487 = 0003			CN_OPTION	= $03
   488 = 0004			CN_START_SELECT	= $04
   489 = 0005			CN_SELECT	= $05
   490 = 0006			CN_START	= $06
   491 = 0007			CN_NONE	= $07
   492 = 0000			BW40	= $00
   493 = 0001			CO40	= $01
   494 = 0002			BW80	= $02
   495 = 0003			CO80	= $03
   496 = 0007			MONO	= $07
   497 = 0001			C40	= $01
   498 = 0003			C80	= $03
   499 = 0000			BLACK	= $00
   500 = 0001			BLUE	= $01
   501 = 0002			GREEN	= $02
   502 = 0003			CYAN	= $03
   503 = 0004			RED	= $04
   504 = 0005			MAGENTA	= $05
   505 = 0006			BROWN	= $06
   506 = 0007			LIGHTGRAY	= $07
   507 = 0008			DARKGRAY	= $08
   508 = 0009			LIGHTBLUE	= $09
   509 = 000A			LIGHTGREEN	= $0A
   510 = 000B			LIGHTCYAN	= $0B
   511 = 000C			LIGHTRED	= $0C
   512 = 000D			LIGHTMAGENTA	= $0D
   513 = 000E			YELLOW	= $0E
   514 = 000F			WHITE	= $0F
   515 = 0080			BLINK	= $80
   516
   517 				.endl							; UNIT CRT
   518
   519 				; ------------------------------------------------------------
   520
   521 2236			.local	RMT						; UNIT
   522
   523 				; ------------------------------------------------------------
   524 				; ------------------------------------------------------------
   525 2236			@UnitInit
   526
   527 				; ---------------------  ASM Block 064  ---------------------
   528
   529
   530 2236 A9 00			lda #0
   531 2238 AE 14 D0			ldx SYSTEM.TVSystem
   532 223B E0 0F			cpx #15
   533 223D D0 02			sne
   534 223F A9 04			lda #4
   535
   536 2241 8D 05 28			sta ntsc
   537
   538
   539 2244 60				rts
   540
   541 				; ------------------------------------------------------------
   542
   543 = 2805			NTSC	= DATAORIGIN+$000F
   544
   545 				.endl							; UNIT RMT
   546
   547 				; ------------------------------------------------------------
   548
   549 2245			.local	GR10PP						; UNIT
   550
   551 2245			.local	G10DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   552
   553 				; ---------------------  ASM Block 065  ---------------------
   554
   555
   556 2245			dli 
   557 2245 48			    pha 
   558 2246 8D 0A D4		    sta WSYNC  ;($d40a) 
   559 2249 A9 0D		    lda #13 
   560 = 224A			.def :VS_Upper = *-1
   561 224B 8D 05 D4		    sta VSCROL ;($d405) 
   562 224E A9 03		    lda #3
   563 = 224F			.def :VS_Lower = *-1
   564 2250 8D 05 D4		    sta VSCROL ;($d405) 
   565 2253 68			    pla 
   566
   567 2254 40				rti						; ret
   568 				.endl
   569
   570 2255			.local	SETVS						; PROCEDURE | ASSEMBLER
   571
   572 				; ------------------------------------------------------------
   573
   574 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   575 				; as Pointer
   576 2255 B5 9A 8D 1A 28		mva :STACKORIGIN,x LOWER
   577 225A CA				dex
   578
   579 				; ------------------------------------------------------------
   580
   581 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   582 				; as Pointer
   583 225B B5 9A 8D 19 28		mva :STACKORIGIN,x UPPER
   584 2260 CA				dex
   585
   586 				; ---------------------  ASM Block 066  ---------------------
   587
   588
   589 2261 AD 19 28		    lda upper
   590 2264 8D 4A 22		    sta VS_Upper
   591 2267 AD 1A 28		    lda lower
   592 226A 8D 4F 22		    sta VS_Lower
   593
   594
   595 				; ------------------------------------------------------------
   596
   597 = 2819			UPPER	= DATAORIGIN+$0023
   598 = 281A			LOWER	= DATAORIGIN+$0024
   599
   600 = 2819			@VarData	= UPPER
   601 = 0002			@VarDataSize	= 2
   602
   603 226D			@exit
   604 					.ifdef @new
   605 					lda <@VarData
   606 					sta :ztmp
   607 					lda >@VarData
   608 					ldy #@VarDataSize-1
   609 					jmp @FreeMem
   610 					eif
   611 226D 60				rts						; ret
   612 				.endl
   613
   614 226E			.local	SETPIXELHEIGHT					; PROCEDURE
   615
   616 				; ------------------------------------------------------------
   617
   618 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   619 				; as Pointer
   620 226E B5 9A 8D 1B 28		mva :STACKORIGIN,x LINES
   621 2273 CA				dex
   622
   623 				; optimize OK (GR10PP), line = 83
   624
   625 2274 AD 1B 28			lda LINES
   626 2277 C9 02			cmp #$02
   627 2279 90 1A			jcc l_0095
   628 227B C9 11			cmp #$11
   629 227D B0 16			jcs l_0095
   630
   631 				; optimize FAIL ('SYSTEM.PAUSE_0060', GR10PP), line = 84
   632 227F 20 EF 21			jsr SYSTEM.PAUSE_0060
   633
   634 				; optimize FAIL ('SETVS', GR10PP), line = 85
   635 2282 E8				inx
   636 2283 A9 11			lda #$11
   637 2285 38 ED 1B 28			sub LINES
   638 2289 95 9A			sta :STACKORIGIN,x
   639 228B E8				inx
   640 228C AC 1B 28			ldy LINES
   641 228F 88				dey
   642 2290 94 9A			sty :STACKORIGIN,x
   643 2292 20 55 22			jsr SETVS
   644 2295			l_0095
   645
   646 				; ------------------------------------------------------------
   647
   648 = 281B			LINES	= DATAORIGIN+$0025
   649
   650 = 281B			@VarData	= LINES
   651 = 0001			@VarDataSize	= 1
   652
   653 2295			@exit
   654 					.ifdef @new
   655 					lda <@VarData
   656 					sta :ztmp
   657 					lda >@VarData
   658 					ldy #@VarDataSize-1
   659 					jmp @FreeMem
   660 					eif
   661 2295 60				rts						; ret
   662 				.endl
   663
   664 2296			.local	DLPOKE						; PROCEDURE
   665
   666 				; ------------------------------------------------------------
   667
   668 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   669 				; as Pointer
   670 2296 B5 9A 8D 1C 28		mva :STACKORIGIN,x B
   671 229B CA				dex
   672
   673 				; optimize OK (GR10PP), line = 91
   674
   675 229C AD 3B 24			lda DLIST
   676 229F 18 6D 17 28			add DLPTR
   677 22A3 A8				tay
   678 22A4 AD 3C 24			lda DLIST+1
   679 22A7 6D 18 28			adc DLPTR+1
   680 22AA 85 91			sta :bp+1
   681 22AC AD 1C 28			lda B
   682 22AF 91 90			sta (:bp),y
   683
   684 				; optimize FAIL (0, GR10PP), line = 92
   685 22B1 EE 17 28			inc DLPTR
   686 22B4 D0 03			sne
   687 22B6 EE 18 28			inc DLPTR+1
   688
   689 				; ------------------------------------------------------------
   690
   691 = 281C			B	= DATAORIGIN+$0026
   692
   693 = 281C			@VarData	= B
   694 = 0001			@VarDataSize	= 1
   695
   696 22B9			@exit
   697 					.ifdef @new
   698 					lda <@VarData
   699 					sta :ztmp
   700 					lda >@VarData
   701 					ldy #@VarDataSize-1
   702 					jmp @FreeMem
   703 					eif
   704 22B9 60				rts						; ret
   705 				.endl
   706
   707 22BA			.local	DLPOKEW						; PROCEDURE
   708
   709 				; ------------------------------------------------------------
   710
   711 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   712 				; as Pointer
   713 22BA B5 9A 8D 1D 28		mva :STACKORIGIN,x W
   714 22BF B5 AA 8D 1E 28		mva :STACKORIGIN+STACKWIDTH,x W+1
   715 22C4 CA				dex
   716
   717 				; optimize OK (GR10PP), line = 97
   718
   719 22C5 AD 3B 24			lda DLIST
   720 22C8 18 6D 17 28			add DLPTR
   721 22CC A8				tay
   722 22CD AD 3C 24			lda DLIST+1
   723 22D0 6D 18 28			adc DLPTR+1
   724 22D3 85 91			sta :bp+1
   725 22D5 AD 1D 28			lda W
   726 22D8 91 90			sta (:bp),y
   727
   728 				; optimize FAIL (0, GR10PP), line = 98
   729 22DA EE 17 28			inc DLPTR
   730 22DD D0 03			sne
   731 22DF EE 18 28			inc DLPTR+1
   732
   733 				; optimize OK (GR10PP), line = 99
   734
   735 22E2 AD 1E 28			lda W+1
   736 22E5 85 A4			sta :STACKORIGIN+10
   737 22E7 AD 3B 24			lda DLIST
   738 22EA 18 6D 17 28			add DLPTR
   739 22EE A8				tay
   740 22EF AD 3C 24			lda DLIST+1
   741 22F2 6D 18 28			adc DLPTR+1
   742 22F5 85 91			sta :bp+1
   743 22F7 A5 A4			lda :STACKORIGIN+10
   744 22F9 91 90			sta (:bp),y
   745
   746 				; optimize FAIL (0, GR10PP), line = 100
   747 22FB EE 17 28			inc DLPTR
   748 22FE D0 03			sne
   749 2300 EE 18 28			inc DLPTR+1
   750
   751 				; ------------------------------------------------------------
   752
   753 = 281D			W	= DATAORIGIN+$0027
   754
   755 = 281D			@VarData	= W
   756 = 0002			@VarDataSize	= 2
   757
   758 2303			@exit
   759 					.ifdef @new
   760 					lda <@VarData
   761 					sta :ztmp
   762 					lda >@VarData
   763 					ldy #@VarDataSize-1
   764 					jmp @FreeMem
   765 					eif
   766 2303 60				rts						; ret
   767 				.endl
   768
   769 2304			.local	BUILDDISPLAYLIST				; PROCEDURE
   770
   771 				; ------------------------------------------------------------
   772
   773 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   774 				; as Pointer
   775 2304 B5 9A 8D 24 28		mva :STACKORIGIN,x BLANKS
   776 2309 CA				dex
   777
   778 				; ------------------------------------------------------------
   779
   780 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   781 				; as Pointer
   782 230A B5 9A 8D 23 28		mva :STACKORIGIN,x LINES
   783 230F CA				dex
   784
   785 				; ------------------------------------------------------------
   786
   787 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   788 				; as Pointer
   789 2310 B5 9A 8D 21 28		mva :STACKORIGIN,x VRAMADDRESS
   790 2315 B5 AA 8D 22 28		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   791 231A CA				dex
   792
   793 				; ------------------------------------------------------------
   794
   795 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   796 				; as Pointer
   797 231B B5 9A 8D 1F 28		mva :STACKORIGIN,x DLISTADDRESS
   798 2320 B5 AA 8D 20 28		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   799 2325 CA				dex
   800
   801 				; optimize OK (GR10PP), line = 105
   802
   803 2326 AD 1F 28 8D 3B 24		mva DLISTADDRESS DLIST
   804 232C AD 20 28 8D 3C 24		mva DLISTADDRESS+1 DLIST+1
   805
   806 				; optimize OK (GR10PP), line = 106
   807
   808 2332 A9 00 8D 17 28		mva #$00 DLPTR
   809 2337 8D 18 28			sta DLPTR+1
   810
   811 				; --- WhileProlog
   812 233A 4C 5A 23			jmp l_00F3
   813 233D			l_00F4
   814
   815 				; optimize OK (GR10PP), line = 108
   816
   817 233D AD 24 28			lda BLANKS
   818 2340 C9 01			cmp #$01
   819 2342 D0 0B			jne l_0106
   820
   821 				; optimize FAIL ('DLPOKE', GR10PP), line = 108
   822 2344 E8				inx
   823 2345 A9 F0 95 9A			mva #$F0 :STACKORIGIN,x
   824 2349 20 96 22			jsr DLPOKE
   825 234C 4C 57 23			jmp l_0112
   826 234F			l_0106
   827
   828 				; optimize FAIL ('DLPOKE', GR10PP), line = 109
   829 234F E8				inx
   830 2350 A9 70 95 9A			mva #$70 :STACKORIGIN,x
   831 2354 20 96 22			jsr DLPOKE
   832 2357			l_0112
   833
   834 				; optimize FAIL (0, GR10PP), line = 110
   835 2357 CE 24 28			dec BLANKS
   836 235A			l_00F3
   837
   838 				; optimize OK (GR10PP), line = 107
   839
   840 235A AD 24 28			lda BLANKS
   841 235D D0 DE			jne l_00F4
   842
   843 				; optimize FAIL ('DLPOKE', GR10PP), line = 112
   844 235F E8				inx
   845 2360 A9 6F 95 9A			mva #$6F :STACKORIGIN,x
   846 2364 20 96 22			jsr DLPOKE
   847
   848 				; optimize FAIL ('DLPOKEW', GR10PP), line = 113
   849 2367 E8				inx
   850 2368 AD 21 28 95 9A		mva VRAMADDRESS :STACKORIGIN,x
   851 236D AD 22 28 95 AA		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   852 2372 20 BA 22			jsr DLPOKEW
   853
   854 				; optimize FAIL ('DLPOKE', GR10PP), line = 114
   855 2375 E8				inx
   856 2376 A9 8F 95 9A			mva #$8F :STACKORIGIN,x
   857 237A 20 96 22			jsr DLPOKE
   858
   859 				; optimize FAIL (0, GR10PP), line = 115
   860 237D CE 23 28			dec LINES
   861
   862 				; --- WhileProlog
   863 2380 4C 96 23			jmp l_0131
   864 2383			l_0132
   865
   866 				; optimize FAIL ('DLPOKE', GR10PP), line = 117
   867 2383 E8				inx
   868 2384 A9 2F 95 9A			mva #$2F :STACKORIGIN,x
   869 2388 20 96 22			jsr DLPOKE
   870
   871 				; optimize FAIL ('DLPOKE', GR10PP), line = 118
   872 238B E8				inx
   873 238C A9 8F 95 9A			mva #$8F :STACKORIGIN,x
   874 2390 20 96 22			jsr DLPOKE
   875
   876 				; optimize FAIL (0, GR10PP), line = 119
   877 2393 CE 23 28			dec LINES
   878 2396			l_0131
   879
   880 				; optimize OK (GR10PP), line = 116
   881
   882 2396 AD 23 28			lda LINES
   883 2399 D0 E8			jne l_0132
   884
   885 				; optimize FAIL ('DLPOKE', GR10PP), line = 121
   886 239B E8				inx
   887 239C A9 70 95 9A			mva #$70 :STACKORIGIN,x
   888 23A0 20 96 22			jsr DLPOKE
   889
   890 				; optimize FAIL ('DLPOKE', GR10PP), line = 122
   891 23A3 E8				inx
   892 23A4 A9 41 95 9A			mva #$41 :STACKORIGIN,x
   893 23A8 20 96 22			jsr DLPOKE
   894
   895 				; optimize FAIL ('DLPOKEW', GR10PP), line = 123
   896 23AB E8				inx
   897 23AC AD 1F 28 95 9A		mva DLISTADDRESS :STACKORIGIN,x
   898 23B1 AD 20 28 95 AA		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   899 23B6 20 BA 22			jsr DLPOKEW
   900
   901 				; ------------------------------------------------------------
   902
   903 = 281F			DLISTADDRESS	= DATAORIGIN+$0029
   904 = 2821			VRAMADDRESS	= DATAORIGIN+$002B
   905 = 2823			LINES	= DATAORIGIN+$002D
   906 = 2824			BLANKS	= DATAORIGIN+$002E
   907
   908 = 281F			@VarData	= DLISTADDRESS
   909 = 0006			@VarDataSize	= 6
   910
   911 23B9			@exit
   912 					.ifdef @new
   913 					lda <@VarData
   914 					sta :ztmp
   915 					lda >@VarData
   916 					ldy #@VarDataSize-1
   917 					jmp @FreeMem
   918 					eif
   919 23B9 60				rts						; ret
   920 				.endl
   921
   922 23BA			.local	GR10INIT					; PROCEDURE
   923
   924 				; ------------------------------------------------------------
   925
   926 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   927 				; as Pointer
   928 23BA B5 9A 8D 2B 28		mva :STACKORIGIN,x BLANKS
   929 23BF CA				dex
   930
   931 				; ------------------------------------------------------------
   932
   933 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   934 				; as Pointer
   935 23C0 B5 9A 8D 2A 28		mva :STACKORIGIN,x PIXELHEIGHT
   936 23C5 CA				dex
   937
   938 				; ------------------------------------------------------------
   939
   940 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   941 				; as Pointer
   942 23C6 B5 9A 8D 29 28		mva :STACKORIGIN,x LINES
   943 23CB CA				dex
   944
   945 				; ------------------------------------------------------------
   946
   947 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   948 				; as Pointer
   949 23CC B5 9A 8D 27 28		mva :STACKORIGIN,x VRAMADDRESS
   950 23D1 B5 AA 8D 28 28		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   951 23D6 CA				dex
   952
   953 				; ------------------------------------------------------------
   954
   955 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   956 				; as Pointer
   957 23D7 B5 9A 8D 25 28		mva :STACKORIGIN,x DLISTADDRESS
   958 23DC B5 AA 8D 26 28		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   959 23E1 CA				dex
   960
   961 				; optimize FAIL ('BUILDDISPLAYLIST', GR10PP), line = 128
   962 23E2 E8				inx
   963 23E3 AD 25 28 95 9A		mva DLISTADDRESS :STACKORIGIN,x
   964 23E8 AD 26 28 95 AA		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   965 23ED E8				inx
   966 23EE AD 27 28 95 9A		mva VRAMADDRESS :STACKORIGIN,x
   967 23F3 AD 28 28 95 AA		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   968 23F8 E8				inx
   969 23F9 AD 29 28 95 9A		mva LINES :STACKORIGIN,x
   970 23FE E8				inx
   971 23FF AD 2B 28 95 9A		mva BLANKS :STACKORIGIN,x
   972 2404 20 04 23			jsr BUILDDISPLAYLIST
   973
   974 				; optimize FAIL ('SETPIXELHEIGHT', GR10PP), line = 129
   975 2407 E8				inx
   976 2408 AD 2A 28 95 9A		mva PIXELHEIGHT :STACKORIGIN,x
   977 240D 20 6E 22			jsr SETPIXELHEIGHT
   978
   979 				; optimize OK (GR10PP), line = 130
   980
   981 2410 AD 25 28 8D 30 02		mva DLISTADDRESS ATARI.SDLSTL
   982 2416 AD 26 28 8D 31 02		mva DLISTADDRESS+1 ATARI.SDLSTL+1
   983
   984 				; optimize OK (GR10PP), line = 131
   985
   986 241C AD 27 28 85 58		mva VRAMADDRESS ATARI.SAVMSC
   987 2421 AD 28 28 85 59		mva VRAMADDRESS+1 ATARI.SAVMSC+1
   988
   989 				; optimize OK (GR10PP), line = 132
   990
   991 2426 A9 45 8D 00 02		mva <G10DLI VDSLST
   992 242B A9 22 8D 01 02		mva >G10DLI VDSLST+1
   993
   994 				; optimize OK (GR10PP), line = 133
   995
   996 2430 A9 C0 8D 0E D4		mva #$C0 ATARI.NMIEN
   997
   998 				; optimize OK (GR10PP), line = 134
   999
  1000 2435 A9 81 8D 6F 02		mva #$81 ATARI.GPRIOR
  1001
  1002 				; ------------------------------------------------------------
  1003
  1004 = 2825			DLISTADDRESS	= DATAORIGIN+$002F
  1005 = 2827			VRAMADDRESS	= DATAORIGIN+$0031
  1006 = 2829			LINES	= DATAORIGIN+$0033
  1007 = 282A			PIXELHEIGHT	= DATAORIGIN+$0034
  1008 = 282B			BLANKS	= DATAORIGIN+$0035
  1009
  1010 = 2825			@VarData	= DLISTADDRESS
  1011 = 0007			@VarDataSize	= 7
  1012
  1013 243A			@exit
  1014 					.ifdef @new
  1015 					lda <@VarData
  1016 					sta :ztmp
  1017 					lda >@VarData
  1018 					ldy #@VarDataSize-1
  1019 					jmp @FreeMem
  1020 					eif
  1021 243A 60				rts						; ret
  1022 				.endl
  1023
  1024 				; ------------------------------------------------------------
  1025
  1026 = 0070			DL_BLANK8	= $70
  1027 = 0080			DL_DLI	= $80
  1028 = 0040			DL_LMS	= $40
  1029 = 0020			DL_VSCROLL	= $20
  1030 = 000F			DL_MODE_320X192G2	= $0F
  1031 = 0041			DL_JVB	= $41
  1032 = 2816			adr.DLIST	= DATAORIGIN+$0020
  1033 243B			.var DLIST	= adr.DLIST .word
  1034 = 2817			DLPTR	= DATAORIGIN+$0021
  1035
  1036 = 243B 16 28		DLIST
  1036 				.endl							; UNIT GR10PP
  1037
  1038 				; ------------------------------------------------------------
  1039
  1040 243D			.local	TYPES						; UNIT
  1041
  1042 				; ------------------------------------------------------------
  1043
  1044 				.endl							; UNIT TYPES
  1045
  1046 				; ------------------------------------------------------------
  1047
  1048 243D			.local	GRAPH						; UNIT
  1049
  1050 243D			.local	INITGRAPH_0194					; PROCEDURE | OVERLOAD
  1051
  1052 				; ------------------------------------------------------------
  1053
  1054 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1055 				; as Pointer
  1056 243D B5 9A 8D 49 28		mva :STACKORIGIN,x MODE
  1057 2442 CA				dex
  1058
  1059 				; ---------------------  ASM Block 067  ---------------------
  1060
  1061
  1062 2443 8A 48			txa:pha
  1063
  1064 2445 AD 49 28			lda mode
  1065 2448 8D FC 27			sta MAIN.SYSTEM.GraphMode
  1066 244B 29 0F			and #$0f
  1067 244D A8				tay
  1068
  1069 244E A2 60			ldx #$60		; 6*16
  1070 2450 AD 49 28			lda mode		; %00010000 with text window
  1071 2453 29 10			and #$10
  1072 2455 49 10			eor #$10
  1073 2457 09 02			ora #2			; read
  1074
  1075 					.nowarn @GRAPHICS
  1075 2459 20 31 20		 JSR @GRAPHICS
  1076
  1077 245C 8C 34 28			sty GraphResult
  1078
  1079
  1080 					.ifdef MAIN.@DEFINES.ROMOFF
  1081 					inc portb
  1082 					.endif
  1083
  1084 = EE6D			tlshc	equ $ee6d
  1085
  1086 245F A6 57			ldx dindex
  1087 2461 BC 6D EE			ldy tlshc,x
  1088 2464 A9 05			lda #5
  1089 2466 0A			shift	asl @
  1090 2467 88				dey
  1091 2468 D0 FC			bne shift
  1092
  1093 246A 8D 48 28			sta SCANLINE_WIDTH
  1094
  1095 				; Fox/TQA
  1096
  1097 = 0057			dindex	equ $57
  1098 = EE7D			tmccn	equ $ee7d
  1099 = EE8D			tmrcn	equ $ee8d
  1100
  1101 246D A6 57			ldx dindex
  1102 246F BD 7D EE			lda tmccn,x
  1103 2472 BC 8D EE			ldy tmrcn,x
  1104 2475 A2 00			ldx #0
  1105 2477 C9 40			cmp #<320
  1106 2479 D0 01 E8			sne:inx
  1107
  1108 				; X:A = horizontal resolution
  1109 				; Y = vertical resolution
  1110
  1111 247C 20 6B 20			@SCREENSIZE
  1112
  1113 					.ifdef MAIN.@DEFINES.ROMOFF
  1114 					dec portb
  1115 					.endif
  1116
  1117 247F 68 AA			pla:tax
  1118
  1119
  1120 				; optimize OK (GRAPH), line = 132
  1121
  1122 2481 A5 58 8D 46 28		mva ATARI.SAVMSC VIDEORAM
  1123 2486 A5 59 8D 47 28		mva ATARI.SAVMSC+1 VIDEORAM+1
  1124
  1125 				; ------------------------------------------------------------
  1126
  1127 = 2849			MODE	= DATAORIGIN+$0053
  1128
  1129 = 2849			@VarData	= MODE
  1130 = 0001			@VarDataSize	= 1
  1131
  1132 248B			@exit
  1133 					.ifdef @new
  1134 					lda <@VarData
  1135 					sta :ztmp
  1136 					lda >@VarData
  1137 					ldy #@VarDataSize-1
  1138 					jmp @FreeMem
  1139 					eif
  1140 248B 60				rts						; ret
  1141 				.endl
  1142
  1143 248C			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
  1144
  1145 				; ------------------------------------------------------------
  1146
  1147 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1148 				; as Pointer
  1149 248C B5 9A 8D 4A 28		mva :STACKORIGIN,x COLOR
  1150 2491 CA				dex
  1151
  1152 				; ---------------------  ASM Block 069  ---------------------
  1153
  1154 2492 AD 4A 28 8D 29 20		mva color @COMMAND.colscr
  1155 2498 8D 35 28			sta GetColor
  1156
  1157
  1158 				; ------------------------------------------------------------
  1159
  1160 = 284A			COLOR	= DATAORIGIN+$0054
  1161
  1162 = 284A			@VarData	= COLOR
  1163 = 0001			@VarDataSize	= 1
  1164
  1165 249B			@exit
  1166 					.ifdef @new
  1167 					lda <@VarData
  1168 					sta :ztmp
  1169 					lda >@VarData
  1170 					ldy #@VarDataSize-1
  1171 					jmp @FreeMem
  1172 					eif
  1173 249B 60				rts						; ret
  1174 				.endl
  1175
  1176 249C			.local	MOVETO						; PROCEDURE | ASSEMBLER
  1177
  1178 				; ------------------------------------------------------------
  1179
  1180 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1181 				; as Pointer
  1182 249C B5 9A 8D 4D 28		mva :STACKORIGIN,x Y
  1183 24A1 B5 AA 8D 4E 28		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1184 24A6 CA				dex
  1185
  1186 				; ------------------------------------------------------------
  1187
  1188 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1189 				; as Pointer
  1190 24A7 B5 9A 8D 4B 28		mva :STACKORIGIN,x X
  1191 24AC B5 AA 8D 4C 28		mva :STACKORIGIN+STACKWIDTH,x X+1
  1192 24B1 CA				dex
  1193
  1194 				; ---------------------  ASM Block 073  ---------------------
  1195
  1196 24B2 AD 4E 28			lda y+1
  1197 24B5 10 08			bpl _0
  1198
  1199 24B7 A9 00			lda #0
  1200 24B9 8D 4D 28			sta y
  1201 24BC 8D 4E 28			sta y+1
  1202 24BF			_0
  1203 24BF AD 4C 28			lda x+1
  1204 24C2 10 08			bpl _1
  1205
  1206 24C4 A9 00			lda #0
  1207 24C6 8D 4B 28			sta x
  1208 24C9 8D 4C 28			sta x+1
  1209 24CC			_1
  1210 24CC AD 4E 28 CD F9 27 + 	cpw y main.system.ScreenHeight
  1211 24DA 90 11			bcc _2
  1212
  1213 24DC 38 AD F8 27 E9 01 + 	sbw main.system.ScreenHeight #1 y
  1214 24ED			_2
  1215 24ED AD 4C 28 CD F7 27 + 	cpw x main.system.ScreenWidth
  1216 24FB 90 11			bcc _3
  1217
  1218 24FD 38 AD F6 27 E9 01 + 	sbw main.system.ScreenWidth #1 x
  1219 250E			_3
  1220 250E AD 4B 28 8D 42 28 + 	mwa x CurrentX
  1221 251A AD 4D 28 8D 44 28 + 	mwa y CurrentY
  1222
  1223
  1224 				; ------------------------------------------------------------
  1225
  1226 = 284B			X	= DATAORIGIN+$0055
  1227 = 284D			Y	= DATAORIGIN+$0057
  1228
  1229 = 284B			@VarData	= X
  1230 = 0004			@VarDataSize	= 4
  1231
  1232 2526			@exit
  1233 					.ifdef @new
  1234 					lda <@VarData
  1235 					sta :ztmp
  1236 					lda >@VarData
  1237 					ldy #@VarDataSize-1
  1238 					jmp @FreeMem
  1239 					eif
  1240 2526 60				rts						; ret
  1241 				.endl
  1242
  1243 2527			.local	LINETO						; PROCEDURE | ASSEMBLER
  1244
  1245 				; ------------------------------------------------------------
  1246
  1247 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1248 				; as Pointer
  1249 2527 B5 9A 8D 51 28		mva :STACKORIGIN,x Y
  1250 252C B5 AA 8D 52 28		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1251 2531 CA				dex
  1252
  1253 				; ------------------------------------------------------------
  1254
  1255 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1256 				; as Pointer
  1257 2532 B5 9A 8D 4F 28		mva :STACKORIGIN,x X
  1258 2537 B5 AA 8D 50 28		mva :STACKORIGIN+STACKWIDTH,x X+1
  1259 253C CA				dex
  1260
  1261 				; ---------------------  ASM Block 074  ---------------------
  1262
  1263 253D AD 52 28			lda y+1
  1264 2540 10 08			bpl _0
  1265
  1266 2542 A9 00			lda #0
  1267 2544 8D 51 28			sta y
  1268 2547 8D 52 28			sta y+1
  1269 254A			_0
  1270 254A AD 50 28			lda x+1
  1271 254D 10 08			bpl _1
  1272
  1273 254F A9 00			lda #0
  1274 2551 8D 4F 28			sta x
  1275 2554 8D 50 28			sta x+1
  1276 2557			_1
  1277 2557 AD 52 28 CD F9 27 + 	cpw y main.system.ScreenHeight
  1278 2565 90 11			bcc _2
  1279
  1280 2567 38 AD F8 27 E9 01 + 	sbw main.system.ScreenHeight #1 y
  1281 2578			_2
  1282 2578 AD 50 28 CD F7 27 + 	cpw x main.system.ScreenWidth
  1283 2586 90 11			bcc _3
  1284
  1285 2588 38 AD F6 27 E9 01 + 	sbw main.system.ScreenWidth #1 x
  1286 2599			_3
  1287 2599 8A 48			txa:pha
  1288
  1289 259B AD 42 28 85 55 AD + 	mwa CurrentX colcrs
  1290 25A5 AD 44 28 85 54		mva CurrentY rowcrs
  1291
  1292 				;	lda #@IDput		; slower
  1293 				;	jsr @COMMAND
  1294
  1295 25AA AE 14 20			ldx @COMMAND.scrchn	; faster
  1296 25AD AD 29 20			lda @COMMAND.colscr
  1297
  1298 25B0				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 25B0 20 08 20				jsr @PUTCHAR.MAIN
  1299
  1300 25B3 AD 4F 28			lda x
  1301 25B6 85 55			sta colcrs
  1302 25B8 8D 42 28			sta CurrentX
  1303 25BB AD 50 28			lda x+1
  1304 25BE 85 56			sta colcrs+1
  1305 25C0 8D 43 28			sta CurrentX+1
  1306
  1307 25C3 AD 51 28 85 54		mva y rowcrs
  1308 25C8 8D 44 28			sta CurrentY
  1309 25CB AD 52 28			lda y+1
  1310 25CE 8D 45 28			sta CurrentY+1
  1311
  1312 25D1 A9 11			lda #@IDdraw
  1313
  1314 25D3 20 13 20			jsr @COMMAND
  1315
  1316 25D6 68 AA			pla:tax
  1317
  1318
  1319 				; ------------------------------------------------------------
  1320
  1321 = 284F			X	= DATAORIGIN+$0059
  1322 = 2851			Y	= DATAORIGIN+$005B
  1323
  1324 = 284F			@VarData	= X
  1325 = 0004			@VarDataSize	= 4
  1326
  1327 25D8			@exit
  1328 					.ifdef @new
  1329 					lda <@VarData
  1330 					sta :ztmp
  1331 					lda >@VarData
  1332 					ldy #@VarDataSize-1
  1333 					jmp @FreeMem
  1334 					eif
  1335 25D8 60				rts						; ret
  1336 				.endl
  1337
  1338 25D9			.local	LINE						; PROCEDURE
  1339
  1340 				; ------------------------------------------------------------
  1341
  1342 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1343 				; as Pointer
  1344 25D9 B5 9A 8D 59 28		mva :STACKORIGIN,x Y2
  1345 25DE B5 AA 8D 5A 28		mva :STACKORIGIN+STACKWIDTH,x Y2+1
  1346 25E3 CA				dex
  1347
  1348 				; ------------------------------------------------------------
  1349
  1350 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1351 				; as Pointer
  1352 25E4 B5 9A 8D 57 28		mva :STACKORIGIN,x X2
  1353 25E9 B5 AA 8D 58 28		mva :STACKORIGIN+STACKWIDTH,x X2+1
  1354 25EE CA				dex
  1355
  1356 				; ------------------------------------------------------------
  1357
  1358 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1359 				; as Pointer
  1360 25EF B5 9A 8D 55 28		mva :STACKORIGIN,x Y1
  1361 25F4 B5 AA 8D 56 28		mva :STACKORIGIN+STACKWIDTH,x Y1+1
  1362 25F9 CA				dex
  1363
  1364 				; ------------------------------------------------------------
  1365
  1366 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1367 				; as Pointer
  1368 25FA B5 9A 8D 53 28		mva :STACKORIGIN,x X1
  1369 25FF B5 AA 8D 54 28		mva :STACKORIGIN+STACKWIDTH,x X1+1
  1370 2604 CA				dex
  1371
  1372 				; optimize OK (GRAPH), line = 332
  1373
  1374 2605 AD 42 28 8D 5B 28		mva CURRENTX X
  1375 260B AD 43 28 8D 5C 28		mva CURRENTX+1 X+1
  1376
  1377 				; optimize OK (GRAPH), line = 333
  1378
  1379 2611 AD 44 28 8D 5D 28		mva CURRENTY Y
  1380 2617 AD 45 28 8D 5E 28		mva CURRENTY+1 Y+1
  1381
  1382 				; optimize FAIL ('MOVETO', GRAPH), line = 335
  1383 261D E8				inx
  1384 261E AD 53 28 95 9A		mva X1 :STACKORIGIN,x
  1385 2623 AD 54 28 95 AA		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  1386 2628 E8				inx
  1387 2629 AD 55 28 95 9A		mva Y1 :STACKORIGIN,x
  1388 262E AD 56 28 95 AA		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  1389 2633 20 9C 24			jsr MOVETO
  1390
  1391 				; optimize FAIL ('LINETO', GRAPH), line = 336
  1392 2636 E8				inx
  1393 2637 AD 57 28 95 9A		mva X2 :STACKORIGIN,x
  1394 263C AD 58 28 95 AA		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  1395 2641 E8				inx
  1396 2642 AD 59 28 95 9A		mva Y2 :STACKORIGIN,x
  1397 2647 AD 5A 28 95 AA		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  1398 264C 20 27 25			jsr LINETO
  1399
  1400 				; optimize OK (GRAPH), line = 338
  1401
  1402 264F AD 5B 28 8D 42 28		mva X CURRENTX
  1403 2655 AD 5C 28 8D 43 28		mva X+1 CURRENTX+1
  1404
  1405 				; optimize OK (GRAPH), line = 339
  1406
  1407 265B AD 5D 28 8D 44 28		mva Y CURRENTY
  1408 2661 AD 5E 28 8D 45 28		mva Y+1 CURRENTY+1
  1409
  1410 				; ------------------------------------------------------------
  1411
  1412 = 2853			X1	= DATAORIGIN+$005D
  1413 = 2855			Y1	= DATAORIGIN+$005F
  1414 = 2857			X2	= DATAORIGIN+$0061
  1415 = 2859			Y2	= DATAORIGIN+$0063
  1416 = 285B			X	= DATAORIGIN+$0065
  1417 = 285D			Y	= DATAORIGIN+$0067
  1418
  1419 = 2853			@VarData	= X1
  1420 = 000C			@VarDataSize	= 12
  1421
  1422 2667			@exit
  1423 					.ifdef @new
  1424 					lda <@VarData
  1425 					sta :ztmp
  1426 					lda >@VarData
  1427 					ldy #@VarDataSize-1
  1428 					jmp @FreeMem
  1429 					eif
  1430 2667 60				rts						; ret
  1431 				.endl
  1432
  1433 				; ------------------------------------------------------------
  1434
  1435 = 0080			CURRENTDRIVER	= $80
  1436 = 0000			DETECT	= $00
  1437 = 0001			CGA	= $01
  1438 = 0002			MCGA	= $02
  1439 = 0003			EGA	= $03
  1440 = 0004			EGA64	= $04
  1441 = 0005			EGAMONO	= $05
  1442 = 0006			LOWRES	= $06
  1443 = 0007			HERCMONO	= $07
  1444 = 0009			VGA	= $09
  1445 = 000A			VESA	= $0A
  1446 = 000B			D1BIT	= $0B
  1447 = 000C			D2BIT	= $0C
  1448 = 000D			D4BIT	= $0D
  1449 = 000E			D6BIT	= $0E
  1450 = 000F			D8BIT	= $0F
  1451 = 0010			D12BIT	= $10
  1452 = 0018			M640X400	= $18
  1453 = 0018			M640X480	= $18
  1454 = 0001			GROK	= $01
  1455 = 00FF			GRNOINITGRAPH	= $FF
  1456 = 00FE			GRNOTDETECTED	= $FE
  1457 = 00FD			GRFILENOTFOUND	= $FD
  1458 = 00FC			GRINVALIDDRIVER	= $FC
  1459 = 00FB			GRNOLOADMEM	= $FB
  1460 = 00FA			GRNOSCANMEM	= $FA
  1461 = 00F9			GRNOFLOODMEM	= $F9
  1462 = 00F8			GRFONTNOTFOUND	= $F8
  1463 = 00F7			GRNOFONTMEM	= $F7
  1464 = 00F6			GRINVALIDMODE	= $F6
  1465 = 00F5			GRERROR	= $F5
  1466 = 00F4			GRIOERROR	= $F4
  1467 = 00F3			GRINVALIDFONT	= $F3
  1468 = 00F2			GRINVALIDFONTNUM	= $F2
  1469 = 00EE			GRINVALIDVERSION	= $EE
  1470 = 0000			CGAC0	= $00
  1471 = 0001			CGAC1	= $01
  1472 = 0002			CGAC2	= $02
  1473 = 0003			CGAC3	= $03
  1474 = 0004			CGAHI	= $04
  1475 = 0000			MCGAC0	= $00
  1476 = 0001			MCGAC1	= $01
  1477 = 0002			MCGAC2	= $02
  1478 = 0003			MCGAC3	= $03
  1479 = 0004			MCGAMED	= $04
  1480 = 0005			MCGAHI	= $05
  1481 = 0000			EGALO	= $00
  1482 = 0001			EGAHI	= $01
  1483 = 0000			EGA64LO	= $00
  1484 = 0001			EGA64HI	= $01
  1485 = 0003			EGAMONOHI	= $03
  1486 = 000A			VGALO	= $0A
  1487 = 001F			VGAMED	= $1F
  1488 = 0018			VGAHI	= $18
  1489 = 282C			WIN_LEFT	= DATAORIGIN+$0036
  1490 = 282E			WIN_RIGHT	= DATAORIGIN+$0038
  1491 = 2830			WIN_TOP	= DATAORIGIN+$003A
  1492 = 2832			WIN_BOTTOM	= DATAORIGIN+$003C
  1493 = 2834			GRAPHRESULT	= DATAORIGIN+$003E
  1494 = 2835			GETCOLOR	= DATAORIGIN+$003F
  1495 = 2836			adr.LASTARCCOORDS	= DATAORIGIN+$0040
  1496 2668			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1497 = 2836			LASTARCCOORDS.X	= DATAORIGIN+$0040
  1498 = 2838			LASTARCCOORDS.Y	= DATAORIGIN+$0042
  1499 = 283A			LASTARCCOORDS.XSTART	= DATAORIGIN+$0044
  1500 = 283C			LASTARCCOORDS.YSTART	= DATAORIGIN+$0046
  1501 = 283E			LASTARCCOORDS.XEND	= DATAORIGIN+$0048
  1502 = 2840			LASTARCCOORDS.YEND	= DATAORIGIN+$004A
  1503 = 2842			CURRENTX	= DATAORIGIN+$004C
  1504 = 2844			CURRENTY	= DATAORIGIN+$004E
  1505 = 2846			VIDEORAM	= DATAORIGIN+$0050
  1506 = 2848			SCANLINE_WIDTH	= DATAORIGIN+$0052
  1507
  1508 = 2668 36 28		LASTARCCOORDS
  1508 				.endl							; UNIT GRAPH
  1509
  1510 266A			.local	PUTTILE						; PROCEDURE
  1511
  1512 				; ------------------------------------------------------------
  1513
  1514 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1515 				; as Pointer
  1516 266A B5 9A 8D 63 28		mva :STACKORIGIN,x TILE
  1517 266F B5 AA 8D 64 28		mva :STACKORIGIN+STACKWIDTH,x TILE+1
  1518 2674 CA				dex
  1519
  1520 				; ------------------------------------------------------------
  1521
  1522 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1523 				; as Pointer
  1524 2675 B5 9A 8D 62 28		mva :STACKORIGIN,x H
  1525 267A CA				dex
  1526
  1527 				; ------------------------------------------------------------
  1528
  1529 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1530 				; as Pointer
  1531 267B B5 9A 8D 61 28		mva :STACKORIGIN,x W
  1532 2680 CA				dex
  1533
  1534 				; ------------------------------------------------------------
  1535
  1536 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1537 				; as Pointer
  1538 2681 B5 9A 8D 60 28		mva :STACKORIGIN,x Y
  1539 2686 CA				dex
  1540
  1541 				; ------------------------------------------------------------
  1542
  1543 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1544 				; as Pointer
  1545 2687 B5 9A 8D 5F 28		mva :STACKORIGIN,x X
  1546 268C CA				dex
  1547
  1548 				; optimize OK (nyan_2.pas), line = 15
  1549
  1550 268D AD 60 28			lda Y
  1551 2690 20 78 21			jsr @mul40
  1552 2693 A5 84			lda :eax
  1553 2695 18 6D 5F 28			add X
  1554 2699 8D 65 28			sta VOFFSET
  1555 269C A9 60			lda #$60
  1556 269E 65 85			adc :eax+1
  1557 26A0 8D 66 28			sta VOFFSET+1
  1558 				; --- For
  1559
  1560 				; optimize OK (nyan_2.pas), line = 16
  1561
  1562 26A3 A9 00 8D 67 28		mva #$00 B
  1563
  1564 				; optimize OK (nyan_2.pas), line = 16
  1565
  1566 26A8 AC 62 28			ldy H
  1567 26AB 88				dey
  1568 26AC 8C B3 26			sty :@FORTMP?025A_0
  1569 26AF			l_025D
  1570 				; --- ForToDoCondition
  1571
  1572 				; optimize OK (nyan_2.pas), line = 16
  1573
  1574 26AF AD 67 28			lda B
  1575 = 26B3			.def :@FORTMP?025A_0 = *+1
  1576 26B2 C9 00			cmp #$00
  1577 26B4 90 02			scc
  1578 26B6 D0 42			jne l_026B
  1579
  1580 				; optimize OK (nyan_2.pas), line = 17
  1581
  1582 26B8 AD 63 28			lda TILE
  1583 26BB 85 88			sta :edx
  1584 26BD AD 64 28			lda TILE+1
  1585 26C0 85 89			sta :edx+1
  1586 26C2 AD 65 28			lda VOFFSET
  1587 26C5 85 8C			sta :ecx
  1588 26C7 AD 66 28			lda VOFFSET+1
  1589 26CA 85 8D			sta :ecx+1
  1590 26CC AD 61 28			lda W
  1591 26CF 85 84			sta :eax
  1592 26D1 A9 00			lda #$00
  1593 26D3 85 85			sta :eax+1
  1594 26D5 20 EC 20			jsr @move
  1595
  1596 				; optimize OK (nyan_2.pas), line = 18
  1597
  1598 26D8 AD 63 28			lda TILE
  1599 26DB 18 6D 61 28			add W
  1600 26DF 8D 63 28			sta TILE
  1601 26E2 90 03			scc
  1602 26E4 EE 64 28			inc TILE+1
  1603
  1604 				; optimize OK (nyan_2.pas), line = 19
  1605
  1606 26E7 AD 65 28			lda VOFFSET
  1607 26EA 18 69 28			add #$28
  1608 26ED 8D 65 28			sta VOFFSET
  1609 26F0 90 03			scc
  1610 26F2 EE 66 28			inc VOFFSET+1
  1611
  1612 				; --- ForToDoEpilog
  1613 26F5 EE 67 28			inc B						; inc ptr byte [CounterAddress]
  1614 26F8 D0 B5			jne l_025D
  1615 26FA			l_026B
  1616
  1617 				; ------------------------------------------------------------
  1618
  1619 = 285F			X	= DATAORIGIN+$0069
  1620 = 2860			Y	= DATAORIGIN+$006A
  1621 = 2861			W	= DATAORIGIN+$006B
  1622 = 2862			H	= DATAORIGIN+$006C
  1623 = 2863			TILE	= DATAORIGIN+$006D
  1624 = 2865			VOFFSET	= DATAORIGIN+$006F
  1625 = 2867			B	= DATAORIGIN+$0071
  1626 = 0000			@FORTMP_025A	= $00
  1627
  1628 = 285F			@VarData	= X
  1629 = 0009			@VarDataSize	= 9
  1630
  1631 26FA			@exit
  1632 					.ifdef @new
  1633 					lda <@VarData
  1634 					sta :ztmp
  1635 					lda >@VarData
  1636 					ldy #@VarDataSize-1
  1637 					jmp @FreeMem
  1638 					eif
  1639 26FA 60				rts						; ret
  1640 				.endl
  1641 26FB			l_0007
  1642
  1643 				; optimize FAIL ('GRAPH.INITGRAPH_0194', nyan_2.pas), line = 26
  1644 26FB E8				inx
  1645 26FC A9 0A 95 9A			mva #$0A :STACKORIGIN,x
  1646 2700 20 3D 24			jsr GRAPH.INITGRAPH_0194
  1647
  1648 				; optimize FAIL ('GR10PP.GR10INIT', nyan_2.pas), line = 27
  1649 2703 E8				inx
  1650 2704 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1651 2708 A9 50 95 AA			mva #$50 :STACKORIGIN+STACKWIDTH,x
  1652 270C E8				inx
  1653 270D A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1654 2711 A9 60 95 AA			mva #$60 :STACKORIGIN+STACKWIDTH,x
  1655 2715 E8				inx
  1656 2716 A9 30 95 9A			mva #$30 :STACKORIGIN,x
  1657 271A E8				inx
  1658 271B A9 04 95 9A			mva #$04 :STACKORIGIN,x
  1659 271F E8				inx
  1660 2720 A9 02 95 9A			mva #$02 :STACKORIGIN,x
  1661 2724 20 BA 23			jsr GR10PP.GR10INIT
  1662
  1663 				; optimize FAIL ('GRAPH.SETCOLOR', nyan_2.pas), line = 31
  1664 2727 E8				inx
  1665 2728 A9 06 95 9A			mva #$06 :STACKORIGIN,x
  1666 272C 20 8C 24			jsr GRAPH.SETCOLOR
  1667
  1668 				; optimize FAIL ('GRAPH.LINE', nyan_2.pas), line = 32
  1669 272F E8				inx
  1670 2730 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1671 2734 95 AA			sta :STACKORIGIN+STACKWIDTH,x
  1672 2736 E8				inx
  1673 2737 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1674 273B 95 AA			sta :STACKORIGIN+STACKWIDTH,x
  1675 273D E8				inx
  1676 273E A9 4F 95 9A			mva #$4F :STACKORIGIN,x
  1677 2742 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1678 2746 E8				inx
  1679 2747 A9 77 95 9A			mva #$77 :STACKORIGIN,x
  1680 274B A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1681 274F 20 D9 25			jsr GRAPH.LINE
  1682
  1683 				; optimize OK (nyan_2.pas), line = 34
  1684
  1685 2752 A9 00 8D C0 02		mva #$00 ATARI.PCOLR0
  1686
  1687 				; optimize OK (nyan_2.pas), line = 35
  1688
  1689 2757 A9 24 8D C3 02		mva #$24 ATARI.PCOLR3
  1690
  1691 				; optimize OK (nyan_2.pas), line = 36
  1692
  1693 275C A9 18 8D C1 02		mva #$18 ATARI.PCOLR1
  1694
  1695 				; optimize OK (nyan_2.pas), line = 37
  1696
  1697 2761 A9 1C 8D C6 02		mva #$1C ATARI.COLOR2
  1698
  1699 				; optimize OK (nyan_2.pas), line = 38
  1700
  1701 2766 A9 BA 8D C2 02		mva #$BA ATARI.PCOLR2
  1702
  1703 				; optimize OK (nyan_2.pas), line = 39
  1704
  1705 276B A9 74 8D C5 02		mva #$74 ATARI.COLOR1
  1706
  1707 				; optimize OK (nyan_2.pas), line = 40
  1708
  1709 2770 A9 54 8D C4 02		mva #$54 ATARI.COLOR0
  1710
  1711 				; optimize OK (nyan_2.pas), line = 41
  1712
  1713 2775 A9 3C 8D C8 02		mva #$3C ATARI.COLOR4
  1714
  1715 				; optimize OK (nyan_2.pas), line = 42
  1716
  1717 277A A9 0A 8D C7 02		mva #$0A ATARI.COLOR3
  1718
  1719 				; --- RepeatUntilProlog
  1720 277F			l_02B1
  1721 				; --- For
  1722
  1723 				; optimize OK (nyan_2.pas), line = 45
  1724
  1725 277F A9 00 8D 69 28		mva #$00 FRAME
  1726
  1727 				; optimize OK (nyan_2.pas), line = 45
  1728
  1729 2784			l_02BA
  1730 				; --- ForToDoCondition
  1731
  1732 				; optimize OK (nyan_2.pas), line = 45
  1733
  1734 2784 AD 69 28			lda FRAME
  1735 2787 C9 05			cmp #$05
  1736 2789 B0 4F			jcs l_02C8
  1737
  1738 				; optimize FAIL ('SYSTEM.PAUSE_0061', nyan_2.pas), line = 46
  1739 278B E8				inx
  1740 278C A9 05 95 9A			mva #$05 :STACKORIGIN,x
  1741 2790 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1742 2794 20 F6 21			jsr SYSTEM.PAUSE_0061
  1743
  1744 				; optimize FAIL ('PUTTILE', nyan_2.pas), line = 47
  1745 2797 E8				inx
  1746 2798 A9 07 95 9A			mva #$07 :STACKORIGIN,x
  1747 279C E8				inx
  1748 279D A9 0C 95 9A			mva #$0C :STACKORIGIN,x
  1749 27A1 E8				inx
  1750 27A2 A9 1A 95 9A			mva #$1A :STACKORIGIN,x
  1751 27A6 E8				inx
  1752 27A7 A9 13 95 9A			mva #$13 :STACKORIGIN,x
  1753 27AB E8				inx
  1754 27AC A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1755 27B0 A9 80 95 AA			mva #$80 :STACKORIGIN+STACKWIDTH,x
  1756 27B4 E8				inx
  1757 27B5 AD 69 28 95 9A		mva FRAME :STACKORIGIN,x
  1758 27BA E8				inx
  1759 27BB A9 EE 95 9A			mva #$EE :STACKORIGIN,x
  1760 27BF A9 01 95 AA			mva #$01 :STACKORIGIN+STACKWIDTH,x
  1761 27C3 A9 00 95 A9			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1762 27C7 20 65 21			jsr imulWORD
  1763 27CA 20 B0 20			jsr movaBX_EAX
  1764 27CD CA				dex
  1765 27CE 20 99 20			jsr addAX_CX
  1766 27D1 CA				dex
  1767 27D2 20 6A 26			jsr PUTTILE
  1768
  1769 				; --- ForToDoEpilog
  1770 27D5 EE 69 28			inc FRAME					; inc ptr byte [CounterAddress]
  1771 27D8 D0 AA			jne l_02BA
  1772 27DA			l_02C8
  1773
  1774 				; optimize FAIL ('CRT.KEYPRESSED', nyan_2.pas), line = 49
  1775 27DA 20 22 22			jsr CRT.KEYPRESSED
  1776 27DD CA				dex
  1777 27DE B5 9B			lda :STACKORIGIN+1,x
  1778 27E0 F0 9D			jeq l_02B1
  1779
  1780 				; ------------------------------------------------------------
  1781
  1782 = 5000			DISPLAY_LIST_ADDRESS	= $5000
  1783 = 6000			VIDEO_RAM_ADDRESS	= $6000
  1784 = 8000			BITMAP_ADDRESS	= $8000
  1785 = 01EE			FRAME_SIZE	= $01EE
  1786 = 2869			FRAME	= DATAORIGIN+$0073
  1787 = 0004			@FORTMP_02B7	= $04
  1788 27E2			@exit
  1789
  1790 27E2 A2 00		@halt	ldx #0
  1791 27E4 9A				txs
  1792 					.ifdef MAIN.@DEFINES.ROMOFF
  1793 					inc portb
  1794 					.endif
  1795
  1796 27E5 60				rts
  1797
  1798 				; ------------------------------------------------------------
  1799
  1800 27E6 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1801
  1802 				; ------------------------------------------------------------
  1803
  1804 27F6			.local	@DEFINES
  1805 27F6			ATARI
  1806 				.endl
  1807
  1808 				.endl							; MAIN
  1809
  1810 				; ------------------------------------------------------------
  1811 				; ------------------------------------------------------------
  1812
  1813 				.macro	UNITINITIALIZATION
  1814 				
  1815 					.ifdef MAIN.SYSTEM.@UnitInit
  1816 					jsr MAIN.SYSTEM.@UnitInit
  1817 					eif
  1818 				
  1819 					.ifdef MAIN.ATARI.@UnitInit
  1820 					jsr MAIN.ATARI.@UnitInit
  1821 					eif
  1822 				
  1823 					.ifdef MAIN.CRT.@UnitInit
  1824 					jsr MAIN.CRT.@UnitInit
  1825 					eif
  1826 				
  1827 					.ifdef MAIN.RMT.@UnitInit
  1828 					jsr MAIN.RMT.@UnitInit
  1829 					eif
  1830 				
  1831 					.ifdef MAIN.GR10PP.@UnitInit
  1832 					jsr MAIN.GR10PP.@UnitInit
  1833 					eif
  1834 				
  1835 					.ifdef MAIN.TYPES.@UnitInit
  1836 					jsr MAIN.TYPES.@UnitInit
  1837 					eif
  1838 				
  1839 					.ifdef MAIN.GRAPH.@UnitInit
  1840 					jsr MAIN.GRAPH.@UnitInit
  1841 					eif
  1842 				.endm
  1843
  1844 				; ------------------------------------------------------------
  1845
  1846 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1847 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1847 				SYSTEM: $21D0..$2221
  1848 					eif
  1849
  1850 					ift .SIZEOF(MAIN.ATARI) > 0
  1851 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1852 					eif
  1853
  1854 					ift .SIZEOF(MAIN.CRT) > 0
  1855 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1855 				CRT: $2222..$2235
  1856 					eif
  1857
  1858 					ift .SIZEOF(MAIN.RMT) > 0
  1859 					.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
  1859 				RMT: $2236..$2244
  1860 					eif
  1861
  1862 					ift .SIZEOF(MAIN.GR10PP) > 0
  1863 					.print 'GR10PP: ',MAIN.GR10PP,'..',MAIN.GR10PP+.SIZEOF(MAIN.GR10PP)-1
  1863 				GR10PP: $2245..$243C
  1864 					eif
  1865
  1866 					ift .SIZEOF(MAIN.TYPES) > 0
  1867 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1868 					eif
  1869
  1870 					ift .SIZEOF(MAIN.GRAPH) > 0
  1871 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1871 				GRAPH: $243D..$2669
  1872 					eif
  1873
  1874 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1874 				CODE: $2000..$27F5
  1875
  1876 				; ------------------------------------------------------------
  1877
  1878 27F6			DATAORIGIN
  1879 27F6 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1880 280E 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1881 2826 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17
  1882
  1883 = 003D			VARINITSIZE	= *-DATAORIGIN
  1884 = 0074			VARDATASIZE	= 116
  1885
  1886 = 286A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1887
  1888 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1888 				DATA: $27F6..$286A
  1889
  1890 02E0-02E1> 9D 21			run START
  1891
  1892 				; ------------------------------------------------------------
  1893
  1894 				.macro	STATICDATA
  1895 				.endm
  1896
  1897 					end
