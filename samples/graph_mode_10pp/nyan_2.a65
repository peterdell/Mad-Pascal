; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/06] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1

FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'nyan5x.g10' BITMAP_ADDRESS 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend

.print 'RTLIB: ',RTLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	MOVE_0042					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PAUSE_0060					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PAUSE_0061					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x N
	mva :STACKORIGIN+STACKWIDTH,x N+1
	dex

; ---------------------  ASM Block 040  ---------------------


loop	lda n
	ora n+1
	beq stop

	lda:cmp:req :rtclok+2

	dew n

	jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000B

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 053  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000E

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000D
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	RMT						; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; ---------------------  ASM Block 064  ---------------------


	lda #0
	ldx SYSTEM.TVSystem
	cpx #15
	sne
	lda #4

	sta ntsc


	rts

; ------------------------------------------------------------

NTSC	= DATAORIGIN+$000F

.endl							; UNIT RMT

; ------------------------------------------------------------

.local	GR10PP						; UNIT

.local	G10DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 065  ---------------------


dli 
    pha 
    sta WSYNC  ;($d40a) 
    lda #13 
.def :VS_Upper = *-1
    sta VSCROL ;($d405) 
    lda #3
.def :VS_Lower = *-1
    sta VSCROL ;($d405) 
    pla 

	rti						; ret
.endl

.local	SETVS						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LOWER
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x UPPER
	dex

; ---------------------  ASM Block 066  ---------------------


    lda upper
    sta VS_Upper
    lda lower
    sta VS_Lower


; ------------------------------------------------------------

UPPER	= DATAORIGIN+$0023
LOWER	= DATAORIGIN+$0024

@VarData	= UPPER
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETPIXELHEIGHT					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; optimize OK (GR10PP), line = 83

	lda LINES
	cmp #$02
	jcc l_0095
	cmp #$11
	jcs l_0095

; optimize FAIL ('SYSTEM.PAUSE_0060', GR10PP), line = 84
	jsr SYSTEM.PAUSE_0060

; optimize FAIL ('SETVS', GR10PP), line = 85
	inx
	lda #$11
	sub LINES
	sta :STACKORIGIN,x
	inx
	ldy LINES
	dey
	sty :STACKORIGIN,x
	jsr SETVS
l_0095

; ------------------------------------------------------------

LINES	= DATAORIGIN+$0025

@VarData	= LINES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x B
	dex

; optimize OK (GR10PP), line = 91

	lda DLIST
	add DLPTR
	tay
	lda DLIST+1
	adc DLPTR+1
	sta :bp+1
	lda B
	sta (:bp),y

; optimize FAIL (0, GR10PP), line = 92
	inc DLPTR
	sne
	inc DLPTR+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0026

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKEW						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x W
	mva :STACKORIGIN+STACKWIDTH,x W+1
	dex

; optimize OK (GR10PP), line = 97

	lda DLIST
	add DLPTR
	tay
	lda DLIST+1
	adc DLPTR+1
	sta :bp+1
	lda W
	sta (:bp),y

; optimize FAIL (0, GR10PP), line = 98
	inc DLPTR
	sne
	inc DLPTR+1

; optimize OK (GR10PP), line = 99

	lda W+1
	sta :STACKORIGIN+10
	lda DLIST
	add DLPTR
	tay
	lda DLIST+1
	adc DLPTR+1
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; optimize FAIL (0, GR10PP), line = 100
	inc DLPTR
	sne
	inc DLPTR+1

; ------------------------------------------------------------

W	= DATAORIGIN+$0027

@VarData	= W
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BUILDDISPLAYLIST				; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex

; optimize OK (GR10PP), line = 105

	mva DLISTADDRESS DLIST
	mva DLISTADDRESS+1 DLIST+1

; optimize OK (GR10PP), line = 106

	mva #$00 DLPTR
	sta DLPTR+1

; --- WhileProlog
	jmp l_00F3
l_00F4

; optimize OK (GR10PP), line = 108

	lda BLANKS
	cmp #$01
	jne l_0106

; optimize FAIL ('DLPOKE', GR10PP), line = 108
	inx
	mva #$F0 :STACKORIGIN,x
	jsr DLPOKE
	jmp l_0112
l_0106

; optimize FAIL ('DLPOKE', GR10PP), line = 109
	inx
	mva #$70 :STACKORIGIN,x
	jsr DLPOKE
l_0112

; optimize FAIL (0, GR10PP), line = 110
	dec BLANKS
l_00F3

; optimize OK (GR10PP), line = 107

	lda BLANKS
	jne l_00F4

; optimize FAIL ('DLPOKE', GR10PP), line = 112
	inx
	mva #$6F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', GR10PP), line = 113
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; optimize FAIL ('DLPOKE', GR10PP), line = 114
	inx
	mva #$8F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL (0, GR10PP), line = 115
	dec LINES

; --- WhileProlog
	jmp l_0131
l_0132

; optimize FAIL ('DLPOKE', GR10PP), line = 117
	inx
	mva #$2F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKE', GR10PP), line = 118
	inx
	mva #$8F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL (0, GR10PP), line = 119
	dec LINES
l_0131

; optimize OK (GR10PP), line = 116

	lda LINES
	jne l_0132

; optimize FAIL ('DLPOKE', GR10PP), line = 121
	inx
	mva #$70 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKE', GR10PP), line = 122
	inx
	mva #$41 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', GR10PP), line = 123
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$0029
VRAMADDRESS	= DATAORIGIN+$002B
LINES	= DATAORIGIN+$002D
BLANKS	= DATAORIGIN+$002E

@VarData	= DLISTADDRESS
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	GR10INIT					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x PIXELHEIGHT
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex

; optimize FAIL ('BUILDDISPLAYLIST', GR10PP), line = 128
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LINES :STACKORIGIN,x
	inx
	mva BLANKS :STACKORIGIN,x
	jsr BUILDDISPLAYLIST

; optimize FAIL ('SETPIXELHEIGHT', GR10PP), line = 129
	inx
	mva PIXELHEIGHT :STACKORIGIN,x
	jsr SETPIXELHEIGHT

; optimize OK (GR10PP), line = 130

	mva DLISTADDRESS ATARI.SDLSTL
	mva DLISTADDRESS+1 ATARI.SDLSTL+1

; optimize OK (GR10PP), line = 131

	mva VRAMADDRESS ATARI.SAVMSC
	mva VRAMADDRESS+1 ATARI.SAVMSC+1

; optimize OK (GR10PP), line = 132

	mva <G10DLI VDSLST
	mva >G10DLI VDSLST+1

; optimize OK (GR10PP), line = 133

	mva #$C0 ATARI.NMIEN

; optimize OK (GR10PP), line = 134

	mva #$81 ATARI.GPRIOR

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$002F
VRAMADDRESS	= DATAORIGIN+$0031
LINES	= DATAORIGIN+$0033
PIXELHEIGHT	= DATAORIGIN+$0034
BLANKS	= DATAORIGIN+$0035

@VarData	= DLISTADDRESS
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_MODE_320X192G2	= $0F
DL_JVB	= $41
adr.DLIST	= DATAORIGIN+$0020
.var DLIST	= adr.DLIST .word
DLPTR	= DATAORIGIN+$0021

.endl							; UNIT GR10PP

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_0194					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex

; ---------------------  ASM Block 067  ---------------------


	txa:pha

	lda mode
	sta MAIN.SYSTEM.GraphMode
	and #$0f
	tay

	ldx #$60		; 6*16
	lda mode		; %00010000 with text window
	and #$10
	eor #$10
	ora #2			; read

	.nowarn @GRAPHICS

	sty GraphResult


	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH

; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx

; X:A = horizontal resolution
; Y = vertical resolution

	@SCREENSIZE

	.ifdef MAIN.@DEFINES.ROMOFF
	dec portb
	.endif

	pla:tax


; optimize OK (GRAPH), line = 132

	mva ATARI.SAVMSC VIDEORAM
	mva ATARI.SAVMSC+1 VIDEORAM+1

; ------------------------------------------------------------

MODE	= DATAORIGIN+$0053

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETCOLOR					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x COLOR
	dex

; ---------------------  ASM Block 069  ---------------------

	mva color @COMMAND.colscr
	sta GetColor


; ------------------------------------------------------------

COLOR	= DATAORIGIN+$0054

@VarData	= COLOR
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex

; ---------------------  ASM Block 073  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	mwa x CurrentX
	mwa y CurrentY


; ------------------------------------------------------------

X	= DATAORIGIN+$0055
Y	= DATAORIGIN+$0057

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	LINETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex

; ---------------------  ASM Block 074  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	txa:pha

	mwa CurrentX colcrs
	mva CurrentY rowcrs

;	lda #@IDput		; slower
;	jsr @COMMAND

	ldx @COMMAND.scrchn	; faster
	lda @COMMAND.colscr

	m@call	@putchar.main

	lda x
	sta colcrs
	sta CurrentX
	lda x+1
	sta colcrs+1
	sta CurrentX+1

	mva y rowcrs
	sta CurrentY
	lda y+1
	sta CurrentY+1

	lda #@IDdraw

	jsr @COMMAND

	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$0059
Y	= DATAORIGIN+$005B

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	LINE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y2
	mva :STACKORIGIN+STACKWIDTH,x Y2+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X2
	mva :STACKORIGIN+STACKWIDTH,x X2+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y1
	mva :STACKORIGIN+STACKWIDTH,x Y1+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X1
	mva :STACKORIGIN+STACKWIDTH,x X1+1
	dex

; optimize OK (GRAPH), line = 332

	mva CURRENTX X
	mva CURRENTX+1 X+1

; optimize OK (GRAPH), line = 333

	mva CURRENTY Y
	mva CURRENTY+1 Y+1

; optimize FAIL ('MOVETO', GRAPH), line = 335
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr MOVETO

; optimize FAIL ('LINETO', GRAPH), line = 336
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize OK (GRAPH), line = 338

	mva X CURRENTX
	mva X+1 CURRENTX+1

; optimize OK (GRAPH), line = 339

	mva Y CURRENTY
	mva Y+1 CURRENTY+1

; ------------------------------------------------------------

X1	= DATAORIGIN+$005D
Y1	= DATAORIGIN+$005F
X2	= DATAORIGIN+$0061
Y2	= DATAORIGIN+$0063
X	= DATAORIGIN+$0065
Y	= DATAORIGIN+$0067

@VarData	= X1
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$0036
WIN_RIGHT	= DATAORIGIN+$0038
WIN_TOP	= DATAORIGIN+$003A
WIN_BOTTOM	= DATAORIGIN+$003C
GRAPHRESULT	= DATAORIGIN+$003E
GETCOLOR	= DATAORIGIN+$003F
adr.LASTARCCOORDS	= DATAORIGIN+$0040
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0040
LASTARCCOORDS.Y	= DATAORIGIN+$0042
LASTARCCOORDS.XSTART	= DATAORIGIN+$0044
LASTARCCOORDS.YSTART	= DATAORIGIN+$0046
LASTARCCOORDS.XEND	= DATAORIGIN+$0048
LASTARCCOORDS.YEND	= DATAORIGIN+$004A
CURRENTX	= DATAORIGIN+$004C
CURRENTY	= DATAORIGIN+$004E
VIDEORAM	= DATAORIGIN+$0050
SCANLINE_WIDTH	= DATAORIGIN+$0052

.endl							; UNIT GRAPH

.local	PUTTILE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x TILE
	mva :STACKORIGIN+STACKWIDTH,x TILE+1
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x H
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x W
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X
	dex

; optimize OK (nyan_2.pas), line = 15

	lda Y
	jsr @mul40
	lda :eax
	add X
	sta VOFFSET
	lda #$60
	adc :eax+1
	sta VOFFSET+1
; --- For

; optimize OK (nyan_2.pas), line = 16

	mva #$00 B

; optimize OK (nyan_2.pas), line = 16

	ldy H
	dey
	sty :@FORTMP?025A_0
l_025D
; --- ForToDoCondition

; optimize OK (nyan_2.pas), line = 16

	lda B
.def :@FORTMP?025A_0 = *+1
	cmp #$00
	scc
	jne l_026B

; optimize OK (nyan_2.pas), line = 17

	lda TILE
	sta :edx
	lda TILE+1
	sta :edx+1
	lda VOFFSET
	sta :ecx
	lda VOFFSET+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (nyan_2.pas), line = 18

	lda TILE
	add W
	sta TILE
	scc
	inc TILE+1

; optimize OK (nyan_2.pas), line = 19

	lda VOFFSET
	add #$28
	sta VOFFSET
	scc
	inc VOFFSET+1

; --- ForToDoEpilog
	inc B						; inc ptr byte [CounterAddress]
	jne l_025D
l_026B

; ------------------------------------------------------------

X	= DATAORIGIN+$0069
Y	= DATAORIGIN+$006A
W	= DATAORIGIN+$006B
H	= DATAORIGIN+$006C
TILE	= DATAORIGIN+$006D
VOFFSET	= DATAORIGIN+$006F
B	= DATAORIGIN+$0071
@FORTMP_025A	= $00

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0007

; optimize FAIL ('GRAPH.INITGRAPH_0194', nyan_2.pas), line = 26
	inx
	mva #$0A :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_0194

; optimize FAIL ('GR10PP.GR10INIT', nyan_2.pas), line = 27
	inx
	mva #$00 :STACKORIGIN,x
	mva #$50 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$60 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$30 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr GR10PP.GR10INIT

; optimize FAIL ('GRAPH.SETCOLOR', nyan_2.pas), line = 31
	inx
	mva #$06 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.LINE', nyan_2.pas), line = 32
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$4F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$77 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize OK (nyan_2.pas), line = 34

	mva #$00 ATARI.PCOLR0

; optimize OK (nyan_2.pas), line = 35

	mva #$24 ATARI.PCOLR3

; optimize OK (nyan_2.pas), line = 36

	mva #$18 ATARI.PCOLR1

; optimize OK (nyan_2.pas), line = 37

	mva #$1C ATARI.COLOR2

; optimize OK (nyan_2.pas), line = 38

	mva #$BA ATARI.PCOLR2

; optimize OK (nyan_2.pas), line = 39

	mva #$74 ATARI.COLOR1

; optimize OK (nyan_2.pas), line = 40

	mva #$54 ATARI.COLOR0

; optimize OK (nyan_2.pas), line = 41

	mva #$3C ATARI.COLOR4

; optimize OK (nyan_2.pas), line = 42

	mva #$0A ATARI.COLOR3

; --- RepeatUntilProlog
l_02B1
; --- For

; optimize OK (nyan_2.pas), line = 45

	mva #$00 FRAME

; optimize OK (nyan_2.pas), line = 45

l_02BA
; --- ForToDoCondition

; optimize OK (nyan_2.pas), line = 45

	lda FRAME
	cmp #$05
	jcs l_02C8

; optimize FAIL ('SYSTEM.PAUSE_0061', nyan_2.pas), line = 46
	inx
	mva #$05 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr SYSTEM.PAUSE_0061

; optimize FAIL ('PUTTILE', nyan_2.pas), line = 47
	inx
	mva #$07 :STACKORIGIN,x
	inx
	mva #$0C :STACKORIGIN,x
	inx
	mva #$1A :STACKORIGIN,x
	inx
	mva #$13 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$80 :STACKORIGIN+STACKWIDTH,x
	inx
	mva FRAME :STACKORIGIN,x
	inx
	mva #$EE :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	jsr movaBX_EAX
	dex
	jsr addAX_CX
	dex
	jsr PUTTILE

; --- ForToDoEpilog
	inc FRAME					; inc ptr byte [CounterAddress]
	jne l_02BA
l_02C8

; optimize FAIL ('CRT.KEYPRESSED', nyan_2.pas), line = 49
	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_02B1

; ------------------------------------------------------------

DISPLAY_LIST_ADDRESS	= $5000
VIDEO_RAM_ADDRESS	= $6000
BITMAP_ADDRESS	= $8000
FRAME_SIZE	= $01EE
FRAME	= DATAORIGIN+$0073
@FORTMP_02B7	= $04
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.RMT.@UnitInit
	jsr MAIN.RMT.@UnitInit
	eif

	.ifdef MAIN.GR10PP.@UnitInit
	jsr MAIN.GR10PP.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.RMT) > 0
	.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
	eif

	ift .SIZEOF(MAIN.GR10PP) > 0
	.print 'GR10PP: ',MAIN.GR10PP,'..',MAIN.GR10PP+.SIZEOF(MAIN.GR10PP)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 116

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
