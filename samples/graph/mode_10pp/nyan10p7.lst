mads 2.1.0 build 8 (23 Dec 19)
Source: nyan10p7.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/04/23] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2						; VBXE pointer
    16 = 0082			psptr	.ds 2						; PROGRAMSTACK Pointer
    17
    18 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    19 = 0088			edx	.ds 4
    20 = 008C			ecx	.ds 4
    21 = 0090			bp	.ds 2
    22 = 0092			bp2	.ds 2
    23
    24 				ztmp
    25 = 0094			ztmp8	.ds 1
    26 = 0095			ztmp9	.ds 1
    27 				TMP
    28 = 0096			ztmp10	.ds 1
    29 = 0097			ztmp11	.ds 1
    30
    31 = 0098			STACKORIGIN	.ds STACKWIDTH*4
    32 				zpend
    33
    34 				; ------------------------------------------------------------
    35
    36 = 0084			ax	= eax
    37 = 0084			al	= eax
    38 = 0085			ah	= eax+1
    39
    40 = 008C			cx	= ecx
    41 = 008C			cl	= ecx
    42 = 008D			ch	= ecx+1
    43
    44 = 0088			dx	= edx
    45 = 0088			dl	= edx
    46 = 0089			dh	= edx+1
    47
    48 					org eax
    49
    50 = 0084			FP1MAN0	.ds 1
    51 = 0085			FP1MAN1	.ds 1
    52 = 0086			FP1MAN2	.ds 1
    53 = 0087			FP1MAN3	.ds 1
    54
    55 					org ztmp8
    56
    57 = 0094			FP1SGN	.ds 1
    58 = 0095			FP1EXP	.ds 1
    59
    60 					org edx
    61
    62 = 0088			FP2MAN0	.ds 1
    63 = 0089			FP2MAN1	.ds 1
    64
    65 = 008A			FP2MAN2	.ds 1
    66 = 008B			FP2MAN3	.ds 1
    67
    68 					org ztmp10
    69
    70 = 0096			FP2SGN	.ds 1
    71 = 0097			FP2EXP	.ds 1
    72
    73 					org ecx
    74
    75 = 008C			FPMAN0	.ds 1
    76 = 008D			FPMAN1	.ds 1
    77 = 008E			FPMAN2	.ds 1
    78 = 008F			FPMAN3	.ds 1
    79
    80 					org bp2
    81
    82 = 0092			FPSGN	.ds 1
    83 = 0093			FPEXP	.ds 1
    84
    85 				.local	RESOURCE
    86 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1148 					opt l+
    87 = 0000				?EXTDETECT = 0
    88 = 0000				?VBXDETECT = 0
    89
    90 2000				RCDATA 'nyan5x.g10' BITMAP_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 09A6			len = .filesize('nyan5x.g10')
    28 					org main.BITMAP_ADDRESS
    30 FFFF> 8000-89A5> 33 33 + 	ins 'nyan5x.g10'
    32 					.print '$R RCDATA  ',main.BITMAP_ADDRESS,'..',*-1," 'nyan5x.g10'"
    32 				$R RCDATA  $8000..$89A5 'nyan5x.g10'
Source: nyan10p7.a65
    91 				.endl
    92
    93 				; ------------------------------------------------------------
    94
    95 89A6				org CODEORIGIN
    96
    97 2000				STATICDATA
Macro: STATICDATA [Source: nyan10p7.a65]
     1 2000-5479> 14 41 42 43 + .by  $14 $41 $42 $43 $44 $45 $46 $47  $48 $49 $4A $4B $4C $4D $4E $4F  $50 $52 $53 $54 $55 $00 $14 $56
     2 2018 5A 57 58 59 20 31 + .by  $5A $57 $58 $59 $20 $31 $32 $33  $34 $35 $36 $37 $38 $39 $30 $2B  $2D $2A $2F $00 $0F $2E $2C $3A
     3 2030 3B 21 3F 27 22 28 + .by  $3B $21 $3F $27 $22 $28 $29 $3D  $3C $3E $25 $23 $00
Source: nyan10p7.a65
    98
    99 				; ------------------------------------------------------------
   100
   101 203D			RTLIB
   102 203D				icl 'rtl6502.asm'
Source: rtl6502.asm
   376 					opt l+
   103
   104 				.print 'ZPAGE: ',fxptr,'..',zpend
   104 				ZPAGE: $0080..$00D8
   105
   106 				.print 'RTLIB: ',RTLIB,'..',*
   106 				RTLIB: $203D..$225E
   107
   108 				; ------------------------------------------------------------
   109
   110 225E			START
   111 225E BA				tsx
   112 225F 8E 3B 54			stx MAIN.@halt+1
   113
   114 					.ifdef fmulinit
   115 					fmulinit
   116 					eif
   117
   118 = 019D			VLEN	= VARDATASIZE-VARINITSIZE
   119 = 547A			VADR	= DATAORIGIN+VARINITSIZE
   120
   121 					ift VADR > $BFFF
   122 					ert 'Invalid memory address range ',VADR
   123 					eli (VLEN>0) && (VLEN<=256)
   124 					ldx #256-VLEN
   125 					lda #0
   126 					sta:rne VADR+VLEN-256,x+
   127 					eli VLEN>0
   128 					@fill #VADR #VLEN #0
   128 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   128 2262 A9 7A 85 88 A9 54 +  MWA #VADR @FILL.PTR1
   128 226A A9 9D 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   128 2272 A9 00 85 84		 MVA #0 @FILL.PTR2
   128 2276 20 84 21		 JSR @FILL
   129 					eif
   130
   131 2279 A9 17 85 82 A9 56 + 	mwa #PROGRAMSTACK psptr
   132
   133 2281 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   134 2283 BD 40 03 9D 3E 54 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   135
   136 228C E8				inx						; X = 0
   137 228D 86 90			stx bp						; BP = 0
   138
   139 228F 8E 08 D2			stx audctl					; reset POKEY
   140 2292 A9 03			lda #3
   141 2294 8D 0F D2			sta skctl
   142
   143 2297 CA				dex						; X = 255
   144
   145 2298				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: nyan10p7.a65]
Source: nyan10p7.a65
   146
   147 2298			.local	MAIN						; PROCEDURE
   148
   149 2298 4C 2C 51			jmp l_0044
   150
   151 				; ------------------------------------------------------------
   152
   153 229B			.local	SYSTEM						; UNIT
   154
   155 229B			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   156
   157 				; ------------------------------------------------------------
   158
   159 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   160 				; as Pointer
   161 229B B5 98 85 8C			mva :STACKORIGIN,x VALUE
   162 229F CA				dex						; sub bx, 1
   163
   164 				; ------------------------------------------------------------
   165
   166 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   167 				; as Pointer
   168 22A0 B5 98 85 88			mva :STACKORIGIN,x A
   169 22A4 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   170 22A8 CA				dex						; sub bx, 1
   171
   172 				; ---------------------  ASM Block 021  ---------------------
   173
   174 22A9 A0 00			ldy #0
   175 22AB A5 8C 91 88			mva value (edx),y
   176
   177
   178 				; ------------------------------------------------------------
   179
   180 = 0088			A	= edx
   181 = 008C			VALUE	= ecx
   182 22AF			@exit
   183 					.ifdef @new
   184 					lda <@VarData
   185 					sta :ztmp
   186 					lda >@VarData
   187 					ldy #@VarDataSize-1
   188 					jmp @FreeMem
   189 					eif
   190 22AF 60				rts						; ret
   191 				.endl
   192
   193 22B0			.local	MOVE_0083					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   194
   195 				; ------------------------------------------------------------
   196
   197 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   198 				; as Pointer
   199 22B0 B5 98 85 84			mva :STACKORIGIN,x COUNT
   200 22B4 B5 A8 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   201 22B8 CA				dex						; sub bx, 1
   202
   203 				; ------------------------------------------------------------
   204
   205 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   206 				; as Pointer
   207 22B9 B5 98 85 8C			mva :STACKORIGIN,x DEST
   208 22BD B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   209 22C1 CA				dex						; sub bx, 1
   210
   211 				; ------------------------------------------------------------
   212
   213 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   214 				; as Pointer
   215 22C2 B5 98 85 88			mva :STACKORIGIN,x SOURCE
   216 22C6 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   217 22CA CA				dex						; sub bx, 1
   218
   219 				; ---------------------  ASM Block 031  ---------------------
   220
   221 22CB 20 2F 21			jsr @move
   222
   223
   224 				; ------------------------------------------------------------
   225
   226 = 0088			SOURCE	= edx
   227 = 008C			DEST	= ecx
   228 = 0084			COUNT	= eax
   229 22CE			@exit
   230 					.ifdef @new
   231 					lda <@VarData
   232 					sta :ztmp
   233 					lda >@VarData
   234 					ldy #@VarDataSize-1
   235 					jmp @FreeMem
   236 					eif
   237 22CE 60				rts						; ret
   238 				.endl
   239
   240 22CF			.local	PAUSE_00A1					; PROCEDURE | ASSEMBLER | OVERLOAD
   241
   242 				; ---------------------  ASM Block 039  ---------------------
   243
   244 22CF A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   245
   246 22D5			@exit
   247 					.ifdef @new
   248 					lda <@VarData
   249 					sta :ztmp
   250 					lda >@VarData
   251 					ldy #@VarDataSize-1
   252 					jmp @FreeMem
   253 					eif
   254 22D5 60				rts						; ret
   255 				.endl
   256
   257 22D6			.local	PAUSE_00A2					; PROCEDURE | ASSEMBLER | OVERLOAD
   258
   259 				; ------------------------------------------------------------
   260
   261 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   262 				; as Pointer
   263 22D6 B5 98 8D 59 54		mva :STACKORIGIN,x N
   264 22DB B5 A8 8D 5A 54		mva :STACKORIGIN+STACKWIDTH,x N+1
   265 22E0 CA				dex						; sub bx, 1
   266
   267 				; ---------------------  ASM Block 040  ---------------------
   268
   269
   270 22E1 AD 59 54		loop	lda n
   271 22E4 0D 5A 54			ora n+1
   272 22E7 F0 14			beq stop
   273
   274 22E9 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   275
   276 22EF AD 59 54 D0 03 CE + 	dew n
   277
   278 22FA 4C E1 22			jmp loop
   279 22FD			stop
   280
   281
   282 				; ------------------------------------------------------------
   283
   284 = 5459			N	= DATAORIGIN+$000B
   285
   286 = 5459			@VarData	= N
   287 = 0002			@VarDataSize	= 2
   288
   289 22FD			@exit
   290 					.ifdef @new
   291 					lda <@VarData
   292 					sta :ztmp
   293 					lda >@VarData
   294 					ldy #@VarDataSize-1
   295 					jmp @FreeMem
   296 					eif
   297 22FD 60				rts						; ret
   298 				.endl
   299
   300 				; ------------------------------------------------------------
   301
   302 = 0101			__PORTB_BANKS	= $0101
   303 = 0648			M_PI_2	= $0648
   304 = 0192			D_PI_2	= $0192
   305 = 0004			D_PI_180	= $04
   306 = 0000			MGTIA	= $00
   307 = 0080			MVBXE	= $80
   308 = 0000			VBXE_XDLADR	= $00
   309 = 0100			VBXE_BCBADR	= $0100
   310 = 1000			VBXE_MAPADR	= $1000
   311 = 5000			VBXE_OVRADR	= $5000
   312 = B000			VBXE_WINDOW	= $B000
   313 = 0000			IDLI	= $00
   314 = 0001			IVBL	= $01
   315 = 00FE			CH_DELCHR	= $FE
   316 = 009B			CH_ENTER	= $9B
   317 = 001B			CH_ESC	= $1B
   318 = 001C			CH_CURS_UP	= $1C
   319 = 001D			CH_CURS_DOWN	= $1D
   320 = 001E			CH_CURS_LEFT	= $1E
   321 = 001F			CH_CURS_RIGHT	= $1F
   322 = 007F			CH_TAB	= $7F
   323 = 009B			CH_EOL	= $9B
   324 = 007D			CH_CLR	= $7D
   325 = 00FD			CH_BELL	= $FD
   326 = 007E			CH_DEL	= $7E
   327 = 009C			CH_DELLINE	= $9C
   328 = 009D			CH_INSLINE	= $9D
   329 = 0000			COLOR_BLACK	= $00
   330 = 000E			COLOR_WHITE	= $0E
   331 = 0032			COLOR_RED	= $32
   332 = 0096			COLOR_CYAN	= $96
   333 = 0068			COLOR_VIOLET	= $68
   334 = 00C4			COLOR_GREEN	= $C4
   335 = 0074			COLOR_BLUE	= $74
   336 = 00EE			COLOR_YELLOW	= $EE
   337 = 0028			COLOR_ORANGE	= $28
   338 = 00E4			COLOR_BROWN	= $E4
   339 = 003C			COLOR_LIGHTRED	= $3C
   340 = 0004			COLOR_GRAY1	= $04
   341 = 0006			COLOR_GRAY2	= $06
   342 = 000A			COLOR_GRAY3	= $0A
   343 = 00CC			COLOR_LIGHTGREEN	= $CC
   344 = 007C			COLOR_LIGHTBLUE	= $7C
   345 = 0004			FMOPENREAD	= $04
   346 = 0008			FMOPENWRITE	= $08
   347 = 0009			FMOPENAPPEND	= $09
   348 = 000C			FMOPENREADWRITE	= $0C
   349 = 544E			SCREENWIDTH	= DATAORIGIN+$0000
   350 = 5450			SCREENHEIGHT	= DATAORIGIN+$0002
   351 = 5452			DATESEPARATOR	= DATAORIGIN+$0004
   352 = D014			TVSYSTEM	= $D014
   353 = 02C0			adr.PALETTE	= $02C0
   354 22FE			.var PALETTE	= adr.PALETTE .word
   355 = D012			adr.HPALETTE	= $D012
   356 22FE			.var HPALETTE	= adr.HPALETTE .word
   357 = 5453			FILEMODE	= DATAORIGIN+$0005
   358 = 5454			GRAPHMODE	= DATAORIGIN+$0006
   359 = 5455			IORESULT	= DATAORIGIN+$0007
   360 = 5456			EOLN	= DATAORIGIN+$0008
   361 = 5457			RNDSEED	= DATAORIGIN+$0009
   362
   363 = 22FE C0 02		PALETTE
   363 = 2300 12 D0		HPALETTE
   363 				.endl							; UNIT SYSTEM
   364
   365 				; ------------------------------------------------------------
   366
   367 2302			.local	ATARI						; UNIT
   368
   369 				; ------------------------------------------------------------
   370
   371 = 0012			RTCLOK	= $12
   372 = 004D			ATRACT	= $4D
   373 = 0052			LMARGIN	= $52
   374 = 0053			RMARGIN	= $53
   375 = 0054			ROWCRS	= $54
   376 = 0055			COLCRS	= $55
   377 = 0057			DINDEX	= $57
   378 = 0058			SAVMSC	= $58
   379 = 0062			PALNTS	= $62
   380 = 006A			RAMTOP	= $6A
   381 = 0200			VDSLST	= $0200
   382 = 0230			SDLSTL	= $0230
   383 = 0290			TXTROW	= $0290
   384 = 0291			TXTCOL	= $0291
   385 = 0293			TINDEX	= $0293
   386 = 0294			TXTMSC	= $0294
   387 = 022F			SDMCTL	= $022F
   388 = 026F			GPRIOR	= $026F
   389 = 02F0			CRSINH	= $02F0
   390 = 02F3			CHACT	= $02F3
   391 = 02F4			CHBAS	= $02F4
   392 = 02FC			CH	= $02FC
   393 = 02C0			PCOLR0	= $02C0
   394 = 02C1			PCOLR1	= $02C1
   395 = 02C2			PCOLR2	= $02C2
   396 = 02C3			PCOLR3	= $02C3
   397 = 02C4			COLOR0	= $02C4
   398 = 02C5			COLOR1	= $02C5
   399 = 02C6			COLOR2	= $02C6
   400 = 02C7			COLOR3	= $02C7
   401 = 02C8			COLOR4	= $02C8
   402 = 02C8			COLBAKS	= $02C8
   403 = D000			HPOSP0	= $D000
   404 = D001			HPOSP1	= $D001
   405 = D002			HPOSP2	= $D002
   406 = D003			HPOSP3	= $D003
   407 = D004			HPOSM0	= $D004
   408 = D005			HPOSM1	= $D005
   409 = D006			HPOSM2	= $D006
   410 = D007			HPOSM3	= $D007
   411 = D008			SIZEP0	= $D008
   412 = D009			SIZEP1	= $D009
   413 = D00A			SIZEP2	= $D00A
   414 = D00B			SIZEP3	= $D00B
   415 = D00C			SIZEM	= $D00C
   416 = D00D			GRAFP0	= $D00D
   417 = D00E			GRAFP1	= $D00E
   418 = D00F			GRAFP2	= $D00F
   419 = D010			GRAFP3	= $D010
   420 = D011			GRAFM	= $D011
   421 = D004			P0PF	= $D004
   422 = D014			PAL	= $D014
   423 = D012			COLPM0	= $D012
   424 = D013			COLPM1	= $D013
   425 = D014			COLPM2	= $D014
   426 = D015			COLPM3	= $D015
   427 = D016			COLPF0	= $D016
   428 = D017			COLPF1	= $D017
   429 = D018			COLPF2	= $D018
   430 = D019			COLPF3	= $D019
   431 = D01A			COLBK	= $D01A
   432 = D01B			PRIOR	= $D01B
   433 = D01D			GRACTL	= $D01D
   434 = D01E			HITCLR	= $D01E
   435 = D200			AUDF1	= $D200
   436 = D201			AUDC1	= $D201
   437 = D202			AUDF2	= $D202
   438 = D203			AUDC2	= $D203
   439 = D204			AUDF3	= $D204
   440 = D205			AUDC3	= $D205
   441 = D206			AUDF4	= $D206
   442 = D207			AUDC4	= $D207
   443 = D208			AUDCTL	= $D208
   444 = D20F			SKSTAT	= $D20F
   445 = D301			PORTB	= $D301
   446 = D400			DMACTL	= $D400
   447 = D401			CHACTL	= $D401
   448 = D402			DLISTL	= $D402
   449 = D404			HSCROL	= $D404
   450 = D405			VSCROL	= $D405
   451 = D407			PMBASE	= $D407
   452 = D409			CHBASE	= $D409
   453 = D40A			WSYNC	= $D40A
   454 = D40B			VCOUNT	= $D40B
   455 = D40C			PENH	= $D40C
   456 = D40D			PENV	= $D40D
   457 = D40E			NMIEN	= $D40E
   458
   459 				.endl							; UNIT ATARI
   460
   461 				; ------------------------------------------------------------
   462
   463 2302			.local	CRT						; UNIT
   464
   465 2302			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   466
   467 				; ---------------------  ASM Block 053  ---------------------
   468
   469 2302 A0 00			ldy #$00	; false
   470 2304 AD FC 02			lda kbcodes
   471 2307 C9 FF			cmp #$ff
   472 2309 F0 01			beq skp
   473 230B C8				iny		; true
   474
   475 				;	sty kbcodes
   476
   477 230C 8C 5C 54		skp	sty Result
   478
   479 230F			@exit
   480
   481 				; ------------------------------------------------------------
   482
   483 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   484 				; as Pointer
   485
   486 230F E8				inx						; add bx, 1
   487 2310 AD 5C 54 95 98		mva RESULT :STACKORIGIN,x
   488
   489 					.ifdef @new
   490 					lda <@VarData
   491 					sta :ztmp
   492 					lda >@VarData
   493 					ldy #@VarDataSize-1
   494 					jmp @FreeMem
   495 					eif
   496
   497 				; ------------------------------------------------------------
   498
   499 = 545C			RESULT	= DATAORIGIN+$000E
   500
   501 = 545C			@VarData	= RESULT
   502 = 0001			@VarDataSize	= 1
   503
   504 2315 60				rts						; ret
   505 				.endl
   506
   507 				; ------------------------------------------------------------
   508
   509 = 545B			TEXTATTR	= DATAORIGIN+$000D
   510 = D01F			CONSOL	= $D01F
   511 = 0000			CN_START_SELECT_OPTION	= $00
   512 = 0001			CN_SELECT_OPTION	= $01
   513 = 0002			CN_START_OPTION	= $02
   514 = 0003			CN_OPTION	= $03
   515 = 0004			CN_START_SELECT	= $04
   516 = 0005			CN_SELECT	= $05
   517 = 0006			CN_START	= $06
   518 = 0007			CN_NONE	= $07
   519 = 0000			BW40	= $00
   520 = 0001			CO40	= $01
   521 = 0002			BW80	= $02
   522 = 0003			CO80	= $03
   523 = 0007			MONO	= $07
   524 = 0001			C40	= $01
   525 = 0003			C80	= $03
   526 = 0000			BLACK	= $00
   527 = 0001			BLUE	= $01
   528 = 0002			GREEN	= $02
   529 = 0003			CYAN	= $03
   530 = 0004			RED	= $04
   531 = 0005			MAGENTA	= $05
   532 = 0006			BROWN	= $06
   533 = 0007			LIGHTGRAY	= $07
   534 = 0008			DARKGRAY	= $08
   535 = 0009			LIGHTBLUE	= $09
   536 = 000A			LIGHTGREEN	= $0A
   537 = 000B			LIGHTCYAN	= $0B
   538 = 000C			LIGHTRED	= $0C
   539 = 000D			LIGHTMAGENTA	= $0D
   540 = 000E			YELLOW	= $0E
   541 = 000F			WHITE	= $0F
   542 = 0080			BLINK	= $80
   543
   544 				.endl							; UNIT CRT
   545
   546 				; ------------------------------------------------------------
   547
   548 2316			.local	GR10PP						; UNIT
   549
   550 2316			.local	G10DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   551
   552 				; ---------------------  ASM Block 061  ---------------------
   553
   554
   555 2316			dli 
   556 2316 48			    pha 
   557 2317 8D 0A D4		    sta WSYNC  ;($d40a) 
   558 231A A9 0D		    lda #13 
   559 = 231B			.def :VS_Upper = *-1
   560 231C 8D 05 D4		    sta VSCROL ;($d405) 
   561 231F A9 03		    lda #3
   562 = 2320			.def :VS_Lower = *-1
   563 2321 8D 05 D4		    sta VSCROL ;($d405) 
   564 2324 68			    pla 
   565
   566 2325 40				rti						; ret
   567 				.endl
   568
   569 2326			.local	SETVS						; PROCEDURE | ASSEMBLER
   570
   571 				; ------------------------------------------------------------
   572
   573 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   574 				; as Pointer
   575 2326 B5 98 8D 61 54		mva :STACKORIGIN,x LOWER
   576 232B CA				dex						; sub bx, 1
   577
   578 				; ------------------------------------------------------------
   579
   580 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   581 				; as Pointer
   582 232C B5 98 8D 60 54		mva :STACKORIGIN,x UPPER
   583 2331 CA				dex						; sub bx, 1
   584
   585 				; ---------------------  ASM Block 062  ---------------------
   586
   587
   588 2332 AD 60 54		    lda upper
   589 2335 8D 1B 23		    sta VS_Upper
   590 2338 AD 61 54		    lda lower
   591 233B 8D 20 23		    sta VS_Lower
   592
   593
   594 				; ------------------------------------------------------------
   595
   596 = 5460			UPPER	= DATAORIGIN+$0012
   597 = 5461			LOWER	= DATAORIGIN+$0013
   598
   599 = 5460			@VarData	= UPPER
   600 = 0002			@VarDataSize	= 2
   601
   602 233E			@exit
   603 					.ifdef @new
   604 					lda <@VarData
   605 					sta :ztmp
   606 					lda >@VarData
   607 					ldy #@VarDataSize-1
   608 					jmp @FreeMem
   609 					eif
   610 233E 60				rts						; ret
   611 				.endl
   612
   613 233F			.local	SETPIXELHEIGHT					; PROCEDURE
   614
   615 				; ------------------------------------------------------------
   616
   617 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   618 				; as Pointer
   619 233F B5 98 8D 62 54		mva :STACKORIGIN,x LINES
   620 2344 CA				dex						; sub bx, 1
   621
   622 				; optimize OK (GR10PP), line = 83
   623
   624 2345 AD 62 54			lda LINES
   625 2348 C9 02			cmp #$02
   626 234A 90 1A			jcc l_00D6
   627 234C C9 11			cmp #$11
   628 234E B0 16			jcs l_00D6
   629
   630 				; optimize FAIL ('SYSTEM.PAUSE_00A1', GR10PP), line = 84
   631 2350 20 CF 22			jsr SYSTEM.PAUSE_00A1
   632
   633 				; optimize FAIL ('SETVS', GR10PP), line = 85
   634 2353 E8				inx
   635 2354 A9 11			lda #$11
   636 2356 38 ED 62 54			sub LINES
   637 235A 95 98			sta :STACKORIGIN,x
   638 235C E8				inx
   639 235D AC 62 54			ldy LINES
   640 2360 88				dey
   641 2361 94 98			sty :STACKORIGIN,x
   642 2363 20 26 23			jsr SETVS
   643 2366			l_00D6
   644
   645 				; ------------------------------------------------------------
   646
   647 = 5462			LINES	= DATAORIGIN+$0014
   648
   649 = 5462			@VarData	= LINES
   650 = 0001			@VarDataSize	= 1
   651
   652 2366			@exit
   653 					.ifdef @new
   654 					lda <@VarData
   655 					sta :ztmp
   656 					lda >@VarData
   657 					ldy #@VarDataSize-1
   658 					jmp @FreeMem
   659 					eif
   660 2366 60				rts						; ret
   661 				.endl
   662
   663 2367			.local	DLPOKE						; PROCEDURE
   664
   665 				; ------------------------------------------------------------
   666
   667 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   668 				; as Pointer
   669 2367 B5 98 8D 63 54		mva :STACKORIGIN,x B
   670 236C CA				dex						; sub bx, 1
   671
   672 				; optimize OK (GR10PP), line = 91
   673
   674 236D AD 0C 25			lda DLIST
   675 2370 18 6D 5E 54			add DLPTR
   676 2374 A8				tay
   677 2375 AD 0D 25			lda DLIST+1
   678 2378 6D 5F 54			adc DLPTR+1
   679 237B 85 91			sta :bp+1
   680 237D AD 63 54			lda B
   681 2380 91 90			sta (:bp),y
   682
   683 				; optimize FAIL (0, GR10PP), line = 92
   684 2382 EE 5E 54			inc DLPTR
   685 2385 D0 03			sne
   686 2387 EE 5F 54			inc DLPTR+1
   687
   688 				; ------------------------------------------------------------
   689
   690 = 5463			B	= DATAORIGIN+$0015
   691
   692 = 5463			@VarData	= B
   693 = 0001			@VarDataSize	= 1
   694
   695 238A			@exit
   696 					.ifdef @new
   697 					lda <@VarData
   698 					sta :ztmp
   699 					lda >@VarData
   700 					ldy #@VarDataSize-1
   701 					jmp @FreeMem
   702 					eif
   703 238A 60				rts						; ret
   704 				.endl
   705
   706 238B			.local	DLPOKEW						; PROCEDURE
   707
   708 				; ------------------------------------------------------------
   709
   710 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   711 				; as Pointer
   712 238B B5 98 8D 64 54		mva :STACKORIGIN,x W
   713 2390 B5 A8 8D 65 54		mva :STACKORIGIN+STACKWIDTH,x W+1
   714 2395 CA				dex						; sub bx, 1
   715
   716 				; optimize OK (GR10PP), line = 97
   717
   718 2396 AD 0C 25			lda DLIST
   719 2399 18 6D 5E 54			add DLPTR
   720 239D A8				tay
   721 239E AD 0D 25			lda DLIST+1
   722 23A1 6D 5F 54			adc DLPTR+1
   723 23A4 85 91			sta :bp+1
   724 23A6 AD 64 54			lda W
   725 23A9 91 90			sta (:bp),y
   726
   727 				; optimize FAIL (0, GR10PP), line = 98
   728 23AB EE 5E 54			inc DLPTR
   729 23AE D0 03			sne
   730 23B0 EE 5F 54			inc DLPTR+1
   731
   732 				; optimize OK (GR10PP), line = 99
   733
   734 23B3 AD 65 54			lda W+1
   735 23B6 85 A2			sta :STACKORIGIN+10
   736 23B8 AD 0C 25			lda DLIST
   737 23BB 18 6D 5E 54			add DLPTR
   738 23BF A8				tay
   739 23C0 AD 0D 25			lda DLIST+1
   740 23C3 6D 5F 54			adc DLPTR+1
   741 23C6 85 91			sta :bp+1
   742 23C8 A5 A2			lda :STACKORIGIN+10
   743 23CA 91 90			sta (:bp),y
   744
   745 				; optimize FAIL (0, GR10PP), line = 100
   746 23CC EE 5E 54			inc DLPTR
   747 23CF D0 03			sne
   748 23D1 EE 5F 54			inc DLPTR+1
   749
   750 				; ------------------------------------------------------------
   751
   752 = 5464			W	= DATAORIGIN+$0016
   753
   754 = 5464			@VarData	= W
   755 = 0002			@VarDataSize	= 2
   756
   757 23D4			@exit
   758 					.ifdef @new
   759 					lda <@VarData
   760 					sta :ztmp
   761 					lda >@VarData
   762 					ldy #@VarDataSize-1
   763 					jmp @FreeMem
   764 					eif
   765 23D4 60				rts						; ret
   766 				.endl
   767
   768 23D5			.local	BUILDDISPLAYLIST				; PROCEDURE
   769
   770 				; ------------------------------------------------------------
   771
   772 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   773 				; as Pointer
   774 23D5 B5 98 8D 6B 54		mva :STACKORIGIN,x BLANKS
   775 23DA CA				dex						; sub bx, 1
   776
   777 				; ------------------------------------------------------------
   778
   779 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   780 				; as Pointer
   781 23DB B5 98 8D 6A 54		mva :STACKORIGIN,x LINES
   782 23E0 CA				dex						; sub bx, 1
   783
   784 				; ------------------------------------------------------------
   785
   786 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   787 				; as Pointer
   788 23E1 B5 98 8D 68 54		mva :STACKORIGIN,x VRAMADDRESS
   789 23E6 B5 A8 8D 69 54		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   790 23EB CA				dex						; sub bx, 1
   791
   792 				; ------------------------------------------------------------
   793
   794 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   795 				; as Pointer
   796 23EC B5 98 8D 66 54		mva :STACKORIGIN,x DLISTADDRESS
   797 23F1 B5 A8 8D 67 54		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   798 23F6 CA				dex						; sub bx, 1
   799
   800 				; optimize OK (GR10PP), line = 105
   801
   802 23F7 AD 66 54 8D 0C 25		mva DLISTADDRESS DLIST
   803 23FD AD 67 54 8D 0D 25		mva DLISTADDRESS+1 DLIST+1
   804
   805 				; optimize OK (GR10PP), line = 106
   806
   807 2403 A9 00 8D 5E 54		mva #$00 DLPTR
   808 2408 8D 5F 54			sta DLPTR+1
   809
   810 				; --- WhileProlog
   811 240B 4C 2B 24			jmp l_0134
   812 240E			l_0135
   813
   814 				; optimize OK (GR10PP), line = 108
   815
   816 240E AD 6B 54			lda BLANKS
   817 2411 C9 01			cmp #$01
   818 2413 D0 0B			jne l_0147
   819
   820 				; optimize FAIL ('DLPOKE', GR10PP), line = 108
   821 2415 E8				inx
   822 2416 A9 F0 95 98			mva #$F0 :STACKORIGIN,x
   823 241A 20 67 23			jsr DLPOKE
   824 241D 4C 28 24			jmp l_0153
   825 2420			l_0147
   826
   827 				; optimize FAIL ('DLPOKE', GR10PP), line = 109
   828 2420 E8				inx
   829 2421 A9 70 95 98			mva #$70 :STACKORIGIN,x
   830 2425 20 67 23			jsr DLPOKE
   831 2428			l_0153
   832
   833 				; optimize FAIL (0, GR10PP), line = 110
   834 2428 CE 6B 54			dec BLANKS
   835 242B			l_0134
   836
   837 				; optimize OK (GR10PP), line = 107
   838
   839 242B AD 6B 54			lda BLANKS
   840 242E D0 DE			jne l_0135
   841
   842 				; optimize FAIL ('DLPOKE', GR10PP), line = 112
   843 2430 E8				inx
   844 2431 A9 6F 95 98			mva #$6F :STACKORIGIN,x
   845 2435 20 67 23			jsr DLPOKE
   846
   847 				; optimize FAIL ('DLPOKEW', GR10PP), line = 113
   848 2438 E8				inx
   849 2439 AD 68 54 95 98		mva VRAMADDRESS :STACKORIGIN,x
   850 243E AD 69 54 95 A8		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   851 2443 20 8B 23			jsr DLPOKEW
   852
   853 				; optimize FAIL ('DLPOKE', GR10PP), line = 114
   854 2446 E8				inx
   855 2447 A9 8F 95 98			mva #$8F :STACKORIGIN,x
   856 244B 20 67 23			jsr DLPOKE
   857
   858 				; optimize FAIL (0, GR10PP), line = 115
   859 244E CE 6A 54			dec LINES
   860
   861 				; --- WhileProlog
   862 2451 4C 67 24			jmp l_0172
   863 2454			l_0173
   864
   865 				; optimize FAIL ('DLPOKE', GR10PP), line = 117
   866 2454 E8				inx
   867 2455 A9 2F 95 98			mva #$2F :STACKORIGIN,x
   868 2459 20 67 23			jsr DLPOKE
   869
   870 				; optimize FAIL ('DLPOKE', GR10PP), line = 118
   871 245C E8				inx
   872 245D A9 8F 95 98			mva #$8F :STACKORIGIN,x
   873 2461 20 67 23			jsr DLPOKE
   874
   875 				; optimize FAIL (0, GR10PP), line = 119
   876 2464 CE 6A 54			dec LINES
   877 2467			l_0172
   878
   879 				; optimize OK (GR10PP), line = 116
   880
   881 2467 AD 6A 54			lda LINES
   882 246A D0 E8			jne l_0173
   883
   884 				; optimize FAIL ('DLPOKE', GR10PP), line = 121
   885 246C E8				inx
   886 246D A9 70 95 98			mva #$70 :STACKORIGIN,x
   887 2471 20 67 23			jsr DLPOKE
   888
   889 				; optimize FAIL ('DLPOKE', GR10PP), line = 122
   890 2474 E8				inx
   891 2475 A9 41 95 98			mva #$41 :STACKORIGIN,x
   892 2479 20 67 23			jsr DLPOKE
   893
   894 				; optimize FAIL ('DLPOKEW', GR10PP), line = 123
   895 247C E8				inx
   896 247D AD 66 54 95 98		mva DLISTADDRESS :STACKORIGIN,x
   897 2482 AD 67 54 95 A8		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   898 2487 20 8B 23			jsr DLPOKEW
   899
   900 				; ------------------------------------------------------------
   901
   902 = 5466			DLISTADDRESS	= DATAORIGIN+$0018
   903 = 5468			VRAMADDRESS	= DATAORIGIN+$001A
   904 = 546A			LINES	= DATAORIGIN+$001C
   905 = 546B			BLANKS	= DATAORIGIN+$001D
   906
   907 = 5466			@VarData	= DLISTADDRESS
   908 = 0006			@VarDataSize	= 6
   909
   910 248A			@exit
   911 					.ifdef @new
   912 					lda <@VarData
   913 					sta :ztmp
   914 					lda >@VarData
   915 					ldy #@VarDataSize-1
   916 					jmp @FreeMem
   917 					eif
   918 248A 60				rts						; ret
   919 				.endl
   920
   921 248B			.local	GR10INIT					; PROCEDURE
   922
   923 				; ------------------------------------------------------------
   924
   925 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   926 				; as Pointer
   927 248B B5 98 8D 72 54		mva :STACKORIGIN,x BLANKS
   928 2490 CA				dex						; sub bx, 1
   929
   930 				; ------------------------------------------------------------
   931
   932 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   933 				; as Pointer
   934 2491 B5 98 8D 71 54		mva :STACKORIGIN,x PIXELHEIGHT
   935 2496 CA				dex						; sub bx, 1
   936
   937 				; ------------------------------------------------------------
   938
   939 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   940 				; as Pointer
   941 2497 B5 98 8D 70 54		mva :STACKORIGIN,x LINES
   942 249C CA				dex						; sub bx, 1
   943
   944 				; ------------------------------------------------------------
   945
   946 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   947 				; as Pointer
   948 249D B5 98 8D 6E 54		mva :STACKORIGIN,x VRAMADDRESS
   949 24A2 B5 A8 8D 6F 54		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   950 24A7 CA				dex						; sub bx, 1
   951
   952 				; ------------------------------------------------------------
   953
   954 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   955 				; as Pointer
   956 24A8 B5 98 8D 6C 54		mva :STACKORIGIN,x DLISTADDRESS
   957 24AD B5 A8 8D 6D 54		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   958 24B2 CA				dex						; sub bx, 1
   959
   960 				; optimize FAIL ('BUILDDISPLAYLIST', GR10PP), line = 128
   961 24B3 E8				inx
   962 24B4 AD 6C 54 95 98		mva DLISTADDRESS :STACKORIGIN,x
   963 24B9 AD 6D 54 95 A8		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   964 24BE E8				inx
   965 24BF AD 6E 54 95 98		mva VRAMADDRESS :STACKORIGIN,x
   966 24C4 AD 6F 54 95 A8		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   967 24C9 E8				inx
   968 24CA AD 70 54 95 98		mva LINES :STACKORIGIN,x
   969 24CF E8				inx
   970 24D0 AD 72 54 95 98		mva BLANKS :STACKORIGIN,x
   971 24D5 20 D5 23			jsr BUILDDISPLAYLIST
   972
   973 				; optimize FAIL ('SETPIXELHEIGHT', GR10PP), line = 129
   974 24D8 E8				inx
   975 24D9 AD 71 54 95 98		mva PIXELHEIGHT :STACKORIGIN,x
   976 24DE 20 3F 23			jsr SETPIXELHEIGHT
   977
   978 				; optimize OK (GR10PP), line = 130
   979
   980 24E1 AD 6C 54 8D 30 02		mva DLISTADDRESS ATARI.SDLSTL
   981 24E7 AD 6D 54 8D 31 02		mva DLISTADDRESS+1 ATARI.SDLSTL+1
   982
   983 				; optimize OK (GR10PP), line = 131
   984
   985 24ED AD 6E 54 85 58		mva VRAMADDRESS ATARI.SAVMSC
   986 24F2 AD 6F 54 85 59		mva VRAMADDRESS+1 ATARI.SAVMSC+1
   987
   988 				; optimize OK (GR10PP), line = 132
   989
   990 24F7 A9 16 8D 00 02		mva <G10DLI VDSLST
   991 24FC A9 23 8D 01 02		mva >G10DLI VDSLST+1
   992
   993 				; optimize OK (GR10PP), line = 133
   994
   995 2501 A9 C0 8D 0E D4		mva #$C0 ATARI.NMIEN
   996
   997 				; optimize OK (GR10PP), line = 134
   998
   999 2506 A9 81 8D 6F 02		mva #$81 ATARI.GPRIOR
  1000
  1001 				; ------------------------------------------------------------
  1002
  1003 = 546C			DLISTADDRESS	= DATAORIGIN+$001E
  1004 = 546E			VRAMADDRESS	= DATAORIGIN+$0020
  1005 = 5470			LINES	= DATAORIGIN+$0022
  1006 = 5471			PIXELHEIGHT	= DATAORIGIN+$0023
  1007 = 5472			BLANKS	= DATAORIGIN+$0024
  1008
  1009 = 546C			@VarData	= DLISTADDRESS
  1010 = 0007			@VarDataSize	= 7
  1011
  1012 250B			@exit
  1013 					.ifdef @new
  1014 					lda <@VarData
  1015 					sta :ztmp
  1016 					lda >@VarData
  1017 					ldy #@VarDataSize-1
  1018 					jmp @FreeMem
  1019 					eif
  1020 250B 60				rts						; ret
  1021 				.endl
  1022
  1023 				; ------------------------------------------------------------
  1024
  1025 = 0070			DL_BLANK8	= $70
  1026 = 0080			DL_DLI	= $80
  1027 = 0040			DL_LMS	= $40
  1028 = 0020			DL_VSCROLL	= $20
  1029 = 000F			DL_MODE_320X192G2	= $0F
  1030 = 0041			DL_JVB	= $41
  1031 = 545D			adr.DLIST	= DATAORIGIN+$000F
  1032 250C			.var DLIST	= adr.DLIST .word
  1033 = 545E			DLPTR	= DATAORIGIN+$0010
  1034
  1035 = 250C 5D 54		DLIST
  1035 				.endl							; UNIT GR10PP
  1036
  1037 				; ------------------------------------------------------------
  1038
  1039 250E			.local	TYPES						; UNIT
  1040
  1041 				; ------------------------------------------------------------
  1042
  1043 				.endl							; UNIT TYPES
  1044
  1045 				; ------------------------------------------------------------
  1046
  1047 250E			.local	GRAPH						; UNIT
  1048
  1049 250E			.local	INITGRAPH_01D5					; PROCEDURE | OVERLOAD
  1050
  1051 				; ------------------------------------------------------------
  1052
  1053 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1054 				; as Pointer
  1055 250E B5 98 8D 90 54		mva :STACKORIGIN,x MODE
  1056 2513 CA				dex						; sub bx, 1
  1057
  1058 				; ---------------------  ASM Block 063  ---------------------
  1059
  1060
  1061 2514 8A 48			txa:pha
  1062
  1063 2516 AD 90 54			lda mode
  1064 2519 8D 54 54			sta MAIN.SYSTEM.GraphMode
  1065 251C 29 0F			and #$0f
  1066 251E A8				tay
  1067
  1068 251F A2 60			ldx #$60		; 6*16
  1069 2521 AD 90 54			lda mode		; %00010000 with text window
  1070 2524 29 10			and #$10
  1071 2526 49 10			eor #$10
  1072 2528 09 02			ora #2			; read
  1073
  1074 					.nowarn @GRAPHICS
  1074 252A 20 6E 20		 JSR @GRAPHICS
  1075
  1076 252D 8C 7B 54			sty GraphResult
  1077 					
  1078 = EE6D			tlshc	equ $ee6d
  1079
  1080 2530 A6 57			ldx dindex
  1081 2532 BC 6D EE			ldy tlshc,x
  1082 2535 A9 05			lda #5
  1083 2537 0A			shift	asl @
  1084 2538 88				dey
  1085 2539 D0 FC			bne shift
  1086
  1087 253B 8D 8F 54			sta SCANLINE_WIDTH
  1088
  1089 				; Fox/TQA
  1090
  1091 = 0057			dindex	equ $57
  1092 = EE7D			tmccn	equ $ee7d
  1093 = EE8D			tmrcn	equ $ee8d
  1094
  1095 253E A6 57			ldx dindex
  1096 2540 BD 7D EE			lda tmccn,x
  1097 2543 BC 8D EE			ldy tmrcn,x
  1098 2546 A2 00			ldx #0
  1099 2548 C9 40			cmp #<320
  1100 254A D0 01 E8			sne:inx
  1101 				    
  1102 				; X:A = horizontal resolution
  1103 				; Y = vertical resolution
  1104
  1105 254D 20 AE 20			@SCREENSIZE
  1106
  1107 2550 68 AA			pla:tax
  1108
  1109
  1110 				; ------------------------------------------------------------
  1111
  1112 = 5490			MODE	= DATAORIGIN+$0042
  1113
  1114 = 5490			@VarData	= MODE
  1115 = 0001			@VarDataSize	= 1
  1116
  1117 2552			@exit
  1118 					.ifdef @new
  1119 					lda <@VarData
  1120 					sta :ztmp
  1121 					lda >@VarData
  1122 					ldy #@VarDataSize-1
  1123 					jmp @FreeMem
  1124 					eif
  1125 2552 60				rts						; ret
  1126 				.endl
  1127
  1128 2553			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
  1129
  1130 				; ------------------------------------------------------------
  1131
  1132 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1133 				; as Pointer
  1134 2553 B5 98 8D 91 54		mva :STACKORIGIN,x COLOR
  1135 2558 CA				dex						; sub bx, 1
  1136
  1137 				; ---------------------  ASM Block 065  ---------------------
  1138
  1139 2559 AD 91 54 8D 66 20		mva color @COMMAND.colscr
  1140 255F 8D 7C 54			sta GetColor
  1141
  1142
  1143 				; ------------------------------------------------------------
  1144
  1145 = 5491			COLOR	= DATAORIGIN+$0043
  1146
  1147 = 5491			@VarData	= COLOR
  1148 = 0001			@VarDataSize	= 1
  1149
  1150 2562			@exit
  1151 					.ifdef @new
  1152 					lda <@VarData
  1153 					sta :ztmp
  1154 					lda >@VarData
  1155 					ldy #@VarDataSize-1
  1156 					jmp @FreeMem
  1157 					eif
  1158 2562 60				rts						; ret
  1159 				.endl
  1160
  1161 2563			.local	PUTPIXEL_01E0					; PROCEDURE | ASSEMBLER | OVERLOAD
  1162
  1163 				; ------------------------------------------------------------
  1164
  1165 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1166 				; as Pointer
  1167 2563 B5 98 8D 94 54		mva :STACKORIGIN,x Y
  1168 2568 B5 A8 8D 95 54		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1169 256D CA				dex						; sub bx, 1
  1170
  1171 				; ------------------------------------------------------------
  1172
  1173 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1174 				; as Pointer
  1175 256E B5 98 8D 92 54		mva :STACKORIGIN,x X
  1176 2573 B5 A8 8D 93 54		mva :STACKORIGIN+STACKWIDTH,x X+1
  1177 2578 CA				dex						; sub bx, 1
  1178
  1179 				; ---------------------  ASM Block 066  ---------------------
  1180
  1181 2579 8A 48			txa:pha
  1182 				{
  1183 257B AD 95 54			lda y+1
  1184 257E 30 33			bmi stop
  1185 2580 CD 51 54			cmp MAIN.SYSTEM.ScreenHeight+1
  1186 2583 D0 06			bne sk0
  1187 2585 AD 94 54			lda y
  1188 2588 CD 50 54			cmp MAIN.SYSTEM.ScreenHeight
  1189 258B			sk0
  1190 258B B0 26			bcs stop
  1191
  1192 258D AD 93 54			lda x+1
  1193 2590 30 21			bmi stop
  1194 2592 CD 4F 54			cmp MAIN.SYSTEM.ScreenWidth+1
  1195 2595 D0 06			bne sk1
  1196 2597 AD 92 54			lda x
  1197 259A CD 4E 54			cmp MAIN.SYSTEM.ScreenWidth
  1198 259D			sk1
  1199 259D B0 14			bcs stop
  1200
  1201 259F AD 92 54 85 55 AD + 	mwa x colcrs
  1202 25A9 AD 94 54 85 54		mva y rowcrs
  1203
  1204 25AE A9 0B			lda #@IDput
  1205
  1206 25B0 20 50 20			jsr @COMMAND
  1207
  1208 25B3 68 AA		stop	pla:tax
  1209
  1210
  1211 				; ------------------------------------------------------------
  1212
  1213 = 5492			X	= DATAORIGIN+$0044
  1214 = 5494			Y	= DATAORIGIN+$0046
  1215
  1216 = 5492			@VarData	= X
  1217 = 0004			@VarDataSize	= 4
  1218
  1219 25B5			@exit
  1220 					.ifdef @new
  1221 					lda <@VarData
  1222 					sta :ztmp
  1223 					lda >@VarData
  1224 					ldy #@VarDataSize-1
  1225 					jmp @FreeMem
  1226 					eif
  1227 25B5 60				rts						; ret
  1228 				.endl
  1229
  1230 25B6			.local	MOVETO						; PROCEDURE | ASSEMBLER
  1231
  1232 				; ------------------------------------------------------------
  1233
  1234 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1235 				; as Pointer
  1236 25B6 B5 98 8D 98 54		mva :STACKORIGIN,x Y
  1237 25BB B5 A8 8D 99 54		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1238 25C0 CA				dex						; sub bx, 1
  1239
  1240 				; ------------------------------------------------------------
  1241
  1242 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1243 				; as Pointer
  1244 25C1 B5 98 8D 96 54		mva :STACKORIGIN,x X
  1245 25C6 B5 A8 8D 97 54		mva :STACKORIGIN+STACKWIDTH,x X+1
  1246 25CB CA				dex						; sub bx, 1
  1247
  1248 				; ---------------------  ASM Block 069  ---------------------
  1249
  1250 25CC AD 99 54			lda y+1
  1251 25CF 10 08			bpl _0
  1252
  1253 25D1 A9 00			lda #0
  1254 25D3 8D 98 54			sta y
  1255 25D6 8D 99 54			sta y+1
  1256 25D9			_0
  1257 25D9 AD 97 54			lda x+1
  1258 25DC 10 08			bpl _1
  1259
  1260 25DE A9 00			lda #0
  1261 25E0 8D 96 54			sta x
  1262 25E3 8D 97 54			sta x+1
  1263 25E6			_1
  1264 25E6 AD 99 54 CD 51 54 + 	cpw y main.system.ScreenHeight
  1265 25F4 90 11			bcc _2
  1266
  1267 25F6 38 AD 50 54 E9 01 + 	sbw main.system.ScreenHeight #1 y
  1268 2607			_2
  1269 2607 AD 97 54 CD 4F 54 + 	cpw x main.system.ScreenWidth
  1270 2615 90 11			bcc _3
  1271
  1272 2617 38 AD 4E 54 E9 01 + 	sbw main.system.ScreenWidth #1 x
  1273 2628			_3
  1274 2628 AD 96 54 8D 89 54 + 	mwa x CurrentX
  1275 2634 AD 98 54 8D 8B 54 + 	mwa y CurrentY
  1276
  1277
  1278 				; ------------------------------------------------------------
  1279
  1280 = 5496			X	= DATAORIGIN+$0048
  1281 = 5498			Y	= DATAORIGIN+$004A
  1282
  1283 = 5496			@VarData	= X
  1284 = 0004			@VarDataSize	= 4
  1285
  1286 2640			@exit
  1287 					.ifdef @new
  1288 					lda <@VarData
  1289 					sta :ztmp
  1290 					lda >@VarData
  1291 					ldy #@VarDataSize-1
  1292 					jmp @FreeMem
  1293 					eif
  1294 2640 60				rts						; ret
  1295 				.endl
  1296
  1297 2641			.local	LINETO						; PROCEDURE | ASSEMBLER
  1298
  1299 				; ------------------------------------------------------------
  1300
  1301 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1302 				; as Pointer
  1303 2641 B5 98 8D 9C 54		mva :STACKORIGIN,x Y
  1304 2646 B5 A8 8D 9D 54		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1305 264B CA				dex						; sub bx, 1
  1306
  1307 				; ------------------------------------------------------------
  1308
  1309 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1310 				; as Pointer
  1311 264C B5 98 8D 9A 54		mva :STACKORIGIN,x X
  1312 2651 B5 A8 8D 9B 54		mva :STACKORIGIN+STACKWIDTH,x X+1
  1313 2656 CA				dex						; sub bx, 1
  1314
  1315 				; ---------------------  ASM Block 070  ---------------------
  1316
  1317 2657 AD 9D 54			lda y+1
  1318 265A 10 08			bpl _0
  1319
  1320 265C A9 00			lda #0
  1321 265E 8D 9C 54			sta y
  1322 2661 8D 9D 54			sta y+1
  1323 2664			_0
  1324 2664 AD 9B 54			lda x+1
  1325 2667 10 08			bpl _1
  1326
  1327 2669 A9 00			lda #0
  1328 266B 8D 9A 54			sta x
  1329 266E 8D 9B 54			sta x+1
  1330 2671			_1
  1331 2671 AD 9D 54 CD 51 54 + 	cpw y main.system.ScreenHeight
  1332 267F 90 11			bcc _2
  1333
  1334 2681 38 AD 50 54 E9 01 + 	sbw main.system.ScreenHeight #1 y
  1335 2692			_2
  1336 2692 AD 9B 54 CD 4F 54 + 	cpw x main.system.ScreenWidth
  1337 26A0 90 11			bcc _3
  1338
  1339 26A2 38 AD 4E 54 E9 01 + 	sbw main.system.ScreenWidth #1 x
  1340 26B3			_3
  1341 26B3 8A 48			txa:pha
  1342
  1343 26B5 AD 89 54 85 55 AD + 	mwa CurrentX colcrs
  1344 26BF AD 8B 54 85 54		mva CurrentY rowcrs
  1345
  1346 26C4 A9 0B			lda #@IDput
  1347
  1348 26C6 20 50 20			jsr @COMMAND
  1349
  1350 26C9 AD 9A 54			lda x
  1351 26CC 85 55			sta colcrs
  1352 26CE 8D 89 54			sta CurrentX
  1353 26D1 AD 9B 54			lda x+1
  1354 26D4 85 56			sta colcrs+1
  1355 26D6 8D 8A 54			sta CurrentX+1
  1356
  1357 26D9 AD 9C 54 85 54		mva y rowcrs
  1358 26DE 8D 8B 54			sta CurrentY
  1359 26E1 AD 9D 54			lda y+1
  1360 26E4 8D 8C 54			sta CurrentY+1
  1361
  1362 26E7 A9 11			lda #@IDdraw
  1363
  1364 26E9 20 50 20			jsr @COMMAND
  1365
  1366 26EC 68 AA			pla:tax
  1367
  1368
  1369 				; ------------------------------------------------------------
  1370
  1371 = 549A			X	= DATAORIGIN+$004C
  1372 = 549C			Y	= DATAORIGIN+$004E
  1373
  1374 = 549A			@VarData	= X
  1375 = 0004			@VarDataSize	= 4
  1376
  1377 26EE			@exit
  1378 					.ifdef @new
  1379 					lda <@VarData
  1380 					sta :ztmp
  1381 					lda >@VarData
  1382 					ldy #@VarDataSize-1
  1383 					jmp @FreeMem
  1384 					eif
  1385 26EE 60				rts						; ret
  1386 				.endl
  1387
  1388 26EF			.local	LINE						; PROCEDURE
  1389
  1390 				; ------------------------------------------------------------
  1391
  1392 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1393 				; as Pointer
  1394 26EF B5 98 8D A4 54		mva :STACKORIGIN,x Y2
  1395 26F4 B5 A8 8D A5 54		mva :STACKORIGIN+STACKWIDTH,x Y2+1
  1396 26F9 CA				dex						; sub bx, 1
  1397
  1398 				; ------------------------------------------------------------
  1399
  1400 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1401 				; as Pointer
  1402 26FA B5 98 8D A2 54		mva :STACKORIGIN,x X2
  1403 26FF B5 A8 8D A3 54		mva :STACKORIGIN+STACKWIDTH,x X2+1
  1404 2704 CA				dex						; sub bx, 1
  1405
  1406 				; ------------------------------------------------------------
  1407
  1408 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1409 				; as Pointer
  1410 2705 B5 98 8D A0 54		mva :STACKORIGIN,x Y1
  1411 270A B5 A8 8D A1 54		mva :STACKORIGIN+STACKWIDTH,x Y1+1
  1412 270F CA				dex						; sub bx, 1
  1413
  1414 				; ------------------------------------------------------------
  1415
  1416 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1417 				; as Pointer
  1418 2710 B5 98 8D 9E 54		mva :STACKORIGIN,x X1
  1419 2715 B5 A8 8D 9F 54		mva :STACKORIGIN+STACKWIDTH,x X1+1
  1420 271A CA				dex						; sub bx, 1
  1421
  1422 				; optimize OK (GRAPH), line = 312
  1423
  1424 271B AD 89 54 8D A6 54		mva CURRENTX X
  1425 2721 AD 8A 54 8D A7 54		mva CURRENTX+1 X+1
  1426
  1427 				; optimize OK (GRAPH), line = 313
  1428
  1429 2727 AD 8B 54 8D A8 54		mva CURRENTY Y
  1430 272D AD 8C 54 8D A9 54		mva CURRENTY+1 Y+1
  1431
  1432 				; optimize FAIL ('MOVETO', GRAPH), line = 315
  1433 2733 E8				inx
  1434 2734 AD 9E 54 95 98		mva X1 :STACKORIGIN,x
  1435 2739 AD 9F 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  1436 273E E8				inx
  1437 273F AD A0 54 95 98		mva Y1 :STACKORIGIN,x
  1438 2744 AD A1 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  1439 2749 20 B6 25			jsr MOVETO
  1440
  1441 				; optimize FAIL ('LINETO', GRAPH), line = 316
  1442 274C E8				inx
  1443 274D AD A2 54 95 98		mva X2 :STACKORIGIN,x
  1444 2752 AD A3 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  1445 2757 E8				inx
  1446 2758 AD A4 54 95 98		mva Y2 :STACKORIGIN,x
  1447 275D AD A5 54 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  1448 2762 20 41 26			jsr LINETO
  1449
  1450 				; optimize OK (GRAPH), line = 318
  1451
  1452 2765 AD A6 54 8D 89 54		mva X CURRENTX
  1453 276B AD A7 54 8D 8A 54		mva X+1 CURRENTX+1
  1454
  1455 				; optimize OK (GRAPH), line = 319
  1456
  1457 2771 AD A8 54 8D 8B 54		mva Y CURRENTY
  1458 2777 AD A9 54 8D 8C 54		mva Y+1 CURRENTY+1
  1459
  1460 				; ------------------------------------------------------------
  1461
  1462 = 549E			X1	= DATAORIGIN+$0050
  1463 = 54A0			Y1	= DATAORIGIN+$0052
  1464 = 54A2			X2	= DATAORIGIN+$0054
  1465 = 54A4			Y2	= DATAORIGIN+$0056
  1466 = 54A6			X	= DATAORIGIN+$0058
  1467 = 54A8			Y	= DATAORIGIN+$005A
  1468
  1469 = 549E			@VarData	= X1
  1470 = 000C			@VarDataSize	= 12
  1471
  1472 277D			@exit
  1473 					.ifdef @new
  1474 					lda <@VarData
  1475 					sta :ztmp
  1476 					lda >@VarData
  1477 					ldy #@VarDataSize-1
  1478 					jmp @FreeMem
  1479 					eif
  1480 277D 60				rts						; ret
  1481 				.endl
  1482
  1483 277E			.local	HLINE						; PROCEDURE
  1484
  1485 				; ------------------------------------------------------------
  1486
  1487 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1488 				; as Pointer
  1489 277E B5 98 8D AE 54		mva :STACKORIGIN,x Y
  1490 2783 B5 A8 8D AF 54		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1491 2788 CA				dex						; sub bx, 1
  1492
  1493 				; ------------------------------------------------------------
  1494
  1495 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1496 				; as Pointer
  1497 2789 B5 98 8D AC 54		mva :STACKORIGIN,x X2
  1498 278E B5 A8 8D AD 54		mva :STACKORIGIN+STACKWIDTH,x X2+1
  1499 2793 CA				dex						; sub bx, 1
  1500
  1501 				; ------------------------------------------------------------
  1502
  1503 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1504 				; as Pointer
  1505 2794 B5 98 8D AA 54		mva :STACKORIGIN,x X1
  1506 2799 B5 A8 8D AB 54		mva :STACKORIGIN+STACKWIDTH,x X1+1
  1507 279E CA				dex						; sub bx, 1
  1508
  1509 				; optimize FAIL ('LINE', GRAPH), line = 326
  1510 279F E8				inx
  1511 27A0 AD AA 54 95 98		mva X1 :STACKORIGIN,x
  1512 27A5 AD AB 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  1513 27AA E8				inx
  1514 27AB AD AE 54 95 98		mva Y :STACKORIGIN,x
  1515 27B0 AD AF 54 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
  1516 27B5 E8				inx
  1517 27B6 AD AC 54 95 98		mva X2 :STACKORIGIN,x
  1518 27BB AD AD 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  1519 27C0 E8				inx
  1520 27C1 AD AE 54 95 98		mva Y :STACKORIGIN,x
  1521 27C6 AD AF 54 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
  1522 27CB 20 EF 26			jsr LINE
  1523
  1524 				; ------------------------------------------------------------
  1525
  1526 = 54AA			X1	= DATAORIGIN+$005C
  1527 = 54AC			X2	= DATAORIGIN+$005E
  1528 = 54AE			Y	= DATAORIGIN+$0060
  1529
  1530 = 54AA			@VarData	= X1
  1531 = 0006			@VarDataSize	= 6
  1532
  1533 27CE			@exit
  1534 					.ifdef @new
  1535 					lda <@VarData
  1536 					sta :ztmp
  1537 					lda >@VarData
  1538 					ldy #@VarDataSize-1
  1539 					jmp @FreeMem
  1540 					eif
  1541 27CE 60				rts						; ret
  1542 				.endl
  1543
  1544 27CF			.local	ELLIPSE_0244					; PROCEDURE | OVERLOAD
  1545
  1546 				; ------------------------------------------------------------
  1547
  1548 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1549 				; as Pointer
  1550 27CF B5 98 8D B6 54		mva :STACKORIGIN,x B
  1551 27D4 B5 A8 8D B7 54		mva :STACKORIGIN+STACKWIDTH,x B+1
  1552 27D9 CA				dex						; sub bx, 1
  1553
  1554 				; ------------------------------------------------------------
  1555
  1556 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1557 				; as Pointer
  1558 27DA B5 98 8D B4 54		mva :STACKORIGIN,x A
  1559 27DF B5 A8 8D B5 54		mva :STACKORIGIN+STACKWIDTH,x A+1
  1560 27E4 CA				dex						; sub bx, 1
  1561
  1562 				; ------------------------------------------------------------
  1563
  1564 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1565 				; as Pointer
  1566 27E5 B5 98 8D B2 54		mva :STACKORIGIN,x Y0
  1567 27EA B5 A8 8D B3 54		mva :STACKORIGIN+STACKWIDTH,x Y0+1
  1568 27EF CA				dex						; sub bx, 1
  1569
  1570 				; ------------------------------------------------------------
  1571
  1572 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1573 				; as Pointer
  1574 27F0 B5 98 8D B0 54		mva :STACKORIGIN,x X0
  1575 27F5 B5 A8 8D B1 54		mva :STACKORIGIN+STACKWIDTH,x X0+1
  1576 27FA CA				dex						; sub bx, 1
  1577
  1578 27FB 4C AF 28			jmp l_0253
  1579
  1580 27FE			.local	DRAWELLIPSE					; PROCEDURE
  1581
  1582 				; optimize OK (graph.inc), line = 324
  1583
  1584 27FE AD B0 54			lda X0
  1585 2801 18 6D C4 54			add X
  1586 2805 8D D8 54			sta TXP
  1587 2808 AD B1 54			lda X0+1
  1588 280B 6D C5 54			adc X+1
  1589 280E 8D D9 54			sta TXP+1
  1590
  1591 				; optimize OK (graph.inc), line = 324
  1592
  1593 2811 AD B2 54			lda Y0
  1594 2814 18 6D C6 54			add Y
  1595 2818 8D DA 54			sta TYP
  1596 281B AD B3 54			lda Y0+1
  1597 281E 6D C7 54			adc Y+1
  1598 2821 8D DB 54			sta TYP+1
  1599
  1600 				; optimize OK (graph.inc), line = 325
  1601
  1602 2824 AD B0 54			lda X0
  1603 2827 38 ED C4 54			sub X
  1604 282B 8D DC 54			sta TXM
  1605 282E AD B1 54			lda X0+1
  1606 2831 ED C5 54			sbc X+1
  1607 2834 8D DD 54			sta TXM+1
  1608
  1609 				; optimize OK (graph.inc), line = 325
  1610
  1611 2837 AD B2 54			lda Y0
  1612 283A 38 ED C6 54			sub Y
  1613 283E 8D DE 54			sta TYM
  1614 2841 AD B3 54			lda Y0+1
  1615 2844 ED C7 54			sbc Y+1
  1616 2847 8D DF 54			sta TYM+1
  1617
  1618 				; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 327
  1619 284A E8				inx
  1620 284B AD D8 54 95 98		mva TXP :STACKORIGIN,x
  1621 2850 AD D9 54 95 A8		mva TXP+1 :STACKORIGIN+STACKWIDTH,x
  1622 2855 E8				inx
  1623 2856 AD DA 54 95 98		mva TYP :STACKORIGIN,x
  1624 285B AD DB 54 95 A8		mva TYP+1 :STACKORIGIN+STACKWIDTH,x
  1625 2860 20 63 25			jsr PUTPIXEL_01E0
  1626
  1627 				; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 328
  1628 2863 E8				inx
  1629 2864 AD DC 54 95 98		mva TXM :STACKORIGIN,x
  1630 2869 AD DD 54 95 A8		mva TXM+1 :STACKORIGIN+STACKWIDTH,x
  1631 286E E8				inx
  1632 286F AD DA 54 95 98		mva TYP :STACKORIGIN,x
  1633 2874 AD DB 54 95 A8		mva TYP+1 :STACKORIGIN+STACKWIDTH,x
  1634 2879 20 63 25			jsr PUTPIXEL_01E0
  1635
  1636 				; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 329
  1637 287C E8				inx
  1638 287D AD DC 54 95 98		mva TXM :STACKORIGIN,x
  1639 2882 AD DD 54 95 A8		mva TXM+1 :STACKORIGIN+STACKWIDTH,x
  1640 2887 E8				inx
  1641 2888 AD DE 54 95 98		mva TYM :STACKORIGIN,x
  1642 288D AD DF 54 95 A8		mva TYM+1 :STACKORIGIN+STACKWIDTH,x
  1643 2892 20 63 25			jsr PUTPIXEL_01E0
  1644
  1645 				; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 330
  1646 2895 E8				inx
  1647 2896 AD D8 54 95 98		mva TXP :STACKORIGIN,x
  1648 289B AD D9 54 95 A8		mva TXP+1 :STACKORIGIN+STACKWIDTH,x
  1649 28A0 E8				inx
  1650 28A1 AD DE 54 95 98		mva TYM :STACKORIGIN,x
  1651 28A6 AD DF 54 95 A8		mva TYM+1 :STACKORIGIN+STACKWIDTH,x
  1652 28AB 20 63 25			jsr PUTPIXEL_01E0
  1653
  1654 				; ------------------------------------------------------------
  1655
  1656 = 54D8			TXP	= DATAORIGIN+$008A
  1657 = 54DA			TYP	= DATAORIGIN+$008C
  1658 = 54DC			TXM	= DATAORIGIN+$008E
  1659 = 54DE			TYM	= DATAORIGIN+$0090
  1660
  1661 = 54D8			@VarData	= TXP
  1662 = 0008			@VarDataSize	= 8
  1663
  1664 28AE			@exit
  1665 					.ifdef @new
  1666 					lda <@VarData
  1667 					sta :ztmp
  1668 					lda >@VarData
  1669 					ldy #@VarDataSize-1
  1670 					jmp @FreeMem
  1671 					eif
  1672 28AE 60				rts						; ret
  1673 				.endl
  1674 28AF			l_0253
  1675
  1676 				; optimize OK (graph.inc), line = 334
  1677
  1678 28AF AD B5 54			lda A+1
  1679 28B2 0D B4 54			ora A
  1680 28B5 F0 08			jeq l_02AFx
  1681 28B7 AD B7 54			lda B+1
  1682 28BA 0D B6 54			ora B
  1683 28BD D0 03			jne l_02AF
  1684 28BF			l_02AFx
  1685
  1686 28BF 4C 21 2C			jmp @exit					; exit
  1687 28C2			l_02AF
  1688
  1689 				; optimize OK (graph.inc), line = 336
  1690
  1691 28C2 AD B4 54			lda A
  1692 28C5 85 8C			sta :ecx
  1693 28C7 85 84			sta :eax
  1694 28C9 AD B5 54			lda A+1
  1695 28CC 85 8D			sta :ecx+1
  1696 28CE 85 85			sta :eax+1
  1697 					.ifdef fmulinit
  1698 					fmulu_16
  1699 					els
  1700 28D0 20 CC 21			imulCX
  1701 					eif
  1702 28D3 A5 84			lda :eax
  1703 28D5 8D D0 54			sta _A
  1704 28D8 A5 85			lda :eax+1
  1705 28DA 8D D1 54			sta _A+1
  1706 28DD A5 86			lda :eax+2
  1707 28DF 8D D2 54			sta _A+2
  1708 28E2 A5 87			lda :eax+3
  1709 28E4 8D D3 54			sta _A+3
  1710
  1711 				; optimize OK (graph.inc), line = 337
  1712
  1713 28E7 AD D0 54			lda _A
  1714 28EA 8D C8 54			sta A2
  1715 28ED AD D1 54			lda _A+1
  1716 28F0 8D C9 54			sta A2+1
  1717 28F3 AD D2 54			lda _A+2
  1718 28F6 8D CA 54			sta A2+2
  1719 28F9 AD D3 54			lda _A+3
  1720 28FC 8D CB 54			sta A2+3
  1721 28FF 0E C8 54			asl A2
  1722 2902 2E C9 54			rol A2+1
  1723 2905 2E CA 54			rol A2+2
  1724 2908 2E CB 54			rol A2+3
  1725
  1726 				; optimize OK (graph.inc), line = 339
  1727
  1728 290B AD B6 54			lda B
  1729 290E 85 8C			sta :ecx
  1730 2910 85 84			sta :eax
  1731 2912 AD B7 54			lda B+1
  1732 2915 85 8D			sta :ecx+1
  1733 2917 85 85			sta :eax+1
  1734 					.ifdef fmulinit
  1735 					fmulu_16
  1736 					els
  1737 2919 20 CC 21			imulCX
  1738 					eif
  1739 291C A5 84			lda :eax
  1740 291E 8D D4 54			sta _B
  1741 2921 A5 85			lda :eax+1
  1742 2923 8D D5 54			sta _B+1
  1743 2926 A5 86			lda :eax+2
  1744 2928 8D D6 54			sta _B+2
  1745 292B A5 87			lda :eax+3
  1746 292D 8D D7 54			sta _B+3
  1747
  1748 				; optimize OK (graph.inc), line = 340
  1749
  1750 2930 AD D4 54			lda _B
  1751 2933 8D CC 54			sta B2
  1752 2936 AD D5 54			lda _B+1
  1753 2939 8D CD 54			sta B2+1
  1754 293C AD D6 54			lda _B+2
  1755 293F 8D CE 54			sta B2+2
  1756 2942 AD D7 54			lda _B+3
  1757 2945 8D CF 54			sta B2+3
  1758 2948 0E CC 54			asl B2
  1759 294B 2E CD 54			rol B2+1
  1760 294E 2E CE 54			rol B2+2
  1761 2951 2E CF 54			rol B2+3
  1762
  1763 				; optimize OK (graph.inc), line = 342
  1764
  1765 2954 AD B6 54 8D C6 54		mva B Y
  1766 295A AD B7 54 8D C7 54		mva B+1 Y+1
  1767
  1768 				; optimize OK (graph.inc), line = 343
  1769
  1770 2960 A9 00 8D C4 54		mva #$00 X
  1771 2965 8D C5 54			sta X+1
  1772
  1773 				; optimize OK (graph.inc), line = 344
  1774
  1775 2968 8D C0 54			sta STOPY
  1776 296B 8D C1 54			sta STOPY+1
  1777 296E 8D C2 54			sta STOPY+2
  1778 2971 8D C3 54			sta STOPY+3
  1779
  1780 				; optimize OK (graph.inc), line = 346
  1781
  1782 2974 AD B6 54			lda B
  1783 2977 85 8C			sta :ecx
  1784 2979 AD B7 54			lda B+1
  1785 297C 85 8D			sta :ecx+1
  1786 297E A9 00			lda #$00
  1787 2980 85 8E			sta :ecx+2
  1788 2982 85 8F			sta :ecx+3
  1789 2984 AD D0 54			lda _A
  1790 2987 85 84			sta :eax
  1791 2989 AD D1 54			lda _A+1
  1792 298C 85 85			sta :eax+1
  1793 298E AD D2 54			lda _A+2
  1794 2991 85 86			sta :eax+2
  1795 2993 AD D3 54			lda _A+3
  1796 2996 85 87			sta :eax+3
  1797 2998 20 03 22			jsr imulECX
  1798 299B A5 84			lda :eax
  1799 299D 8D B8 54			sta ERROR
  1800 29A0 A5 85			lda :eax+1
  1801 29A2 8D B9 54			sta ERROR+1
  1802 29A5 A5 86			lda :eax+2
  1803 29A7 8D BA 54			sta ERROR+2
  1804 29AA A5 87			lda :eax+3
  1805 29AC 8D BB 54			sta ERROR+3
  1806
  1807 				; optimize OK (graph.inc), line = 347
  1808
  1809 29AF AD B8 54			lda ERROR
  1810 29B2 8D BC 54			sta STOPX
  1811 29B5 AD B9 54			lda ERROR+1
  1812 29B8 8D BD 54			sta STOPX+1
  1813 29BB AD BA 54			lda ERROR+2
  1814 29BE 8D BE 54			sta STOPX+2
  1815 29C1 AD BB 54			lda ERROR+3
  1816 29C4 8D BF 54			sta STOPX+3
  1817 29C7 0E BC 54			asl STOPX
  1818 29CA 2E BD 54			rol STOPX+1
  1819 29CD 2E BE 54			rol STOPX+2
  1820 29D0 2E BF 54			rol STOPX+3
  1821
  1822 				; --- WhileProlog
  1823 29D3 4C 82 2A			jmp l_02F6
  1824 29D6			l_02F7
  1825
  1826 				; optimize FAIL ('DRAWELLIPSE', graph.inc), line = 351
  1827 29D6 20 FE 27			jsr DRAWELLIPSE
  1828
  1829 				; optimize FAIL (0, graph.inc), line = 353
  1830 29D9 EE C4 54			inc X
  1831 29DC D0 03			sne
  1832 29DE EE C5 54			inc X+1
  1833
  1834 				; optimize OK (graph.inc), line = 354
  1835
  1836 29E1 AD C0 54			lda STOPY
  1837 29E4 18 6D CC 54			add B2
  1838 29E8 8D C0 54			sta STOPY
  1839 29EB AD C1 54			lda STOPY+1
  1840 29EE 6D CD 54			adc B2+1
  1841 29F1 8D C1 54			sta STOPY+1
  1842 29F4 AD C2 54			lda STOPY+2
  1843 29F7 6D CE 54			adc B2+2
  1844 29FA 8D C2 54			sta STOPY+2
  1845 29FD AD C3 54			lda STOPY+3
  1846 2A00 6D CF 54			adc B2+3
  1847 2A03 8D C3 54			sta STOPY+3
  1848
  1849 				; optimize OK (graph.inc), line = 355
  1850
  1851 2A06 AD B8 54			lda ERROR
  1852 2A09 38 ED C0 54			sub STOPY
  1853 2A0D 8D B8 54			sta ERROR
  1854 2A10 AD B9 54			lda ERROR+1
  1855 2A13 ED C1 54			sbc STOPY+1
  1856 2A16 8D B9 54			sta ERROR+1
  1857 2A19 AD BA 54			lda ERROR+2
  1858 2A1C ED C2 54			sbc STOPY+2
  1859 2A1F 8D BA 54			sta ERROR+2
  1860 2A22 AD BB 54			lda ERROR+3
  1861 2A25 ED C3 54			sbc STOPY+3
  1862 2A28 8D BB 54			sta ERROR+3
  1863
  1864 				; optimize OK (graph.inc), line = 357
  1865
  1866 2A2B 10 55			jpl l_031C
  1867
  1868 				; optimize FAIL (0, graph.inc), line = 358
  1869 2A2D AD C6 54 D0 03 CE + 	dew Y
  1870
  1871 				; optimize OK (graph.inc), line = 359
  1872
  1873 2A38 AD BC 54			lda STOPX
  1874 2A3B 38 ED C8 54			sub A2
  1875 2A3F 8D BC 54			sta STOPX
  1876 2A42 AD BD 54			lda STOPX+1
  1877 2A45 ED C9 54			sbc A2+1
  1878 2A48 8D BD 54			sta STOPX+1
  1879 2A4B AD BE 54			lda STOPX+2
  1880 2A4E ED CA 54			sbc A2+2
  1881 2A51 8D BE 54			sta STOPX+2
  1882 2A54 AD BF 54			lda STOPX+3
  1883 2A57 ED CB 54			sbc A2+3
  1884 2A5A 8D BF 54			sta STOPX+3
  1885
  1886 				; optimize OK (graph.inc), line = 360
  1887
  1888 2A5D AD B8 54			lda ERROR
  1889 2A60 18 6D BC 54			add STOPX
  1890 2A64 8D B8 54			sta ERROR
  1891 2A67 AD B9 54			lda ERROR+1
  1892 2A6A 6D BD 54			adc STOPX+1
  1893 2A6D 8D B9 54			sta ERROR+1
  1894 2A70 AD BA 54			lda ERROR+2
  1895 2A73 6D BE 54			adc STOPX+2
  1896 2A76 8D BA 54			sta ERROR+2
  1897 2A79 AD BB 54			lda ERROR+3
  1898 2A7C 6D BF 54			adc STOPX+3
  1899 2A7F 8D BB 54			sta ERROR+3
  1900 2A82			l_031C
  1901 2A82			l_02F6
  1902
  1903 				; optimize OK (graph.inc), line = 349
  1904
  1905 2A82				.LOCAL
  1906 2A82 AD C3 54			lda STOPY+3
  1907 2A85 38 ED BF 54			sub STOPX+3
  1908 2A89 D0 22			bne L4
  1909 2A8B AD C2 54			lda STOPY+2
  1910 2A8E CD BE 54			cmp STOPX+2
  1911 2A91 D0 0E			bne L1
  1912 2A93 AD C1 54			lda STOPY+1
  1913 2A96 CD BD 54			cmp STOPX+1
  1914 2A99 D0 06			bne L1
  1915 2A9B AD C0 54			lda STOPY
  1916 2A9E CD BC 54			cmp STOPX
  1917 2AA1 F0 10		L1	beq L5
  1918 2AA3 B0 04			bcs L3
  1919 2AA5 A9 FF			lda #$FF
  1920 2AA7 D0 0A			bne L5
  1921 2AA9 A9 01		L3	lda #$01
  1922 2AAB D0 06			bne L5
  1923 2AAD 50 04		L4	bvc L5
  1924 2AAF 49 FF			eor #$FF
  1925 2AB1 09 01			ora #$01
  1926 2AB3			L5
  1927 					.ENDL
  1928 2AB3 10 03 4C D6 29		jmi l_02F7
  1929 2AB8 D0 03 4C D6 29		jeq l_02F7
  1930
  1931 				; optimize OK (graph.inc), line = 364
  1932
  1933 2ABD AD B4 54 8D C4 54		mva A X
  1934 2AC3 AD B5 54 8D C5 54		mva A+1 X+1
  1935
  1936 				; optimize OK (graph.inc), line = 365
  1937
  1938 2AC9 A9 00 8D C6 54		mva #$00 Y
  1939 2ACE 8D C7 54			sta Y+1
  1940
  1941 				; optimize OK (graph.inc), line = 366
  1942
  1943 2AD1 8D BC 54			sta STOPX
  1944 2AD4 8D BD 54			sta STOPX+1
  1945 2AD7 8D BE 54			sta STOPX+2
  1946 2ADA 8D BF 54			sta STOPX+3
  1947
  1948 				; optimize OK (graph.inc), line = 368
  1949
  1950 2ADD AD B4 54			lda A
  1951 2AE0 85 8C			sta :ecx
  1952 2AE2 AD B5 54			lda A+1
  1953 2AE5 85 8D			sta :ecx+1
  1954 2AE7 A9 00			lda #$00
  1955 2AE9 85 8E			sta :ecx+2
  1956 2AEB 85 8F			sta :ecx+3
  1957 2AED AD D4 54			lda _B
  1958 2AF0 85 84			sta :eax
  1959 2AF2 AD D5 54			lda _B+1
  1960 2AF5 85 85			sta :eax+1
  1961 2AF7 AD D6 54			lda _B+2
  1962 2AFA 85 86			sta :eax+2
  1963 2AFC AD D7 54			lda _B+3
  1964 2AFF 85 87			sta :eax+3
  1965 2B01 20 03 22			jsr imulECX
  1966 2B04 A5 84			lda :eax
  1967 2B06 8D B8 54			sta ERROR
  1968 2B09 A5 85			lda :eax+1
  1969 2B0B 8D B9 54			sta ERROR+1
  1970 2B0E A5 86			lda :eax+2
  1971 2B10 8D BA 54			sta ERROR+2
  1972 2B13 A5 87			lda :eax+3
  1973 2B15 8D BB 54			sta ERROR+3
  1974
  1975 				; optimize OK (graph.inc), line = 369
  1976
  1977 2B18 AD B8 54			lda ERROR
  1978 2B1B 8D C0 54			sta STOPY
  1979 2B1E AD B9 54			lda ERROR+1
  1980 2B21 8D C1 54			sta STOPY+1
  1981 2B24 AD BA 54			lda ERROR+2
  1982 2B27 8D C2 54			sta STOPY+2
  1983 2B2A AD BB 54			lda ERROR+3
  1984 2B2D 8D C3 54			sta STOPY+3
  1985 2B30 0E C0 54			asl STOPY
  1986 2B33 2E C1 54			rol STOPY+1
  1987 2B36 2E C2 54			rol STOPY+2
  1988 2B39 2E C3 54			rol STOPY+3
  1989
  1990 				; --- WhileProlog
  1991 2B3C 4C EB 2B			jmp l_035D
  1992 2B3F			l_035E
  1993
  1994 				; optimize FAIL ('DRAWELLIPSE', graph.inc), line = 373
  1995 2B3F 20 FE 27			jsr DRAWELLIPSE
  1996
  1997 				; optimize FAIL (0, graph.inc), line = 375
  1998 2B42 EE C6 54			inc Y
  1999 2B45 D0 03			sne
  2000 2B47 EE C7 54			inc Y+1
  2001
  2002 				; optimize OK (graph.inc), line = 376
  2003
  2004 2B4A AD BC 54			lda STOPX
  2005 2B4D 18 6D C8 54			add A2
  2006 2B51 8D BC 54			sta STOPX
  2007 2B54 AD BD 54			lda STOPX+1
  2008 2B57 6D C9 54			adc A2+1
  2009 2B5A 8D BD 54			sta STOPX+1
  2010 2B5D AD BE 54			lda STOPX+2
  2011 2B60 6D CA 54			adc A2+2
  2012 2B63 8D BE 54			sta STOPX+2
  2013 2B66 AD BF 54			lda STOPX+3
  2014 2B69 6D CB 54			adc A2+3
  2015 2B6C 8D BF 54			sta STOPX+3
  2016
  2017 				; optimize OK (graph.inc), line = 377
  2018
  2019 2B6F AD B8 54			lda ERROR
  2020 2B72 38 ED BC 54			sub STOPX
  2021 2B76 8D B8 54			sta ERROR
  2022 2B79 AD B9 54			lda ERROR+1
  2023 2B7C ED BD 54			sbc STOPX+1
  2024 2B7F 8D B9 54			sta ERROR+1
  2025 2B82 AD BA 54			lda ERROR+2
  2026 2B85 ED BE 54			sbc STOPX+2
  2027 2B88 8D BA 54			sta ERROR+2
  2028 2B8B AD BB 54			lda ERROR+3
  2029 2B8E ED BF 54			sbc STOPX+3
  2030 2B91 8D BB 54			sta ERROR+3
  2031
  2032 				; optimize OK (graph.inc), line = 379
  2033
  2034 2B94 10 55			jpl l_0383
  2035
  2036 				; optimize FAIL (0, graph.inc), line = 380
  2037 2B96 AD C4 54 D0 03 CE + 	dew X
  2038
  2039 				; optimize OK (graph.inc), line = 381
  2040
  2041 2BA1 AD C0 54			lda STOPY
  2042 2BA4 38 ED CC 54			sub B2
  2043 2BA8 8D C0 54			sta STOPY
  2044 2BAB AD C1 54			lda STOPY+1
  2045 2BAE ED CD 54			sbc B2+1
  2046 2BB1 8D C1 54			sta STOPY+1
  2047 2BB4 AD C2 54			lda STOPY+2
  2048 2BB7 ED CE 54			sbc B2+2
  2049 2BBA 8D C2 54			sta STOPY+2
  2050 2BBD AD C3 54			lda STOPY+3
  2051 2BC0 ED CF 54			sbc B2+3
  2052 2BC3 8D C3 54			sta STOPY+3
  2053
  2054 				; optimize OK (graph.inc), line = 382
  2055
  2056 2BC6 AD B8 54			lda ERROR
  2057 2BC9 18 6D C0 54			add STOPY
  2058 2BCD 8D B8 54			sta ERROR
  2059 2BD0 AD B9 54			lda ERROR+1
  2060 2BD3 6D C1 54			adc STOPY+1
  2061 2BD6 8D B9 54			sta ERROR+1
  2062 2BD9 AD BA 54			lda ERROR+2
  2063 2BDC 6D C2 54			adc STOPY+2
  2064 2BDF 8D BA 54			sta ERROR+2
  2065 2BE2 AD BB 54			lda ERROR+3
  2066 2BE5 6D C3 54			adc STOPY+3
  2067 2BE8 8D BB 54			sta ERROR+3
  2068 2BEB			l_0383
  2069 2BEB			l_035D
  2070
  2071 				; optimize OK (graph.inc), line = 371
  2072
  2073 2BEB				.LOCAL
  2074 2BEB AD C3 54			lda STOPY+3
  2075 2BEE 38 ED BF 54			sub STOPX+3
  2076 2BF2 D0 22			bne L4
  2077 2BF4 AD C2 54			lda STOPY+2
  2078 2BF7 CD BE 54			cmp STOPX+2
  2079 2BFA D0 0E			bne L1
  2080 2BFC AD C1 54			lda STOPY+1
  2081 2BFF CD BD 54			cmp STOPX+1
  2082 2C02 D0 06			bne L1
  2083 2C04 AD C0 54			lda STOPY
  2084 2C07 CD BC 54			cmp STOPX
  2085 2C0A F0 10		L1	beq L5
  2086 2C0C B0 04			bcs L3
  2087 2C0E A9 FF			lda #$FF
  2088 2C10 D0 0A			bne L5
  2089 2C12 A9 01		L3	lda #$01
  2090 2C14 D0 06			bne L5
  2091 2C16 50 04		L4	bvc L5
  2092 2C18 49 FF			eor #$FF
  2093 2C1A 09 01			ora #$01
  2094 2C1C			L5
  2095 					.ENDL
  2096 2C1C 30 03 4C 3F 2B		jpl l_035E
  2097
  2098 				; ------------------------------------------------------------
  2099
  2100 = 54B0			X0	= DATAORIGIN+$0062
  2101 = 54B2			Y0	= DATAORIGIN+$0064
  2102 = 54B4			A	= DATAORIGIN+$0066
  2103 = 54B6			B	= DATAORIGIN+$0068
  2104 = 54B8			ERROR	= DATAORIGIN+$006A
  2105 = 54BC			STOPX	= DATAORIGIN+$006E
  2106 = 54C0			STOPY	= DATAORIGIN+$0072
  2107 = 54C4			X	= DATAORIGIN+$0076
  2108 = 54C6			Y	= DATAORIGIN+$0078
  2109 = 54C8			A2	= DATAORIGIN+$007A
  2110 = 54CC			B2	= DATAORIGIN+$007E
  2111 = 54D0			_A	= DATAORIGIN+$0082
  2112 = 54D4			_B	= DATAORIGIN+$0086
  2113
  2114 = 54B0			@VarData	= X0
  2115 = 0028			@VarDataSize	= 40
  2116
  2117 2C21			@exit
  2118 					.ifdef @new
  2119 					lda <@VarData
  2120 					sta :ztmp
  2121 					lda >@VarData
  2122 					ldy #@VarDataSize-1
  2123 					jmp @FreeMem
  2124 					eif
  2125 2C21 60				rts						; ret
  2126 				.endl
  2127
  2128 2C22			.local	RECTANGLE_03AE					; PROCEDURE | OVERLOAD
  2129
  2130 				; ------------------------------------------------------------
  2131
  2132 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2133 				; as Pointer
  2134 2C22 B5 98 8D E6 54		mva :STACKORIGIN,x Y2
  2135 2C27 B5 A8 8D E7 54		mva :STACKORIGIN+STACKWIDTH,x Y2+1
  2136 2C2C CA				dex						; sub bx, 1
  2137
  2138 				; ------------------------------------------------------------
  2139
  2140 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2141 				; as Pointer
  2142 2C2D B5 98 8D E4 54		mva :STACKORIGIN,x X2
  2143 2C32 B5 A8 8D E5 54		mva :STACKORIGIN+STACKWIDTH,x X2+1
  2144 2C37 CA				dex						; sub bx, 1
  2145
  2146 				; ------------------------------------------------------------
  2147
  2148 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2149 				; as Pointer
  2150 2C38 B5 98 8D E2 54		mva :STACKORIGIN,x Y1
  2151 2C3D B5 A8 8D E3 54		mva :STACKORIGIN+STACKWIDTH,x Y1+1
  2152 2C42 CA				dex						; sub bx, 1
  2153
  2154 				; ------------------------------------------------------------
  2155
  2156 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2157 				; as Pointer
  2158 2C43 B5 98 8D E0 54		mva :STACKORIGIN,x X1
  2159 2C48 B5 A8 8D E1 54		mva :STACKORIGIN+STACKWIDTH,x X1+1
  2160 2C4D CA				dex						; sub bx, 1
  2161
  2162 				; optimize FAIL ('MOVETO', graph.inc), line = 465
  2163 2C4E E8				inx
  2164 2C4F AD E0 54 95 98		mva X1 :STACKORIGIN,x
  2165 2C54 AD E1 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2166 2C59 E8				inx
  2167 2C5A AD E2 54 95 98		mva Y1 :STACKORIGIN,x
  2168 2C5F AD E3 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2169 2C64 20 B6 25			jsr MOVETO
  2170
  2171 				; optimize FAIL ('LINETO', graph.inc), line = 466
  2172 2C67 E8				inx
  2173 2C68 AD E4 54 95 98		mva X2 :STACKORIGIN,x
  2174 2C6D AD E5 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2175 2C72 E8				inx
  2176 2C73 AD E2 54 95 98		mva Y1 :STACKORIGIN,x
  2177 2C78 AD E3 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2178 2C7D 20 41 26			jsr LINETO
  2179
  2180 				; optimize FAIL ('LINETO', graph.inc), line = 467
  2181 2C80 E8				inx
  2182 2C81 AD E4 54 95 98		mva X2 :STACKORIGIN,x
  2183 2C86 AD E5 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2184 2C8B E8				inx
  2185 2C8C AD E6 54 95 98		mva Y2 :STACKORIGIN,x
  2186 2C91 AD E7 54 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  2187 2C96 20 41 26			jsr LINETO
  2188
  2189 				; optimize FAIL ('LINETO', graph.inc), line = 468
  2190 2C99 E8				inx
  2191 2C9A AD E0 54 95 98		mva X1 :STACKORIGIN,x
  2192 2C9F AD E1 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2193 2CA4 E8				inx
  2194 2CA5 AD E6 54 95 98		mva Y2 :STACKORIGIN,x
  2195 2CAA AD E7 54 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  2196 2CAF 20 41 26			jsr LINETO
  2197
  2198 				; optimize FAIL ('LINETO', graph.inc), line = 469
  2199 2CB2 E8				inx
  2200 2CB3 AD E0 54 95 98		mva X1 :STACKORIGIN,x
  2201 2CB8 AD E1 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2202 2CBD E8				inx
  2203 2CBE AD E2 54 95 98		mva Y1 :STACKORIGIN,x
  2204 2CC3 AD E3 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2205 2CC8 20 41 26			jsr LINETO
  2206
  2207 				; ------------------------------------------------------------
  2208
  2209 = 54E0			X1	= DATAORIGIN+$0092
  2210 = 54E2			Y1	= DATAORIGIN+$0094
  2211 = 54E4			X2	= DATAORIGIN+$0096
  2212 = 54E6			Y2	= DATAORIGIN+$0098
  2213
  2214 = 54E0			@VarData	= X1
  2215 = 0008			@VarDataSize	= 8
  2216
  2217 2CCB			@exit
  2218 					.ifdef @new
  2219 					lda <@VarData
  2220 					sta :ztmp
  2221 					lda >@VarData
  2222 					ldy #@VarDataSize-1
  2223 					jmp @FreeMem
  2224 					eif
  2225 2CCB 60				rts						; ret
  2226 				.endl
  2227
  2228 2CCC			.local	BAR						; PROCEDURE
  2229
  2230 				; ------------------------------------------------------------
  2231
  2232 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2233 				; as Pointer
  2234 2CCC B5 98 8D EE 54		mva :STACKORIGIN,x Y2
  2235 2CD1 B5 A8 8D EF 54		mva :STACKORIGIN+STACKWIDTH,x Y2+1
  2236 2CD6 CA				dex						; sub bx, 1
  2237
  2238 				; ------------------------------------------------------------
  2239
  2240 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2241 				; as Pointer
  2242 2CD7 B5 98 8D EC 54		mva :STACKORIGIN,x X2
  2243 2CDC B5 A8 8D ED 54		mva :STACKORIGIN+STACKWIDTH,x X2+1
  2244 2CE1 CA				dex						; sub bx, 1
  2245
  2246 				; ------------------------------------------------------------
  2247
  2248 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2249 				; as Pointer
  2250 2CE2 B5 98 8D EA 54		mva :STACKORIGIN,x Y1
  2251 2CE7 B5 A8 8D EB 54		mva :STACKORIGIN+STACKWIDTH,x Y1+1
  2252 2CEC CA				dex						; sub bx, 1
  2253
  2254 				; ------------------------------------------------------------
  2255
  2256 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2257 				; as Pointer
  2258 2CED B5 98 8D E8 54		mva :STACKORIGIN,x X1
  2259 2CF2 B5 A8 8D E9 54		mva :STACKORIGIN+STACKWIDTH,x X1+1
  2260 2CF7 CA				dex						; sub bx, 1
  2261
  2262 				; --- For
  2263
  2264 				; optimize OK (graph.inc), line = 808
  2265
  2266 2CF8 AD EA 54 8D F0 54		mva Y1 I
  2267 2CFE AD EB 54 8D F1 54		mva Y1+1 I+1
  2268
  2269 				; optimize OK (graph.inc), line = 808
  2270
  2271 2D04 AD EE 54 8D 1C 2D		mva Y2 :@FORTMP?0406_0
  2272 2D0A AD EF 54 8D 15 2D		mva Y2+1 :@FORTMP?0406_1
  2273 2D10			l_0409
  2274 				; --- ForToDoCondition
  2275
  2276 				; optimize OK (graph.inc), line = 808
  2277
  2278 2D10				.LOCAL
  2279 2D10 AD F1 54			lda I+1
  2280 = 2D15			.def :@FORTMP?0406_1 = *+2
  2281 2D13 38 E9 00			sub #$00
  2282 2D16 D0 13			bne L4
  2283 2D18 AD F0 54			lda I
  2284 = 2D1C			.def :@FORTMP?0406_0 = *+1
  2285 2D1B C9 00			cmp #$00
  2286 2D1D F0 12		L1	beq L5
  2287 2D1F B0 05			bcs L3
  2288 2D21 A9 FF			lda #$FF
  2289 2D23 4C 31 2D			jmp L5
  2290 2D26 A9 01		L3	lda #$01
  2291 2D28 4C 31 2D			jmp L5
  2292 2D2B 50 04		L4	bvc L5
  2293 2D2D 49 FF			eor #$FF
  2294 2D2F 09 01			ora #$01
  2295 2D31			L5
  2296 					.ENDL
  2297 2D31 30 02			smi
  2298 2D33 D0 2F			jne l_0415
  2299
  2300 				; optimize FAIL ('HLINE', graph.inc), line = 808
  2301 2D35 E8				inx
  2302 2D36 AD E8 54 95 98		mva X1 :STACKORIGIN,x
  2303 2D3B AD E9 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2304 2D40 E8				inx
  2305 2D41 AD EC 54 95 98		mva X2 :STACKORIGIN,x
  2306 2D46 AD ED 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2307 2D4B E8				inx
  2308 2D4C AD F0 54 95 98		mva I :STACKORIGIN,x
  2309 2D51 AD F1 54 95 A8		mva I+1 :STACKORIGIN+STACKWIDTH,x
  2310 2D56 20 7E 27			jsr HLINE
  2311
  2312 				; --- ForToDoEpilog
  2313 2D59 EE F0 54			inc I
  2314 2D5C D0 03			sne
  2315 2D5E EE F1 54			inc I+1
  2316 2D61 4C 10 2D			jmp l_0409
  2317 2D64			l_0415
  2318
  2319 				; ------------------------------------------------------------
  2320
  2321 = 54E8			X1	= DATAORIGIN+$009A
  2322 = 54EA			Y1	= DATAORIGIN+$009C
  2323 = 54EC			X2	= DATAORIGIN+$009E
  2324 = 54EE			Y2	= DATAORIGIN+$00A0
  2325 = 54F0			I	= DATAORIGIN+$00A2
  2326 = 0000			@FORTMP_0406	= $00
  2327
  2328 = 54E8			@VarData	= X1
  2329 = 000A			@VarDataSize	= 10
  2330
  2331 2D64			@exit
  2332 					.ifdef @new
  2333 					lda <@VarData
  2334 					sta :ztmp
  2335 					lda >@VarData
  2336 					ldy #@VarDataSize-1
  2337 					jmp @FreeMem
  2338 					eif
  2339 2D64 60				rts						; ret
  2340 				.endl
  2341
  2342 2D65			.local	BAR3D						; PROCEDURE
  2343
  2344 				; ------------------------------------------------------------
  2345
  2346 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2347 				; as Pointer
  2348 2D65 B5 98 8D FE 54		mva :STACKORIGIN,x TOP
  2349 2D6A CA				dex						; sub bx, 1
  2350
  2351 				; ------------------------------------------------------------
  2352
  2353 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2354 				; as Pointer
  2355 2D6B B5 98 8D FC 54		mva :STACKORIGIN,x DEPTH
  2356 2D70 B5 A8 8D FD 54		mva :STACKORIGIN+STACKWIDTH,x DEPTH+1
  2357 2D75 CA				dex						; sub bx, 1
  2358
  2359 				; ------------------------------------------------------------
  2360
  2361 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2362 				; as Pointer
  2363 2D76 B5 98 8D FA 54		mva :STACKORIGIN,x Y2
  2364 2D7B B5 A8 8D FB 54		mva :STACKORIGIN+STACKWIDTH,x Y2+1
  2365 2D80 CA				dex						; sub bx, 1
  2366
  2367 				; ------------------------------------------------------------
  2368
  2369 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2370 				; as Pointer
  2371 2D81 B5 98 8D F8 54		mva :STACKORIGIN,x X2
  2372 2D86 B5 A8 8D F9 54		mva :STACKORIGIN+STACKWIDTH,x X2+1
  2373 2D8B CA				dex						; sub bx, 1
  2374
  2375 				; ------------------------------------------------------------
  2376
  2377 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2378 				; as Pointer
  2379 2D8C B5 98 8D F6 54		mva :STACKORIGIN,x Y1
  2380 2D91 B5 A8 8D F7 54		mva :STACKORIGIN+STACKWIDTH,x Y1+1
  2381 2D96 CA				dex						; sub bx, 1
  2382
  2383 				; ------------------------------------------------------------
  2384
  2385 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2386 				; as Pointer
  2387 2D97 B5 98 8D F4 54		mva :STACKORIGIN,x X1
  2388 2D9C B5 A8 8D F5 54		mva :STACKORIGIN+STACKWIDTH,x X1+1
  2389 2DA1 CA				dex						; sub bx, 1
  2390
  2391 				; optimize OK (graph.inc), line = 838
  2392
  2393 2DA2				.LOCAL
  2394 2DA2 AD F5 54			lda X1+1
  2395 2DA5 38 ED F9 54			sub X2+1
  2396 2DA9 D0 10			bne L4
  2397 2DAB AD F4 54			lda X1
  2398 2DAE CD F8 54			cmp X2
  2399 2DB1 F0 0E			beq L5
  2400 2DB3 A9 00			lda #$00
  2401 2DB5 69 FF			adc #$FF
  2402 2DB7 09 01			ora #$01
  2403 2DB9 D0 06			bne L5
  2404 2DBB 50 04		L4	bvc L5
  2405 2DBD 49 FF			eor #$FF
  2406 2DBF 09 01			ora #$01
  2407 2DC1			L5
  2408 					.ENDL
  2409 2DC1 30 26			jmi l_044A
  2410 2DC3 F0 24			jeq l_044A
  2411
  2412 				; optimize OK (graph.inc), line = 840
  2413
  2414 2DC5 AD F4 54 8D 01 55		mva X1 OLDX
  2415 2DCB AD F5 54 8D 02 55		mva X1+1 OLDX+1
  2416
  2417 				; optimize OK (graph.inc), line = 841
  2418
  2419 2DD1 AD F8 54 8D F4 54		mva X2 X1
  2420 2DD7 AD F9 54 8D F5 54		mva X2+1 X1+1
  2421
  2422 				; optimize OK (graph.inc), line = 842
  2423
  2424 2DDD AD 01 55 8D F8 54		mva OLDX X2
  2425 2DE3 AD 02 55 8D F9 54		mva OLDX+1 X2+1
  2426 2DE9			l_044A
  2427
  2428 				; optimize OK (graph.inc), line = 844
  2429
  2430 2DE9				.LOCAL
  2431 2DE9 AD F7 54			lda Y1+1
  2432 2DEC 38 ED FB 54			sub Y2+1
  2433 2DF0 D0 10			bne L4
  2434 2DF2 AD F6 54			lda Y1
  2435 2DF5 CD FA 54			cmp Y2
  2436 2DF8 F0 0E			beq L5
  2437 2DFA A9 00			lda #$00
  2438 2DFC 69 FF			adc #$FF
  2439 2DFE 09 01			ora #$01
  2440 2E00 D0 06			bne L5
  2441 2E02 50 04		L4	bvc L5
  2442 2E04 49 FF			eor #$FF
  2443 2E06 09 01			ora #$01
  2444 2E08			L5
  2445 					.ENDL
  2446 2E08 30 26			jmi l_046E
  2447 2E0A F0 24			jeq l_046E
  2448
  2449 				; optimize OK (graph.inc), line = 846
  2450
  2451 2E0C AD F6 54 8D 03 55		mva Y1 OLDY
  2452 2E12 AD F7 54 8D 04 55		mva Y1+1 OLDY+1
  2453
  2454 				; optimize OK (graph.inc), line = 847
  2455
  2456 2E18 AD FA 54 8D F6 54		mva Y2 Y1
  2457 2E1E AD FB 54 8D F7 54		mva Y2+1 Y1+1
  2458
  2459 				; optimize OK (graph.inc), line = 848
  2460
  2461 2E24 AD 03 55 8D FA 54		mva OLDY Y2
  2462 2E2A AD 04 55 8D FB 54		mva OLDY+1 Y2+1
  2463 2E30			l_046E
  2464
  2465 				; optimize FAIL ('BAR', graph.inc), line = 851
  2466 2E30 E8				inx
  2467 2E31 AD F4 54 95 98		mva X1 :STACKORIGIN,x
  2468 2E36 AD F5 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2469 2E3B E8				inx
  2470 2E3C AD F6 54 95 98		mva Y1 :STACKORIGIN,x
  2471 2E41 AD F7 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2472 2E46 E8				inx
  2473 2E47 AD F8 54 95 98		mva X2 :STACKORIGIN,x
  2474 2E4C AD F9 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2475 2E51 E8				inx
  2476 2E52 AD FA 54 95 98		mva Y2 :STACKORIGIN,x
  2477 2E57 AD FB 54 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  2478 2E5C 20 CC 2C			jsr BAR
  2479
  2480 				; optimize FAIL ('RECTANGLE_03AE', graph.inc), line = 852
  2481 2E5F E8				inx
  2482 2E60 AD F4 54 95 98		mva X1 :STACKORIGIN,x
  2483 2E65 AD F5 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2484 2E6A E8				inx
  2485 2E6B AD F6 54 95 98		mva Y1 :STACKORIGIN,x
  2486 2E70 AD F7 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2487 2E75 E8				inx
  2488 2E76 AD F8 54 95 98		mva X2 :STACKORIGIN,x
  2489 2E7B AD F9 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2490 2E80 E8				inx
  2491 2E81 AD FA 54 95 98		mva Y2 :STACKORIGIN,x
  2492 2E86 AD FB 54 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  2493 2E8B 20 22 2C			jsr RECTANGLE_03AE
  2494
  2495 				; optimize OK (graph.inc), line = 857
  2496
  2497 2E8E AD 89 54 8D 01 55		mva CURRENTX OLDX
  2498 2E94 AD 8A 54 8D 02 55		mva CURRENTX+1 OLDX+1
  2499
  2500 				; optimize OK (graph.inc), line = 858
  2501
  2502 2E9A AD 8B 54 8D 03 55		mva CURRENTY OLDY
  2503 2EA0 AD 8C 54 8D 04 55		mva CURRENTY+1 OLDY+1
  2504
  2505 				; optimize OK (graph.inc), line = 860
  2506
  2507 2EA6 AD FE 54			lda TOP
  2508 2EA9 D0 03 4C 2E 2F		jeq l_04A8
  2509
  2510 				; optimize FAIL ('MOVETO', graph.inc), line = 861
  2511 2EAE E8				inx
  2512 2EAF AD F4 54 95 98		mva X1 :STACKORIGIN,x
  2513 2EB4 AD F5 54 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  2514 2EB9 E8				inx
  2515 2EBA AD F6 54 95 98		mva Y1 :STACKORIGIN,x
  2516 2EBF AD F7 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2517 2EC4 20 B6 25			jsr MOVETO
  2518
  2519 				; optimize FAIL ('LINETO', graph.inc), line = 862
  2520 2EC7 E8				inx
  2521 2EC8 AD F4 54 18 6D FC + 	adb X1 DEPTH :STACKORIGIN,x
  2522 2ED1 AD F5 54			lda X1+1
  2523 2ED4 6D FD 54			adc DEPTH+1
  2524 2ED7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2525 2ED9 E8				inx
  2526 2EDA AD F6 54 38 ED FC + 	sbb Y1 DEPTH :STACKORIGIN,x
  2527 2EE3 AD F7 54			lda Y1+1
  2528 2EE6 ED FD 54			sbc DEPTH+1
  2529 2EE9 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2530 2EEB 20 41 26			jsr LINETO
  2531
  2532 				; optimize FAIL ('LINETO', graph.inc), line = 863
  2533 2EEE E8				inx
  2534 2EEF AD F8 54 18 6D FC + 	adb X2 DEPTH :STACKORIGIN,x
  2535 2EF8 AD F9 54			lda X2+1
  2536 2EFB 6D FD 54			adc DEPTH+1
  2537 2EFE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2538 2F00 E8				inx
  2539 2F01 AD F6 54 38 ED FC + 	sbb Y1 DEPTH :STACKORIGIN,x
  2540 2F0A AD F7 54			lda Y1+1
  2541 2F0D ED FD 54			sbc DEPTH+1
  2542 2F10 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2543 2F12 20 41 26			jsr LINETO
  2544
  2545 				; optimize FAIL ('LINETO', graph.inc), line = 864
  2546 2F15 E8				inx
  2547 2F16 AD F8 54 95 98		mva X2 :STACKORIGIN,x
  2548 2F1B AD F9 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2549 2F20 E8				inx
  2550 2F21 AD F6 54 95 98		mva Y1 :STACKORIGIN,x
  2551 2F26 AD F7 54 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  2552 2F2B 20 41 26			jsr LINETO
  2553 2F2E			l_04A8
  2554
  2555 				; optimize OK (graph.inc), line = 866
  2556
  2557 2F2E AD FD 54			lda DEPTH+1
  2558 2F31 0D FC 54			ora DEPTH
  2559 2F34 F0 67			jeq l_04E4
  2560
  2561 				; optimize FAIL ('MOVETO', graph.inc), line = 868
  2562 2F36 E8				inx
  2563 2F37 AD F8 54 18 6D FC + 	adb X2 DEPTH :STACKORIGIN,x
  2564 2F40 AD F9 54			lda X2+1
  2565 2F43 6D FD 54			adc DEPTH+1
  2566 2F46 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2567 2F48 E8				inx
  2568 2F49 AD F6 54 38 ED FC + 	sbb Y1 DEPTH :STACKORIGIN,x
  2569 2F52 AD F7 54			lda Y1+1
  2570 2F55 ED FD 54			sbc DEPTH+1
  2571 2F58 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2572 2F5A 20 B6 25			jsr MOVETO
  2573
  2574 				; optimize FAIL ('LINETO', graph.inc), line = 869
  2575 2F5D E8				inx
  2576 2F5E AD F8 54 18 6D FC + 	adb X2 DEPTH :STACKORIGIN,x
  2577 2F67 AD F9 54			lda X2+1
  2578 2F6A 6D FD 54			adc DEPTH+1
  2579 2F6D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2580 2F6F E8				inx
  2581 2F70 AD FA 54 38 ED FC + 	sbb Y2 DEPTH :STACKORIGIN,x
  2582 2F79 AD FB 54			lda Y2+1
  2583 2F7C ED FD 54			sbc DEPTH+1
  2584 2F7F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2585 2F81 20 41 26			jsr LINETO
  2586
  2587 				; optimize FAIL ('LINETO', graph.inc), line = 870
  2588 2F84 E8				inx
  2589 2F85 AD F8 54 95 98		mva X2 :STACKORIGIN,x
  2590 2F8A AD F9 54 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  2591 2F8F E8				inx
  2592 2F90 AD FA 54 95 98		mva Y2 :STACKORIGIN,x
  2593 2F95 AD FB 54 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  2594 2F9A 20 41 26			jsr LINETO
  2595 2F9D			l_04E4
  2596
  2597 				; optimize OK (graph.inc), line = 873
  2598
  2599 2F9D AD 01 55 8D 89 54		mva OLDX CURRENTX
  2600 2FA3 AD 02 55 8D 8A 54		mva OLDX+1 CURRENTX+1
  2601
  2602 				; optimize OK (graph.inc), line = 874
  2603
  2604 2FA9 AD 03 55 8D 8B 54		mva OLDY CURRENTY
  2605 2FAF AD 04 55 8D 8C 54		mva OLDY+1 CURRENTY+1
  2606
  2607 				; ------------------------------------------------------------
  2608
  2609 = 54F4			X1	= DATAORIGIN+$00A6
  2610 = 54F6			Y1	= DATAORIGIN+$00A8
  2611 = 54F8			X2	= DATAORIGIN+$00AA
  2612 = 54FA			Y2	= DATAORIGIN+$00AC
  2613 = 54FC			DEPTH	= DATAORIGIN+$00AE
  2614 = 54FE			TOP	= DATAORIGIN+$00B0
  2615 = 54FF			ORIGWRITEMODE	= DATAORIGIN+$00B1
  2616 = 5501			OLDX	= DATAORIGIN+$00B3
  2617 = 5503			OLDY	= DATAORIGIN+$00B5
  2618
  2619 = 54F4			@VarData	= X1
  2620 = 0011			@VarDataSize	= 17
  2621
  2622 2FB5			@exit
  2623 					.ifdef @new
  2624 					lda <@VarData
  2625 					sta :ztmp
  2626 					lda >@VarData
  2627 					ldy #@VarDataSize-1
  2628 					jmp @FreeMem
  2629 					eif
  2630 2FB5 60				rts						; ret
  2631 				.endl
  2632
  2633 				; ------------------------------------------------------------
  2634
  2635 = 0080			CURRENTDRIVER	= $80
  2636 = 0000			DETECT	= $00
  2637 = 0001			CGA	= $01
  2638 = 0002			MCGA	= $02
  2639 = 0003			EGA	= $03
  2640 = 0004			EGA64	= $04
  2641 = 0005			EGAMONO	= $05
  2642 = 0006			LOWRES	= $06
  2643 = 0007			HERCMONO	= $07
  2644 = 0009			VGA	= $09
  2645 = 000A			VESA	= $0A
  2646 = 000B			D1BIT	= $0B
  2647 = 000C			D2BIT	= $0C
  2648 = 000D			D4BIT	= $0D
  2649 = 000E			D6BIT	= $0E
  2650 = 000F			D8BIT	= $0F
  2651 = 0010			D12BIT	= $10
  2652 = 0018			M640X400	= $18
  2653 = 0018			M640X480	= $18
  2654 = 0001			GROK	= $01
  2655 = 00FF			GRNOINITGRAPH	= $FF
  2656 = 00FE			GRNOTDETECTED	= $FE
  2657 = 00FD			GRFILENOTFOUND	= $FD
  2658 = 00FC			GRINVALIDDRIVER	= $FC
  2659 = 00FB			GRNOLOADMEM	= $FB
  2660 = 00FA			GRNOSCANMEM	= $FA
  2661 = 00F9			GRNOFLOODMEM	= $F9
  2662 = 00F8			GRFONTNOTFOUND	= $F8
  2663 = 00F7			GRNOFONTMEM	= $F7
  2664 = 00F6			GRINVALIDMODE	= $F6
  2665 = 00F5			GRERROR	= $F5
  2666 = 00F4			GRIOERROR	= $F4
  2667 = 00F3			GRINVALIDFONT	= $F3
  2668 = 00F2			GRINVALIDFONTNUM	= $F2
  2669 = 00EE			GRINVALIDVERSION	= $EE
  2670 = 0000			CGAC0	= $00
  2671 = 0001			CGAC1	= $01
  2672 = 0002			CGAC2	= $02
  2673 = 0003			CGAC3	= $03
  2674 = 0004			CGAHI	= $04
  2675 = 0000			MCGAC0	= $00
  2676 = 0001			MCGAC1	= $01
  2677 = 0002			MCGAC2	= $02
  2678 = 0003			MCGAC3	= $03
  2679 = 0004			MCGAMED	= $04
  2680 = 0005			MCGAHI	= $05
  2681 = 0000			EGALO	= $00
  2682 = 0001			EGAHI	= $01
  2683 = 0000			EGA64LO	= $00
  2684 = 0001			EGA64HI	= $01
  2685 = 0003			EGAMONOHI	= $03
  2686 = 000A			VGALO	= $0A
  2687 = 001F			VGAMED	= $1F
  2688 = 0018			VGAHI	= $18
  2689 = 5473			WIN_LEFT	= DATAORIGIN+$0025
  2690 = 5475			WIN_RIGHT	= DATAORIGIN+$0027
  2691 = 5477			WIN_TOP	= DATAORIGIN+$0029
  2692 = 5479			WIN_BOTTOM	= DATAORIGIN+$002B
  2693 = 547B			GRAPHRESULT	= DATAORIGIN+$002D
  2694 = 547C			GETCOLOR	= DATAORIGIN+$002E
  2695 = 547D			adr.LASTARCCOORDS	= DATAORIGIN+$002F
  2696 2FB6			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  2697 = 547D			LASTARCCOORDS.X	= DATAORIGIN+$002F
  2698 = 547F			LASTARCCOORDS.Y	= DATAORIGIN+$0031
  2699 = 5481			LASTARCCOORDS.XSTART	= DATAORIGIN+$0033
  2700 = 5483			LASTARCCOORDS.YSTART	= DATAORIGIN+$0035
  2701 = 5485			LASTARCCOORDS.XEND	= DATAORIGIN+$0037
  2702 = 5487			LASTARCCOORDS.YEND	= DATAORIGIN+$0039
  2703 = 5489			CURRENTX	= DATAORIGIN+$003B
  2704 = 548B			CURRENTY	= DATAORIGIN+$003D
  2705 = 548D			VIDEORAM	= DATAORIGIN+$003F
  2706 = 548F			SCANLINE_WIDTH	= DATAORIGIN+$0041
  2707
  2708 = 2FB6 7D 54		LASTARCCOORDS
  2708 				.endl							; UNIT GRAPH
  2709
  2710 2FB8			.local	PUTCHAR						; PROCEDURE
  2711
  2712 				; ------------------------------------------------------------
  2713
  2714 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2715 				; as Pointer
  2716 2FB8 B5 98 8D 07 55		mva :STACKORIGIN,x Y
  2717 2FBD CA				dex						; sub bx, 1
  2718
  2719 				; ------------------------------------------------------------
  2720
  2721 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2722 				; as Pointer
  2723 2FBE B5 98 8D 06 55		mva :STACKORIGIN,x X
  2724 2FC3 CA				dex						; sub bx, 1
  2725
  2726 				; ------------------------------------------------------------
  2727
  2728 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2729 				; as Pointer
  2730 2FC4 B5 98 8D 05 55		mva :STACKORIGIN,x CH
  2731 2FC9 CA				dex						; sub bx, 1
  2732
  2733 				; ------------------------------------------------------------
  2734
  2735 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  2736 				; as Pointer
  2737
  2738 2FCA E8				inx						; add bx, 1
  2739 2FCB AD 05 55 95 98		mva CH :STACKORIGIN,x
  2740
  2741 				; GenerateCaseProlog
  2742 2FD0 CA				dex						; sub bx, 1
  2743
  2744 				; GenerateCaseEqualityCheck
  2745 2FD1 B5 99			lda :STACKORIGIN+1,x
  2746 2FD3 C9 41			cmp #65
  2747 2FD5 F0 03 4C A2 30		jne l_053A
  2748 2FDA			@
  2749
  2750 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 6
  2751 2FDA E8				inx
  2752 2FDB AD 06 55 95 98		mva X :STACKORIGIN,x
  2753 2FE0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2754 2FE4 E8				inx
  2755 2FE5 AD 07 55 95 98		mva Y :STACKORIGIN,x
  2756 2FEA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2757 2FEE E8				inx
  2758 2FEF AD 06 55			lda X
  2759 2FF2 18 69 02			add #$02
  2760 2FF5 95 98			sta :STACKORIGIN,x
  2761 2FF7 A9 00			lda #$00
  2762 2FF9 69 00			adc #$00
  2763 2FFB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2764 2FFD E8				inx
  2765 2FFE AD 07 55 95 98		mva Y :STACKORIGIN,x
  2766 3003 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2767 3007 20 EF 26			jsr GRAPH.LINE
  2768
  2769 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 7
  2770 300A E8				inx
  2771 300B AD 06 55 95 98		mva X :STACKORIGIN,x
  2772 3010 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2773 3014 E8				inx
  2774 3015 AD 07 55			lda Y
  2775 3018 18 69 01			add #$01
  2776 301B 95 98			sta :STACKORIGIN,x
  2777 301D A9 00			lda #$00
  2778 301F 69 00			adc #$00
  2779 3021 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2780 3023 E8				inx
  2781 3024 AD 06 55 95 98		mva X :STACKORIGIN,x
  2782 3029 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2783 302D E8				inx
  2784 302E AD 07 55			lda Y
  2785 3031 18 69 04			add #$04
  2786 3034 95 98			sta :STACKORIGIN,x
  2787 3036 A9 00			lda #$00
  2788 3038 69 00			adc #$00
  2789 303A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2790 303C 20 EF 26			jsr GRAPH.LINE
  2791
  2792 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 8
  2793 303F E8				inx
  2794 3040 AD 06 55			lda X
  2795 3043 18 69 02			add #$02
  2796 3046 95 98			sta :STACKORIGIN,x
  2797 3048 A9 00			lda #$00
  2798 304A 69 00			adc #$00
  2799 304C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2800 304E E8				inx
  2801 304F AD 07 55			lda Y
  2802 3052 18 69 01			add #$01
  2803 3055 95 98			sta :STACKORIGIN,x
  2804 3057 A9 00			lda #$00
  2805 3059 69 00			adc #$00
  2806 305B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2807 305D E8				inx
  2808 305E AD 06 55			lda X
  2809 3061 18 69 02			add #$02
  2810 3064 95 98			sta :STACKORIGIN,x
  2811 3066 A9 00			lda #$00
  2812 3068 69 00			adc #$00
  2813 306A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2814 306C E8				inx
  2815 306D AD 07 55			lda Y
  2816 3070 18 69 04			add #$04
  2817 3073 95 98			sta :STACKORIGIN,x
  2818 3075 A9 00			lda #$00
  2819 3077 69 00			adc #$00
  2820 3079 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2821 307B 20 EF 26			jsr GRAPH.LINE
  2822
  2823 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 9
  2824 307E E8				inx
  2825 307F AD 06 55			lda X
  2826 3082 18 69 01			add #$01
  2827 3085 95 98			sta :STACKORIGIN,x
  2828 3087 A9 00			lda #$00
  2829 3089 69 00			adc #$00
  2830 308B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2831 308D E8				inx
  2832 308E AD 07 55			lda Y
  2833 3091 18 69 02			add #$02
  2834 3094 95 98			sta :STACKORIGIN,x
  2835 3096 A9 00			lda #$00
  2836 3098 69 00			adc #$00
  2837 309A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2838 309C 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  2839
  2840 				; GenerateCaseStatementEpilog
  2841 309F 4C 02 50			jmp a_0003
  2842 30A2			l_053A
  2843
  2844 				; GenerateCaseEqualityCheck
  2845 30A2 B5 99			lda :STACKORIGIN+1,x
  2846 30A4 C9 42			cmp #66
  2847 30A6 F0 03 4C B8 31		jne l_0595
  2848 30AB			@
  2849
  2850 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 15
  2851 30AB E8				inx
  2852 30AC AD 06 55 95 98		mva X :STACKORIGIN,x
  2853 30B1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2854 30B5 E8				inx
  2855 30B6 AD 07 55 95 98		mva Y :STACKORIGIN,x
  2856 30BB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2857 30BF E8				inx
  2858 30C0 AD 06 55 95 98		mva X :STACKORIGIN,x
  2859 30C5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2860 30C9 E8				inx
  2861 30CA AD 07 55			lda Y
  2862 30CD 18 69 04			add #$04
  2863 30D0 95 98			sta :STACKORIGIN,x
  2864 30D2 A9 00			lda #$00
  2865 30D4 69 00			adc #$00
  2866 30D6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2867 30D8 20 EF 26			jsr GRAPH.LINE
  2868
  2869 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 16
  2870 30DB E8				inx
  2871 30DC AD 06 55			lda X
  2872 30DF 18 69 01			add #$01
  2873 30E2 95 98			sta :STACKORIGIN,x
  2874 30E4 A9 00			lda #$00
  2875 30E6 69 00			adc #$00
  2876 30E8 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2877 30EA E8				inx
  2878 30EB AD 07 55 95 98		mva Y :STACKORIGIN,x
  2879 30F0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2880 30F4 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  2881
  2882 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 17
  2883 30F7 E8				inx
  2884 30F8 AD 06 55			lda X
  2885 30FB 18 69 02			add #$02
  2886 30FE 95 98			sta :STACKORIGIN,x
  2887 3100 A9 00			lda #$00
  2888 3102 69 00			adc #$00
  2889 3104 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2890 3106 E8				inx
  2891 3107 AD 07 55			lda Y
  2892 310A 18 69 01			add #$01
  2893 310D 95 98			sta :STACKORIGIN,x
  2894 310F A9 00			lda #$00
  2895 3111 69 00			adc #$00
  2896 3113 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2897 3115 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  2898
  2899 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 18
  2900 3118 E8				inx
  2901 3119 AD 06 55 95 98		mva X :STACKORIGIN,x
  2902 311E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2903 3122 E8				inx
  2904 3123 AD 07 55			lda Y
  2905 3126 18 69 02			add #$02
  2906 3129 95 98			sta :STACKORIGIN,x
  2907 312B A9 00			lda #$00
  2908 312D 69 00			adc #$00
  2909 312F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2910 3131 E8				inx
  2911 3132 AD 06 55			lda X
  2912 3135 18 69 02			add #$02
  2913 3138 95 98			sta :STACKORIGIN,x
  2914 313A A9 00			lda #$00
  2915 313C 69 00			adc #$00
  2916 313E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2917 3140 E8				inx
  2918 3141 AD 07 55			lda Y
  2919 3144 18 69 02			add #$02
  2920 3147 95 98			sta :STACKORIGIN,x
  2921 3149 A9 00			lda #$00
  2922 314B 69 00			adc #$00
  2923 314D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2924 314F 20 EF 26			jsr GRAPH.LINE
  2925
  2926 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 19
  2927 3152 E8				inx
  2928 3153 AD 06 55			lda X
  2929 3156 18 69 02			add #$02
  2930 3159 95 98			sta :STACKORIGIN,x
  2931 315B A9 00			lda #$00
  2932 315D 69 00			adc #$00
  2933 315F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2934 3161 E8				inx
  2935 3162 AD 07 55			lda Y
  2936 3165 18 69 03			add #$03
  2937 3168 95 98			sta :STACKORIGIN,x
  2938 316A A9 00			lda #$00
  2939 316C 69 00			adc #$00
  2940 316E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2941 3170 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  2942
  2943 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 20
  2944 3173 E8				inx
  2945 3174 AD 06 55			lda X
  2946 3177 18 69 01			add #$01
  2947 317A 95 98			sta :STACKORIGIN,x
  2948 317C A9 00			lda #$00
  2949 317E 69 00			adc #$00
  2950 3180 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2951 3182 E8				inx
  2952 3183 AD 07 55			lda Y
  2953 3186 18 69 04			add #$04
  2954 3189 95 98			sta :STACKORIGIN,x
  2955 318B A9 00			lda #$00
  2956 318D 69 00			adc #$00
  2957 318F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2958 3191 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  2959
  2960 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 21
  2961 3194 E8				inx
  2962 3195 AD 06 55			lda X
  2963 3198 18 69 02			add #$02
  2964 319B 95 98			sta :STACKORIGIN,x
  2965 319D A9 00			lda #$00
  2966 319F 69 00			adc #$00
  2967 31A1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2968 31A3 E8				inx
  2969 31A4 AD 07 55			lda Y
  2970 31A7 18 69 04			add #$04
  2971 31AA 95 98			sta :STACKORIGIN,x
  2972 31AC A9 00			lda #$00
  2973 31AE 69 00			adc #$00
  2974 31B0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2975 31B2 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  2976
  2977 				; GenerateCaseStatementEpilog
  2978 31B5 4C 02 50			jmp a_0003
  2979 31B8			l_0595
  2980
  2981 				; GenerateCaseEqualityCheck
  2982 31B8 B5 99			lda :STACKORIGIN+1,x
  2983 31BA C9 43			cmp #67
  2984 31BC F0 03 4C 6D 32		jne l_060F
  2985 31C1			@
  2986
  2987 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 24
  2988 31C1 E8				inx
  2989 31C2 AD 06 55			lda X
  2990 31C5 18 69 01			add #$01
  2991 31C8 95 98			sta :STACKORIGIN,x
  2992 31CA A9 00			lda #$00
  2993 31CC 69 00			adc #$00
  2994 31CE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  2995 31D0 E8				inx
  2996 31D1 AD 07 55 95 98		mva Y :STACKORIGIN,x
  2997 31D6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2998 31DA E8				inx
  2999 31DB AD 06 55			lda X
  3000 31DE 18 69 02			add #$02
  3001 31E1 95 98			sta :STACKORIGIN,x
  3002 31E3 A9 00			lda #$00
  3003 31E5 69 00			adc #$00
  3004 31E7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3005 31E9 E8				inx
  3006 31EA AD 07 55 95 98		mva Y :STACKORIGIN,x
  3007 31EF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3008 31F3 20 EF 26			jsr GRAPH.LINE
  3009
  3010 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 25
  3011 31F6 E8				inx
  3012 31F7 AD 06 55 95 98		mva X :STACKORIGIN,x
  3013 31FC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3014 3200 E8				inx
  3015 3201 AD 07 55			lda Y
  3016 3204 18 69 01			add #$01
  3017 3207 95 98			sta :STACKORIGIN,x
  3018 3209 A9 00			lda #$00
  3019 320B 69 00			adc #$00
  3020 320D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3021 320F E8				inx
  3022 3210 AD 06 55 95 98		mva X :STACKORIGIN,x
  3023 3215 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3024 3219 E8				inx
  3025 321A AD 07 55			lda Y
  3026 321D 18 69 03			add #$03
  3027 3220 95 98			sta :STACKORIGIN,x
  3028 3222 A9 00			lda #$00
  3029 3224 69 00			adc #$00
  3030 3226 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3031 3228 20 EF 26			jsr GRAPH.LINE
  3032
  3033 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 26
  3034 322B E8				inx
  3035 322C AD 06 55			lda X
  3036 322F 18 69 01			add #$01
  3037 3232 95 98			sta :STACKORIGIN,x
  3038 3234 A9 00			lda #$00
  3039 3236 69 00			adc #$00
  3040 3238 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3041 323A E8				inx
  3042 323B AD 07 55			lda Y
  3043 323E 18 69 04			add #$04
  3044 3241 95 98			sta :STACKORIGIN,x
  3045 3243 A9 00			lda #$00
  3046 3245 69 00			adc #$00
  3047 3247 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3048 3249 E8				inx
  3049 324A AD 06 55			lda X
  3050 324D 18 69 02			add #$02
  3051 3250 95 98			sta :STACKORIGIN,x
  3052 3252 A9 00			lda #$00
  3053 3254 69 00			adc #$00
  3054 3256 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3055 3258 E8				inx
  3056 3259 AD 07 55			lda Y
  3057 325C 18 69 04			add #$04
  3058 325F 95 98			sta :STACKORIGIN,x
  3059 3261 A9 00			lda #$00
  3060 3263 69 00			adc #$00
  3061 3265 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3062 3267 20 EF 26			jsr GRAPH.LINE
  3063
  3064 				; GenerateCaseStatementEpilog
  3065 326A 4C 02 50			jmp a_0003
  3066 326D			l_060F
  3067
  3068 				; GenerateCaseEqualityCheck
  3069 326D B5 99			lda :STACKORIGIN+1,x
  3070 326F C9 44			cmp #68
  3071 3271 F0 03 4C 25 33		jne l_065F
  3072 3276			@
  3073
  3074 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 29
  3075 3276 E8				inx
  3076 3277 AD 06 55 95 98		mva X :STACKORIGIN,x
  3077 327C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3078 3280 E8				inx
  3079 3281 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3080 3286 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3081 328A E8				inx
  3082 328B AD 06 55 95 98		mva X :STACKORIGIN,x
  3083 3290 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3084 3294 E8				inx
  3085 3295 AD 07 55			lda Y
  3086 3298 18 69 04			add #$04
  3087 329B 95 98			sta :STACKORIGIN,x
  3088 329D A9 00			lda #$00
  3089 329F 69 00			adc #$00
  3090 32A1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3091 32A3 20 EF 26			jsr GRAPH.LINE
  3092
  3093 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 30
  3094 32A6 E8				inx
  3095 32A7 AD 06 55			lda X
  3096 32AA 18 69 01			add #$01
  3097 32AD 95 98			sta :STACKORIGIN,x
  3098 32AF A9 00			lda #$00
  3099 32B1 69 00			adc #$00
  3100 32B3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3101 32B5 E8				inx
  3102 32B6 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3103 32BB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3104 32BF 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3105
  3106 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 31
  3107 32C2 E8				inx
  3108 32C3 AD 06 55			lda X
  3109 32C6 18 69 01			add #$01
  3110 32C9 95 98			sta :STACKORIGIN,x
  3111 32CB A9 00			lda #$00
  3112 32CD 69 00			adc #$00
  3113 32CF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3114 32D1 E8				inx
  3115 32D2 AD 07 55			lda Y
  3116 32D5 18 69 04			add #$04
  3117 32D8 95 98			sta :STACKORIGIN,x
  3118 32DA A9 00			lda #$00
  3119 32DC 69 00			adc #$00
  3120 32DE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3121 32E0 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3122
  3123 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 32
  3124 32E3 E8				inx
  3125 32E4 AD 06 55			lda X
  3126 32E7 18 69 02			add #$02
  3127 32EA 95 98			sta :STACKORIGIN,x
  3128 32EC A9 00			lda #$00
  3129 32EE 69 00			adc #$00
  3130 32F0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3131 32F2 E8				inx
  3132 32F3 AD 07 55			lda Y
  3133 32F6 18 69 01			add #$01
  3134 32F9 95 98			sta :STACKORIGIN,x
  3135 32FB A9 00			lda #$00
  3136 32FD 69 00			adc #$00
  3137 32FF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3138 3301 E8				inx
  3139 3302 AD 06 55			lda X
  3140 3305 18 69 02			add #$02
  3141 3308 95 98			sta :STACKORIGIN,x
  3142 330A A9 00			lda #$00
  3143 330C 69 00			adc #$00
  3144 330E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3145 3310 E8				inx
  3146 3311 AD 07 55			lda Y
  3147 3314 18 69 03			add #$03
  3148 3317 95 98			sta :STACKORIGIN,x
  3149 3319 A9 00			lda #$00
  3150 331B 69 00			adc #$00
  3151 331D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3152 331F 20 EF 26			jsr GRAPH.LINE
  3153
  3154 				; GenerateCaseStatementEpilog
  3155 3322 4C 02 50			jmp a_0003
  3156 3325			l_065F
  3157
  3158 				; GenerateCaseEqualityCheck
  3159 3325 B5 99			lda :STACKORIGIN+1,x
  3160 3327 C9 45			cmp #69
  3161 3329 F0 03 4C 0D 34		jne l_06B0
  3162 332E			@
  3163
  3164 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 35
  3165 332E E8				inx
  3166 332F AD 06 55 95 98		mva X :STACKORIGIN,x
  3167 3334 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3168 3338 E8				inx
  3169 3339 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3170 333E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3171 3342 E8				inx
  3172 3343 AD 06 55			lda X
  3173 3346 18 69 02			add #$02
  3174 3349 95 98			sta :STACKORIGIN,x
  3175 334B A9 00			lda #$00
  3176 334D 69 00			adc #$00
  3177 334F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3178 3351 E8				inx
  3179 3352 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3180 3357 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3181 335B 20 EF 26			jsr GRAPH.LINE
  3182
  3183 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 36
  3184 335E E8				inx
  3185 335F AD 06 55 95 98		mva X :STACKORIGIN,x
  3186 3364 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3187 3368 E8				inx
  3188 3369 AD 07 55			lda Y
  3189 336C 18 69 01			add #$01
  3190 336F 95 98			sta :STACKORIGIN,x
  3191 3371 A9 00			lda #$00
  3192 3373 69 00			adc #$00
  3193 3375 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3194 3377 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3195
  3196 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 37
  3197 337A E8				inx
  3198 337B AD 06 55 95 98		mva X :STACKORIGIN,x
  3199 3380 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3200 3384 E8				inx
  3201 3385 AD 07 55			lda Y
  3202 3388 18 69 02			add #$02
  3203 338B 95 98			sta :STACKORIGIN,x
  3204 338D A9 00			lda #$00
  3205 338F 69 00			adc #$00
  3206 3391 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3207 3393 E8				inx
  3208 3394 AD 06 55			lda X
  3209 3397 18 69 02			add #$02
  3210 339A 95 98			sta :STACKORIGIN,x
  3211 339C A9 00			lda #$00
  3212 339E 69 00			adc #$00
  3213 33A0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3214 33A2 E8				inx
  3215 33A3 AD 07 55			lda Y
  3216 33A6 18 69 02			add #$02
  3217 33A9 95 98			sta :STACKORIGIN,x
  3218 33AB A9 00			lda #$00
  3219 33AD 69 00			adc #$00
  3220 33AF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3221 33B1 20 EF 26			jsr GRAPH.LINE
  3222
  3223 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 38
  3224 33B4 E8				inx
  3225 33B5 AD 06 55 95 98		mva X :STACKORIGIN,x
  3226 33BA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3227 33BE E8				inx
  3228 33BF AD 07 55			lda Y
  3229 33C2 18 69 03			add #$03
  3230 33C5 95 98			sta :STACKORIGIN,x
  3231 33C7 A9 00			lda #$00
  3232 33C9 69 00			adc #$00
  3233 33CB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3234 33CD 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3235
  3236 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 39
  3237 33D0 E8				inx
  3238 33D1 AD 06 55 95 98		mva X :STACKORIGIN,x
  3239 33D6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3240 33DA E8				inx
  3241 33DB AD 07 55			lda Y
  3242 33DE 18 69 04			add #$04
  3243 33E1 95 98			sta :STACKORIGIN,x
  3244 33E3 A9 00			lda #$00
  3245 33E5 69 00			adc #$00
  3246 33E7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3247 33E9 E8				inx
  3248 33EA AD 06 55			lda X
  3249 33ED 18 69 02			add #$02
  3250 33F0 95 98			sta :STACKORIGIN,x
  3251 33F2 A9 00			lda #$00
  3252 33F4 69 00			adc #$00
  3253 33F6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3254 33F8 E8				inx
  3255 33F9 AD 07 55			lda Y
  3256 33FC 18 69 04			add #$04
  3257 33FF 95 98			sta :STACKORIGIN,x
  3258 3401 A9 00			lda #$00
  3259 3403 69 00			adc #$00
  3260 3405 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3261 3407 20 EF 26			jsr GRAPH.LINE
  3262
  3263 				; GenerateCaseStatementEpilog
  3264 340A 4C 02 50			jmp a_0003
  3265 340D			l_06B0
  3266
  3267 				; GenerateCaseEqualityCheck
  3268 340D B5 99			lda :STACKORIGIN+1,x
  3269 340F C9 46			cmp #70
  3270 3411 F0 03 4C BD 34		jne l_0712
  3271 3416			@
  3272
  3273 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 42
  3274 3416 E8				inx
  3275 3417 AD 06 55 95 98		mva X :STACKORIGIN,x
  3276 341C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3277 3420 E8				inx
  3278 3421 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3279 3426 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3280 342A E8				inx
  3281 342B AD 06 55 95 98		mva X :STACKORIGIN,x
  3282 3430 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3283 3434 E8				inx
  3284 3435 AD 07 55			lda Y
  3285 3438 18 69 04			add #$04
  3286 343B 95 98			sta :STACKORIGIN,x
  3287 343D A9 00			lda #$00
  3288 343F 69 00			adc #$00
  3289 3441 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3290 3443 20 EF 26			jsr GRAPH.LINE
  3291
  3292 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 43
  3293 3446 E8				inx
  3294 3447 AD 06 55			lda X
  3295 344A 18 69 01			add #$01
  3296 344D 95 98			sta :STACKORIGIN,x
  3297 344F A9 00			lda #$00
  3298 3451 69 00			adc #$00
  3299 3453 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3300 3455 E8				inx
  3301 3456 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3302 345B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3303 345F E8				inx
  3304 3460 AD 06 55			lda X
  3305 3463 18 69 02			add #$02
  3306 3466 95 98			sta :STACKORIGIN,x
  3307 3468 A9 00			lda #$00
  3308 346A 69 00			adc #$00
  3309 346C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3310 346E E8				inx
  3311 346F AD 07 55 95 98		mva Y :STACKORIGIN,x
  3312 3474 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3313 3478 20 EF 26			jsr GRAPH.LINE
  3314
  3315 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 44
  3316 347B E8				inx
  3317 347C AD 06 55			lda X
  3318 347F 18 69 01			add #$01
  3319 3482 95 98			sta :STACKORIGIN,x
  3320 3484 A9 00			lda #$00
  3321 3486 69 00			adc #$00
  3322 3488 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3323 348A E8				inx
  3324 348B AD 07 55			lda Y
  3325 348E 18 69 02			add #$02
  3326 3491 95 98			sta :STACKORIGIN,x
  3327 3493 A9 00			lda #$00
  3328 3495 69 00			adc #$00
  3329 3497 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3330 3499 E8				inx
  3331 349A AD 06 55			lda X
  3332 349D 18 69 02			add #$02
  3333 34A0 95 98			sta :STACKORIGIN,x
  3334 34A2 A9 00			lda #$00
  3335 34A4 69 00			adc #$00
  3336 34A6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3337 34A8 E8				inx
  3338 34A9 AD 07 55			lda Y
  3339 34AC 18 69 02			add #$02
  3340 34AF 95 98			sta :STACKORIGIN,x
  3341 34B1 A9 00			lda #$00
  3342 34B3 69 00			adc #$00
  3343 34B5 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3344 34B7 20 EF 26			jsr GRAPH.LINE
  3345
  3346 				; GenerateCaseStatementEpilog
  3347 34BA 4C 02 50			jmp a_0003
  3348 34BD			l_0712
  3349
  3350 				; GenerateCaseEqualityCheck
  3351 34BD B5 99			lda :STACKORIGIN+1,x
  3352 34BF C9 47			cmp #71
  3353 34C1 F0 03 4C B1 35		jne l_075E
  3354 34C6			@
  3355
  3356 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 47
  3357 34C6 E8				inx
  3358 34C7 AD 06 55			lda X
  3359 34CA 18 69 01			add #$01
  3360 34CD 95 98			sta :STACKORIGIN,x
  3361 34CF A9 00			lda #$00
  3362 34D1 69 00			adc #$00
  3363 34D3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3364 34D5 E8				inx
  3365 34D6 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3366 34DB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3367 34DF E8				inx
  3368 34E0 AD 06 55			lda X
  3369 34E3 18 69 02			add #$02
  3370 34E6 95 98			sta :STACKORIGIN,x
  3371 34E8 A9 00			lda #$00
  3372 34EA 69 00			adc #$00
  3373 34EC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3374 34EE E8				inx
  3375 34EF AD 07 55 95 98		mva Y :STACKORIGIN,x
  3376 34F4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3377 34F8 20 EF 26			jsr GRAPH.LINE
  3378
  3379 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 48
  3380 34FB E8				inx
  3381 34FC AD 06 55 95 98		mva X :STACKORIGIN,x
  3382 3501 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3383 3505 E8				inx
  3384 3506 AD 07 55			lda Y
  3385 3509 18 69 01			add #$01
  3386 350C 95 98			sta :STACKORIGIN,x
  3387 350E A9 00			lda #$00
  3388 3510 69 00			adc #$00
  3389 3512 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3390 3514 E8				inx
  3391 3515 AD 06 55 95 98		mva X :STACKORIGIN,x
  3392 351A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3393 351E E8				inx
  3394 351F AD 07 55			lda Y
  3395 3522 18 69 03			add #$03
  3396 3525 95 98			sta :STACKORIGIN,x
  3397 3527 A9 00			lda #$00
  3398 3529 69 00			adc #$00
  3399 352B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3400 352D 20 EF 26			jsr GRAPH.LINE
  3401
  3402 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 49
  3403 3530 E8				inx
  3404 3531 AD 06 55			lda X
  3405 3534 18 69 01			add #$01
  3406 3537 95 98			sta :STACKORIGIN,x
  3407 3539 A9 00			lda #$00
  3408 353B 69 00			adc #$00
  3409 353D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3410 353F E8				inx
  3411 3540 AD 07 55			lda Y
  3412 3543 18 69 04			add #$04
  3413 3546 95 98			sta :STACKORIGIN,x
  3414 3548 A9 00			lda #$00
  3415 354A 69 00			adc #$00
  3416 354C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3417 354E E8				inx
  3418 354F AD 06 55			lda X
  3419 3552 18 69 02			add #$02
  3420 3555 95 98			sta :STACKORIGIN,x
  3421 3557 A9 00			lda #$00
  3422 3559 69 00			adc #$00
  3423 355B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3424 355D E8				inx
  3425 355E AD 07 55			lda Y
  3426 3561 18 69 04			add #$04
  3427 3564 95 98			sta :STACKORIGIN,x
  3428 3566 A9 00			lda #$00
  3429 3568 69 00			adc #$00
  3430 356A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3431 356C 20 EF 26			jsr GRAPH.LINE
  3432
  3433 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 50
  3434 356F E8				inx
  3435 3570 AD 06 55			lda X
  3436 3573 18 69 02			add #$02
  3437 3576 95 98			sta :STACKORIGIN,x
  3438 3578 A9 00			lda #$00
  3439 357A 69 00			adc #$00
  3440 357C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3441 357E E8				inx
  3442 357F AD 07 55			lda Y
  3443 3582 18 69 02			add #$02
  3444 3585 95 98			sta :STACKORIGIN,x
  3445 3587 A9 00			lda #$00
  3446 3589 69 00			adc #$00
  3447 358B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3448 358D E8				inx
  3449 358E AD 06 55			lda X
  3450 3591 18 69 02			add #$02
  3451 3594 95 98			sta :STACKORIGIN,x
  3452 3596 A9 00			lda #$00
  3453 3598 69 00			adc #$00
  3454 359A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3455 359C E8				inx
  3456 359D AD 07 55			lda Y
  3457 35A0 18 69 03			add #$03
  3458 35A3 95 98			sta :STACKORIGIN,x
  3459 35A5 A9 00			lda #$00
  3460 35A7 69 00			adc #$00
  3461 35A9 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3462 35AB 20 EF 26			jsr GRAPH.LINE
  3463
  3464 				; GenerateCaseStatementEpilog
  3465 35AE 4C 02 50			jmp a_0003
  3466 35B1			l_075E
  3467
  3468 				; GenerateCaseEqualityCheck
  3469 35B1 B5 99			lda :STACKORIGIN+1,x
  3470 35B3 C9 48			cmp #72
  3471 35B5 F0 03 4C 48 36		jne l_07CB
  3472 35BA			@
  3473
  3474 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 53
  3475 35BA E8				inx
  3476 35BB AD 06 55 95 98		mva X :STACKORIGIN,x
  3477 35C0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3478 35C4 E8				inx
  3479 35C5 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3480 35CA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3481 35CE E8				inx
  3482 35CF AD 06 55 95 98		mva X :STACKORIGIN,x
  3483 35D4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3484 35D8 E8				inx
  3485 35D9 AD 07 55			lda Y
  3486 35DC 18 69 04			add #$04
  3487 35DF 95 98			sta :STACKORIGIN,x
  3488 35E1 A9 00			lda #$00
  3489 35E3 69 00			adc #$00
  3490 35E5 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3491 35E7 20 EF 26			jsr GRAPH.LINE
  3492
  3493 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 54
  3494 35EA E8				inx
  3495 35EB AD 06 55			lda X
  3496 35EE 18 69 02			add #$02
  3497 35F1 95 98			sta :STACKORIGIN,x
  3498 35F3 A9 00			lda #$00
  3499 35F5 69 00			adc #$00
  3500 35F7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3501 35F9 E8				inx
  3502 35FA AD 07 55 95 98		mva Y :STACKORIGIN,x
  3503 35FF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3504 3603 E8				inx
  3505 3604 AD 06 55			lda X
  3506 3607 18 69 02			add #$02
  3507 360A 95 98			sta :STACKORIGIN,x
  3508 360C A9 00			lda #$00
  3509 360E 69 00			adc #$00
  3510 3610 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3511 3612 E8				inx
  3512 3613 AD 07 55			lda Y
  3513 3616 18 69 04			add #$04
  3514 3619 95 98			sta :STACKORIGIN,x
  3515 361B A9 00			lda #$00
  3516 361D 69 00			adc #$00
  3517 361F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3518 3621 20 EF 26			jsr GRAPH.LINE
  3519
  3520 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 55
  3521 3624 E8				inx
  3522 3625 AD 06 55			lda X
  3523 3628 18 69 01			add #$01
  3524 362B 95 98			sta :STACKORIGIN,x
  3525 362D A9 00			lda #$00
  3526 362F 69 00			adc #$00
  3527 3631 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3528 3633 E8				inx
  3529 3634 AD 07 55			lda Y
  3530 3637 18 69 02			add #$02
  3531 363A 95 98			sta :STACKORIGIN,x
  3532 363C A9 00			lda #$00
  3533 363E 69 00			adc #$00
  3534 3640 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3535 3642 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3536
  3537 				; GenerateCaseStatementEpilog
  3538 3645 4C 02 50			jmp a_0003
  3539 3648			l_07CB
  3540
  3541 				; GenerateCaseEqualityCheck
  3542 3648 B5 99			lda :STACKORIGIN+1,x
  3543 364A C9 49			cmp #73
  3544 364C D0 33			jne l_080D
  3545 364E			@
  3546
  3547 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 58
  3548 364E E8				inx
  3549 364F AD 06 55 95 98		mva X :STACKORIGIN,x
  3550 3654 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3551 3658 E8				inx
  3552 3659 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3553 365E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3554 3662 E8				inx
  3555 3663 AD 06 55 95 98		mva X :STACKORIGIN,x
  3556 3668 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3557 366C E8				inx
  3558 366D AD 07 55			lda Y
  3559 3670 18 69 04			add #$04
  3560 3673 95 98			sta :STACKORIGIN,x
  3561 3675 A9 00			lda #$00
  3562 3677 69 00			adc #$00
  3563 3679 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3564 367B 20 EF 26			jsr GRAPH.LINE
  3565
  3566 				; GenerateCaseStatementEpilog
  3567 367E 4C 02 50			jmp a_0003
  3568 3681			l_080D
  3569
  3570 				; GenerateCaseEqualityCheck
  3571 3681 B5 99			lda :STACKORIGIN+1,x
  3572 3683 C9 4A			cmp #74
  3573 3685 D0 7A			jne l_0827
  3574 3687			@
  3575
  3576 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 61
  3577 3687 E8				inx
  3578 3688 AD 06 55			lda X
  3579 368B 18 69 02			add #$02
  3580 368E 95 98			sta :STACKORIGIN,x
  3581 3690 A9 00			lda #$00
  3582 3692 69 00			adc #$00
  3583 3694 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3584 3696 E8				inx
  3585 3697 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3586 369C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3587 36A0 E8				inx
  3588 36A1 AD 06 55			lda X
  3589 36A4 18 69 02			add #$02
  3590 36A7 95 98			sta :STACKORIGIN,x
  3591 36A9 A9 00			lda #$00
  3592 36AB 69 00			adc #$00
  3593 36AD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3594 36AF E8				inx
  3595 36B0 AD 07 55			lda Y
  3596 36B3 18 69 03			add #$03
  3597 36B6 95 98			sta :STACKORIGIN,x
  3598 36B8 A9 00			lda #$00
  3599 36BA 69 00			adc #$00
  3600 36BC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3601 36BE 20 EF 26			jsr GRAPH.LINE
  3602
  3603 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 62
  3604 36C1 E8				inx
  3605 36C2 AD 06 55			lda X
  3606 36C5 18 69 01			add #$01
  3607 36C8 95 98			sta :STACKORIGIN,x
  3608 36CA A9 00			lda #$00
  3609 36CC 69 00			adc #$00
  3610 36CE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3611 36D0 E8				inx
  3612 36D1 AD 07 55			lda Y
  3613 36D4 18 69 04			add #$04
  3614 36D7 95 98			sta :STACKORIGIN,x
  3615 36D9 A9 00			lda #$00
  3616 36DB 69 00			adc #$00
  3617 36DD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3618 36DF 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3619
  3620 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 63
  3621 36E2 E8				inx
  3622 36E3 AD 06 55 95 98		mva X :STACKORIGIN,x
  3623 36E8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3624 36EC E8				inx
  3625 36ED AD 07 55			lda Y
  3626 36F0 18 69 03			add #$03
  3627 36F3 95 98			sta :STACKORIGIN,x
  3628 36F5 A9 00			lda #$00
  3629 36F7 69 00			adc #$00
  3630 36F9 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3631 36FB 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3632
  3633 				; GenerateCaseStatementEpilog
  3634 36FE 4C 02 50			jmp a_0003
  3635 3701			l_0827
  3636
  3637 				; GenerateCaseEqualityCheck
  3638 3701 B5 99			lda :STACKORIGIN+1,x
  3639 3703 C9 4B			cmp #75
  3640 3705 F0 03 4C B6 37		jne l_0863
  3641 370A			@
  3642
  3643 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 66
  3644 370A E8				inx
  3645 370B AD 06 55 95 98		mva X :STACKORIGIN,x
  3646 3710 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3647 3714 E8				inx
  3648 3715 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3649 371A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3650 371E E8				inx
  3651 371F AD 06 55 95 98		mva X :STACKORIGIN,x
  3652 3724 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3653 3728 E8				inx
  3654 3729 AD 07 55			lda Y
  3655 372C 18 69 04			add #$04
  3656 372F 95 98			sta :STACKORIGIN,x
  3657 3731 A9 00			lda #$00
  3658 3733 69 00			adc #$00
  3659 3735 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3660 3737 20 EF 26			jsr GRAPH.LINE
  3661
  3662 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 67
  3663 373A E8				inx
  3664 373B AD 06 55			lda X
  3665 373E 18 69 01			add #$01
  3666 3741 95 98			sta :STACKORIGIN,x
  3667 3743 A9 00			lda #$00
  3668 3745 69 00			adc #$00
  3669 3747 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3670 3749 E8				inx
  3671 374A AD 07 55			lda Y
  3672 374D 18 69 01			add #$01
  3673 3750 95 98			sta :STACKORIGIN,x
  3674 3752 A9 00			lda #$00
  3675 3754 69 00			adc #$00
  3676 3756 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3677 3758 E8				inx
  3678 3759 AD 06 55			lda X
  3679 375C 18 69 02			add #$02
  3680 375F 95 98			sta :STACKORIGIN,x
  3681 3761 A9 00			lda #$00
  3682 3763 69 00			adc #$00
  3683 3765 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3684 3767 E8				inx
  3685 3768 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3686 376D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3687 3771 20 EF 26			jsr GRAPH.LINE
  3688
  3689 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 68
  3690 3774 E8				inx
  3691 3775 AD 06 55			lda X
  3692 3778 18 69 01			add #$01
  3693 377B 95 98			sta :STACKORIGIN,x
  3694 377D A9 00			lda #$00
  3695 377F 69 00			adc #$00
  3696 3781 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3697 3783 E8				inx
  3698 3784 AD 07 55			lda Y
  3699 3787 18 69 02			add #$02
  3700 378A 95 98			sta :STACKORIGIN,x
  3701 378C A9 00			lda #$00
  3702 378E 69 00			adc #$00
  3703 3790 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3704 3792 E8				inx
  3705 3793 AD 06 55			lda X
  3706 3796 18 69 02			add #$02
  3707 3799 95 98			sta :STACKORIGIN,x
  3708 379B A9 00			lda #$00
  3709 379D 69 00			adc #$00
  3710 379F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3711 37A1 E8				inx
  3712 37A2 AD 07 55			lda Y
  3713 37A5 18 69 04			add #$04
  3714 37A8 95 98			sta :STACKORIGIN,x
  3715 37AA A9 00			lda #$00
  3716 37AC 69 00			adc #$00
  3717 37AE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3718 37B0 20 EF 26			jsr GRAPH.LINE
  3719
  3720 				; GenerateCaseStatementEpilog
  3721 37B3 4C 02 50			jmp a_0003
  3722 37B6			l_0863
  3723
  3724 				; GenerateCaseEqualityCheck
  3725 37B6 B5 99			lda :STACKORIGIN+1,x
  3726 37B8 C9 4C			cmp #76
  3727 37BA D0 72			jne l_08B3
  3728 37BC			@
  3729
  3730 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 71
  3731 37BC E8				inx
  3732 37BD AD 06 55 95 98		mva X :STACKORIGIN,x
  3733 37C2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3734 37C6 E8				inx
  3735 37C7 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3736 37CC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3737 37D0 E8				inx
  3738 37D1 AD 06 55 95 98		mva X :STACKORIGIN,x
  3739 37D6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3740 37DA E8				inx
  3741 37DB AD 07 55			lda Y
  3742 37DE 18 69 04			add #$04
  3743 37E1 95 98			sta :STACKORIGIN,x
  3744 37E3 A9 00			lda #$00
  3745 37E5 69 00			adc #$00
  3746 37E7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3747 37E9 20 EF 26			jsr GRAPH.LINE
  3748
  3749 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 72
  3750 37EC E8				inx
  3751 37ED AD 06 55			lda X
  3752 37F0 18 69 01			add #$01
  3753 37F3 95 98			sta :STACKORIGIN,x
  3754 37F5 A9 00			lda #$00
  3755 37F7 69 00			adc #$00
  3756 37F9 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3757 37FB E8				inx
  3758 37FC AD 07 55			lda Y
  3759 37FF 18 69 04			add #$04
  3760 3802 95 98			sta :STACKORIGIN,x
  3761 3804 A9 00			lda #$00
  3762 3806 69 00			adc #$00
  3763 3808 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3764 380A E8				inx
  3765 380B AD 06 55			lda X
  3766 380E 18 69 02			add #$02
  3767 3811 95 98			sta :STACKORIGIN,x
  3768 3813 A9 00			lda #$00
  3769 3815 69 00			adc #$00
  3770 3817 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3771 3819 E8				inx
  3772 381A AD 07 55			lda Y
  3773 381D 18 69 04			add #$04
  3774 3820 95 98			sta :STACKORIGIN,x
  3775 3822 A9 00			lda #$00
  3776 3824 69 00			adc #$00
  3777 3826 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3778 3828 20 EF 26			jsr GRAPH.LINE
  3779
  3780 				; GenerateCaseStatementEpilog
  3781 382B 4C 02 50			jmp a_0003
  3782 382E			l_08B3
  3783
  3784 				; GenerateCaseEqualityCheck
  3785 382E B5 99			lda :STACKORIGIN+1,x
  3786 3830 C9 4D			cmp #77
  3787 3832 F0 03 4C E6 38		jne l_08EA
  3788 3837			@
  3789
  3790 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 75
  3791 3837 E8				inx
  3792 3838 AD 06 55 95 98		mva X :STACKORIGIN,x
  3793 383D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3794 3841 E8				inx
  3795 3842 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3796 3847 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3797 384B E8				inx
  3798 384C AD 06 55 95 98		mva X :STACKORIGIN,x
  3799 3851 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3800 3855 E8				inx
  3801 3856 AD 07 55			lda Y
  3802 3859 18 69 04			add #$04
  3803 385C 95 98			sta :STACKORIGIN,x
  3804 385E A9 00			lda #$00
  3805 3860 69 00			adc #$00
  3806 3862 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3807 3864 20 EF 26			jsr GRAPH.LINE
  3808
  3809 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 76
  3810 3867 E8				inx
  3811 3868 AD 06 55			lda X
  3812 386B 18 69 02			add #$02
  3813 386E 95 98			sta :STACKORIGIN,x
  3814 3870 A9 00			lda #$00
  3815 3872 69 00			adc #$00
  3816 3874 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3817 3876 E8				inx
  3818 3877 AD 07 55 95 98		mva Y :STACKORIGIN,x
  3819 387C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3820 3880 E8				inx
  3821 3881 AD 06 55			lda X
  3822 3884 18 69 02			add #$02
  3823 3887 95 98			sta :STACKORIGIN,x
  3824 3889 A9 00			lda #$00
  3825 388B 69 00			adc #$00
  3826 388D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3827 388F E8				inx
  3828 3890 AD 07 55			lda Y
  3829 3893 18 69 04			add #$04
  3830 3896 95 98			sta :STACKORIGIN,x
  3831 3898 A9 00			lda #$00
  3832 389A 69 00			adc #$00
  3833 389C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3834 389E 20 EF 26			jsr GRAPH.LINE
  3835
  3836 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 77
  3837 38A1 E8				inx
  3838 38A2 AD 06 55			lda X
  3839 38A5 18 69 01			add #$01
  3840 38A8 95 98			sta :STACKORIGIN,x
  3841 38AA A9 00			lda #$00
  3842 38AC 69 00			adc #$00
  3843 38AE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3844 38B0 E8				inx
  3845 38B1 AD 07 55			lda Y
  3846 38B4 18 69 01			add #$01
  3847 38B7 95 98			sta :STACKORIGIN,x
  3848 38B9 A9 00			lda #$00
  3849 38BB 69 00			adc #$00
  3850 38BD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3851 38BF 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3852
  3853 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 78
  3854 38C2 E8				inx
  3855 38C3 AD 06 55			lda X
  3856 38C6 18 69 01			add #$01
  3857 38C9 95 98			sta :STACKORIGIN,x
  3858 38CB A9 00			lda #$00
  3859 38CD 69 00			adc #$00
  3860 38CF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3861 38D1 E8				inx
  3862 38D2 AD 07 55			lda Y
  3863 38D5 18 69 02			add #$02
  3864 38D8 95 98			sta :STACKORIGIN,x
  3865 38DA A9 00			lda #$00
  3866 38DC 69 00			adc #$00
  3867 38DE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3868 38E0 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3869
  3870 				; GenerateCaseStatementEpilog
  3871 38E3 4C 02 50			jmp a_0003
  3872 38E6			l_08EA
  3873
  3874 				; GenerateCaseEqualityCheck
  3875 38E6 B5 99			lda :STACKORIGIN+1,x
  3876 38E8 C9 4E			cmp #78
  3877 38EA F0 03 4C 7D 39		jne l_093B
  3878 38EF			@
  3879
  3880 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 81
  3881 38EF E8				inx
  3882 38F0 AD 06 55 95 98		mva X :STACKORIGIN,x
  3883 38F5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3884 38F9 E8				inx
  3885 38FA AD 07 55 95 98		mva Y :STACKORIGIN,x
  3886 38FF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3887 3903 E8				inx
  3888 3904 AD 06 55 95 98		mva X :STACKORIGIN,x
  3889 3909 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3890 390D E8				inx
  3891 390E AD 07 55			lda Y
  3892 3911 18 69 04			add #$04
  3893 3914 95 98			sta :STACKORIGIN,x
  3894 3916 A9 00			lda #$00
  3895 3918 69 00			adc #$00
  3896 391A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3897 391C 20 EF 26			jsr GRAPH.LINE
  3898
  3899 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 82
  3900 391F E8				inx
  3901 3920 AD 06 55			lda X
  3902 3923 18 69 02			add #$02
  3903 3926 95 98			sta :STACKORIGIN,x
  3904 3928 A9 00			lda #$00
  3905 392A 69 00			adc #$00
  3906 392C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3907 392E E8				inx
  3908 392F AD 07 55 95 98		mva Y :STACKORIGIN,x
  3909 3934 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3910 3938 E8				inx
  3911 3939 AD 06 55			lda X
  3912 393C 18 69 02			add #$02
  3913 393F 95 98			sta :STACKORIGIN,x
  3914 3941 A9 00			lda #$00
  3915 3943 69 00			adc #$00
  3916 3945 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3917 3947 E8				inx
  3918 3948 AD 07 55			lda Y
  3919 394B 18 69 04			add #$04
  3920 394E 95 98			sta :STACKORIGIN,x
  3921 3950 A9 00			lda #$00
  3922 3952 69 00			adc #$00
  3923 3954 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3924 3956 20 EF 26			jsr GRAPH.LINE
  3925
  3926 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 83
  3927 3959 E8				inx
  3928 395A AD 06 55			lda X
  3929 395D 18 69 01			add #$01
  3930 3960 95 98			sta :STACKORIGIN,x
  3931 3962 A9 00			lda #$00
  3932 3964 69 00			adc #$00
  3933 3966 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3934 3968 E8				inx
  3935 3969 AD 07 55			lda Y
  3936 396C 18 69 01			add #$01
  3937 396F 95 98			sta :STACKORIGIN,x
  3938 3971 A9 00			lda #$00
  3939 3973 69 00			adc #$00
  3940 3975 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3941 3977 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  3942
  3943 				; GenerateCaseStatementEpilog
  3944 397A 4C 02 50			jmp a_0003
  3945 397D			l_093B
  3946
  3947 				; GenerateCaseEqualityCheck
  3948 397D B5 99			lda :STACKORIGIN+1,x
  3949 397F C9 4F			cmp #79
  3950 3981 D0 38			jne l_097D
  3951 3983			@
  3952
  3953 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 86
  3954 3983 E8				inx
  3955 3984 AD 06 55 95 98		mva X :STACKORIGIN,x
  3956 3989 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3957 398D E8				inx
  3958 398E AD 07 55 95 98		mva Y :STACKORIGIN,x
  3959 3993 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3960 3997 E8				inx
  3961 3998 AD 06 55			lda X
  3962 399B 18 69 02			add #$02
  3963 399E 95 98			sta :STACKORIGIN,x
  3964 39A0 A9 00			lda #$00
  3965 39A2 69 00			adc #$00
  3966 39A4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3967 39A6 E8				inx
  3968 39A7 AD 07 55			lda Y
  3969 39AA 18 69 04			add #$04
  3970 39AD 95 98			sta :STACKORIGIN,x
  3971 39AF A9 00			lda #$00
  3972 39B1 69 00			adc #$00
  3973 39B3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  3974 39B5 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  3975
  3976 				; GenerateCaseStatementEpilog
  3977 39B8 4C 02 50			jmp a_0003
  3978 39BB			l_097D
  3979
  3980 				; GenerateCaseEqualityCheck
  3981 39BB B5 99			lda :STACKORIGIN+1,x
  3982 39BD C9 50			cmp #80
  3983 39BF D0 6D			jne l_099B
  3984 39C1			@
  3985
  3986 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 89
  3987 39C1 E8				inx
  3988 39C2 AD 06 55 95 98		mva X :STACKORIGIN,x
  3989 39C7 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3990 39CB E8				inx
  3991 39CC AD 07 55 95 98		mva Y :STACKORIGIN,x
  3992 39D1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3993 39D5 E8				inx
  3994 39D6 AD 06 55			lda X
  3995 39D9 18 69 02			add #$02
  3996 39DC 95 98			sta :STACKORIGIN,x
  3997 39DE A9 00			lda #$00
  3998 39E0 69 00			adc #$00
  3999 39E2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4000 39E4 E8				inx
  4001 39E5 AD 07 55			lda Y
  4002 39E8 18 69 02			add #$02
  4003 39EB 95 98			sta :STACKORIGIN,x
  4004 39ED A9 00			lda #$00
  4005 39EF 69 00			adc #$00
  4006 39F1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4007 39F3 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  4008
  4009 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 90
  4010 39F6 E8				inx
  4011 39F7 AD 06 55 95 98		mva X :STACKORIGIN,x
  4012 39FC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4013 3A00 E8				inx
  4014 3A01 AD 07 55			lda Y
  4015 3A04 18 69 03			add #$03
  4016 3A07 95 98			sta :STACKORIGIN,x
  4017 3A09 A9 00			lda #$00
  4018 3A0B 69 00			adc #$00
  4019 3A0D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4020 3A0F E8				inx
  4021 3A10 AD 06 55 95 98		mva X :STACKORIGIN,x
  4022 3A15 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4023 3A19 E8				inx
  4024 3A1A AD 07 55			lda Y
  4025 3A1D 18 69 04			add #$04
  4026 3A20 95 98			sta :STACKORIGIN,x
  4027 3A22 A9 00			lda #$00
  4028 3A24 69 00			adc #$00
  4029 3A26 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4030 3A28 20 EF 26			jsr GRAPH.LINE
  4031
  4032 				; GenerateCaseStatementEpilog
  4033 3A2B 4C 02 50			jmp a_0003
  4034 3A2E			l_099B
  4035
  4036 				; GenerateCaseEqualityCheck
  4037 3A2E B5 99			lda :STACKORIGIN+1,x
  4038 3A30 C9 51			cmp #81
  4039 3A32 D0 59			jne l_09CE
  4040 3A34			@
  4041
  4042 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 94
  4043 3A34 E8				inx
  4044 3A35 AD 06 55 95 98		mva X :STACKORIGIN,x
  4045 3A3A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4046 3A3E E8				inx
  4047 3A3F AD 07 55 95 98		mva Y :STACKORIGIN,x
  4048 3A44 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4049 3A48 E8				inx
  4050 3A49 AD 06 55			lda X
  4051 3A4C 18 69 02			add #$02
  4052 3A4F 95 98			sta :STACKORIGIN,x
  4053 3A51 A9 00			lda #$00
  4054 3A53 69 00			adc #$00
  4055 3A55 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4056 3A57 E8				inx
  4057 3A58 AD 07 55			lda Y
  4058 3A5B 18 69 03			add #$03
  4059 3A5E 95 98			sta :STACKORIGIN,x
  4060 3A60 A9 00			lda #$00
  4061 3A62 69 00			adc #$00
  4062 3A64 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4063 3A66 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  4064
  4065 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 95
  4066 3A69 E8				inx
  4067 3A6A AD 06 55			lda X
  4068 3A6D 18 69 02			add #$02
  4069 3A70 95 98			sta :STACKORIGIN,x
  4070 3A72 A9 00			lda #$00
  4071 3A74 69 00			adc #$00
  4072 3A76 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4073 3A78 E8				inx
  4074 3A79 AD 07 55			lda Y
  4075 3A7C 18 69 04			add #$04
  4076 3A7F 95 98			sta :STACKORIGIN,x
  4077 3A81 A9 00			lda #$00
  4078 3A83 69 00			adc #$00
  4079 3A85 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4080 3A87 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4081
  4082 				; GenerateCaseStatementEpilog
  4083 3A8A 4C 02 50			jmp a_0003
  4084 3A8D			l_09CE
  4085
  4086 				; GenerateCaseEqualityCheck
  4087 3A8D B5 99			lda :STACKORIGIN+1,x
  4088 3A8F C9 52			cmp #82
  4089 3A91 F0 03 4C 42 3B		jne l_09FB
  4090 3A96			@
  4091
  4092 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 98
  4093 3A96 E8				inx
  4094 3A97 AD 06 55 95 98		mva X :STACKORIGIN,x
  4095 3A9C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4096 3AA0 E8				inx
  4097 3AA1 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4098 3AA6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4099 3AAA E8				inx
  4100 3AAB AD 06 55			lda X
  4101 3AAE 18 69 02			add #$02
  4102 3AB1 95 98			sta :STACKORIGIN,x
  4103 3AB3 A9 00			lda #$00
  4104 3AB5 69 00			adc #$00
  4105 3AB7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4106 3AB9 E8				inx
  4107 3ABA AD 07 55			lda Y
  4108 3ABD 18 69 02			add #$02
  4109 3AC0 95 98			sta :STACKORIGIN,x
  4110 3AC2 A9 00			lda #$00
  4111 3AC4 69 00			adc #$00
  4112 3AC6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4113 3AC8 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  4114
  4115 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 99
  4116 3ACB E8				inx
  4117 3ACC AD 06 55 95 98		mva X :STACKORIGIN,x
  4118 3AD1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4119 3AD5 E8				inx
  4120 3AD6 AD 07 55			lda Y
  4121 3AD9 18 69 03			add #$03
  4122 3ADC 95 98			sta :STACKORIGIN,x
  4123 3ADE A9 00			lda #$00
  4124 3AE0 69 00			adc #$00
  4125 3AE2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4126 3AE4 E8				inx
  4127 3AE5 AD 06 55 95 98		mva X :STACKORIGIN,x
  4128 3AEA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4129 3AEE E8				inx
  4130 3AEF AD 07 55			lda Y
  4131 3AF2 18 69 04			add #$04
  4132 3AF5 95 98			sta :STACKORIGIN,x
  4133 3AF7 A9 00			lda #$00
  4134 3AF9 69 00			adc #$00
  4135 3AFB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4136 3AFD 20 EF 26			jsr GRAPH.LINE
  4137
  4138 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 100
  4139 3B00 E8				inx
  4140 3B01 AD 06 55			lda X
  4141 3B04 18 69 01			add #$01
  4142 3B07 95 98			sta :STACKORIGIN,x
  4143 3B09 A9 00			lda #$00
  4144 3B0B 69 00			adc #$00
  4145 3B0D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4146 3B0F E8				inx
  4147 3B10 AD 07 55			lda Y
  4148 3B13 18 69 03			add #$03
  4149 3B16 95 98			sta :STACKORIGIN,x
  4150 3B18 A9 00			lda #$00
  4151 3B1A 69 00			adc #$00
  4152 3B1C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4153 3B1E E8				inx
  4154 3B1F AD 06 55			lda X
  4155 3B22 18 69 02			add #$02
  4156 3B25 95 98			sta :STACKORIGIN,x
  4157 3B27 A9 00			lda #$00
  4158 3B29 69 00			adc #$00
  4159 3B2B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4160 3B2D E8				inx
  4161 3B2E AD 07 55			lda Y
  4162 3B31 18 69 04			add #$04
  4163 3B34 95 98			sta :STACKORIGIN,x
  4164 3B36 A9 00			lda #$00
  4165 3B38 69 00			adc #$00
  4166 3B3A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4167 3B3C 20 EF 26			jsr GRAPH.LINE
  4168
  4169 				; GenerateCaseStatementEpilog
  4170 3B3F 4C 02 50			jmp a_0003
  4171 3B42			l_09FB
  4172
  4173 				; GenerateCaseEqualityCheck
  4174 3B42 B5 99			lda :STACKORIGIN+1,x
  4175 3B44 C9 53			cmp #83
  4176 3B46 F0 03 4C 2F 3C		jne l_0A4B
  4177 3B4B			@
  4178
  4179 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 103
  4180 3B4B E8				inx
  4181 3B4C AD 06 55 95 98		mva X :STACKORIGIN,x
  4182 3B51 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4183 3B55 E8				inx
  4184 3B56 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4185 3B5B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4186 3B5F E8				inx
  4187 3B60 AD 06 55			lda X
  4188 3B63 18 69 02			add #$02
  4189 3B66 95 98			sta :STACKORIGIN,x
  4190 3B68 A9 00			lda #$00
  4191 3B6A 69 00			adc #$00
  4192 3B6C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4193 3B6E E8				inx
  4194 3B6F AD 07 55 95 98		mva Y :STACKORIGIN,x
  4195 3B74 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4196 3B78 20 EF 26			jsr GRAPH.LINE
  4197
  4198 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 104
  4199 3B7B E8				inx
  4200 3B7C AD 06 55 95 98		mva X :STACKORIGIN,x
  4201 3B81 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4202 3B85 E8				inx
  4203 3B86 AD 07 55			lda Y
  4204 3B89 18 69 01			add #$01
  4205 3B8C 95 98			sta :STACKORIGIN,x
  4206 3B8E A9 00			lda #$00
  4207 3B90 69 00			adc #$00
  4208 3B92 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4209 3B94 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4210
  4211 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 105
  4212 3B97 E8				inx
  4213 3B98 AD 06 55 95 98		mva X :STACKORIGIN,x
  4214 3B9D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4215 3BA1 E8				inx
  4216 3BA2 AD 07 55			lda Y
  4217 3BA5 18 69 02			add #$02
  4218 3BA8 95 98			sta :STACKORIGIN,x
  4219 3BAA A9 00			lda #$00
  4220 3BAC 69 00			adc #$00
  4221 3BAE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4222 3BB0 E8				inx
  4223 3BB1 AD 06 55			lda X
  4224 3BB4 18 69 02			add #$02
  4225 3BB7 95 98			sta :STACKORIGIN,x
  4226 3BB9 A9 00			lda #$00
  4227 3BBB 69 00			adc #$00
  4228 3BBD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4229 3BBF E8				inx
  4230 3BC0 AD 07 55			lda Y
  4231 3BC3 18 69 02			add #$02
  4232 3BC6 95 98			sta :STACKORIGIN,x
  4233 3BC8 A9 00			lda #$00
  4234 3BCA 69 00			adc #$00
  4235 3BCC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4236 3BCE 20 EF 26			jsr GRAPH.LINE
  4237
  4238 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 106
  4239 3BD1 E8				inx
  4240 3BD2 AD 06 55			lda X
  4241 3BD5 18 69 02			add #$02
  4242 3BD8 95 98			sta :STACKORIGIN,x
  4243 3BDA A9 00			lda #$00
  4244 3BDC 69 00			adc #$00
  4245 3BDE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4246 3BE0 E8				inx
  4247 3BE1 AD 07 55			lda Y
  4248 3BE4 18 69 03			add #$03
  4249 3BE7 95 98			sta :STACKORIGIN,x
  4250 3BE9 A9 00			lda #$00
  4251 3BEB 69 00			adc #$00
  4252 3BED 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4253 3BEF 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4254
  4255 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 107
  4256 3BF2 E8				inx
  4257 3BF3 AD 06 55 95 98		mva X :STACKORIGIN,x
  4258 3BF8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4259 3BFC E8				inx
  4260 3BFD AD 07 55			lda Y
  4261 3C00 18 69 04			add #$04
  4262 3C03 95 98			sta :STACKORIGIN,x
  4263 3C05 A9 00			lda #$00
  4264 3C07 69 00			adc #$00
  4265 3C09 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4266 3C0B E8				inx
  4267 3C0C AD 06 55			lda X
  4268 3C0F 18 69 02			add #$02
  4269 3C12 95 98			sta :STACKORIGIN,x
  4270 3C14 A9 00			lda #$00
  4271 3C16 69 00			adc #$00
  4272 3C18 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4273 3C1A E8				inx
  4274 3C1B AD 07 55			lda Y
  4275 3C1E 18 69 04			add #$04
  4276 3C21 95 98			sta :STACKORIGIN,x
  4277 3C23 A9 00			lda #$00
  4278 3C25 69 00			adc #$00
  4279 3C27 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4280 3C29 20 EF 26			jsr GRAPH.LINE
  4281
  4282 				; GenerateCaseStatementEpilog
  4283 3C2C 4C 02 50			jmp a_0003
  4284 3C2F			l_0A4B
  4285
  4286 				; GenerateCaseEqualityCheck
  4287 3C2F B5 99			lda :STACKORIGIN+1,x
  4288 3C31 C9 54			cmp #84
  4289 3C33 D0 72			jne l_0AB1
  4290 3C35			@
  4291
  4292 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 110
  4293 3C35 E8				inx
  4294 3C36 AD 06 55 95 98		mva X :STACKORIGIN,x
  4295 3C3B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4296 3C3F E8				inx
  4297 3C40 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4298 3C45 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4299 3C49 E8				inx
  4300 3C4A AD 06 55			lda X
  4301 3C4D 18 69 02			add #$02
  4302 3C50 95 98			sta :STACKORIGIN,x
  4303 3C52 A9 00			lda #$00
  4304 3C54 69 00			adc #$00
  4305 3C56 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4306 3C58 E8				inx
  4307 3C59 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4308 3C5E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4309 3C62 20 EF 26			jsr GRAPH.LINE
  4310
  4311 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 111
  4312 3C65 E8				inx
  4313 3C66 AD 06 55			lda X
  4314 3C69 18 69 01			add #$01
  4315 3C6C 95 98			sta :STACKORIGIN,x
  4316 3C6E A9 00			lda #$00
  4317 3C70 69 00			adc #$00
  4318 3C72 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4319 3C74 E8				inx
  4320 3C75 AD 07 55			lda Y
  4321 3C78 18 69 01			add #$01
  4322 3C7B 95 98			sta :STACKORIGIN,x
  4323 3C7D A9 00			lda #$00
  4324 3C7F 69 00			adc #$00
  4325 3C81 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4326 3C83 E8				inx
  4327 3C84 AD 06 55			lda X
  4328 3C87 18 69 01			add #$01
  4329 3C8A 95 98			sta :STACKORIGIN,x
  4330 3C8C A9 00			lda #$00
  4331 3C8E 69 00			adc #$00
  4332 3C90 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4333 3C92 E8				inx
  4334 3C93 AD 07 55			lda Y
  4335 3C96 18 69 04			add #$04
  4336 3C99 95 98			sta :STACKORIGIN,x
  4337 3C9B A9 00			lda #$00
  4338 3C9D 69 00			adc #$00
  4339 3C9F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4340 3CA1 20 EF 26			jsr GRAPH.LINE
  4341
  4342 				; GenerateCaseStatementEpilog
  4343 3CA4 4C 02 50			jmp a_0003
  4344 3CA7			l_0AB1
  4345
  4346 				; GenerateCaseEqualityCheck
  4347 3CA7 B5 99			lda :STACKORIGIN+1,x
  4348 3CA9 C9 55			cmp #85
  4349 3CAB F0 03 4C 3E 3D		jne l_0AE8
  4350 3CB0			@
  4351
  4352 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 114
  4353 3CB0 E8				inx
  4354 3CB1 AD 06 55 95 98		mva X :STACKORIGIN,x
  4355 3CB6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4356 3CBA E8				inx
  4357 3CBB AD 07 55 95 98		mva Y :STACKORIGIN,x
  4358 3CC0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4359 3CC4 E8				inx
  4360 3CC5 AD 06 55 95 98		mva X :STACKORIGIN,x
  4361 3CCA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4362 3CCE E8				inx
  4363 3CCF AD 07 55			lda Y
  4364 3CD2 18 69 04			add #$04
  4365 3CD5 95 98			sta :STACKORIGIN,x
  4366 3CD7 A9 00			lda #$00
  4367 3CD9 69 00			adc #$00
  4368 3CDB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4369 3CDD 20 EF 26			jsr GRAPH.LINE
  4370
  4371 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 115
  4372 3CE0 E8				inx
  4373 3CE1 AD 06 55			lda X
  4374 3CE4 18 69 02			add #$02
  4375 3CE7 95 98			sta :STACKORIGIN,x
  4376 3CE9 A9 00			lda #$00
  4377 3CEB 69 00			adc #$00
  4378 3CED 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4379 3CEF E8				inx
  4380 3CF0 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4381 3CF5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4382 3CF9 E8				inx
  4383 3CFA AD 06 55			lda X
  4384 3CFD 18 69 02			add #$02
  4385 3D00 95 98			sta :STACKORIGIN,x
  4386 3D02 A9 00			lda #$00
  4387 3D04 69 00			adc #$00
  4388 3D06 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4389 3D08 E8				inx
  4390 3D09 AD 07 55			lda Y
  4391 3D0C 18 69 04			add #$04
  4392 3D0F 95 98			sta :STACKORIGIN,x
  4393 3D11 A9 00			lda #$00
  4394 3D13 69 00			adc #$00
  4395 3D15 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4396 3D17 20 EF 26			jsr GRAPH.LINE
  4397
  4398 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 116
  4399 3D1A E8				inx
  4400 3D1B AD 06 55			lda X
  4401 3D1E 18 69 01			add #$01
  4402 3D21 95 98			sta :STACKORIGIN,x
  4403 3D23 A9 00			lda #$00
  4404 3D25 69 00			adc #$00
  4405 3D27 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4406 3D29 E8				inx
  4407 3D2A AD 07 55			lda Y
  4408 3D2D 18 69 04			add #$04
  4409 3D30 95 98			sta :STACKORIGIN,x
  4410 3D32 A9 00			lda #$00
  4411 3D34 69 00			adc #$00
  4412 3D36 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4413 3D38 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4414
  4415 				; GenerateCaseStatementEpilog
  4416 3D3B 4C 02 50			jmp a_0003
  4417 3D3E			l_0AE8
  4418
  4419 				; GenerateCaseEqualityCheck
  4420 3D3E B5 99			lda :STACKORIGIN+1,x
  4421 3D40 C9 56			cmp #86
  4422 3D42 F0 03 4C D5 3D		jne l_0B2A
  4423 3D47			@
  4424
  4425 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 119
  4426 3D47 E8				inx
  4427 3D48 AD 06 55 95 98		mva X :STACKORIGIN,x
  4428 3D4D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4429 3D51 E8				inx
  4430 3D52 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4431 3D57 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4432 3D5B E8				inx
  4433 3D5C AD 06 55 95 98		mva X :STACKORIGIN,x
  4434 3D61 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4435 3D65 E8				inx
  4436 3D66 AD 07 55			lda Y
  4437 3D69 18 69 03			add #$03
  4438 3D6C 95 98			sta :STACKORIGIN,x
  4439 3D6E A9 00			lda #$00
  4440 3D70 69 00			adc #$00
  4441 3D72 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4442 3D74 20 EF 26			jsr GRAPH.LINE
  4443
  4444 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 120
  4445 3D77 E8				inx
  4446 3D78 AD 06 55			lda X
  4447 3D7B 18 69 02			add #$02
  4448 3D7E 95 98			sta :STACKORIGIN,x
  4449 3D80 A9 00			lda #$00
  4450 3D82 69 00			adc #$00
  4451 3D84 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4452 3D86 E8				inx
  4453 3D87 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4454 3D8C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4455 3D90 E8				inx
  4456 3D91 AD 06 55			lda X
  4457 3D94 18 69 02			add #$02
  4458 3D97 95 98			sta :STACKORIGIN,x
  4459 3D99 A9 00			lda #$00
  4460 3D9B 69 00			adc #$00
  4461 3D9D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4462 3D9F E8				inx
  4463 3DA0 AD 07 55			lda Y
  4464 3DA3 18 69 03			add #$03
  4465 3DA6 95 98			sta :STACKORIGIN,x
  4466 3DA8 A9 00			lda #$00
  4467 3DAA 69 00			adc #$00
  4468 3DAC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4469 3DAE 20 EF 26			jsr GRAPH.LINE
  4470
  4471 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 121
  4472 3DB1 E8				inx
  4473 3DB2 AD 06 55			lda X
  4474 3DB5 18 69 01			add #$01
  4475 3DB8 95 98			sta :STACKORIGIN,x
  4476 3DBA A9 00			lda #$00
  4477 3DBC 69 00			adc #$00
  4478 3DBE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4479 3DC0 E8				inx
  4480 3DC1 AD 07 55			lda Y
  4481 3DC4 18 69 04			add #$04
  4482 3DC7 95 98			sta :STACKORIGIN,x
  4483 3DC9 A9 00			lda #$00
  4484 3DCB 69 00			adc #$00
  4485 3DCD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4486 3DCF 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4487
  4488 				; GenerateCaseStatementEpilog
  4489 3DD2 4C 02 50			jmp a_0003
  4490 3DD5			l_0B2A
  4491
  4492 				; GenerateCaseEqualityCheck
  4493 3DD5 B5 99			lda :STACKORIGIN+1,x
  4494 3DD7 C9 59			cmp #89
  4495 3DD9 D0 72			jne l_0B6C
  4496 3DDB			@
  4497
  4498 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 124
  4499 3DDB E8				inx
  4500 3DDC AD 06 55 95 98		mva X :STACKORIGIN,x
  4501 3DE1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4502 3DE5 E8				inx
  4503 3DE6 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4504 3DEB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4505 3DEF E8				inx
  4506 3DF0 AD 06 55			lda X
  4507 3DF3 18 69 01			add #$01
  4508 3DF6 95 98			sta :STACKORIGIN,x
  4509 3DF8 A9 00			lda #$00
  4510 3DFA 69 00			adc #$00
  4511 3DFC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4512 3DFE E8				inx
  4513 3DFF AD 07 55			lda Y
  4514 3E02 18 69 04			add #$04
  4515 3E05 95 98			sta :STACKORIGIN,x
  4516 3E07 A9 00			lda #$00
  4517 3E09 69 00			adc #$00
  4518 3E0B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4519 3E0D 20 EF 26			jsr GRAPH.LINE
  4520
  4521 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 125
  4522 3E10 E8				inx
  4523 3E11 AD 06 55			lda X
  4524 3E14 18 69 02			add #$02
  4525 3E17 95 98			sta :STACKORIGIN,x
  4526 3E19 A9 00			lda #$00
  4527 3E1B 69 00			adc #$00
  4528 3E1D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4529 3E1F E8				inx
  4530 3E20 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4531 3E25 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4532 3E29 E8				inx
  4533 3E2A AD 06 55			lda X
  4534 3E2D 18 69 01			add #$01
  4535 3E30 95 98			sta :STACKORIGIN,x
  4536 3E32 A9 00			lda #$00
  4537 3E34 69 00			adc #$00
  4538 3E36 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4539 3E38 E8				inx
  4540 3E39 AD 07 55			lda Y
  4541 3E3C 18 69 04			add #$04
  4542 3E3F 95 98			sta :STACKORIGIN,x
  4543 3E41 A9 00			lda #$00
  4544 3E43 69 00			adc #$00
  4545 3E45 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4546 3E47 20 EF 26			jsr GRAPH.LINE
  4547
  4548 				; GenerateCaseStatementEpilog
  4549 3E4A 4C 02 50			jmp a_0003
  4550 3E4D			l_0B6C
  4551
  4552 				; GenerateCaseEqualityCheck
  4553 3E4D B5 99			lda :STACKORIGIN+1,x
  4554 3E4F C9 58			cmp #88
  4555 3E51 D0 6D			jne l_0BA3
  4556 3E53			@
  4557
  4558 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 128
  4559 3E53 E8				inx
  4560 3E54 AD 06 55 95 98		mva X :STACKORIGIN,x
  4561 3E59 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4562 3E5D E8				inx
  4563 3E5E AD 07 55 95 98		mva Y :STACKORIGIN,x
  4564 3E63 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4565 3E67 E8				inx
  4566 3E68 AD 06 55			lda X
  4567 3E6B 18 69 02			add #$02
  4568 3E6E 95 98			sta :STACKORIGIN,x
  4569 3E70 A9 00			lda #$00
  4570 3E72 69 00			adc #$00
  4571 3E74 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4572 3E76 E8				inx
  4573 3E77 AD 07 55			lda Y
  4574 3E7A 18 69 04			add #$04
  4575 3E7D 95 98			sta :STACKORIGIN,x
  4576 3E7F A9 00			lda #$00
  4577 3E81 69 00			adc #$00
  4578 3E83 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4579 3E85 20 EF 26			jsr GRAPH.LINE
  4580
  4581 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 129
  4582 3E88 E8				inx
  4583 3E89 AD 06 55			lda X
  4584 3E8C 18 69 02			add #$02
  4585 3E8F 95 98			sta :STACKORIGIN,x
  4586 3E91 A9 00			lda #$00
  4587 3E93 69 00			adc #$00
  4588 3E95 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4589 3E97 E8				inx
  4590 3E98 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4591 3E9D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4592 3EA1 E8				inx
  4593 3EA2 AD 06 55 95 98		mva X :STACKORIGIN,x
  4594 3EA7 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4595 3EAB E8				inx
  4596 3EAC AD 07 55			lda Y
  4597 3EAF 18 69 04			add #$04
  4598 3EB2 95 98			sta :STACKORIGIN,x
  4599 3EB4 A9 00			lda #$00
  4600 3EB6 69 00			adc #$00
  4601 3EB8 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4602 3EBA 20 EF 26			jsr GRAPH.LINE
  4603
  4604 				; GenerateCaseStatementEpilog
  4605 3EBD 4C 02 50			jmp a_0003
  4606 3EC0			l_0BA3
  4607
  4608 				; GenerateCaseEqualityCheck
  4609 3EC0 B5 99			lda :STACKORIGIN+1,x
  4610 3EC2 C9 57			cmp #87
  4611 3EC4 F0 03 4C 78 3F		jne l_0BD6
  4612 3EC9			@
  4613
  4614 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 132
  4615 3EC9 E8				inx
  4616 3ECA AD 06 55 95 98		mva X :STACKORIGIN,x
  4617 3ECF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4618 3ED3 E8				inx
  4619 3ED4 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4620 3ED9 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4621 3EDD E8				inx
  4622 3EDE AD 06 55 95 98		mva X :STACKORIGIN,x
  4623 3EE3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4624 3EE7 E8				inx
  4625 3EE8 AD 07 55			lda Y
  4626 3EEB 18 69 04			add #$04
  4627 3EEE 95 98			sta :STACKORIGIN,x
  4628 3EF0 A9 00			lda #$00
  4629 3EF2 69 00			adc #$00
  4630 3EF4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4631 3EF6 20 EF 26			jsr GRAPH.LINE
  4632
  4633 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 133
  4634 3EF9 E8				inx
  4635 3EFA AD 06 55			lda X
  4636 3EFD 18 69 02			add #$02
  4637 3F00 95 98			sta :STACKORIGIN,x
  4638 3F02 A9 00			lda #$00
  4639 3F04 69 00			adc #$00
  4640 3F06 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4641 3F08 E8				inx
  4642 3F09 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4643 3F0E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4644 3F12 E8				inx
  4645 3F13 AD 06 55			lda X
  4646 3F16 18 69 02			add #$02
  4647 3F19 95 98			sta :STACKORIGIN,x
  4648 3F1B A9 00			lda #$00
  4649 3F1D 69 00			adc #$00
  4650 3F1F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4651 3F21 E8				inx
  4652 3F22 AD 07 55			lda Y
  4653 3F25 18 69 04			add #$04
  4654 3F28 95 98			sta :STACKORIGIN,x
  4655 3F2A A9 00			lda #$00
  4656 3F2C 69 00			adc #$00
  4657 3F2E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4658 3F30 20 EF 26			jsr GRAPH.LINE
  4659
  4660 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 134
  4661 3F33 E8				inx
  4662 3F34 AD 06 55			lda X
  4663 3F37 18 69 01			add #$01
  4664 3F3A 95 98			sta :STACKORIGIN,x
  4665 3F3C A9 00			lda #$00
  4666 3F3E 69 00			adc #$00
  4667 3F40 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4668 3F42 E8				inx
  4669 3F43 AD 07 55			lda Y
  4670 3F46 18 69 02			add #$02
  4671 3F49 95 98			sta :STACKORIGIN,x
  4672 3F4B A9 00			lda #$00
  4673 3F4D 69 00			adc #$00
  4674 3F4F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4675 3F51 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4676
  4677 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 135
  4678 3F54 E8				inx
  4679 3F55 AD 06 55			lda X
  4680 3F58 18 69 01			add #$01
  4681 3F5B 95 98			sta :STACKORIGIN,x
  4682 3F5D A9 00			lda #$00
  4683 3F5F 69 00			adc #$00
  4684 3F61 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4685 3F63 E8				inx
  4686 3F64 AD 07 55			lda Y
  4687 3F67 18 69 03			add #$03
  4688 3F6A 95 98			sta :STACKORIGIN,x
  4689 3F6C A9 00			lda #$00
  4690 3F6E 69 00			adc #$00
  4691 3F70 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4692 3F72 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4693
  4694 				; GenerateCaseStatementEpilog
  4695 3F75 4C 02 50			jmp a_0003
  4696 3F78			l_0BD6
  4697
  4698 				; GenerateCaseEqualityCheck
  4699 3F78 B5 99			lda :STACKORIGIN+1,x
  4700 3F7A C9 5A			cmp #90
  4701 3F7C F0 03 4C 28 40		jne l_0C27
  4702 3F81			@
  4703
  4704 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 138
  4705 3F81 E8				inx
  4706 3F82 AD 06 55 95 98		mva X :STACKORIGIN,x
  4707 3F87 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4708 3F8B E8				inx
  4709 3F8C AD 07 55 95 98		mva Y :STACKORIGIN,x
  4710 3F91 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4711 3F95 E8				inx
  4712 3F96 AD 06 55			lda X
  4713 3F99 18 69 02			add #$02
  4714 3F9C 95 98			sta :STACKORIGIN,x
  4715 3F9E A9 00			lda #$00
  4716 3FA0 69 00			adc #$00
  4717 3FA2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4718 3FA4 E8				inx
  4719 3FA5 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4720 3FAA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4721 3FAE 20 EF 26			jsr GRAPH.LINE
  4722
  4723 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 139
  4724 3FB1 E8				inx
  4725 3FB2 AD 06 55			lda X
  4726 3FB5 18 69 02			add #$02
  4727 3FB8 95 98			sta :STACKORIGIN,x
  4728 3FBA A9 00			lda #$00
  4729 3FBC 69 00			adc #$00
  4730 3FBE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4731 3FC0 E8				inx
  4732 3FC1 AD 07 55			lda Y
  4733 3FC4 18 69 01			add #$01
  4734 3FC7 95 98			sta :STACKORIGIN,x
  4735 3FC9 A9 00			lda #$00
  4736 3FCB 69 00			adc #$00
  4737 3FCD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4738 3FCF E8				inx
  4739 3FD0 AD 06 55 95 98		mva X :STACKORIGIN,x
  4740 3FD5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4741 3FD9 E8				inx
  4742 3FDA AD 07 55			lda Y
  4743 3FDD 18 69 03			add #$03
  4744 3FE0 95 98			sta :STACKORIGIN,x
  4745 3FE2 A9 00			lda #$00
  4746 3FE4 69 00			adc #$00
  4747 3FE6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4748 3FE8 20 EF 26			jsr GRAPH.LINE
  4749
  4750 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 140
  4751 3FEB E8				inx
  4752 3FEC AD 06 55 95 98		mva X :STACKORIGIN,x
  4753 3FF1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4754 3FF5 E8				inx
  4755 3FF6 AD 07 55			lda Y
  4756 3FF9 18 69 04			add #$04
  4757 3FFC 95 98			sta :STACKORIGIN,x
  4758 3FFE A9 00			lda #$00
  4759 4000 69 00			adc #$00
  4760 4002 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4761 4004 E8				inx
  4762 4005 AD 06 55			lda X
  4763 4008 18 69 02			add #$02
  4764 400B 95 98			sta :STACKORIGIN,x
  4765 400D A9 00			lda #$00
  4766 400F 69 00			adc #$00
  4767 4011 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4768 4013 E8				inx
  4769 4014 AD 07 55			lda Y
  4770 4017 18 69 04			add #$04
  4771 401A 95 98			sta :STACKORIGIN,x
  4772 401C A9 00			lda #$00
  4773 401E 69 00			adc #$00
  4774 4020 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4775 4022 20 EF 26			jsr GRAPH.LINE
  4776
  4777 				; GenerateCaseStatementEpilog
  4778 4025 4C 02 50			jmp a_0003
  4779 4028			l_0C27
  4780
  4781 				; GenerateCaseEqualityCheck
  4782 4028 B5 99			lda :STACKORIGIN+1,x
  4783 402A C9 31			cmp #49
  4784 402C D0 77			jne l_0C73
  4785 402E			@
  4786
  4787 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 143
  4788 402E E8				inx
  4789 402F AD 06 55			lda X
  4790 4032 18 69 02			add #$02
  4791 4035 95 98			sta :STACKORIGIN,x
  4792 4037 A9 00			lda #$00
  4793 4039 69 00			adc #$00
  4794 403B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4795 403D E8				inx
  4796 403E AD 07 55 95 98		mva Y :STACKORIGIN,x
  4797 4043 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4798 4047 E8				inx
  4799 4048 AD 06 55			lda X
  4800 404B 18 69 02			add #$02
  4801 404E 95 98			sta :STACKORIGIN,x
  4802 4050 A9 00			lda #$00
  4803 4052 69 00			adc #$00
  4804 4054 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4805 4056 E8				inx
  4806 4057 AD 07 55			lda Y
  4807 405A 18 69 04			add #$04
  4808 405D 95 98			sta :STACKORIGIN,x
  4809 405F A9 00			lda #$00
  4810 4061 69 00			adc #$00
  4811 4063 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4812 4065 20 EF 26			jsr GRAPH.LINE
  4813
  4814 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 144
  4815 4068 E8				inx
  4816 4069 AD 06 55			lda X
  4817 406C 18 69 01			add #$01
  4818 406F 95 98			sta :STACKORIGIN,x
  4819 4071 A9 00			lda #$00
  4820 4073 69 00			adc #$00
  4821 4075 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4822 4077 E8				inx
  4823 4078 AD 07 55			lda Y
  4824 407B 18 69 01			add #$01
  4825 407E 95 98			sta :STACKORIGIN,x
  4826 4080 A9 00			lda #$00
  4827 4082 69 00			adc #$00
  4828 4084 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4829 4086 E8				inx
  4830 4087 AD 06 55 95 98		mva X :STACKORIGIN,x
  4831 408C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4832 4090 E8				inx
  4833 4091 AD 07 55			lda Y
  4834 4094 18 69 02			add #$02
  4835 4097 95 98			sta :STACKORIGIN,x
  4836 4099 A9 00			lda #$00
  4837 409B 69 00			adc #$00
  4838 409D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4839 409F 20 EF 26			jsr GRAPH.LINE
  4840
  4841 				; GenerateCaseStatementEpilog
  4842 40A2 4C 02 50			jmp a_0003
  4843 40A5			l_0C73
  4844
  4845 				; GenerateCaseEqualityCheck
  4846 40A5 B5 99			lda :STACKORIGIN+1,x
  4847 40A7 C9 32			cmp #50
  4848 40A9 F0 03 4C 5D 41		jne l_0CAE
  4849 40AE			@
  4850
  4851 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 148
  4852 40AE E8				inx
  4853 40AF AD 06 55			lda X
  4854 40B2 18 69 01			add #$01
  4855 40B5 95 98			sta :STACKORIGIN,x
  4856 40B7 A9 00			lda #$00
  4857 40B9 69 00			adc #$00
  4858 40BB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4859 40BD E8				inx
  4860 40BE AD 07 55 95 98		mva Y :STACKORIGIN,x
  4861 40C3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4862 40C7 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4863
  4864 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 149
  4865 40CA E8				inx
  4866 40CB AD 06 55 95 98		mva X :STACKORIGIN,x
  4867 40D0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4868 40D4 E8				inx
  4869 40D5 AD 07 55			lda Y
  4870 40D8 18 69 01			add #$01
  4871 40DB 95 98			sta :STACKORIGIN,x
  4872 40DD A9 00			lda #$00
  4873 40DF 69 00			adc #$00
  4874 40E1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4875 40E3 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4876
  4877 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 151
  4878 40E6 E8				inx
  4879 40E7 AD 06 55			lda X
  4880 40EA 18 69 02			add #$02
  4881 40ED 95 98			sta :STACKORIGIN,x
  4882 40EF A9 00			lda #$00
  4883 40F1 69 00			adc #$00
  4884 40F3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4885 40F5 E8				inx
  4886 40F6 AD 07 55			lda Y
  4887 40F9 18 69 01			add #$01
  4888 40FC 95 98			sta :STACKORIGIN,x
  4889 40FE A9 00			lda #$00
  4890 4100 69 00			adc #$00
  4891 4102 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4892 4104 E8				inx
  4893 4105 AD 06 55 95 98		mva X :STACKORIGIN,x
  4894 410A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4895 410E E8				inx
  4896 410F AD 07 55			lda Y
  4897 4112 18 69 03			add #$03
  4898 4115 95 98			sta :STACKORIGIN,x
  4899 4117 A9 00			lda #$00
  4900 4119 69 00			adc #$00
  4901 411B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4902 411D 20 EF 26			jsr GRAPH.LINE
  4903
  4904 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 152
  4905 4120 E8				inx
  4906 4121 AD 06 55 95 98		mva X :STACKORIGIN,x
  4907 4126 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4908 412A E8				inx
  4909 412B AD 07 55			lda Y
  4910 412E 18 69 04			add #$04
  4911 4131 95 98			sta :STACKORIGIN,x
  4912 4133 A9 00			lda #$00
  4913 4135 69 00			adc #$00
  4914 4137 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4915 4139 E8				inx
  4916 413A AD 06 55			lda X
  4917 413D 18 69 02			add #$02
  4918 4140 95 98			sta :STACKORIGIN,x
  4919 4142 A9 00			lda #$00
  4920 4144 69 00			adc #$00
  4921 4146 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4922 4148 E8				inx
  4923 4149 AD 07 55			lda Y
  4924 414C 18 69 04			add #$04
  4925 414F 95 98			sta :STACKORIGIN,x
  4926 4151 A9 00			lda #$00
  4927 4153 69 00			adc #$00
  4928 4155 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4929 4157 20 EF 26			jsr GRAPH.LINE
  4930
  4931 				; GenerateCaseStatementEpilog
  4932 415A 4C 02 50			jmp a_0003
  4933 415D			l_0CAE
  4934
  4935 				; GenerateCaseEqualityCheck
  4936 415D B5 99			lda :STACKORIGIN+1,x
  4937 415F C9 33			cmp #51
  4938 4161 F0 03 4C 97 42		jne l_0CFF
  4939 4166			@
  4940
  4941 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 155
  4942 4166 E8				inx
  4943 4167 AD 06 55			lda X
  4944 416A 18 69 01			add #$01
  4945 416D 95 98			sta :STACKORIGIN,x
  4946 416F A9 00			lda #$00
  4947 4171 69 00			adc #$00
  4948 4173 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4949 4175 E8				inx
  4950 4176 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4951 417B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4952 417F 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4953
  4954 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 155
  4955 4182 E8				inx
  4956 4183 AD 06 55			lda X
  4957 4186 18 69 02			add #$02
  4958 4189 95 98			sta :STACKORIGIN,x
  4959 418B A9 00			lda #$00
  4960 418D 69 00			adc #$00
  4961 418F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4962 4191 E8				inx
  4963 4192 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4964 4197 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4965 419B 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4966
  4967 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 156
  4968 419E E8				inx
  4969 419F AD 06 55 95 98		mva X :STACKORIGIN,x
  4970 41A4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4971 41A8 E8				inx
  4972 41A9 AD 07 55 95 98		mva Y :STACKORIGIN,x
  4973 41AE A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4974 41B2 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4975
  4976 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 157
  4977 41B5 E8				inx
  4978 41B6 AD 06 55			lda X
  4979 41B9 18 69 02			add #$02
  4980 41BC 95 98			sta :STACKORIGIN,x
  4981 41BE A9 00			lda #$00
  4982 41C0 69 00			adc #$00
  4983 41C2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4984 41C4 E8				inx
  4985 41C5 AD 07 55			lda Y
  4986 41C8 18 69 01			add #$01
  4987 41CB 95 98			sta :STACKORIGIN,x
  4988 41CD A9 00			lda #$00
  4989 41CF 69 00			adc #$00
  4990 41D1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  4991 41D3 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  4992
  4993 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 158
  4994 41D6 E8				inx
  4995 41D7 AD 06 55			lda X
  4996 41DA 18 69 02			add #$02
  4997 41DD 95 98			sta :STACKORIGIN,x
  4998 41DF A9 00			lda #$00
  4999 41E1 69 00			adc #$00
  5000 41E3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5001 41E5 E8				inx
  5002 41E6 AD 07 55			lda Y
  5003 41E9 18 69 03			add #$03
  5004 41EC 95 98			sta :STACKORIGIN,x
  5005 41EE A9 00			lda #$00
  5006 41F0 69 00			adc #$00
  5007 41F2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5008 41F4 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5009
  5010 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 159
  5011 41F7 E8				inx
  5012 41F8 AD 06 55			lda X
  5013 41FB 18 69 01			add #$01
  5014 41FE 95 98			sta :STACKORIGIN,x
  5015 4200 A9 00			lda #$00
  5016 4202 69 00			adc #$00
  5017 4204 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5018 4206 E8				inx
  5019 4207 AD 07 55			lda Y
  5020 420A 18 69 04			add #$04
  5021 420D 95 98			sta :STACKORIGIN,x
  5022 420F A9 00			lda #$00
  5023 4211 69 00			adc #$00
  5024 4213 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5025 4215 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5026
  5027 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 159
  5028 4218 E8				inx
  5029 4219 AD 06 55			lda X
  5030 421C 18 69 02			add #$02
  5031 421F 95 98			sta :STACKORIGIN,x
  5032 4221 A9 00			lda #$00
  5033 4223 69 00			adc #$00
  5034 4225 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5035 4227 E8				inx
  5036 4228 AD 07 55			lda Y
  5037 422B 18 69 04			add #$04
  5038 422E 95 98			sta :STACKORIGIN,x
  5039 4230 A9 00			lda #$00
  5040 4232 69 00			adc #$00
  5041 4234 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5042 4236 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5043
  5044 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 160
  5045 4239 E8				inx
  5046 423A AD 06 55 95 98		mva X :STACKORIGIN,x
  5047 423F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5048 4243 E8				inx
  5049 4244 AD 07 55			lda Y
  5050 4247 18 69 04			add #$04
  5051 424A 95 98			sta :STACKORIGIN,x
  5052 424C A9 00			lda #$00
  5053 424E 69 00			adc #$00
  5054 4250 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5055 4252 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5056
  5057 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 161
  5058 4255 E8				inx
  5059 4256 AD 06 55			lda X
  5060 4259 18 69 01			add #$01
  5061 425C 95 98			sta :STACKORIGIN,x
  5062 425E A9 00			lda #$00
  5063 4260 69 00			adc #$00
  5064 4262 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5065 4264 E8				inx
  5066 4265 AD 07 55			lda Y
  5067 4268 18 69 02			add #$02
  5068 426B 95 98			sta :STACKORIGIN,x
  5069 426D A9 00			lda #$00
  5070 426F 69 00			adc #$00
  5071 4271 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5072 4273 E8				inx
  5073 4274 AD 06 55			lda X
  5074 4277 18 69 02			add #$02
  5075 427A 95 98			sta :STACKORIGIN,x
  5076 427C A9 00			lda #$00
  5077 427E 69 00			adc #$00
  5078 4280 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5079 4282 E8				inx
  5080 4283 AD 07 55			lda Y
  5081 4286 18 69 02			add #$02
  5082 4289 95 98			sta :STACKORIGIN,x
  5083 428B A9 00			lda #$00
  5084 428D 69 00			adc #$00
  5085 428F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5086 4291 20 EF 26			jsr GRAPH.LINE
  5087
  5088 				; GenerateCaseStatementEpilog
  5089 4294 4C 02 50			jmp a_0003
  5090 4297			l_0CFF
  5091
  5092 				; GenerateCaseEqualityCheck
  5093 4297 B5 99			lda :STACKORIGIN+1,x
  5094 4299 C9 34			cmp #52
  5095 429B F0 03 4C 51 43		jne l_0D89
  5096 42A0			@
  5097
  5098 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 164
  5099 42A0 E8				inx
  5100 42A1 AD 06 55			lda X
  5101 42A4 18 69 02			add #$02
  5102 42A7 95 98			sta :STACKORIGIN,x
  5103 42A9 A9 00			lda #$00
  5104 42AB 69 00			adc #$00
  5105 42AD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5106 42AF E8				inx
  5107 42B0 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5108 42B5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5109 42B9 E8				inx
  5110 42BA AD 06 55 95 98		mva X :STACKORIGIN,x
  5111 42BF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5112 42C3 E8				inx
  5113 42C4 AD 07 55			lda Y
  5114 42C7 18 69 02			add #$02
  5115 42CA 95 98			sta :STACKORIGIN,x
  5116 42CC A9 00			lda #$00
  5117 42CE 69 00			adc #$00
  5118 42D0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5119 42D2 20 EF 26			jsr GRAPH.LINE
  5120
  5121 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 165
  5122 42D5 E8				inx
  5123 42D6 AD 06 55 95 98		mva X :STACKORIGIN,x
  5124 42DB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5125 42DF E8				inx
  5126 42E0 AD 07 55			lda Y
  5127 42E3 18 69 03			add #$03
  5128 42E6 95 98			sta :STACKORIGIN,x
  5129 42E8 A9 00			lda #$00
  5130 42EA 69 00			adc #$00
  5131 42EC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5132 42EE E8				inx
  5133 42EF AD 06 55			lda X
  5134 42F2 18 69 02			add #$02
  5135 42F5 95 98			sta :STACKORIGIN,x
  5136 42F7 A9 00			lda #$00
  5137 42F9 69 00			adc #$00
  5138 42FB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5139 42FD E8				inx
  5140 42FE AD 07 55			lda Y
  5141 4301 18 69 03			add #$03
  5142 4304 95 98			sta :STACKORIGIN,x
  5143 4306 A9 00			lda #$00
  5144 4308 69 00			adc #$00
  5145 430A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5146 430C 20 EF 26			jsr GRAPH.LINE
  5147
  5148 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 166
  5149 430F E8				inx
  5150 4310 AD 06 55			lda X
  5151 4313 18 69 02			add #$02
  5152 4316 95 98			sta :STACKORIGIN,x
  5153 4318 A9 00			lda #$00
  5154 431A 69 00			adc #$00
  5155 431C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5156 431E E8				inx
  5157 431F AD 07 55			lda Y
  5158 4322 18 69 02			add #$02
  5159 4325 95 98			sta :STACKORIGIN,x
  5160 4327 A9 00			lda #$00
  5161 4329 69 00			adc #$00
  5162 432B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5163 432D E8				inx
  5164 432E AD 06 55			lda X
  5165 4331 18 69 02			add #$02
  5166 4334 95 98			sta :STACKORIGIN,x
  5167 4336 A9 00			lda #$00
  5168 4338 69 00			adc #$00
  5169 433A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5170 433C E8				inx
  5171 433D AD 07 55			lda Y
  5172 4340 18 69 04			add #$04
  5173 4343 95 98			sta :STACKORIGIN,x
  5174 4345 A9 00			lda #$00
  5175 4347 69 00			adc #$00
  5176 4349 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5177 434B 20 EF 26			jsr GRAPH.LINE
  5178
  5179 				; GenerateCaseStatementEpilog
  5180 434E 4C 02 50			jmp a_0003
  5181 4351			l_0D89
  5182
  5183 				; GenerateCaseEqualityCheck
  5184 4351 B5 99			lda :STACKORIGIN+1,x
  5185 4353 C9 35			cmp #53
  5186 4355 F0 03 4C 43 44		jne l_0DDD
  5187 435A			@
  5188
  5189 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 169
  5190 435A E8				inx
  5191 435B AD 06 55 95 98		mva X :STACKORIGIN,x
  5192 4360 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5193 4364 E8				inx
  5194 4365 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5195 436A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5196 436E E8				inx
  5197 436F AD 06 55			lda X
  5198 4372 18 69 02			add #$02
  5199 4375 95 98			sta :STACKORIGIN,x
  5200 4377 A9 00			lda #$00
  5201 4379 69 00			adc #$00
  5202 437B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5203 437D E8				inx
  5204 437E AD 07 55 95 98		mva Y :STACKORIGIN,x
  5205 4383 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5206 4387 20 EF 26			jsr GRAPH.LINE
  5207
  5208 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 170
  5209 438A E8				inx
  5210 438B AD 06 55 95 98		mva X :STACKORIGIN,x
  5211 4390 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5212 4394 E8				inx
  5213 4395 AD 07 55			lda Y
  5214 4398 18 69 01			add #$01
  5215 439B 95 98			sta :STACKORIGIN,x
  5216 439D A9 00			lda #$00
  5217 439F 69 00			adc #$00
  5218 43A1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5219 43A3 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5220
  5221 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 171
  5222 43A6 E8				inx
  5223 43A7 AD 06 55			lda X
  5224 43AA 18 69 01			add #$01
  5225 43AD 95 98			sta :STACKORIGIN,x
  5226 43AF A9 00			lda #$00
  5227 43B1 69 00			adc #$00
  5228 43B3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5229 43B5 E8				inx
  5230 43B6 AD 07 55			lda Y
  5231 43B9 18 69 02			add #$02
  5232 43BC 95 98			sta :STACKORIGIN,x
  5233 43BE A9 00			lda #$00
  5234 43C0 69 00			adc #$00
  5235 43C2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5236 43C4 E8				inx
  5237 43C5 AD 06 55			lda X
  5238 43C8 18 69 02			add #$02
  5239 43CB 95 98			sta :STACKORIGIN,x
  5240 43CD A9 00			lda #$00
  5241 43CF 69 00			adc #$00
  5242 43D1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5243 43D3 E8				inx
  5244 43D4 AD 07 55			lda Y
  5245 43D7 18 69 02			add #$02
  5246 43DA 95 98			sta :STACKORIGIN,x
  5247 43DC A9 00			lda #$00
  5248 43DE 69 00			adc #$00
  5249 43E0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5250 43E2 20 EF 26			jsr GRAPH.LINE
  5251
  5252 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 172
  5253 43E5 E8				inx
  5254 43E6 AD 06 55			lda X
  5255 43E9 18 69 02			add #$02
  5256 43EC 95 98			sta :STACKORIGIN,x
  5257 43EE A9 00			lda #$00
  5258 43F0 69 00			adc #$00
  5259 43F2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5260 43F4 E8				inx
  5261 43F5 AD 07 55			lda Y
  5262 43F8 18 69 03			add #$03
  5263 43FB 95 98			sta :STACKORIGIN,x
  5264 43FD A9 00			lda #$00
  5265 43FF 69 00			adc #$00
  5266 4401 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5267 4403 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5268
  5269 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 173
  5270 4406 E8				inx
  5271 4407 AD 06 55 95 98		mva X :STACKORIGIN,x
  5272 440C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5273 4410 E8				inx
  5274 4411 AD 07 55			lda Y
  5275 4414 18 69 04			add #$04
  5276 4417 95 98			sta :STACKORIGIN,x
  5277 4419 A9 00			lda #$00
  5278 441B 69 00			adc #$00
  5279 441D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5280 441F E8				inx
  5281 4420 AD 06 55			lda X
  5282 4423 18 69 02			add #$02
  5283 4426 95 98			sta :STACKORIGIN,x
  5284 4428 A9 00			lda #$00
  5285 442A 69 00			adc #$00
  5286 442C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5287 442E E8				inx
  5288 442F AD 07 55			lda Y
  5289 4432 18 69 04			add #$04
  5290 4435 95 98			sta :STACKORIGIN,x
  5291 4437 A9 00			lda #$00
  5292 4439 69 00			adc #$00
  5293 443B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5294 443D 20 EF 26			jsr GRAPH.LINE
  5295
  5296 				; GenerateCaseStatementEpilog
  5297 4440 4C 02 50			jmp a_0003
  5298 4443			l_0DDD
  5299
  5300 				; GenerateCaseEqualityCheck
  5301 4443 B5 99			lda :STACKORIGIN+1,x
  5302 4445 C9 36			cmp #54
  5303 4447 D0 72			jne l_0E47
  5304 4449			@
  5305
  5306 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 177
  5307 4449 E8				inx
  5308 444A AD 06 55 95 98		mva X :STACKORIGIN,x
  5309 444F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5310 4453 E8				inx
  5311 4454 AD 07 55			lda Y
  5312 4457 18 69 01			add #$01
  5313 445A 95 98			sta :STACKORIGIN,x
  5314 445C A9 00			lda #$00
  5315 445E 69 00			adc #$00
  5316 4460 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5317 4462 E8				inx
  5318 4463 AD 06 55			lda X
  5319 4466 18 69 01			add #$01
  5320 4469 95 98			sta :STACKORIGIN,x
  5321 446B A9 00			lda #$00
  5322 446D 69 00			adc #$00
  5323 446F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5324 4471 E8				inx
  5325 4472 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5326 4477 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5327 447B 20 EF 26			jsr GRAPH.LINE
  5328
  5329 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 178
  5330 447E E8				inx
  5331 447F AD 06 55 95 98		mva X :STACKORIGIN,x
  5332 4484 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5333 4488 E8				inx
  5334 4489 AD 07 55			lda Y
  5335 448C 18 69 02			add #$02
  5336 448F 95 98			sta :STACKORIGIN,x
  5337 4491 A9 00			lda #$00
  5338 4493 69 00			adc #$00
  5339 4495 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5340 4497 E8				inx
  5341 4498 AD 06 55			lda X
  5342 449B 18 69 02			add #$02
  5343 449E 95 98			sta :STACKORIGIN,x
  5344 44A0 A9 00			lda #$00
  5345 44A2 69 00			adc #$00
  5346 44A4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5347 44A6 E8				inx
  5348 44A7 AD 07 55			lda Y
  5349 44AA 18 69 04			add #$04
  5350 44AD 95 98			sta :STACKORIGIN,x
  5351 44AF A9 00			lda #$00
  5352 44B1 69 00			adc #$00
  5353 44B3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5354 44B5 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  5355
  5356 				; GenerateCaseStatementEpilog
  5357 44B8 4C 02 50			jmp a_0003
  5358 44BB			l_0E47
  5359
  5360 				; GenerateCaseEqualityCheck
  5361 44BB B5 99			lda :STACKORIGIN+1,x
  5362 44BD C9 37			cmp #55
  5363 44BF F0 03 4C 6B 45		jne l_0E7E
  5364 44C4			@
  5365
  5366 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 181
  5367 44C4 E8				inx
  5368 44C5 AD 06 55 95 98		mva X :STACKORIGIN,x
  5369 44CA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5370 44CE E8				inx
  5371 44CF AD 07 55 95 98		mva Y :STACKORIGIN,x
  5372 44D4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5373 44D8 E8				inx
  5374 44D9 AD 06 55			lda X
  5375 44DC 18 69 02			add #$02
  5376 44DF 95 98			sta :STACKORIGIN,x
  5377 44E1 A9 00			lda #$00
  5378 44E3 69 00			adc #$00
  5379 44E5 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5380 44E7 E8				inx
  5381 44E8 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5382 44ED A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5383 44F1 20 EF 26			jsr GRAPH.LINE
  5384
  5385 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 182
  5386 44F4 E8				inx
  5387 44F5 AD 06 55			lda X
  5388 44F8 18 69 02			add #$02
  5389 44FB 95 98			sta :STACKORIGIN,x
  5390 44FD A9 00			lda #$00
  5391 44FF 69 00			adc #$00
  5392 4501 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5393 4503 E8				inx
  5394 4504 AD 07 55			lda Y
  5395 4507 18 69 01			add #$01
  5396 450A 95 98			sta :STACKORIGIN,x
  5397 450C A9 00			lda #$00
  5398 450E 69 00			adc #$00
  5399 4510 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5400 4512 E8				inx
  5401 4513 AD 06 55 95 98		mva X :STACKORIGIN,x
  5402 4518 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5403 451C E8				inx
  5404 451D AD 07 55			lda Y
  5405 4520 18 69 04			add #$04
  5406 4523 95 98			sta :STACKORIGIN,x
  5407 4525 A9 00			lda #$00
  5408 4527 69 00			adc #$00
  5409 4529 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5410 452B 20 EF 26			jsr GRAPH.LINE
  5411
  5412 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 183
  5413 452E E8				inx
  5414 452F AD 06 55 95 98		mva X :STACKORIGIN,x
  5415 4534 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5416 4538 E8				inx
  5417 4539 AD 07 55			lda Y
  5418 453C 18 69 02			add #$02
  5419 453F 95 98			sta :STACKORIGIN,x
  5420 4541 A9 00			lda #$00
  5421 4543 69 00			adc #$00
  5422 4545 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5423 4547 E8				inx
  5424 4548 AD 06 55			lda X
  5425 454B 18 69 02			add #$02
  5426 454E 95 98			sta :STACKORIGIN,x
  5427 4550 A9 00			lda #$00
  5428 4552 69 00			adc #$00
  5429 4554 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5430 4556 E8				inx
  5431 4557 AD 07 55			lda Y
  5432 455A 18 69 02			add #$02
  5433 455D 95 98			sta :STACKORIGIN,x
  5434 455F A9 00			lda #$00
  5435 4561 69 00			adc #$00
  5436 4563 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5437 4565 20 EF 26			jsr GRAPH.LINE
  5438
  5439 				; GenerateCaseStatementEpilog
  5440 4568 4C 02 50			jmp a_0003
  5441 456B			l_0E7E
  5442
  5443 				; GenerateCaseEqualityCheck
  5444 456B B5 99			lda :STACKORIGIN+1,x
  5445 456D C9 38			cmp #56
  5446 456F D0 72			jne l_0ECA
  5447 4571			@
  5448
  5449 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 186
  5450 4571 E8				inx
  5451 4572 AD 06 55 95 98		mva X :STACKORIGIN,x
  5452 4577 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5453 457B E8				inx
  5454 457C AD 07 55 95 98		mva Y :STACKORIGIN,x
  5455 4581 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5456 4585 E8				inx
  5457 4586 AD 06 55			lda X
  5458 4589 18 69 02			add #$02
  5459 458C 95 98			sta :STACKORIGIN,x
  5460 458E A9 00			lda #$00
  5461 4590 69 00			adc #$00
  5462 4592 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5463 4594 E8				inx
  5464 4595 AD 07 55			lda Y
  5465 4598 18 69 02			add #$02
  5466 459B 95 98			sta :STACKORIGIN,x
  5467 459D A9 00			lda #$00
  5468 459F 69 00			adc #$00
  5469 45A1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5470 45A3 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  5471
  5472 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 187
  5473 45A6 E8				inx
  5474 45A7 AD 06 55 95 98		mva X :STACKORIGIN,x
  5475 45AC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5476 45B0 E8				inx
  5477 45B1 AD 07 55			lda Y
  5478 45B4 18 69 02			add #$02
  5479 45B7 95 98			sta :STACKORIGIN,x
  5480 45B9 A9 00			lda #$00
  5481 45BB 69 00			adc #$00
  5482 45BD 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5483 45BF E8				inx
  5484 45C0 AD 06 55			lda X
  5485 45C3 18 69 02			add #$02
  5486 45C6 95 98			sta :STACKORIGIN,x
  5487 45C8 A9 00			lda #$00
  5488 45CA 69 00			adc #$00
  5489 45CC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5490 45CE E8				inx
  5491 45CF AD 07 55			lda Y
  5492 45D2 18 69 04			add #$04
  5493 45D5 95 98			sta :STACKORIGIN,x
  5494 45D7 A9 00			lda #$00
  5495 45D9 69 00			adc #$00
  5496 45DB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5497 45DD 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  5498
  5499 				; GenerateCaseStatementEpilog
  5500 45E0 4C 02 50			jmp a_0003
  5501 45E3			l_0ECA
  5502
  5503 				; GenerateCaseEqualityCheck
  5504 45E3 B5 99			lda :STACKORIGIN+1,x
  5505 45E5 C9 39			cmp #57
  5506 45E7 D0 72			jne l_0F01
  5507 45E9			@
  5508
  5509 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 197
  5510 45E9 E8				inx
  5511 45EA AD 06 55 95 98		mva X :STACKORIGIN,x
  5512 45EF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5513 45F3 E8				inx
  5514 45F4 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5515 45F9 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5516 45FD E8				inx
  5517 45FE AD 06 55			lda X
  5518 4601 18 69 02			add #$02
  5519 4604 95 98			sta :STACKORIGIN,x
  5520 4606 A9 00			lda #$00
  5521 4608 69 00			adc #$00
  5522 460A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5523 460C E8				inx
  5524 460D AD 07 55			lda Y
  5525 4610 18 69 02			add #$02
  5526 4613 95 98			sta :STACKORIGIN,x
  5527 4615 A9 00			lda #$00
  5528 4617 69 00			adc #$00
  5529 4619 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5530 461B 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  5531
  5532 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 198
  5533 461E E8				inx
  5534 461F AD 06 55			lda X
  5535 4622 18 69 02			add #$02
  5536 4625 95 98			sta :STACKORIGIN,x
  5537 4627 A9 00			lda #$00
  5538 4629 69 00			adc #$00
  5539 462B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5540 462D E8				inx
  5541 462E AD 07 55			lda Y
  5542 4631 18 69 03			add #$03
  5543 4634 95 98			sta :STACKORIGIN,x
  5544 4636 A9 00			lda #$00
  5545 4638 69 00			adc #$00
  5546 463A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5547 463C E8				inx
  5548 463D AD 06 55 95 98		mva X :STACKORIGIN,x
  5549 4642 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5550 4646 E8				inx
  5551 4647 AD 07 55			lda Y
  5552 464A 18 69 04			add #$04
  5553 464D 95 98			sta :STACKORIGIN,x
  5554 464F A9 00			lda #$00
  5555 4651 69 00			adc #$00
  5556 4653 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5557 4655 20 EF 26			jsr GRAPH.LINE
  5558
  5559 				; GenerateCaseStatementEpilog
  5560 4658 4C 02 50			jmp a_0003
  5561 465B			l_0F01
  5562
  5563 				; GenerateCaseEqualityCheck
  5564 465B B5 99			lda :STACKORIGIN+1,x
  5565 465D C9 30			cmp #48
  5566 465F F0 03 4C 39 47		jne l_0F38
  5567 4664			@
  5568
  5569 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 201
  5570 4664 E8				inx
  5571 4665 AD 06 55			lda X
  5572 4668 18 69 01			add #$01
  5573 466B 95 98			sta :STACKORIGIN,x
  5574 466D A9 00			lda #$00
  5575 466F 69 00			adc #$00
  5576 4671 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5577 4673 E8				inx
  5578 4674 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5579 4679 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5580 467D 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5581
  5582 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 202
  5583 4680 E8				inx
  5584 4681 AD 06 55 95 98		mva X :STACKORIGIN,x
  5585 4686 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5586 468A E8				inx
  5587 468B AD 07 55			lda Y
  5588 468E 18 69 01			add #$01
  5589 4691 95 98			sta :STACKORIGIN,x
  5590 4693 A9 00			lda #$00
  5591 4695 69 00			adc #$00
  5592 4697 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5593 4699 E8				inx
  5594 469A AD 06 55 95 98		mva X :STACKORIGIN,x
  5595 469F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5596 46A3 E8				inx
  5597 46A4 AD 07 55			lda Y
  5598 46A7 18 69 03			add #$03
  5599 46AA 95 98			sta :STACKORIGIN,x
  5600 46AC A9 00			lda #$00
  5601 46AE 69 00			adc #$00
  5602 46B0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5603 46B2 20 EF 26			jsr GRAPH.LINE
  5604
  5605 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 203
  5606 46B5 E8				inx
  5607 46B6 AD 06 55			lda X
  5608 46B9 18 69 02			add #$02
  5609 46BC 95 98			sta :STACKORIGIN,x
  5610 46BE A9 00			lda #$00
  5611 46C0 69 00			adc #$00
  5612 46C2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5613 46C4 E8				inx
  5614 46C5 AD 07 55			lda Y
  5615 46C8 18 69 01			add #$01
  5616 46CB 95 98			sta :STACKORIGIN,x
  5617 46CD A9 00			lda #$00
  5618 46CF 69 00			adc #$00
  5619 46D1 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5620 46D3 E8				inx
  5621 46D4 AD 06 55			lda X
  5622 46D7 18 69 02			add #$02
  5623 46DA 95 98			sta :STACKORIGIN,x
  5624 46DC A9 00			lda #$00
  5625 46DE 69 00			adc #$00
  5626 46E0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5627 46E2 E8				inx
  5628 46E3 AD 07 55			lda Y
  5629 46E6 18 69 03			add #$03
  5630 46E9 95 98			sta :STACKORIGIN,x
  5631 46EB A9 00			lda #$00
  5632 46ED 69 00			adc #$00
  5633 46EF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5634 46F1 20 EF 26			jsr GRAPH.LINE
  5635
  5636 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 204
  5637 46F4 E8				inx
  5638 46F5 AD 06 55			lda X
  5639 46F8 18 69 01			add #$01
  5640 46FB 95 98			sta :STACKORIGIN,x
  5641 46FD A9 00			lda #$00
  5642 46FF 69 00			adc #$00
  5643 4701 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5644 4703 E8				inx
  5645 4704 AD 07 55			lda Y
  5646 4707 18 69 04			add #$04
  5647 470A 95 98			sta :STACKORIGIN,x
  5648 470C A9 00			lda #$00
  5649 470E 69 00			adc #$00
  5650 4710 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5651 4712 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5652
  5653 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 205
  5654 4715 E8				inx
  5655 4716 AD 06 55			lda X
  5656 4719 18 69 01			add #$01
  5657 471C 95 98			sta :STACKORIGIN,x
  5658 471E A9 00			lda #$00
  5659 4720 69 00			adc #$00
  5660 4722 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5661 4724 E8				inx
  5662 4725 AD 07 55			lda Y
  5663 4728 18 69 02			add #$02
  5664 472B 95 98			sta :STACKORIGIN,x
  5665 472D A9 00			lda #$00
  5666 472F 69 00			adc #$00
  5667 4731 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5668 4733 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5669
  5670 				; GenerateCaseStatementEpilog
  5671 4736 4C 02 50			jmp a_0003
  5672 4739			l_0F38
  5673
  5674 				; GenerateCaseEqualityCheck
  5675 4739 B5 99			lda :STACKORIGIN+1,x
  5676 473B C9 2E			cmp #46
  5677 473D D0 1F			jne l_0F9C
  5678 473F			@
  5679
  5680 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 208
  5681 473F E8				inx
  5682 4740 AD 06 55 95 98		mva X :STACKORIGIN,x
  5683 4745 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5684 4749 E8				inx
  5685 474A AD 07 55			lda Y
  5686 474D 18 69 04			add #$04
  5687 4750 95 98			sta :STACKORIGIN,x
  5688 4752 A9 00			lda #$00
  5689 4754 69 00			adc #$00
  5690 4756 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5691 4758 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5692
  5693 				; GenerateCaseStatementEpilog
  5694 475B 4C 02 50			jmp a_0003
  5695 475E			l_0F9C
  5696
  5697 				; GenerateCaseEqualityCheck
  5698 475E B5 99			lda :STACKORIGIN+1,x
  5699 4760 C9 2C			cmp #44
  5700 4762 D0 40			jne l_0FB0
  5701 4764			@
  5702
  5703 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 211
  5704 4764 E8				inx
  5705 4765 AD 06 55			lda X
  5706 4768 18 69 01			add #$01
  5707 476B 95 98			sta :STACKORIGIN,x
  5708 476D A9 00			lda #$00
  5709 476F 69 00			adc #$00
  5710 4771 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5711 4773 E8				inx
  5712 4774 AD 07 55			lda Y
  5713 4777 18 69 03			add #$03
  5714 477A 95 98			sta :STACKORIGIN,x
  5715 477C A9 00			lda #$00
  5716 477E 69 00			adc #$00
  5717 4780 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5718 4782 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5719
  5720 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 212
  5721 4785 E8				inx
  5722 4786 AD 06 55 95 98		mva X :STACKORIGIN,x
  5723 478B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5724 478F E8				inx
  5725 4790 AD 07 55			lda Y
  5726 4793 18 69 04			add #$04
  5727 4796 95 98			sta :STACKORIGIN,x
  5728 4798 A9 00			lda #$00
  5729 479A 69 00			adc #$00
  5730 479C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5731 479E 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5732
  5733 				; GenerateCaseStatementEpilog
  5734 47A1 4C 02 50			jmp a_0003
  5735 47A4			l_0FB0
  5736
  5737 				; GenerateCaseEqualityCheck
  5738 47A4 B5 99			lda :STACKORIGIN+1,x
  5739 47A6 C9 3B			cmp #59
  5740 47A8 D0 61			jne l_0FD3
  5741 47AA			@
  5742
  5743 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 215
  5744 47AA E8				inx
  5745 47AB AD 06 55			lda X
  5746 47AE 18 69 01			add #$01
  5747 47B1 95 98			sta :STACKORIGIN,x
  5748 47B3 A9 00			lda #$00
  5749 47B5 69 00			adc #$00
  5750 47B7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5751 47B9 E8				inx
  5752 47BA AD 07 55			lda Y
  5753 47BD 18 69 01			add #$01
  5754 47C0 95 98			sta :STACKORIGIN,x
  5755 47C2 A9 00			lda #$00
  5756 47C4 69 00			adc #$00
  5757 47C6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5758 47C8 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5759
  5760 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 216
  5761 47CB E8				inx
  5762 47CC AD 06 55			lda X
  5763 47CF 18 69 01			add #$01
  5764 47D2 95 98			sta :STACKORIGIN,x
  5765 47D4 A9 00			lda #$00
  5766 47D6 69 00			adc #$00
  5767 47D8 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5768 47DA E8				inx
  5769 47DB AD 07 55			lda Y
  5770 47DE 18 69 03			add #$03
  5771 47E1 95 98			sta :STACKORIGIN,x
  5772 47E3 A9 00			lda #$00
  5773 47E5 69 00			adc #$00
  5774 47E7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5775 47E9 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5776
  5777 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 217
  5778 47EC E8				inx
  5779 47ED AD 06 55 95 98		mva X :STACKORIGIN,x
  5780 47F2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5781 47F6 E8				inx
  5782 47F7 AD 07 55			lda Y
  5783 47FA 18 69 04			add #$04
  5784 47FD 95 98			sta :STACKORIGIN,x
  5785 47FF A9 00			lda #$00
  5786 4801 69 00			adc #$00
  5787 4803 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5788 4805 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5789
  5790 				; GenerateCaseStatementEpilog
  5791 4808 4C 02 50			jmp a_0003
  5792 480B			l_0FD3
  5793
  5794 				; GenerateCaseEqualityCheck
  5795 480B B5 99			lda :STACKORIGIN+1,x
  5796 480D C9 3A			cmp #58
  5797 480F D0 3B			jne l_1005
  5798 4811			@
  5799
  5800 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 220
  5801 4811 E8				inx
  5802 4812 AD 06 55 95 98		mva X :STACKORIGIN,x
  5803 4817 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5804 481B E8				inx
  5805 481C AD 07 55			lda Y
  5806 481F 18 69 01			add #$01
  5807 4822 95 98			sta :STACKORIGIN,x
  5808 4824 A9 00			lda #$00
  5809 4826 69 00			adc #$00
  5810 4828 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5811 482A 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5812
  5813 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 221
  5814 482D E8				inx
  5815 482E AD 06 55 95 98		mva X :STACKORIGIN,x
  5816 4833 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5817 4837 E8				inx
  5818 4838 AD 07 55			lda Y
  5819 483B 18 69 03			add #$03
  5820 483E 95 98			sta :STACKORIGIN,x
  5821 4840 A9 00			lda #$00
  5822 4842 69 00			adc #$00
  5823 4844 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5824 4846 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5825
  5826 				; GenerateCaseStatementEpilog
  5827 4849 4C 02 50			jmp a_0003
  5828 484C			l_1005
  5829
  5830 				; GenerateCaseEqualityCheck
  5831 484C B5 99			lda :STACKORIGIN+1,x
  5832 484E C9 21			cmp #33
  5833 4850 D0 4F			jne l_1024
  5834 4852			@
  5835
  5836 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 224
  5837 4852 E8				inx
  5838 4853 AD 06 55 95 98		mva X :STACKORIGIN,x
  5839 4858 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5840 485C E8				inx
  5841 485D AD 07 55 95 98		mva Y :STACKORIGIN,x
  5842 4862 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5843 4866 E8				inx
  5844 4867 AD 06 55 95 98		mva X :STACKORIGIN,x
  5845 486C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5846 4870 E8				inx
  5847 4871 AD 07 55			lda Y
  5848 4874 18 69 02			add #$02
  5849 4877 95 98			sta :STACKORIGIN,x
  5850 4879 A9 00			lda #$00
  5851 487B 69 00			adc #$00
  5852 487D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5853 487F 20 EF 26			jsr GRAPH.LINE
  5854
  5855 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 225
  5856 4882 E8				inx
  5857 4883 AD 06 55 95 98		mva X :STACKORIGIN,x
  5858 4888 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5859 488C E8				inx
  5860 488D AD 07 55			lda Y
  5861 4890 18 69 04			add #$04
  5862 4893 95 98			sta :STACKORIGIN,x
  5863 4895 A9 00			lda #$00
  5864 4897 69 00			adc #$00
  5865 4899 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5866 489B 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5867
  5868 				; GenerateCaseStatementEpilog
  5869 489E 4C 02 50			jmp a_0003
  5870 48A1			l_1024
  5871
  5872 				; GenerateCaseEqualityCheck
  5873 48A1 B5 99			lda :STACKORIGIN+1,x
  5874 48A3 C9 3F			cmp #63
  5875 48A5 F0 03 4C 43 49		jne l_1049
  5876 48AA			@
  5877
  5878 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 228
  5879 48AA E8				inx
  5880 48AB AD 06 55			lda X
  5881 48AE 18 69 01			add #$01
  5882 48B1 95 98			sta :STACKORIGIN,x
  5883 48B3 A9 00			lda #$00
  5884 48B5 69 00			adc #$00
  5885 48B7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5886 48B9 E8				inx
  5887 48BA AD 07 55 95 98		mva Y :STACKORIGIN,x
  5888 48BF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5889 48C3 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5890
  5891 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 229
  5892 48C6 E8				inx
  5893 48C7 AD 06 55 95 98		mva X :STACKORIGIN,x
  5894 48CC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5895 48D0 E8				inx
  5896 48D1 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5897 48D6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5898 48DA 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5899
  5900 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 230
  5901 48DD E8				inx
  5902 48DE AD 06 55			lda X
  5903 48E1 18 69 02			add #$02
  5904 48E4 95 98			sta :STACKORIGIN,x
  5905 48E6 A9 00			lda #$00
  5906 48E8 69 00			adc #$00
  5907 48EA 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5908 48EC E8				inx
  5909 48ED AD 07 55			lda Y
  5910 48F0 18 69 01			add #$01
  5911 48F3 95 98			sta :STACKORIGIN,x
  5912 48F5 A9 00			lda #$00
  5913 48F7 69 00			adc #$00
  5914 48F9 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5915 48FB 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5916
  5917 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 231
  5918 48FE E8				inx
  5919 48FF AD 06 55			lda X
  5920 4902 18 69 01			add #$01
  5921 4905 95 98			sta :STACKORIGIN,x
  5922 4907 A9 00			lda #$00
  5923 4909 69 00			adc #$00
  5924 490B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5925 490D E8				inx
  5926 490E AD 07 55			lda Y
  5927 4911 18 69 02			add #$02
  5928 4914 95 98			sta :STACKORIGIN,x
  5929 4916 A9 00			lda #$00
  5930 4918 69 00			adc #$00
  5931 491A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5932 491C 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5933
  5934 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 232
  5935 491F E8				inx
  5936 4920 AD 06 55			lda X
  5937 4923 18 69 01			add #$01
  5938 4926 95 98			sta :STACKORIGIN,x
  5939 4928 A9 00			lda #$00
  5940 492A 69 00			adc #$00
  5941 492C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5942 492E E8				inx
  5943 492F AD 07 55			lda Y
  5944 4932 18 69 04			add #$04
  5945 4935 95 98			sta :STACKORIGIN,x
  5946 4937 A9 00			lda #$00
  5947 4939 69 00			adc #$00
  5948 493B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5949 493D 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5950
  5951 				; GenerateCaseStatementEpilog
  5952 4940 4C 02 50			jmp a_0003
  5953 4943			l_1049
  5954
  5955 				; GenerateCaseEqualityCheck
  5956 4943 B5 99			lda :STACKORIGIN+1,x
  5957 4945 C9 28			cmp #40
  5958 4947 D0 75			jne l_1091
  5959 4949			@
  5960
  5961 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 235
  5962 4949 E8				inx
  5963 494A AD 06 55			lda X
  5964 494D 18 69 01			add #$01
  5965 4950 95 98			sta :STACKORIGIN,x
  5966 4952 A9 00			lda #$00
  5967 4954 69 00			adc #$00
  5968 4956 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5969 4958 E8				inx
  5970 4959 AD 07 55 95 98		mva Y :STACKORIGIN,x
  5971 495E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5972 4962 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  5973
  5974 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 236
  5975 4965 E8				inx
  5976 4966 AD 06 55 95 98		mva X :STACKORIGIN,x
  5977 496B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5978 496F E8				inx
  5979 4970 AD 07 55			lda Y
  5980 4973 18 69 01			add #$01
  5981 4976 95 98			sta :STACKORIGIN,x
  5982 4978 A9 00			lda #$00
  5983 497A 69 00			adc #$00
  5984 497C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5985 497E E8				inx
  5986 497F AD 06 55 95 98		mva X :STACKORIGIN,x
  5987 4984 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  5988 4988 E8				inx
  5989 4989 AD 07 55			lda Y
  5990 498C 18 69 03			add #$03
  5991 498F 95 98			sta :STACKORIGIN,x
  5992 4991 A9 00			lda #$00
  5993 4993 69 00			adc #$00
  5994 4995 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  5995 4997 20 EF 26			jsr GRAPH.LINE
  5996
  5997 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 237
  5998 499A E8				inx
  5999 499B AD 06 55			lda X
  6000 499E 18 69 01			add #$01
  6001 49A1 95 98			sta :STACKORIGIN,x
  6002 49A3 A9 00			lda #$00
  6003 49A5 69 00			adc #$00
  6004 49A7 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6005 49A9 E8				inx
  6006 49AA AD 07 55			lda Y
  6007 49AD 18 69 04			add #$04
  6008 49B0 95 98			sta :STACKORIGIN,x
  6009 49B2 A9 00			lda #$00
  6010 49B4 69 00			adc #$00
  6011 49B6 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6012 49B8 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6013
  6014 				; GenerateCaseStatementEpilog
  6015 49BB 4C 02 50			jmp a_0003
  6016 49BE			l_1091
  6017
  6018 				; GenerateCaseEqualityCheck
  6019 49BE B5 99			lda :STACKORIGIN+1,x
  6020 49C0 C9 29			cmp #41
  6021 49C2 F0 03 4C 46 4A		jne l_10C9
  6022 49C7			@
  6023
  6024 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 240
  6025 49C7 E8				inx
  6026 49C8 AD 06 55			lda X
  6027 49CB 18 69 01			add #$01
  6028 49CE 95 98			sta :STACKORIGIN,x
  6029 49D0 A9 00			lda #$00
  6030 49D2 69 00			adc #$00
  6031 49D4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6032 49D6 E8				inx
  6033 49D7 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6034 49DC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6035 49E0 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6036
  6037 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 241
  6038 49E3 E8				inx
  6039 49E4 AD 06 55			lda X
  6040 49E7 18 69 02			add #$02
  6041 49EA 95 98			sta :STACKORIGIN,x
  6042 49EC A9 00			lda #$00
  6043 49EE 69 00			adc #$00
  6044 49F0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6045 49F2 E8				inx
  6046 49F3 AD 07 55			lda Y
  6047 49F6 18 69 01			add #$01
  6048 49F9 95 98			sta :STACKORIGIN,x
  6049 49FB A9 00			lda #$00
  6050 49FD 69 00			adc #$00
  6051 49FF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6052 4A01 E8				inx
  6053 4A02 AD 06 55			lda X
  6054 4A05 18 69 02			add #$02
  6055 4A08 95 98			sta :STACKORIGIN,x
  6056 4A0A A9 00			lda #$00
  6057 4A0C 69 00			adc #$00
  6058 4A0E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6059 4A10 E8				inx
  6060 4A11 AD 07 55			lda Y
  6061 4A14 18 69 03			add #$03
  6062 4A17 95 98			sta :STACKORIGIN,x
  6063 4A19 A9 00			lda #$00
  6064 4A1B 69 00			adc #$00
  6065 4A1D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6066 4A1F 20 EF 26			jsr GRAPH.LINE
  6067
  6068 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 242
  6069 4A22 E8				inx
  6070 4A23 AD 06 55			lda X
  6071 4A26 18 69 01			add #$01
  6072 4A29 95 98			sta :STACKORIGIN,x
  6073 4A2B A9 00			lda #$00
  6074 4A2D 69 00			adc #$00
  6075 4A2F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6076 4A31 E8				inx
  6077 4A32 AD 07 55			lda Y
  6078 4A35 18 69 04			add #$04
  6079 4A38 95 98			sta :STACKORIGIN,x
  6080 4A3A A9 00			lda #$00
  6081 4A3C 69 00			adc #$00
  6082 4A3E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6083 4A40 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6084
  6085 				; GenerateCaseStatementEpilog
  6086 4A43 4C 02 50			jmp a_0003
  6087 4A46			l_10C9
  6088
  6089 				; GenerateCaseEqualityCheck
  6090 4A46 B5 99			lda :STACKORIGIN+1,x
  6091 4A48 C9 25			cmp #37
  6092 4A4A D0 75			jne l_1109
  6093 4A4C			@
  6094
  6095 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 245
  6096 4A4C E8				inx
  6097 4A4D AD 06 55 95 98		mva X :STACKORIGIN,x
  6098 4A52 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6099 4A56 E8				inx
  6100 4A57 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6101 4A5C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6102 4A60 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6103
  6104 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 246
  6105 4A63 E8				inx
  6106 4A64 AD 06 55			lda X
  6107 4A67 18 69 02			add #$02
  6108 4A6A 95 98			sta :STACKORIGIN,x
  6109 4A6C A9 00			lda #$00
  6110 4A6E 69 00			adc #$00
  6111 4A70 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6112 4A72 E8				inx
  6113 4A73 AD 07 55			lda Y
  6114 4A76 18 69 04			add #$04
  6115 4A79 95 98			sta :STACKORIGIN,x
  6116 4A7B A9 00			lda #$00
  6117 4A7D 69 00			adc #$00
  6118 4A7F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6119 4A81 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6120
  6121 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 247
  6122 4A84 E8				inx
  6123 4A85 AD 06 55			lda X
  6124 4A88 18 69 02			add #$02
  6125 4A8B 95 98			sta :STACKORIGIN,x
  6126 4A8D A9 00			lda #$00
  6127 4A8F 69 00			adc #$00
  6128 4A91 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6129 4A93 E8				inx
  6130 4A94 AD 07 55			lda Y
  6131 4A97 18 69 01			add #$01
  6132 4A9A 95 98			sta :STACKORIGIN,x
  6133 4A9C A9 00			lda #$00
  6134 4A9E 69 00			adc #$00
  6135 4AA0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6136 4AA2 E8				inx
  6137 4AA3 AD 06 55 95 98		mva X :STACKORIGIN,x
  6138 4AA8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6139 4AAC E8				inx
  6140 4AAD AD 07 55			lda Y
  6141 4AB0 18 69 03			add #$03
  6142 4AB3 95 98			sta :STACKORIGIN,x
  6143 4AB5 A9 00			lda #$00
  6144 4AB7 69 00			adc #$00
  6145 4AB9 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6146 4ABB 20 EF 26			jsr GRAPH.LINE
  6147
  6148 				; GenerateCaseStatementEpilog
  6149 4ABE 4C 02 50			jmp a_0003
  6150 4AC1			l_1109
  6151
  6152 				; GenerateCaseEqualityCheck
  6153 4AC1 B5 99			lda :STACKORIGIN+1,x
  6154 4AC3 C9 2B			cmp #43
  6155 4AC5 D0 77			jne l_1141
  6156 4AC7			@
  6157
  6158 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 250
  6159 4AC7 E8				inx
  6160 4AC8 AD 06 55			lda X
  6161 4ACB 18 69 01			add #$01
  6162 4ACE 95 98			sta :STACKORIGIN,x
  6163 4AD0 A9 00			lda #$00
  6164 4AD2 69 00			adc #$00
  6165 4AD4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6166 4AD6 E8				inx
  6167 4AD7 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6168 4ADC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6169 4AE0 E8				inx
  6170 4AE1 AD 06 55			lda X
  6171 4AE4 18 69 01			add #$01
  6172 4AE7 95 98			sta :STACKORIGIN,x
  6173 4AE9 A9 00			lda #$00
  6174 4AEB 69 00			adc #$00
  6175 4AED 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6176 4AEF E8				inx
  6177 4AF0 AD 07 55			lda Y
  6178 4AF3 18 69 04			add #$04
  6179 4AF6 95 98			sta :STACKORIGIN,x
  6180 4AF8 A9 00			lda #$00
  6181 4AFA 69 00			adc #$00
  6182 4AFC 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6183 4AFE 20 EF 26			jsr GRAPH.LINE
  6184
  6185 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 251
  6186 4B01 E8				inx
  6187 4B02 AD 06 55 95 98		mva X :STACKORIGIN,x
  6188 4B07 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6189 4B0B E8				inx
  6190 4B0C AD 07 55			lda Y
  6191 4B0F 18 69 02			add #$02
  6192 4B12 95 98			sta :STACKORIGIN,x
  6193 4B14 A9 00			lda #$00
  6194 4B16 69 00			adc #$00
  6195 4B18 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6196 4B1A E8				inx
  6197 4B1B AD 06 55			lda X
  6198 4B1E 18 69 02			add #$02
  6199 4B21 95 98			sta :STACKORIGIN,x
  6200 4B23 A9 00			lda #$00
  6201 4B25 69 00			adc #$00
  6202 4B27 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6203 4B29 E8				inx
  6204 4B2A AD 07 55			lda Y
  6205 4B2D 18 69 02			add #$02
  6206 4B30 95 98			sta :STACKORIGIN,x
  6207 4B32 A9 00			lda #$00
  6208 4B34 69 00			adc #$00
  6209 4B36 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6210 4B38 20 EF 26			jsr GRAPH.LINE
  6211
  6212 				; GenerateCaseStatementEpilog
  6213 4B3B 4C 02 50			jmp a_0003
  6214 4B3E			l_1141
  6215
  6216 				; GenerateCaseEqualityCheck
  6217 4B3E B5 99			lda :STACKORIGIN+1,x
  6218 4B40 C9 2D			cmp #45
  6219 4B42 D0 3D			jne l_117C
  6220 4B44			@
  6221
  6222 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 254
  6223 4B44 E8				inx
  6224 4B45 AD 06 55 95 98		mva X :STACKORIGIN,x
  6225 4B4A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6226 4B4E E8				inx
  6227 4B4F AD 07 55			lda Y
  6228 4B52 18 69 02			add #$02
  6229 4B55 95 98			sta :STACKORIGIN,x
  6230 4B57 A9 00			lda #$00
  6231 4B59 69 00			adc #$00
  6232 4B5B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6233 4B5D E8				inx
  6234 4B5E AD 06 55			lda X
  6235 4B61 18 69 02			add #$02
  6236 4B64 95 98			sta :STACKORIGIN,x
  6237 4B66 A9 00			lda #$00
  6238 4B68 69 00			adc #$00
  6239 4B6A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6240 4B6C E8				inx
  6241 4B6D AD 07 55			lda Y
  6242 4B70 18 69 02			add #$02
  6243 4B73 95 98			sta :STACKORIGIN,x
  6244 4B75 A9 00			lda #$00
  6245 4B77 69 00			adc #$00
  6246 4B79 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6247 4B7B 20 EF 26			jsr GRAPH.LINE
  6248
  6249 				; GenerateCaseStatementEpilog
  6250 4B7E 4C 02 50			jmp a_0003
  6251 4B81			l_117C
  6252
  6253 				; GenerateCaseEqualityCheck
  6254 4B81 B5 99			lda :STACKORIGIN+1,x
  6255 4B83 C9 2A			cmp #42
  6256 4B85 F0 03 4C 79 4C		jne l_119E
  6257 4B8A			@
  6258
  6259 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 257
  6260 4B8A E8				inx
  6261 4B8B AD 06 55 95 98		mva X :STACKORIGIN,x
  6262 4B90 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6263 4B94 E8				inx
  6264 4B95 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6265 4B9A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6266 4B9E 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6267
  6268 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 258
  6269 4BA1 E8				inx
  6270 4BA2 AD 06 55			lda X
  6271 4BA5 18 69 02			add #$02
  6272 4BA8 95 98			sta :STACKORIGIN,x
  6273 4BAA A9 00			lda #$00
  6274 4BAC 69 00			adc #$00
  6275 4BAE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6276 4BB0 E8				inx
  6277 4BB1 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6278 4BB6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6279 4BBA 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6280
  6281 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 259
  6282 4BBD E8				inx
  6283 4BBE AD 06 55 95 98		mva X :STACKORIGIN,x
  6284 4BC3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6285 4BC7 E8				inx
  6286 4BC8 AD 07 55			lda Y
  6287 4BCB 18 69 02			add #$02
  6288 4BCE 95 98			sta :STACKORIGIN,x
  6289 4BD0 A9 00			lda #$00
  6290 4BD2 69 00			adc #$00
  6291 4BD4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6292 4BD6 E8				inx
  6293 4BD7 AD 06 55			lda X
  6294 4BDA 18 69 02			add #$02
  6295 4BDD 95 98			sta :STACKORIGIN,x
  6296 4BDF A9 00			lda #$00
  6297 4BE1 69 00			adc #$00
  6298 4BE3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6299 4BE5 E8				inx
  6300 4BE6 AD 07 55			lda Y
  6301 4BE9 18 69 02			add #$02
  6302 4BEC 95 98			sta :STACKORIGIN,x
  6303 4BEE A9 00			lda #$00
  6304 4BF0 69 00			adc #$00
  6305 4BF2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6306 4BF4 20 EF 26			jsr GRAPH.LINE
  6307
  6308 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 260
  6309 4BF7 E8				inx
  6310 4BF8 AD 06 55 95 98		mva X :STACKORIGIN,x
  6311 4BFD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6312 4C01 E8				inx
  6313 4C02 AD 07 55			lda Y
  6314 4C05 18 69 04			add #$04
  6315 4C08 95 98			sta :STACKORIGIN,x
  6316 4C0A A9 00			lda #$00
  6317 4C0C 69 00			adc #$00
  6318 4C0E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6319 4C10 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6320
  6321 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 261
  6322 4C13 E8				inx
  6323 4C14 AD 06 55			lda X
  6324 4C17 18 69 02			add #$02
  6325 4C1A 95 98			sta :STACKORIGIN,x
  6326 4C1C A9 00			lda #$00
  6327 4C1E 69 00			adc #$00
  6328 4C20 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6329 4C22 E8				inx
  6330 4C23 AD 07 55			lda Y
  6331 4C26 18 69 04			add #$04
  6332 4C29 95 98			sta :STACKORIGIN,x
  6333 4C2B A9 00			lda #$00
  6334 4C2D 69 00			adc #$00
  6335 4C2F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6336 4C31 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6337
  6338 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 262
  6339 4C34 E8				inx
  6340 4C35 AD 06 55			lda X
  6341 4C38 18 69 01			add #$01
  6342 4C3B 95 98			sta :STACKORIGIN,x
  6343 4C3D A9 00			lda #$00
  6344 4C3F 69 00			adc #$00
  6345 4C41 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6346 4C43 E8				inx
  6347 4C44 AD 07 55			lda Y
  6348 4C47 18 69 01			add #$01
  6349 4C4A 95 98			sta :STACKORIGIN,x
  6350 4C4C A9 00			lda #$00
  6351 4C4E 69 00			adc #$00
  6352 4C50 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6353 4C52 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6354
  6355 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 263
  6356 4C55 E8				inx
  6357 4C56 AD 06 55			lda X
  6358 4C59 18 69 01			add #$01
  6359 4C5C 95 98			sta :STACKORIGIN,x
  6360 4C5E A9 00			lda #$00
  6361 4C60 69 00			adc #$00
  6362 4C62 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6363 4C64 E8				inx
  6364 4C65 AD 07 55			lda Y
  6365 4C68 18 69 03			add #$03
  6366 4C6B 95 98			sta :STACKORIGIN,x
  6367 4C6D A9 00			lda #$00
  6368 4C6F 69 00			adc #$00
  6369 4C71 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6370 4C73 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  6371
  6372 				; GenerateCaseStatementEpilog
  6373 4C76 4C 02 50			jmp a_0003
  6374 4C79			l_119E
  6375
  6376 				; GenerateCaseEqualityCheck
  6377 4C79 B5 99			lda :STACKORIGIN+1,x
  6378 4C7B C9 2F			cmp #47
  6379 4C7D D0 38			jne l_120A
  6380 4C7F			@
  6381
  6382 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 266
  6383 4C7F E8				inx
  6384 4C80 AD 06 55			lda X
  6385 4C83 18 69 02			add #$02
  6386 4C86 95 98			sta :STACKORIGIN,x
  6387 4C88 A9 00			lda #$00
  6388 4C8A 69 00			adc #$00
  6389 4C8C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6390 4C8E E8				inx
  6391 4C8F AD 07 55 95 98		mva Y :STACKORIGIN,x
  6392 4C94 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6393 4C98 E8				inx
  6394 4C99 AD 06 55 95 98		mva X :STACKORIGIN,x
  6395 4C9E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6396 4CA2 E8				inx
  6397 4CA3 AD 07 55			lda Y
  6398 4CA6 18 69 04			add #$04
  6399 4CA9 95 98			sta :STACKORIGIN,x
  6400 4CAB A9 00			lda #$00
  6401 4CAD 69 00			adc #$00
  6402 4CAF 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6403 4CB1 20 EF 26			jsr GRAPH.LINE
  6404
  6405 				; GenerateCaseStatementEpilog
  6406 4CB4 4C 02 50			jmp a_0003
  6407 4CB7			l_120A
  6408
  6409 				; GenerateCaseEqualityCheck
  6410 4CB7 B5 99			lda :STACKORIGIN+1,x
  6411 4CB9 C9 3D			cmp #61
  6412 4CBB D0 77			jne l_1228
  6413 4CBD			@
  6414
  6415 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 269
  6416 4CBD E8				inx
  6417 4CBE AD 06 55 95 98		mva X :STACKORIGIN,x
  6418 4CC3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6419 4CC7 E8				inx
  6420 4CC8 AD 07 55			lda Y
  6421 4CCB 18 69 01			add #$01
  6422 4CCE 95 98			sta :STACKORIGIN,x
  6423 4CD0 A9 00			lda #$00
  6424 4CD2 69 00			adc #$00
  6425 4CD4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6426 4CD6 E8				inx
  6427 4CD7 AD 06 55			lda X
  6428 4CDA 18 69 02			add #$02
  6429 4CDD 95 98			sta :STACKORIGIN,x
  6430 4CDF A9 00			lda #$00
  6431 4CE1 69 00			adc #$00
  6432 4CE3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6433 4CE5 E8				inx
  6434 4CE6 AD 07 55			lda Y
  6435 4CE9 18 69 01			add #$01
  6436 4CEC 95 98			sta :STACKORIGIN,x
  6437 4CEE A9 00			lda #$00
  6438 4CF0 69 00			adc #$00
  6439 4CF2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6440 4CF4 20 EF 26			jsr GRAPH.LINE
  6441
  6442 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 270
  6443 4CF7 E8				inx
  6444 4CF8 AD 06 55 95 98		mva X :STACKORIGIN,x
  6445 4CFD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6446 4D01 E8				inx
  6447 4D02 AD 07 55			lda Y
  6448 4D05 18 69 03			add #$03
  6449 4D08 95 98			sta :STACKORIGIN,x
  6450 4D0A A9 00			lda #$00
  6451 4D0C 69 00			adc #$00
  6452 4D0E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6453 4D10 E8				inx
  6454 4D11 AD 06 55			lda X
  6455 4D14 18 69 02			add #$02
  6456 4D17 95 98			sta :STACKORIGIN,x
  6457 4D19 A9 00			lda #$00
  6458 4D1B 69 00			adc #$00
  6459 4D1D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6460 4D1F E8				inx
  6461 4D20 AD 07 55			lda Y
  6462 4D23 18 69 03			add #$03
  6463 4D26 95 98			sta :STACKORIGIN,x
  6464 4D28 A9 00			lda #$00
  6465 4D2A 69 00			adc #$00
  6466 4D2C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6467 4D2E 20 EF 26			jsr GRAPH.LINE
  6468
  6469 				; GenerateCaseStatementEpilog
  6470 4D31 4C 02 50			jmp a_0003
  6471 4D34			l_1228
  6472
  6473 				; GenerateCaseEqualityCheck
  6474 4D34 B5 99			lda :STACKORIGIN+1,x
  6475 4D36 C9 3C			cmp #60
  6476 4D38 D0 72			jne l_1263
  6477 4D3A			@
  6478
  6479 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 273
  6480 4D3A E8				inx
  6481 4D3B AD 06 55 95 98		mva X :STACKORIGIN,x
  6482 4D40 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6483 4D44 E8				inx
  6484 4D45 AD 07 55			lda Y
  6485 4D48 18 69 02			add #$02
  6486 4D4B 95 98			sta :STACKORIGIN,x
  6487 4D4D A9 00			lda #$00
  6488 4D4F 69 00			adc #$00
  6489 4D51 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6490 4D53 E8				inx
  6491 4D54 AD 06 55			lda X
  6492 4D57 18 69 02			add #$02
  6493 4D5A 95 98			sta :STACKORIGIN,x
  6494 4D5C A9 00			lda #$00
  6495 4D5E 69 00			adc #$00
  6496 4D60 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6497 4D62 E8				inx
  6498 4D63 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6499 4D68 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6500 4D6C 20 EF 26			jsr GRAPH.LINE
  6501
  6502 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 274
  6503 4D6F E8				inx
  6504 4D70 AD 06 55 95 98		mva X :STACKORIGIN,x
  6505 4D75 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6506 4D79 E8				inx
  6507 4D7A AD 07 55			lda Y
  6508 4D7D 18 69 02			add #$02
  6509 4D80 95 98			sta :STACKORIGIN,x
  6510 4D82 A9 00			lda #$00
  6511 4D84 69 00			adc #$00
  6512 4D86 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6513 4D88 E8				inx
  6514 4D89 AD 06 55			lda X
  6515 4D8C 18 69 02			add #$02
  6516 4D8F 95 98			sta :STACKORIGIN,x
  6517 4D91 A9 00			lda #$00
  6518 4D93 69 00			adc #$00
  6519 4D95 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6520 4D97 E8				inx
  6521 4D98 AD 07 55			lda Y
  6522 4D9B 18 69 04			add #$04
  6523 4D9E 95 98			sta :STACKORIGIN,x
  6524 4DA0 A9 00			lda #$00
  6525 4DA2 69 00			adc #$00
  6526 4DA4 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6527 4DA6 20 EF 26			jsr GRAPH.LINE
  6528
  6529 				; GenerateCaseStatementEpilog
  6530 4DA9 4C 02 50			jmp a_0003
  6531 4DAC			l_1263
  6532
  6533 				; GenerateCaseEqualityCheck
  6534 4DAC B5 99			lda :STACKORIGIN+1,x
  6535 4DAE C9 3E			cmp #62
  6536 4DB0 D0 72			jne l_129A
  6537 4DB2			@
  6538
  6539 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 277
  6540 4DB2 E8				inx
  6541 4DB3 AD 06 55 95 98		mva X :STACKORIGIN,x
  6542 4DB8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6543 4DBC E8				inx
  6544 4DBD AD 07 55 95 98		mva Y :STACKORIGIN,x
  6545 4DC2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6546 4DC6 E8				inx
  6547 4DC7 AD 06 55			lda X
  6548 4DCA 18 69 02			add #$02
  6549 4DCD 95 98			sta :STACKORIGIN,x
  6550 4DCF A9 00			lda #$00
  6551 4DD1 69 00			adc #$00
  6552 4DD3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6553 4DD5 E8				inx
  6554 4DD6 AD 07 55			lda Y
  6555 4DD9 18 69 02			add #$02
  6556 4DDC 95 98			sta :STACKORIGIN,x
  6557 4DDE A9 00			lda #$00
  6558 4DE0 69 00			adc #$00
  6559 4DE2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6560 4DE4 20 EF 26			jsr GRAPH.LINE
  6561
  6562 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 278
  6563 4DE7 E8				inx
  6564 4DE8 AD 06 55 95 98		mva X :STACKORIGIN,x
  6565 4DED A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6566 4DF1 E8				inx
  6567 4DF2 AD 07 55			lda Y
  6568 4DF5 18 69 04			add #$04
  6569 4DF8 95 98			sta :STACKORIGIN,x
  6570 4DFA A9 00			lda #$00
  6571 4DFC 69 00			adc #$00
  6572 4DFE 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6573 4E00 E8				inx
  6574 4E01 AD 06 55			lda X
  6575 4E04 18 69 02			add #$02
  6576 4E07 95 98			sta :STACKORIGIN,x
  6577 4E09 A9 00			lda #$00
  6578 4E0B 69 00			adc #$00
  6579 4E0D 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6580 4E0F E8				inx
  6581 4E10 AD 07 55			lda Y
  6582 4E13 18 69 02			add #$02
  6583 4E16 95 98			sta :STACKORIGIN,x
  6584 4E18 A9 00			lda #$00
  6585 4E1A 69 00			adc #$00
  6586 4E1C 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6587 4E1E 20 EF 26			jsr GRAPH.LINE
  6588
  6589 				; GenerateCaseStatementEpilog
  6590 4E21 4C 02 50			jmp a_0003
  6591 4E24			l_129A
  6592
  6593 				; GenerateCaseEqualityCheck
  6594 4E24 B5 99			lda :STACKORIGIN+1,x
  6595 4E26 C9 27			cmp #39
  6596 4E28 D0 3D			jne l_12D1
  6597 4E2A			@
  6598
  6599 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 281
  6600 4E2A E8				inx
  6601 4E2B AD 06 55			lda X
  6602 4E2E 18 69 01			add #$01
  6603 4E31 95 98			sta :STACKORIGIN,x
  6604 4E33 A9 00			lda #$00
  6605 4E35 69 00			adc #$00
  6606 4E37 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6607 4E39 E8				inx
  6608 4E3A AD 07 55 95 98		mva Y :STACKORIGIN,x
  6609 4E3F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6610 4E43 E8				inx
  6611 4E44 AD 06 55			lda X
  6612 4E47 18 69 01			add #$01
  6613 4E4A 95 98			sta :STACKORIGIN,x
  6614 4E4C A9 00			lda #$00
  6615 4E4E 69 00			adc #$00
  6616 4E50 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6617 4E52 E8				inx
  6618 4E53 AD 07 55			lda Y
  6619 4E56 18 69 01			add #$01
  6620 4E59 95 98			sta :STACKORIGIN,x
  6621 4E5B A9 00			lda #$00
  6622 4E5D 69 00			adc #$00
  6623 4E5F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6624 4E61 20 EF 26			jsr GRAPH.LINE
  6625
  6626 				; GenerateCaseStatementEpilog
  6627 4E64 4C 02 50			jmp a_0003
  6628 4E67			l_12D1
  6629
  6630 				; GenerateCaseEqualityCheck
  6631 4E67 B5 99			lda :STACKORIGIN+1,x
  6632 4E69 C9 22			cmp #34
  6633 4E6B D0 6D			jne l_12F3
  6634 4E6D			@
  6635
  6636 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 284
  6637 4E6D E8				inx
  6638 4E6E AD 06 55 95 98		mva X :STACKORIGIN,x
  6639 4E73 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6640 4E77 E8				inx
  6641 4E78 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6642 4E7D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6643 4E81 E8				inx
  6644 4E82 AD 06 55 95 98		mva X :STACKORIGIN,x
  6645 4E87 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6646 4E8B E8				inx
  6647 4E8C AD 07 55			lda Y
  6648 4E8F 18 69 01			add #$01
  6649 4E92 95 98			sta :STACKORIGIN,x
  6650 4E94 A9 00			lda #$00
  6651 4E96 69 00			adc #$00
  6652 4E98 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6653 4E9A 20 EF 26			jsr GRAPH.LINE
  6654
  6655 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 285
  6656 4E9D E8				inx
  6657 4E9E AD 06 55			lda X
  6658 4EA1 18 69 02			add #$02
  6659 4EA4 95 98			sta :STACKORIGIN,x
  6660 4EA6 A9 00			lda #$00
  6661 4EA8 69 00			adc #$00
  6662 4EAA 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6663 4EAC E8				inx
  6664 4EAD AD 07 55 95 98		mva Y :STACKORIGIN,x
  6665 4EB2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6666 4EB6 E8				inx
  6667 4EB7 AD 06 55			lda X
  6668 4EBA 18 69 02			add #$02
  6669 4EBD 95 98			sta :STACKORIGIN,x
  6670 4EBF A9 00			lda #$00
  6671 4EC1 69 00			adc #$00
  6672 4EC3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6673 4EC5 E8				inx
  6674 4EC6 AD 07 55			lda Y
  6675 4EC9 18 69 01			add #$01
  6676 4ECC 95 98			sta :STACKORIGIN,x
  6677 4ECE A9 00			lda #$00
  6678 4ED0 69 00			adc #$00
  6679 4ED2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6680 4ED4 20 EF 26			jsr GRAPH.LINE
  6681
  6682 				; GenerateCaseStatementEpilog
  6683 4ED7 4C 02 50			jmp a_0003
  6684 4EDA			l_12F3
  6685
  6686 				; GenerateCaseEqualityCheck
  6687 4EDA B5 99			lda :STACKORIGIN+1,x
  6688 4EDC C9 5C			cmp #92
  6689 4EDE D0 38			jne l_1326
  6690 4EE0			@
  6691
  6692 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 288
  6693 4EE0 E8				inx
  6694 4EE1 AD 06 55 95 98		mva X :STACKORIGIN,x
  6695 4EE6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6696 4EEA E8				inx
  6697 4EEB AD 07 55 95 98		mva Y :STACKORIGIN,x
  6698 4EF0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6699 4EF4 E8				inx
  6700 4EF5 AD 06 55			lda X
  6701 4EF8 18 69 02			add #$02
  6702 4EFB 95 98			sta :STACKORIGIN,x
  6703 4EFD A9 00			lda #$00
  6704 4EFF 69 00			adc #$00
  6705 4F01 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6706 4F03 E8				inx
  6707 4F04 AD 07 55			lda Y
  6708 4F07 18 69 04			add #$04
  6709 4F0A 95 98			sta :STACKORIGIN,x
  6710 4F0C A9 00			lda #$00
  6711 4F0E 69 00			adc #$00
  6712 4F10 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6713 4F12 20 EF 26			jsr GRAPH.LINE
  6714
  6715 				; GenerateCaseStatementEpilog
  6716 4F15 4C 02 50			jmp a_0003
  6717 4F18			l_1326
  6718
  6719 				; GenerateCaseEqualityCheck
  6720 4F18 B5 99			lda :STACKORIGIN+1,x
  6721 4F1A C9 23			cmp #35
  6722 4F1C F0 03 4C 02 50		jne l_1344
  6723 4F21			@
  6724
  6725 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 291
  6726 4F21 E8				inx
  6727 4F22 AD 06 55 95 98		mva X :STACKORIGIN,x
  6728 4F27 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6729 4F2B E8				inx
  6730 4F2C AD 07 55			lda Y
  6731 4F2F 18 69 01			add #$01
  6732 4F32 95 98			sta :STACKORIGIN,x
  6733 4F34 A9 00			lda #$00
  6734 4F36 69 00			adc #$00
  6735 4F38 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6736 4F3A E8				inx
  6737 4F3B AD 06 55			lda X
  6738 4F3E 18 69 02			add #$02
  6739 4F41 95 98			sta :STACKORIGIN,x
  6740 4F43 A9 00			lda #$00
  6741 4F45 69 00			adc #$00
  6742 4F47 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6743 4F49 E8				inx
  6744 4F4A AD 07 55			lda Y
  6745 4F4D 18 69 01			add #$01
  6746 4F50 95 98			sta :STACKORIGIN,x
  6747 4F52 A9 00			lda #$00
  6748 4F54 69 00			adc #$00
  6749 4F56 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6750 4F58 20 EF 26			jsr GRAPH.LINE
  6751
  6752 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 292
  6753 4F5B E8				inx
  6754 4F5C AD 06 55 95 98		mva X :STACKORIGIN,x
  6755 4F61 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6756 4F65 E8				inx
  6757 4F66 AD 07 55			lda Y
  6758 4F69 18 69 03			add #$03
  6759 4F6C 95 98			sta :STACKORIGIN,x
  6760 4F6E A9 00			lda #$00
  6761 4F70 69 00			adc #$00
  6762 4F72 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6763 4F74 E8				inx
  6764 4F75 AD 06 55			lda X
  6765 4F78 18 69 02			add #$02
  6766 4F7B 95 98			sta :STACKORIGIN,x
  6767 4F7D A9 00			lda #$00
  6768 4F7F 69 00			adc #$00
  6769 4F81 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6770 4F83 E8				inx
  6771 4F84 AD 07 55			lda Y
  6772 4F87 18 69 03			add #$03
  6773 4F8A 95 98			sta :STACKORIGIN,x
  6774 4F8C A9 00			lda #$00
  6775 4F8E 69 00			adc #$00
  6776 4F90 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6777 4F92 20 EF 26			jsr GRAPH.LINE
  6778
  6779 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 293
  6780 4F95 E8				inx
  6781 4F96 AD 06 55 95 98		mva X :STACKORIGIN,x
  6782 4F9B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6783 4F9F E8				inx
  6784 4FA0 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6785 4FA5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6786 4FA9 E8				inx
  6787 4FAA AD 06 55 95 98		mva X :STACKORIGIN,x
  6788 4FAF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6789 4FB3 E8				inx
  6790 4FB4 AD 07 55			lda Y
  6791 4FB7 18 69 04			add #$04
  6792 4FBA 95 98			sta :STACKORIGIN,x
  6793 4FBC A9 00			lda #$00
  6794 4FBE 69 00			adc #$00
  6795 4FC0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6796 4FC2 20 EF 26			jsr GRAPH.LINE
  6797
  6798 				; optimize FAIL ('GRAPH.LINE', procs.inc), line = 294
  6799 4FC5 E8				inx
  6800 4FC6 AD 06 55			lda X
  6801 4FC9 18 69 02			add #$02
  6802 4FCC 95 98			sta :STACKORIGIN,x
  6803 4FCE A9 00			lda #$00
  6804 4FD0 69 00			adc #$00
  6805 4FD2 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6806 4FD4 E8				inx
  6807 4FD5 AD 07 55 95 98		mva Y :STACKORIGIN,x
  6808 4FDA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  6809 4FDE E8				inx
  6810 4FDF AD 06 55			lda X
  6811 4FE2 18 69 02			add #$02
  6812 4FE5 95 98			sta :STACKORIGIN,x
  6813 4FE7 A9 00			lda #$00
  6814 4FE9 69 00			adc #$00
  6815 4FEB 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6816 4FED E8				inx
  6817 4FEE AD 07 55			lda Y
  6818 4FF1 18 69 04			add #$04
  6819 4FF4 95 98			sta :STACKORIGIN,x
  6820 4FF6 A9 00			lda #$00
  6821 4FF8 69 00			adc #$00
  6822 4FFA 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  6823 4FFC 20 EF 26			jsr GRAPH.LINE
  6824
  6825 				; GenerateCaseStatementEpilog
  6826 4FFF 4C 02 50			jmp a_0003
  6827 5002			l_1344
  6828
  6829 				; GenerateCaseEpilog
  6830 5002			a_0003
  6831
  6832 				; ------------------------------------------------------------
  6833
  6834 = 5505			CH	= DATAORIGIN+$00B7
  6835 = 5506			X	= DATAORIGIN+$00B8
  6836 = 5507			Y	= DATAORIGIN+$00B9
  6837
  6838 = 5505			@VarData	= CH
  6839 = 0003			@VarDataSize	= 3
  6840
  6841 5002			@exit
  6842 					.ifdef @new
  6843 					lda <@VarData
  6844 					sta :ztmp
  6845 					lda >@VarData
  6846 					ldy #@VarDataSize-1
  6847 					jmp @FreeMem
  6848 					eif
  6849 5002 60				rts						; ret
  6850 				.endl
  6851
  6852 5003			.local	SETTEXT						; PROCEDURE
  6853
  6854 				; ------------------------------------------------------------
  6855
  6856 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6857 				; as Pointer
  6858 5003 B5 98 8D 09 56		mva :STACKORIGIN,x Y
  6859 5008 CA				dex						; sub bx, 1
  6860
  6861 				; ------------------------------------------------------------
  6862
  6863 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6864 				; as Pointer
  6865 5009 B5 98 8D 08 56		mva :STACKORIGIN,x X
  6866 500E CA				dex						; sub bx, 1
  6867
  6868 				; ------------------------------------------------------------
  6869
  6870 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6871 				; as Pointer
  6872 500F B5 98 8D 99 50		mva :STACKORIGIN,x STR
  6873 5014 B5 A8 8D 9A 50		mva :STACKORIGIN+STACKWIDTH,x STR+1
  6874 5019 CA				dex						; sub bx, 1
  6875 					@move STR #adr.STR #256
  6875 				 MWA STR @MOVE.PTR1\ MWA #ADR.STR @MOVE.PTR2\ MWA #256 @MOVE.PTR3\ JSR @MOVE
  6875 501A AD 99 50 85 88 AD +  MWA STR @MOVE.PTR1
  6875 5024 A9 08 85 8C A9 55 +  MWA #ADR.STR @MOVE.PTR2
  6875 502C A9 00 85 84 A9 01 +  MWA #256 @MOVE.PTR3
  6875 5034 20 2F 21		 JSR @MOVE
  6876 5037 A9 08 8D 99 50 A9 + 	mwa #adr.STR STR
  6877
  6878 				; --- For
  6879
  6880 				; optimize OK (procs.inc), line = 304
  6881
  6882 5041 A9 01 8D 0A 56		mva #$01 I
  6883
  6884 				; optimize OK (procs.inc), line = 304
  6885
  6886 5046 AD 08 55 8D 50 50		mva adr.STR :@FORTMP?13EE_0
  6887 504C			l_13F1
  6888 				; --- ForToDoCondition
  6889
  6890 				; optimize OK (procs.inc), line = 304
  6891
  6892 504C AD 0A 56			lda I
  6893 = 5050			.def :@FORTMP?13EE_0 = *+1
  6894 504F C9 00			cmp #$00
  6895 5051 90 02			scc
  6896 5053 D0 43			jne l_13FF
  6897
  6898 				; optimize FAIL ('PUTCHAR', procs.inc), line = 305
  6899 5055 E8				inx
  6900 5056 AC 0A 56			ldy I
  6901 5059 B9 08 55 95 98		mva adr.STR,y :STACKORIGIN,x
  6902 505E E8				inx
  6903 505F AD 08 56 95 98		mva X :STACKORIGIN,x
  6904 5064 E8				inx
  6905 5065 AD 09 56 95 98		mva Y :STACKORIGIN,x
  6906 506A 20 B8 2F			jsr PUTCHAR
  6907
  6908 				; optimize OK (procs.inc), line = 307
  6909
  6910 506D AC 0A 56			ldy I
  6911 5070 B9 08 55			lda adr.STR,y
  6912 5073 C9 49			cmp #$49
  6913 5075 F0 07			jeq l_1430x
  6914 5077 B9 08 55			lda adr.STR,y
  6915 507A C9 21			cmp #$21
  6916 507C D0 0C			jne l_1430
  6917 507E			l_1430x
  6918
  6919 				; optimize OK (procs.inc), line = 308
  6920
  6921 507E AD 08 56			lda X
  6922 5081 18 69 02			add #$02
  6923 5084 8D 08 56			sta X
  6924 5087 4C 93 50			jmp l_143B
  6925 508A			l_1430
  6926
  6927 				; optimize OK (procs.inc), line = 310
  6928
  6929 508A AD 08 56			lda X
  6930 508D 18 69 04			add #$04
  6931 5090 8D 08 56			sta X
  6932 5093			l_143B
  6933
  6934 				; --- ForToDoEpilog
  6935 5093 EE 0A 56			inc I						; inc ptr byte [CounterAddress]
  6936 5096 D0 B4			jne l_13F1
  6937 5098			l_13FF
  6938
  6939 				; ------------------------------------------------------------
  6940
  6941 = 5508			adr.STR	= DATAORIGIN+$00BA
  6942 5098			.var STR	= adr.STR .word
  6943 = 5608			X	= DATAORIGIN+$01BA
  6944 = 5609			Y	= DATAORIGIN+$01BB
  6945 = 560A			I	= DATAORIGIN+$01BC
  6946 = 0000			@FORTMP_13EE	= $00
  6947
  6948 = 5099			@VarData	= STR
  6949 = 0103			@VarDataSize	= 259
  6950
  6951 5098			@exit
  6952 					.ifdef @new
  6953 					lda <@VarData
  6954 					sta :ztmp
  6955 					lda >@VarData
  6956 					ldy #@VarDataSize-1
  6957 					jmp @FreeMem
  6958 					eif
  6959 5098 60				rts						; ret
  6960 = 5099 08 55		STR
  6960 				.endl
  6961
  6962 509B			.local	PUTTILE						; PROCEDURE
  6963
  6964 				; ------------------------------------------------------------
  6965
  6966 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6967 				; as Pointer
  6968 509B B5 98 8D 10 56		mva :STACKORIGIN,x TILE
  6969 50A0 B5 A8 8D 11 56		mva :STACKORIGIN+STACKWIDTH,x TILE+1
  6970 50A5 CA				dex						; sub bx, 1
  6971
  6972 				; ------------------------------------------------------------
  6973
  6974 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6975 				; as Pointer
  6976 50A6 B5 98 8D 0F 56		mva :STACKORIGIN,x H
  6977 50AB CA				dex						; sub bx, 1
  6978
  6979 				; ------------------------------------------------------------
  6980
  6981 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6982 				; as Pointer
  6983 50AC B5 98 8D 0E 56		mva :STACKORIGIN,x W
  6984 50B1 CA				dex						; sub bx, 1
  6985
  6986 				; ------------------------------------------------------------
  6987
  6988 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6989 				; as Pointer
  6990 50B2 B5 98 8D 0D 56		mva :STACKORIGIN,x Y
  6991 50B7 CA				dex						; sub bx, 1
  6992
  6993 				; ------------------------------------------------------------
  6994
  6995 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6996 				; as Pointer
  6997 50B8 B5 98 8D 0C 56		mva :STACKORIGIN,x X
  6998 50BD CA				dex						; sub bx, 1
  6999
  7000 				; optimize OK (nyan10p7.pas), line = 20
  7001
  7002 50BE AD 0D 56			lda Y
  7003 50C1 20 39 22			jsr @mul40
  7004 50C4 A5 84			lda :eax
  7005 50C6 18 6D 0C 56			add X
  7006 50CA 8D 12 56			sta VOFFSET
  7007 50CD A9 70			lda #$70
  7008 50CF 65 85			adc :eax+1
  7009 50D1 8D 13 56			sta VOFFSET+1
  7010 				; --- For
  7011
  7012 				; optimize OK (nyan10p7.pas), line = 21
  7013
  7014 50D4 A9 00 8D 14 56		mva #$00 B
  7015
  7016 				; optimize OK (nyan10p7.pas), line = 21
  7017
  7018 50D9 AC 0F 56			ldy H
  7019 50DC 88				dey
  7020 50DD 8C E4 50			sty :@FORTMP?1474_0
  7021 50E0			l_1477
  7022 				; --- ForToDoCondition
  7023
  7024 				; optimize OK (nyan10p7.pas), line = 21
  7025
  7026 50E0 AD 14 56			lda B
  7027 = 50E4			.def :@FORTMP?1474_0 = *+1
  7028 50E3 C9 00			cmp #$00
  7029 50E5 90 02			scc
  7030 50E7 D0 42			jne l_1485
  7031
  7032 				; optimize OK (nyan10p7.pas), line = 22
  7033
  7034 50E9 AD 10 56			lda TILE
  7035 50EC 85 88			sta :edx
  7036 50EE AD 11 56			lda TILE+1
  7037 50F1 85 89			sta :edx+1
  7038 50F3 AD 12 56			lda VOFFSET
  7039 50F6 85 8C			sta :ecx
  7040 50F8 AD 13 56			lda VOFFSET+1
  7041 50FB 85 8D			sta :ecx+1
  7042 50FD AD 0E 56			lda W
  7043 5100 85 84			sta :eax
  7044 5102 A9 00			lda #$00
  7045 5104 85 85			sta :eax+1
  7046 5106 20 2F 21			jsr @move
  7047
  7048 				; optimize OK (nyan10p7.pas), line = 23
  7049
  7050 5109 AD 10 56			lda TILE
  7051 510C 18 6D 0E 56			add W
  7052 5110 8D 10 56			sta TILE
  7053 5113 90 03			scc
  7054 5115 EE 11 56			inc TILE+1
  7055
  7056 				; optimize OK (nyan10p7.pas), line = 24
  7057
  7058 5118 AD 12 56			lda VOFFSET
  7059 511B 18 69 28			add #$28
  7060 511E 8D 12 56			sta VOFFSET
  7061 5121 90 03			scc
  7062 5123 EE 13 56			inc VOFFSET+1
  7063
  7064 				; --- ForToDoEpilog
  7065 5126 EE 14 56			inc B						; inc ptr byte [CounterAddress]
  7066 5129 D0 B5			jne l_1477
  7067 512B			l_1485
  7068
  7069 				; ------------------------------------------------------------
  7070
  7071 = 560C			X	= DATAORIGIN+$01BE
  7072 = 560D			Y	= DATAORIGIN+$01BF
  7073 = 560E			W	= DATAORIGIN+$01C0
  7074 = 560F			H	= DATAORIGIN+$01C1
  7075 = 5610			TILE	= DATAORIGIN+$01C2
  7076 = 5612			VOFFSET	= DATAORIGIN+$01C4
  7077 = 5614			B	= DATAORIGIN+$01C6
  7078 = 0000			@FORTMP_1474	= $00
  7079
  7080 = 560C			@VarData	= X
  7081 = 0009			@VarDataSize	= 9
  7082
  7083 512B			@exit
  7084 					.ifdef @new
  7085 					lda <@VarData
  7086 					sta :ztmp
  7087 					lda >@VarData
  7088 					ldy #@VarDataSize-1
  7089 					jmp @FreeMem
  7090 					eif
  7091 512B 60				rts						; ret
  7092 				.endl
  7093 512C			l_0044
  7094
  7095 				; optimize FAIL ('GRAPH.INITGRAPH_01D5', nyan10p7.pas), line = 31
  7096 512C E8				inx
  7097 512D A9 0A 95 98			mva #$0A :STACKORIGIN,x
  7098 5131 20 0E 25			jsr GRAPH.INITGRAPH_01D5
  7099
  7100 				; optimize FAIL ('GR10PP.GR10INIT', nyan10p7.pas), line = 32
  7101 5134 E8				inx
  7102 5135 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7103 5139 A9 60 95 A8			mva #$60 :STACKORIGIN+STACKWIDTH,x
  7104 513D E8				inx
  7105 513E A9 00 95 98			mva #$00 :STACKORIGIN,x
  7106 5142 A9 70 95 A8			mva #$70 :STACKORIGIN+STACKWIDTH,x
  7107 5146 E8				inx
  7108 5147 A9 33 95 98			mva #$33 :STACKORIGIN,x
  7109 514B E8				inx
  7110 514C A9 02 95 98			mva #$02 :STACKORIGIN,x
  7111 5150 E8				inx
  7112 5151 95 98			sta :STACKORIGIN,x
  7113 5153 20 8B 24			jsr GR10PP.GR10INIT
  7114
  7115 				; optimize OK (nyan10p7.pas), line = 33
  7116
  7117 5156 A9 00			lda #$00
  7118 5158 85 4D			sta $004D
  7119
  7120 				; optimize OK (nyan10p7.pas), line = 35
  7121
  7122 515A 8D C0 02			sta ATARI.PCOLR0
  7123
  7124 				; optimize OK (nyan10p7.pas), line = 36
  7125
  7126 515D A9 24 8D C3 02		mva #$24 ATARI.PCOLR3
  7127
  7128 				; optimize OK (nyan10p7.pas), line = 37
  7129
  7130 5162 A9 18 8D C1 02		mva #$18 ATARI.PCOLR1
  7131
  7132 				; optimize OK (nyan10p7.pas), line = 38
  7133
  7134 5167 A9 1C 8D C6 02		mva #$1C ATARI.COLOR2
  7135
  7136 				; optimize OK (nyan10p7.pas), line = 39
  7137
  7138 516C A9 BA 8D C2 02		mva #$BA ATARI.PCOLR2
  7139
  7140 				; optimize OK (nyan10p7.pas), line = 40
  7141
  7142 5171 A9 74 8D C5 02		mva #$74 ATARI.COLOR1
  7143
  7144 				; optimize OK (nyan10p7.pas), line = 41
  7145
  7146 5176 A9 54 8D C4 02		mva #$54 ATARI.COLOR0
  7147
  7148 				; optimize OK (nyan10p7.pas), line = 42
  7149
  7150 517B A9 3C 8D C8 02		mva #$3C ATARI.COLOR4
  7151
  7152 				; optimize OK (nyan10p7.pas), line = 43
  7153
  7154 5180 A9 0A 8D C7 02		mva #$0A ATARI.COLOR3
  7155
  7156 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 46
  7157 5185 E8				inx
  7158 5186 A9 01 95 98			mva #$01 :STACKORIGIN,x
  7159 518A 20 53 25			jsr GRAPH.SETCOLOR
  7160
  7161 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 46
  7162 518D E8				inx
  7163 518E A9 00 95 98			mva #$00 :STACKORIGIN,x
  7164 5192 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  7165 5194 E8				inx
  7166 5195 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7167 5199 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  7168 519B 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7169
  7170 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 47
  7171 519E E8				inx
  7172 519F A9 02 95 98			mva #$02 :STACKORIGIN,x
  7173 51A3 20 53 25			jsr GRAPH.SETCOLOR
  7174
  7175 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 47
  7176 51A6 E8				inx
  7177 51A7 A9 01 95 98			mva #$01 :STACKORIGIN,x
  7178 51AB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7179 51AF E8				inx
  7180 51B0 A9 01 95 98			mva #$01 :STACKORIGIN,x
  7181 51B4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7182 51B8 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7183
  7184 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 48
  7185 51BB E8				inx
  7186 51BC A9 03 95 98			mva #$03 :STACKORIGIN,x
  7187 51C0 20 53 25			jsr GRAPH.SETCOLOR
  7188
  7189 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 48
  7190 51C3 E8				inx
  7191 51C4 A9 02 95 98			mva #$02 :STACKORIGIN,x
  7192 51C8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7193 51CC E8				inx
  7194 51CD A9 02 95 98			mva #$02 :STACKORIGIN,x
  7195 51D1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7196 51D5 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7197
  7198 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 49
  7199 51D8 E8				inx
  7200 51D9 A9 04 95 98			mva #$04 :STACKORIGIN,x
  7201 51DD 20 53 25			jsr GRAPH.SETCOLOR
  7202
  7203 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 49
  7204 51E0 E8				inx
  7205 51E1 A9 03 95 98			mva #$03 :STACKORIGIN,x
  7206 51E5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7207 51E9 E8				inx
  7208 51EA A9 03 95 98			mva #$03 :STACKORIGIN,x
  7209 51EE A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7210 51F2 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7211
  7212 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 50
  7213 51F5 E8				inx
  7214 51F6 A9 05 95 98			mva #$05 :STACKORIGIN,x
  7215 51FA 20 53 25			jsr GRAPH.SETCOLOR
  7216
  7217 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 50
  7218 51FD E8				inx
  7219 51FE A9 04 95 98			mva #$04 :STACKORIGIN,x
  7220 5202 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7221 5206 E8				inx
  7222 5207 A9 04 95 98			mva #$04 :STACKORIGIN,x
  7223 520B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7224 520F 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7225
  7226 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 51
  7227 5212 E8				inx
  7228 5213 A9 06 95 98			mva #$06 :STACKORIGIN,x
  7229 5217 20 53 25			jsr GRAPH.SETCOLOR
  7230
  7231 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 51
  7232 521A E8				inx
  7233 521B A9 05 95 98			mva #$05 :STACKORIGIN,x
  7234 521F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7235 5223 E8				inx
  7236 5224 A9 05 95 98			mva #$05 :STACKORIGIN,x
  7237 5228 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7238 522C 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7239
  7240 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 52
  7241 522F E8				inx
  7242 5230 A9 07 95 98			mva #$07 :STACKORIGIN,x
  7243 5234 20 53 25			jsr GRAPH.SETCOLOR
  7244
  7245 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 52
  7246 5237 E8				inx
  7247 5238 A9 06 95 98			mva #$06 :STACKORIGIN,x
  7248 523C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7249 5240 E8				inx
  7250 5241 A9 06 95 98			mva #$06 :STACKORIGIN,x
  7251 5245 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7252 5249 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7253
  7254 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 53
  7255 524C E8				inx
  7256 524D A9 08 95 98			mva #$08 :STACKORIGIN,x
  7257 5251 20 53 25			jsr GRAPH.SETCOLOR
  7258
  7259 				; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 53
  7260 5254 E8				inx
  7261 5255 A9 07 95 98			mva #$07 :STACKORIGIN,x
  7262 5259 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7263 525D E8				inx
  7264 525E A9 07 95 98			mva #$07 :STACKORIGIN,x
  7265 5262 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7266 5266 20 63 25			jsr GRAPH.PUTPIXEL_01E0
  7267
  7268 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 56
  7269 5269 E8				inx
  7270 526A A9 01 95 98			mva #$01 :STACKORIGIN,x
  7271 526E 20 53 25			jsr GRAPH.SETCOLOR
  7272
  7273 				; optimize FAIL ('PUTCHAR', nyan10p7.pas), line = 56
  7274 5271 E8				inx
  7275 5272 A9 41 95 98			mva #$41 :STACKORIGIN,x
  7276 5276 E8				inx
  7277 5277 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7278 527B E8				inx
  7279 527C A9 23 95 98			mva #$23 :STACKORIGIN,x
  7280 5280 20 B8 2F			jsr PUTCHAR
  7281
  7282 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 57
  7283 5283 E8				inx
  7284 5284 A9 02 95 98			mva #$02 :STACKORIGIN,x
  7285 5288 20 53 25			jsr GRAPH.SETCOLOR
  7286
  7287 				; optimize FAIL ('PUTCHAR', nyan10p7.pas), line = 57
  7288 528B E8				inx
  7289 528C A9 42 95 98			mva #$42 :STACKORIGIN,x
  7290 5290 E8				inx
  7291 5291 A9 04 95 98			mva #$04 :STACKORIGIN,x
  7292 5295 E8				inx
  7293 5296 A9 25 95 98			mva #$25 :STACKORIGIN,x
  7294 529A 20 B8 2F			jsr PUTCHAR
  7295
  7296 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 58
  7297 529D E8				inx
  7298 529E A9 08 95 98			mva #$08 :STACKORIGIN,x
  7299 52A2 20 53 25			jsr GRAPH.SETCOLOR
  7300
  7301 				; optimize FAIL ('PUTCHAR', nyan10p7.pas), line = 58
  7302 52A5 E8				inx
  7303 52A6 A9 43 95 98			mva #$43 :STACKORIGIN,x
  7304 52AA E8				inx
  7305 52AB A9 08 95 98			mva #$08 :STACKORIGIN,x
  7306 52AF E8				inx
  7307 52B0 A9 27 95 98			mva #$27 :STACKORIGIN,x
  7308 52B4 20 B8 2F			jsr PUTCHAR
  7309
  7310 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 60
  7311 52B7 E8				inx
  7312 52B8 A9 03 95 98			mva #$03 :STACKORIGIN,x
  7313 52BC 20 53 25			jsr GRAPH.SETCOLOR
  7314
  7315 				; optimize FAIL ('SETTEXT', nyan10p7.pas), line = 61
  7316 52BF E8				inx
  7317 52C0 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7318 52C4 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
  7319 52C8 E8				inx
  7320 52C9 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7321 52CD E8				inx
  7322 52CE A9 32 95 98			mva #$32 :STACKORIGIN,x
  7323 52D2 20 03 50			jsr SETTEXT
  7324
  7325 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 62
  7326 52D5 E8				inx
  7327 52D6 A9 04 95 98			mva #$04 :STACKORIGIN,x
  7328 52DA 20 53 25			jsr GRAPH.SETCOLOR
  7329
  7330 				; optimize FAIL ('SETTEXT', nyan10p7.pas), line = 63
  7331 52DD E8				inx
  7332 52DE A9 16 95 98			mva #$16 :STACKORIGIN,x
  7333 52E2 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
  7334 52E6 E8				inx
  7335 52E7 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7336 52EB E8				inx
  7337 52EC A9 38 95 98			mva #$38 :STACKORIGIN,x
  7338 52F0 20 03 50			jsr SETTEXT
  7339
  7340 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 64
  7341 52F3 E8				inx
  7342 52F4 A9 06 95 98			mva #$06 :STACKORIGIN,x
  7343 52F8 20 53 25			jsr GRAPH.SETCOLOR
  7344
  7345 				; optimize FAIL ('SETTEXT', nyan10p7.pas), line = 65
  7346 52FB E8				inx
  7347 52FC A9 2C 95 98			mva #$2C :STACKORIGIN,x
  7348 5300 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
  7349 5304 E8				inx
  7350 5305 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7351 5309 E8				inx
  7352 530A A9 3E 95 98			mva #$3E :STACKORIGIN,x
  7353 530E 20 03 50			jsr SETTEXT
  7354
  7355 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 68
  7356 5311 E8				inx
  7357 5312 A9 07 95 98			mva #$07 :STACKORIGIN,x
  7358 5316 20 53 25			jsr GRAPH.SETCOLOR
  7359
  7360 				; optimize FAIL ('GRAPH.LINE', nyan10p7.pas), line = 68
  7361 5319 E8				inx
  7362 531A A9 00 95 98			mva #$00 :STACKORIGIN,x
  7363 531E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  7364 5320 E8				inx
  7365 5321 A9 55 95 98			mva #$55 :STACKORIGIN,x
  7366 5325 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7367 5329 E8				inx
  7368 532A A9 4F 95 98			mva #$4F :STACKORIGIN,x
  7369 532E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7370 5332 E8				inx
  7371 5333 A9 65 95 98			mva #$65 :STACKORIGIN,x
  7372 5337 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7373 533B 20 EF 26			jsr GRAPH.LINE
  7374
  7375 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 69
  7376 533E E8				inx
  7377 533F A9 03 95 98			mva #$03 :STACKORIGIN,x
  7378 5343 20 53 25			jsr GRAPH.SETCOLOR
  7379
  7380 				; optimize FAIL ('GRAPH.RECTANGLE_03AE', nyan10p7.pas), line = 69
  7381 5346 E8				inx
  7382 5347 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7383 534B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  7384 534D E8				inx
  7385 534E A9 5C 95 98			mva #$5C :STACKORIGIN,x
  7386 5352 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7387 5356 E8				inx
  7388 5357 A9 0F 95 98			mva #$0F :STACKORIGIN,x
  7389 535B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7390 535F E8				inx
  7391 5360 A9 65 95 98			mva #$65 :STACKORIGIN,x
  7392 5364 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7393 5368 20 22 2C			jsr GRAPH.RECTANGLE_03AE
  7394
  7395 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 70
  7396 536B E8				inx
  7397 536C A9 02 95 98			mva #$02 :STACKORIGIN,x
  7398 5370 20 53 25			jsr GRAPH.SETCOLOR
  7399
  7400 				; optimize FAIL ('GRAPH.ELLIPSE_0244', nyan10p7.pas), line = 70
  7401 5373 E8				inx
  7402 5374 A9 1E 95 98			mva #$1E :STACKORIGIN,x
  7403 5378 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7404 537C E8				inx
  7405 537D A9 5A 95 98			mva #$5A :STACKORIGIN,x
  7406 5381 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7407 5385 E8				inx
  7408 5386 A9 06 95 98			mva #$06 :STACKORIGIN,x
  7409 538A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7410 538E E8				inx
  7411 538F A9 0A 95 98			mva #$0A :STACKORIGIN,x
  7412 5393 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7413 5397 20 CF 27			jsr GRAPH.ELLIPSE_0244
  7414
  7415 				; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 71
  7416 539A E8				inx
  7417 539B A9 05 95 98			mva #$05 :STACKORIGIN,x
  7418 539F 20 53 25			jsr GRAPH.SETCOLOR
  7419
  7420 				; optimize FAIL ('GRAPH.BAR3D', nyan10p7.pas), line = 71
  7421 53A2 E8				inx
  7422 53A3 A9 30 95 98			mva #$30 :STACKORIGIN,x
  7423 53A7 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7424 53AB E8				inx
  7425 53AC A9 5B 95 98			mva #$5B :STACKORIGIN,x
  7426 53B0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7427 53B4 E8				inx
  7428 53B5 A9 46 95 98			mva #$46 :STACKORIGIN,x
  7429 53B9 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7430 53BD E8				inx
  7431 53BE A9 64 95 98			mva #$64 :STACKORIGIN,x
  7432 53C2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7433 53C6 E8				inx
  7434 53C7 A9 08 95 98			mva #$08 :STACKORIGIN,x
  7435 53CB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7436 53CF E8				inx
  7437 53D0 A9 01 95 98			mva #$01 :STACKORIGIN,x
  7438 53D4 20 65 2D			jsr GRAPH.BAR3D
  7439
  7440 				; --- RepeatUntilProlog
  7441 53D7			l_1531
  7442 				; --- For
  7443
  7444 				; optimize OK (nyan10p7.pas), line = 75
  7445
  7446 53D7 A9 00 8D 16 56		mva #$00 FRAME
  7447
  7448 				; optimize OK (nyan10p7.pas), line = 75
  7449
  7450 53DC			l_153A
  7451 				; --- ForToDoCondition
  7452
  7453 				; optimize OK (nyan10p7.pas), line = 75
  7454
  7455 53DC AD 16 56			lda FRAME
  7456 53DF C9 05			cmp #$05
  7457 53E1 B0 4F			jcs l_1548
  7458
  7459 				; optimize FAIL ('SYSTEM.PAUSE_00A2', nyan10p7.pas), line = 76
  7460 53E3 E8				inx
  7461 53E4 A9 05 95 98			mva #$05 :STACKORIGIN,x
  7462 53E8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  7463 53EC 20 D6 22			jsr SYSTEM.PAUSE_00A2
  7464
  7465 				; optimize FAIL ('PUTTILE', nyan10p7.pas), line = 77
  7466 53EF E8				inx
  7467 53F0 A9 07 95 98			mva #$07 :STACKORIGIN,x
  7468 53F4 E8				inx
  7469 53F5 A9 0C 95 98			mva #$0C :STACKORIGIN,x
  7470 53F9 E8				inx
  7471 53FA A9 1A 95 98			mva #$1A :STACKORIGIN,x
  7472 53FE E8				inx
  7473 53FF A9 13 95 98			mva #$13 :STACKORIGIN,x
  7474 5403 E8				inx
  7475 5404 A9 00 95 98			mva #$00 :STACKORIGIN,x
  7476 5408 A9 80 95 A8			mva #$80 :STACKORIGIN+STACKWIDTH,x
  7477 540C E8				inx
  7478 540D AD 16 56 95 98		mva FRAME :STACKORIGIN,x
  7479 5412 E8				inx
  7480 5413 A9 EE 95 98			mva #$EE :STACKORIGIN,x
  7481 5417 A9 01 95 A8			mva #$01 :STACKORIGIN+STACKWIDTH,x
  7482 541B A9 00 95 A7			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  7483 541F 20 F0 21			jsr imulWORD
  7484 5422 20 F3 20			jsr movaBX_EAX
  7485 5425 CA				dex
  7486 5426 20 DC 20			jsr addAX_CX
  7487 5429 CA				dex
  7488 542A 20 9B 50			jsr PUTTILE
  7489
  7490 				; --- ForToDoEpilog
  7491 542D EE 16 56			inc FRAME					; inc ptr byte [CounterAddress]
  7492 5430 D0 AA			jne l_153A
  7493 5432			l_1548
  7494
  7495 				; optimize FAIL ('CRT.KEYPRESSED', nyan10p7.pas), line = 79
  7496 5432 20 02 23			jsr CRT.KEYPRESSED
  7497 5435 CA				dex
  7498 5436 B5 99			lda :STACKORIGIN+1,x
  7499 5438 F0 9D			jeq l_1531
  7500
  7501 				; ------------------------------------------------------------
  7502
  7503 = 6000			DISPLAY_LIST_ADDRESS	= $6000
  7504 = 7000			VIDEO_RAM_ADDRESS	= $7000
  7505 = 8000			BITMAP_ADDRESS	= $8000
  7506 = 01EE			FRAME_SIZE	= $01EE
  7507 = 5616			FRAME	= DATAORIGIN+$01C8
  7508 = 0004			@FORTMP_1537	= $04
  7509 543A			@exit
  7510
  7511 543A A2 00		@halt	ldx #0
  7512 543C 9A				txs
  7513
  7514 543D 60				rts
  7515
  7516 				; ------------------------------------------------------------
  7517
  7518 543E 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  7519
  7520 				; ------------------------------------------------------------
  7521
  7522 544E			.local	@DEFINES
  7523 544E			ATARI
  7524 				.endl
  7525
  7526 				.endl							; MAIN
  7527
  7528 				; ------------------------------------------------------------
  7529 				; ------------------------------------------------------------
  7530
  7531 				.macro	UNITINITIALIZATION
  7532 				
  7533 					.ifdef MAIN.SYSTEM.@UnitInit
  7534 					jsr MAIN.SYSTEM.@UnitInit
  7535 					eif
  7536 				
  7537 					.ifdef MAIN.ATARI.@UnitInit
  7538 					jsr MAIN.ATARI.@UnitInit
  7539 					eif
  7540 				
  7541 					.ifdef MAIN.CRT.@UnitInit
  7542 					jsr MAIN.CRT.@UnitInit
  7543 					eif
  7544 				
  7545 					.ifdef MAIN.GR10PP.@UnitInit
  7546 					jsr MAIN.GR10PP.@UnitInit
  7547 					eif
  7548 				
  7549 					.ifdef MAIN.TYPES.@UnitInit
  7550 					jsr MAIN.TYPES.@UnitInit
  7551 					eif
  7552 				
  7553 					.ifdef MAIN.GRAPH.@UnitInit
  7554 					jsr MAIN.GRAPH.@UnitInit
  7555 					eif
  7556 				.endm
  7557
  7558 				; ------------------------------------------------------------
  7559
  7560 					ift .SIZEOF(MAIN.SYSTEM) > 0
  7561 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  7561 				SYSTEM: $229B..$2301
  7562 					eif
  7563
  7564 					ift .SIZEOF(MAIN.ATARI) > 0
  7565 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  7566 					eif
  7567
  7568 					ift .SIZEOF(MAIN.CRT) > 0
  7569 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  7569 				CRT: $2302..$2315
  7570 					eif
  7571
  7572 					ift .SIZEOF(MAIN.GR10PP) > 0
  7573 					.print 'GR10PP: ',MAIN.GR10PP,'..',MAIN.GR10PP+.SIZEOF(MAIN.GR10PP)-1
  7573 				GR10PP: $2316..$250D
  7574 					eif
  7575
  7576 					ift .SIZEOF(MAIN.TYPES) > 0
  7577 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  7578 					eif
  7579
  7580 					ift .SIZEOF(MAIN.GRAPH) > 0
  7581 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  7581 				GRAPH: $250E..$2FB7
  7582 					eif
  7583
  7584 					.print 'CODE: ',CODEORIGIN,'..',*-1
  7584 				CODE: $2000..$544D
  7585
  7586 				; ------------------------------------------------------------
  7587
  7588 544E			DATAORIGIN
  7589 544E 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  7590 5466 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
  7591
  7592 = 002C			VARINITSIZE	= *-DATAORIGIN
  7593 = 01C9			VARDATASIZE	= 457
  7594
  7595 = 5617			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  7596
  7597 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  7597 				DATA: $544E..$5617
  7598
  7599 02E0-02E1> 5E 22			run START
  7600
  7601 				; ------------------------------------------------------------
  7602
  7603 				.macro	STATICDATA
  7604 				.by  $14 $41 $42 $43 $44 $45 $46 $47  $48 $49 $4A $4B $4C $4D $4E $4F  $50 $52 $53 $54 $55 $00 $14 $56
  7605 				.by  $5A $57 $58 $59 $20 $31 $32 $33  $34 $35 $36 $37 $38 $39 $30 $2B  $2D $2A $2F $00 $0F $2E $2C $3A
  7606 				.by  $3B $21 $3F $27 $22 $28 $29 $3D  $3C $3E $25 $23 $00
  7607 				.endm
  7608
  7609 					end
