; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/04/23] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
TMP
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'nyan5x.g10' BITMAP_ADDRESS 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend

.print 'RTLIB: ',RTLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0044

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1

; ---------------------  ASM Block 021  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVE_0083					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex						; sub bx, 1

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PAUSE_00A1					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PAUSE_00A2					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x N
	mva :STACKORIGIN+STACKWIDTH,x N+1
	dex						; sub bx, 1

; ---------------------  ASM Block 040  ---------------------


loop	lda n
	ora n+1
	beq stop

	lda:cmp:req :rtclok+2

	dew n

	jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000B

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 053  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000E

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000D
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	GR10PP						; UNIT

.local	G10DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 061  ---------------------


dli 
    pha 
    sta WSYNC  ;($d40a) 
    lda #13 
.def :VS_Upper = *-1
    sta VSCROL ;($d405) 
    lda #3
.def :VS_Lower = *-1
    sta VSCROL ;($d405) 
    pla 

	rti						; ret
.endl

.local	SETVS						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LOWER
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x UPPER
	dex						; sub bx, 1

; ---------------------  ASM Block 062  ---------------------


    lda upper
    sta VS_Upper
    lda lower
    sta VS_Lower


; ------------------------------------------------------------

UPPER	= DATAORIGIN+$0012
LOWER	= DATAORIGIN+$0013

@VarData	= UPPER
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETPIXELHEIGHT					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex						; sub bx, 1

; optimize OK (GR10PP), line = 83

	lda LINES
	cmp #$02
	jcc l_00D6
	cmp #$11
	jcs l_00D6

; optimize FAIL ('SYSTEM.PAUSE_00A1', GR10PP), line = 84
	jsr SYSTEM.PAUSE_00A1

; optimize FAIL ('SETVS', GR10PP), line = 85
	inx
	lda #$11
	sub LINES
	sta :STACKORIGIN,x
	inx
	ldy LINES
	dey
	sty :STACKORIGIN,x
	jsr SETVS
l_00D6

; ------------------------------------------------------------

LINES	= DATAORIGIN+$0014

@VarData	= LINES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x B
	dex						; sub bx, 1

; optimize OK (GR10PP), line = 91

	lda DLIST
	add DLPTR
	tay
	lda DLIST+1
	adc DLPTR+1
	sta :bp+1
	lda B
	sta (:bp),y

; optimize FAIL (0, GR10PP), line = 92
	inc DLPTR
	sne
	inc DLPTR+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0015

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKEW						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x W
	mva :STACKORIGIN+STACKWIDTH,x W+1
	dex						; sub bx, 1

; optimize OK (GR10PP), line = 97

	lda DLIST
	add DLPTR
	tay
	lda DLIST+1
	adc DLPTR+1
	sta :bp+1
	lda W
	sta (:bp),y

; optimize FAIL (0, GR10PP), line = 98
	inc DLPTR
	sne
	inc DLPTR+1

; optimize OK (GR10PP), line = 99

	lda W+1
	sta :STACKORIGIN+10
	lda DLIST
	add DLPTR
	tay
	lda DLIST+1
	adc DLPTR+1
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; optimize FAIL (0, GR10PP), line = 100
	inc DLPTR
	sne
	inc DLPTR+1

; ------------------------------------------------------------

W	= DATAORIGIN+$0016

@VarData	= W
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BUILDDISPLAYLIST				; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex						; sub bx, 1

; optimize OK (GR10PP), line = 105

	mva DLISTADDRESS DLIST
	mva DLISTADDRESS+1 DLIST+1

; optimize OK (GR10PP), line = 106

	mva #$00 DLPTR
	sta DLPTR+1

; --- WhileProlog
	jmp l_0134
l_0135

; optimize OK (GR10PP), line = 108

	lda BLANKS
	cmp #$01
	jne l_0147

; optimize FAIL ('DLPOKE', GR10PP), line = 108
	inx
	mva #$F0 :STACKORIGIN,x
	jsr DLPOKE
	jmp l_0153
l_0147

; optimize FAIL ('DLPOKE', GR10PP), line = 109
	inx
	mva #$70 :STACKORIGIN,x
	jsr DLPOKE
l_0153

; optimize FAIL (0, GR10PP), line = 110
	dec BLANKS
l_0134

; optimize OK (GR10PP), line = 107

	lda BLANKS
	jne l_0135

; optimize FAIL ('DLPOKE', GR10PP), line = 112
	inx
	mva #$6F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', GR10PP), line = 113
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; optimize FAIL ('DLPOKE', GR10PP), line = 114
	inx
	mva #$8F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL (0, GR10PP), line = 115
	dec LINES

; --- WhileProlog
	jmp l_0172
l_0173

; optimize FAIL ('DLPOKE', GR10PP), line = 117
	inx
	mva #$2F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKE', GR10PP), line = 118
	inx
	mva #$8F :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL (0, GR10PP), line = 119
	dec LINES
l_0172

; optimize OK (GR10PP), line = 116

	lda LINES
	jne l_0173

; optimize FAIL ('DLPOKE', GR10PP), line = 121
	inx
	mva #$70 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKE', GR10PP), line = 122
	inx
	mva #$41 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', GR10PP), line = 123
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$0018
VRAMADDRESS	= DATAORIGIN+$001A
LINES	= DATAORIGIN+$001C
BLANKS	= DATAORIGIN+$001D

@VarData	= DLISTADDRESS
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	GR10INIT					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x PIXELHEIGHT
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex						; sub bx, 1

; optimize FAIL ('BUILDDISPLAYLIST', GR10PP), line = 128
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LINES :STACKORIGIN,x
	inx
	mva BLANKS :STACKORIGIN,x
	jsr BUILDDISPLAYLIST

; optimize FAIL ('SETPIXELHEIGHT', GR10PP), line = 129
	inx
	mva PIXELHEIGHT :STACKORIGIN,x
	jsr SETPIXELHEIGHT

; optimize OK (GR10PP), line = 130

	mva DLISTADDRESS ATARI.SDLSTL
	mva DLISTADDRESS+1 ATARI.SDLSTL+1

; optimize OK (GR10PP), line = 131

	mva VRAMADDRESS ATARI.SAVMSC
	mva VRAMADDRESS+1 ATARI.SAVMSC+1

; optimize OK (GR10PP), line = 132

	mva <G10DLI VDSLST
	mva >G10DLI VDSLST+1

; optimize OK (GR10PP), line = 133

	mva #$C0 ATARI.NMIEN

; optimize OK (GR10PP), line = 134

	mva #$81 ATARI.GPRIOR

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$001E
VRAMADDRESS	= DATAORIGIN+$0020
LINES	= DATAORIGIN+$0022
PIXELHEIGHT	= DATAORIGIN+$0023
BLANKS	= DATAORIGIN+$0024

@VarData	= DLISTADDRESS
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_MODE_320X192G2	= $0F
DL_JVB	= $41
adr.DLIST	= DATAORIGIN+$000F
.var DLIST	= adr.DLIST .word
DLPTR	= DATAORIGIN+$0010

.endl							; UNIT GR10PP

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_01D5					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex						; sub bx, 1

; ---------------------  ASM Block 063  ---------------------


	txa:pha

	lda mode
	sta MAIN.SYSTEM.GraphMode
	and #$0f
	tay

	ldx #$60		; 6*16
	lda mode		; %00010000 with text window
	and #$10
	eor #$10
	ora #2			; read

	.nowarn @GRAPHICS

	sty GraphResult
	
tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH

; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx
    
; X:A = horizontal resolution
; Y = vertical resolution

	@SCREENSIZE

	pla:tax


; ------------------------------------------------------------

MODE	= DATAORIGIN+$0042

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETCOLOR					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x COLOR
	dex						; sub bx, 1

; ---------------------  ASM Block 065  ---------------------

	mva color @COMMAND.colscr
	sta GetColor


; ------------------------------------------------------------

COLOR	= DATAORIGIN+$0043

@VarData	= COLOR
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PUTPIXEL_01E0					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex						; sub bx, 1

; ---------------------  ASM Block 066  ---------------------

	txa:pha
{
	lda y+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenHeight+1
	bne sk0
	lda y
	cmp MAIN.SYSTEM.ScreenHeight
sk0
	bcs stop

	lda x+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenWidth+1
	bne sk1
	lda x
	cmp MAIN.SYSTEM.ScreenWidth
sk1
	bcs stop

	mwa x colcrs
	mva y rowcrs

	lda #@IDput

	jsr @COMMAND

stop	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$0044
Y	= DATAORIGIN+$0046

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex						; sub bx, 1

; ---------------------  ASM Block 069  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	mwa x CurrentX
	mwa y CurrentY


; ------------------------------------------------------------

X	= DATAORIGIN+$0048
Y	= DATAORIGIN+$004A

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	LINETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex						; sub bx, 1

; ---------------------  ASM Block 070  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	txa:pha

	mwa CurrentX colcrs
	mva CurrentY rowcrs

	lda #@IDput

	jsr @COMMAND

	lda x
	sta colcrs
	sta CurrentX
	lda x+1
	sta colcrs+1
	sta CurrentX+1

	mva y rowcrs
	sta CurrentY
	lda y+1
	sta CurrentY+1

	lda #@IDdraw

	jsr @COMMAND

	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$004C
Y	= DATAORIGIN+$004E

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	LINE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y2
	mva :STACKORIGIN+STACKWIDTH,x Y2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X2
	mva :STACKORIGIN+STACKWIDTH,x X2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y1
	mva :STACKORIGIN+STACKWIDTH,x Y1+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X1
	mva :STACKORIGIN+STACKWIDTH,x X1+1
	dex						; sub bx, 1

; optimize OK (GRAPH), line = 312

	mva CURRENTX X
	mva CURRENTX+1 X+1

; optimize OK (GRAPH), line = 313

	mva CURRENTY Y
	mva CURRENTY+1 Y+1

; optimize FAIL ('MOVETO', GRAPH), line = 315
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr MOVETO

; optimize FAIL ('LINETO', GRAPH), line = 316
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize OK (GRAPH), line = 318

	mva X CURRENTX
	mva X+1 CURRENTX+1

; optimize OK (GRAPH), line = 319

	mva Y CURRENTY
	mva Y+1 CURRENTY+1

; ------------------------------------------------------------

X1	= DATAORIGIN+$0050
Y1	= DATAORIGIN+$0052
X2	= DATAORIGIN+$0054
Y2	= DATAORIGIN+$0056
X	= DATAORIGIN+$0058
Y	= DATAORIGIN+$005A

@VarData	= X1
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	HLINE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X2
	mva :STACKORIGIN+STACKWIDTH,x X2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X1
	mva :STACKORIGIN+STACKWIDTH,x X1+1
	dex						; sub bx, 1

; optimize FAIL ('LINE', GRAPH), line = 326
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva Y+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva Y+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINE

; ------------------------------------------------------------

X1	= DATAORIGIN+$005C
X2	= DATAORIGIN+$005E
Y	= DATAORIGIN+$0060

@VarData	= X1
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	ELLIPSE_0244					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x B
	mva :STACKORIGIN+STACKWIDTH,x B+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y0
	mva :STACKORIGIN+STACKWIDTH,x Y0+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X0
	mva :STACKORIGIN+STACKWIDTH,x X0+1
	dex						; sub bx, 1

	jmp l_0253

.local	DRAWELLIPSE					; PROCEDURE

; optimize OK (graph.inc), line = 324

	lda X0
	add X
	sta TXP
	lda X0+1
	adc X+1
	sta TXP+1

; optimize OK (graph.inc), line = 324

	lda Y0
	add Y
	sta TYP
	lda Y0+1
	adc Y+1
	sta TYP+1

; optimize OK (graph.inc), line = 325

	lda X0
	sub X
	sta TXM
	lda X0+1
	sbc X+1
	sta TXM+1

; optimize OK (graph.inc), line = 325

	lda Y0
	sub Y
	sta TYM
	lda Y0+1
	sbc Y+1
	sta TYM+1

; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 327
	inx
	mva TXP :STACKORIGIN,x
	mva TXP+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva TYP :STACKORIGIN,x
	mva TYP+1 :STACKORIGIN+STACKWIDTH,x
	jsr PUTPIXEL_01E0

; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 328
	inx
	mva TXM :STACKORIGIN,x
	mva TXM+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva TYP :STACKORIGIN,x
	mva TYP+1 :STACKORIGIN+STACKWIDTH,x
	jsr PUTPIXEL_01E0

; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 329
	inx
	mva TXM :STACKORIGIN,x
	mva TXM+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva TYM :STACKORIGIN,x
	mva TYM+1 :STACKORIGIN+STACKWIDTH,x
	jsr PUTPIXEL_01E0

; optimize FAIL ('PUTPIXEL_01E0', graph.inc), line = 330
	inx
	mva TXP :STACKORIGIN,x
	mva TXP+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva TYM :STACKORIGIN,x
	mva TYM+1 :STACKORIGIN+STACKWIDTH,x
	jsr PUTPIXEL_01E0

; ------------------------------------------------------------

TXP	= DATAORIGIN+$008A
TYP	= DATAORIGIN+$008C
TXM	= DATAORIGIN+$008E
TYM	= DATAORIGIN+$0090

@VarData	= TXP
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0253

; optimize OK (graph.inc), line = 334

	lda A+1
	ora A
	jeq l_02AFx
	lda B+1
	ora B
	jne l_02AF
l_02AFx

	jmp @exit					; exit
l_02AF

; optimize OK (graph.inc), line = 336

	lda A
	sta :ecx
	sta :eax
	lda A+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta _A
	lda :eax+1
	sta _A+1
	lda :eax+2
	sta _A+2
	lda :eax+3
	sta _A+3

; optimize OK (graph.inc), line = 337

	lda _A
	sta A2
	lda _A+1
	sta A2+1
	lda _A+2
	sta A2+2
	lda _A+3
	sta A2+3
	asl A2
	rol A2+1
	rol A2+2
	rol A2+3

; optimize OK (graph.inc), line = 339

	lda B
	sta :ecx
	sta :eax
	lda B+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta _B
	lda :eax+1
	sta _B+1
	lda :eax+2
	sta _B+2
	lda :eax+3
	sta _B+3

; optimize OK (graph.inc), line = 340

	lda _B
	sta B2
	lda _B+1
	sta B2+1
	lda _B+2
	sta B2+2
	lda _B+3
	sta B2+3
	asl B2
	rol B2+1
	rol B2+2
	rol B2+3

; optimize OK (graph.inc), line = 342

	mva B Y
	mva B+1 Y+1

; optimize OK (graph.inc), line = 343

	mva #$00 X
	sta X+1

; optimize OK (graph.inc), line = 344

	sta STOPY
	sta STOPY+1
	sta STOPY+2
	sta STOPY+3

; optimize OK (graph.inc), line = 346

	lda B
	sta :ecx
	lda B+1
	sta :ecx+1
	lda #$00
	sta :ecx+2
	sta :ecx+3
	lda _A
	sta :eax
	lda _A+1
	sta :eax+1
	lda _A+2
	sta :eax+2
	lda _A+3
	sta :eax+3
	jsr imulECX
	lda :eax
	sta ERROR
	lda :eax+1
	sta ERROR+1
	lda :eax+2
	sta ERROR+2
	lda :eax+3
	sta ERROR+3

; optimize OK (graph.inc), line = 347

	lda ERROR
	sta STOPX
	lda ERROR+1
	sta STOPX+1
	lda ERROR+2
	sta STOPX+2
	lda ERROR+3
	sta STOPX+3
	asl STOPX
	rol STOPX+1
	rol STOPX+2
	rol STOPX+3

; --- WhileProlog
	jmp l_02F6
l_02F7

; optimize FAIL ('DRAWELLIPSE', graph.inc), line = 351
	jsr DRAWELLIPSE

; optimize FAIL (0, graph.inc), line = 353
	inc X
	sne
	inc X+1

; optimize OK (graph.inc), line = 354

	lda STOPY
	add B2
	sta STOPY
	lda STOPY+1
	adc B2+1
	sta STOPY+1
	lda STOPY+2
	adc B2+2
	sta STOPY+2
	lda STOPY+3
	adc B2+3
	sta STOPY+3

; optimize OK (graph.inc), line = 355

	lda ERROR
	sub STOPY
	sta ERROR
	lda ERROR+1
	sbc STOPY+1
	sta ERROR+1
	lda ERROR+2
	sbc STOPY+2
	sta ERROR+2
	lda ERROR+3
	sbc STOPY+3
	sta ERROR+3

; optimize OK (graph.inc), line = 357

	jpl l_031C

; optimize FAIL (0, graph.inc), line = 358
	dew Y

; optimize OK (graph.inc), line = 359

	lda STOPX
	sub A2
	sta STOPX
	lda STOPX+1
	sbc A2+1
	sta STOPX+1
	lda STOPX+2
	sbc A2+2
	sta STOPX+2
	lda STOPX+3
	sbc A2+3
	sta STOPX+3

; optimize OK (graph.inc), line = 360

	lda ERROR
	add STOPX
	sta ERROR
	lda ERROR+1
	adc STOPX+1
	sta ERROR+1
	lda ERROR+2
	adc STOPX+2
	sta ERROR+2
	lda ERROR+3
	adc STOPX+3
	sta ERROR+3
l_031C
l_02F6

; optimize OK (graph.inc), line = 349

	.LOCAL
	lda STOPY+3
	sub STOPX+3
	bne L4
	lda STOPY+2
	cmp STOPX+2
	bne L1
	lda STOPY+1
	cmp STOPX+1
	bne L1
	lda STOPY
	cmp STOPX
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_02F7
	jeq l_02F7

; optimize OK (graph.inc), line = 364

	mva A X
	mva A+1 X+1

; optimize OK (graph.inc), line = 365

	mva #$00 Y
	sta Y+1

; optimize OK (graph.inc), line = 366

	sta STOPX
	sta STOPX+1
	sta STOPX+2
	sta STOPX+3

; optimize OK (graph.inc), line = 368

	lda A
	sta :ecx
	lda A+1
	sta :ecx+1
	lda #$00
	sta :ecx+2
	sta :ecx+3
	lda _B
	sta :eax
	lda _B+1
	sta :eax+1
	lda _B+2
	sta :eax+2
	lda _B+3
	sta :eax+3
	jsr imulECX
	lda :eax
	sta ERROR
	lda :eax+1
	sta ERROR+1
	lda :eax+2
	sta ERROR+2
	lda :eax+3
	sta ERROR+3

; optimize OK (graph.inc), line = 369

	lda ERROR
	sta STOPY
	lda ERROR+1
	sta STOPY+1
	lda ERROR+2
	sta STOPY+2
	lda ERROR+3
	sta STOPY+3
	asl STOPY
	rol STOPY+1
	rol STOPY+2
	rol STOPY+3

; --- WhileProlog
	jmp l_035D
l_035E

; optimize FAIL ('DRAWELLIPSE', graph.inc), line = 373
	jsr DRAWELLIPSE

; optimize FAIL (0, graph.inc), line = 375
	inc Y
	sne
	inc Y+1

; optimize OK (graph.inc), line = 376

	lda STOPX
	add A2
	sta STOPX
	lda STOPX+1
	adc A2+1
	sta STOPX+1
	lda STOPX+2
	adc A2+2
	sta STOPX+2
	lda STOPX+3
	adc A2+3
	sta STOPX+3

; optimize OK (graph.inc), line = 377

	lda ERROR
	sub STOPX
	sta ERROR
	lda ERROR+1
	sbc STOPX+1
	sta ERROR+1
	lda ERROR+2
	sbc STOPX+2
	sta ERROR+2
	lda ERROR+3
	sbc STOPX+3
	sta ERROR+3

; optimize OK (graph.inc), line = 379

	jpl l_0383

; optimize FAIL (0, graph.inc), line = 380
	dew X

; optimize OK (graph.inc), line = 381

	lda STOPY
	sub B2
	sta STOPY
	lda STOPY+1
	sbc B2+1
	sta STOPY+1
	lda STOPY+2
	sbc B2+2
	sta STOPY+2
	lda STOPY+3
	sbc B2+3
	sta STOPY+3

; optimize OK (graph.inc), line = 382

	lda ERROR
	add STOPY
	sta ERROR
	lda ERROR+1
	adc STOPY+1
	sta ERROR+1
	lda ERROR+2
	adc STOPY+2
	sta ERROR+2
	lda ERROR+3
	adc STOPY+3
	sta ERROR+3
l_0383
l_035D

; optimize OK (graph.inc), line = 371

	.LOCAL
	lda STOPY+3
	sub STOPX+3
	bne L4
	lda STOPY+2
	cmp STOPX+2
	bne L1
	lda STOPY+1
	cmp STOPX+1
	bne L1
	lda STOPY
	cmp STOPX
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_035E

; ------------------------------------------------------------

X0	= DATAORIGIN+$0062
Y0	= DATAORIGIN+$0064
A	= DATAORIGIN+$0066
B	= DATAORIGIN+$0068
ERROR	= DATAORIGIN+$006A
STOPX	= DATAORIGIN+$006E
STOPY	= DATAORIGIN+$0072
X	= DATAORIGIN+$0076
Y	= DATAORIGIN+$0078
A2	= DATAORIGIN+$007A
B2	= DATAORIGIN+$007E
_A	= DATAORIGIN+$0082
_B	= DATAORIGIN+$0086

@VarData	= X0
@VarDataSize	= 40

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	RECTANGLE_03AE					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y2
	mva :STACKORIGIN+STACKWIDTH,x Y2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X2
	mva :STACKORIGIN+STACKWIDTH,x X2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y1
	mva :STACKORIGIN+STACKWIDTH,x Y1+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X1
	mva :STACKORIGIN+STACKWIDTH,x X1+1
	dex						; sub bx, 1

; optimize FAIL ('MOVETO', graph.inc), line = 465
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr MOVETO

; optimize FAIL ('LINETO', graph.inc), line = 466
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize FAIL ('LINETO', graph.inc), line = 467
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize FAIL ('LINETO', graph.inc), line = 468
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize FAIL ('LINETO', graph.inc), line = 469
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; ------------------------------------------------------------

X1	= DATAORIGIN+$0092
Y1	= DATAORIGIN+$0094
X2	= DATAORIGIN+$0096
Y2	= DATAORIGIN+$0098

@VarData	= X1
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BAR						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y2
	mva :STACKORIGIN+STACKWIDTH,x Y2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X2
	mva :STACKORIGIN+STACKWIDTH,x X2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y1
	mva :STACKORIGIN+STACKWIDTH,x Y1+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X1
	mva :STACKORIGIN+STACKWIDTH,x X1+1
	dex						; sub bx, 1

; --- For

; optimize OK (graph.inc), line = 808

	mva Y1 I
	mva Y1+1 I+1

; optimize OK (graph.inc), line = 808

	mva Y2 :@FORTMP?0406_0
	mva Y2+1 :@FORTMP?0406_1
l_0409
; --- ForToDoCondition

; optimize OK (graph.inc), line = 808

	.LOCAL
	lda I+1
.def :@FORTMP?0406_1 = *+2
	sub #$00
	bne L4
	lda I
.def :@FORTMP?0406_0 = *+1
	cmp #$00
L1	beq L5
	bcs L3
	lda #$FF
	jmp L5
L3	lda #$01
	jmp L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	smi
	jne l_0415

; optimize FAIL ('HLINE', graph.inc), line = 808
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva I+1 :STACKORIGIN+STACKWIDTH,x
	jsr HLINE

; --- ForToDoEpilog
	inc I
	sne
	inc I+1
	jmp l_0409
l_0415

; ------------------------------------------------------------

X1	= DATAORIGIN+$009A
Y1	= DATAORIGIN+$009C
X2	= DATAORIGIN+$009E
Y2	= DATAORIGIN+$00A0
I	= DATAORIGIN+$00A2
@FORTMP_0406	= $00

@VarData	= X1
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BAR3D						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x TOP
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEPTH
	mva :STACKORIGIN+STACKWIDTH,x DEPTH+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y2
	mva :STACKORIGIN+STACKWIDTH,x Y2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X2
	mva :STACKORIGIN+STACKWIDTH,x X2+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y1
	mva :STACKORIGIN+STACKWIDTH,x Y1+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X1
	mva :STACKORIGIN+STACKWIDTH,x X1+1
	dex						; sub bx, 1

; optimize OK (graph.inc), line = 838

	.LOCAL
	lda X1+1
	sub X2+1
	bne L4
	lda X1
	cmp X2
	beq L5
	lda #$00
	adc #$FF
	ora #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_044A
	jeq l_044A

; optimize OK (graph.inc), line = 840

	mva X1 OLDX
	mva X1+1 OLDX+1

; optimize OK (graph.inc), line = 841

	mva X2 X1
	mva X2+1 X1+1

; optimize OK (graph.inc), line = 842

	mva OLDX X2
	mva OLDX+1 X2+1
l_044A

; optimize OK (graph.inc), line = 844

	.LOCAL
	lda Y1+1
	sub Y2+1
	bne L4
	lda Y1
	cmp Y2
	beq L5
	lda #$00
	adc #$FF
	ora #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_046E
	jeq l_046E

; optimize OK (graph.inc), line = 846

	mva Y1 OLDY
	mva Y1+1 OLDY+1

; optimize OK (graph.inc), line = 847

	mva Y2 Y1
	mva Y2+1 Y1+1

; optimize OK (graph.inc), line = 848

	mva OLDY Y2
	mva OLDY+1 Y2+1
l_046E

; optimize FAIL ('BAR', graph.inc), line = 851
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr BAR

; optimize FAIL ('RECTANGLE_03AE', graph.inc), line = 852
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr RECTANGLE_03AE

; optimize OK (graph.inc), line = 857

	mva CURRENTX OLDX
	mva CURRENTX+1 OLDX+1

; optimize OK (graph.inc), line = 858

	mva CURRENTY OLDY
	mva CURRENTY+1 OLDY+1

; optimize OK (graph.inc), line = 860

	lda TOP
	jeq l_04A8

; optimize FAIL ('MOVETO', graph.inc), line = 861
	inx
	mva X1 :STACKORIGIN,x
	mva X1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr MOVETO

; optimize FAIL ('LINETO', graph.inc), line = 862
	inx
	adb X1 DEPTH :STACKORIGIN,x
	lda X1+1
	adc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	sbb Y1 DEPTH :STACKORIGIN,x
	lda Y1+1
	sbc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize FAIL ('LINETO', graph.inc), line = 863
	inx
	adb X2 DEPTH :STACKORIGIN,x
	lda X2+1
	adc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	sbb Y1 DEPTH :STACKORIGIN,x
	lda Y1+1
	sbc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize FAIL ('LINETO', graph.inc), line = 864
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y1 :STACKORIGIN,x
	mva Y1+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO
l_04A8

; optimize OK (graph.inc), line = 866

	lda DEPTH+1
	ora DEPTH
	jeq l_04E4

; optimize FAIL ('MOVETO', graph.inc), line = 868
	inx
	adb X2 DEPTH :STACKORIGIN,x
	lda X2+1
	adc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	sbb Y1 DEPTH :STACKORIGIN,x
	lda Y1+1
	sbc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	jsr MOVETO

; optimize FAIL ('LINETO', graph.inc), line = 869
	inx
	adb X2 DEPTH :STACKORIGIN,x
	lda X2+1
	adc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	sbb Y2 DEPTH :STACKORIGIN,x
	lda Y2+1
	sbc DEPTH+1
	sta :STACKORIGIN+STACKWIDTH,x
	jsr LINETO

; optimize FAIL ('LINETO', graph.inc), line = 870
	inx
	mva X2 :STACKORIGIN,x
	mva X2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y2 :STACKORIGIN,x
	mva Y2+1 :STACKORIGIN+STACKWIDTH,x
	jsr LINETO
l_04E4

; optimize OK (graph.inc), line = 873

	mva OLDX CURRENTX
	mva OLDX+1 CURRENTX+1

; optimize OK (graph.inc), line = 874

	mva OLDY CURRENTY
	mva OLDY+1 CURRENTY+1

; ------------------------------------------------------------

X1	= DATAORIGIN+$00A6
Y1	= DATAORIGIN+$00A8
X2	= DATAORIGIN+$00AA
Y2	= DATAORIGIN+$00AC
DEPTH	= DATAORIGIN+$00AE
TOP	= DATAORIGIN+$00B0
ORIGWRITEMODE	= DATAORIGIN+$00B1
OLDX	= DATAORIGIN+$00B3
OLDY	= DATAORIGIN+$00B5

@VarData	= X1
@VarDataSize	= 17

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$0025
WIN_RIGHT	= DATAORIGIN+$0027
WIN_TOP	= DATAORIGIN+$0029
WIN_BOTTOM	= DATAORIGIN+$002B
GRAPHRESULT	= DATAORIGIN+$002D
GETCOLOR	= DATAORIGIN+$002E
adr.LASTARCCOORDS	= DATAORIGIN+$002F
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$002F
LASTARCCOORDS.Y	= DATAORIGIN+$0031
LASTARCCOORDS.XSTART	= DATAORIGIN+$0033
LASTARCCOORDS.YSTART	= DATAORIGIN+$0035
LASTARCCOORDS.XEND	= DATAORIGIN+$0037
LASTARCCOORDS.YEND	= DATAORIGIN+$0039
CURRENTX	= DATAORIGIN+$003B
CURRENTY	= DATAORIGIN+$003D
VIDEORAM	= DATAORIGIN+$003F
SCANLINE_WIDTH	= DATAORIGIN+$0041

.endl							; UNIT GRAPH

.local	PUTCHAR						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x CH
	dex						; sub bx, 1

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva CH :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #65
	jne l_053A
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 6
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 7
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 8
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 9
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_053A

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #66
	jne l_0595
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 15
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 16
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 17
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 18
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 19
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 20
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 21
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0595

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #67
	jne l_060F
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 24
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 25
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 26
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_060F

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #68
	jne l_065F
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 29
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 30
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 31
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 32
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_065F

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #69
	jne l_06B0
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 35
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 36
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 37
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 38
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 39
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_06B0

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #70
	jne l_0712
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 42
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 43
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 44
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0712

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #71
	jne l_075E
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 47
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 48
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 49
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 50
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_075E

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #72
	jne l_07CB
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 53
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 54
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 55
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_07CB

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #73
	jne l_080D
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 58
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_080D

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #74
	jne l_0827
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 61
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 62
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 63
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0827

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #75
	jne l_0863
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 66
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 67
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 68
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0863

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #76
	jne l_08B3
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 71
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 72
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_08B3

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #77
	jne l_08EA
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 75
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 76
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 77
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 78
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_08EA

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #78
	jne l_093B
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 81
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 82
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 83
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_093B

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #79
	jne l_097D
@

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 86
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; GenerateCaseStatementEpilog
	jmp a_0003
l_097D

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #80
	jne l_099B
@

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 89
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 90
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_099B

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #81
	jne l_09CE
@

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 94
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 95
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_09CE

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #82
	jne l_09FB
@

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 98
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 99
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 100
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_09FB

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #83
	jne l_0A4B
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 103
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 104
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 105
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 106
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 107
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0A4B

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #84
	jne l_0AB1
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 110
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 111
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0AB1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #85
	jne l_0AE8
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 114
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 115
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 116
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0AE8

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #86
	jne l_0B2A
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 119
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 120
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 121
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0B2A

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #89
	jne l_0B6C
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 124
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 125
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0B6C

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #88
	jne l_0BA3
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 128
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 129
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0BA3

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #87
	jne l_0BD6
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 132
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 133
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 134
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 135
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0BD6

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #90
	jne l_0C27
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 138
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 139
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 140
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0C27

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #49
	jne l_0C73
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 143
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 144
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0C73

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #50
	jne l_0CAE
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 148
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 149
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 151
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 152
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0CAE

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #51
	jne l_0CFF
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 155
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 155
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 156
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 157
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 158
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 159
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 159
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 160
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 161
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0CFF

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #52
	jne l_0D89
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 164
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 165
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 166
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0D89

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #53
	jne l_0DDD
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 169
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 170
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 171
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 172
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 173
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0DDD

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #54
	jne l_0E47
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 177
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 178
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0E47

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #55
	jne l_0E7E
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 181
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 182
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 183
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0E7E

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #56
	jne l_0ECA
@

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 186
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 187
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0ECA

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #57
	jne l_0F01
@

; optimize FAIL ('GRAPH.RECTANGLE_03AE', procs.inc), line = 197
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 198
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_0F01

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #48
	jne l_0F38
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 201
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 202
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 203
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 204
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 205
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0F38

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #46
	jne l_0F9C
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 208
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0F9C

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #44
	jne l_0FB0
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 211
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 212
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0FB0

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #59
	jne l_0FD3
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 215
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 216
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 217
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_0FD3

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #58
	jne l_1005
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 220
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 221
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_1005

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #33
	jne l_1024
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 224
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 225
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_1024

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #63
	jne l_1049
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 228
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 229
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 230
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 231
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 232
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_1049

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #40
	jne l_1091
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 235
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 236
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 237
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_1091

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #41
	jne l_10C9
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 240
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 241
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 242
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_10C9

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #37
	jne l_1109
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 245
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 246
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 247
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_1109

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #43
	jne l_1141
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 250
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 251
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_1141

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #45
	jne l_117C
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 254
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_117C

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #42
	jne l_119E
@

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 257
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 258
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 259
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 260
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 261
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 262
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', procs.inc), line = 263
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; GenerateCaseStatementEpilog
	jmp a_0003
l_119E

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #47
	jne l_120A
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 266
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_120A

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #61
	jne l_1228
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 269
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 270
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_1228

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #60
	jne l_1263
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 273
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 274
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_1263

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #62
	jne l_129A
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 277
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 278
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_129A

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #39
	jne l_12D1
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 281
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_12D1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #34
	jne l_12F3
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 284
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 285
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_12F3

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #92
	jne l_1326
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 288
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_1326

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #35
	jne l_1344
@

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 291
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 292
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$03
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 293
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.LINE', procs.inc), line = 294
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva Y :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda X
	add #$02
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda Y
	add #$04
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; GenerateCaseStatementEpilog
	jmp a_0003
l_1344

; GenerateCaseEpilog
a_0003

; ------------------------------------------------------------

CH	= DATAORIGIN+$00B7
X	= DATAORIGIN+$00B8
Y	= DATAORIGIN+$00B9

@VarData	= CH
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETTEXT						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x STR
	mva :STACKORIGIN+STACKWIDTH,x STR+1
	dex						; sub bx, 1
	@move STR #adr.STR #256
	mwa #adr.STR STR

; --- For

; optimize OK (procs.inc), line = 304

	mva #$01 I

; optimize OK (procs.inc), line = 304

	mva adr.STR :@FORTMP?13EE_0
l_13F1
; --- ForToDoCondition

; optimize OK (procs.inc), line = 304

	lda I
.def :@FORTMP?13EE_0 = *+1
	cmp #$00
	scc
	jne l_13FF

; optimize FAIL ('PUTCHAR', procs.inc), line = 305
	inx
	ldy I
	mva adr.STR,y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	jsr PUTCHAR

; optimize OK (procs.inc), line = 307

	ldy I
	lda adr.STR,y
	cmp #$49
	jeq l_1430x
	lda adr.STR,y
	cmp #$21
	jne l_1430
l_1430x

; optimize OK (procs.inc), line = 308

	lda X
	add #$02
	sta X
	jmp l_143B
l_1430

; optimize OK (procs.inc), line = 310

	lda X
	add #$04
	sta X
l_143B

; --- ForToDoEpilog
	inc I						; inc ptr byte [CounterAddress]
	jne l_13F1
l_13FF

; ------------------------------------------------------------

adr.STR	= DATAORIGIN+$00BA
.var STR	= adr.STR .word
X	= DATAORIGIN+$01BA
Y	= DATAORIGIN+$01BB
I	= DATAORIGIN+$01BC
@FORTMP_13EE	= $00

@VarData	= STR
@VarDataSize	= 259

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PUTTILE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x TILE
	mva :STACKORIGIN+STACKWIDTH,x TILE+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x H
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x W
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X
	dex						; sub bx, 1

; optimize OK (nyan10p7.pas), line = 20

	lda Y
	jsr @mul40
	lda :eax
	add X
	sta VOFFSET
	lda #$70
	adc :eax+1
	sta VOFFSET+1
; --- For

; optimize OK (nyan10p7.pas), line = 21

	mva #$00 B

; optimize OK (nyan10p7.pas), line = 21

	ldy H
	dey
	sty :@FORTMP?1474_0
l_1477
; --- ForToDoCondition

; optimize OK (nyan10p7.pas), line = 21

	lda B
.def :@FORTMP?1474_0 = *+1
	cmp #$00
	scc
	jne l_1485

; optimize OK (nyan10p7.pas), line = 22

	lda TILE
	sta :edx
	lda TILE+1
	sta :edx+1
	lda VOFFSET
	sta :ecx
	lda VOFFSET+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (nyan10p7.pas), line = 23

	lda TILE
	add W
	sta TILE
	scc
	inc TILE+1

; optimize OK (nyan10p7.pas), line = 24

	lda VOFFSET
	add #$28
	sta VOFFSET
	scc
	inc VOFFSET+1

; --- ForToDoEpilog
	inc B						; inc ptr byte [CounterAddress]
	jne l_1477
l_1485

; ------------------------------------------------------------

X	= DATAORIGIN+$01BE
Y	= DATAORIGIN+$01BF
W	= DATAORIGIN+$01C0
H	= DATAORIGIN+$01C1
TILE	= DATAORIGIN+$01C2
VOFFSET	= DATAORIGIN+$01C4
B	= DATAORIGIN+$01C6
@FORTMP_1474	= $00

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0044

; optimize FAIL ('GRAPH.INITGRAPH_01D5', nyan10p7.pas), line = 31
	inx
	mva #$0A :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_01D5

; optimize FAIL ('GR10PP.GR10INIT', nyan10p7.pas), line = 32
	inx
	mva #$00 :STACKORIGIN,x
	mva #$60 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$70 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$33 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	sta :STACKORIGIN,x
	jsr GR10PP.GR10INIT

; optimize OK (nyan10p7.pas), line = 33

	lda #$00
	sta $004D

; optimize OK (nyan10p7.pas), line = 35

	sta ATARI.PCOLR0

; optimize OK (nyan10p7.pas), line = 36

	mva #$24 ATARI.PCOLR3

; optimize OK (nyan10p7.pas), line = 37

	mva #$18 ATARI.PCOLR1

; optimize OK (nyan10p7.pas), line = 38

	mva #$1C ATARI.COLOR2

; optimize OK (nyan10p7.pas), line = 39

	mva #$BA ATARI.PCOLR2

; optimize OK (nyan10p7.pas), line = 40

	mva #$74 ATARI.COLOR1

; optimize OK (nyan10p7.pas), line = 41

	mva #$54 ATARI.COLOR0

; optimize OK (nyan10p7.pas), line = 42

	mva #$3C ATARI.COLOR4

; optimize OK (nyan10p7.pas), line = 43

	mva #$0A ATARI.COLOR3

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 46
	inx
	mva #$01 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 46
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 47
	inx
	mva #$02 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 47
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 48
	inx
	mva #$03 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 48
	inx
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 49
	inx
	mva #$04 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 49
	inx
	mva #$03 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 50
	inx
	mva #$05 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 50
	inx
	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$04 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 51
	inx
	mva #$06 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 51
	inx
	mva #$05 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$05 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 52
	inx
	mva #$07 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 52
	inx
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 53
	inx
	mva #$08 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_01E0', nyan10p7.pas), line = 53
	inx
	mva #$07 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$07 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_01E0

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 56
	inx
	mva #$01 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('PUTCHAR', nyan10p7.pas), line = 56
	inx
	mva #$41 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$23 :STACKORIGIN,x
	jsr PUTCHAR

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 57
	inx
	mva #$02 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('PUTCHAR', nyan10p7.pas), line = 57
	inx
	mva #$42 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva #$25 :STACKORIGIN,x
	jsr PUTCHAR

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 58
	inx
	mva #$08 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('PUTCHAR', nyan10p7.pas), line = 58
	inx
	mva #$43 :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva #$27 :STACKORIGIN,x
	jsr PUTCHAR

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 60
	inx
	mva #$03 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('SETTEXT', nyan10p7.pas), line = 61
	inx
	mva #$00 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$32 :STACKORIGIN,x
	jsr SETTEXT

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 62
	inx
	mva #$04 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('SETTEXT', nyan10p7.pas), line = 63
	inx
	mva #$16 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$38 :STACKORIGIN,x
	jsr SETTEXT

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 64
	inx
	mva #$06 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('SETTEXT', nyan10p7.pas), line = 65
	inx
	mva #$2C :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$3E :STACKORIGIN,x
	jsr SETTEXT

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 68
	inx
	mva #$07 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.LINE', nyan10p7.pas), line = 68
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$55 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$4F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$65 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINE

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 69
	inx
	mva #$03 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.RECTANGLE_03AE', nyan10p7.pas), line = 69
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$5C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$65 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.RECTANGLE_03AE

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 70
	inx
	mva #$02 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.ELLIPSE_0244', nyan10p7.pas), line = 70
	inx
	mva #$1E :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$5A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.ELLIPSE_0244

; optimize FAIL ('GRAPH.SETCOLOR', nyan10p7.pas), line = 71
	inx
	mva #$05 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.BAR3D', nyan10p7.pas), line = 71
	inx
	mva #$30 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$5B :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$46 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$64 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$08 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr GRAPH.BAR3D

; --- RepeatUntilProlog
l_1531
; --- For

; optimize OK (nyan10p7.pas), line = 75

	mva #$00 FRAME

; optimize OK (nyan10p7.pas), line = 75

l_153A
; --- ForToDoCondition

; optimize OK (nyan10p7.pas), line = 75

	lda FRAME
	cmp #$05
	jcs l_1548

; optimize FAIL ('SYSTEM.PAUSE_00A2', nyan10p7.pas), line = 76
	inx
	mva #$05 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr SYSTEM.PAUSE_00A2

; optimize FAIL ('PUTTILE', nyan10p7.pas), line = 77
	inx
	mva #$07 :STACKORIGIN,x
	inx
	mva #$0C :STACKORIGIN,x
	inx
	mva #$1A :STACKORIGIN,x
	inx
	mva #$13 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$80 :STACKORIGIN+STACKWIDTH,x
	inx
	mva FRAME :STACKORIGIN,x
	inx
	mva #$EE :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	jsr movaBX_EAX
	dex
	jsr addAX_CX
	dex
	jsr PUTTILE

; --- ForToDoEpilog
	inc FRAME					; inc ptr byte [CounterAddress]
	jne l_153A
l_1548

; optimize FAIL ('CRT.KEYPRESSED', nyan10p7.pas), line = 79
	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_1531

; ------------------------------------------------------------

DISPLAY_LIST_ADDRESS	= $6000
VIDEO_RAM_ADDRESS	= $7000
BITMAP_ADDRESS	= $8000
FRAME_SIZE	= $01EE
FRAME	= DATAORIGIN+$01C8
@FORTMP_1537	= $04
@exit

@halt	ldx #0
	txs

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.GR10PP.@UnitInit
	jsr MAIN.GR10PP.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.GR10PP) > 0
	.print 'GR10PP: ',MAIN.GR10PP,'..',MAIN.GR10PP+.SIZEOF(MAIN.GR10PP)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 457

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $14 $41 $42 $43 $44 $45 $46 $47  $48 $49 $4A $4B $4C $4D $4E $4F  $50 $52 $53 $54 $55 $00 $14 $56
.by  $5A $57 $58 $59 $20 $31 $32 $33  $34 $35 $36 $37 $38 $39 $30 $2B  $2D $2A $2F $00 $0F $2E $2C $3A
.by  $3B $21 $3F $27 $22 $28 $29 $3D  $3C $3E $25 $23 $00
.endm

	end
