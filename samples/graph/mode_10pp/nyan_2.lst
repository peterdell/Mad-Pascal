mads 2.1.0 build 8 (23 Dec 19)
Source: nyan_2.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/01/10] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2
    16
    17 = 0082			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    18 = 0086			edx	.ds 4
    19 = 008A			ecx	.ds 4
    20 = 008E			bp	.ds 2
    21 = 0090			bp2	.ds 2
    22
    23 				ztmp
    24 = 0092			ztmp8	.ds 1
    25 = 0093			ztmp9	.ds 1
    26 = 0094			ztmp10	.ds 1
    27 = 0095			ztmp11	.ds 1
    28
    29 = 0096			TMP	.ds 2
    30
    31 = 0098			STACKORIGIN	.ds STACKWIDTH*4
    32
    33 				.print 'ZPFREE: $0000..',fxptr-1,' / ',*,'..',$ff
    33 				ZPFREE: $0000..$007F / $00D8..$00FF
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0082			ax	= eax
    38 = 0082			al	= eax
    39 = 0083			ah	= eax+1
    40
    41 = 008A			cx	= ecx
    42 = 008A			cl	= ecx
    43 = 008B			ch	= ecx+1
    44
    45 = 0086			dx	= edx
    46 = 0086			dl	= edx
    47 = 0087			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0082			FP1MAN0	.ds 1
    52 = 0083			FP1MAN1	.ds 1
    53 = 0084			FP1MAN2	.ds 1
    54 = 0085			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0092			FP1SGN	.ds 1
    59 = 0093			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0086			FP2MAN0	.ds 1
    64 = 0087			FP2MAN1	.ds 1
    65 = 0088			FP2MAN2	.ds 1
    66 = 0089			FP2MAN3	.ds 1
    67
    68 					org ztmp10
    69
    70 = 0094			FP2SGN	.ds 1
    71 = 0095			FP2EXP	.ds 1
    72
    73 					org ecx
    74
    75 = 008A			FPMAN0	.ds 1
    76 = 008B			FPMAN1	.ds 1
    77 = 008C			FPMAN2	.ds 1
    78 = 008D			FPMAN3	.ds 1
    79
    80 					org bp2
    81
    82 = 0090			FPSGN	.ds 1
    83 = 0091			FPEXP	.ds 1
    84
    85 				.local	RESOURCE
    86 					icl 'res6502.asm'
Source: res6502.asm
     1
  1149 					opt l+
    87 = 0000				?EXTDETECT = 0
    88 = 0000				?VBXDETECT = 0
    89
    90 2000				RCDATA 'nyan5x.g10' BITMAP_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: res6502.asm]
     2 = 09A6			len = .filesize('nyan5x.g10')
    28 					org main.BITMAP_ADDRESS
    30 FFFF> 8000-89A5> 33 33 + 	ins 'nyan5x.g10'
    32 					.print '$R RCDATA  ',main.BITMAP_ADDRESS,'..',*-1," 'nyan5x.g10'"
    32 				$R RCDATA  $8000..$89A5 'nyan5x.g10'
Source: nyan_2.a65
    91 				.endl
    92
    93 				; ------------------------------------------------------------
    94
    95 89A6				org CODEORIGIN
    96
    97 2000				STATICDATA
Macro: STATICDATA [Source: nyan_2.a65]
Source: nyan_2.a65
    98
    99 				; ------------------------------------------------------------
   100
   101 2000			RUNLIB
   102 2000				icl 'cpu6502.asm'
Source: cpu6502.asm
  3726 					opt l+
   103
   104 				.print 'RUNLIB: ',RUNLIB,'..',*
   104 				RUNLIB: $2000..$215F
   105
   106 				; ------------------------------------------------------------
   107
   108 215F			START
   109 215F BA				tsx
   110 2160 8E F4 27			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0037			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2844			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 2163 A2 C9			ldx #256-VLEN
   123 2165 A9 00			lda #0
   124 2167 9D 7B 27 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   127 					eif
   128
   129 216D A2 0F			ldx #$0f					; DOS II+/D ParamStr
   130 216F BD 40 03 9D F7 27 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   131
   132 2178 E8				inx						; X = 0 !!!
   133 2179 86 8E			stx bp						; lo BP = 0
   134
   135 217B 8E 08 D2			stx audctl					; reset POKEY
   136 217E A9 03			lda #3
   137 2180 8D 0F D2			sta skctl					; reset POKEY
   138
   139 2183				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: nyan_2.a65]
    15 2183 20 EF 21			jsr MAIN.RMT.@UnitInit
   140
   141 2186			.local	MAIN						; PROCEDURE
   142
   143 2186 4C 07 27			jmp l_0007
   144
   145 				; ------------------------------------------------------------
   146
   147 2189			.local	SYSTEM						; UNIT
   148
   149 2189			.local	MOVE_0021					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   150
   151 				; ------------------------------------------------------------
   152
   153 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   154 				; as Pointer
   155 2189 B5 98 85 82			mva :STACKORIGIN,x COUNT
   156 218D B5 A8 85 83			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   157 2191 CA				dex						; sub bx, 1
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   162 				; as Pointer
   163 2192 B5 98 85 8A			mva :STACKORIGIN,x DEST
   164 2196 B5 A8 85 8B			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   165 219A CA				dex						; sub bx, 1
   166
   167 				; ------------------------------------------------------------
   168
   169 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   170 				; as Pointer
   171 219B B5 98 85 86			mva :STACKORIGIN,x SOURCE
   172 219F B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   173 21A3 CA				dex						; sub bx, 1
   174
   175 				; ---------------------  ASM Block 031  ---------------------
   176
   177 21A4 20 0A 21			jsr @move
   178
   179
   180 				; ------------------------------------------------------------
   181
   182 = 0086			SOURCE	= edx
   183 = 008A			DEST	= ecx
   184 = 0082			COUNT	= eax
   185 21A7			@exit
   186 					.ifdef @new
   187 					@FreeMem #@VarData #@VarDataSize
   188 					eif
   189 21A7 60				rts						; ret
   190 				.endl
   191
   192 21A8			.local	PAUSE_0037					; PROCEDURE | ASSEMBLER | OVERLOAD
   193
   194 				; ---------------------  ASM Block 039  ---------------------
   195
   196 21A8 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   197
   198 21AE			@exit
   199 					.ifdef @new
   200 					@FreeMem #@VarData #@VarDataSize
   201 					eif
   202 21AE 60				rts						; ret
   203 				.endl
   204
   205 21AF			.local	PAUSE_0038					; PROCEDURE | ASSEMBLER | OVERLOAD
   206
   207 				; ------------------------------------------------------------
   208
   209 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   210 				; as Pointer
   211 21AF B5 98 8D 12 28		mva :STACKORIGIN,x N
   212 21B4 B5 A8 8D 13 28		mva :STACKORIGIN+STACKWIDTH,x N+1
   213 21B9 CA				dex						; sub bx, 1
   214
   215 				; ---------------------  ASM Block 040  ---------------------
   216
   217
   218 21BA AD 12 28		loop	lda n
   219 21BD 0D 13 28			ora n+1
   220 21C0 F0 14			beq stop
   221
   222 21C2 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   223
   224 21C8 AD 12 28 D0 03 CE + 	dew n
   225
   226 21D3 4C BA 21			jmp loop
   227 21D6			stop
   228
   229
   230 				; ------------------------------------------------------------
   231
   232 = 2812			N	= DATAORIGIN+$000B
   233
   234 = 2812			@VarData	= N
   235 = 0002			@VarDataSize	= 2
   236
   237 21D6			@exit
   238 					.ifdef @new
   239 					@FreeMem #@VarData #@VarDataSize
   240 					eif
   241 21D6 60				rts						; ret
   242 				.endl
   243
   244 				; ------------------------------------------------------------
   245
   246 = 0648			M_PI_2	= $0648
   247 = 0192			D_PI_2	= $0192
   248 = 0004			D_PI_180	= $0004
   249 = 0000			MGTIA	= $0000
   250 = 0080			MVBXE	= $0080
   251 = 0000			VBXE_XDLADR	= $0000
   252 = 0100			VBXE_BCBADR	= $0100
   253 = 1000			VBXE_MAPADR	= $1000
   254 = 5000			VBXE_OVRADR	= $5000
   255 = B000			VBXE_WINDOW	= $B000
   256 = 0000			IDLI	= $0000
   257 = 0001			IVBL	= $0001
   258 = 00FE			CH_DELCHR	= $00FE
   259 = 009B			CH_ENTER	= $009B
   260 = 001B			CH_ESC	= $001B
   261 = 001C			CH_CURS_UP	= $001C
   262 = 001D			CH_CURS_DOWN	= $001D
   263 = 001E			CH_CURS_LEFT	= $001E
   264 = 001F			CH_CURS_RIGHT	= $001F
   265 = 007F			CH_TAB	= $007F
   266 = 009B			CH_EOL	= $009B
   267 = 007D			CH_CLR	= $007D
   268 = 00FD			CH_BELL	= $00FD
   269 = 007E			CH_DEL	= $007E
   270 = 009C			CH_DELLINE	= $009C
   271 = 009D			CH_INSLINE	= $009D
   272 = 0000			COLOR_BLACK	= $0000
   273 = 000E			COLOR_WHITE	= $000E
   274 = 0032			COLOR_RED	= $0032
   275 = 0096			COLOR_CYAN	= $0096
   276 = 0068			COLOR_VIOLET	= $0068
   277 = 00C4			COLOR_GREEN	= $00C4
   278 = 0074			COLOR_BLUE	= $0074
   279 = 00EE			COLOR_YELLOW	= $00EE
   280 = 0028			COLOR_ORANGE	= $0028
   281 = 00E4			COLOR_BROWN	= $00E4
   282 = 003C			COLOR_LIGHTRED	= $003C
   283 = 0004			COLOR_GRAY1	= $0004
   284 = 0006			COLOR_GRAY2	= $0006
   285 = 000A			COLOR_GRAY3	= $000A
   286 = 00CC			COLOR_LIGHTGREEN	= $00CC
   287 = 007C			COLOR_LIGHTBLUE	= $007C
   288 = 0004			FMOPENREAD	= $0004
   289 = 0008			FMOPENWRITE	= $0008
   290 = 0009			FMOPENAPPEND	= $0009
   291 = 000C			FMOPENREADWRITE	= $000C
   292 = 2807			SCREENWIDTH	= DATAORIGIN+$0000
   293 = 2809			SCREENHEIGHT	= DATAORIGIN+$0002
   294 = 280B			DATESEPARATOR	= DATAORIGIN+$0004
   295 = D014			TVSYSTEM	= $D014
   296 = 02C0			adr.PALETTE	= $02C0
   297 21D7			.var PALETTE	= adr.PALETTE .word
   298 = D012			adr.HPALETTE	= $D012
   299 21D7			.var HPALETTE	= adr.HPALETTE .word
   300 = 280C			FILEMODE	= DATAORIGIN+$0005
   301 = 280D			SCREENMODE	= DATAORIGIN+$0006
   302 = 280E			IORESULT	= DATAORIGIN+$0007
   303 = 280F			EOLN	= DATAORIGIN+$0008
   304 = 2810			RNDSEED	= DATAORIGIN+$0009
   305
   306 = 21D7 C0 02		PALETTE
   306 = 21D9 12 D0		HPALETTE
   306 				.endl							; UNIT SYSTEM
   307
   308 				; ------------------------------------------------------------
   309
   310 21DB			.local	ATARI						; UNIT
   311
   312 				; ------------------------------------------------------------
   313
   314 = 0012			RTCLOK	= $0012
   315 = 004D			ATRACT	= $004D
   316 = 0052			LMARGIN	= $0052
   317 = 0053			RMARGIN	= $0053
   318 = 0054			ROWCRS	= $0054
   319 = 0055			COLCRS	= $0055
   320 = 0057			DINDEX	= $0057
   321 = 0058			SAVMSC	= $0058
   322 = 006A			RAMTOP	= $006A
   323 = 0200			VDSLST	= $0200
   324 = 0230			SDLSTL	= $0230
   325 = 0290			TXTROW	= $0290
   326 = 0291			TXTCOL	= $0291
   327 = 0293			TINDEX	= $0293
   328 = 0294			TXTMSC	= $0294
   329 = 022F			SDMCTL	= $022F
   330 = 026F			GPRIOR	= $026F
   331 = 02F0			CRSINH	= $02F0
   332 = 02F3			CHACT	= $02F3
   333 = 02F4			CHBAS	= $02F4
   334 = 02FC			CH	= $02FC
   335 = 02C0			PCOLR0	= $02C0
   336 = 02C1			PCOLR1	= $02C1
   337 = 02C2			PCOLR2	= $02C2
   338 = 02C3			PCOLR3	= $02C3
   339 = 02C4			COLOR0	= $02C4
   340 = 02C5			COLOR1	= $02C5
   341 = 02C6			COLOR2	= $02C6
   342 = 02C7			COLOR3	= $02C7
   343 = 02C8			COLOR4	= $02C8
   344 = 02C8			COLBAKS	= $02C8
   345 = D000			HPOSP0	= $D000
   346 = D001			HPOSP1	= $D001
   347 = D002			HPOSP2	= $D002
   348 = D003			HPOSP3	= $D003
   349 = D004			HPOSM0	= $D004
   350 = D005			HPOSM1	= $D005
   351 = D006			HPOSM2	= $D006
   352 = D007			HPOSM3	= $D007
   353 = D008			SIZEP0	= $D008
   354 = D009			SIZEP1	= $D009
   355 = D00A			SIZEP2	= $D00A
   356 = D00B			SIZEP3	= $D00B
   357 = D00C			SIZEM	= $D00C
   358 = D00D			GRAFP0	= $D00D
   359 = D00E			GRAFP1	= $D00E
   360 = D00F			GRAFP2	= $D00F
   361 = D010			GRAFP3	= $D010
   362 = D011			GRAFM	= $D011
   363 = D004			P0PF	= $D004
   364 = D014			PAL	= $D014
   365 = D012			COLPM0	= $D012
   366 = D013			COLPM1	= $D013
   367 = D014			COLPM2	= $D014
   368 = D015			COLPM3	= $D015
   369 = D016			COLPF0	= $D016
   370 = D017			COLPF1	= $D017
   371 = D018			COLPF2	= $D018
   372 = D019			COLPF3	= $D019
   373 = D01A			COLBK	= $D01A
   374 = D01B			PRIOR	= $D01B
   375 = D01D			GRACTL	= $D01D
   376 = D01E			HITCLR	= $D01E
   377 = D200			AUDF1	= $D200
   378 = D201			AUDC1	= $D201
   379 = D202			AUDF2	= $D202
   380 = D203			AUDC2	= $D203
   381 = D204			AUDF3	= $D204
   382 = D205			AUDC3	= $D205
   383 = D206			AUDF4	= $D206
   384 = D207			AUDC4	= $D207
   385 = D208			AUDCTL	= $D208
   386 = D20F			SKSTAT	= $D20F
   387 = D301			PORTB	= $D301
   388 = D400			DMACTL	= $D400
   389 = D401			CHACTL	= $D401
   390 = D402			DLISTL	= $D402
   391 = D404			HSCROL	= $D404
   392 = D405			VSCROL	= $D405
   393 = D407			PMBASE	= $D407
   394 = D409			CHBASE	= $D409
   395 = D40A			WSYNC	= $D40A
   396 = D40B			VCOUNT	= $D40B
   397 = D40C			PENH	= $D40C
   398 = D40D			PENV	= $D40D
   399 = D40E			NMIEN	= $D40E
   400
   401 				.endl							; UNIT ATARI
   402
   403 				; ------------------------------------------------------------
   404
   405 21DB			.local	CRT						; UNIT
   406
   407 21DB			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   408
   409 				; ---------------------  ASM Block 051  ---------------------
   410
   411 21DB A0 00			ldy #$00	; false
   412 21DD AD FC 02			lda kbcodes
   413 21E0 C9 FF			cmp #$ff
   414 21E2 F0 01			beq skp
   415 21E4 C8				iny		; true
   416
   417 				;	sty kbcodes
   418
   419 21E5 8C 15 28		skp	sty Result
   420
   421 21E8			@exit
   422
   423 				; ------------------------------------------------------------
   424
   425 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   426 				; as Pointer
   427
   428 21E8 E8				inx						; add bx, 1
   429 21E9 AD 15 28 95 98		mva RESULT :STACKORIGIN,x
   430
   431 					.ifdef @new
   432 					@FreeMem #@VarData #@VarDataSize
   433 					eif
   434
   435 				; ------------------------------------------------------------
   436
   437 = 2815			RESULT	= DATAORIGIN+$000E
   438
   439 = 2815			@VarData	= RESULT
   440 = 0001			@VarDataSize	= 1
   441
   442 21EE 60				rts						; ret
   443 				.endl
   444
   445 				; ------------------------------------------------------------
   446
   447 = 2814			TEXTATTR	= DATAORIGIN+$000D
   448 = D01F			CONSOL	= $D01F
   449 = 0000			CN_START_SELECT_OPTION	= $0000
   450 = 0001			CN_SELECT_OPTION	= $0001
   451 = 0002			CN_START_OPTION	= $0002
   452 = 0003			CN_OPTION	= $0003
   453 = 0004			CN_START_SELECT	= $0004
   454 = 0005			CN_SELECT	= $0005
   455 = 0006			CN_START	= $0006
   456 = 0007			CN_NONE	= $0007
   457 = 0000			BW40	= $0000
   458 = 0001			CO40	= $0001
   459 = 0002			BW80	= $0002
   460 = 0003			CO80	= $0003
   461 = 0007			MONO	= $0007
   462 = 0001			C40	= $0001
   463 = 0003			C80	= $0003
   464 = 0000			BLACK	= $0000
   465 = 0001			BLUE	= $0001
   466 = 0002			GREEN	= $0002
   467 = 0003			CYAN	= $0003
   468 = 0004			RED	= $0004
   469 = 0005			MAGENTA	= $0005
   470 = 0006			BROWN	= $0006
   471 = 0007			LIGHTGRAY	= $0007
   472 = 0008			DARKGRAY	= $0008
   473 = 0009			LIGHTBLUE	= $0009
   474 = 000A			LIGHTGREEN	= $000A
   475 = 000B			LIGHTCYAN	= $000B
   476 = 000C			LIGHTRED	= $000C
   477 = 000D			LIGHTMAGENTA	= $000D
   478 = 000E			YELLOW	= $000E
   479 = 000F			WHITE	= $000F
   480 = 0080			BLINK	= $0080
   481
   482 				.endl							; UNIT CRT
   483
   484 				; ------------------------------------------------------------
   485
   486 21EF			.local	RMT						; UNIT
   487
   488 				; ------------------------------------------------------------
   489 				; ------------------------------------------------------------
   490 21EF			@UnitInit
   491
   492 				; ---------------------  ASM Block 062  ---------------------
   493
   494
   495 21EF A9 00			lda #0
   496 21F1 AE 14 D0			ldx SYSTEM.TVSystem
   497 21F4 E0 0F			cpx #15
   498 21F6 D0 02			sne
   499 21F8 A9 04			lda #4
   500
   501 21FA 8D 16 28			sta ntsc
   502
   503
   504 21FD 60				rts
   505
   506 				; ------------------------------------------------------------
   507
   508 = 2816			NTSC	= DATAORIGIN+$000F
   509
   510 				.endl							; UNIT RMT
   511
   512 				; ------------------------------------------------------------
   513
   514 21FE			.local	GR10PP						; UNIT
   515
   516 21FE			.local	G10DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
   517
   518 				; ---------------------  ASM Block 063  ---------------------
   519
   520
   521 21FE			dli 
   522 21FE 48			    pha 
   523 21FF 8D 0A D4		    sta WSYNC  ;($d40a) 
   524 2202 A9 0D		    lda #13 
   525 = 2203			.def :VS_Upper = *-1
   526 2204 8D 05 D4		    sta VSCROL ;($d405) 
   527 2207 A9 03		    lda #3
   528 = 2208			.def :VS_Lower = *-1
   529 2209 8D 05 D4		    sta VSCROL ;($d405) 
   530 220C 68			    pla 
   531
   532 220D 40				rti						; ret
   533 				.endl
   534
   535 220E			.local	SETVS						; PROCEDURE | ASSEMBLER
   536
   537 				; ------------------------------------------------------------
   538
   539 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   540 				; as Pointer
   541 220E B5 98 8D 2B 28		mva :STACKORIGIN,x LOWER
   542 2213 CA				dex						; sub bx, 1
   543
   544 				; ------------------------------------------------------------
   545
   546 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   547 				; as Pointer
   548 2214 B5 98 8D 2A 28		mva :STACKORIGIN,x UPPER
   549 2219 CA				dex						; sub bx, 1
   550
   551 				; ---------------------  ASM Block 064  ---------------------
   552
   553
   554 221A AD 2A 28		    lda upper
   555 221D 8D 03 22		    sta VS_Upper
   556 2220 AD 2B 28		    lda lower
   557 2223 8D 08 22		    sta VS_Lower
   558
   559
   560 				; ------------------------------------------------------------
   561
   562 = 282A			UPPER	= DATAORIGIN+$0023
   563 = 282B			LOWER	= DATAORIGIN+$0024
   564
   565 = 282A			@VarData	= UPPER
   566 = 0002			@VarDataSize	= 2
   567
   568 2226			@exit
   569 					.ifdef @new
   570 					@FreeMem #@VarData #@VarDataSize
   571 					eif
   572 2226 60				rts						; ret
   573 				.endl
   574
   575 2227			.local	SETPIXELHEIGHT					; PROCEDURE
   576
   577 				; ------------------------------------------------------------
   578
   579 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   580 				; as Pointer
   581 2227 B5 98 8D 2C 28		mva :STACKORIGIN,x LINES
   582 222C CA				dex						; sub bx, 1
   583
   584 				; optimize OK (GR10PP), line = 83
   585
   586 222D A0 01			ldy #1
   587 222F AD 2C 28			lda LINES
   588 2232 C9 01			cmp #$01
   589 2234 F0 02			seq
   590 2236 B0 01			bcs @+
   591 2238 88				dey
   592 2239			@
   593 2239 84 A1			sty :STACKORIGIN+9
   594 223B A0 01			ldy #1
   595 223D AD 2C 28			lda LINES
   596 2240 C9 11			cmp #$11
   597 2242 90 01			bcc @+
   598 2244 88				dey
   599 2245			@
   600 2245 98				tya
   601 2246 25 A1			and :STACKORIGIN+9
   602 2248 F0 16			jeq l_006C
   603
   604 				; optimize FAIL ('SYSTEM.PAUSE_0037', GR10PP), line = 84
   605 224A 20 A8 21			jsr SYSTEM.PAUSE_0037
   606
   607 				; optimize FAIL ('SETVS', GR10PP), line = 85
   608 224D E8				inx
   609 224E A9 11			lda #$11
   610 2250 38 ED 2C 28			sub LINES
   611 2254 95 98			sta :STACKORIGIN,x
   612 2256 E8				inx
   613 2257 AC 2C 28			ldy LINES
   614 225A 88				dey
   615 225B 94 98			sty :STACKORIGIN,x
   616 225D 20 0E 22			jsr SETVS
   617 2260			l_006C
   618
   619 				; ------------------------------------------------------------
   620
   621 = 282C			LINES	= DATAORIGIN+$0025
   622
   623 = 282C			@VarData	= LINES
   624 = 0001			@VarDataSize	= 1
   625
   626 2260			@exit
   627 					.ifdef @new
   628 					@FreeMem #@VarData #@VarDataSize
   629 					eif
   630 2260 60				rts						; ret
   631 				.endl
   632
   633 2261			.local	DLPOKE						; PROCEDURE
   634
   635 				; ------------------------------------------------------------
   636
   637 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   638 				; as Pointer
   639 2261 B5 98 8D 2D 28		mva :STACKORIGIN,x B
   640 2266 CA				dex						; sub bx, 1
   641
   642 				; optimize OK (GR10PP), line = 91
   643
   644 2267 AD 14 24			lda DLIST
   645 226A 18 6D 28 28			add DLPTR
   646 226E A8				tay
   647 226F AD 15 24			lda DLIST+1
   648 2272 6D 29 28			adc DLPTR+1
   649 2275 85 8F			sta :bp+1
   650 2277 AD 2D 28			lda B
   651 227A 91 8E			sta (:bp),y
   652
   653 				; optimize FAIL (0, GR10PP), line = 92
   654 227C EE 28 28 D0 03 EE + 	inw DLPTR
   655
   656 				; ------------------------------------------------------------
   657
   658 = 282D			B	= DATAORIGIN+$0026
   659
   660 = 282D			@VarData	= B
   661 = 0001			@VarDataSize	= 1
   662
   663 2284			@exit
   664 					.ifdef @new
   665 					@FreeMem #@VarData #@VarDataSize
   666 					eif
   667 2284 60				rts						; ret
   668 				.endl
   669
   670 2285			.local	DLPOKEW						; PROCEDURE
   671
   672 				; ------------------------------------------------------------
   673
   674 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   675 				; as Pointer
   676 2285 B5 98 8D 2E 28		mva :STACKORIGIN,x W
   677 228A B5 A8 8D 2F 28		mva :STACKORIGIN+STACKWIDTH,x W+1
   678 228F CA				dex						; sub bx, 1
   679
   680 				; optimize OK (GR10PP), line = 97
   681
   682 2290 AD 14 24			lda DLIST
   683 2293 18 6D 28 28			add DLPTR
   684 2297 A8				tay
   685 2298 AD 15 24			lda DLIST+1
   686 229B 6D 29 28			adc DLPTR+1
   687 229E 85 8F			sta :bp+1
   688 22A0 AD 2E 28			lda W
   689 22A3 91 8E			sta (:bp),y
   690
   691 				; optimize FAIL (0, GR10PP), line = 98
   692 22A5 EE 28 28 D0 03 EE + 	inw DLPTR
   693
   694 				; optimize OK (GR10PP), line = 99
   695
   696 22AD AD 2F 28			lda W+1
   697 22B0 85 A2			sta :STACKORIGIN+10
   698 22B2 AD 14 24			lda DLIST
   699 22B5 18 6D 28 28			add DLPTR
   700 22B9 A8				tay
   701 22BA AD 15 24			lda DLIST+1
   702 22BD 6D 29 28			adc DLPTR+1
   703 22C0 85 8F			sta :bp+1
   704 22C2 A5 A2			lda :STACKORIGIN+10
   705 22C4 91 8E			sta (:bp),y
   706
   707 				; optimize FAIL (0, GR10PP), line = 100
   708 22C6 EE 28 28 D0 03 EE + 	inw DLPTR
   709
   710 				; ------------------------------------------------------------
   711
   712 = 282E			W	= DATAORIGIN+$0027
   713
   714 = 282E			@VarData	= W
   715 = 0002			@VarDataSize	= 2
   716
   717 22CE			@exit
   718 					.ifdef @new
   719 					@FreeMem #@VarData #@VarDataSize
   720 					eif
   721 22CE 60				rts						; ret
   722 				.endl
   723
   724 22CF			.local	BUILDDISPLAYLIST				; PROCEDURE
   725
   726 				; ------------------------------------------------------------
   727
   728 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   729 				; as Pointer
   730 22CF B5 98 8D 35 28		mva :STACKORIGIN,x BLANKS
   731 22D4 CA				dex						; sub bx, 1
   732
   733 				; ------------------------------------------------------------
   734
   735 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   736 				; as Pointer
   737 22D5 B5 98 8D 34 28		mva :STACKORIGIN,x LINES
   738 22DA CA				dex						; sub bx, 1
   739
   740 				; ------------------------------------------------------------
   741
   742 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   743 				; as Pointer
   744 22DB B5 98 8D 32 28		mva :STACKORIGIN,x VRAMADDRESS
   745 22E0 B5 A8 8D 33 28		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   746 22E5 CA				dex						; sub bx, 1
   747
   748 				; ------------------------------------------------------------
   749
   750 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   751 				; as Pointer
   752 22E6 B5 98 8D 30 28		mva :STACKORIGIN,x DLISTADDRESS
   753 22EB B5 A8 8D 31 28		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   754 22F0 CA				dex						; sub bx, 1
   755
   756 				; optimize OK (GR10PP), line = 105
   757
   758 22F1 AD 30 28 8D 14 24		mva DLISTADDRESS DLIST
   759 22F7 AD 31 28 8D 15 24		mva DLISTADDRESS+1 DLIST+1
   760
   761 				; optimize OK (GR10PP), line = 106
   762
   763 22FD A9 00 8D 28 28		mva #$00 DLPTR
   764 2302 8D 29 28			sta DLPTR+1
   765
   766 				; --- WhileProlog
   767 2305			l_00C9
   768
   769 				; optimize OK (GR10PP), line = 107
   770
   771 2305 AD 35 28			lda BLANKS
   772 2308 C9 00			cmp #$00
   773 230A F0 02			seq
   774 230C B0 03			bcs @+
   775 230E 4C 31 23			jmp l_00D8
   776 2311			@
   777
   778 				; optimize OK (GR10PP), line = 108
   779
   780 2311 AD 35 28			lda BLANKS
   781 2314 C9 01			cmp #$01
   782 2316 D0 0B			jne l_00EA
   783
   784 				; optimize FAIL ('DLPOKE', GR10PP), line = 108
   785 2318 E8				inx
   786 2319 A9 F0 95 98			mva #$F0 :STACKORIGIN,x
   787 231D 20 61 22			jsr DLPOKE
   788
   789 2320 4C 2B 23			jmp l_00F6
   790 2323			l_00EA
   791
   792 				; optimize FAIL ('DLPOKE', GR10PP), line = 109
   793 2323 E8				inx
   794 2324 A9 70 95 98			mva #$70 :STACKORIGIN,x
   795 2328 20 61 22			jsr DLPOKE
   796 232B			l_00F6
   797
   798 				; optimize FAIL (0, GR10PP), line = 110
   799 232B CE 35 28			dec BLANKS
   800 232E 4C 05 23			jmp l_00C9
   801 2331			l_00D8
   802
   803 				; optimize FAIL ('DLPOKE', GR10PP), line = 112
   804 2331 E8				inx
   805 2332 A9 6F 95 98			mva #$6F :STACKORIGIN,x
   806 2336 20 61 22			jsr DLPOKE
   807
   808 				; optimize FAIL ('DLPOKEW', GR10PP), line = 113
   809 2339 E8				inx
   810 233A AD 32 28 95 98		mva VRAMADDRESS :STACKORIGIN,x
   811 233F AD 33 28 95 A8		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   812 2344 20 85 22			jsr DLPOKEW
   813
   814 				; optimize FAIL ('DLPOKE', GR10PP), line = 114
   815 2347 E8				inx
   816 2348 A9 8F 95 98			mva #$8F :STACKORIGIN,x
   817 234C 20 61 22			jsr DLPOKE
   818
   819 				; optimize FAIL (0, GR10PP), line = 115
   820 234F CE 34 28			dec LINES
   821
   822 				; --- WhileProlog
   823 2352			l_0109
   824
   825 				; optimize OK (GR10PP), line = 116
   826
   827 2352 AD 34 28			lda LINES
   828 2355 C9 00			cmp #$00
   829 2357 F0 02			seq
   830 2359 B0 03			bcs @+
   831 235B 4C 74 23			jmp l_0118
   832 235E			@
   833
   834 				; optimize FAIL ('DLPOKE', GR10PP), line = 117
   835 235E E8				inx
   836 235F A9 2F 95 98			mva #$2F :STACKORIGIN,x
   837 2363 20 61 22			jsr DLPOKE
   838
   839 				; optimize FAIL ('DLPOKE', GR10PP), line = 118
   840 2366 E8				inx
   841 2367 A9 8F 95 98			mva #$8F :STACKORIGIN,x
   842 236B 20 61 22			jsr DLPOKE
   843
   844 				; optimize FAIL (0, GR10PP), line = 119
   845 236E CE 34 28			dec LINES
   846 2371 4C 52 23			jmp l_0109
   847 2374			l_0118
   848
   849 				; optimize FAIL ('DLPOKE', GR10PP), line = 121
   850 2374 E8				inx
   851 2375 A9 70 95 98			mva #$70 :STACKORIGIN,x
   852 2379 20 61 22			jsr DLPOKE
   853
   854 				; optimize FAIL ('DLPOKE', GR10PP), line = 122
   855 237C E8				inx
   856 237D A9 41 95 98			mva #$41 :STACKORIGIN,x
   857 2381 20 61 22			jsr DLPOKE
   858
   859 				; optimize FAIL ('DLPOKEW', GR10PP), line = 123
   860 2384 E8				inx
   861 2385 AD 30 28 95 98		mva DLISTADDRESS :STACKORIGIN,x
   862 238A AD 31 28 95 A8		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   863 238F 20 85 22			jsr DLPOKEW
   864
   865 				; ------------------------------------------------------------
   866
   867 = 2830			DLISTADDRESS	= DATAORIGIN+$0029
   868 = 2832			VRAMADDRESS	= DATAORIGIN+$002B
   869 = 2834			LINES	= DATAORIGIN+$002D
   870 = 2835			BLANKS	= DATAORIGIN+$002E
   871
   872 = 2830			@VarData	= DLISTADDRESS
   873 = 0006			@VarDataSize	= 6
   874
   875 2392			@exit
   876 					.ifdef @new
   877 					@FreeMem #@VarData #@VarDataSize
   878 					eif
   879 2392 60				rts						; ret
   880 				.endl
   881
   882 2393			.local	GR10INIT					; PROCEDURE
   883
   884 				; ------------------------------------------------------------
   885
   886 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   887 				; as Pointer
   888 2393 B5 98 8D 3C 28		mva :STACKORIGIN,x BLANKS
   889 2398 CA				dex						; sub bx, 1
   890
   891 				; ------------------------------------------------------------
   892
   893 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   894 				; as Pointer
   895 2399 B5 98 8D 3B 28		mva :STACKORIGIN,x PIXELHEIGHT
   896 239E CA				dex						; sub bx, 1
   897
   898 				; ------------------------------------------------------------
   899
   900 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   901 				; as Pointer
   902 239F B5 98 8D 3A 28		mva :STACKORIGIN,x LINES
   903 23A4 CA				dex						; sub bx, 1
   904
   905 				; ------------------------------------------------------------
   906
   907 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   908 				; as Pointer
   909 23A5 B5 98 8D 38 28		mva :STACKORIGIN,x VRAMADDRESS
   910 23AA B5 A8 8D 39 28		mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
   911 23AF CA				dex						; sub bx, 1
   912
   913 				; ------------------------------------------------------------
   914
   915 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   916 				; as Pointer
   917 23B0 B5 98 8D 36 28		mva :STACKORIGIN,x DLISTADDRESS
   918 23B5 B5 A8 8D 37 28		mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
   919 23BA CA				dex						; sub bx, 1
   920
   921 				; optimize FAIL ('BUILDDISPLAYLIST', GR10PP), line = 128
   922 23BB E8				inx
   923 23BC AD 36 28 95 98		mva DLISTADDRESS :STACKORIGIN,x
   924 23C1 AD 37 28 95 A8		mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   925 23C6 E8				inx
   926 23C7 AD 38 28 95 98		mva VRAMADDRESS :STACKORIGIN,x
   927 23CC AD 39 28 95 A8		mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
   928 23D1 E8				inx
   929 23D2 AD 3A 28 95 98		mva LINES :STACKORIGIN,x
   930 23D7 E8				inx
   931 23D8 AD 3C 28 95 98		mva BLANKS :STACKORIGIN,x
   932 23DD 20 CF 22			jsr BUILDDISPLAYLIST
   933
   934 				; optimize FAIL ('SETPIXELHEIGHT', GR10PP), line = 129
   935 23E0 E8				inx
   936 23E1 AD 3B 28 95 98		mva PIXELHEIGHT :STACKORIGIN,x
   937 23E6 20 27 22			jsr SETPIXELHEIGHT
   938
   939 				; optimize OK (GR10PP), line = 130
   940
   941 23E9 AD 36 28 8D 30 02		mva DLISTADDRESS ATARI.SDLSTL
   942 23EF AD 37 28 8D 31 02		mva DLISTADDRESS+1 ATARI.SDLSTL+1
   943
   944 				; optimize OK (GR10PP), line = 131
   945
   946 23F5 AD 38 28 85 58		mva VRAMADDRESS ATARI.SAVMSC
   947 23FA AD 39 28 85 59		mva VRAMADDRESS+1 ATARI.SAVMSC+1
   948
   949 				; optimize OK (GR10PP), line = 132
   950
   951 23FF A9 FE 8D 00 02		mva <G10DLI VDSLST
   952 2404 A9 21 8D 01 02		mva >G10DLI VDSLST+1
   953
   954 				; optimize OK (GR10PP), line = 133
   955
   956 2409 A9 C0 8D 0E D4		mva #$C0 ATARI.NMIEN
   957
   958 				; optimize OK (GR10PP), line = 134
   959
   960 240E A9 81 8D 6F 02		mva #$81 ATARI.GPRIOR
   961
   962 				; ------------------------------------------------------------
   963
   964 = 2836			DLISTADDRESS	= DATAORIGIN+$002F
   965 = 2838			VRAMADDRESS	= DATAORIGIN+$0031
   966 = 283A			LINES	= DATAORIGIN+$0033
   967 = 283B			PIXELHEIGHT	= DATAORIGIN+$0034
   968 = 283C			BLANKS	= DATAORIGIN+$0035
   969
   970 = 2836			@VarData	= DLISTADDRESS
   971 = 0007			@VarDataSize	= 7
   972
   973 2413			@exit
   974 					.ifdef @new
   975 					@FreeMem #@VarData #@VarDataSize
   976 					eif
   977 2413 60				rts						; ret
   978 				.endl
   979
   980 				; ------------------------------------------------------------
   981
   982 = 0070			DL_BLANK8	= $0070
   983 = 0080			DL_DLI	= $0080
   984 = 0040			DL_LMS	= $0040
   985 = 0020			DL_VSCROLL	= $0020
   986 = 000F			DL_MODE_320X192G2	= $000F
   987 = 0041			DL_JVB	= $0041
   988 = 2827			adr.DLIST	= DATAORIGIN+$0020
   989 2414			.var DLIST	= adr.DLIST .word
   990 = 2828			DLPTR	= DATAORIGIN+$0021
   991
   992 = 2414 27 28		DLIST
   992 				.endl							; UNIT GR10PP
   993
   994 				; ------------------------------------------------------------
   995
   996 2416			.local	TYPES						; UNIT
   997
   998 				; ------------------------------------------------------------
   999
  1000 				.endl							; UNIT TYPES
  1001
  1002 				; ------------------------------------------------------------
  1003
  1004 2416			.local	GRAPH						; UNIT
  1005
  1006 2416			.local	INITGRAPH_016F					; PROCEDURE | OVERLOAD
  1007
  1008 				; ------------------------------------------------------------
  1009
  1010 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1011 				; as Pointer
  1012 2416 B5 98 8D 5A 28		mva :STACKORIGIN,x MODE
  1013 241B CA				dex						; sub bx, 1
  1014
  1015 				; optimize OK (GRAPH), line = 73
  1016
  1017 241C A9 00 8D 45 28		mva #$00 GRAPHRESULT
  1018
  1019 				; optimize OK (GRAPH), line = 75
  1020
  1021 2421 AD 5A 28 8D 0D 28		mva MODE SYSTEM.SCREENMODE
  1022
  1023 				; ---------------------  ASM Block 065  ---------------------
  1024
  1025
  1026 2427 8A 48			txa:pha
  1027
  1028 2429 A9 2C 8D CC 20		mva #$2c @putchar.vbxe
  1029
  1030 242E AD 5A 28			lda mode
  1031 2431 29 0F			and #$0f
  1032 2433 A8				tay
  1033
  1034 2434 A2 60			ldx #$60	; 6*16
  1035 2436 AD 5A 28			lda mode	; %00010000 with text window
  1036 2439 29 10			and #$10
  1037 243B 49 10			eor #$10
  1038 243D 09 02			ora #2		; read
  1039
  1040 					.nowarn @graphics
  1040 243F 20 9D 20		 JSR @GRAPHICS
  1041 					
  1042 					
  1043 = EE6D			tlshc	equ $ee6d
  1044
  1045 2442 A6 57			ldx dindex
  1046 2444 BC 6D EE			ldy tlshc,x
  1047 2447 A9 05			lda #5
  1048 2449 0A			shift	asl @
  1049 244A 88				dey
  1050 244B D0 FC			bne shift
  1051
  1052 244D 8D 59 28			sta SCANLINE_WIDTH
  1053 					
  1054
  1055 				; Fox/TQA
  1056
  1057 = 0057			dindex	equ $57
  1058 = EE7D			tmccn	equ $ee7d
  1059 = EE8D			tmrcn	equ $ee8d
  1060
  1061 2450 A6 57			ldx dindex
  1062 2452 BD 7D EE			lda tmccn,x
  1063 2455 BC 8D EE			ldy tmrcn,x
  1064 2458 A2 00			ldx #0
  1065 245A C9 40			cmp #<320
  1066 245C D0 01 E8			sne:inx
  1067 				    
  1068 				; X:A = horizontal resolution
  1069 				; Y = vertical resolution
  1070
  1071 245F 8D 07 28			sta MAIN.SYSTEM.ScreenWidth
  1072 2462 8E 08 28			stx MAIN.SYSTEM.ScreenWidth+1
  1073 					
  1074 2465 38 E9 01			sub #1
  1075 2468 8D 3F 28			sta WIN_RIGHT
  1076 246B 8A				txa
  1077 246C E9 00			sbc #0
  1078 246E 8D 40 28			sta WIN_RIGHT+1
  1079 					
  1080 2471 8C 09 28			sty MAIN.SYSTEM.ScreenHeight
  1081 2474 A9 00			lda #0
  1082 2476 8D 0A 28			sta MAIN.SYSTEM.ScreenHeight+1
  1083 					
  1084 2479 8D 3D 28			sta WIN_LEFT
  1085 247C 8D 3E 28			sta WIN_LEFT+1
  1086 247F 8D 41 28			sta WIN_TOP
  1087 2482 8D 42 28			sta WIN_TOP+1
  1088
  1089 2485 8D 44 28			sta WIN_BOTTOM+1	
  1090 2488 88				dey
  1091 2489 8C 43 28			sty WIN_BOTTOM
  1092
  1093 248C 68 AA			pla:tax
  1094
  1095
  1096 				; ------------------------------------------------------------
  1097
  1098 = 285A			MODE	= DATAORIGIN+$0053
  1099
  1100 = 285A			@VarData	= MODE
  1101 = 0001			@VarDataSize	= 1
  1102
  1103 248E			@exit
  1104 					.ifdef @new
  1105 					@FreeMem #@VarData #@VarDataSize
  1106 					eif
  1107 248E 60				rts						; ret
  1108 				.endl
  1109
  1110 248F			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
  1111
  1112 				; ------------------------------------------------------------
  1113
  1114 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1115 				; as Pointer
  1116 248F B5 98 8D 5B 28		mva :STACKORIGIN,x COLOR
  1117 2494 CA				dex						; sub bx, 1
  1118
  1119 				; ---------------------  ASM Block 067  ---------------------
  1120
  1121 2495 AD 5B 28 8D 96 20		mva color @COMMAND.colscr
  1122 249B 8D 46 28			sta GetColor
  1123
  1124
  1125 				; ------------------------------------------------------------
  1126
  1127 = 285B			COLOR	= DATAORIGIN+$0054
  1128
  1129 = 285B			@VarData	= COLOR
  1130 = 0001			@VarDataSize	= 1
  1131
  1132 249E			@exit
  1133 					.ifdef @new
  1134 					@FreeMem #@VarData #@VarDataSize
  1135 					eif
  1136 249E 60				rts						; ret
  1137 				.endl
  1138
  1139 249F			.local	MOVETO						; PROCEDURE | ASSEMBLER
  1140
  1141 				; ------------------------------------------------------------
  1142
  1143 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1144 				; as Pointer
  1145 249F B5 98 8D 5E 28		mva :STACKORIGIN,x Y
  1146 24A4 B5 A8 8D 5F 28		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1147 24A9 CA				dex						; sub bx, 1
  1148
  1149 				; ------------------------------------------------------------
  1150
  1151 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1152 				; as Pointer
  1153 24AA B5 98 8D 5C 28		mva :STACKORIGIN,x X
  1154 24AF B5 A8 8D 5D 28		mva :STACKORIGIN+STACKWIDTH,x X+1
  1155 24B4 CA				dex						; sub bx, 1
  1156
  1157 				; ---------------------  ASM Block 071  ---------------------
  1158
  1159 24B5 AD 5F 28			lda y+1
  1160 24B8 10 08			bpl _0
  1161
  1162 24BA A9 00			lda #0
  1163 24BC 8D 5E 28			sta y
  1164 24BF 8D 5F 28			sta y+1
  1165 24C2			_0
  1166 24C2 AD 5D 28			lda x+1
  1167 24C5 10 08			bpl _1
  1168
  1169 24C7 A9 00			lda #0
  1170 24C9 8D 5C 28			sta x
  1171 24CC 8D 5D 28			sta x+1
  1172 24CF			_1
  1173 24CF AD 5F 28 CD 0A 28 + 	cpw y main.system.ScreenHeight
  1174 24DD 90 11			bcc _2
  1175
  1176 24DF 38 AD 09 28 E9 01 + 	sbw main.system.ScreenHeight #1 y
  1177 24F0			_2
  1178 24F0 AD 5D 28 CD 08 28 + 	cpw x main.system.ScreenWidth
  1179 24FE 90 11			bcc _3
  1180
  1181 2500 38 AD 07 28 E9 01 + 	sbw main.system.ScreenWidth #1 x
  1182 2511			_3
  1183 2511 AD 5C 28 8D 53 28 + 	mwa x CurrentX
  1184 251D AD 5E 28 8D 55 28 + 	mwa y CurrentY
  1185
  1186
  1187 				; ------------------------------------------------------------
  1188
  1189 = 285C			X	= DATAORIGIN+$0055
  1190 = 285E			Y	= DATAORIGIN+$0057
  1191
  1192 = 285C			@VarData	= X
  1193 = 0004			@VarDataSize	= 4
  1194
  1195 2529			@exit
  1196 					.ifdef @new
  1197 					@FreeMem #@VarData #@VarDataSize
  1198 					eif
  1199 2529 60				rts						; ret
  1200 				.endl
  1201
  1202 252A			.local	LINETO						; PROCEDURE | ASSEMBLER
  1203
  1204 				; ------------------------------------------------------------
  1205
  1206 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1207 				; as Pointer
  1208 252A B5 98 8D 62 28		mva :STACKORIGIN,x Y
  1209 252F B5 A8 8D 63 28		mva :STACKORIGIN+STACKWIDTH,x Y+1
  1210 2534 CA				dex						; sub bx, 1
  1211
  1212 				; ------------------------------------------------------------
  1213
  1214 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1215 				; as Pointer
  1216 2535 B5 98 8D 60 28		mva :STACKORIGIN,x X
  1217 253A B5 A8 8D 61 28		mva :STACKORIGIN+STACKWIDTH,x X+1
  1218 253F CA				dex						; sub bx, 1
  1219
  1220 				; ---------------------  ASM Block 072  ---------------------
  1221
  1222 2540 AD 63 28			lda y+1
  1223 2543 10 08			bpl _0
  1224
  1225 2545 A9 00			lda #0
  1226 2547 8D 62 28			sta y
  1227 254A 8D 63 28			sta y+1
  1228 254D			_0
  1229 254D AD 61 28			lda x+1
  1230 2550 10 08			bpl _1
  1231
  1232 2552 A9 00			lda #0
  1233 2554 8D 60 28			sta x
  1234 2557 8D 61 28			sta x+1
  1235 255A			_1
  1236 255A AD 63 28 CD 0A 28 + 	cpw y main.system.ScreenHeight
  1237 2568 90 11			bcc _2
  1238
  1239 256A 38 AD 09 28 E9 01 + 	sbw main.system.ScreenHeight #1 y
  1240 257B			_2
  1241 257B AD 61 28 CD 08 28 + 	cpw x main.system.ScreenWidth
  1242 2589 90 11			bcc _3
  1243
  1244 258B 38 AD 07 28 E9 01 + 	sbw main.system.ScreenWidth #1 x
  1245 259C			_3
  1246 259C 8A 48			txa:pha
  1247
  1248 259E AD 53 28 85 55 AD + 	mwa CurrentX colcrs
  1249 25A8 AD 55 28 85 54		mva CurrentY rowcrs
  1250
  1251 25AD A9 09			lda #@IDput
  1252
  1253 25AF 20 90 20			jsr @COMMAND
  1254
  1255 25B2 AD 60 28			lda x
  1256 25B5 85 55			sta colcrs
  1257 25B7 8D 53 28			sta CurrentX
  1258 25BA AD 61 28			lda x+1
  1259 25BD 85 56			sta colcrs+1
  1260 25BF 8D 54 28			sta CurrentX+1
  1261
  1262 25C2 AD 62 28 85 54		mva y rowcrs
  1263 25C7 8D 55 28			sta CurrentY
  1264 25CA AD 63 28			lda y+1
  1265 25CD 8D 56 28			sta CurrentY+1
  1266
  1267 25D0 A9 11			lda #@IDdraw
  1268
  1269 25D2 20 90 20			jsr @COMMAND
  1270
  1271 25D5 68 AA			pla:tax
  1272
  1273
  1274 				; ------------------------------------------------------------
  1275
  1276 = 2860			X	= DATAORIGIN+$0059
  1277 = 2862			Y	= DATAORIGIN+$005B
  1278
  1279 = 2860			@VarData	= X
  1280 = 0004			@VarDataSize	= 4
  1281
  1282 25D7			@exit
  1283 					.ifdef @new
  1284 					@FreeMem #@VarData #@VarDataSize
  1285 					eif
  1286 25D7 60				rts						; ret
  1287 				.endl
  1288
  1289 25D8			.local	LINE						; PROCEDURE
  1290
  1291 				; ------------------------------------------------------------
  1292
  1293 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1294 				; as Pointer
  1295 25D8 B5 98 8D 6A 28		mva :STACKORIGIN,x Y2
  1296 25DD B5 A8 8D 6B 28		mva :STACKORIGIN+STACKWIDTH,x Y2+1
  1297 25E2 CA				dex						; sub bx, 1
  1298
  1299 				; ------------------------------------------------------------
  1300
  1301 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1302 				; as Pointer
  1303 25E3 B5 98 8D 68 28		mva :STACKORIGIN,x X2
  1304 25E8 B5 A8 8D 69 28		mva :STACKORIGIN+STACKWIDTH,x X2+1
  1305 25ED CA				dex						; sub bx, 1
  1306
  1307 				; ------------------------------------------------------------
  1308
  1309 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1310 				; as Pointer
  1311 25EE B5 98 8D 66 28		mva :STACKORIGIN,x Y1
  1312 25F3 B5 A8 8D 67 28		mva :STACKORIGIN+STACKWIDTH,x Y1+1
  1313 25F8 CA				dex						; sub bx, 1
  1314
  1315 				; ------------------------------------------------------------
  1316
  1317 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1318 				; as Pointer
  1319 25F9 B5 98 8D 64 28		mva :STACKORIGIN,x X1
  1320 25FE B5 A8 8D 65 28		mva :STACKORIGIN+STACKWIDTH,x X1+1
  1321 2603 CA				dex						; sub bx, 1
  1322
  1323 				; optimize OK (GRAPH), line = 339
  1324
  1325 2604 AD 53 28 8D 6C 28		mva CURRENTX X
  1326 260A AD 54 28 8D 6D 28		mva CURRENTX+1 X+1
  1327
  1328 				; optimize OK (GRAPH), line = 340
  1329
  1330 2610 AD 55 28 8D 6E 28		mva CURRENTY Y
  1331 2616 AD 56 28 8D 6F 28		mva CURRENTY+1 Y+1
  1332
  1333 				; optimize FAIL ('MOVETO', GRAPH), line = 342
  1334 261C E8				inx
  1335 261D AD 64 28 95 98		mva X1 :STACKORIGIN,x
  1336 2622 AD 65 28 95 A8		mva X1+1 :STACKORIGIN+STACKWIDTH,x
  1337 2627 E8				inx
  1338 2628 AD 66 28 95 98		mva Y1 :STACKORIGIN,x
  1339 262D AD 67 28 95 A8		mva Y1+1 :STACKORIGIN+STACKWIDTH,x
  1340 2632 20 9F 24			jsr MOVETO
  1341
  1342 				; optimize FAIL ('LINETO', GRAPH), line = 343
  1343 2635 E8				inx
  1344 2636 AD 68 28 95 98		mva X2 :STACKORIGIN,x
  1345 263B AD 69 28 95 A8		mva X2+1 :STACKORIGIN+STACKWIDTH,x
  1346 2640 E8				inx
  1347 2641 AD 6A 28 95 98		mva Y2 :STACKORIGIN,x
  1348 2646 AD 6B 28 95 A8		mva Y2+1 :STACKORIGIN+STACKWIDTH,x
  1349 264B 20 2A 25			jsr LINETO
  1350
  1351 				; optimize OK (GRAPH), line = 345
  1352
  1353 264E AD 6C 28 8D 53 28		mva X CURRENTX
  1354 2654 AD 6D 28 8D 54 28		mva X+1 CURRENTX+1
  1355
  1356 				; optimize OK (GRAPH), line = 346
  1357
  1358 265A AD 6E 28 8D 55 28		mva Y CURRENTY
  1359 2660 AD 6F 28 8D 56 28		mva Y+1 CURRENTY+1
  1360
  1361 				; ------------------------------------------------------------
  1362
  1363 = 2864			X1	= DATAORIGIN+$005D
  1364 = 2866			Y1	= DATAORIGIN+$005F
  1365 = 2868			X2	= DATAORIGIN+$0061
  1366 = 286A			Y2	= DATAORIGIN+$0063
  1367 = 286C			X	= DATAORIGIN+$0065
  1368 = 286E			Y	= DATAORIGIN+$0067
  1369
  1370 = 2864			@VarData	= X1
  1371 = 000C			@VarDataSize	= 12
  1372
  1373 2666			@exit
  1374 					.ifdef @new
  1375 					@FreeMem #@VarData #@VarDataSize
  1376 					eif
  1377 2666 60				rts						; ret
  1378 				.endl
  1379
  1380 				; ------------------------------------------------------------
  1381
  1382 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
  1383 = 0000			DETECT	= $0000
  1384 = 0001			CGA	= $0001
  1385 = 0002			MCGA	= $0002
  1386 = 0003			EGA	= $0003
  1387 = 0004			EGA64	= $0004
  1388 = 0005			EGAMONO	= $0005
  1389 = 0006			LOWRES	= $0006
  1390 = 0007			HERCMONO	= $0007
  1391 = 0009			VGA	= $0009
  1392 = 000A			VESA	= $000A
  1393 = 000B			D1BIT	= $000B
  1394 = 000C			D2BIT	= $000C
  1395 = 000D			D4BIT	= $000D
  1396 = 000E			D6BIT	= $000E
  1397 = 000F			D8BIT	= $000F
  1398 = 0010			D12BIT	= $0010
  1399 = 0018			M640X400	= $0018
  1400 = 0018			M640X480	= $0018
  1401 = 0000			GROK	= $0000
  1402 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
  1403 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
  1404 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
  1405 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
  1406 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
  1407 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
  1408 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
  1409 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
  1410 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
  1411 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
  1412 = FFFFFFF5		GRERROR	= $FFFFFFF5
  1413 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
  1414 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
  1415 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
  1416 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
  1417 = 0000			CGAC0	= $0000
  1418 = 0001			CGAC1	= $0001
  1419 = 0002			CGAC2	= $0002
  1420 = 0003			CGAC3	= $0003
  1421 = 0004			CGAHI	= $0004
  1422 = 0000			MCGAC0	= $0000
  1423 = 0001			MCGAC1	= $0001
  1424 = 0002			MCGAC2	= $0002
  1425 = 0003			MCGAC3	= $0003
  1426 = 0004			MCGAMED	= $0004
  1427 = 0005			MCGAHI	= $0005
  1428 = 0000			EGALO	= $0000
  1429 = 0001			EGAHI	= $0001
  1430 = 0000			EGA64LO	= $0000
  1431 = 0001			EGA64HI	= $0001
  1432 = 0003			EGAMONOHI	= $0003
  1433 = 000A			VGALO	= $000A
  1434 = 001F			VGAMED	= $001F
  1435 = 0018			VGAHI	= $0018
  1436 = 283D			WIN_LEFT	= DATAORIGIN+$0036
  1437 = 283F			WIN_RIGHT	= DATAORIGIN+$0038
  1438 = 2841			WIN_TOP	= DATAORIGIN+$003A
  1439 = 2843			WIN_BOTTOM	= DATAORIGIN+$003C
  1440 = 2845			GRAPHRESULT	= DATAORIGIN+$003E
  1441 = 2846			GETCOLOR	= DATAORIGIN+$003F
  1442 = 2847			adr.LASTARCCOORDS	= DATAORIGIN+$0040
  1443 2667			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1444 = 2847			LASTARCCOORDS.X	= DATAORIGIN+$0040
  1445 = 2849			LASTARCCOORDS.Y	= DATAORIGIN+$0042
  1446 = 284B			LASTARCCOORDS.XSTART	= DATAORIGIN+$0044
  1447 = 284D			LASTARCCOORDS.YSTART	= DATAORIGIN+$0046
  1448 = 284F			LASTARCCOORDS.XEND	= DATAORIGIN+$0048
  1449 = 2851			LASTARCCOORDS.YEND	= DATAORIGIN+$004A
  1450 = 2853			CURRENTX	= DATAORIGIN+$004C
  1451 = 2855			CURRENTY	= DATAORIGIN+$004E
  1452 = 2857			VIDEORAM	= DATAORIGIN+$0050
  1453 = 2859			SCANLINE_WIDTH	= DATAORIGIN+$0052
  1454
  1455 = 2667 47 28		LASTARCCOORDS
  1455 				.endl							; UNIT GRAPH
  1456
  1457 2669			.local	PUTTILE						; PROCEDURE
  1458
  1459 				; ------------------------------------------------------------
  1460
  1461 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1462 				; as Pointer
  1463 2669 B5 98 8D 74 28		mva :STACKORIGIN,x TILE
  1464 266E B5 A8 8D 75 28		mva :STACKORIGIN+STACKWIDTH,x TILE+1
  1465 2673 CA				dex						; sub bx, 1
  1466
  1467 				; ------------------------------------------------------------
  1468
  1469 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1470 				; as Pointer
  1471 2674 B5 98 8D 73 28		mva :STACKORIGIN,x H
  1472 2679 CA				dex						; sub bx, 1
  1473
  1474 				; ------------------------------------------------------------
  1475
  1476 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1477 				; as Pointer
  1478 267A B5 98 8D 72 28		mva :STACKORIGIN,x W
  1479 267F CA				dex						; sub bx, 1
  1480
  1481 				; ------------------------------------------------------------
  1482
  1483 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1484 				; as Pointer
  1485 2680 B5 98 8D 71 28		mva :STACKORIGIN,x Y
  1486 2685 CA				dex						; sub bx, 1
  1487
  1488 				; ------------------------------------------------------------
  1489
  1490 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1491 				; as Pointer
  1492 2686 B5 98 8D 70 28		mva :STACKORIGIN,x X
  1493 268B CA				dex						; sub bx, 1
  1494
  1495 				; optimize OK (nyan_2.pas), line = 15
  1496
  1497 268C A9 28			lda #$28
  1498 268E 85 8A			sta :ecx
  1499 2690 AD 71 28			lda Y
  1500 2693 85 82			sta :eax
  1501 					.ifdef fmulinit
  1502 					fmulu_8
  1503 					els
  1504 2695 20 45 20			imulCL
  1505 					eif
  1506 2698 A9 60			lda #$60
  1507 269A 18 65 83			add :eax+1
  1508 269D 8D 77 28			sta VOFFSET+1
  1509 26A0 A5 82			lda :eax
  1510 26A2 18 6D 70 28			add X
  1511 26A6 8D 76 28			sta VOFFSET
  1512 26A9 90 03			scc
  1513 26AB EE 77 28			inc VOFFSET+1
  1514 				; --- For
  1515
  1516 				; optimize OK (nyan_2.pas), line = 16
  1517
  1518 26AE A9 00 8D 78 28		mva #$00 B
  1519
  1520 				; optimize OK (nyan_2.pas), line = 16
  1521
  1522 26B3 AC 73 28			ldy H
  1523 26B6 88				dey
  1524 26B7 8C 79 28			sty @FORTMP_0228
  1525 				; --- To
  1526 26BA			l_022B
  1527
  1528 				; --- ForToDoCondition
  1529
  1530 				; optimize OK (nyan_2.pas), line = 16
  1531
  1532 26BA AD 78 28			lda B
  1533 26BD CD 79 28			cmp @FORTMP_0228
  1534 26C0 90 02			scc
  1535 26C2 D0 42			jne l_0239
  1536
  1537 				; optimize OK (nyan_2.pas), line = 17
  1538
  1539 26C4 AD 74 28			lda TILE
  1540 26C7 85 86			sta :edx
  1541 26C9 AD 75 28			lda TILE+1
  1542 26CC 85 87			sta :edx+1
  1543 26CE AD 76 28			lda VOFFSET
  1544 26D1 85 8A			sta :ecx
  1545 26D3 AD 77 28			lda VOFFSET+1
  1546 26D6 85 8B			sta :ecx+1
  1547 26D8 AD 72 28			lda W
  1548 26DB 85 82			sta :eax
  1549 26DD A9 00			lda #$00
  1550 26DF 85 83			sta :eax+1
  1551 26E1 20 0A 21			jsr @move
  1552
  1553 				; optimize OK (nyan_2.pas), line = 18
  1554
  1555 26E4 AD 74 28			lda TILE
  1556 26E7 18 6D 72 28			add W
  1557 26EB 8D 74 28			sta TILE
  1558 26EE 90 03			scc
  1559 26F0 EE 75 28			inc TILE+1
  1560
  1561 				; optimize OK (nyan_2.pas), line = 19
  1562
  1563 26F3 AD 76 28			lda VOFFSET
  1564 26F6 18 69 28			add #$28
  1565 26F9 8D 76 28			sta VOFFSET
  1566 26FC 90 03			scc
  1567 26FE EE 77 28			inc VOFFSET+1
  1568
  1569 				; --- ForToDoEpilog
  1570 2701 EE 78 28			inc B						; inc ptr byte [CounterAddress]
  1571
  1572 2704 D0 B4			jne l_022B
  1573
  1574 2706			l_0239
  1575
  1576 				; ------------------------------------------------------------
  1577
  1578 = 2870			X	= DATAORIGIN+$0069
  1579 = 2871			Y	= DATAORIGIN+$006A
  1580 = 2872			W	= DATAORIGIN+$006B
  1581 = 2873			H	= DATAORIGIN+$006C
  1582 = 2874			TILE	= DATAORIGIN+$006D
  1583 = 2876			VOFFSET	= DATAORIGIN+$006F
  1584 = 2878			B	= DATAORIGIN+$0071
  1585 = 2879			@FORTMP_0228	= DATAORIGIN+$0072
  1586
  1587 = 2870			@VarData	= X
  1588 = 000A			@VarDataSize	= 10
  1589
  1590 2706			@exit
  1591 					.ifdef @new
  1592 					@FreeMem #@VarData #@VarDataSize
  1593 					eif
  1594 2706 60				rts						; ret
  1595 				.endl
  1596 2707			l_0007
  1597
  1598 				; optimize FAIL ('GRAPH.INITGRAPH_016F', nyan_2.pas), line = 26
  1599 2707 E8				inx
  1600 2708 A9 0A 95 98			mva #$0A :STACKORIGIN,x
  1601 270C 20 16 24			jsr GRAPH.INITGRAPH_016F
  1602
  1603 				; optimize FAIL ('GR10PP.GR10INIT', nyan_2.pas), line = 27
  1604 270F E8				inx
  1605 2710 A9 00 95 98			mva #$00 :STACKORIGIN,x
  1606 2714 A9 50 95 A8			mva #$50 :STACKORIGIN+STACKWIDTH,x
  1607 2718 E8				inx
  1608 2719 A9 00 95 98			mva #$00 :STACKORIGIN,x
  1609 271D A9 60 95 A8			mva #$60 :STACKORIGIN+STACKWIDTH,x
  1610 2721 E8				inx
  1611 2722 A9 30 95 98			mva #$30 :STACKORIGIN,x
  1612 2726 E8				inx
  1613 2727 A9 04 95 98			mva #$04 :STACKORIGIN,x
  1614 272B E8				inx
  1615 272C A9 02 95 98			mva #$02 :STACKORIGIN,x
  1616 2730 20 93 23			jsr GR10PP.GR10INIT
  1617
  1618 				; optimize FAIL ('GRAPH.SETCOLOR', nyan_2.pas), line = 31
  1619 2733 E8				inx
  1620 2734 A9 06 95 98			mva #$06 :STACKORIGIN,x
  1621 2738 20 8F 24			jsr GRAPH.SETCOLOR
  1622
  1623 				; optimize FAIL ('GRAPH.LINE', nyan_2.pas), line = 32
  1624 273B E8				inx
  1625 273C A9 00 95 98			mva #$00 :STACKORIGIN,x
  1626 2740 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1627 2742 E8				inx
  1628 2743 A9 00 95 98			mva #$00 :STACKORIGIN,x
  1629 2747 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1630 2749 E8				inx
  1631 274A A9 4F 95 98			mva #$4F :STACKORIGIN,x
  1632 274E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1633 2752 E8				inx
  1634 2753 A9 77 95 98			mva #$77 :STACKORIGIN,x
  1635 2757 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1636 275B 20 D8 25			jsr GRAPH.LINE
  1637
  1638 				; optimize OK (nyan_2.pas), line = 34
  1639
  1640 275E A9 00 8D C0 02		mva #$00 ATARI.PCOLR0
  1641
  1642 				; optimize OK (nyan_2.pas), line = 35
  1643
  1644 2763 A9 24 8D C3 02		mva #$24 ATARI.PCOLR3
  1645
  1646 				; optimize OK (nyan_2.pas), line = 36
  1647
  1648 2768 A9 18 8D C1 02		mva #$18 ATARI.PCOLR1
  1649
  1650 				; optimize OK (nyan_2.pas), line = 37
  1651
  1652 276D A9 1C 8D C6 02		mva #$1C ATARI.COLOR2
  1653
  1654 				; optimize OK (nyan_2.pas), line = 38
  1655
  1656 2772 A9 BA 8D C2 02		mva #$BA ATARI.PCOLR2
  1657
  1658 				; optimize OK (nyan_2.pas), line = 39
  1659
  1660 2777 A9 74 8D C5 02		mva #$74 ATARI.COLOR1
  1661
  1662 				; optimize OK (nyan_2.pas), line = 40
  1663
  1664 277C A9 54 8D C4 02		mva #$54 ATARI.COLOR0
  1665
  1666 				; optimize OK (nyan_2.pas), line = 41
  1667
  1668 2781 A9 3C 8D C8 02		mva #$3C ATARI.COLOR4
  1669
  1670 				; optimize OK (nyan_2.pas), line = 42
  1671
  1672 2786 A9 0A 8D C7 02		mva #$0A ATARI.COLOR3
  1673
  1674 				; --- RepeatUntilProlog
  1675 278B			l_027F
  1676 				; --- For
  1677
  1678 				; optimize OK (nyan_2.pas), line = 45
  1679
  1680 278B A9 00 8D 7A 28		mva #$00 FRAME
  1681
  1682 				; optimize OK (nyan_2.pas), line = 45
  1683
  1684 				; --- To
  1685 2790			l_0288
  1686
  1687 				; --- ForToDoCondition
  1688
  1689 				; optimize OK (nyan_2.pas), line = 45
  1690
  1691 2790 AD 7A 28			lda FRAME
  1692 2793 C9 04			cmp #$04
  1693 2795 90 02			scc
  1694 2797 D0 52			jne l_0296
  1695
  1696 				; optimize FAIL ('SYSTEM.PAUSE_0038', nyan_2.pas), line = 46
  1697 2799 E8				inx
  1698 279A A9 05 95 98			mva #$05 :STACKORIGIN,x
  1699 279E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1700 27A2 20 AF 21			jsr SYSTEM.PAUSE_0038
  1701
  1702 				; optimize FAIL ('PUTTILE', nyan_2.pas), line = 47
  1703 27A5 E8				inx
  1704 27A6 A9 07 95 98			mva #$07 :STACKORIGIN,x
  1705 27AA E8				inx
  1706 27AB A9 0C 95 98			mva #$0C :STACKORIGIN,x
  1707 27AF E8				inx
  1708 27B0 A9 1A 95 98			mva #$1A :STACKORIGIN,x
  1709 27B4 E8				inx
  1710 27B5 A9 13 95 98			mva #$13 :STACKORIGIN,x
  1711 27B9 E8				inx
  1712 27BA A9 00 95 98			mva #$00 :STACKORIGIN,x
  1713 27BE A9 80 95 A8			mva #$80 :STACKORIGIN+STACKWIDTH,x
  1714 27C2 E8				inx
  1715 27C3 AD 7A 28 95 98		mva FRAME :STACKORIGIN,x
  1716 27C8 E8				inx
  1717 27C9 A9 EE 95 98			mva #$EE :STACKORIGIN,x
  1718 27CD A9 01 95 A8			mva #$01 :STACKORIGIN+STACKWIDTH,x
  1719 27D1 A9 00 95 A7			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  1720 27D5 20 79 20			jsr imulWORD
  1721 27D8 20 00 20			jsr movaBX_EAX
  1722 27DB CA				dex
  1723 27DC 20 30 20			jsr @expandToCARD1.WORD
  1724 27DF 20 11 20			jsr addAX_CX
  1725 27E2 CA				dex
  1726 27E3 20 69 26			jsr PUTTILE
  1727
  1728 				; --- ForToDoEpilog
  1729 27E6 EE 7A 28			inc FRAME					; inc ptr byte [CounterAddress]
  1730
  1731 27E9 D0 A5			jne l_0288
  1732
  1733 27EB			l_0296
  1734
  1735 				; optimize FAIL ('CRT.KEYPRESSED', nyan_2.pas), line = 49
  1736 27EB 20 DB 21			jsr CRT.KEYPRESSED
  1737 27EE CA				dex
  1738 27EF B5 99			lda :STACKORIGIN+1,x
  1739 27F1 F0 98			jeq l_027F
  1740
  1741 				; ------------------------------------------------------------
  1742
  1743 = 5000			DISPLAY_LIST_ADDRESS	= $5000
  1744 = 6000			VIDEO_RAM_ADDRESS	= $6000
  1745 = 8000			BITMAP_ADDRESS	= $8000
  1746 = 01EE			FRAME_SIZE	= $01EE
  1747 = 287A			FRAME	= DATAORIGIN+$0073
  1748 = 0004			@FORTMP_0285	= $0004
  1749 27F3			@exit
  1750
  1751 27F3 A2 00		@halt	ldx #0
  1752 27F5 9A				txs
  1753
  1754 27F6 60				rts
  1755
  1756 				; ------------------------------------------------------------
  1757
  1758 27F7 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1759
  1760 				; ------------------------------------------------------------
  1761
  1762 2807			.local	@DEFINES
  1763 2807			ATARI
  1764 				.endl
  1765
  1766 				.endl							; MAIN
  1767
  1768 				; ------------------------------------------------------------
  1769 				; ------------------------------------------------------------
  1770
  1771 				.macro	UNITINITIALIZATION
  1772 				
  1773 					.ifdef MAIN.SYSTEM.@UnitInit
  1774 					jsr MAIN.SYSTEM.@UnitInit
  1775 					eif
  1776 				
  1777 					.ifdef MAIN.ATARI.@UnitInit
  1778 					jsr MAIN.ATARI.@UnitInit
  1779 					eif
  1780 				
  1781 					.ifdef MAIN.CRT.@UnitInit
  1782 					jsr MAIN.CRT.@UnitInit
  1783 					eif
  1784 				
  1785 					.ifdef MAIN.RMT.@UnitInit
  1786 					jsr MAIN.RMT.@UnitInit
  1787 					eif
  1788 				
  1789 					.ifdef MAIN.GR10PP.@UnitInit
  1790 					jsr MAIN.GR10PP.@UnitInit
  1791 					eif
  1792 				
  1793 					.ifdef MAIN.TYPES.@UnitInit
  1794 					jsr MAIN.TYPES.@UnitInit
  1795 					eif
  1796 				
  1797 					.ifdef MAIN.GRAPH.@UnitInit
  1798 					jsr MAIN.GRAPH.@UnitInit
  1799 					eif
  1800 				.endm
  1801
  1802 				; ------------------------------------------------------------
  1803
  1804 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1805 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1805 				SYSTEM: $2189..$21DA
  1806 					eif
  1807
  1808 					ift .SIZEOF(MAIN.ATARI) > 0
  1809 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1810 					eif
  1811
  1812 					ift .SIZEOF(MAIN.CRT) > 0
  1813 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1813 				CRT: $21DB..$21EE
  1814 					eif
  1815
  1816 					ift .SIZEOF(MAIN.RMT) > 0
  1817 					.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
  1817 				RMT: $21EF..$21FD
  1818 					eif
  1819
  1820 					ift .SIZEOF(MAIN.GR10PP) > 0
  1821 					.print 'GR10PP: ',MAIN.GR10PP,'..',MAIN.GR10PP+.SIZEOF(MAIN.GR10PP)-1
  1821 				GR10PP: $21FE..$2415
  1822 					eif
  1823
  1824 					ift .SIZEOF(MAIN.TYPES) > 0
  1825 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1826 					eif
  1827
  1828 					ift .SIZEOF(MAIN.GRAPH) > 0
  1829 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1829 				GRAPH: $2416..$2668
  1830 					eif
  1831
  1832 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1832 				CODE: $2000..$2806
  1833
  1834 				; ------------------------------------------------------------
  1835
  1836 2807			DATAORIGIN
  1837 2807 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1838 281F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1839 2837 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $27 $00 $00 $00 $17
  1840
  1841 = 003D			VARINITSIZE	= *-DATAORIGIN
  1842 = 0074			VARDATASIZE	= 116
  1843
  1844 = 287B			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1845
  1846 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1846 				DATA: $2807..$287B
  1847
  1848 02E0-02E1> 5F 21			run START
  1849
  1850 				; ------------------------------------------------------------
  1851
  1852 				.macro	STATICDATA
  1853 				.endm
  1854
  1855 					end
