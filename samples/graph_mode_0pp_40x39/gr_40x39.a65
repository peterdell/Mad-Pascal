; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/12] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'f8x6.fnt' CHARSET_RAM_ADDRESS 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 053  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	TEXTMODE					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex

; ---------------------  ASM Block 059  ---------------------

	txa:pha

	@clrscr

	pla:tax


; ------------------------------------------------------------

MODE	= DATAORIGIN+$000D

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	M0PP						; UNIT

.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 060  ---------------------


	mva #2	VS_Upper

	lda chbas
	sta chbase
	eor #4
	sta VS_chbase

	jmp xitvbv

	rti						; ret
.endl

.local	G0DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 061  ---------------------


dli
    pha

    sta WSYNC

    lda #0
.def :VS_Upper = *-1
    sta VSCROL

    eor #7
    sta VS_Upper

    lda #0
.def :VS_chbase = *-1
    sta chbase

    eor #4
    sta VS_chbase

    pla

	rti						; ret
.endl

.local	SETFONT						; PROCEDURE | ASSEMBLER

; ---------------------  ASM Block 062  ---------------------

	txa:pha

	lda chbas
	sta fontcopy1+2
	add #4
	sta fontcopy2+2

	lda #0
	sta fontcopy1+1
	lda #2
	sta fontcopy2+1

	ldx #127
fontcopy0  ldy #5
fontcopy1  lda $ff00,y
fontcopy2  sta $ff02,y-
           bpl fontcopy1

	adw fontcopy1+1 #8
	adw fontcopy2+1 #8

	dex
	bpl fontcopy0

	pla:tax

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKE						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x B
	dex

; optimize OK (M0PP), line = 120

	mwy DLIST :bp2
	ldy #$00
	lda B
	sta (:bp2),y

; optimize FAIL (0, M0PP), line = 121
	inc DLIST
	sne
	inc DLIST+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0010

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	DLPOKEW						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x W
	mva :STACKORIGIN+STACKWIDTH,x W+1
	dex

; optimize OK (M0PP), line = 126

	mwy DLIST :bp2
	ldy #$00
	lda W
	sta (:bp2),y

; optimize OK (M0PP), line = 127

	lda W+1
	iny
	sta (:bp2),y

; optimize OK (M0PP), line = 128

	lda DLIST
	add #$02
	sta DLIST
	scc
	inc DLIST+1

; ------------------------------------------------------------

W	= DATAORIGIN+$0011

@VarData	= W
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BUILDDISPLAYLIST				; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex

; optimize OK (M0PP), line = 133

	mva DLISTADDRESS DLIST
	mva DLISTADDRESS+1 DLIST+1

; --- WhileProlog
	jmp l_009D
l_009E

; optimize FAIL ('DLPOKE', M0PP), line = 135
	inx
	mva #$70 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL (0, M0PP), line = 136
	dec BLANKS
l_009D

; optimize OK (M0PP), line = 134

	lda BLANKS
	jne l_009E

; optimize FAIL ('DLPOKE', M0PP), line = 138
	inx
	mva #$A0 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKE', M0PP), line = 139
	inx
	mva #$E2 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', M0PP), line = 140
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; optimize OK (M0PP), line = 142

	lda LINES
	lsr @
	sub #$01
	sta LINES

; --- WhileProlog
	jmp l_00C7
l_00C8

; optimize FAIL ('DLPOKEW', M0PP), line = 144
	inx
	mva #$82 :STACKORIGIN,x
	mva #$A2 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; optimize FAIL (0, M0PP), line = 145
	dec LINES
l_00C7

; optimize OK (M0PP), line = 143

	lda LINES
	jne l_00C8

; optimize FAIL ('DLPOKE', M0PP), line = 147
	inx
	mva #$41 :STACKORIGIN,x
	jsr DLPOKE

; optimize FAIL ('DLPOKEW', M0PP), line = 148
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	jsr DLPOKEW

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$0013
VRAMADDRESS	= DATAORIGIN+$0015
LINES	= DATAORIGIN+$0017
BLANKS	= DATAORIGIN+$0018

@VarData	= DLISTADDRESS
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	GR0INIT						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x BLANKS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x LINES
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VRAMADDRESS
	mva :STACKORIGIN+STACKWIDTH,x VRAMADDRESS+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DLISTADDRESS
	mva :STACKORIGIN+STACKWIDTH,x DLISTADDRESS+1
	dex

; optimize FAIL ('SETFONT', M0PP), line = 153
	jsr SETFONT

; optimize FAIL ('BUILDDISPLAYLIST', M0PP), line = 154
	inx
	mva DLISTADDRESS :STACKORIGIN,x
	mva DLISTADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva VRAMADDRESS :STACKORIGIN,x
	mva VRAMADDRESS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LINES :STACKORIGIN,x
	inx
	mva BLANKS :STACKORIGIN,x
	jsr BUILDDISPLAYLIST

; optimize OK (M0PP), line = 155

	mva DLISTADDRESS ATARI.SDLSTL
	mva DLISTADDRESS+1 ATARI.SDLSTL+1

; optimize OK (M0PP), line = 156

	mva VRAMADDRESS ATARI.SAVMSC
	mva VRAMADDRESS+1 ATARI.SAVMSC+1

; optimize OK (M0PP), line = 157

	lda <VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >VBL
	sta VVBLKD+1

; optimize OK (M0PP), line = 158

	mva <G0DLI VDSLST
	mva >G0DLI VDSLST+1

; optimize OK (M0PP), line = 159

	mva #$C0 ATARI.NMIEN

; ------------------------------------------------------------

DLISTADDRESS	= DATAORIGIN+$0019
VRAMADDRESS	= DATAORIGIN+$001B
LINES	= DATAORIGIN+$001D
BLANKS	= DATAORIGIN+$001E

@VarData	= DLISTADDRESS
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; ---------------------  ASM Block 063  ---------------------



;
; Fast E: accelerator
; -------------------
;
; Written by DMSC, loosely based on HYP.COM by Doug Wokoun and John Harris.
;

EDITRV	= $E400

ATCLR	= $7d
ATESC	= $1b

	txa:pha

	.ifdef MAIN.@DEFINES.ROMOFF
		inc portb
	.endif


	; Search E: handler in HATABS
	ldy	#<HATABS+1-3
	lda	#'E'
search_e:
	iny
	iny
	iny
	cmp	-1+(HATABS & $FF00),y
	bne	search_e

	; Check high-part of HATABS address
	lda	1+(HATABS & $FF00),y
	cmp	#>$C000
	bcs	install_ok

	ldy #130

	jmp handler_end

install_ok

	; copy EDITOR handler to new HATABS
	ldx	#$0F
copy_e: lda	EDITRV,x
	sta	handler_hatab,x
	dex
	bpl	copy_e

	; Patch E: HATABS position in out handler
	sty	hatabs_l+3
	iny
	sty	hatabs_h+3

	; Also patch real DOSINI and EDITOR PUT
;	lda	DOSINI
;	lda	DOSINI+1
;	ldy	EDITRV+6
;	ldx	EDITRV+7
;	iny
;	sne
;	inx
;	sty	jhand+1
;	stx	jhand+2

	; Patch new HATABS, stored in current MEMLO
	lda	<EFAST
	ldx	>EFAST

	sta	hatabs_l+1
	stx	hatabs_h+1

	; And store our new PUT
	; (note, C is set here, so adds 1 less)
	adc	#(handler_put-1 - handler_hatab) - 1
	scc
	inx
	sta	handler_hatab+6
	stx	handler_hatab+7

hatabs_l:
	lda	#$00
	sta	HATABS+1
hatabs_h:
	ldx	#$00
	stx	HATABS+2

	ldy #1

	jmp handler_end

EFAST

handler_hatab	.ds 16

stop	ldy #0
	rts

	; Handler PUT function
handler_put:
	; Don't handle wrap at last row!
	ldx	ROWCRS
	cpx	#39
	bcs	stop

	; And don't handle in graphics modes
	ldx	DINDEX
	bne	jhand

	; Check for control character:
	;  $1B, $1C, $1D, $1E, $1F, $7D, $7E, $7F
	;  $9B, $9C, $9D, $9E, $9F, $FD, $FE, $FF
	;
	; To ignore high bit, store in X the shifted character
	asl
	tay
	; Restore full value in A
	ror

	cmp	#$9b
	beq	_eol

	cpy	#2*ATCLR	; chars >= $7D are special chars
	bcs	jhand
	cpy	#$C0		; chars >= $60 don't need conversion
	bcs	conv_ok
	cpy	#$40		; chars >= $20 needs -$20 (upper case and numbers)
	bcs	normal_char
	cpy	#2*ATESC	; chars <= $1B needs +$40 (control chars)
	bcc	ctrl_char

	; Special character jump to old handler
jhand:	;jmp	$FFFF

	jmp stop


_eol	inc	ROWCRS
	lda	LMARGN
	sta	COLCRS

	; Reset ESC flag
	ldy	#$00
	sty	ESCFLG

	sty	LOGCOL

	; Return with Y = 1 (no error)
	iny
	rts

	; Convert ATASCII to screen codes
ctrl_char:
	adc	#$61		; Chars from $00 to $1F, add $40 (+$21, subtracted bellow)
normal_char:
	sbc	#$20		; Chars from $20 to $5F, subtract $20
conv_ok:

	; Check break and stop on START/STOP flag
wait_stop:
	ldy	BRKKEY
	beq	jhand
	ldy	SSFLAG
	bne	wait_stop
	; From here onwards, Y = 0 always!

	; Check if we need to recalculate cursor position
	cpx	OLDCOL
	bne	calc_adr
	ldx	ROWCRS
	cpx	OLDROW
	beq	skip_adr

	; Clear current cursor position and calculate new cursor address
calc_adr:
	pha			; Save character on STACK

	lda	OLDCHR		; Clear cursor
	sta	(OLDADR),y

	sty	OLDADR+1	; set OLDADR+1 to 0

	lda	ROWCRS		; max =  255
	sta	OLDROW

        ldx     #0              ; clear high-byte

        asl     @		; * 2
        bcc     mul4            ; high-byte affected?
        ldx     #2              ; this will be the 1st high-bit soon...

mul4:   asl     @               ; * 4
        bcc     mul5            ; high-byte affected?
        inx                     ; => yes, apply to 0 high-bit
        clc                     ; prepare addition

mul5:   adc     ROWCRS		; * 5
        bcc     mul10		; high-byte affected?
        inx			; yes, correct...

mul10:  stx     OLDADR+1	; continue with classic shifting...

        asl     @		; * 10
        rol     OLDADR+1

        asl     @		; * 20
        rol     OLDADR+1

        asl     @		; * 40
        rol     OLDADR+1

	adc	COLCRS		; max = 959
	bcc	@+
	inc	OLDADR+1
	clc
@
	adc	SAVMSC
	sta	OLDADR
	lda	OLDADR+1
	adc	SAVMSC+1
	sta	OLDADR+1

	pla

skip_adr:
	; Store new character
	sta	(OLDADR),y
	; Go to next column
	inc	OLDADR
	sne
	inc	OLDADR+1

	; Read new character under cursor
	lda	(OLDADR),y
	sta	OLDCHR

	ldx	CRSINH
	bne	no_cursor
	; Draw cursor
	eor	#$80
	sta	(OLDADR),y
no_cursor:

	; Update column
	ldx	COLCRS

	cpx	RMARGN
	bcc	@+

	inc	ROWCRS
	ldx	LMARGN
	dex
@
	inx

	stx	COLCRS
	stx	OLDCOL
	inc	LOGCOL

	; Reset ESC flag
	sty	ESCFLG

	; Return with Y = 1 (no error)
	iny
	rts

; End of resident handler
handler_end:

	.ifdef MAIN.@DEFINES.ROMOFF
		dec portb
	.endif

	mva #$ff OLDROW

	pla:tax


; optimize FAIL ('CRT.TEXTMODE', M0PP), line = 446
	inx
	mva #$00 :STACKORIGIN,x
	jsr CRT.TEXTMODE

	rts

; ------------------------------------------------------------

DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_MODE_320X192G2	= $0F
DL_JVB	= $41
DLIST	= DATAORIGIN+$000E

.endl							; UNIT M0PP
l_0007

; optimize OK (gr_40x39.pas), line = 17

	mva #$A0 ATARI.CHBAS

; optimize FAIL ('M0PP.GR0INIT', gr_40x39.pas), line = 19
	inx
	mva #$00 :STACKORIGIN,x
	mva #$B8 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$A8 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$28 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr M0PP.GR0INIT
; --- For

; optimize OK (gr_40x39.pas), line = 22

	mva #$00 I
	sta I+1

; optimize OK (gr_40x39.pas), line = 22

l_011E
; --- ForToDoCondition

; optimize OK (gr_40x39.pas), line = 22

	lda I+1
	bne @+
	lda I
	cmp #$27
@
	jcs l_012A

; optimize FAIL (100, gr_40x39.pas), line = 22
	lda I
	ldy I+1
	jsr @printWORD._ay
	@printEOL
	inc I
	sne
	inc I+1
	jne l_011E
l_012A

; --- RepeatUntilProlog
l_0137

; optimize FAIL ('CRT.KEYPRESSED', gr_40x39.pas), line = 25
	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_0137

; ------------------------------------------------------------

DISPLAY_LIST_ADDRESS	= $B800
CHARSET_RAM_ADDRESS	= $A000
VIDEO_RAM_ADDRESS	= $A800
I	= DATAORIGIN+$001F
@FORTMP_011B	= $26
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.M0PP.@UnitInit
	jsr MAIN.M0PP.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.M0PP) > 0
	.print 'M0PP: ',MAIN.M0PP,'..',MAIN.M0PP+.SIZEOF(MAIN.M0PP)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 33

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
